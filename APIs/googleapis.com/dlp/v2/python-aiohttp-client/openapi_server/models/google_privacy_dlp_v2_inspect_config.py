# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_custom_info_type import GooglePrivacyDlpV2CustomInfoType
from openapi_server.models.google_privacy_dlp_v2_finding_limits import GooglePrivacyDlpV2FindingLimits
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server.models.google_privacy_dlp_v2_info_type_likelihood import GooglePrivacyDlpV2InfoTypeLikelihood
from openapi_server.models.google_privacy_dlp_v2_inspection_rule_set import GooglePrivacyDlpV2InspectionRuleSet
from openapi_server import util


class GooglePrivacyDlpV2InspectConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_options: List[str]=None, custom_info_types: List[GooglePrivacyDlpV2CustomInfoType]=None, exclude_info_types: bool=None, include_quote: bool=None, info_types: List[GooglePrivacyDlpV2InfoType]=None, limits: GooglePrivacyDlpV2FindingLimits=None, min_likelihood: str=None, min_likelihood_per_info_type: List[GooglePrivacyDlpV2InfoTypeLikelihood]=None, rule_set: List[GooglePrivacyDlpV2InspectionRuleSet]=None):
        """GooglePrivacyDlpV2InspectConfig - a model defined in OpenAPI

        :param content_options: The content_options of this GooglePrivacyDlpV2InspectConfig.
        :param custom_info_types: The custom_info_types of this GooglePrivacyDlpV2InspectConfig.
        :param exclude_info_types: The exclude_info_types of this GooglePrivacyDlpV2InspectConfig.
        :param include_quote: The include_quote of this GooglePrivacyDlpV2InspectConfig.
        :param info_types: The info_types of this GooglePrivacyDlpV2InspectConfig.
        :param limits: The limits of this GooglePrivacyDlpV2InspectConfig.
        :param min_likelihood: The min_likelihood of this GooglePrivacyDlpV2InspectConfig.
        :param min_likelihood_per_info_type: The min_likelihood_per_info_type of this GooglePrivacyDlpV2InspectConfig.
        :param rule_set: The rule_set of this GooglePrivacyDlpV2InspectConfig.
        """
        self.openapi_types = {
            'content_options': List[str],
            'custom_info_types': List[GooglePrivacyDlpV2CustomInfoType],
            'exclude_info_types': bool,
            'include_quote': bool,
            'info_types': List[GooglePrivacyDlpV2InfoType],
            'limits': GooglePrivacyDlpV2FindingLimits,
            'min_likelihood': str,
            'min_likelihood_per_info_type': List[GooglePrivacyDlpV2InfoTypeLikelihood],
            'rule_set': List[GooglePrivacyDlpV2InspectionRuleSet]
        }

        self.attribute_map = {
            'content_options': 'contentOptions',
            'custom_info_types': 'customInfoTypes',
            'exclude_info_types': 'excludeInfoTypes',
            'include_quote': 'includeQuote',
            'info_types': 'infoTypes',
            'limits': 'limits',
            'min_likelihood': 'minLikelihood',
            'min_likelihood_per_info_type': 'minLikelihoodPerInfoType',
            'rule_set': 'ruleSet'
        }

        self._content_options = content_options
        self._custom_info_types = custom_info_types
        self._exclude_info_types = exclude_info_types
        self._include_quote = include_quote
        self._info_types = info_types
        self._limits = limits
        self._min_likelihood = min_likelihood
        self._min_likelihood_per_info_type = min_likelihood_per_info_type
        self._rule_set = rule_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2InspectConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2InspectConfig of this GooglePrivacyDlpV2InspectConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_options(self):
        """Gets the content_options of this GooglePrivacyDlpV2InspectConfig.

        Deprecated and unused.

        :return: The content_options of this GooglePrivacyDlpV2InspectConfig.
        :rtype: List[str]
        """
        return self._content_options

    @content_options.setter
    def content_options(self, content_options):
        """Sets the content_options of this GooglePrivacyDlpV2InspectConfig.

        Deprecated and unused.

        :param content_options: The content_options of this GooglePrivacyDlpV2InspectConfig.
        :type content_options: List[str]
        """
        allowed_values = ["CONTENT_UNSPECIFIED", "CONTENT_TEXT", "CONTENT_IMAGE"]  # noqa: E501
        if not set(content_options).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `content_options` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(content_options) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._content_options = content_options

    @property
    def custom_info_types(self):
        """Gets the custom_info_types of this GooglePrivacyDlpV2InspectConfig.

        CustomInfoTypes provided by the user. See https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes to learn more.

        :return: The custom_info_types of this GooglePrivacyDlpV2InspectConfig.
        :rtype: List[GooglePrivacyDlpV2CustomInfoType]
        """
        return self._custom_info_types

    @custom_info_types.setter
    def custom_info_types(self, custom_info_types):
        """Sets the custom_info_types of this GooglePrivacyDlpV2InspectConfig.

        CustomInfoTypes provided by the user. See https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes to learn more.

        :param custom_info_types: The custom_info_types of this GooglePrivacyDlpV2InspectConfig.
        :type custom_info_types: List[GooglePrivacyDlpV2CustomInfoType]
        """

        self._custom_info_types = custom_info_types

    @property
    def exclude_info_types(self):
        """Gets the exclude_info_types of this GooglePrivacyDlpV2InspectConfig.

        When true, excludes type information of the findings. This is not used for data profiling.

        :return: The exclude_info_types of this GooglePrivacyDlpV2InspectConfig.
        :rtype: bool
        """
        return self._exclude_info_types

    @exclude_info_types.setter
    def exclude_info_types(self, exclude_info_types):
        """Sets the exclude_info_types of this GooglePrivacyDlpV2InspectConfig.

        When true, excludes type information of the findings. This is not used for data profiling.

        :param exclude_info_types: The exclude_info_types of this GooglePrivacyDlpV2InspectConfig.
        :type exclude_info_types: bool
        """

        self._exclude_info_types = exclude_info_types

    @property
    def include_quote(self):
        """Gets the include_quote of this GooglePrivacyDlpV2InspectConfig.

        When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.

        :return: The include_quote of this GooglePrivacyDlpV2InspectConfig.
        :rtype: bool
        """
        return self._include_quote

    @include_quote.setter
    def include_quote(self, include_quote):
        """Sets the include_quote of this GooglePrivacyDlpV2InspectConfig.

        When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.

        :param include_quote: The include_quote of this GooglePrivacyDlpV2InspectConfig.
        :type include_quote: bool
        """

        self._include_quote = include_quote

    @property
    def info_types(self):
        """Gets the info_types of this GooglePrivacyDlpV2InspectConfig.

        Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.

        :return: The info_types of this GooglePrivacyDlpV2InspectConfig.
        :rtype: List[GooglePrivacyDlpV2InfoType]
        """
        return self._info_types

    @info_types.setter
    def info_types(self, info_types):
        """Sets the info_types of this GooglePrivacyDlpV2InspectConfig.

        Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.

        :param info_types: The info_types of this GooglePrivacyDlpV2InspectConfig.
        :type info_types: List[GooglePrivacyDlpV2InfoType]
        """

        self._info_types = info_types

    @property
    def limits(self):
        """Gets the limits of this GooglePrivacyDlpV2InspectConfig.


        :return: The limits of this GooglePrivacyDlpV2InspectConfig.
        :rtype: GooglePrivacyDlpV2FindingLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this GooglePrivacyDlpV2InspectConfig.


        :param limits: The limits of this GooglePrivacyDlpV2InspectConfig.
        :type limits: GooglePrivacyDlpV2FindingLimits
        """

        self._limits = limits

    @property
    def min_likelihood(self):
        """Gets the min_likelihood of this GooglePrivacyDlpV2InspectConfig.

        Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/sensitive-data-protection/docs/likelihood).

        :return: The min_likelihood of this GooglePrivacyDlpV2InspectConfig.
        :rtype: str
        """
        return self._min_likelihood

    @min_likelihood.setter
    def min_likelihood(self, min_likelihood):
        """Sets the min_likelihood of this GooglePrivacyDlpV2InspectConfig.

        Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/sensitive-data-protection/docs/likelihood).

        :param min_likelihood: The min_likelihood of this GooglePrivacyDlpV2InspectConfig.
        :type min_likelihood: str
        """
        allowed_values = ["LIKELIHOOD_UNSPECIFIED", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if min_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `min_likelihood` ({0}), must be one of {1}"
                .format(min_likelihood, allowed_values)
            )

        self._min_likelihood = min_likelihood

    @property
    def min_likelihood_per_info_type(self):
        """Gets the min_likelihood_per_info_type of this GooglePrivacyDlpV2InspectConfig.

        Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.

        :return: The min_likelihood_per_info_type of this GooglePrivacyDlpV2InspectConfig.
        :rtype: List[GooglePrivacyDlpV2InfoTypeLikelihood]
        """
        return self._min_likelihood_per_info_type

    @min_likelihood_per_info_type.setter
    def min_likelihood_per_info_type(self, min_likelihood_per_info_type):
        """Sets the min_likelihood_per_info_type of this GooglePrivacyDlpV2InspectConfig.

        Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.

        :param min_likelihood_per_info_type: The min_likelihood_per_info_type of this GooglePrivacyDlpV2InspectConfig.
        :type min_likelihood_per_info_type: List[GooglePrivacyDlpV2InfoTypeLikelihood]
        """

        self._min_likelihood_per_info_type = min_likelihood_per_info_type

    @property
    def rule_set(self):
        """Gets the rule_set of this GooglePrivacyDlpV2InspectConfig.

        Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.

        :return: The rule_set of this GooglePrivacyDlpV2InspectConfig.
        :rtype: List[GooglePrivacyDlpV2InspectionRuleSet]
        """
        return self._rule_set

    @rule_set.setter
    def rule_set(self, rule_set):
        """Sets the rule_set of this GooglePrivacyDlpV2InspectConfig.

        Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.

        :param rule_set: The rule_set of this GooglePrivacyDlpV2InspectConfig.
        :type rule_set: List[GooglePrivacyDlpV2InspectionRuleSet]
        """

        self._rule_set = rule_set
