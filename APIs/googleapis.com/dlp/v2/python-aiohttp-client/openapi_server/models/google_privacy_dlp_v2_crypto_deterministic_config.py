# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_crypto_key import GooglePrivacyDlpV2CryptoKey
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server import util


class GooglePrivacyDlpV2CryptoDeterministicConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: GooglePrivacyDlpV2FieldId=None, crypto_key: GooglePrivacyDlpV2CryptoKey=None, surrogate_info_type: GooglePrivacyDlpV2InfoType=None):
        """GooglePrivacyDlpV2CryptoDeterministicConfig - a model defined in OpenAPI

        :param context: The context of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :param crypto_key: The crypto_key of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :param surrogate_info_type: The surrogate_info_type of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        """
        self.openapi_types = {
            'context': GooglePrivacyDlpV2FieldId,
            'crypto_key': GooglePrivacyDlpV2CryptoKey,
            'surrogate_info_type': GooglePrivacyDlpV2InfoType
        }

        self.attribute_map = {
            'context': 'context',
            'crypto_key': 'cryptoKey',
            'surrogate_info_type': 'surrogateInfoType'
        }

        self._context = context
        self._crypto_key = crypto_key
        self._surrogate_info_type = surrogate_info_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CryptoDeterministicConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CryptoDeterministicConfig of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :return: The context of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :rtype: GooglePrivacyDlpV2FieldId
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :param context: The context of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :type context: GooglePrivacyDlpV2FieldId
        """

        self._context = context

    @property
    def crypto_key(self):
        """Gets the crypto_key of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :return: The crypto_key of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :rtype: GooglePrivacyDlpV2CryptoKey
        """
        return self._crypto_key

    @crypto_key.setter
    def crypto_key(self, crypto_key):
        """Sets the crypto_key of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :param crypto_key: The crypto_key of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :type crypto_key: GooglePrivacyDlpV2CryptoKey
        """

        self._crypto_key = crypto_key

    @property
    def surrogate_info_type(self):
        """Gets the surrogate_info_type of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :return: The surrogate_info_type of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._surrogate_info_type

    @surrogate_info_type.setter
    def surrogate_info_type(self, surrogate_info_type):
        """Sets the surrogate_info_type of this GooglePrivacyDlpV2CryptoDeterministicConfig.


        :param surrogate_info_type: The surrogate_info_type of this GooglePrivacyDlpV2CryptoDeterministicConfig.
        :type surrogate_info_type: GooglePrivacyDlpV2InfoType
        """

        self._surrogate_info_type = surrogate_info_type
