# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_record_condition import GooglePrivacyDlpV2RecordCondition
from openapi_server import util


class GooglePrivacyDlpV2RecordSuppression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: GooglePrivacyDlpV2RecordCondition=None):
        """GooglePrivacyDlpV2RecordSuppression - a model defined in OpenAPI

        :param condition: The condition of this GooglePrivacyDlpV2RecordSuppression.
        """
        self.openapi_types = {
            'condition': GooglePrivacyDlpV2RecordCondition
        }

        self.attribute_map = {
            'condition': 'condition'
        }

        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2RecordSuppression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2RecordSuppression of this GooglePrivacyDlpV2RecordSuppression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this GooglePrivacyDlpV2RecordSuppression.


        :return: The condition of this GooglePrivacyDlpV2RecordSuppression.
        :rtype: GooglePrivacyDlpV2RecordCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GooglePrivacyDlpV2RecordSuppression.


        :param condition: The condition of this GooglePrivacyDlpV2RecordSuppression.
        :type condition: GooglePrivacyDlpV2RecordCondition
        """

        self._condition = condition
