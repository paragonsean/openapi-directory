# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_crypto_key import GooglePrivacyDlpV2CryptoKey
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server import util


class GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_alphabet: str=None, context: GooglePrivacyDlpV2FieldId=None, crypto_key: GooglePrivacyDlpV2CryptoKey=None, custom_alphabet: str=None, radix: int=None, surrogate_info_type: GooglePrivacyDlpV2InfoType=None):
        """GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig - a model defined in OpenAPI

        :param common_alphabet: The common_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :param context: The context of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :param crypto_key: The crypto_key of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :param custom_alphabet: The custom_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :param radix: The radix of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :param surrogate_info_type: The surrogate_info_type of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        """
        self.openapi_types = {
            'common_alphabet': str,
            'context': GooglePrivacyDlpV2FieldId,
            'crypto_key': GooglePrivacyDlpV2CryptoKey,
            'custom_alphabet': str,
            'radix': int,
            'surrogate_info_type': GooglePrivacyDlpV2InfoType
        }

        self.attribute_map = {
            'common_alphabet': 'commonAlphabet',
            'context': 'context',
            'crypto_key': 'cryptoKey',
            'custom_alphabet': 'customAlphabet',
            'radix': 'radix',
            'surrogate_info_type': 'surrogateInfoType'
        }

        self._common_alphabet = common_alphabet
        self._context = context
        self._crypto_key = crypto_key
        self._custom_alphabet = custom_alphabet
        self._radix = radix
        self._surrogate_info_type = surrogate_info_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_alphabet(self):
        """Gets the common_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        Common alphabets.

        :return: The common_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: str
        """
        return self._common_alphabet

    @common_alphabet.setter
    def common_alphabet(self, common_alphabet):
        """Sets the common_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        Common alphabets.

        :param common_alphabet: The common_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type common_alphabet: str
        """
        allowed_values = ["FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED", "NUMERIC", "HEXADECIMAL", "UPPER_CASE_ALPHA_NUMERIC", "ALPHA_NUMERIC"]  # noqa: E501
        if common_alphabet not in allowed_values:
            raise ValueError(
                "Invalid value for `common_alphabet` ({0}), must be one of {1}"
                .format(common_alphabet, allowed_values)
            )

        self._common_alphabet = common_alphabet

    @property
    def context(self):
        """Gets the context of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :return: The context of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: GooglePrivacyDlpV2FieldId
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :param context: The context of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type context: GooglePrivacyDlpV2FieldId
        """

        self._context = context

    @property
    def crypto_key(self):
        """Gets the crypto_key of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :return: The crypto_key of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: GooglePrivacyDlpV2CryptoKey
        """
        return self._crypto_key

    @crypto_key.setter
    def crypto_key(self, crypto_key):
        """Sets the crypto_key of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :param crypto_key: The crypto_key of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type crypto_key: GooglePrivacyDlpV2CryptoKey
        """

        self._crypto_key = crypto_key

    @property
    def custom_alphabet(self):
        """Gets the custom_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/

        :return: The custom_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: str
        """
        return self._custom_alphabet

    @custom_alphabet.setter
    def custom_alphabet(self, custom_alphabet):
        """Sets the custom_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/

        :param custom_alphabet: The custom_alphabet of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type custom_alphabet: str
        """

        self._custom_alphabet = custom_alphabet

    @property
    def radix(self):
        """Gets the radix of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        The native way to select the alphabet. Must be in the range [2, 95].

        :return: The radix of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: int
        """
        return self._radix

    @radix.setter
    def radix(self, radix):
        """Sets the radix of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.

        The native way to select the alphabet. Must be in the range [2, 95].

        :param radix: The radix of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type radix: int
        """

        self._radix = radix

    @property
    def surrogate_info_type(self):
        """Gets the surrogate_info_type of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :return: The surrogate_info_type of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._surrogate_info_type

    @surrogate_info_type.setter
    def surrogate_info_type(self, surrogate_info_type):
        """Sets the surrogate_info_type of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.


        :param surrogate_info_type: The surrogate_info_type of this GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.
        :type surrogate_info_type: GooglePrivacyDlpV2InfoType
        """

        self._surrogate_info_type = surrogate_info_type
