# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_data_profile_action import GooglePrivacyDlpV2DataProfileAction
from openapi_server.models.google_privacy_dlp_v2_data_profile_location import GooglePrivacyDlpV2DataProfileLocation
from openapi_server import util


class GooglePrivacyDlpV2DataProfileJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_profile_actions: List[GooglePrivacyDlpV2DataProfileAction]=None, inspect_templates: List[str]=None, location: GooglePrivacyDlpV2DataProfileLocation=None, project_id: str=None):
        """GooglePrivacyDlpV2DataProfileJobConfig - a model defined in OpenAPI

        :param data_profile_actions: The data_profile_actions of this GooglePrivacyDlpV2DataProfileJobConfig.
        :param inspect_templates: The inspect_templates of this GooglePrivacyDlpV2DataProfileJobConfig.
        :param location: The location of this GooglePrivacyDlpV2DataProfileJobConfig.
        :param project_id: The project_id of this GooglePrivacyDlpV2DataProfileJobConfig.
        """
        self.openapi_types = {
            'data_profile_actions': List[GooglePrivacyDlpV2DataProfileAction],
            'inspect_templates': List[str],
            'location': GooglePrivacyDlpV2DataProfileLocation,
            'project_id': str
        }

        self.attribute_map = {
            'data_profile_actions': 'dataProfileActions',
            'inspect_templates': 'inspectTemplates',
            'location': 'location',
            'project_id': 'projectId'
        }

        self._data_profile_actions = data_profile_actions
        self._inspect_templates = inspect_templates
        self._location = location
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DataProfileJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DataProfileJobConfig of this GooglePrivacyDlpV2DataProfileJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_profile_actions(self):
        """Gets the data_profile_actions of this GooglePrivacyDlpV2DataProfileJobConfig.

        Actions to execute at the completion of the job.

        :return: The data_profile_actions of this GooglePrivacyDlpV2DataProfileJobConfig.
        :rtype: List[GooglePrivacyDlpV2DataProfileAction]
        """
        return self._data_profile_actions

    @data_profile_actions.setter
    def data_profile_actions(self, data_profile_actions):
        """Sets the data_profile_actions of this GooglePrivacyDlpV2DataProfileJobConfig.

        Actions to execute at the completion of the job.

        :param data_profile_actions: The data_profile_actions of this GooglePrivacyDlpV2DataProfileJobConfig.
        :type data_profile_actions: List[GooglePrivacyDlpV2DataProfileAction]
        """

        self._data_profile_actions = data_profile_actions

    @property
    def inspect_templates(self):
        """Gets the inspect_templates of this GooglePrivacyDlpV2DataProfileJobConfig.

        Detection logic for profile generation. Not all template features are used by profiles. FindingLimits, include_quote and exclude_info_types have no impact on data profiling. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.

        :return: The inspect_templates of this GooglePrivacyDlpV2DataProfileJobConfig.
        :rtype: List[str]
        """
        return self._inspect_templates

    @inspect_templates.setter
    def inspect_templates(self, inspect_templates):
        """Sets the inspect_templates of this GooglePrivacyDlpV2DataProfileJobConfig.

        Detection logic for profile generation. Not all template features are used by profiles. FindingLimits, include_quote and exclude_info_types have no impact on data profiling. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.

        :param inspect_templates: The inspect_templates of this GooglePrivacyDlpV2DataProfileJobConfig.
        :type inspect_templates: List[str]
        """

        self._inspect_templates = inspect_templates

    @property
    def location(self):
        """Gets the location of this GooglePrivacyDlpV2DataProfileJobConfig.


        :return: The location of this GooglePrivacyDlpV2DataProfileJobConfig.
        :rtype: GooglePrivacyDlpV2DataProfileLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GooglePrivacyDlpV2DataProfileJobConfig.


        :param location: The location of this GooglePrivacyDlpV2DataProfileJobConfig.
        :type location: GooglePrivacyDlpV2DataProfileLocation
        """

        self._location = location

    @property
    def project_id(self):
        """Gets the project_id of this GooglePrivacyDlpV2DataProfileJobConfig.

        The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.

        :return: The project_id of this GooglePrivacyDlpV2DataProfileJobConfig.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GooglePrivacyDlpV2DataProfileJobConfig.

        The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.

        :param project_id: The project_id of this GooglePrivacyDlpV2DataProfileJobConfig.
        :type project_id: str
        """

        self._project_id = project_id
