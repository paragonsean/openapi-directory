# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2BigQueryTableTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, types: List[str]=None):
        """GooglePrivacyDlpV2BigQueryTableTypes - a model defined in OpenAPI

        :param types: The types of this GooglePrivacyDlpV2BigQueryTableTypes.
        """
        self.openapi_types = {
            'types': List[str]
        }

        self.attribute_map = {
            'types': 'types'
        }

        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2BigQueryTableTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2BigQueryTableTypes of this GooglePrivacyDlpV2BigQueryTableTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def types(self):
        """Gets the types of this GooglePrivacyDlpV2BigQueryTableTypes.

        A set of BigQuery table types.

        :return: The types of this GooglePrivacyDlpV2BigQueryTableTypes.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GooglePrivacyDlpV2BigQueryTableTypes.

        A set of BigQuery table types.

        :param types: The types of this GooglePrivacyDlpV2BigQueryTableTypes.
        :type types: List[str]
        """
        allowed_values = ["BIG_QUERY_TABLE_TYPE_UNSPECIFIED", "BIG_QUERY_TABLE_TYPE_TABLE", "BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types
