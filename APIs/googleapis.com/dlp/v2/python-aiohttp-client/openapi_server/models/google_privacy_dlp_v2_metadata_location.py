# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_storage_metadata_label import GooglePrivacyDlpV2StorageMetadataLabel
from openapi_server import util


class GooglePrivacyDlpV2MetadataLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_label: GooglePrivacyDlpV2StorageMetadataLabel=None, type: str=None):
        """GooglePrivacyDlpV2MetadataLocation - a model defined in OpenAPI

        :param storage_label: The storage_label of this GooglePrivacyDlpV2MetadataLocation.
        :param type: The type of this GooglePrivacyDlpV2MetadataLocation.
        """
        self.openapi_types = {
            'storage_label': GooglePrivacyDlpV2StorageMetadataLabel,
            'type': str
        }

        self.attribute_map = {
            'storage_label': 'storageLabel',
            'type': 'type'
        }

        self._storage_label = storage_label
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2MetadataLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2MetadataLocation of this GooglePrivacyDlpV2MetadataLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_label(self):
        """Gets the storage_label of this GooglePrivacyDlpV2MetadataLocation.


        :return: The storage_label of this GooglePrivacyDlpV2MetadataLocation.
        :rtype: GooglePrivacyDlpV2StorageMetadataLabel
        """
        return self._storage_label

    @storage_label.setter
    def storage_label(self, storage_label):
        """Sets the storage_label of this GooglePrivacyDlpV2MetadataLocation.


        :param storage_label: The storage_label of this GooglePrivacyDlpV2MetadataLocation.
        :type storage_label: GooglePrivacyDlpV2StorageMetadataLabel
        """

        self._storage_label = storage_label

    @property
    def type(self):
        """Gets the type of this GooglePrivacyDlpV2MetadataLocation.

        Type of metadata containing the finding.

        :return: The type of this GooglePrivacyDlpV2MetadataLocation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GooglePrivacyDlpV2MetadataLocation.

        Type of metadata containing the finding.

        :param type: The type of this GooglePrivacyDlpV2MetadataLocation.
        :type type: str
        """
        allowed_values = ["METADATATYPE_UNSPECIFIED", "STORAGE_METADATA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
