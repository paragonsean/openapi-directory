# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server import util


class GooglePrivacyDlpV2RecordTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_timestamp: str=None, container_version: str=None, field_id: GooglePrivacyDlpV2FieldId=None):
        """GooglePrivacyDlpV2RecordTransformation - a model defined in OpenAPI

        :param container_timestamp: The container_timestamp of this GooglePrivacyDlpV2RecordTransformation.
        :param container_version: The container_version of this GooglePrivacyDlpV2RecordTransformation.
        :param field_id: The field_id of this GooglePrivacyDlpV2RecordTransformation.
        """
        self.openapi_types = {
            'container_timestamp': str,
            'container_version': str,
            'field_id': GooglePrivacyDlpV2FieldId
        }

        self.attribute_map = {
            'container_timestamp': 'containerTimestamp',
            'container_version': 'containerVersion',
            'field_id': 'fieldId'
        }

        self._container_timestamp = container_timestamp
        self._container_version = container_version
        self._field_id = field_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2RecordTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2RecordTransformation of this GooglePrivacyDlpV2RecordTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_timestamp(self):
        """Gets the container_timestamp of this GooglePrivacyDlpV2RecordTransformation.

        Findings container modification timestamp, if applicable.

        :return: The container_timestamp of this GooglePrivacyDlpV2RecordTransformation.
        :rtype: str
        """
        return self._container_timestamp

    @container_timestamp.setter
    def container_timestamp(self, container_timestamp):
        """Sets the container_timestamp of this GooglePrivacyDlpV2RecordTransformation.

        Findings container modification timestamp, if applicable.

        :param container_timestamp: The container_timestamp of this GooglePrivacyDlpV2RecordTransformation.
        :type container_timestamp: str
        """

        self._container_timestamp = container_timestamp

    @property
    def container_version(self):
        """Gets the container_version of this GooglePrivacyDlpV2RecordTransformation.

        Container version, if available (\"generation\" for Cloud Storage).

        :return: The container_version of this GooglePrivacyDlpV2RecordTransformation.
        :rtype: str
        """
        return self._container_version

    @container_version.setter
    def container_version(self, container_version):
        """Sets the container_version of this GooglePrivacyDlpV2RecordTransformation.

        Container version, if available (\"generation\" for Cloud Storage).

        :param container_version: The container_version of this GooglePrivacyDlpV2RecordTransformation.
        :type container_version: str
        """

        self._container_version = container_version

    @property
    def field_id(self):
        """Gets the field_id of this GooglePrivacyDlpV2RecordTransformation.


        :return: The field_id of this GooglePrivacyDlpV2RecordTransformation.
        :rtype: GooglePrivacyDlpV2FieldId
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this GooglePrivacyDlpV2RecordTransformation.


        :param field_id: The field_id of this GooglePrivacyDlpV2RecordTransformation.
        :type field_id: GooglePrivacyDlpV2FieldId
        """

        self._field_id = field_id
