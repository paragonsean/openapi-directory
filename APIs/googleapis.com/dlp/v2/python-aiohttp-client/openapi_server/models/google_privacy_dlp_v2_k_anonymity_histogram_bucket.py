# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_k_anonymity_equivalence_class import GooglePrivacyDlpV2KAnonymityEquivalenceClass
from openapi_server import util


class GooglePrivacyDlpV2KAnonymityHistogramBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_size: str=None, bucket_value_count: str=None, bucket_values: List[GooglePrivacyDlpV2KAnonymityEquivalenceClass]=None, equivalence_class_size_lower_bound: str=None, equivalence_class_size_upper_bound: str=None):
        """GooglePrivacyDlpV2KAnonymityHistogramBucket - a model defined in OpenAPI

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :param bucket_value_count: The bucket_value_count of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :param bucket_values: The bucket_values of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :param equivalence_class_size_lower_bound: The equivalence_class_size_lower_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :param equivalence_class_size_upper_bound: The equivalence_class_size_upper_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        """
        self.openapi_types = {
            'bucket_size': str,
            'bucket_value_count': str,
            'bucket_values': List[GooglePrivacyDlpV2KAnonymityEquivalenceClass],
            'equivalence_class_size_lower_bound': str,
            'equivalence_class_size_upper_bound': str
        }

        self.attribute_map = {
            'bucket_size': 'bucketSize',
            'bucket_value_count': 'bucketValueCount',
            'bucket_values': 'bucketValues',
            'equivalence_class_size_lower_bound': 'equivalenceClassSizeLowerBound',
            'equivalence_class_size_upper_bound': 'equivalenceClassSizeUpperBound'
        }

        self._bucket_size = bucket_size
        self._bucket_value_count = bucket_value_count
        self._bucket_values = bucket_values
        self._equivalence_class_size_lower_bound = equivalence_class_size_lower_bound
        self._equivalence_class_size_upper_bound = equivalence_class_size_upper_bound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2KAnonymityHistogramBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2KAnonymityHistogramBucket of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_size(self):
        """Gets the bucket_size of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Total number of equivalence classes in this bucket.

        :return: The bucket_size of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :rtype: str
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Total number of equivalence classes in this bucket.

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :type bucket_size: str
        """

        self._bucket_size = bucket_size

    @property
    def bucket_value_count(self):
        """Gets the bucket_value_count of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Total number of distinct equivalence classes in this bucket.

        :return: The bucket_value_count of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :rtype: str
        """
        return self._bucket_value_count

    @bucket_value_count.setter
    def bucket_value_count(self, bucket_value_count):
        """Sets the bucket_value_count of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Total number of distinct equivalence classes in this bucket.

        :param bucket_value_count: The bucket_value_count of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :type bucket_value_count: str
        """

        self._bucket_value_count = bucket_value_count

    @property
    def bucket_values(self):
        """Gets the bucket_values of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.

        :return: The bucket_values of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :rtype: List[GooglePrivacyDlpV2KAnonymityEquivalenceClass]
        """
        return self._bucket_values

    @bucket_values.setter
    def bucket_values(self, bucket_values):
        """Sets the bucket_values of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Sample of equivalence classes in this bucket. The total number of classes returned per bucket is capped at 20.

        :param bucket_values: The bucket_values of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :type bucket_values: List[GooglePrivacyDlpV2KAnonymityEquivalenceClass]
        """

        self._bucket_values = bucket_values

    @property
    def equivalence_class_size_lower_bound(self):
        """Gets the equivalence_class_size_lower_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Lower bound on the size of the equivalence classes in this bucket.

        :return: The equivalence_class_size_lower_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :rtype: str
        """
        return self._equivalence_class_size_lower_bound

    @equivalence_class_size_lower_bound.setter
    def equivalence_class_size_lower_bound(self, equivalence_class_size_lower_bound):
        """Sets the equivalence_class_size_lower_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Lower bound on the size of the equivalence classes in this bucket.

        :param equivalence_class_size_lower_bound: The equivalence_class_size_lower_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :type equivalence_class_size_lower_bound: str
        """

        self._equivalence_class_size_lower_bound = equivalence_class_size_lower_bound

    @property
    def equivalence_class_size_upper_bound(self):
        """Gets the equivalence_class_size_upper_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Upper bound on the size of the equivalence classes in this bucket.

        :return: The equivalence_class_size_upper_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :rtype: str
        """
        return self._equivalence_class_size_upper_bound

    @equivalence_class_size_upper_bound.setter
    def equivalence_class_size_upper_bound(self, equivalence_class_size_upper_bound):
        """Sets the equivalence_class_size_upper_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.

        Upper bound on the size of the equivalence classes in this bucket.

        :param equivalence_class_size_upper_bound: The equivalence_class_size_upper_bound of this GooglePrivacyDlpV2KAnonymityHistogramBucket.
        :type equivalence_class_size_upper_bound: str
        """

        self._equivalence_class_size_upper_bound = equivalence_class_size_upper_bound
