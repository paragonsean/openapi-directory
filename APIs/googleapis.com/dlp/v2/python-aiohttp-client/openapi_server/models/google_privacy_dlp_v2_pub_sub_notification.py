# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_data_profile_pub_sub_condition import GooglePrivacyDlpV2DataProfilePubSubCondition
from openapi_server import util


class GooglePrivacyDlpV2PubSubNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail_of_message: str=None, event: str=None, pubsub_condition: GooglePrivacyDlpV2DataProfilePubSubCondition=None, topic: str=None):
        """GooglePrivacyDlpV2PubSubNotification - a model defined in OpenAPI

        :param detail_of_message: The detail_of_message of this GooglePrivacyDlpV2PubSubNotification.
        :param event: The event of this GooglePrivacyDlpV2PubSubNotification.
        :param pubsub_condition: The pubsub_condition of this GooglePrivacyDlpV2PubSubNotification.
        :param topic: The topic of this GooglePrivacyDlpV2PubSubNotification.
        """
        self.openapi_types = {
            'detail_of_message': str,
            'event': str,
            'pubsub_condition': GooglePrivacyDlpV2DataProfilePubSubCondition,
            'topic': str
        }

        self.attribute_map = {
            'detail_of_message': 'detailOfMessage',
            'event': 'event',
            'pubsub_condition': 'pubsubCondition',
            'topic': 'topic'
        }

        self._detail_of_message = detail_of_message
        self._event = event
        self._pubsub_condition = pubsub_condition
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2PubSubNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2PubSubNotification of this GooglePrivacyDlpV2PubSubNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail_of_message(self):
        """Gets the detail_of_message of this GooglePrivacyDlpV2PubSubNotification.

        How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).

        :return: The detail_of_message of this GooglePrivacyDlpV2PubSubNotification.
        :rtype: str
        """
        return self._detail_of_message

    @detail_of_message.setter
    def detail_of_message(self, detail_of_message):
        """Sets the detail_of_message of this GooglePrivacyDlpV2PubSubNotification.

        How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).

        :param detail_of_message: The detail_of_message of this GooglePrivacyDlpV2PubSubNotification.
        :type detail_of_message: str
        """
        allowed_values = ["DETAIL_LEVEL_UNSPECIFIED", "TABLE_PROFILE", "RESOURCE_NAME"]  # noqa: E501
        if detail_of_message not in allowed_values:
            raise ValueError(
                "Invalid value for `detail_of_message` ({0}), must be one of {1}"
                .format(detail_of_message, allowed_values)
            )

        self._detail_of_message = detail_of_message

    @property
    def event(self):
        """Gets the event of this GooglePrivacyDlpV2PubSubNotification.

        The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.

        :return: The event of this GooglePrivacyDlpV2PubSubNotification.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GooglePrivacyDlpV2PubSubNotification.

        The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.

        :param event: The event of this GooglePrivacyDlpV2PubSubNotification.
        :type event: str
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "NEW_PROFILE", "CHANGED_PROFILE", "SCORE_INCREASED", "ERROR_CHANGED"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def pubsub_condition(self):
        """Gets the pubsub_condition of this GooglePrivacyDlpV2PubSubNotification.


        :return: The pubsub_condition of this GooglePrivacyDlpV2PubSubNotification.
        :rtype: GooglePrivacyDlpV2DataProfilePubSubCondition
        """
        return self._pubsub_condition

    @pubsub_condition.setter
    def pubsub_condition(self, pubsub_condition):
        """Sets the pubsub_condition of this GooglePrivacyDlpV2PubSubNotification.


        :param pubsub_condition: The pubsub_condition of this GooglePrivacyDlpV2PubSubNotification.
        :type pubsub_condition: GooglePrivacyDlpV2DataProfilePubSubCondition
        """

        self._pubsub_condition = pubsub_condition

    @property
    def topic(self):
        """Gets the topic of this GooglePrivacyDlpV2PubSubNotification.

        Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.

        :return: The topic of this GooglePrivacyDlpV2PubSubNotification.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this GooglePrivacyDlpV2PubSubNotification.

        Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.

        :param topic: The topic of this GooglePrivacyDlpV2PubSubNotification.
        :type topic: str
        """

        self._topic = topic
