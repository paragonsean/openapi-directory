# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2CharsToIgnore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, characters_to_skip: str=None, common_characters_to_ignore: str=None):
        """GooglePrivacyDlpV2CharsToIgnore - a model defined in OpenAPI

        :param characters_to_skip: The characters_to_skip of this GooglePrivacyDlpV2CharsToIgnore.
        :param common_characters_to_ignore: The common_characters_to_ignore of this GooglePrivacyDlpV2CharsToIgnore.
        """
        self.openapi_types = {
            'characters_to_skip': str,
            'common_characters_to_ignore': str
        }

        self.attribute_map = {
            'characters_to_skip': 'charactersToSkip',
            'common_characters_to_ignore': 'commonCharactersToIgnore'
        }

        self._characters_to_skip = characters_to_skip
        self._common_characters_to_ignore = common_characters_to_ignore

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CharsToIgnore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CharsToIgnore of this GooglePrivacyDlpV2CharsToIgnore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def characters_to_skip(self):
        """Gets the characters_to_skip of this GooglePrivacyDlpV2CharsToIgnore.

        Characters to not transform when masking.

        :return: The characters_to_skip of this GooglePrivacyDlpV2CharsToIgnore.
        :rtype: str
        """
        return self._characters_to_skip

    @characters_to_skip.setter
    def characters_to_skip(self, characters_to_skip):
        """Sets the characters_to_skip of this GooglePrivacyDlpV2CharsToIgnore.

        Characters to not transform when masking.

        :param characters_to_skip: The characters_to_skip of this GooglePrivacyDlpV2CharsToIgnore.
        :type characters_to_skip: str
        """

        self._characters_to_skip = characters_to_skip

    @property
    def common_characters_to_ignore(self):
        """Gets the common_characters_to_ignore of this GooglePrivacyDlpV2CharsToIgnore.

        Common characters to not transform when masking. Useful to avoid removing punctuation.

        :return: The common_characters_to_ignore of this GooglePrivacyDlpV2CharsToIgnore.
        :rtype: str
        """
        return self._common_characters_to_ignore

    @common_characters_to_ignore.setter
    def common_characters_to_ignore(self, common_characters_to_ignore):
        """Sets the common_characters_to_ignore of this GooglePrivacyDlpV2CharsToIgnore.

        Common characters to not transform when masking. Useful to avoid removing punctuation.

        :param common_characters_to_ignore: The common_characters_to_ignore of this GooglePrivacyDlpV2CharsToIgnore.
        :type common_characters_to_ignore: str
        """
        allowed_values = ["COMMON_CHARS_TO_IGNORE_UNSPECIFIED", "NUMERIC", "ALPHA_UPPER_CASE", "ALPHA_LOWER_CASE", "PUNCTUATION", "WHITESPACE"]  # noqa: E501
        if common_characters_to_ignore not in allowed_values:
            raise ValueError(
                "Invalid value for `common_characters_to_ignore` ({0}), must be one of {1}"
                .format(common_characters_to_ignore, allowed_values)
            )

        self._common_characters_to_ignore = common_characters_to_ignore
