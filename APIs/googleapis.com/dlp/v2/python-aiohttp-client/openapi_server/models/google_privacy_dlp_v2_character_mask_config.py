# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_chars_to_ignore import GooglePrivacyDlpV2CharsToIgnore
from openapi_server import util


class GooglePrivacyDlpV2CharacterMaskConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, characters_to_ignore: List[GooglePrivacyDlpV2CharsToIgnore]=None, masking_character: str=None, number_to_mask: int=None, reverse_order: bool=None):
        """GooglePrivacyDlpV2CharacterMaskConfig - a model defined in OpenAPI

        :param characters_to_ignore: The characters_to_ignore of this GooglePrivacyDlpV2CharacterMaskConfig.
        :param masking_character: The masking_character of this GooglePrivacyDlpV2CharacterMaskConfig.
        :param number_to_mask: The number_to_mask of this GooglePrivacyDlpV2CharacterMaskConfig.
        :param reverse_order: The reverse_order of this GooglePrivacyDlpV2CharacterMaskConfig.
        """
        self.openapi_types = {
            'characters_to_ignore': List[GooglePrivacyDlpV2CharsToIgnore],
            'masking_character': str,
            'number_to_mask': int,
            'reverse_order': bool
        }

        self.attribute_map = {
            'characters_to_ignore': 'charactersToIgnore',
            'masking_character': 'maskingCharacter',
            'number_to_mask': 'numberToMask',
            'reverse_order': 'reverseOrder'
        }

        self._characters_to_ignore = characters_to_ignore
        self._masking_character = masking_character
        self._number_to_mask = number_to_mask
        self._reverse_order = reverse_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CharacterMaskConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CharacterMaskConfig of this GooglePrivacyDlpV2CharacterMaskConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def characters_to_ignore(self):
        """Gets the characters_to_ignore of this GooglePrivacyDlpV2CharacterMaskConfig.

        When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.

        :return: The characters_to_ignore of this GooglePrivacyDlpV2CharacterMaskConfig.
        :rtype: List[GooglePrivacyDlpV2CharsToIgnore]
        """
        return self._characters_to_ignore

    @characters_to_ignore.setter
    def characters_to_ignore(self, characters_to_ignore):
        """Sets the characters_to_ignore of this GooglePrivacyDlpV2CharacterMaskConfig.

        When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.

        :param characters_to_ignore: The characters_to_ignore of this GooglePrivacyDlpV2CharacterMaskConfig.
        :type characters_to_ignore: List[GooglePrivacyDlpV2CharsToIgnore]
        """

        self._characters_to_ignore = characters_to_ignore

    @property
    def masking_character(self):
        """Gets the masking_character of this GooglePrivacyDlpV2CharacterMaskConfig.

        Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.

        :return: The masking_character of this GooglePrivacyDlpV2CharacterMaskConfig.
        :rtype: str
        """
        return self._masking_character

    @masking_character.setter
    def masking_character(self, masking_character):
        """Sets the masking_character of this GooglePrivacyDlpV2CharacterMaskConfig.

        Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.

        :param masking_character: The masking_character of this GooglePrivacyDlpV2CharacterMaskConfig.
        :type masking_character: str
        """

        self._masking_character = masking_character

    @property
    def number_to_mask(self):
        """Gets the number_to_mask of this GooglePrivacyDlpV2CharacterMaskConfig.

        Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.

        :return: The number_to_mask of this GooglePrivacyDlpV2CharacterMaskConfig.
        :rtype: int
        """
        return self._number_to_mask

    @number_to_mask.setter
    def number_to_mask(self, number_to_mask):
        """Sets the number_to_mask of this GooglePrivacyDlpV2CharacterMaskConfig.

        Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.

        :param number_to_mask: The number_to_mask of this GooglePrivacyDlpV2CharacterMaskConfig.
        :type number_to_mask: int
        """

        self._number_to_mask = number_to_mask

    @property
    def reverse_order(self):
        """Gets the reverse_order of this GooglePrivacyDlpV2CharacterMaskConfig.

        Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.

        :return: The reverse_order of this GooglePrivacyDlpV2CharacterMaskConfig.
        :rtype: bool
        """
        return self._reverse_order

    @reverse_order.setter
    def reverse_order(self, reverse_order):
        """Sets the reverse_order of this GooglePrivacyDlpV2CharacterMaskConfig.

        Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.

        :param reverse_order: The reverse_order of this GooglePrivacyDlpV2CharacterMaskConfig.
        :type reverse_order: bool
        """

        self._reverse_order = reverse_order
