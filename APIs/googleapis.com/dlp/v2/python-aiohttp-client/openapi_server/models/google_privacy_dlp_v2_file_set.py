# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_cloud_storage_regex_file_set import GooglePrivacyDlpV2CloudStorageRegexFileSet
from openapi_server import util


class GooglePrivacyDlpV2FileSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, regex_file_set: GooglePrivacyDlpV2CloudStorageRegexFileSet=None, url: str=None):
        """GooglePrivacyDlpV2FileSet - a model defined in OpenAPI

        :param regex_file_set: The regex_file_set of this GooglePrivacyDlpV2FileSet.
        :param url: The url of this GooglePrivacyDlpV2FileSet.
        """
        self.openapi_types = {
            'regex_file_set': GooglePrivacyDlpV2CloudStorageRegexFileSet,
            'url': str
        }

        self.attribute_map = {
            'regex_file_set': 'regexFileSet',
            'url': 'url'
        }

        self._regex_file_set = regex_file_set
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2FileSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2FileSet of this GooglePrivacyDlpV2FileSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def regex_file_set(self):
        """Gets the regex_file_set of this GooglePrivacyDlpV2FileSet.


        :return: The regex_file_set of this GooglePrivacyDlpV2FileSet.
        :rtype: GooglePrivacyDlpV2CloudStorageRegexFileSet
        """
        return self._regex_file_set

    @regex_file_set.setter
    def regex_file_set(self, regex_file_set):
        """Sets the regex_file_set of this GooglePrivacyDlpV2FileSet.


        :param regex_file_set: The regex_file_set of this GooglePrivacyDlpV2FileSet.
        :type regex_file_set: GooglePrivacyDlpV2CloudStorageRegexFileSet
        """

        self._regex_file_set = regex_file_set

    @property
    def url(self):
        """Gets the url of this GooglePrivacyDlpV2FileSet.

        The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.

        :return: The url of this GooglePrivacyDlpV2FileSet.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GooglePrivacyDlpV2FileSet.

        The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set.

        :param url: The url of this GooglePrivacyDlpV2FileSet.
        :type url: str
        """

        self._url = url
