# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_big_query_table_types import GooglePrivacyDlpV2BigQueryTableTypes
from openapi_server.models.google_privacy_dlp_v2_or_conditions import GooglePrivacyDlpV2OrConditions
from openapi_server import util


class GooglePrivacyDlpV2DiscoveryBigQueryConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_after: str=None, or_conditions: GooglePrivacyDlpV2OrConditions=None, type_collection: str=None, types: GooglePrivacyDlpV2BigQueryTableTypes=None):
        """GooglePrivacyDlpV2DiscoveryBigQueryConditions - a model defined in OpenAPI

        :param created_after: The created_after of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :param or_conditions: The or_conditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :param type_collection: The type_collection of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :param types: The types of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        """
        self.openapi_types = {
            'created_after': str,
            'or_conditions': GooglePrivacyDlpV2OrConditions,
            'type_collection': str,
            'types': GooglePrivacyDlpV2BigQueryTableTypes
        }

        self.attribute_map = {
            'created_after': 'createdAfter',
            'or_conditions': 'orConditions',
            'type_collection': 'typeCollection',
            'types': 'types'
        }

        self._created_after = created_after
        self._or_conditions = or_conditions
        self._type_collection = type_collection
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DiscoveryBigQueryConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DiscoveryBigQueryConditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_after(self):
        """Gets the created_after of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.

        BigQuery table must have been created after this date. Used to avoid backfilling.

        :return: The created_after of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :rtype: str
        """
        return self._created_after

    @created_after.setter
    def created_after(self, created_after):
        """Sets the created_after of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.

        BigQuery table must have been created after this date. Used to avoid backfilling.

        :param created_after: The created_after of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :type created_after: str
        """

        self._created_after = created_after

    @property
    def or_conditions(self):
        """Gets the or_conditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.


        :return: The or_conditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :rtype: GooglePrivacyDlpV2OrConditions
        """
        return self._or_conditions

    @or_conditions.setter
    def or_conditions(self, or_conditions):
        """Sets the or_conditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.


        :param or_conditions: The or_conditions of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :type or_conditions: GooglePrivacyDlpV2OrConditions
        """

        self._or_conditions = or_conditions

    @property
    def type_collection(self):
        """Gets the type_collection of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.

        Restrict discovery to categories of table types.

        :return: The type_collection of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :rtype: str
        """
        return self._type_collection

    @type_collection.setter
    def type_collection(self, type_collection):
        """Sets the type_collection of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.

        Restrict discovery to categories of table types.

        :param type_collection: The type_collection of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :type type_collection: str
        """
        allowed_values = ["BIG_QUERY_COLLECTION_UNSPECIFIED", "BIG_QUERY_COLLECTION_ALL_TYPES", "BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES"]  # noqa: E501
        if type_collection not in allowed_values:
            raise ValueError(
                "Invalid value for `type_collection` ({0}), must be one of {1}"
                .format(type_collection, allowed_values)
            )

        self._type_collection = type_collection

    @property
    def types(self):
        """Gets the types of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.


        :return: The types of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :rtype: GooglePrivacyDlpV2BigQueryTableTypes
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.


        :param types: The types of this GooglePrivacyDlpV2DiscoveryBigQueryConditions.
        :type types: GooglePrivacyDlpV2BigQueryTableTypes
        """

        self._types = types
