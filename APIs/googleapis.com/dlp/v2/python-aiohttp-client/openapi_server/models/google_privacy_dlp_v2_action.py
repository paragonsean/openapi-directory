# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_deidentify import GooglePrivacyDlpV2Deidentify
from openapi_server.models.google_privacy_dlp_v2_publish_to_pub_sub import GooglePrivacyDlpV2PublishToPubSub
from openapi_server.models.google_privacy_dlp_v2_save_findings import GooglePrivacyDlpV2SaveFindings
from openapi_server import util


class GooglePrivacyDlpV2Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deidentify: GooglePrivacyDlpV2Deidentify=None, job_notification_emails: object=None, pub_sub: GooglePrivacyDlpV2PublishToPubSub=None, publish_findings_to_cloud_data_catalog: object=None, publish_summary_to_cscc: object=None, publish_to_stackdriver: object=None, save_findings: GooglePrivacyDlpV2SaveFindings=None):
        """GooglePrivacyDlpV2Action - a model defined in OpenAPI

        :param deidentify: The deidentify of this GooglePrivacyDlpV2Action.
        :param job_notification_emails: The job_notification_emails of this GooglePrivacyDlpV2Action.
        :param pub_sub: The pub_sub of this GooglePrivacyDlpV2Action.
        :param publish_findings_to_cloud_data_catalog: The publish_findings_to_cloud_data_catalog of this GooglePrivacyDlpV2Action.
        :param publish_summary_to_cscc: The publish_summary_to_cscc of this GooglePrivacyDlpV2Action.
        :param publish_to_stackdriver: The publish_to_stackdriver of this GooglePrivacyDlpV2Action.
        :param save_findings: The save_findings of this GooglePrivacyDlpV2Action.
        """
        self.openapi_types = {
            'deidentify': GooglePrivacyDlpV2Deidentify,
            'job_notification_emails': object,
            'pub_sub': GooglePrivacyDlpV2PublishToPubSub,
            'publish_findings_to_cloud_data_catalog': object,
            'publish_summary_to_cscc': object,
            'publish_to_stackdriver': object,
            'save_findings': GooglePrivacyDlpV2SaveFindings
        }

        self.attribute_map = {
            'deidentify': 'deidentify',
            'job_notification_emails': 'jobNotificationEmails',
            'pub_sub': 'pubSub',
            'publish_findings_to_cloud_data_catalog': 'publishFindingsToCloudDataCatalog',
            'publish_summary_to_cscc': 'publishSummaryToCscc',
            'publish_to_stackdriver': 'publishToStackdriver',
            'save_findings': 'saveFindings'
        }

        self._deidentify = deidentify
        self._job_notification_emails = job_notification_emails
        self._pub_sub = pub_sub
        self._publish_findings_to_cloud_data_catalog = publish_findings_to_cloud_data_catalog
        self._publish_summary_to_cscc = publish_summary_to_cscc
        self._publish_to_stackdriver = publish_to_stackdriver
        self._save_findings = save_findings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Action of this GooglePrivacyDlpV2Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deidentify(self):
        """Gets the deidentify of this GooglePrivacyDlpV2Action.


        :return: The deidentify of this GooglePrivacyDlpV2Action.
        :rtype: GooglePrivacyDlpV2Deidentify
        """
        return self._deidentify

    @deidentify.setter
    def deidentify(self, deidentify):
        """Sets the deidentify of this GooglePrivacyDlpV2Action.


        :param deidentify: The deidentify of this GooglePrivacyDlpV2Action.
        :type deidentify: GooglePrivacyDlpV2Deidentify
        """

        self._deidentify = deidentify

    @property
    def job_notification_emails(self):
        """Gets the job_notification_emails of this GooglePrivacyDlpV2Action.

        Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).

        :return: The job_notification_emails of this GooglePrivacyDlpV2Action.
        :rtype: object
        """
        return self._job_notification_emails

    @job_notification_emails.setter
    def job_notification_emails(self, job_notification_emails):
        """Sets the job_notification_emails of this GooglePrivacyDlpV2Action.

        Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).

        :param job_notification_emails: The job_notification_emails of this GooglePrivacyDlpV2Action.
        :type job_notification_emails: object
        """

        self._job_notification_emails = job_notification_emails

    @property
    def pub_sub(self):
        """Gets the pub_sub of this GooglePrivacyDlpV2Action.


        :return: The pub_sub of this GooglePrivacyDlpV2Action.
        :rtype: GooglePrivacyDlpV2PublishToPubSub
        """
        return self._pub_sub

    @pub_sub.setter
    def pub_sub(self, pub_sub):
        """Sets the pub_sub of this GooglePrivacyDlpV2Action.


        :param pub_sub: The pub_sub of this GooglePrivacyDlpV2Action.
        :type pub_sub: GooglePrivacyDlpV2PublishToPubSub
        """

        self._pub_sub = pub_sub

    @property
    def publish_findings_to_cloud_data_catalog(self):
        """Gets the publish_findings_to_cloud_data_catalog of this GooglePrivacyDlpV2Action.

        Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect

        :return: The publish_findings_to_cloud_data_catalog of this GooglePrivacyDlpV2Action.
        :rtype: object
        """
        return self._publish_findings_to_cloud_data_catalog

    @publish_findings_to_cloud_data_catalog.setter
    def publish_findings_to_cloud_data_catalog(self, publish_findings_to_cloud_data_catalog):
        """Sets the publish_findings_to_cloud_data_catalog of this GooglePrivacyDlpV2Action.

        Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the `roles/datacatalog.tagTemplateOwner` permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect

        :param publish_findings_to_cloud_data_catalog: The publish_findings_to_cloud_data_catalog of this GooglePrivacyDlpV2Action.
        :type publish_findings_to_cloud_data_catalog: object
        """

        self._publish_findings_to_cloud_data_catalog = publish_findings_to_cloud_data_catalog

    @property
    def publish_summary_to_cscc(self):
        """Gets the publish_summary_to_cscc of this GooglePrivacyDlpV2Action.

        Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect

        :return: The publish_summary_to_cscc of this GooglePrivacyDlpV2Action.
        :rtype: object
        """
        return self._publish_summary_to_cscc

    @publish_summary_to_cscc.setter
    def publish_summary_to_cscc(self, publish_summary_to_cscc):
        """Sets the publish_summary_to_cscc of this GooglePrivacyDlpV2Action.

        Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect

        :param publish_summary_to_cscc: The publish_summary_to_cscc of this GooglePrivacyDlpV2Action.
        :type publish_summary_to_cscc: object
        """

        self._publish_summary_to_cscc = publish_summary_to_cscc

    @property
    def publish_to_stackdriver(self):
        """Gets the publish_to_stackdriver of this GooglePrivacyDlpV2Action.

        Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.

        :return: The publish_to_stackdriver of this GooglePrivacyDlpV2Action.
        :rtype: object
        """
        return self._publish_to_stackdriver

    @publish_to_stackdriver.setter
    def publish_to_stackdriver(self, publish_to_stackdriver):
        """Sets the publish_to_stackdriver of this GooglePrivacyDlpV2Action.

        Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as 'Custom' under the Stackdriver label 'info_type'.

        :param publish_to_stackdriver: The publish_to_stackdriver of this GooglePrivacyDlpV2Action.
        :type publish_to_stackdriver: object
        """

        self._publish_to_stackdriver = publish_to_stackdriver

    @property
    def save_findings(self):
        """Gets the save_findings of this GooglePrivacyDlpV2Action.


        :return: The save_findings of this GooglePrivacyDlpV2Action.
        :rtype: GooglePrivacyDlpV2SaveFindings
        """
        return self._save_findings

    @save_findings.setter
    def save_findings(self, save_findings):
        """Sets the save_findings of this GooglePrivacyDlpV2Action.


        :param save_findings: The save_findings of this GooglePrivacyDlpV2Action.
        :type save_findings: GooglePrivacyDlpV2SaveFindings
        """

        self._save_findings = save_findings
