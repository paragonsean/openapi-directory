# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_data_profile_action import GooglePrivacyDlpV2DataProfileAction
from openapi_server.models.google_privacy_dlp_v2_discovery_target import GooglePrivacyDlpV2DiscoveryTarget
from openapi_server.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_server.models.google_privacy_dlp_v2_org_config import GooglePrivacyDlpV2OrgConfig
from openapi_server import util


class GooglePrivacyDlpV2DiscoveryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[GooglePrivacyDlpV2DataProfileAction]=None, create_time: str=None, display_name: str=None, errors: List[GooglePrivacyDlpV2Error]=None, inspect_templates: List[str]=None, last_run_time: str=None, name: str=None, org_config: GooglePrivacyDlpV2OrgConfig=None, status: str=None, targets: List[GooglePrivacyDlpV2DiscoveryTarget]=None, update_time: str=None):
        """GooglePrivacyDlpV2DiscoveryConfig - a model defined in OpenAPI

        :param actions: The actions of this GooglePrivacyDlpV2DiscoveryConfig.
        :param create_time: The create_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :param display_name: The display_name of this GooglePrivacyDlpV2DiscoveryConfig.
        :param errors: The errors of this GooglePrivacyDlpV2DiscoveryConfig.
        :param inspect_templates: The inspect_templates of this GooglePrivacyDlpV2DiscoveryConfig.
        :param last_run_time: The last_run_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :param name: The name of this GooglePrivacyDlpV2DiscoveryConfig.
        :param org_config: The org_config of this GooglePrivacyDlpV2DiscoveryConfig.
        :param status: The status of this GooglePrivacyDlpV2DiscoveryConfig.
        :param targets: The targets of this GooglePrivacyDlpV2DiscoveryConfig.
        :param update_time: The update_time of this GooglePrivacyDlpV2DiscoveryConfig.
        """
        self.openapi_types = {
            'actions': List[GooglePrivacyDlpV2DataProfileAction],
            'create_time': str,
            'display_name': str,
            'errors': List[GooglePrivacyDlpV2Error],
            'inspect_templates': List[str],
            'last_run_time': str,
            'name': str,
            'org_config': GooglePrivacyDlpV2OrgConfig,
            'status': str,
            'targets': List[GooglePrivacyDlpV2DiscoveryTarget],
            'update_time': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'errors': 'errors',
            'inspect_templates': 'inspectTemplates',
            'last_run_time': 'lastRunTime',
            'name': 'name',
            'org_config': 'orgConfig',
            'status': 'status',
            'targets': 'targets',
            'update_time': 'updateTime'
        }

        self._actions = actions
        self._create_time = create_time
        self._display_name = display_name
        self._errors = errors
        self._inspect_templates = inspect_templates
        self._last_run_time = last_run_time
        self._name = name
        self._org_config = org_config
        self._status = status
        self._targets = targets
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DiscoveryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DiscoveryConfig of this GooglePrivacyDlpV2DiscoveryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this GooglePrivacyDlpV2DiscoveryConfig.

        Actions to execute at the completion of scanning.

        :return: The actions of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: List[GooglePrivacyDlpV2DataProfileAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GooglePrivacyDlpV2DiscoveryConfig.

        Actions to execute at the completion of scanning.

        :param actions: The actions of this GooglePrivacyDlpV2DiscoveryConfig.
        :type actions: List[GooglePrivacyDlpV2DataProfileAction]
        """

        self._actions = actions

    @property
    def create_time(self):
        """Gets the create_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The creation timestamp of a DiscoveryConfig.

        :return: The create_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The creation timestamp of a DiscoveryConfig.

        :param create_time: The create_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this GooglePrivacyDlpV2DiscoveryConfig.

        Display name (max 100 chars)

        :return: The display_name of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GooglePrivacyDlpV2DiscoveryConfig.

        Display name (max 100 chars)

        :param display_name: The display_name of this GooglePrivacyDlpV2DiscoveryConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def errors(self):
        """Gets the errors of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.

        :return: The errors of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: List[GooglePrivacyDlpV2Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.

        :param errors: The errors of this GooglePrivacyDlpV2DiscoveryConfig.
        :type errors: List[GooglePrivacyDlpV2Error]
        """

        self._errors = errors

    @property
    def inspect_templates(self):
        """Gets the inspect_templates of this GooglePrivacyDlpV2DiscoveryConfig.

        Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.

        :return: The inspect_templates of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: List[str]
        """
        return self._inspect_templates

    @inspect_templates.setter
    def inspect_templates(self, inspect_templates):
        """Sets the inspect_templates of this GooglePrivacyDlpV2DiscoveryConfig.

        Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.

        :param inspect_templates: The inspect_templates of this GooglePrivacyDlpV2DiscoveryConfig.
        :type inspect_templates: List[str]
        """

        self._inspect_templates = inspect_templates

    @property
    def last_run_time(self):
        """Gets the last_run_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The timestamp of the last time this config was executed.

        :return: The last_run_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The timestamp of the last time this config was executed.

        :param last_run_time: The last_run_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :type last_run_time: str
        """

        self._last_run_time = last_run_time

    @property
    def name(self):
        """Gets the name of this GooglePrivacyDlpV2DiscoveryConfig.

        Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.

        :return: The name of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GooglePrivacyDlpV2DiscoveryConfig.

        Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.

        :param name: The name of this GooglePrivacyDlpV2DiscoveryConfig.
        :type name: str
        """

        self._name = name

    @property
    def org_config(self):
        """Gets the org_config of this GooglePrivacyDlpV2DiscoveryConfig.


        :return: The org_config of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: GooglePrivacyDlpV2OrgConfig
        """
        return self._org_config

    @org_config.setter
    def org_config(self, org_config):
        """Sets the org_config of this GooglePrivacyDlpV2DiscoveryConfig.


        :param org_config: The org_config of this GooglePrivacyDlpV2DiscoveryConfig.
        :type org_config: GooglePrivacyDlpV2OrgConfig
        """

        self._org_config = org_config

    @property
    def status(self):
        """Gets the status of this GooglePrivacyDlpV2DiscoveryConfig.

        Required. A status for this configuration.

        :return: The status of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GooglePrivacyDlpV2DiscoveryConfig.

        Required. A status for this configuration.

        :param status: The status of this GooglePrivacyDlpV2DiscoveryConfig.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "RUNNING", "PAUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def targets(self):
        """Gets the targets of this GooglePrivacyDlpV2DiscoveryConfig.

        Target to match against for determining what to scan and how frequently.

        :return: The targets of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: List[GooglePrivacyDlpV2DiscoveryTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this GooglePrivacyDlpV2DiscoveryConfig.

        Target to match against for determining what to scan and how frequently.

        :param targets: The targets of this GooglePrivacyDlpV2DiscoveryConfig.
        :type targets: List[GooglePrivacyDlpV2DiscoveryTarget]
        """

        self._targets = targets

    @property
    def update_time(self):
        """Gets the update_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The last update timestamp of a DiscoveryConfig.

        :return: The update_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GooglePrivacyDlpV2DiscoveryConfig.

        Output only. The last update timestamp of a DiscoveryConfig.

        :param update_time: The update_time of this GooglePrivacyDlpV2DiscoveryConfig.
        :type update_time: str
        """

        self._update_time = update_time
