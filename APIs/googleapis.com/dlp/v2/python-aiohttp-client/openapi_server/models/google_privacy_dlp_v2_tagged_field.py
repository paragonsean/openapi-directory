# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server import util


class GooglePrivacyDlpV2TaggedField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_tag: str=None, _field: GooglePrivacyDlpV2FieldId=None, inferred: object=None, info_type: GooglePrivacyDlpV2InfoType=None):
        """GooglePrivacyDlpV2TaggedField - a model defined in OpenAPI

        :param custom_tag: The custom_tag of this GooglePrivacyDlpV2TaggedField.
        :param _field: The _field of this GooglePrivacyDlpV2TaggedField.
        :param inferred: The inferred of this GooglePrivacyDlpV2TaggedField.
        :param info_type: The info_type of this GooglePrivacyDlpV2TaggedField.
        """
        self.openapi_types = {
            'custom_tag': str,
            '_field': GooglePrivacyDlpV2FieldId,
            'inferred': object,
            'info_type': GooglePrivacyDlpV2InfoType
        }

        self.attribute_map = {
            'custom_tag': 'customTag',
            '_field': 'field',
            'inferred': 'inferred',
            'info_type': 'infoType'
        }

        self._custom_tag = custom_tag
        self.__field = _field
        self._inferred = inferred
        self._info_type = info_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2TaggedField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2TaggedField of this GooglePrivacyDlpV2TaggedField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_tag(self):
        """Gets the custom_tag of this GooglePrivacyDlpV2TaggedField.

        A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).

        :return: The custom_tag of this GooglePrivacyDlpV2TaggedField.
        :rtype: str
        """
        return self._custom_tag

    @custom_tag.setter
    def custom_tag(self, custom_tag):
        """Sets the custom_tag of this GooglePrivacyDlpV2TaggedField.

        A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).

        :param custom_tag: The custom_tag of this GooglePrivacyDlpV2TaggedField.
        :type custom_tag: str
        """

        self._custom_tag = custom_tag

    @property
    def _field(self):
        """Gets the _field of this GooglePrivacyDlpV2TaggedField.


        :return: The _field of this GooglePrivacyDlpV2TaggedField.
        :rtype: GooglePrivacyDlpV2FieldId
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this GooglePrivacyDlpV2TaggedField.


        :param _field: The _field of this GooglePrivacyDlpV2TaggedField.
        :type _field: GooglePrivacyDlpV2FieldId
        """

        self.__field = _field

    @property
    def inferred(self):
        """Gets the inferred of this GooglePrivacyDlpV2TaggedField.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :return: The inferred of this GooglePrivacyDlpV2TaggedField.
        :rtype: object
        """
        return self._inferred

    @inferred.setter
    def inferred(self, inferred):
        """Sets the inferred of this GooglePrivacyDlpV2TaggedField.

        A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }

        :param inferred: The inferred of this GooglePrivacyDlpV2TaggedField.
        :type inferred: object
        """

        self._inferred = inferred

    @property
    def info_type(self):
        """Gets the info_type of this GooglePrivacyDlpV2TaggedField.


        :return: The info_type of this GooglePrivacyDlpV2TaggedField.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this GooglePrivacyDlpV2TaggedField.


        :param info_type: The info_type of this GooglePrivacyDlpV2TaggedField.
        :type info_type: GooglePrivacyDlpV2InfoType
        """

        self._info_type = info_type
