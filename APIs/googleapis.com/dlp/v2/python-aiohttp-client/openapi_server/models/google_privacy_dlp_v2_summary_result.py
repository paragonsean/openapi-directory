# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2SummaryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, count: str=None, details: str=None):
        """GooglePrivacyDlpV2SummaryResult - a model defined in OpenAPI

        :param code: The code of this GooglePrivacyDlpV2SummaryResult.
        :param count: The count of this GooglePrivacyDlpV2SummaryResult.
        :param details: The details of this GooglePrivacyDlpV2SummaryResult.
        """
        self.openapi_types = {
            'code': str,
            'count': str,
            'details': str
        }

        self.attribute_map = {
            'code': 'code',
            'count': 'count',
            'details': 'details'
        }

        self._code = code
        self._count = count
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2SummaryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2SummaryResult of this GooglePrivacyDlpV2SummaryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this GooglePrivacyDlpV2SummaryResult.

        Outcome of the transformation.

        :return: The code of this GooglePrivacyDlpV2SummaryResult.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GooglePrivacyDlpV2SummaryResult.

        Outcome of the transformation.

        :param code: The code of this GooglePrivacyDlpV2SummaryResult.
        :type code: str
        """
        allowed_values = ["TRANSFORMATION_RESULT_CODE_UNSPECIFIED", "SUCCESS", "ERROR"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def count(self):
        """Gets the count of this GooglePrivacyDlpV2SummaryResult.

        Number of transformations counted by this result.

        :return: The count of this GooglePrivacyDlpV2SummaryResult.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GooglePrivacyDlpV2SummaryResult.

        Number of transformations counted by this result.

        :param count: The count of this GooglePrivacyDlpV2SummaryResult.
        :type count: str
        """

        self._count = count

    @property
    def details(self):
        """Gets the details of this GooglePrivacyDlpV2SummaryResult.

        A place for warnings or errors to show up if a transformation didn't work as expected.

        :return: The details of this GooglePrivacyDlpV2SummaryResult.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this GooglePrivacyDlpV2SummaryResult.

        A place for warnings or errors to show up if a transformation didn't work as expected.

        :param details: The details of this GooglePrivacyDlpV2SummaryResult.
        :type details: str
        """

        self._details = details
