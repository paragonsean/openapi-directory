# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2TimePartConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, part_to_extract: str=None):
        """GooglePrivacyDlpV2TimePartConfig - a model defined in OpenAPI

        :param part_to_extract: The part_to_extract of this GooglePrivacyDlpV2TimePartConfig.
        """
        self.openapi_types = {
            'part_to_extract': str
        }

        self.attribute_map = {
            'part_to_extract': 'partToExtract'
        }

        self._part_to_extract = part_to_extract

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2TimePartConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2TimePartConfig of this GooglePrivacyDlpV2TimePartConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_to_extract(self):
        """Gets the part_to_extract of this GooglePrivacyDlpV2TimePartConfig.

        The part of the time to keep.

        :return: The part_to_extract of this GooglePrivacyDlpV2TimePartConfig.
        :rtype: str
        """
        return self._part_to_extract

    @part_to_extract.setter
    def part_to_extract(self, part_to_extract):
        """Sets the part_to_extract of this GooglePrivacyDlpV2TimePartConfig.

        The part of the time to keep.

        :param part_to_extract: The part_to_extract of this GooglePrivacyDlpV2TimePartConfig.
        :type part_to_extract: str
        """
        allowed_values = ["TIME_PART_UNSPECIFIED", "YEAR", "MONTH", "DAY_OF_MONTH", "DAY_OF_WEEK", "WEEK_OF_YEAR", "HOUR_OF_DAY"]  # noqa: E501
        if part_to_extract not in allowed_values:
            raise ValueError(
                "Invalid value for `part_to_extract` ({0}), must be one of {1}"
                .format(part_to_extract, allowed_values)
            )

        self._part_to_extract = part_to_extract
