# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_document_location import GooglePrivacyDlpV2DocumentLocation
from openapi_server.models.google_privacy_dlp_v2_image_location import GooglePrivacyDlpV2ImageLocation
from openapi_server.models.google_privacy_dlp_v2_metadata_location import GooglePrivacyDlpV2MetadataLocation
from openapi_server.models.google_privacy_dlp_v2_record_location import GooglePrivacyDlpV2RecordLocation
from openapi_server import util


class GooglePrivacyDlpV2ContentLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, container_timestamp: str=None, container_version: str=None, document_location: GooglePrivacyDlpV2DocumentLocation=None, image_location: GooglePrivacyDlpV2ImageLocation=None, metadata_location: GooglePrivacyDlpV2MetadataLocation=None, record_location: GooglePrivacyDlpV2RecordLocation=None):
        """GooglePrivacyDlpV2ContentLocation - a model defined in OpenAPI

        :param container_name: The container_name of this GooglePrivacyDlpV2ContentLocation.
        :param container_timestamp: The container_timestamp of this GooglePrivacyDlpV2ContentLocation.
        :param container_version: The container_version of this GooglePrivacyDlpV2ContentLocation.
        :param document_location: The document_location of this GooglePrivacyDlpV2ContentLocation.
        :param image_location: The image_location of this GooglePrivacyDlpV2ContentLocation.
        :param metadata_location: The metadata_location of this GooglePrivacyDlpV2ContentLocation.
        :param record_location: The record_location of this GooglePrivacyDlpV2ContentLocation.
        """
        self.openapi_types = {
            'container_name': str,
            'container_timestamp': str,
            'container_version': str,
            'document_location': GooglePrivacyDlpV2DocumentLocation,
            'image_location': GooglePrivacyDlpV2ImageLocation,
            'metadata_location': GooglePrivacyDlpV2MetadataLocation,
            'record_location': GooglePrivacyDlpV2RecordLocation
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'container_timestamp': 'containerTimestamp',
            'container_version': 'containerVersion',
            'document_location': 'documentLocation',
            'image_location': 'imageLocation',
            'metadata_location': 'metadataLocation',
            'record_location': 'recordLocation'
        }

        self._container_name = container_name
        self._container_timestamp = container_timestamp
        self._container_version = container_version
        self._document_location = document_location
        self._image_location = image_location
        self._metadata_location = metadata_location
        self._record_location = record_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2ContentLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2ContentLocation of this GooglePrivacyDlpV2ContentLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this GooglePrivacyDlpV2ContentLocation.

        Name of the container where the finding is located. The top level name is the source file name or table name. Names of some common storage containers are formatted as follows: * BigQuery tables: `{project_id}:{dataset_id}.{table_id}` * Cloud Storage files: `gs://{bucket}/{path}` * Datastore namespace: {namespace} Nested names could be absent if the embedded object has no string identifier (for example, an image contained within a document).

        :return: The container_name of this GooglePrivacyDlpV2ContentLocation.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this GooglePrivacyDlpV2ContentLocation.

        Name of the container where the finding is located. The top level name is the source file name or table name. Names of some common storage containers are formatted as follows: * BigQuery tables: `{project_id}:{dataset_id}.{table_id}` * Cloud Storage files: `gs://{bucket}/{path}` * Datastore namespace: {namespace} Nested names could be absent if the embedded object has no string identifier (for example, an image contained within a document).

        :param container_name: The container_name of this GooglePrivacyDlpV2ContentLocation.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def container_timestamp(self):
        """Gets the container_timestamp of this GooglePrivacyDlpV2ContentLocation.

        Finding container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.

        :return: The container_timestamp of this GooglePrivacyDlpV2ContentLocation.
        :rtype: str
        """
        return self._container_timestamp

    @container_timestamp.setter
    def container_timestamp(self, container_timestamp):
        """Sets the container_timestamp of this GooglePrivacyDlpV2ContentLocation.

        Finding container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.

        :param container_timestamp: The container_timestamp of this GooglePrivacyDlpV2ContentLocation.
        :type container_timestamp: str
        """

        self._container_timestamp = container_timestamp

    @property
    def container_version(self):
        """Gets the container_version of this GooglePrivacyDlpV2ContentLocation.

        Finding container version, if available (\"generation\" for Cloud Storage).

        :return: The container_version of this GooglePrivacyDlpV2ContentLocation.
        :rtype: str
        """
        return self._container_version

    @container_version.setter
    def container_version(self, container_version):
        """Sets the container_version of this GooglePrivacyDlpV2ContentLocation.

        Finding container version, if available (\"generation\" for Cloud Storage).

        :param container_version: The container_version of this GooglePrivacyDlpV2ContentLocation.
        :type container_version: str
        """

        self._container_version = container_version

    @property
    def document_location(self):
        """Gets the document_location of this GooglePrivacyDlpV2ContentLocation.


        :return: The document_location of this GooglePrivacyDlpV2ContentLocation.
        :rtype: GooglePrivacyDlpV2DocumentLocation
        """
        return self._document_location

    @document_location.setter
    def document_location(self, document_location):
        """Sets the document_location of this GooglePrivacyDlpV2ContentLocation.


        :param document_location: The document_location of this GooglePrivacyDlpV2ContentLocation.
        :type document_location: GooglePrivacyDlpV2DocumentLocation
        """

        self._document_location = document_location

    @property
    def image_location(self):
        """Gets the image_location of this GooglePrivacyDlpV2ContentLocation.


        :return: The image_location of this GooglePrivacyDlpV2ContentLocation.
        :rtype: GooglePrivacyDlpV2ImageLocation
        """
        return self._image_location

    @image_location.setter
    def image_location(self, image_location):
        """Sets the image_location of this GooglePrivacyDlpV2ContentLocation.


        :param image_location: The image_location of this GooglePrivacyDlpV2ContentLocation.
        :type image_location: GooglePrivacyDlpV2ImageLocation
        """

        self._image_location = image_location

    @property
    def metadata_location(self):
        """Gets the metadata_location of this GooglePrivacyDlpV2ContentLocation.


        :return: The metadata_location of this GooglePrivacyDlpV2ContentLocation.
        :rtype: GooglePrivacyDlpV2MetadataLocation
        """
        return self._metadata_location

    @metadata_location.setter
    def metadata_location(self, metadata_location):
        """Sets the metadata_location of this GooglePrivacyDlpV2ContentLocation.


        :param metadata_location: The metadata_location of this GooglePrivacyDlpV2ContentLocation.
        :type metadata_location: GooglePrivacyDlpV2MetadataLocation
        """

        self._metadata_location = metadata_location

    @property
    def record_location(self):
        """Gets the record_location of this GooglePrivacyDlpV2ContentLocation.


        :return: The record_location of this GooglePrivacyDlpV2ContentLocation.
        :rtype: GooglePrivacyDlpV2RecordLocation
        """
        return self._record_location

    @record_location.setter
    def record_location(self, record_location):
        """Sets the record_location of this GooglePrivacyDlpV2ContentLocation.


        :param record_location: The record_location of this GooglePrivacyDlpV2ContentLocation.
        :type record_location: GooglePrivacyDlpV2RecordLocation
        """

        self._record_location = record_location
