# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_transformation_description import GooglePrivacyDlpV2TransformationDescription
from openapi_server.models.google_privacy_dlp_v2_transformation_location import GooglePrivacyDlpV2TransformationLocation
from openapi_server.models.google_privacy_dlp_v2_transformation_result_status import GooglePrivacyDlpV2TransformationResultStatus
from openapi_server import util


class GooglePrivacyDlpV2TransformationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, resource_name: str=None, status_details: GooglePrivacyDlpV2TransformationResultStatus=None, transformation: List[GooglePrivacyDlpV2TransformationDescription]=None, transformation_location: GooglePrivacyDlpV2TransformationLocation=None, transformed_bytes: str=None):
        """GooglePrivacyDlpV2TransformationDetails - a model defined in OpenAPI

        :param container_name: The container_name of this GooglePrivacyDlpV2TransformationDetails.
        :param resource_name: The resource_name of this GooglePrivacyDlpV2TransformationDetails.
        :param status_details: The status_details of this GooglePrivacyDlpV2TransformationDetails.
        :param transformation: The transformation of this GooglePrivacyDlpV2TransformationDetails.
        :param transformation_location: The transformation_location of this GooglePrivacyDlpV2TransformationDetails.
        :param transformed_bytes: The transformed_bytes of this GooglePrivacyDlpV2TransformationDetails.
        """
        self.openapi_types = {
            'container_name': str,
            'resource_name': str,
            'status_details': GooglePrivacyDlpV2TransformationResultStatus,
            'transformation': List[GooglePrivacyDlpV2TransformationDescription],
            'transformation_location': GooglePrivacyDlpV2TransformationLocation,
            'transformed_bytes': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'resource_name': 'resourceName',
            'status_details': 'statusDetails',
            'transformation': 'transformation',
            'transformation_location': 'transformationLocation',
            'transformed_bytes': 'transformedBytes'
        }

        self._container_name = container_name
        self._resource_name = resource_name
        self._status_details = status_details
        self._transformation = transformation
        self._transformation_location = transformation_location
        self._transformed_bytes = transformed_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2TransformationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2TransformationDetails of this GooglePrivacyDlpV2TransformationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this GooglePrivacyDlpV2TransformationDetails.

        The top level name of the container where the transformation is located (this will be the source file name or table name).

        :return: The container_name of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this GooglePrivacyDlpV2TransformationDetails.

        The top level name of the container where the transformation is located (this will be the source file name or table name).

        :param container_name: The container_name of this GooglePrivacyDlpV2TransformationDetails.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def resource_name(self):
        """Gets the resource_name of this GooglePrivacyDlpV2TransformationDetails.

        The name of the job that completed the transformation.

        :return: The resource_name of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this GooglePrivacyDlpV2TransformationDetails.

        The name of the job that completed the transformation.

        :param resource_name: The resource_name of this GooglePrivacyDlpV2TransformationDetails.
        :type resource_name: str
        """

        self._resource_name = resource_name

    @property
    def status_details(self):
        """Gets the status_details of this GooglePrivacyDlpV2TransformationDetails.


        :return: The status_details of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: GooglePrivacyDlpV2TransformationResultStatus
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this GooglePrivacyDlpV2TransformationDetails.


        :param status_details: The status_details of this GooglePrivacyDlpV2TransformationDetails.
        :type status_details: GooglePrivacyDlpV2TransformationResultStatus
        """

        self._status_details = status_details

    @property
    def transformation(self):
        """Gets the transformation of this GooglePrivacyDlpV2TransformationDetails.

        Description of transformation. This would only contain more than one element if there were multiple matching transformations and which one to apply was ambiguous. Not set for states that contain no transformation, currently only state that contains no transformation is TransformationResultStateType.METADATA_UNRETRIEVABLE.

        :return: The transformation of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: List[GooglePrivacyDlpV2TransformationDescription]
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation):
        """Sets the transformation of this GooglePrivacyDlpV2TransformationDetails.

        Description of transformation. This would only contain more than one element if there were multiple matching transformations and which one to apply was ambiguous. Not set for states that contain no transformation, currently only state that contains no transformation is TransformationResultStateType.METADATA_UNRETRIEVABLE.

        :param transformation: The transformation of this GooglePrivacyDlpV2TransformationDetails.
        :type transformation: List[GooglePrivacyDlpV2TransformationDescription]
        """

        self._transformation = transformation

    @property
    def transformation_location(self):
        """Gets the transformation_location of this GooglePrivacyDlpV2TransformationDetails.


        :return: The transformation_location of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: GooglePrivacyDlpV2TransformationLocation
        """
        return self._transformation_location

    @transformation_location.setter
    def transformation_location(self, transformation_location):
        """Sets the transformation_location of this GooglePrivacyDlpV2TransformationDetails.


        :param transformation_location: The transformation_location of this GooglePrivacyDlpV2TransformationDetails.
        :type transformation_location: GooglePrivacyDlpV2TransformationLocation
        """

        self._transformation_location = transformation_location

    @property
    def transformed_bytes(self):
        """Gets the transformed_bytes of this GooglePrivacyDlpV2TransformationDetails.

        The number of bytes that were transformed. If transformation was unsuccessful or did not take place because there was no content to transform, this will be zero.

        :return: The transformed_bytes of this GooglePrivacyDlpV2TransformationDetails.
        :rtype: str
        """
        return self._transformed_bytes

    @transformed_bytes.setter
    def transformed_bytes(self, transformed_bytes):
        """Sets the transformed_bytes of this GooglePrivacyDlpV2TransformationDetails.

        The number of bytes that were transformed. If transformation was unsuccessful or did not take place because there was no content to transform, this will be zero.

        :param transformed_bytes: The transformed_bytes of this GooglePrivacyDlpV2TransformationDetails.
        :type transformed_bytes: str
        """

        self._transformed_bytes = transformed_bytes
