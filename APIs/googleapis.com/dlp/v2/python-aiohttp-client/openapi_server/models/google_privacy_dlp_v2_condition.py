# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server.models.google_privacy_dlp_v2_value import GooglePrivacyDlpV2Value
from openapi_server import util


class GooglePrivacyDlpV2Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: GooglePrivacyDlpV2FieldId=None, operator: str=None, value: GooglePrivacyDlpV2Value=None):
        """GooglePrivacyDlpV2Condition - a model defined in OpenAPI

        :param _field: The _field of this GooglePrivacyDlpV2Condition.
        :param operator: The operator of this GooglePrivacyDlpV2Condition.
        :param value: The value of this GooglePrivacyDlpV2Condition.
        """
        self.openapi_types = {
            '_field': GooglePrivacyDlpV2FieldId,
            'operator': str,
            'value': GooglePrivacyDlpV2Value
        }

        self.attribute_map = {
            '_field': 'field',
            'operator': 'operator',
            'value': 'value'
        }

        self.__field = _field
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Condition of this GooglePrivacyDlpV2Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this GooglePrivacyDlpV2Condition.


        :return: The _field of this GooglePrivacyDlpV2Condition.
        :rtype: GooglePrivacyDlpV2FieldId
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this GooglePrivacyDlpV2Condition.


        :param _field: The _field of this GooglePrivacyDlpV2Condition.
        :type _field: GooglePrivacyDlpV2FieldId
        """

        self.__field = _field

    @property
    def operator(self):
        """Gets the operator of this GooglePrivacyDlpV2Condition.

        Required. Operator used to compare the field or infoType to the value.

        :return: The operator of this GooglePrivacyDlpV2Condition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this GooglePrivacyDlpV2Condition.

        Required. Operator used to compare the field or infoType to the value.

        :param operator: The operator of this GooglePrivacyDlpV2Condition.
        :type operator: str
        """
        allowed_values = ["RELATIONAL_OPERATOR_UNSPECIFIED", "EQUAL_TO", "NOT_EQUAL_TO", "GREATER_THAN", "LESS_THAN", "GREATER_THAN_OR_EQUALS", "LESS_THAN_OR_EQUALS", "EXISTS"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this GooglePrivacyDlpV2Condition.


        :return: The value of this GooglePrivacyDlpV2Condition.
        :rtype: GooglePrivacyDlpV2Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GooglePrivacyDlpV2Condition.


        :param value: The value of this GooglePrivacyDlpV2Condition.
        :type value: GooglePrivacyDlpV2Value
        """

        self._value = value
