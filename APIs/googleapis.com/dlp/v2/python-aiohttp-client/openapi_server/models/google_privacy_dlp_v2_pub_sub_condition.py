# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2PubSubCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_risk_score: str=None, minimum_sensitivity_score: str=None):
        """GooglePrivacyDlpV2PubSubCondition - a model defined in OpenAPI

        :param minimum_risk_score: The minimum_risk_score of this GooglePrivacyDlpV2PubSubCondition.
        :param minimum_sensitivity_score: The minimum_sensitivity_score of this GooglePrivacyDlpV2PubSubCondition.
        """
        self.openapi_types = {
            'minimum_risk_score': str,
            'minimum_sensitivity_score': str
        }

        self.attribute_map = {
            'minimum_risk_score': 'minimumRiskScore',
            'minimum_sensitivity_score': 'minimumSensitivityScore'
        }

        self._minimum_risk_score = minimum_risk_score
        self._minimum_sensitivity_score = minimum_sensitivity_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2PubSubCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2PubSubCondition of this GooglePrivacyDlpV2PubSubCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_risk_score(self):
        """Gets the minimum_risk_score of this GooglePrivacyDlpV2PubSubCondition.

        The minimum data risk score that triggers the condition.

        :return: The minimum_risk_score of this GooglePrivacyDlpV2PubSubCondition.
        :rtype: str
        """
        return self._minimum_risk_score

    @minimum_risk_score.setter
    def minimum_risk_score(self, minimum_risk_score):
        """Sets the minimum_risk_score of this GooglePrivacyDlpV2PubSubCondition.

        The minimum data risk score that triggers the condition.

        :param minimum_risk_score: The minimum_risk_score of this GooglePrivacyDlpV2PubSubCondition.
        :type minimum_risk_score: str
        """
        allowed_values = ["PROFILE_SCORE_BUCKET_UNSPECIFIED", "HIGH", "MEDIUM_OR_HIGH"]  # noqa: E501
        if minimum_risk_score not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_risk_score` ({0}), must be one of {1}"
                .format(minimum_risk_score, allowed_values)
            )

        self._minimum_risk_score = minimum_risk_score

    @property
    def minimum_sensitivity_score(self):
        """Gets the minimum_sensitivity_score of this GooglePrivacyDlpV2PubSubCondition.

        The minimum sensitivity level that triggers the condition.

        :return: The minimum_sensitivity_score of this GooglePrivacyDlpV2PubSubCondition.
        :rtype: str
        """
        return self._minimum_sensitivity_score

    @minimum_sensitivity_score.setter
    def minimum_sensitivity_score(self, minimum_sensitivity_score):
        """Sets the minimum_sensitivity_score of this GooglePrivacyDlpV2PubSubCondition.

        The minimum sensitivity level that triggers the condition.

        :param minimum_sensitivity_score: The minimum_sensitivity_score of this GooglePrivacyDlpV2PubSubCondition.
        :type minimum_sensitivity_score: str
        """
        allowed_values = ["PROFILE_SCORE_BUCKET_UNSPECIFIED", "HIGH", "MEDIUM_OR_HIGH"]  # noqa: E501
        if minimum_sensitivity_score not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_sensitivity_score` ({0}), must be one of {1}"
                .format(minimum_sensitivity_score, allowed_values)
            )

        self._minimum_sensitivity_score = minimum_sensitivity_score
