# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server.models.google_privacy_dlp_v2_info_type_transformations import GooglePrivacyDlpV2InfoTypeTransformations
from openapi_server.models.google_privacy_dlp_v2_primitive_transformation import GooglePrivacyDlpV2PrimitiveTransformation
from openapi_server.models.google_privacy_dlp_v2_record_condition import GooglePrivacyDlpV2RecordCondition
from openapi_server import util


class GooglePrivacyDlpV2FieldTransformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: GooglePrivacyDlpV2RecordCondition=None, fields: List[GooglePrivacyDlpV2FieldId]=None, info_type_transformations: GooglePrivacyDlpV2InfoTypeTransformations=None, primitive_transformation: GooglePrivacyDlpV2PrimitiveTransformation=None):
        """GooglePrivacyDlpV2FieldTransformation - a model defined in OpenAPI

        :param condition: The condition of this GooglePrivacyDlpV2FieldTransformation.
        :param fields: The fields of this GooglePrivacyDlpV2FieldTransformation.
        :param info_type_transformations: The info_type_transformations of this GooglePrivacyDlpV2FieldTransformation.
        :param primitive_transformation: The primitive_transformation of this GooglePrivacyDlpV2FieldTransformation.
        """
        self.openapi_types = {
            'condition': GooglePrivacyDlpV2RecordCondition,
            'fields': List[GooglePrivacyDlpV2FieldId],
            'info_type_transformations': GooglePrivacyDlpV2InfoTypeTransformations,
            'primitive_transformation': GooglePrivacyDlpV2PrimitiveTransformation
        }

        self.attribute_map = {
            'condition': 'condition',
            'fields': 'fields',
            'info_type_transformations': 'infoTypeTransformations',
            'primitive_transformation': 'primitiveTransformation'
        }

        self._condition = condition
        self._fields = fields
        self._info_type_transformations = info_type_transformations
        self._primitive_transformation = primitive_transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2FieldTransformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2FieldTransformation of this GooglePrivacyDlpV2FieldTransformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this GooglePrivacyDlpV2FieldTransformation.


        :return: The condition of this GooglePrivacyDlpV2FieldTransformation.
        :rtype: GooglePrivacyDlpV2RecordCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GooglePrivacyDlpV2FieldTransformation.


        :param condition: The condition of this GooglePrivacyDlpV2FieldTransformation.
        :type condition: GooglePrivacyDlpV2RecordCondition
        """

        self._condition = condition

    @property
    def fields(self):
        """Gets the fields of this GooglePrivacyDlpV2FieldTransformation.

        Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".

        :return: The fields of this GooglePrivacyDlpV2FieldTransformation.
        :rtype: List[GooglePrivacyDlpV2FieldId]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this GooglePrivacyDlpV2FieldTransformation.

        Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".

        :param fields: The fields of this GooglePrivacyDlpV2FieldTransformation.
        :type fields: List[GooglePrivacyDlpV2FieldId]
        """

        self._fields = fields

    @property
    def info_type_transformations(self):
        """Gets the info_type_transformations of this GooglePrivacyDlpV2FieldTransformation.


        :return: The info_type_transformations of this GooglePrivacyDlpV2FieldTransformation.
        :rtype: GooglePrivacyDlpV2InfoTypeTransformations
        """
        return self._info_type_transformations

    @info_type_transformations.setter
    def info_type_transformations(self, info_type_transformations):
        """Sets the info_type_transformations of this GooglePrivacyDlpV2FieldTransformation.


        :param info_type_transformations: The info_type_transformations of this GooglePrivacyDlpV2FieldTransformation.
        :type info_type_transformations: GooglePrivacyDlpV2InfoTypeTransformations
        """

        self._info_type_transformations = info_type_transformations

    @property
    def primitive_transformation(self):
        """Gets the primitive_transformation of this GooglePrivacyDlpV2FieldTransformation.


        :return: The primitive_transformation of this GooglePrivacyDlpV2FieldTransformation.
        :rtype: GooglePrivacyDlpV2PrimitiveTransformation
        """
        return self._primitive_transformation

    @primitive_transformation.setter
    def primitive_transformation(self, primitive_transformation):
        """Sets the primitive_transformation of this GooglePrivacyDlpV2FieldTransformation.


        :param primitive_transformation: The primitive_transformation of this GooglePrivacyDlpV2FieldTransformation.
        :type primitive_transformation: GooglePrivacyDlpV2PrimitiveTransformation
        """

        self._primitive_transformation = primitive_transformation
