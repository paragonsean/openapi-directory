# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2DataRiskLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score: str=None):
        """GooglePrivacyDlpV2DataRiskLevel - a model defined in OpenAPI

        :param score: The score of this GooglePrivacyDlpV2DataRiskLevel.
        """
        self.openapi_types = {
            'score': str
        }

        self.attribute_map = {
            'score': 'score'
        }

        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DataRiskLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DataRiskLevel of this GooglePrivacyDlpV2DataRiskLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score(self):
        """Gets the score of this GooglePrivacyDlpV2DataRiskLevel.

        The score applied to the resource.

        :return: The score of this GooglePrivacyDlpV2DataRiskLevel.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this GooglePrivacyDlpV2DataRiskLevel.

        The score applied to the resource.

        :param score: The score of this GooglePrivacyDlpV2DataRiskLevel.
        :type score: str
        """
        allowed_values = ["RISK_SCORE_UNSPECIFIED", "RISK_LOW", "RISK_MODERATE", "RISK_HIGH"]  # noqa: E501
        if score not in allowed_values:
            raise ValueError(
                "Invalid value for `score` ({0}), must be one of {1}"
                .format(score, allowed_values)
            )

        self._score = score
