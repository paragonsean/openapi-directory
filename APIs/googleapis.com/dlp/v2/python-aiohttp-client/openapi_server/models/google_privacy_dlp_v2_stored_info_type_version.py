# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_server.models.google_privacy_dlp_v2_stored_info_type_config import GooglePrivacyDlpV2StoredInfoTypeConfig
from openapi_server.models.google_privacy_dlp_v2_stored_info_type_stats import GooglePrivacyDlpV2StoredInfoTypeStats
from openapi_server import util


class GooglePrivacyDlpV2StoredInfoTypeVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: GooglePrivacyDlpV2StoredInfoTypeConfig=None, create_time: str=None, errors: List[GooglePrivacyDlpV2Error]=None, state: str=None, stats: GooglePrivacyDlpV2StoredInfoTypeStats=None):
        """GooglePrivacyDlpV2StoredInfoTypeVersion - a model defined in OpenAPI

        :param config: The config of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :param create_time: The create_time of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :param errors: The errors of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :param state: The state of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :param stats: The stats of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        """
        self.openapi_types = {
            'config': GooglePrivacyDlpV2StoredInfoTypeConfig,
            'create_time': str,
            'errors': List[GooglePrivacyDlpV2Error],
            'state': str,
            'stats': GooglePrivacyDlpV2StoredInfoTypeStats
        }

        self.attribute_map = {
            'config': 'config',
            'create_time': 'createTime',
            'errors': 'errors',
            'state': 'state',
            'stats': 'stats'
        }

        self._config = config
        self._create_time = create_time
        self._errors = errors
        self._state = state
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2StoredInfoTypeVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2StoredInfoTypeVersion of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this GooglePrivacyDlpV2StoredInfoTypeVersion.


        :return: The config of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :rtype: GooglePrivacyDlpV2StoredInfoTypeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GooglePrivacyDlpV2StoredInfoTypeVersion.


        :param config: The config of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :type config: GooglePrivacyDlpV2StoredInfoTypeConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Create timestamp of the version. Read-only, determined by the system when the version is created.

        :return: The create_time of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Create timestamp of the version. Read-only, determined by the system when the version is created.

        :param create_time: The create_time of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def errors(self):
        """Gets the errors of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.

        :return: The errors of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :rtype: List[GooglePrivacyDlpV2Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.

        :param errors: The errors of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :type errors: List[GooglePrivacyDlpV2Error]
        """

        self._errors = errors

    @property
    def state(self):
        """Gets the state of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Stored info type version state. Read-only, updated by the system during dictionary creation.

        :return: The state of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GooglePrivacyDlpV2StoredInfoTypeVersion.

        Stored info type version state. Read-only, updated by the system during dictionary creation.

        :param state: The state of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :type state: str
        """
        allowed_values = ["STORED_INFO_TYPE_STATE_UNSPECIFIED", "PENDING", "READY", "FAILED", "INVALID"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def stats(self):
        """Gets the stats of this GooglePrivacyDlpV2StoredInfoTypeVersion.


        :return: The stats of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :rtype: GooglePrivacyDlpV2StoredInfoTypeStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this GooglePrivacyDlpV2StoredInfoTypeVersion.


        :param stats: The stats of this GooglePrivacyDlpV2StoredInfoTypeVersion.
        :type stats: GooglePrivacyDlpV2StoredInfoTypeStats
        """

        self._stats = stats
