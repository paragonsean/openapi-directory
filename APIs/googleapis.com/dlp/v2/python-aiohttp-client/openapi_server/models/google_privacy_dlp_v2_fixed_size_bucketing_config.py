# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_value import GooglePrivacyDlpV2Value
from openapi_server import util


class GooglePrivacyDlpV2FixedSizeBucketingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_size: float=None, lower_bound: GooglePrivacyDlpV2Value=None, upper_bound: GooglePrivacyDlpV2Value=None):
        """GooglePrivacyDlpV2FixedSizeBucketingConfig - a model defined in OpenAPI

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :param lower_bound: The lower_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :param upper_bound: The upper_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        """
        self.openapi_types = {
            'bucket_size': float,
            'lower_bound': GooglePrivacyDlpV2Value,
            'upper_bound': GooglePrivacyDlpV2Value
        }

        self.attribute_map = {
            'bucket_size': 'bucketSize',
            'lower_bound': 'lowerBound',
            'upper_bound': 'upperBound'
        }

        self._bucket_size = bucket_size
        self._lower_bound = lower_bound
        self._upper_bound = upper_bound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2FixedSizeBucketingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2FixedSizeBucketingConfig of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_size(self):
        """Gets the bucket_size of this GooglePrivacyDlpV2FixedSizeBucketingConfig.

        Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.

        :return: The bucket_size of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :rtype: float
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this GooglePrivacyDlpV2FixedSizeBucketingConfig.

        Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :type bucket_size: float
        """

        self._bucket_size = bucket_size

    @property
    def lower_bound(self):
        """Gets the lower_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.


        :return: The lower_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :rtype: GooglePrivacyDlpV2Value
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.


        :param lower_bound: The lower_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :type lower_bound: GooglePrivacyDlpV2Value
        """

        self._lower_bound = lower_bound

    @property
    def upper_bound(self):
        """Gets the upper_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.


        :return: The upper_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :rtype: GooglePrivacyDlpV2Value
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.


        :param upper_bound: The upper_bound of this GooglePrivacyDlpV2FixedSizeBucketingConfig.
        :type upper_bound: GooglePrivacyDlpV2Value
        """

        self._upper_bound = upper_bound
