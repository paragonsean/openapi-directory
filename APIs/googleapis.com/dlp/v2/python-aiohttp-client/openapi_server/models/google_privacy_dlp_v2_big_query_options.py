# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_big_query_table import GooglePrivacyDlpV2BigQueryTable
from openapi_server.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_server import util


class GooglePrivacyDlpV2BigQueryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_fields: List[GooglePrivacyDlpV2FieldId]=None, identifying_fields: List[GooglePrivacyDlpV2FieldId]=None, included_fields: List[GooglePrivacyDlpV2FieldId]=None, rows_limit: str=None, rows_limit_percent: int=None, sample_method: str=None, table_reference: GooglePrivacyDlpV2BigQueryTable=None):
        """GooglePrivacyDlpV2BigQueryOptions - a model defined in OpenAPI

        :param excluded_fields: The excluded_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :param identifying_fields: The identifying_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :param included_fields: The included_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :param rows_limit: The rows_limit of this GooglePrivacyDlpV2BigQueryOptions.
        :param rows_limit_percent: The rows_limit_percent of this GooglePrivacyDlpV2BigQueryOptions.
        :param sample_method: The sample_method of this GooglePrivacyDlpV2BigQueryOptions.
        :param table_reference: The table_reference of this GooglePrivacyDlpV2BigQueryOptions.
        """
        self.openapi_types = {
            'excluded_fields': List[GooglePrivacyDlpV2FieldId],
            'identifying_fields': List[GooglePrivacyDlpV2FieldId],
            'included_fields': List[GooglePrivacyDlpV2FieldId],
            'rows_limit': str,
            'rows_limit_percent': int,
            'sample_method': str,
            'table_reference': GooglePrivacyDlpV2BigQueryTable
        }

        self.attribute_map = {
            'excluded_fields': 'excludedFields',
            'identifying_fields': 'identifyingFields',
            'included_fields': 'includedFields',
            'rows_limit': 'rowsLimit',
            'rows_limit_percent': 'rowsLimitPercent',
            'sample_method': 'sampleMethod',
            'table_reference': 'tableReference'
        }

        self._excluded_fields = excluded_fields
        self._identifying_fields = identifying_fields
        self._included_fields = included_fields
        self._rows_limit = rows_limit
        self._rows_limit_percent = rows_limit_percent
        self._sample_method = sample_method
        self._table_reference = table_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2BigQueryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2BigQueryOptions of this GooglePrivacyDlpV2BigQueryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_fields(self):
        """Gets the excluded_fields of this GooglePrivacyDlpV2BigQueryOptions.

        References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.

        :return: The excluded_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: List[GooglePrivacyDlpV2FieldId]
        """
        return self._excluded_fields

    @excluded_fields.setter
    def excluded_fields(self, excluded_fields):
        """Sets the excluded_fields of this GooglePrivacyDlpV2BigQueryOptions.

        References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.

        :param excluded_fields: The excluded_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :type excluded_fields: List[GooglePrivacyDlpV2FieldId]
        """

        self._excluded_fields = excluded_fields

    @property
    def identifying_fields(self):
        """Gets the identifying_fields of this GooglePrivacyDlpV2BigQueryOptions.

        Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.

        :return: The identifying_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: List[GooglePrivacyDlpV2FieldId]
        """
        return self._identifying_fields

    @identifying_fields.setter
    def identifying_fields(self, identifying_fields):
        """Sets the identifying_fields of this GooglePrivacyDlpV2BigQueryOptions.

        Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed.

        :param identifying_fields: The identifying_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :type identifying_fields: List[GooglePrivacyDlpV2FieldId]
        """

        self._identifying_fields = identifying_fields

    @property
    def included_fields(self):
        """Gets the included_fields of this GooglePrivacyDlpV2BigQueryOptions.

        Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.

        :return: The included_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: List[GooglePrivacyDlpV2FieldId]
        """
        return self._included_fields

    @included_fields.setter
    def included_fields(self, included_fields):
        """Sets the included_fields of this GooglePrivacyDlpV2BigQueryOptions.

        Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.

        :param included_fields: The included_fields of this GooglePrivacyDlpV2BigQueryOptions.
        :type included_fields: List[GooglePrivacyDlpV2FieldId]
        """

        self._included_fields = included_fields

    @property
    def rows_limit(self):
        """Gets the rows_limit of this GooglePrivacyDlpV2BigQueryOptions.

        Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.

        :return: The rows_limit of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: str
        """
        return self._rows_limit

    @rows_limit.setter
    def rows_limit(self, rows_limit):
        """Sets the rows_limit of this GooglePrivacyDlpV2BigQueryOptions.

        Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.

        :param rows_limit: The rows_limit of this GooglePrivacyDlpV2BigQueryOptions.
        :type rows_limit: str
        """

        self._rows_limit = rows_limit

    @property
    def rows_limit_percent(self):
        """Gets the rows_limit_percent of this GooglePrivacyDlpV2BigQueryOptions.

        Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/sensitive-data-protection/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.

        :return: The rows_limit_percent of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: int
        """
        return self._rows_limit_percent

    @rows_limit_percent.setter
    def rows_limit_percent(self, rows_limit_percent):
        """Sets the rows_limit_percent of this GooglePrivacyDlpV2BigQueryOptions.

        Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/sensitive-data-protection/docs/known-issues#bq-sampling) is causing the `rowsLimitPercent` field to behave unexpectedly. We recommend using `rowsLimit` instead.

        :param rows_limit_percent: The rows_limit_percent of this GooglePrivacyDlpV2BigQueryOptions.
        :type rows_limit_percent: int
        """

        self._rows_limit_percent = rows_limit_percent

    @property
    def sample_method(self):
        """Gets the sample_method of this GooglePrivacyDlpV2BigQueryOptions.

        How to sample the data.

        :return: The sample_method of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: str
        """
        return self._sample_method

    @sample_method.setter
    def sample_method(self, sample_method):
        """Sets the sample_method of this GooglePrivacyDlpV2BigQueryOptions.

        How to sample the data.

        :param sample_method: The sample_method of this GooglePrivacyDlpV2BigQueryOptions.
        :type sample_method: str
        """
        allowed_values = ["SAMPLE_METHOD_UNSPECIFIED", "TOP", "RANDOM_START"]  # noqa: E501
        if sample_method not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_method` ({0}), must be one of {1}"
                .format(sample_method, allowed_values)
            )

        self._sample_method = sample_method

    @property
    def table_reference(self):
        """Gets the table_reference of this GooglePrivacyDlpV2BigQueryOptions.


        :return: The table_reference of this GooglePrivacyDlpV2BigQueryOptions.
        :rtype: GooglePrivacyDlpV2BigQueryTable
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this GooglePrivacyDlpV2BigQueryOptions.


        :param table_reference: The table_reference of this GooglePrivacyDlpV2BigQueryOptions.
        :type table_reference: GooglePrivacyDlpV2BigQueryTable
        """

        self._table_reference = table_reference
