# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server import util


class GooglePrivacyDlpV2InfoTypeLikelihood(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info_type: GooglePrivacyDlpV2InfoType=None, min_likelihood: str=None):
        """GooglePrivacyDlpV2InfoTypeLikelihood - a model defined in OpenAPI

        :param info_type: The info_type of this GooglePrivacyDlpV2InfoTypeLikelihood.
        :param min_likelihood: The min_likelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.
        """
        self.openapi_types = {
            'info_type': GooglePrivacyDlpV2InfoType,
            'min_likelihood': str
        }

        self.attribute_map = {
            'info_type': 'infoType',
            'min_likelihood': 'minLikelihood'
        }

        self._info_type = info_type
        self._min_likelihood = min_likelihood

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2InfoTypeLikelihood':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2InfoTypeLikelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info_type(self):
        """Gets the info_type of this GooglePrivacyDlpV2InfoTypeLikelihood.


        :return: The info_type of this GooglePrivacyDlpV2InfoTypeLikelihood.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this GooglePrivacyDlpV2InfoTypeLikelihood.


        :param info_type: The info_type of this GooglePrivacyDlpV2InfoTypeLikelihood.
        :type info_type: GooglePrivacyDlpV2InfoType
        """

        self._info_type = info_type

    @property
    def min_likelihood(self):
        """Gets the min_likelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.

        Only returns findings equal to or above this threshold. This field is required or else the configuration fails.

        :return: The min_likelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.
        :rtype: str
        """
        return self._min_likelihood

    @min_likelihood.setter
    def min_likelihood(self, min_likelihood):
        """Sets the min_likelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.

        Only returns findings equal to or above this threshold. This field is required or else the configuration fails.

        :param min_likelihood: The min_likelihood of this GooglePrivacyDlpV2InfoTypeLikelihood.
        :type min_likelihood: str
        """
        allowed_values = ["LIKELIHOOD_UNSPECIFIED", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if min_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `min_likelihood` ({0}), must be one of {1}"
                .format(min_likelihood, allowed_values)
            )

        self._min_likelihood = min_likelihood
