# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_file_set import GooglePrivacyDlpV2FileSet
from openapi_server import util


class GooglePrivacyDlpV2CloudStorageOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_limit_per_file: str=None, bytes_limit_per_file_percent: int=None, file_set: GooglePrivacyDlpV2FileSet=None, file_types: List[str]=None, files_limit_percent: int=None, sample_method: str=None):
        """GooglePrivacyDlpV2CloudStorageOptions - a model defined in OpenAPI

        :param bytes_limit_per_file: The bytes_limit_per_file of this GooglePrivacyDlpV2CloudStorageOptions.
        :param bytes_limit_per_file_percent: The bytes_limit_per_file_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :param file_set: The file_set of this GooglePrivacyDlpV2CloudStorageOptions.
        :param file_types: The file_types of this GooglePrivacyDlpV2CloudStorageOptions.
        :param files_limit_percent: The files_limit_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :param sample_method: The sample_method of this GooglePrivacyDlpV2CloudStorageOptions.
        """
        self.openapi_types = {
            'bytes_limit_per_file': str,
            'bytes_limit_per_file_percent': int,
            'file_set': GooglePrivacyDlpV2FileSet,
            'file_types': List[str],
            'files_limit_percent': int,
            'sample_method': str
        }

        self.attribute_map = {
            'bytes_limit_per_file': 'bytesLimitPerFile',
            'bytes_limit_per_file_percent': 'bytesLimitPerFilePercent',
            'file_set': 'fileSet',
            'file_types': 'fileTypes',
            'files_limit_percent': 'filesLimitPercent',
            'sample_method': 'sampleMethod'
        }

        self._bytes_limit_per_file = bytes_limit_per_file
        self._bytes_limit_per_file_percent = bytes_limit_per_file_percent
        self._file_set = file_set
        self._file_types = file_types
        self._files_limit_percent = files_limit_percent
        self._sample_method = sample_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CloudStorageOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CloudStorageOptions of this GooglePrivacyDlpV2CloudStorageOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_limit_per_file(self):
        """Gets the bytes_limit_per_file of this GooglePrivacyDlpV2CloudStorageOptions.

        Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).

        :return: The bytes_limit_per_file of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: str
        """
        return self._bytes_limit_per_file

    @bytes_limit_per_file.setter
    def bytes_limit_per_file(self, bytes_limit_per_file):
        """Sets the bytes_limit_per_file of this GooglePrivacyDlpV2CloudStorageOptions.

        Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).

        :param bytes_limit_per_file: The bytes_limit_per_file of this GooglePrivacyDlpV2CloudStorageOptions.
        :type bytes_limit_per_file: str
        """

        self._bytes_limit_per_file = bytes_limit_per_file

    @property
    def bytes_limit_per_file_percent(self):
        """Gets the bytes_limit_per_file_percent of this GooglePrivacyDlpV2CloudStorageOptions.

        Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).

        :return: The bytes_limit_per_file_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: int
        """
        return self._bytes_limit_per_file_percent

    @bytes_limit_per_file_percent.setter
    def bytes_limit_per_file_percent(self, bytes_limit_per_file_percent):
        """Sets the bytes_limit_per_file_percent of this GooglePrivacyDlpV2CloudStorageOptions.

        Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).

        :param bytes_limit_per_file_percent: The bytes_limit_per_file_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :type bytes_limit_per_file_percent: int
        """

        self._bytes_limit_per_file_percent = bytes_limit_per_file_percent

    @property
    def file_set(self):
        """Gets the file_set of this GooglePrivacyDlpV2CloudStorageOptions.


        :return: The file_set of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: GooglePrivacyDlpV2FileSet
        """
        return self._file_set

    @file_set.setter
    def file_set(self, file_set):
        """Sets the file_set of this GooglePrivacyDlpV2CloudStorageOptions.


        :param file_set: The file_set of this GooglePrivacyDlpV2CloudStorageOptions.
        :type file_set: GooglePrivacyDlpV2FileSet
        """

        self._file_set = file_set

    @property
    def file_types(self):
        """Gets the file_types of this GooglePrivacyDlpV2CloudStorageOptions.

        List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.

        :return: The file_types of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: List[str]
        """
        return self._file_types

    @file_types.setter
    def file_types(self, file_types):
        """Sets the file_types of this GooglePrivacyDlpV2CloudStorageOptions.

        List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.

        :param file_types: The file_types of this GooglePrivacyDlpV2CloudStorageOptions.
        :type file_types: List[str]
        """
        allowed_values = ["FILE_TYPE_UNSPECIFIED", "BINARY_FILE", "TEXT_FILE", "IMAGE", "WORD", "PDF", "AVRO", "CSV", "TSV", "POWERPOINT", "EXCEL"]  # noqa: E501
        if not set(file_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `file_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(file_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._file_types = file_types

    @property
    def files_limit_percent(self):
        """Gets the files_limit_percent of this GooglePrivacyDlpV2CloudStorageOptions.

        Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.

        :return: The files_limit_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: int
        """
        return self._files_limit_percent

    @files_limit_percent.setter
    def files_limit_percent(self, files_limit_percent):
        """Sets the files_limit_percent of this GooglePrivacyDlpV2CloudStorageOptions.

        Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.

        :param files_limit_percent: The files_limit_percent of this GooglePrivacyDlpV2CloudStorageOptions.
        :type files_limit_percent: int
        """

        self._files_limit_percent = files_limit_percent

    @property
    def sample_method(self):
        """Gets the sample_method of this GooglePrivacyDlpV2CloudStorageOptions.

        How to sample the data.

        :return: The sample_method of this GooglePrivacyDlpV2CloudStorageOptions.
        :rtype: str
        """
        return self._sample_method

    @sample_method.setter
    def sample_method(self, sample_method):
        """Sets the sample_method of this GooglePrivacyDlpV2CloudStorageOptions.

        How to sample the data.

        :param sample_method: The sample_method of this GooglePrivacyDlpV2CloudStorageOptions.
        :type sample_method: str
        """
        allowed_values = ["SAMPLE_METHOD_UNSPECIFIED", "TOP", "RANDOM_START"]  # noqa: E501
        if sample_method not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_method` ({0}), must be one of {1}"
                .format(sample_method, allowed_values)
            )

        self._sample_method = sample_method
