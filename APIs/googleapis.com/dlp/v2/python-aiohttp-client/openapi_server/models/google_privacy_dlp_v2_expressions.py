# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_conditions import GooglePrivacyDlpV2Conditions
from openapi_server import util


class GooglePrivacyDlpV2Expressions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: GooglePrivacyDlpV2Conditions=None, logical_operator: str=None):
        """GooglePrivacyDlpV2Expressions - a model defined in OpenAPI

        :param conditions: The conditions of this GooglePrivacyDlpV2Expressions.
        :param logical_operator: The logical_operator of this GooglePrivacyDlpV2Expressions.
        """
        self.openapi_types = {
            'conditions': GooglePrivacyDlpV2Conditions,
            'logical_operator': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'logical_operator': 'logicalOperator'
        }

        self._conditions = conditions
        self._logical_operator = logical_operator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Expressions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Expressions of this GooglePrivacyDlpV2Expressions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this GooglePrivacyDlpV2Expressions.


        :return: The conditions of this GooglePrivacyDlpV2Expressions.
        :rtype: GooglePrivacyDlpV2Conditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GooglePrivacyDlpV2Expressions.


        :param conditions: The conditions of this GooglePrivacyDlpV2Expressions.
        :type conditions: GooglePrivacyDlpV2Conditions
        """

        self._conditions = conditions

    @property
    def logical_operator(self):
        """Gets the logical_operator of this GooglePrivacyDlpV2Expressions.

        The operator to apply to the result of conditions. Default and currently only supported value is `AND`.

        :return: The logical_operator of this GooglePrivacyDlpV2Expressions.
        :rtype: str
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this GooglePrivacyDlpV2Expressions.

        The operator to apply to the result of conditions. Default and currently only supported value is `AND`.

        :param logical_operator: The logical_operator of this GooglePrivacyDlpV2Expressions.
        :type logical_operator: str
        """
        allowed_values = ["LOGICAL_OPERATOR_UNSPECIFIED", "AND"]  # noqa: E501
        if logical_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_operator` ({0}), must be one of {1}"
                .format(logical_operator, allowed_values)
            )

        self._logical_operator = logical_operator
