# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2BigQueryRegex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_id_regex: str=None, project_id_regex: str=None, table_id_regex: str=None):
        """GooglePrivacyDlpV2BigQueryRegex - a model defined in OpenAPI

        :param dataset_id_regex: The dataset_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :param project_id_regex: The project_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :param table_id_regex: The table_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        """
        self.openapi_types = {
            'dataset_id_regex': str,
            'project_id_regex': str,
            'table_id_regex': str
        }

        self.attribute_map = {
            'dataset_id_regex': 'datasetIdRegex',
            'project_id_regex': 'projectIdRegex',
            'table_id_regex': 'tableIdRegex'
        }

        self._dataset_id_regex = dataset_id_regex
        self._project_id_regex = project_id_regex
        self._table_id_regex = table_id_regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2BigQueryRegex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2BigQueryRegex of this GooglePrivacyDlpV2BigQueryRegex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id_regex(self):
        """Gets the dataset_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        If unset, this property matches all datasets.

        :return: The dataset_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :rtype: str
        """
        return self._dataset_id_regex

    @dataset_id_regex.setter
    def dataset_id_regex(self, dataset_id_regex):
        """Sets the dataset_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        If unset, this property matches all datasets.

        :param dataset_id_regex: The dataset_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :type dataset_id_regex: str
        """

        self._dataset_id_regex = dataset_id_regex

    @property
    def project_id_regex(self):
        """Gets the project_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.

        :return: The project_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :rtype: str
        """
        return self._project_id_regex

    @project_id_regex.setter
    def project_id_regex(self, project_id_regex):
        """Sets the project_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.

        :param project_id_regex: The project_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :type project_id_regex: str
        """

        self._project_id_regex = project_id_regex

    @property
    def table_id_regex(self):
        """Gets the table_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        If unset, this property matches all tables.

        :return: The table_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :rtype: str
        """
        return self._table_id_regex

    @table_id_regex.setter
    def table_id_regex(self, table_id_regex):
        """Sets the table_id_regex of this GooglePrivacyDlpV2BigQueryRegex.

        If unset, this property matches all tables.

        :param table_id_regex: The table_id_regex of this GooglePrivacyDlpV2BigQueryRegex.
        :type table_id_regex: str
        """

        self._table_id_regex = table_id_regex
