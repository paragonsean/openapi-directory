# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2PublishToPubSub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None):
        """GooglePrivacyDlpV2PublishToPubSub - a model defined in OpenAPI

        :param topic: The topic of this GooglePrivacyDlpV2PublishToPubSub.
        """
        self.openapi_types = {
            'topic': str
        }

        self.attribute_map = {
            'topic': 'topic'
        }

        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2PublishToPubSub':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2PublishToPubSub of this GooglePrivacyDlpV2PublishToPubSub.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self):
        """Gets the topic of this GooglePrivacyDlpV2PublishToPubSub.

        Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.

        :return: The topic of this GooglePrivacyDlpV2PublishToPubSub.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this GooglePrivacyDlpV2PublishToPubSub.

        Cloud Pub/Sub topic to send notifications to. The topic must have given publishing access rights to the DLP API service account executing the long running DlpJob sending the notifications. Format is projects/{project}/topics/{topic}.

        :param topic: The topic of this GooglePrivacyDlpV2PublishToPubSub.
        :type topic: str
        """

        self._topic = topic
