# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_quasi_id import GooglePrivacyDlpV2QuasiId
from openapi_server.models.google_privacy_dlp_v2_statistical_table import GooglePrivacyDlpV2StatisticalTable
from openapi_server import util


class GooglePrivacyDlpV2DeltaPresenceEstimationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auxiliary_tables: List[GooglePrivacyDlpV2StatisticalTable]=None, quasi_ids: List[GooglePrivacyDlpV2QuasiId]=None, region_code: str=None):
        """GooglePrivacyDlpV2DeltaPresenceEstimationConfig - a model defined in OpenAPI

        :param auxiliary_tables: The auxiliary_tables of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :param quasi_ids: The quasi_ids of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :param region_code: The region_code of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        """
        self.openapi_types = {
            'auxiliary_tables': List[GooglePrivacyDlpV2StatisticalTable],
            'quasi_ids': List[GooglePrivacyDlpV2QuasiId],
            'region_code': str
        }

        self.attribute_map = {
            'auxiliary_tables': 'auxiliaryTables',
            'quasi_ids': 'quasiIds',
            'region_code': 'regionCode'
        }

        self._auxiliary_tables = auxiliary_tables
        self._quasi_ids = quasi_ids
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DeltaPresenceEstimationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DeltaPresenceEstimationConfig of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auxiliary_tables(self):
        """Gets the auxiliary_tables of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.

        :return: The auxiliary_tables of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :rtype: List[GooglePrivacyDlpV2StatisticalTable]
        """
        return self._auxiliary_tables

    @auxiliary_tables.setter
    def auxiliary_tables(self, auxiliary_tables):
        """Sets the auxiliary_tables of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers field must appear in exactly one field of one auxiliary table.

        :param auxiliary_tables: The auxiliary_tables of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :type auxiliary_tables: List[GooglePrivacyDlpV2StatisticalTable]
        """

        self._auxiliary_tables = auxiliary_tables

    @property
    def quasi_ids(self):
        """Gets the quasi_ids of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        Required. Fields considered to be quasi-identifiers. No two fields can have the same tag.

        :return: The quasi_ids of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :rtype: List[GooglePrivacyDlpV2QuasiId]
        """
        return self._quasi_ids

    @quasi_ids.setter
    def quasi_ids(self, quasi_ids):
        """Sets the quasi_ids of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        Required. Fields considered to be quasi-identifiers. No two fields can have the same tag.

        :param quasi_ids: The quasi_ids of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :type quasi_ids: List[GooglePrivacyDlpV2QuasiId]
        """

        self._quasi_ids = quasi_ids

    @property
    def region_code(self):
        """Gets the region_code of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.

        :return: The region_code of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.

        ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.

        :param region_code: The region_code of this GooglePrivacyDlpV2DeltaPresenceEstimationConfig.
        :type region_code: str
        """

        self._region_code = region_code
