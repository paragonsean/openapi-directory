# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_image_transformations import GooglePrivacyDlpV2ImageTransformations
from openapi_server.models.google_privacy_dlp_v2_info_type_transformations import GooglePrivacyDlpV2InfoTypeTransformations
from openapi_server.models.google_privacy_dlp_v2_record_transformations import GooglePrivacyDlpV2RecordTransformations
from openapi_server.models.google_privacy_dlp_v2_transformation_error_handling import GooglePrivacyDlpV2TransformationErrorHandling
from openapi_server import util


class GooglePrivacyDlpV2DeidentifyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_transformations: GooglePrivacyDlpV2ImageTransformations=None, info_type_transformations: GooglePrivacyDlpV2InfoTypeTransformations=None, record_transformations: GooglePrivacyDlpV2RecordTransformations=None, transformation_error_handling: GooglePrivacyDlpV2TransformationErrorHandling=None):
        """GooglePrivacyDlpV2DeidentifyConfig - a model defined in OpenAPI

        :param image_transformations: The image_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :param info_type_transformations: The info_type_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :param record_transformations: The record_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :param transformation_error_handling: The transformation_error_handling of this GooglePrivacyDlpV2DeidentifyConfig.
        """
        self.openapi_types = {
            'image_transformations': GooglePrivacyDlpV2ImageTransformations,
            'info_type_transformations': GooglePrivacyDlpV2InfoTypeTransformations,
            'record_transformations': GooglePrivacyDlpV2RecordTransformations,
            'transformation_error_handling': GooglePrivacyDlpV2TransformationErrorHandling
        }

        self.attribute_map = {
            'image_transformations': 'imageTransformations',
            'info_type_transformations': 'infoTypeTransformations',
            'record_transformations': 'recordTransformations',
            'transformation_error_handling': 'transformationErrorHandling'
        }

        self._image_transformations = image_transformations
        self._info_type_transformations = info_type_transformations
        self._record_transformations = record_transformations
        self._transformation_error_handling = transformation_error_handling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DeidentifyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DeidentifyConfig of this GooglePrivacyDlpV2DeidentifyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_transformations(self):
        """Gets the image_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :return: The image_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :rtype: GooglePrivacyDlpV2ImageTransformations
        """
        return self._image_transformations

    @image_transformations.setter
    def image_transformations(self, image_transformations):
        """Sets the image_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :param image_transformations: The image_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :type image_transformations: GooglePrivacyDlpV2ImageTransformations
        """

        self._image_transformations = image_transformations

    @property
    def info_type_transformations(self):
        """Gets the info_type_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :return: The info_type_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :rtype: GooglePrivacyDlpV2InfoTypeTransformations
        """
        return self._info_type_transformations

    @info_type_transformations.setter
    def info_type_transformations(self, info_type_transformations):
        """Sets the info_type_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :param info_type_transformations: The info_type_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :type info_type_transformations: GooglePrivacyDlpV2InfoTypeTransformations
        """

        self._info_type_transformations = info_type_transformations

    @property
    def record_transformations(self):
        """Gets the record_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :return: The record_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :rtype: GooglePrivacyDlpV2RecordTransformations
        """
        return self._record_transformations

    @record_transformations.setter
    def record_transformations(self, record_transformations):
        """Sets the record_transformations of this GooglePrivacyDlpV2DeidentifyConfig.


        :param record_transformations: The record_transformations of this GooglePrivacyDlpV2DeidentifyConfig.
        :type record_transformations: GooglePrivacyDlpV2RecordTransformations
        """

        self._record_transformations = record_transformations

    @property
    def transformation_error_handling(self):
        """Gets the transformation_error_handling of this GooglePrivacyDlpV2DeidentifyConfig.


        :return: The transformation_error_handling of this GooglePrivacyDlpV2DeidentifyConfig.
        :rtype: GooglePrivacyDlpV2TransformationErrorHandling
        """
        return self._transformation_error_handling

    @transformation_error_handling.setter
    def transformation_error_handling(self, transformation_error_handling):
        """Sets the transformation_error_handling of this GooglePrivacyDlpV2DeidentifyConfig.


        :param transformation_error_handling: The transformation_error_handling of this GooglePrivacyDlpV2DeidentifyConfig.
        :type transformation_error_handling: GooglePrivacyDlpV2TransformationErrorHandling
        """

        self._transformation_error_handling = transformation_error_handling
