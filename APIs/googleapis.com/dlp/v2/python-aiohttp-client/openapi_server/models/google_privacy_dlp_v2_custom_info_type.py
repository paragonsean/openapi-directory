# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_detection_rule import GooglePrivacyDlpV2DetectionRule
from openapi_server.models.google_privacy_dlp_v2_dictionary import GooglePrivacyDlpV2Dictionary
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server.models.google_privacy_dlp_v2_regex import GooglePrivacyDlpV2Regex
from openapi_server.models.google_privacy_dlp_v2_sensitivity_score import GooglePrivacyDlpV2SensitivityScore
from openapi_server.models.google_privacy_dlp_v2_stored_type import GooglePrivacyDlpV2StoredType
from openapi_server import util


class GooglePrivacyDlpV2CustomInfoType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detection_rules: List[GooglePrivacyDlpV2DetectionRule]=None, dictionary: GooglePrivacyDlpV2Dictionary=None, exclusion_type: str=None, info_type: GooglePrivacyDlpV2InfoType=None, likelihood: str=None, regex: GooglePrivacyDlpV2Regex=None, sensitivity_score: GooglePrivacyDlpV2SensitivityScore=None, stored_type: GooglePrivacyDlpV2StoredType=None, surrogate_type: object=None):
        """GooglePrivacyDlpV2CustomInfoType - a model defined in OpenAPI

        :param detection_rules: The detection_rules of this GooglePrivacyDlpV2CustomInfoType.
        :param dictionary: The dictionary of this GooglePrivacyDlpV2CustomInfoType.
        :param exclusion_type: The exclusion_type of this GooglePrivacyDlpV2CustomInfoType.
        :param info_type: The info_type of this GooglePrivacyDlpV2CustomInfoType.
        :param likelihood: The likelihood of this GooglePrivacyDlpV2CustomInfoType.
        :param regex: The regex of this GooglePrivacyDlpV2CustomInfoType.
        :param sensitivity_score: The sensitivity_score of this GooglePrivacyDlpV2CustomInfoType.
        :param stored_type: The stored_type of this GooglePrivacyDlpV2CustomInfoType.
        :param surrogate_type: The surrogate_type of this GooglePrivacyDlpV2CustomInfoType.
        """
        self.openapi_types = {
            'detection_rules': List[GooglePrivacyDlpV2DetectionRule],
            'dictionary': GooglePrivacyDlpV2Dictionary,
            'exclusion_type': str,
            'info_type': GooglePrivacyDlpV2InfoType,
            'likelihood': str,
            'regex': GooglePrivacyDlpV2Regex,
            'sensitivity_score': GooglePrivacyDlpV2SensitivityScore,
            'stored_type': GooglePrivacyDlpV2StoredType,
            'surrogate_type': object
        }

        self.attribute_map = {
            'detection_rules': 'detectionRules',
            'dictionary': 'dictionary',
            'exclusion_type': 'exclusionType',
            'info_type': 'infoType',
            'likelihood': 'likelihood',
            'regex': 'regex',
            'sensitivity_score': 'sensitivityScore',
            'stored_type': 'storedType',
            'surrogate_type': 'surrogateType'
        }

        self._detection_rules = detection_rules
        self._dictionary = dictionary
        self._exclusion_type = exclusion_type
        self._info_type = info_type
        self._likelihood = likelihood
        self._regex = regex
        self._sensitivity_score = sensitivity_score
        self._stored_type = stored_type
        self._surrogate_type = surrogate_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2CustomInfoType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2CustomInfoType of this GooglePrivacyDlpV2CustomInfoType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detection_rules(self):
        """Gets the detection_rules of this GooglePrivacyDlpV2CustomInfoType.

        Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.

        :return: The detection_rules of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: List[GooglePrivacyDlpV2DetectionRule]
        """
        return self._detection_rules

    @detection_rules.setter
    def detection_rules(self, detection_rules):
        """Sets the detection_rules of this GooglePrivacyDlpV2CustomInfoType.

        Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.

        :param detection_rules: The detection_rules of this GooglePrivacyDlpV2CustomInfoType.
        :type detection_rules: List[GooglePrivacyDlpV2DetectionRule]
        """

        self._detection_rules = detection_rules

    @property
    def dictionary(self):
        """Gets the dictionary of this GooglePrivacyDlpV2CustomInfoType.


        :return: The dictionary of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: GooglePrivacyDlpV2Dictionary
        """
        return self._dictionary

    @dictionary.setter
    def dictionary(self, dictionary):
        """Sets the dictionary of this GooglePrivacyDlpV2CustomInfoType.


        :param dictionary: The dictionary of this GooglePrivacyDlpV2CustomInfoType.
        :type dictionary: GooglePrivacyDlpV2Dictionary
        """

        self._dictionary = dictionary

    @property
    def exclusion_type(self):
        """Gets the exclusion_type of this GooglePrivacyDlpV2CustomInfoType.

        If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.

        :return: The exclusion_type of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: str
        """
        return self._exclusion_type

    @exclusion_type.setter
    def exclusion_type(self, exclusion_type):
        """Sets the exclusion_type of this GooglePrivacyDlpV2CustomInfoType.

        If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.

        :param exclusion_type: The exclusion_type of this GooglePrivacyDlpV2CustomInfoType.
        :type exclusion_type: str
        """
        allowed_values = ["EXCLUSION_TYPE_UNSPECIFIED", "EXCLUSION_TYPE_EXCLUDE"]  # noqa: E501
        if exclusion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `exclusion_type` ({0}), must be one of {1}"
                .format(exclusion_type, allowed_values)
            )

        self._exclusion_type = exclusion_type

    @property
    def info_type(self):
        """Gets the info_type of this GooglePrivacyDlpV2CustomInfoType.


        :return: The info_type of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this GooglePrivacyDlpV2CustomInfoType.


        :param info_type: The info_type of this GooglePrivacyDlpV2CustomInfoType.
        :type info_type: GooglePrivacyDlpV2InfoType
        """

        self._info_type = info_type

    @property
    def likelihood(self):
        """Gets the likelihood of this GooglePrivacyDlpV2CustomInfoType.

        Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.

        :return: The likelihood of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: str
        """
        return self._likelihood

    @likelihood.setter
    def likelihood(self, likelihood):
        """Sets the likelihood of this GooglePrivacyDlpV2CustomInfoType.

        Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.

        :param likelihood: The likelihood of this GooglePrivacyDlpV2CustomInfoType.
        :type likelihood: str
        """
        allowed_values = ["LIKELIHOOD_UNSPECIFIED", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `likelihood` ({0}), must be one of {1}"
                .format(likelihood, allowed_values)
            )

        self._likelihood = likelihood

    @property
    def regex(self):
        """Gets the regex of this GooglePrivacyDlpV2CustomInfoType.


        :return: The regex of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: GooglePrivacyDlpV2Regex
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this GooglePrivacyDlpV2CustomInfoType.


        :param regex: The regex of this GooglePrivacyDlpV2CustomInfoType.
        :type regex: GooglePrivacyDlpV2Regex
        """

        self._regex = regex

    @property
    def sensitivity_score(self):
        """Gets the sensitivity_score of this GooglePrivacyDlpV2CustomInfoType.


        :return: The sensitivity_score of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: GooglePrivacyDlpV2SensitivityScore
        """
        return self._sensitivity_score

    @sensitivity_score.setter
    def sensitivity_score(self, sensitivity_score):
        """Sets the sensitivity_score of this GooglePrivacyDlpV2CustomInfoType.


        :param sensitivity_score: The sensitivity_score of this GooglePrivacyDlpV2CustomInfoType.
        :type sensitivity_score: GooglePrivacyDlpV2SensitivityScore
        """

        self._sensitivity_score = sensitivity_score

    @property
    def stored_type(self):
        """Gets the stored_type of this GooglePrivacyDlpV2CustomInfoType.


        :return: The stored_type of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: GooglePrivacyDlpV2StoredType
        """
        return self._stored_type

    @stored_type.setter
    def stored_type(self, stored_type):
        """Sets the stored_type of this GooglePrivacyDlpV2CustomInfoType.


        :param stored_type: The stored_type of this GooglePrivacyDlpV2CustomInfoType.
        :type stored_type: GooglePrivacyDlpV2StoredType
        """

        self._stored_type = stored_type

    @property
    def surrogate_type(self):
        """Gets the surrogate_type of this GooglePrivacyDlpV2CustomInfoType.

        Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a \"surrogate\" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.

        :return: The surrogate_type of this GooglePrivacyDlpV2CustomInfoType.
        :rtype: object
        """
        return self._surrogate_type

    @surrogate_type.setter
    def surrogate_type(self, surrogate_type):
        """Sets the surrogate_type of this GooglePrivacyDlpV2CustomInfoType.

        Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a \"surrogate\" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.

        :param surrogate_type: The surrogate_type of this GooglePrivacyDlpV2CustomInfoType.
        :type surrogate_type: object
        """

        self._surrogate_type = surrogate_type
