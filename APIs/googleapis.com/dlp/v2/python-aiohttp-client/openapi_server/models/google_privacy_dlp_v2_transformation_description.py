# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_server import util


class GooglePrivacyDlpV2TransformationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, description: str=None, info_type: GooglePrivacyDlpV2InfoType=None, type: str=None):
        """GooglePrivacyDlpV2TransformationDescription - a model defined in OpenAPI

        :param condition: The condition of this GooglePrivacyDlpV2TransformationDescription.
        :param description: The description of this GooglePrivacyDlpV2TransformationDescription.
        :param info_type: The info_type of this GooglePrivacyDlpV2TransformationDescription.
        :param type: The type of this GooglePrivacyDlpV2TransformationDescription.
        """
        self.openapi_types = {
            'condition': str,
            'description': str,
            'info_type': GooglePrivacyDlpV2InfoType,
            'type': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'description': 'description',
            'info_type': 'infoType',
            'type': 'type'
        }

        self._condition = condition
        self._description = description
        self._info_type = info_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2TransformationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2TransformationDescription of this GooglePrivacyDlpV2TransformationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this GooglePrivacyDlpV2TransformationDescription.

        A human-readable string representation of the `RecordCondition` corresponding to this transformation. Set if a `RecordCondition` was used to determine whether or not to apply this transformation. Examples: * (age_field > 85) * (age_field <= 18) * (zip_field exists) * (zip_field == 01234) && (city_field != \"Springville\") * (zip_field == 01234) && (age_field <= 18) && (city_field exists)

        :return: The condition of this GooglePrivacyDlpV2TransformationDescription.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GooglePrivacyDlpV2TransformationDescription.

        A human-readable string representation of the `RecordCondition` corresponding to this transformation. Set if a `RecordCondition` was used to determine whether or not to apply this transformation. Examples: * (age_field > 85) * (age_field <= 18) * (zip_field exists) * (zip_field == 01234) && (city_field != \"Springville\") * (zip_field == 01234) && (age_field <= 18) && (city_field exists)

        :param condition: The condition of this GooglePrivacyDlpV2TransformationDescription.
        :type condition: str
        """

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this GooglePrivacyDlpV2TransformationDescription.

        A description of the transformation. This is empty for a RECORD_SUPPRESSION, or is the output of calling toString() on the `PrimitiveTransformation` protocol buffer message for any other type of transformation.

        :return: The description of this GooglePrivacyDlpV2TransformationDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GooglePrivacyDlpV2TransformationDescription.

        A description of the transformation. This is empty for a RECORD_SUPPRESSION, or is the output of calling toString() on the `PrimitiveTransformation` protocol buffer message for any other type of transformation.

        :param description: The description of this GooglePrivacyDlpV2TransformationDescription.
        :type description: str
        """

        self._description = description

    @property
    def info_type(self):
        """Gets the info_type of this GooglePrivacyDlpV2TransformationDescription.


        :return: The info_type of this GooglePrivacyDlpV2TransformationDescription.
        :rtype: GooglePrivacyDlpV2InfoType
        """
        return self._info_type

    @info_type.setter
    def info_type(self, info_type):
        """Sets the info_type of this GooglePrivacyDlpV2TransformationDescription.


        :param info_type: The info_type of this GooglePrivacyDlpV2TransformationDescription.
        :type info_type: GooglePrivacyDlpV2InfoType
        """

        self._info_type = info_type

    @property
    def type(self):
        """Gets the type of this GooglePrivacyDlpV2TransformationDescription.

        The transformation type.

        :return: The type of this GooglePrivacyDlpV2TransformationDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GooglePrivacyDlpV2TransformationDescription.

        The transformation type.

        :param type: The type of this GooglePrivacyDlpV2TransformationDescription.
        :type type: str
        """
        allowed_values = ["TRANSFORMATION_TYPE_UNSPECIFIED", "RECORD_SUPPRESSION", "REPLACE_VALUE", "REPLACE_DICTIONARY", "REDACT", "CHARACTER_MASK", "CRYPTO_REPLACE_FFX_FPE", "FIXED_SIZE_BUCKETING", "BUCKETING", "REPLACE_WITH_INFO_TYPE", "TIME_PART", "CRYPTO_HASH", "DATE_SHIFT", "CRYPTO_DETERMINISTIC_CONFIG", "REDACT_IMAGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
