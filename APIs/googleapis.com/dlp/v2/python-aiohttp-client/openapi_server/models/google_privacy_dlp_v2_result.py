# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_hybrid_inspect_statistics import GooglePrivacyDlpV2HybridInspectStatistics
from openapi_server.models.google_privacy_dlp_v2_info_type_stats import GooglePrivacyDlpV2InfoTypeStats
from openapi_server import util


class GooglePrivacyDlpV2Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hybrid_stats: GooglePrivacyDlpV2HybridInspectStatistics=None, info_type_stats: List[GooglePrivacyDlpV2InfoTypeStats]=None, processed_bytes: str=None, total_estimated_bytes: str=None):
        """GooglePrivacyDlpV2Result - a model defined in OpenAPI

        :param hybrid_stats: The hybrid_stats of this GooglePrivacyDlpV2Result.
        :param info_type_stats: The info_type_stats of this GooglePrivacyDlpV2Result.
        :param processed_bytes: The processed_bytes of this GooglePrivacyDlpV2Result.
        :param total_estimated_bytes: The total_estimated_bytes of this GooglePrivacyDlpV2Result.
        """
        self.openapi_types = {
            'hybrid_stats': GooglePrivacyDlpV2HybridInspectStatistics,
            'info_type_stats': List[GooglePrivacyDlpV2InfoTypeStats],
            'processed_bytes': str,
            'total_estimated_bytes': str
        }

        self.attribute_map = {
            'hybrid_stats': 'hybridStats',
            'info_type_stats': 'infoTypeStats',
            'processed_bytes': 'processedBytes',
            'total_estimated_bytes': 'totalEstimatedBytes'
        }

        self._hybrid_stats = hybrid_stats
        self._info_type_stats = info_type_stats
        self._processed_bytes = processed_bytes
        self._total_estimated_bytes = total_estimated_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Result of this GooglePrivacyDlpV2Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hybrid_stats(self):
        """Gets the hybrid_stats of this GooglePrivacyDlpV2Result.


        :return: The hybrid_stats of this GooglePrivacyDlpV2Result.
        :rtype: GooglePrivacyDlpV2HybridInspectStatistics
        """
        return self._hybrid_stats

    @hybrid_stats.setter
    def hybrid_stats(self, hybrid_stats):
        """Sets the hybrid_stats of this GooglePrivacyDlpV2Result.


        :param hybrid_stats: The hybrid_stats of this GooglePrivacyDlpV2Result.
        :type hybrid_stats: GooglePrivacyDlpV2HybridInspectStatistics
        """

        self._hybrid_stats = hybrid_stats

    @property
    def info_type_stats(self):
        """Gets the info_type_stats of this GooglePrivacyDlpV2Result.

        Statistics of how many instances of each info type were found during inspect job.

        :return: The info_type_stats of this GooglePrivacyDlpV2Result.
        :rtype: List[GooglePrivacyDlpV2InfoTypeStats]
        """
        return self._info_type_stats

    @info_type_stats.setter
    def info_type_stats(self, info_type_stats):
        """Sets the info_type_stats of this GooglePrivacyDlpV2Result.

        Statistics of how many instances of each info type were found during inspect job.

        :param info_type_stats: The info_type_stats of this GooglePrivacyDlpV2Result.
        :type info_type_stats: List[GooglePrivacyDlpV2InfoTypeStats]
        """

        self._info_type_stats = info_type_stats

    @property
    def processed_bytes(self):
        """Gets the processed_bytes of this GooglePrivacyDlpV2Result.

        Total size in bytes that were processed.

        :return: The processed_bytes of this GooglePrivacyDlpV2Result.
        :rtype: str
        """
        return self._processed_bytes

    @processed_bytes.setter
    def processed_bytes(self, processed_bytes):
        """Sets the processed_bytes of this GooglePrivacyDlpV2Result.

        Total size in bytes that were processed.

        :param processed_bytes: The processed_bytes of this GooglePrivacyDlpV2Result.
        :type processed_bytes: str
        """

        self._processed_bytes = processed_bytes

    @property
    def total_estimated_bytes(self):
        """Gets the total_estimated_bytes of this GooglePrivacyDlpV2Result.

        Estimate of the number of bytes to process.

        :return: The total_estimated_bytes of this GooglePrivacyDlpV2Result.
        :rtype: str
        """
        return self._total_estimated_bytes

    @total_estimated_bytes.setter
    def total_estimated_bytes(self, total_estimated_bytes):
        """Sets the total_estimated_bytes of this GooglePrivacyDlpV2Result.

        Estimate of the number of bytes to process.

        :param total_estimated_bytes: The total_estimated_bytes of this GooglePrivacyDlpV2Result.
        :type total_estimated_bytes: str
        """

        self._total_estimated_bytes = total_estimated_bytes
