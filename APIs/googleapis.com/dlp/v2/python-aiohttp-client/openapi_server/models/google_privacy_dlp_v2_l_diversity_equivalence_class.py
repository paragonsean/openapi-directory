# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_value import GooglePrivacyDlpV2Value
from openapi_server.models.google_privacy_dlp_v2_value_frequency import GooglePrivacyDlpV2ValueFrequency
from openapi_server import util


class GooglePrivacyDlpV2LDiversityEquivalenceClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equivalence_class_size: str=None, num_distinct_sensitive_values: str=None, quasi_ids_values: List[GooglePrivacyDlpV2Value]=None, top_sensitive_values: List[GooglePrivacyDlpV2ValueFrequency]=None):
        """GooglePrivacyDlpV2LDiversityEquivalenceClass - a model defined in OpenAPI

        :param equivalence_class_size: The equivalence_class_size of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :param num_distinct_sensitive_values: The num_distinct_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :param quasi_ids_values: The quasi_ids_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :param top_sensitive_values: The top_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        """
        self.openapi_types = {
            'equivalence_class_size': str,
            'num_distinct_sensitive_values': str,
            'quasi_ids_values': List[GooglePrivacyDlpV2Value],
            'top_sensitive_values': List[GooglePrivacyDlpV2ValueFrequency]
        }

        self.attribute_map = {
            'equivalence_class_size': 'equivalenceClassSize',
            'num_distinct_sensitive_values': 'numDistinctSensitiveValues',
            'quasi_ids_values': 'quasiIdsValues',
            'top_sensitive_values': 'topSensitiveValues'
        }

        self._equivalence_class_size = equivalence_class_size
        self._num_distinct_sensitive_values = num_distinct_sensitive_values
        self._quasi_ids_values = quasi_ids_values
        self._top_sensitive_values = top_sensitive_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2LDiversityEquivalenceClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2LDiversityEquivalenceClass of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equivalence_class_size(self):
        """Gets the equivalence_class_size of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Size of the k-anonymity equivalence class.

        :return: The equivalence_class_size of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :rtype: str
        """
        return self._equivalence_class_size

    @equivalence_class_size.setter
    def equivalence_class_size(self, equivalence_class_size):
        """Sets the equivalence_class_size of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Size of the k-anonymity equivalence class.

        :param equivalence_class_size: The equivalence_class_size of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :type equivalence_class_size: str
        """

        self._equivalence_class_size = equivalence_class_size

    @property
    def num_distinct_sensitive_values(self):
        """Gets the num_distinct_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Number of distinct sensitive values in this equivalence class.

        :return: The num_distinct_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :rtype: str
        """
        return self._num_distinct_sensitive_values

    @num_distinct_sensitive_values.setter
    def num_distinct_sensitive_values(self, num_distinct_sensitive_values):
        """Sets the num_distinct_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Number of distinct sensitive values in this equivalence class.

        :param num_distinct_sensitive_values: The num_distinct_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :type num_distinct_sensitive_values: str
        """

        self._num_distinct_sensitive_values = num_distinct_sensitive_values

    @property
    def quasi_ids_values(self):
        """Gets the quasi_ids_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Quasi-identifier values defining the k-anonymity equivalence class. The order is always the same as the original request.

        :return: The quasi_ids_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :rtype: List[GooglePrivacyDlpV2Value]
        """
        return self._quasi_ids_values

    @quasi_ids_values.setter
    def quasi_ids_values(self, quasi_ids_values):
        """Sets the quasi_ids_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Quasi-identifier values defining the k-anonymity equivalence class. The order is always the same as the original request.

        :param quasi_ids_values: The quasi_ids_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :type quasi_ids_values: List[GooglePrivacyDlpV2Value]
        """

        self._quasi_ids_values = quasi_ids_values

    @property
    def top_sensitive_values(self):
        """Gets the top_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Estimated frequencies of top sensitive values.

        :return: The top_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :rtype: List[GooglePrivacyDlpV2ValueFrequency]
        """
        return self._top_sensitive_values

    @top_sensitive_values.setter
    def top_sensitive_values(self, top_sensitive_values):
        """Sets the top_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.

        Estimated frequencies of top sensitive values.

        :param top_sensitive_values: The top_sensitive_values of this GooglePrivacyDlpV2LDiversityEquivalenceClass.
        :type top_sensitive_values: List[GooglePrivacyDlpV2ValueFrequency]
        """

        self._top_sensitive_values = top_sensitive_values
