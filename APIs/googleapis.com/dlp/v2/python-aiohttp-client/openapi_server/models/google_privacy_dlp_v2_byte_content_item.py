# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2ByteContentItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, type: str=None):
        """GooglePrivacyDlpV2ByteContentItem - a model defined in OpenAPI

        :param data: The data of this GooglePrivacyDlpV2ByteContentItem.
        :param type: The type of this GooglePrivacyDlpV2ByteContentItem.
        """
        self.openapi_types = {
            'data': str,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'type': 'type'
        }

        self._data = data
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2ByteContentItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2ByteContentItem of this GooglePrivacyDlpV2ByteContentItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this GooglePrivacyDlpV2ByteContentItem.

        Content data to inspect or redact.

        :return: The data of this GooglePrivacyDlpV2ByteContentItem.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this GooglePrivacyDlpV2ByteContentItem.

        Content data to inspect or redact.

        :param data: The data of this GooglePrivacyDlpV2ByteContentItem.
        :type data: str
        """

        self._data = data

    @property
    def type(self):
        """Gets the type of this GooglePrivacyDlpV2ByteContentItem.

        The type of data stored in the bytes string. Default will be TEXT_UTF8.

        :return: The type of this GooglePrivacyDlpV2ByteContentItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GooglePrivacyDlpV2ByteContentItem.

        The type of data stored in the bytes string. Default will be TEXT_UTF8.

        :param type: The type of this GooglePrivacyDlpV2ByteContentItem.
        :type type: str
        """
        allowed_values = ["BYTES_TYPE_UNSPECIFIED", "IMAGE", "IMAGE_JPEG", "IMAGE_BMP", "IMAGE_PNG", "IMAGE_SVG", "TEXT_UTF8", "WORD_DOCUMENT", "PDF", "POWERPOINT_DOCUMENT", "EXCEL_DOCUMENT", "AVRO", "CSV", "TSV"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
