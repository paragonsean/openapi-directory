# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_delta_presence_estimation_quasi_id_values import GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues
from openapi_server import util


class GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_size: str=None, bucket_value_count: str=None, bucket_values: List[GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues]=None, max_probability: float=None, min_probability: float=None):
        """GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket - a model defined in OpenAPI

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :param bucket_value_count: The bucket_value_count of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :param bucket_values: The bucket_values of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :param max_probability: The max_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :param min_probability: The min_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        """
        self.openapi_types = {
            'bucket_size': str,
            'bucket_value_count': str,
            'bucket_values': List[GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues],
            'max_probability': float,
            'min_probability': float
        }

        self.attribute_map = {
            'bucket_size': 'bucketSize',
            'bucket_value_count': 'bucketValueCount',
            'bucket_values': 'bucketValues',
            'max_probability': 'maxProbability',
            'min_probability': 'minProbability'
        }

        self._bucket_size = bucket_size
        self._bucket_value_count = bucket_value_count
        self._bucket_values = bucket_values
        self._max_probability = max_probability
        self._min_probability = min_probability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_size(self):
        """Gets the bucket_size of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Number of records within these probability bounds.

        :return: The bucket_size of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :rtype: str
        """
        return self._bucket_size

    @bucket_size.setter
    def bucket_size(self, bucket_size):
        """Sets the bucket_size of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Number of records within these probability bounds.

        :param bucket_size: The bucket_size of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :type bucket_size: str
        """

        self._bucket_size = bucket_size

    @property
    def bucket_value_count(self):
        """Gets the bucket_value_count of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Total number of distinct quasi-identifier tuple values in this bucket.

        :return: The bucket_value_count of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :rtype: str
        """
        return self._bucket_value_count

    @bucket_value_count.setter
    def bucket_value_count(self, bucket_value_count):
        """Sets the bucket_value_count of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Total number of distinct quasi-identifier tuple values in this bucket.

        :param bucket_value_count: The bucket_value_count of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :type bucket_value_count: str
        """

        self._bucket_value_count = bucket_value_count

    @property
    def bucket_values(self):
        """Gets the bucket_values of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.

        :return: The bucket_values of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :rtype: List[GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues]
        """
        return self._bucket_values

    @bucket_values.setter
    def bucket_values(self, bucket_values):
        """Sets the bucket_values of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.

        :param bucket_values: The bucket_values of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :type bucket_values: List[GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues]
        """

        self._bucket_values = bucket_values

    @property
    def max_probability(self):
        """Gets the max_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Always greater than or equal to min_probability.

        :return: The max_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :rtype: float
        """
        return self._max_probability

    @max_probability.setter
    def max_probability(self, max_probability):
        """Sets the max_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Always greater than or equal to min_probability.

        :param max_probability: The max_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :type max_probability: float
        """

        self._max_probability = max_probability

    @property
    def min_probability(self):
        """Gets the min_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Between 0 and 1.

        :return: The min_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :rtype: float
        """
        return self._min_probability

    @min_probability.setter
    def min_probability(self, min_probability):
        """Sets the min_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.

        Between 0 and 1.

        :param min_probability: The min_probability of this GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.
        :type min_probability: float
        """

        self._min_probability = min_probability
