# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_container import GooglePrivacyDlpV2Container
from openapi_server.models.google_privacy_dlp_v2_table_options import GooglePrivacyDlpV2TableOptions
from openapi_server import util


class GooglePrivacyDlpV2HybridFindingDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_details: GooglePrivacyDlpV2Container=None, file_offset: str=None, labels: Dict[str, str]=None, row_offset: str=None, table_options: GooglePrivacyDlpV2TableOptions=None):
        """GooglePrivacyDlpV2HybridFindingDetails - a model defined in OpenAPI

        :param container_details: The container_details of this GooglePrivacyDlpV2HybridFindingDetails.
        :param file_offset: The file_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :param labels: The labels of this GooglePrivacyDlpV2HybridFindingDetails.
        :param row_offset: The row_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :param table_options: The table_options of this GooglePrivacyDlpV2HybridFindingDetails.
        """
        self.openapi_types = {
            'container_details': GooglePrivacyDlpV2Container,
            'file_offset': str,
            'labels': Dict[str, str],
            'row_offset': str,
            'table_options': GooglePrivacyDlpV2TableOptions
        }

        self.attribute_map = {
            'container_details': 'containerDetails',
            'file_offset': 'fileOffset',
            'labels': 'labels',
            'row_offset': 'rowOffset',
            'table_options': 'tableOptions'
        }

        self._container_details = container_details
        self._file_offset = file_offset
        self._labels = labels
        self._row_offset = row_offset
        self._table_options = table_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2HybridFindingDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2HybridFindingDetails of this GooglePrivacyDlpV2HybridFindingDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_details(self):
        """Gets the container_details of this GooglePrivacyDlpV2HybridFindingDetails.


        :return: The container_details of this GooglePrivacyDlpV2HybridFindingDetails.
        :rtype: GooglePrivacyDlpV2Container
        """
        return self._container_details

    @container_details.setter
    def container_details(self, container_details):
        """Sets the container_details of this GooglePrivacyDlpV2HybridFindingDetails.


        :param container_details: The container_details of this GooglePrivacyDlpV2HybridFindingDetails.
        :type container_details: GooglePrivacyDlpV2Container
        """

        self._container_details = container_details

    @property
    def file_offset(self):
        """Gets the file_offset of this GooglePrivacyDlpV2HybridFindingDetails.

        Offset in bytes of the line, from the beginning of the file, where the finding is located. Populate if the item being scanned is only part of a bigger item, such as a shard of a file and you want to track the absolute position of the finding.

        :return: The file_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :rtype: str
        """
        return self._file_offset

    @file_offset.setter
    def file_offset(self, file_offset):
        """Sets the file_offset of this GooglePrivacyDlpV2HybridFindingDetails.

        Offset in bytes of the line, from the beginning of the file, where the finding is located. Populate if the item being scanned is only part of a bigger item, such as a shard of a file and you want to track the absolute position of the finding.

        :param file_offset: The file_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :type file_offset: str
        """

        self._file_offset = file_offset

    @property
    def labels(self):
        """Gets the labels of this GooglePrivacyDlpV2HybridFindingDetails.

        Labels to represent user provided metadata about the data being inspected. If configured by the job, some key values may be required. The labels associated with `Finding`'s produced by hybrid inspection. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `\"environment\" : \"production\"` * `\"pipeline\" : \"etl\"`

        :return: The labels of this GooglePrivacyDlpV2HybridFindingDetails.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GooglePrivacyDlpV2HybridFindingDetails.

        Labels to represent user provided metadata about the data being inspected. If configured by the job, some key values may be required. The labels associated with `Finding`'s produced by hybrid inspection. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `\"environment\" : \"production\"` * `\"pipeline\" : \"etl\"`

        :param labels: The labels of this GooglePrivacyDlpV2HybridFindingDetails.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def row_offset(self):
        """Gets the row_offset of this GooglePrivacyDlpV2HybridFindingDetails.

        Offset of the row for tables. Populate if the row(s) being scanned are part of a bigger dataset and you want to keep track of their absolute position.

        :return: The row_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :rtype: str
        """
        return self._row_offset

    @row_offset.setter
    def row_offset(self, row_offset):
        """Sets the row_offset of this GooglePrivacyDlpV2HybridFindingDetails.

        Offset of the row for tables. Populate if the row(s) being scanned are part of a bigger dataset and you want to keep track of their absolute position.

        :param row_offset: The row_offset of this GooglePrivacyDlpV2HybridFindingDetails.
        :type row_offset: str
        """

        self._row_offset = row_offset

    @property
    def table_options(self):
        """Gets the table_options of this GooglePrivacyDlpV2HybridFindingDetails.


        :return: The table_options of this GooglePrivacyDlpV2HybridFindingDetails.
        :rtype: GooglePrivacyDlpV2TableOptions
        """
        return self._table_options

    @table_options.setter
    def table_options(self, table_options):
        """Sets the table_options of this GooglePrivacyDlpV2HybridFindingDetails.


        :param table_options: The table_options of this GooglePrivacyDlpV2HybridFindingDetails.
        :type table_options: GooglePrivacyDlpV2TableOptions
        """

        self._table_options = table_options
