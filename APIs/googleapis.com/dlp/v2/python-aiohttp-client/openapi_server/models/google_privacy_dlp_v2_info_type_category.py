# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2InfoTypeCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, industry_category: str=None, location_category: str=None, type_category: str=None):
        """GooglePrivacyDlpV2InfoTypeCategory - a model defined in OpenAPI

        :param industry_category: The industry_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :param location_category: The location_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :param type_category: The type_category of this GooglePrivacyDlpV2InfoTypeCategory.
        """
        self.openapi_types = {
            'industry_category': str,
            'location_category': str,
            'type_category': str
        }

        self.attribute_map = {
            'industry_category': 'industryCategory',
            'location_category': 'locationCategory',
            'type_category': 'typeCategory'
        }

        self._industry_category = industry_category
        self._location_category = location_category
        self._type_category = type_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2InfoTypeCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2InfoTypeCategory of this GooglePrivacyDlpV2InfoTypeCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def industry_category(self):
        """Gets the industry_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The group of relevant businesses where this infoType is commonly used

        :return: The industry_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :rtype: str
        """
        return self._industry_category

    @industry_category.setter
    def industry_category(self, industry_category):
        """Sets the industry_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The group of relevant businesses where this infoType is commonly used

        :param industry_category: The industry_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :type industry_category: str
        """
        allowed_values = ["INDUSTRY_UNSPECIFIED", "FINANCE", "HEALTH", "TELECOMMUNICATIONS"]  # noqa: E501
        if industry_category not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_category` ({0}), must be one of {1}"
                .format(industry_category, allowed_values)
            )

        self._industry_category = industry_category

    @property
    def location_category(self):
        """Gets the location_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The region or country that issued the ID or document represented by the infoType.

        :return: The location_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :rtype: str
        """
        return self._location_category

    @location_category.setter
    def location_category(self, location_category):
        """Sets the location_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The region or country that issued the ID or document represented by the infoType.

        :param location_category: The location_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :type location_category: str
        """
        allowed_values = ["LOCATION_UNSPECIFIED", "GLOBAL", "ARGENTINA", "AUSTRALIA", "BELGIUM", "BRAZIL", "CANADA", "CHILE", "CHINA", "COLOMBIA", "CROATIA", "DENMARK", "FRANCE", "FINLAND", "GERMANY", "HONG_KONG", "INDIA", "INDONESIA", "IRELAND", "ISRAEL", "ITALY", "JAPAN", "KOREA", "MEXICO", "THE_NETHERLANDS", "NEW_ZEALAND", "NORWAY", "PARAGUAY", "PERU", "POLAND", "PORTUGAL", "SINGAPORE", "SOUTH_AFRICA", "SPAIN", "SWEDEN", "SWITZERLAND", "TAIWAN", "THAILAND", "TURKEY", "UNITED_KINGDOM", "UNITED_STATES", "URUGUAY", "VENEZUELA", "INTERNAL"]  # noqa: E501
        if location_category not in allowed_values:
            raise ValueError(
                "Invalid value for `location_category` ({0}), must be one of {1}"
                .format(location_category, allowed_values)
            )

        self._location_category = location_category

    @property
    def type_category(self):
        """Gets the type_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The class of identifiers where this infoType belongs

        :return: The type_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :rtype: str
        """
        return self._type_category

    @type_category.setter
    def type_category(self, type_category):
        """Sets the type_category of this GooglePrivacyDlpV2InfoTypeCategory.

        The class of identifiers where this infoType belongs

        :param type_category: The type_category of this GooglePrivacyDlpV2InfoTypeCategory.
        :type type_category: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "PII", "SPII", "DEMOGRAPHIC", "CREDENTIAL", "GOVERNMENT_ID", "DOCUMENT", "CONTEXTUAL_INFORMATION"]  # noqa: E501
        if type_category not in allowed_values:
            raise ValueError(
                "Invalid value for `type_category` ({0}), must be one of {1}"
                .format(type_category, allowed_values)
            )

        self._type_category = type_category
