# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePrivacyDlpV2Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_path: str=None, project_id: str=None, relative_path: str=None, root_path: str=None, type: str=None, update_time: str=None, version: str=None):
        """GooglePrivacyDlpV2Container - a model defined in OpenAPI

        :param full_path: The full_path of this GooglePrivacyDlpV2Container.
        :param project_id: The project_id of this GooglePrivacyDlpV2Container.
        :param relative_path: The relative_path of this GooglePrivacyDlpV2Container.
        :param root_path: The root_path of this GooglePrivacyDlpV2Container.
        :param type: The type of this GooglePrivacyDlpV2Container.
        :param update_time: The update_time of this GooglePrivacyDlpV2Container.
        :param version: The version of this GooglePrivacyDlpV2Container.
        """
        self.openapi_types = {
            'full_path': str,
            'project_id': str,
            'relative_path': str,
            'root_path': str,
            'type': str,
            'update_time': str,
            'version': str
        }

        self.attribute_map = {
            'full_path': 'fullPath',
            'project_id': 'projectId',
            'relative_path': 'relativePath',
            'root_path': 'rootPath',
            'type': 'type',
            'update_time': 'updateTime',
            'version': 'version'
        }

        self._full_path = full_path
        self._project_id = project_id
        self._relative_path = relative_path
        self._root_path = root_path
        self._type = type
        self._update_time = update_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2Container of this GooglePrivacyDlpV2Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_path(self):
        """Gets the full_path of this GooglePrivacyDlpV2Container.

        A string representation of the full container name. Examples: - BigQuery: 'Project:DataSetId.TableId' - Cloud Storage: 'gs://Bucket/folders/filename.txt'

        :return: The full_path of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this GooglePrivacyDlpV2Container.

        A string representation of the full container name. Examples: - BigQuery: 'Project:DataSetId.TableId' - Cloud Storage: 'gs://Bucket/folders/filename.txt'

        :param full_path: The full_path of this GooglePrivacyDlpV2Container.
        :type full_path: str
        """

        self._full_path = full_path

    @property
    def project_id(self):
        """Gets the project_id of this GooglePrivacyDlpV2Container.

        Project where the finding was found. Can be different from the project that owns the finding.

        :return: The project_id of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GooglePrivacyDlpV2Container.

        Project where the finding was found. Can be different from the project that owns the finding.

        :param project_id: The project_id of this GooglePrivacyDlpV2Container.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def relative_path(self):
        """Gets the relative_path of this GooglePrivacyDlpV2Container.

        The rest of the path after the root. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the relative path is `table_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the relative path is `folder/filename.txt`

        :return: The relative_path of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this GooglePrivacyDlpV2Container.

        The rest of the path after the root. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the relative path is `table_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the relative path is `folder/filename.txt`

        :param relative_path: The relative_path of this GooglePrivacyDlpV2Container.
        :type relative_path: str
        """

        self._relative_path = relative_path

    @property
    def root_path(self):
        """Gets the root_path of this GooglePrivacyDlpV2Container.

        The root of the container. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the root is `dataset_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the root is `gs://bucket`

        :return: The root_path of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._root_path

    @root_path.setter
    def root_path(self, root_path):
        """Sets the root_path of this GooglePrivacyDlpV2Container.

        The root of the container. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the root is `dataset_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the root is `gs://bucket`

        :param root_path: The root_path of this GooglePrivacyDlpV2Container.
        :type root_path: str
        """

        self._root_path = root_path

    @property
    def type(self):
        """Gets the type of this GooglePrivacyDlpV2Container.

        Container type, for example BigQuery or Cloud Storage.

        :return: The type of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GooglePrivacyDlpV2Container.

        Container type, for example BigQuery or Cloud Storage.

        :param type: The type of this GooglePrivacyDlpV2Container.
        :type type: str
        """

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this GooglePrivacyDlpV2Container.

        Findings container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.

        :return: The update_time of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GooglePrivacyDlpV2Container.

        Findings container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.

        :param update_time: The update_time of this GooglePrivacyDlpV2Container.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def version(self):
        """Gets the version of this GooglePrivacyDlpV2Container.

        Findings container version, if available (\"generation\" for Cloud Storage).

        :return: The version of this GooglePrivacyDlpV2Container.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GooglePrivacyDlpV2Container.

        Findings container version, if available (\"generation\" for Cloud Storage).

        :param version: The version of this GooglePrivacyDlpV2Container.
        :type version: str
        """

        self._version = version
