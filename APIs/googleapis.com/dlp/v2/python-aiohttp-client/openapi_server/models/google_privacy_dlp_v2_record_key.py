# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_privacy_dlp_v2_big_query_key import GooglePrivacyDlpV2BigQueryKey
from openapi_server.models.google_privacy_dlp_v2_datastore_key import GooglePrivacyDlpV2DatastoreKey
from openapi_server import util


class GooglePrivacyDlpV2RecordKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, big_query_key: GooglePrivacyDlpV2BigQueryKey=None, datastore_key: GooglePrivacyDlpV2DatastoreKey=None, id_values: List[str]=None):
        """GooglePrivacyDlpV2RecordKey - a model defined in OpenAPI

        :param big_query_key: The big_query_key of this GooglePrivacyDlpV2RecordKey.
        :param datastore_key: The datastore_key of this GooglePrivacyDlpV2RecordKey.
        :param id_values: The id_values of this GooglePrivacyDlpV2RecordKey.
        """
        self.openapi_types = {
            'big_query_key': GooglePrivacyDlpV2BigQueryKey,
            'datastore_key': GooglePrivacyDlpV2DatastoreKey,
            'id_values': List[str]
        }

        self.attribute_map = {
            'big_query_key': 'bigQueryKey',
            'datastore_key': 'datastoreKey',
            'id_values': 'idValues'
        }

        self._big_query_key = big_query_key
        self._datastore_key = datastore_key
        self._id_values = id_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePrivacyDlpV2RecordKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePrivacyDlpV2RecordKey of this GooglePrivacyDlpV2RecordKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def big_query_key(self):
        """Gets the big_query_key of this GooglePrivacyDlpV2RecordKey.


        :return: The big_query_key of this GooglePrivacyDlpV2RecordKey.
        :rtype: GooglePrivacyDlpV2BigQueryKey
        """
        return self._big_query_key

    @big_query_key.setter
    def big_query_key(self, big_query_key):
        """Sets the big_query_key of this GooglePrivacyDlpV2RecordKey.


        :param big_query_key: The big_query_key of this GooglePrivacyDlpV2RecordKey.
        :type big_query_key: GooglePrivacyDlpV2BigQueryKey
        """

        self._big_query_key = big_query_key

    @property
    def datastore_key(self):
        """Gets the datastore_key of this GooglePrivacyDlpV2RecordKey.


        :return: The datastore_key of this GooglePrivacyDlpV2RecordKey.
        :rtype: GooglePrivacyDlpV2DatastoreKey
        """
        return self._datastore_key

    @datastore_key.setter
    def datastore_key(self, datastore_key):
        """Sets the datastore_key of this GooglePrivacyDlpV2RecordKey.


        :param datastore_key: The datastore_key of this GooglePrivacyDlpV2RecordKey.
        :type datastore_key: GooglePrivacyDlpV2DatastoreKey
        """

        self._datastore_key = datastore_key

    @property
    def id_values(self):
        """Gets the id_values of this GooglePrivacyDlpV2RecordKey.

        Values of identifying columns in the given row. Order of values matches the order of `identifying_fields` specified in the scanning request.

        :return: The id_values of this GooglePrivacyDlpV2RecordKey.
        :rtype: List[str]
        """
        return self._id_values

    @id_values.setter
    def id_values(self, id_values):
        """Sets the id_values of this GooglePrivacyDlpV2RecordKey.

        Values of identifying columns in the given row. Order of values matches the order of `identifying_fields` specified in the scanning request.

        :param id_values: The id_values of this GooglePrivacyDlpV2RecordKey.
        :type id_values: List[str]
        """

        self._id_values = id_values
