/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2BucketingConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2CharacterMaskConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2CryptoDeterministicConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2CryptoHashConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2DateShiftConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2FixedSizeBucketingConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2ReplaceDictionaryConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2ReplaceValueConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2TimePartConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GooglePrivacyDlpV2PrimitiveTransformation
 */
public class GooglePrivacyDlpV2PrimitiveTransformationTest {
    private final GooglePrivacyDlpV2PrimitiveTransformation model = new GooglePrivacyDlpV2PrimitiveTransformation();

    /**
     * Model tests for GooglePrivacyDlpV2PrimitiveTransformation
     */
    @Test
    public void testGooglePrivacyDlpV2PrimitiveTransformation() {
        // TODO: test GooglePrivacyDlpV2PrimitiveTransformation
    }

    /**
     * Test the property 'bucketingConfig'
     */
    @Test
    public void bucketingConfigTest() {
        // TODO: test bucketingConfig
    }

    /**
     * Test the property 'characterMaskConfig'
     */
    @Test
    public void characterMaskConfigTest() {
        // TODO: test characterMaskConfig
    }

    /**
     * Test the property 'cryptoDeterministicConfig'
     */
    @Test
    public void cryptoDeterministicConfigTest() {
        // TODO: test cryptoDeterministicConfig
    }

    /**
     * Test the property 'cryptoHashConfig'
     */
    @Test
    public void cryptoHashConfigTest() {
        // TODO: test cryptoHashConfig
    }

    /**
     * Test the property 'cryptoReplaceFfxFpeConfig'
     */
    @Test
    public void cryptoReplaceFfxFpeConfigTest() {
        // TODO: test cryptoReplaceFfxFpeConfig
    }

    /**
     * Test the property 'dateShiftConfig'
     */
    @Test
    public void dateShiftConfigTest() {
        // TODO: test dateShiftConfig
    }

    /**
     * Test the property 'fixedSizeBucketingConfig'
     */
    @Test
    public void fixedSizeBucketingConfigTest() {
        // TODO: test fixedSizeBucketingConfig
    }

    /**
     * Test the property 'redactConfig'
     */
    @Test
    public void redactConfigTest() {
        // TODO: test redactConfig
    }

    /**
     * Test the property 'replaceConfig'
     */
    @Test
    public void replaceConfigTest() {
        // TODO: test replaceConfig
    }

    /**
     * Test the property 'replaceDictionaryConfig'
     */
    @Test
    public void replaceDictionaryConfigTest() {
        // TODO: test replaceDictionaryConfig
    }

    /**
     * Test the property 'replaceWithInfoTypeConfig'
     */
    @Test
    public void replaceWithInfoTypeConfigTest() {
        // TODO: test replaceWithInfoTypeConfig
    }

    /**
     * Test the property 'timePartConfig'
     */
    @Test
    public void timePartConfigTest() {
        // TODO: test timePartConfig
    }

}
