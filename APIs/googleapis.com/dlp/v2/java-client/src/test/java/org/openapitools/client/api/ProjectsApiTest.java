/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateDeidentifyTemplateRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateDiscoveryConfigRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateDlpJobRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateInspectTemplateRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateJobTriggerRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2CreateStoredInfoTypeRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2DeidentifyContentRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2DeidentifyContentResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2DeidentifyTemplate;
import org.openapitools.client.model.GooglePrivacyDlpV2DiscoveryConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2DlpJob;
import org.openapitools.client.model.GooglePrivacyDlpV2HybridInspectJobTriggerRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2InspectContentRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2InspectContentResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2InspectTemplate;
import org.openapitools.client.model.GooglePrivacyDlpV2JobTrigger;
import org.openapitools.client.model.GooglePrivacyDlpV2ListColumnDataProfilesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListDeidentifyTemplatesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListDiscoveryConfigsResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListDlpJobsResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListInspectTemplatesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListJobTriggersResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListProjectDataProfilesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListStoredInfoTypesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ListTableDataProfilesResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2RedactImageRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2RedactImageResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2ReidentifyContentRequest;
import org.openapitools.client.model.GooglePrivacyDlpV2ReidentifyContentResponse;
import org.openapitools.client.model.GooglePrivacyDlpV2StoredInfoType;
import org.openapitools.client.model.GooglePrivacyDlpV2UpdateStoredInfoTypeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists data profiles for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsColumnDataProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListColumnDataProfilesResponse response = api.dlpProjectsLocationsColumnDataProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/sensitive-data-protection/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsContentDeidentifyTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2DeidentifyContentRequest googlePrivacyDlpV2DeidentifyContentRequest = null;
        GooglePrivacyDlpV2DeidentifyContentResponse response = api.dlpProjectsLocationsContentDeidentify(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2DeidentifyContentRequest);
        // TODO: test validations
    }

    /**
     * Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/sensitive-data-protection/docs/inspecting-images and https://cloud.google.com/sensitive-data-protection/docs/inspecting-text,
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsContentInspectTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2InspectContentRequest googlePrivacyDlpV2InspectContentRequest = null;
        GooglePrivacyDlpV2InspectContentResponse response = api.dlpProjectsLocationsContentInspect(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2InspectContentRequest);
        // TODO: test validations
    }

    /**
     * Re-identifies content that has been de-identified. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsContentReidentifyTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2ReidentifyContentRequest googlePrivacyDlpV2ReidentifyContentRequest = null;
        GooglePrivacyDlpV2ReidentifyContentResponse response = api.dlpProjectsLocationsContentReidentify(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2ReidentifyContentRequest);
        // TODO: test validations
    }

    /**
     * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDeidentifyTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateDeidentifyTemplateRequest googlePrivacyDlpV2CreateDeidentifyTemplateRequest = null;
        GooglePrivacyDlpV2DeidentifyTemplate response = api.dlpProjectsLocationsDeidentifyTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateDeidentifyTemplateRequest);
        // TODO: test validations
    }

    /**
     * Lists DeidentifyTemplates. See https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDeidentifyTemplatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locationId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListDeidentifyTemplatesResponse response = api.dlpProjectsLocationsDeidentifyTemplatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locationId, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a config for discovery to scan and profile storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDiscoveryConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateDiscoveryConfigRequest googlePrivacyDlpV2CreateDiscoveryConfigRequest = null;
        GooglePrivacyDlpV2DiscoveryConfig response = api.dlpProjectsLocationsDiscoveryConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateDiscoveryConfigRequest);
        // TODO: test validations
    }

    /**
     * Lists discovery configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDiscoveryConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListDiscoveryConfigsResponse response = api.dlpProjectsLocationsDiscoveryConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage and https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDlpJobsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.dlpProjectsLocationsDlpJobsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage and https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDlpJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateDlpJobRequest googlePrivacyDlpV2CreateDlpJobRequest = null;
        GooglePrivacyDlpV2DlpJob response = api.dlpProjectsLocationsDlpJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateDlpJobRequest);
        // TODO: test validations
    }

    /**
     * Finish a running hybrid DlpJob. Triggers the finalization steps and running of any enabled actions that have not yet run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDlpJobsFinishTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.dlpProjectsLocationsDlpJobsFinish(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage and https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsDlpJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String locationId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String type = null;
        GooglePrivacyDlpV2ListDlpJobsResponse response = api.dlpProjectsLocationsDlpJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, locationId, orderBy, pageSize, pageToken, type);
        // TODO: test validations
    }

    /**
     * Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/sensitive-data-protection/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsImageRedactTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2RedactImageRequest googlePrivacyDlpV2RedactImageRequest = null;
        GooglePrivacyDlpV2RedactImageResponse response = api.dlpProjectsLocationsImageRedact(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2RedactImageRequest);
        // TODO: test validations
    }

    /**
     * Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/sensitive-data-protection/docs/creating-templates to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsInspectTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateInspectTemplateRequest googlePrivacyDlpV2CreateInspectTemplateRequest = null;
        GooglePrivacyDlpV2InspectTemplate response = api.dlpProjectsLocationsInspectTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateInspectTemplateRequest);
        // TODO: test validations
    }

    /**
     * Lists InspectTemplates. See https://cloud.google.com/sensitive-data-protection/docs/creating-templates to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsInspectTemplatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locationId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListInspectTemplatesResponse response = api.dlpProjectsLocationsInspectTemplatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locationId, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsJobTriggersActivateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        GooglePrivacyDlpV2DlpJob response = api.dlpProjectsLocationsJobTriggersActivate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsJobTriggersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateJobTriggerRequest googlePrivacyDlpV2CreateJobTriggerRequest = null;
        GooglePrivacyDlpV2JobTrigger response = api.dlpProjectsLocationsJobTriggersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateJobTriggerRequest);
        // TODO: test validations
    }

    /**
     * Inspect hybrid content and store findings to a trigger. The inspection will be processed asynchronously. To review the findings monitor the jobs within the trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsJobTriggersHybridInspectTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2HybridInspectJobTriggerRequest googlePrivacyDlpV2HybridInspectJobTriggerRequest = null;
        Object response = api.dlpProjectsLocationsJobTriggersHybridInspect(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2HybridInspectJobTriggerRequest);
        // TODO: test validations
    }

    /**
     * Lists job triggers. See https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsJobTriggersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String locationId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String type = null;
        GooglePrivacyDlpV2ListJobTriggersResponse response = api.dlpProjectsLocationsJobTriggersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, locationId, orderBy, pageSize, pageToken, type);
        // TODO: test validations
    }

    /**
     * Lists data profiles for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsProjectDataProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListProjectDataProfilesResponse response = api.dlpProjectsLocationsProjectDataProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists data profiles for an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsLocationsTableDataProfilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListTableDataProfilesResponse response = api.dlpProjectsLocationsTableDataProfilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsStoredInfoTypesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2CreateStoredInfoTypeRequest googlePrivacyDlpV2CreateStoredInfoTypeRequest = null;
        GooglePrivacyDlpV2StoredInfoType response = api.dlpProjectsStoredInfoTypesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2CreateStoredInfoTypeRequest);
        // TODO: test validations
    }

    /**
     * Deletes a stored infoType. See https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsStoredInfoTypesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.dlpProjectsStoredInfoTypesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a stored infoType. See https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsStoredInfoTypesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2StoredInfoType response = api.dlpProjectsStoredInfoTypesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists stored infoTypes. See https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsStoredInfoTypesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String locationId = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        GooglePrivacyDlpV2ListStoredInfoTypesResponse response = api.dlpProjectsStoredInfoTypesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, locationId, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes to learn more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProjectsStoredInfoTypesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GooglePrivacyDlpV2UpdateStoredInfoTypeRequest googlePrivacyDlpV2UpdateStoredInfoTypeRequest = null;
        GooglePrivacyDlpV2StoredInfoType response = api.dlpProjectsStoredInfoTypesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googlePrivacyDlpV2UpdateStoredInfoTypeRequest);
        // TODO: test validations
    }

}
