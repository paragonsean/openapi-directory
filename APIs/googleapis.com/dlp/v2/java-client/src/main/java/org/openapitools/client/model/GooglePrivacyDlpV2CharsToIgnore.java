/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Characters to skip when doing deidentification of a value. These will be left alone and skipped.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CharsToIgnore {
  public static final String SERIALIZED_NAME_CHARACTERS_TO_SKIP = "charactersToSkip";
  @SerializedName(SERIALIZED_NAME_CHARACTERS_TO_SKIP)
  private String charactersToSkip;

  /**
   * Common characters to not transform when masking. Useful to avoid removing punctuation.
   */
  @JsonAdapter(CommonCharactersToIgnoreEnum.Adapter.class)
  public enum CommonCharactersToIgnoreEnum {
    COMMON_CHARS_TO_IGNORE_UNSPECIFIED("COMMON_CHARS_TO_IGNORE_UNSPECIFIED"),
    
    NUMERIC("NUMERIC"),
    
    ALPHA_UPPER_CASE("ALPHA_UPPER_CASE"),
    
    ALPHA_LOWER_CASE("ALPHA_LOWER_CASE"),
    
    PUNCTUATION("PUNCTUATION"),
    
    WHITESPACE("WHITESPACE");

    private String value;

    CommonCharactersToIgnoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommonCharactersToIgnoreEnum fromValue(String value) {
      for (CommonCharactersToIgnoreEnum b : CommonCharactersToIgnoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommonCharactersToIgnoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommonCharactersToIgnoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommonCharactersToIgnoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommonCharactersToIgnoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommonCharactersToIgnoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMON_CHARACTERS_TO_IGNORE = "commonCharactersToIgnore";
  @SerializedName(SERIALIZED_NAME_COMMON_CHARACTERS_TO_IGNORE)
  private CommonCharactersToIgnoreEnum commonCharactersToIgnore;

  public GooglePrivacyDlpV2CharsToIgnore() {
  }

  public GooglePrivacyDlpV2CharsToIgnore charactersToSkip(String charactersToSkip) {
    this.charactersToSkip = charactersToSkip;
    return this;
  }

  /**
   * Characters to not transform when masking.
   * @return charactersToSkip
   */
  @javax.annotation.Nullable
  public String getCharactersToSkip() {
    return charactersToSkip;
  }

  public void setCharactersToSkip(String charactersToSkip) {
    this.charactersToSkip = charactersToSkip;
  }


  public GooglePrivacyDlpV2CharsToIgnore commonCharactersToIgnore(CommonCharactersToIgnoreEnum commonCharactersToIgnore) {
    this.commonCharactersToIgnore = commonCharactersToIgnore;
    return this;
  }

  /**
   * Common characters to not transform when masking. Useful to avoid removing punctuation.
   * @return commonCharactersToIgnore
   */
  @javax.annotation.Nullable
  public CommonCharactersToIgnoreEnum getCommonCharactersToIgnore() {
    return commonCharactersToIgnore;
  }

  public void setCommonCharactersToIgnore(CommonCharactersToIgnoreEnum commonCharactersToIgnore) {
    this.commonCharactersToIgnore = commonCharactersToIgnore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CharsToIgnore googlePrivacyDlpV2CharsToIgnore = (GooglePrivacyDlpV2CharsToIgnore) o;
    return Objects.equals(this.charactersToSkip, googlePrivacyDlpV2CharsToIgnore.charactersToSkip) &&
        Objects.equals(this.commonCharactersToIgnore, googlePrivacyDlpV2CharsToIgnore.commonCharactersToIgnore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charactersToSkip, commonCharactersToIgnore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CharsToIgnore {\n");
    sb.append("    charactersToSkip: ").append(toIndentedString(charactersToSkip)).append("\n");
    sb.append("    commonCharactersToIgnore: ").append(toIndentedString(commonCharactersToIgnore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charactersToSkip");
    openapiFields.add("commonCharactersToIgnore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CharsToIgnore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CharsToIgnore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CharsToIgnore is not found in the empty JSON string", GooglePrivacyDlpV2CharsToIgnore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CharsToIgnore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CharsToIgnore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("charactersToSkip") != null && !jsonObj.get("charactersToSkip").isJsonNull()) && !jsonObj.get("charactersToSkip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charactersToSkip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charactersToSkip").toString()));
      }
      if ((jsonObj.get("commonCharactersToIgnore") != null && !jsonObj.get("commonCharactersToIgnore").isJsonNull()) && !jsonObj.get("commonCharactersToIgnore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonCharactersToIgnore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonCharactersToIgnore").toString()));
      }
      // validate the optional field `commonCharactersToIgnore`
      if (jsonObj.get("commonCharactersToIgnore") != null && !jsonObj.get("commonCharactersToIgnore").isJsonNull()) {
        CommonCharactersToIgnoreEnum.validateJsonElement(jsonObj.get("commonCharactersToIgnore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CharsToIgnore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CharsToIgnore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CharsToIgnore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CharsToIgnore.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CharsToIgnore>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CharsToIgnore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CharsToIgnore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CharsToIgnore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CharsToIgnore
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CharsToIgnore
   */
  public static GooglePrivacyDlpV2CharsToIgnore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CharsToIgnore.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CharsToIgnore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

