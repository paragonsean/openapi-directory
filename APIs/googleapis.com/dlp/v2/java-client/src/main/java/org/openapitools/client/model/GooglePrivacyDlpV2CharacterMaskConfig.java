/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2CharsToIgnore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we&#39;ll attempt to preserve the original data&#39;s type. (This allows you to take a long like 123 and modify it to a string like **3.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CharacterMaskConfig {
  public static final String SERIALIZED_NAME_CHARACTERS_TO_IGNORE = "charactersToIgnore";
  @SerializedName(SERIALIZED_NAME_CHARACTERS_TO_IGNORE)
  private List<GooglePrivacyDlpV2CharsToIgnore> charactersToIgnore = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASKING_CHARACTER = "maskingCharacter";
  @SerializedName(SERIALIZED_NAME_MASKING_CHARACTER)
  private String maskingCharacter;

  public static final String SERIALIZED_NAME_NUMBER_TO_MASK = "numberToMask";
  @SerializedName(SERIALIZED_NAME_NUMBER_TO_MASK)
  private Integer numberToMask;

  public static final String SERIALIZED_NAME_REVERSE_ORDER = "reverseOrder";
  @SerializedName(SERIALIZED_NAME_REVERSE_ORDER)
  private Boolean reverseOrder;

  public GooglePrivacyDlpV2CharacterMaskConfig() {
  }

  public GooglePrivacyDlpV2CharacterMaskConfig charactersToIgnore(List<GooglePrivacyDlpV2CharsToIgnore> charactersToIgnore) {
    this.charactersToIgnore = charactersToIgnore;
    return this;
  }

  public GooglePrivacyDlpV2CharacterMaskConfig addCharactersToIgnoreItem(GooglePrivacyDlpV2CharsToIgnore charactersToIgnoreItem) {
    if (this.charactersToIgnore == null) {
      this.charactersToIgnore = new ArrayList<>();
    }
    this.charactersToIgnore.add(charactersToIgnoreItem);
    return this;
  }

  /**
   * When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is &#x60;555-555-5555&#x60; and you instruct Cloud DLP to skip &#x60;-&#x60; and mask 5 characters with &#x60;*&#x60;, Cloud DLP returns &#x60;***-**5-5555&#x60;.
   * @return charactersToIgnore
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2CharsToIgnore> getCharactersToIgnore() {
    return charactersToIgnore;
  }

  public void setCharactersToIgnore(List<GooglePrivacyDlpV2CharsToIgnore> charactersToIgnore) {
    this.charactersToIgnore = charactersToIgnore;
  }


  public GooglePrivacyDlpV2CharacterMaskConfig maskingCharacter(String maskingCharacter) {
    this.maskingCharacter = maskingCharacter;
    return this;
  }

  /**
   * Character to use to mask the sensitive valuesâ€”for example, &#x60;*&#x60; for an alphabetic string such as a name, or &#x60;0&#x60; for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to &#x60;*&#x60; for strings, and &#x60;0&#x60; for digits.
   * @return maskingCharacter
   */
  @javax.annotation.Nullable
  public String getMaskingCharacter() {
    return maskingCharacter;
  }

  public void setMaskingCharacter(String maskingCharacter) {
    this.maskingCharacter = maskingCharacter;
  }


  public GooglePrivacyDlpV2CharacterMaskConfig numberToMask(Integer numberToMask) {
    this.numberToMask = numberToMask;
    return this;
  }

  /**
   * Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If &#x60;number_to_mask&#x60; is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - &#x60;masking_character&#x60; is &#x60;*&#x60; - &#x60;number_to_mask&#x60; is &#x60;-4&#x60; - &#x60;reverse_order&#x60; is &#x60;false&#x60; - &#x60;CharsToIgnore&#x60; includes &#x60;-&#x60; - Input string is &#x60;1234-5678-9012-3456&#x60; The resulting de-identified string is &#x60;****-****-****-3456&#x60;. Cloud DLP masks all but the last four characters. If &#x60;reverse_order&#x60; is &#x60;true&#x60;, all but the first four characters are masked as &#x60;1234-****-****-****&#x60;.
   * @return numberToMask
   */
  @javax.annotation.Nullable
  public Integer getNumberToMask() {
    return numberToMask;
  }

  public void setNumberToMask(Integer numberToMask) {
    this.numberToMask = numberToMask;
  }


  public GooglePrivacyDlpV2CharacterMaskConfig reverseOrder(Boolean reverseOrder) {
    this.reverseOrder = reverseOrder;
    return this;
  }

  /**
   * Mask characters in reverse order. For example, if &#x60;masking_character&#x60; is &#x60;0&#x60;, &#x60;number_to_mask&#x60; is &#x60;14&#x60;, and &#x60;reverse_order&#x60; is &#x60;false&#x60;, then the input string &#x60;1234-5678-9012-3456&#x60; is masked as &#x60;00000000000000-3456&#x60;. If &#x60;masking_character&#x60; is &#x60;*&#x60;, &#x60;number_to_mask&#x60; is &#x60;3&#x60;, and &#x60;reverse_order&#x60; is &#x60;true&#x60;, then the string &#x60;12345&#x60; is masked as &#x60;12***&#x60;.
   * @return reverseOrder
   */
  @javax.annotation.Nullable
  public Boolean getReverseOrder() {
    return reverseOrder;
  }

  public void setReverseOrder(Boolean reverseOrder) {
    this.reverseOrder = reverseOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CharacterMaskConfig googlePrivacyDlpV2CharacterMaskConfig = (GooglePrivacyDlpV2CharacterMaskConfig) o;
    return Objects.equals(this.charactersToIgnore, googlePrivacyDlpV2CharacterMaskConfig.charactersToIgnore) &&
        Objects.equals(this.maskingCharacter, googlePrivacyDlpV2CharacterMaskConfig.maskingCharacter) &&
        Objects.equals(this.numberToMask, googlePrivacyDlpV2CharacterMaskConfig.numberToMask) &&
        Objects.equals(this.reverseOrder, googlePrivacyDlpV2CharacterMaskConfig.reverseOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charactersToIgnore, maskingCharacter, numberToMask, reverseOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CharacterMaskConfig {\n");
    sb.append("    charactersToIgnore: ").append(toIndentedString(charactersToIgnore)).append("\n");
    sb.append("    maskingCharacter: ").append(toIndentedString(maskingCharacter)).append("\n");
    sb.append("    numberToMask: ").append(toIndentedString(numberToMask)).append("\n");
    sb.append("    reverseOrder: ").append(toIndentedString(reverseOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charactersToIgnore");
    openapiFields.add("maskingCharacter");
    openapiFields.add("numberToMask");
    openapiFields.add("reverseOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CharacterMaskConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CharacterMaskConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CharacterMaskConfig is not found in the empty JSON string", GooglePrivacyDlpV2CharacterMaskConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CharacterMaskConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CharacterMaskConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("charactersToIgnore") != null && !jsonObj.get("charactersToIgnore").isJsonNull()) {
        JsonArray jsonArraycharactersToIgnore = jsonObj.getAsJsonArray("charactersToIgnore");
        if (jsonArraycharactersToIgnore != null) {
          // ensure the json data is an array
          if (!jsonObj.get("charactersToIgnore").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `charactersToIgnore` to be an array in the JSON string but got `%s`", jsonObj.get("charactersToIgnore").toString()));
          }

          // validate the optional field `charactersToIgnore` (array)
          for (int i = 0; i < jsonArraycharactersToIgnore.size(); i++) {
            GooglePrivacyDlpV2CharsToIgnore.validateJsonElement(jsonArraycharactersToIgnore.get(i));
          };
        }
      }
      if ((jsonObj.get("maskingCharacter") != null && !jsonObj.get("maskingCharacter").isJsonNull()) && !jsonObj.get("maskingCharacter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskingCharacter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskingCharacter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CharacterMaskConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CharacterMaskConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CharacterMaskConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CharacterMaskConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CharacterMaskConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CharacterMaskConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CharacterMaskConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CharacterMaskConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CharacterMaskConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CharacterMaskConfig
   */
  public static GooglePrivacyDlpV2CharacterMaskConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CharacterMaskConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CharacterMaskConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

