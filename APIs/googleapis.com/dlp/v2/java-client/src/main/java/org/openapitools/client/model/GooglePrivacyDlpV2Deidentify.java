/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2TransformationConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2TransformationDetailsStorageConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Deidentify {
  public static final String SERIALIZED_NAME_CLOUD_STORAGE_OUTPUT = "cloudStorageOutput";
  @SerializedName(SERIALIZED_NAME_CLOUD_STORAGE_OUTPUT)
  private String cloudStorageOutput;

  /**
   * Gets or Sets fileTypesToTransform
   */
  @JsonAdapter(FileTypesToTransformEnum.Adapter.class)
  public enum FileTypesToTransformEnum {
    FILE_TYPE_UNSPECIFIED("FILE_TYPE_UNSPECIFIED"),
    
    BINARY_FILE("BINARY_FILE"),
    
    TEXT_FILE("TEXT_FILE"),
    
    IMAGE("IMAGE"),
    
    WORD("WORD"),
    
    PDF("PDF"),
    
    AVRO("AVRO"),
    
    CSV("CSV"),
    
    TSV("TSV"),
    
    POWERPOINT("POWERPOINT"),
    
    EXCEL("EXCEL");

    private String value;

    FileTypesToTransformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypesToTransformEnum fromValue(String value) {
      for (FileTypesToTransformEnum b : FileTypesToTransformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypesToTransformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypesToTransformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypesToTransformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypesToTransformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileTypesToTransformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPES_TO_TRANSFORM = "fileTypesToTransform";
  @SerializedName(SERIALIZED_NAME_FILE_TYPES_TO_TRANSFORM)
  private List<FileTypesToTransformEnum> fileTypesToTransform = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORMATION_CONFIG = "transformationConfig";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_CONFIG)
  private GooglePrivacyDlpV2TransformationConfig transformationConfig;

  public static final String SERIALIZED_NAME_TRANSFORMATION_DETAILS_STORAGE_CONFIG = "transformationDetailsStorageConfig";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_DETAILS_STORAGE_CONFIG)
  private GooglePrivacyDlpV2TransformationDetailsStorageConfig transformationDetailsStorageConfig;

  public GooglePrivacyDlpV2Deidentify() {
  }

  public GooglePrivacyDlpV2Deidentify cloudStorageOutput(String cloudStorageOutput) {
    this.cloudStorageOutput = cloudStorageOutput;
    return this;
  }

  /**
   * Required. User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket
   * @return cloudStorageOutput
   */
  @javax.annotation.Nullable
  public String getCloudStorageOutput() {
    return cloudStorageOutput;
  }

  public void setCloudStorageOutput(String cloudStorageOutput) {
    this.cloudStorageOutput = cloudStorageOutput;
  }


  public GooglePrivacyDlpV2Deidentify fileTypesToTransform(List<FileTypesToTransformEnum> fileTypesToTransform) {
    this.fileTypesToTransform = fileTypesToTransform;
    return this;
  }

  public GooglePrivacyDlpV2Deidentify addFileTypesToTransformItem(FileTypesToTransformEnum fileTypesToTransformItem) {
    if (this.fileTypesToTransform == null) {
      this.fileTypesToTransform = new ArrayList<>();
    }
    this.fileTypesToTransform.add(fileTypesToTransformItem);
    return this;
  }

  /**
   * List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn&#39;t supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.
   * @return fileTypesToTransform
   */
  @javax.annotation.Nullable
  public List<FileTypesToTransformEnum> getFileTypesToTransform() {
    return fileTypesToTransform;
  }

  public void setFileTypesToTransform(List<FileTypesToTransformEnum> fileTypesToTransform) {
    this.fileTypesToTransform = fileTypesToTransform;
  }


  public GooglePrivacyDlpV2Deidentify transformationConfig(GooglePrivacyDlpV2TransformationConfig transformationConfig) {
    this.transformationConfig = transformationConfig;
    return this;
  }

  /**
   * Get transformationConfig
   * @return transformationConfig
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TransformationConfig getTransformationConfig() {
    return transformationConfig;
  }

  public void setTransformationConfig(GooglePrivacyDlpV2TransformationConfig transformationConfig) {
    this.transformationConfig = transformationConfig;
  }


  public GooglePrivacyDlpV2Deidentify transformationDetailsStorageConfig(GooglePrivacyDlpV2TransformationDetailsStorageConfig transformationDetailsStorageConfig) {
    this.transformationDetailsStorageConfig = transformationDetailsStorageConfig;
    return this;
  }

  /**
   * Get transformationDetailsStorageConfig
   * @return transformationDetailsStorageConfig
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TransformationDetailsStorageConfig getTransformationDetailsStorageConfig() {
    return transformationDetailsStorageConfig;
  }

  public void setTransformationDetailsStorageConfig(GooglePrivacyDlpV2TransformationDetailsStorageConfig transformationDetailsStorageConfig) {
    this.transformationDetailsStorageConfig = transformationDetailsStorageConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Deidentify googlePrivacyDlpV2Deidentify = (GooglePrivacyDlpV2Deidentify) o;
    return Objects.equals(this.cloudStorageOutput, googlePrivacyDlpV2Deidentify.cloudStorageOutput) &&
        Objects.equals(this.fileTypesToTransform, googlePrivacyDlpV2Deidentify.fileTypesToTransform) &&
        Objects.equals(this.transformationConfig, googlePrivacyDlpV2Deidentify.transformationConfig) &&
        Objects.equals(this.transformationDetailsStorageConfig, googlePrivacyDlpV2Deidentify.transformationDetailsStorageConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudStorageOutput, fileTypesToTransform, transformationConfig, transformationDetailsStorageConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Deidentify {\n");
    sb.append("    cloudStorageOutput: ").append(toIndentedString(cloudStorageOutput)).append("\n");
    sb.append("    fileTypesToTransform: ").append(toIndentedString(fileTypesToTransform)).append("\n");
    sb.append("    transformationConfig: ").append(toIndentedString(transformationConfig)).append("\n");
    sb.append("    transformationDetailsStorageConfig: ").append(toIndentedString(transformationDetailsStorageConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudStorageOutput");
    openapiFields.add("fileTypesToTransform");
    openapiFields.add("transformationConfig");
    openapiFields.add("transformationDetailsStorageConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Deidentify
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Deidentify.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Deidentify is not found in the empty JSON string", GooglePrivacyDlpV2Deidentify.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Deidentify.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Deidentify` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudStorageOutput") != null && !jsonObj.get("cloudStorageOutput").isJsonNull()) && !jsonObj.get("cloudStorageOutput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudStorageOutput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudStorageOutput").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileTypesToTransform") != null && !jsonObj.get("fileTypesToTransform").isJsonNull() && !jsonObj.get("fileTypesToTransform").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileTypesToTransform` to be an array in the JSON string but got `%s`", jsonObj.get("fileTypesToTransform").toString()));
      }
      // validate the optional field `transformationConfig`
      if (jsonObj.get("transformationConfig") != null && !jsonObj.get("transformationConfig").isJsonNull()) {
        GooglePrivacyDlpV2TransformationConfig.validateJsonElement(jsonObj.get("transformationConfig"));
      }
      // validate the optional field `transformationDetailsStorageConfig`
      if (jsonObj.get("transformationDetailsStorageConfig") != null && !jsonObj.get("transformationDetailsStorageConfig").isJsonNull()) {
        GooglePrivacyDlpV2TransformationDetailsStorageConfig.validateJsonElement(jsonObj.get("transformationDetailsStorageConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Deidentify.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Deidentify' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Deidentify> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Deidentify.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Deidentify>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Deidentify value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Deidentify read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Deidentify given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Deidentify
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Deidentify
   */
  public static GooglePrivacyDlpV2Deidentify fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Deidentify.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Deidentify to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

