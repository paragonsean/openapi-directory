/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2Error;
import org.openapitools.client.model.GooglePrivacyDlpV2StoredInfoTypeConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2StoredInfoTypeStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Version of a StoredInfoType, including the configuration used to build it, create timestamp, and current state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2StoredInfoTypeVersion {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private GooglePrivacyDlpV2StoredInfoTypeConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<GooglePrivacyDlpV2Error> errors = new ArrayList<>();

  /**
   * Stored info type version state. Read-only, updated by the system during dictionary creation.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STORED_INFO_TYPE_STATE_UNSPECIFIED("STORED_INFO_TYPE_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    READY("READY"),
    
    FAILED("FAILED"),
    
    INVALID("INVALID");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private GooglePrivacyDlpV2StoredInfoTypeStats stats;

  public GooglePrivacyDlpV2StoredInfoTypeVersion() {
  }

  public GooglePrivacyDlpV2StoredInfoTypeVersion config(GooglePrivacyDlpV2StoredInfoTypeConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2StoredInfoTypeConfig getConfig() {
    return config;
  }

  public void setConfig(GooglePrivacyDlpV2StoredInfoTypeConfig config) {
    this.config = config;
  }


  public GooglePrivacyDlpV2StoredInfoTypeVersion createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Create timestamp of the version. Read-only, determined by the system when the version is created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GooglePrivacyDlpV2StoredInfoTypeVersion errors(List<GooglePrivacyDlpV2Error> errors) {
    this.errors = errors;
    return this;
  }

  public GooglePrivacyDlpV2StoredInfoTypeVersion addErrorsItem(GooglePrivacyDlpV2Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user&#39;s Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same &#x60;config&#x60; if it was not the source of the error.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Error> getErrors() {
    return errors;
  }

  public void setErrors(List<GooglePrivacyDlpV2Error> errors) {
    this.errors = errors;
  }


  public GooglePrivacyDlpV2StoredInfoTypeVersion state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Stored info type version state. Read-only, updated by the system during dictionary creation.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GooglePrivacyDlpV2StoredInfoTypeVersion stats(GooglePrivacyDlpV2StoredInfoTypeStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2StoredInfoTypeStats getStats() {
    return stats;
  }

  public void setStats(GooglePrivacyDlpV2StoredInfoTypeStats stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2StoredInfoTypeVersion googlePrivacyDlpV2StoredInfoTypeVersion = (GooglePrivacyDlpV2StoredInfoTypeVersion) o;
    return Objects.equals(this.config, googlePrivacyDlpV2StoredInfoTypeVersion.config) &&
        Objects.equals(this.createTime, googlePrivacyDlpV2StoredInfoTypeVersion.createTime) &&
        Objects.equals(this.errors, googlePrivacyDlpV2StoredInfoTypeVersion.errors) &&
        Objects.equals(this.state, googlePrivacyDlpV2StoredInfoTypeVersion.state) &&
        Objects.equals(this.stats, googlePrivacyDlpV2StoredInfoTypeVersion.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, createTime, errors, state, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2StoredInfoTypeVersion {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("errors");
    openapiFields.add("state");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2StoredInfoTypeVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2StoredInfoTypeVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2StoredInfoTypeVersion is not found in the empty JSON string", GooglePrivacyDlpV2StoredInfoTypeVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2StoredInfoTypeVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2StoredInfoTypeVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        GooglePrivacyDlpV2StoredInfoTypeConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            GooglePrivacyDlpV2Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        GooglePrivacyDlpV2StoredInfoTypeStats.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2StoredInfoTypeVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2StoredInfoTypeVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2StoredInfoTypeVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2StoredInfoTypeVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2StoredInfoTypeVersion>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2StoredInfoTypeVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2StoredInfoTypeVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2StoredInfoTypeVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2StoredInfoTypeVersion
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2StoredInfoTypeVersion
   */
  public static GooglePrivacyDlpV2StoredInfoTypeVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2StoredInfoTypeVersion.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2StoredInfoTypeVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

