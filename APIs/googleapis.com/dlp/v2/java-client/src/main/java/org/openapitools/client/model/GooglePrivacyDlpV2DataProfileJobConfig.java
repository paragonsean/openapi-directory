/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2DataProfileAction;
import org.openapitools.client.model.GooglePrivacyDlpV2DataProfileLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for setting up a job to scan resources for profile generation. Only one data profile configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DataProfileJobConfig {
  public static final String SERIALIZED_NAME_DATA_PROFILE_ACTIONS = "dataProfileActions";
  @SerializedName(SERIALIZED_NAME_DATA_PROFILE_ACTIONS)
  private List<GooglePrivacyDlpV2DataProfileAction> dataProfileActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSPECT_TEMPLATES = "inspectTemplates";
  @SerializedName(SERIALIZED_NAME_INSPECT_TEMPLATES)
  private List<String> inspectTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GooglePrivacyDlpV2DataProfileLocation location;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public GooglePrivacyDlpV2DataProfileJobConfig() {
  }

  public GooglePrivacyDlpV2DataProfileJobConfig dataProfileActions(List<GooglePrivacyDlpV2DataProfileAction> dataProfileActions) {
    this.dataProfileActions = dataProfileActions;
    return this;
  }

  public GooglePrivacyDlpV2DataProfileJobConfig addDataProfileActionsItem(GooglePrivacyDlpV2DataProfileAction dataProfileActionsItem) {
    if (this.dataProfileActions == null) {
      this.dataProfileActions = new ArrayList<>();
    }
    this.dataProfileActions.add(dataProfileActionsItem);
    return this;
  }

  /**
   * Actions to execute at the completion of the job.
   * @return dataProfileActions
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2DataProfileAction> getDataProfileActions() {
    return dataProfileActions;
  }

  public void setDataProfileActions(List<GooglePrivacyDlpV2DataProfileAction> dataProfileActions) {
    this.dataProfileActions = dataProfileActions;
  }


  public GooglePrivacyDlpV2DataProfileJobConfig inspectTemplates(List<String> inspectTemplates) {
    this.inspectTemplates = inspectTemplates;
    return this;
  }

  public GooglePrivacyDlpV2DataProfileJobConfig addInspectTemplatesItem(String inspectTemplatesItem) {
    if (this.inspectTemplates == null) {
      this.inspectTemplates = new ArrayList<>();
    }
    this.inspectTemplates.add(inspectTemplatesItem);
    return this;
  }

  /**
   * Detection logic for profile generation. Not all template features are used by profiles. FindingLimits, include_quote and exclude_info_types have no impact on data profiling. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \&quot;global\&quot;). Each region is scanned using the applicable template. If no region-specific template is specified, but a \&quot;global\&quot; template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region&#39;s data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.
   * @return inspectTemplates
   */
  @javax.annotation.Nullable
  public List<String> getInspectTemplates() {
    return inspectTemplates;
  }

  public void setInspectTemplates(List<String> inspectTemplates) {
    this.inspectTemplates = inspectTemplates;
  }


  public GooglePrivacyDlpV2DataProfileJobConfig location(GooglePrivacyDlpV2DataProfileLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2DataProfileLocation getLocation() {
    return location;
  }

  public void setLocation(GooglePrivacyDlpV2DataProfileLocation location) {
    this.location = location;
  }


  public GooglePrivacyDlpV2DataProfileJobConfig projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DataProfileJobConfig googlePrivacyDlpV2DataProfileJobConfig = (GooglePrivacyDlpV2DataProfileJobConfig) o;
    return Objects.equals(this.dataProfileActions, googlePrivacyDlpV2DataProfileJobConfig.dataProfileActions) &&
        Objects.equals(this.inspectTemplates, googlePrivacyDlpV2DataProfileJobConfig.inspectTemplates) &&
        Objects.equals(this.location, googlePrivacyDlpV2DataProfileJobConfig.location) &&
        Objects.equals(this.projectId, googlePrivacyDlpV2DataProfileJobConfig.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataProfileActions, inspectTemplates, location, projectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DataProfileJobConfig {\n");
    sb.append("    dataProfileActions: ").append(toIndentedString(dataProfileActions)).append("\n");
    sb.append("    inspectTemplates: ").append(toIndentedString(inspectTemplates)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataProfileActions");
    openapiFields.add("inspectTemplates");
    openapiFields.add("location");
    openapiFields.add("projectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DataProfileJobConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DataProfileJobConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DataProfileJobConfig is not found in the empty JSON string", GooglePrivacyDlpV2DataProfileJobConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DataProfileJobConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DataProfileJobConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dataProfileActions") != null && !jsonObj.get("dataProfileActions").isJsonNull()) {
        JsonArray jsonArraydataProfileActions = jsonObj.getAsJsonArray("dataProfileActions");
        if (jsonArraydataProfileActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataProfileActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataProfileActions` to be an array in the JSON string but got `%s`", jsonObj.get("dataProfileActions").toString()));
          }

          // validate the optional field `dataProfileActions` (array)
          for (int i = 0; i < jsonArraydataProfileActions.size(); i++) {
            GooglePrivacyDlpV2DataProfileAction.validateJsonElement(jsonArraydataProfileActions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inspectTemplates") != null && !jsonObj.get("inspectTemplates").isJsonNull() && !jsonObj.get("inspectTemplates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inspectTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("inspectTemplates").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GooglePrivacyDlpV2DataProfileLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DataProfileJobConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DataProfileJobConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DataProfileJobConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DataProfileJobConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DataProfileJobConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DataProfileJobConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DataProfileJobConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DataProfileJobConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DataProfileJobConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DataProfileJobConfig
   */
  public static GooglePrivacyDlpV2DataProfileJobConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DataProfileJobConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DataProfileJobConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

