/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2FileSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options defining a file or a set of files within a Cloud Storage bucket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CloudStorageOptions {
  public static final String SERIALIZED_NAME_BYTES_LIMIT_PER_FILE = "bytesLimitPerFile";
  @SerializedName(SERIALIZED_NAME_BYTES_LIMIT_PER_FILE)
  private String bytesLimitPerFile;

  public static final String SERIALIZED_NAME_BYTES_LIMIT_PER_FILE_PERCENT = "bytesLimitPerFilePercent";
  @SerializedName(SERIALIZED_NAME_BYTES_LIMIT_PER_FILE_PERCENT)
  private Integer bytesLimitPerFilePercent;

  public static final String SERIALIZED_NAME_FILE_SET = "fileSet";
  @SerializedName(SERIALIZED_NAME_FILE_SET)
  private GooglePrivacyDlpV2FileSet fileSet;

  /**
   * Gets or Sets fileTypes
   */
  @JsonAdapter(FileTypesEnum.Adapter.class)
  public enum FileTypesEnum {
    FILE_TYPE_UNSPECIFIED("FILE_TYPE_UNSPECIFIED"),
    
    BINARY_FILE("BINARY_FILE"),
    
    TEXT_FILE("TEXT_FILE"),
    
    IMAGE("IMAGE"),
    
    WORD("WORD"),
    
    PDF("PDF"),
    
    AVRO("AVRO"),
    
    CSV("CSV"),
    
    TSV("TSV"),
    
    POWERPOINT("POWERPOINT"),
    
    EXCEL("EXCEL");

    private String value;

    FileTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypesEnum fromValue(String value) {
      for (FileTypesEnum b : FileTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPES = "fileTypes";
  @SerializedName(SERIALIZED_NAME_FILE_TYPES)
  private List<FileTypesEnum> fileTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILES_LIMIT_PERCENT = "filesLimitPercent";
  @SerializedName(SERIALIZED_NAME_FILES_LIMIT_PERCENT)
  private Integer filesLimitPercent;

  /**
   * How to sample the data.
   */
  @JsonAdapter(SampleMethodEnum.Adapter.class)
  public enum SampleMethodEnum {
    SAMPLE_METHOD_UNSPECIFIED("SAMPLE_METHOD_UNSPECIFIED"),
    
    TOP("TOP"),
    
    RANDOM_START("RANDOM_START");

    private String value;

    SampleMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SampleMethodEnum fromValue(String value) {
      for (SampleMethodEnum b : SampleMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SampleMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SampleMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SampleMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SampleMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SampleMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLE_METHOD = "sampleMethod";
  @SerializedName(SERIALIZED_NAME_SAMPLE_METHOD)
  private SampleMethodEnum sampleMethod;

  public GooglePrivacyDlpV2CloudStorageOptions() {
  }

  public GooglePrivacyDlpV2CloudStorageOptions bytesLimitPerFile(String bytesLimitPerFile) {
    this.bytesLimitPerFile = bytesLimitPerFile;
    return this;
  }

  /**
   * Max number of bytes to scan from a file. If a scanned file&#39;s size is bigger than this value then the rest of the bytes are omitted. Only one of &#x60;bytes_limit_per_file&#x60; and &#x60;bytes_limit_per_file_percent&#x60; can be specified. This field can&#39;t be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).
   * @return bytesLimitPerFile
   */
  @javax.annotation.Nullable
  public String getBytesLimitPerFile() {
    return bytesLimitPerFile;
  }

  public void setBytesLimitPerFile(String bytesLimitPerFile) {
    this.bytesLimitPerFile = bytesLimitPerFile;
  }


  public GooglePrivacyDlpV2CloudStorageOptions bytesLimitPerFilePercent(Integer bytesLimitPerFilePercent) {
    this.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
    return this;
  }

  /**
   * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can&#39;t be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).
   * @return bytesLimitPerFilePercent
   */
  @javax.annotation.Nullable
  public Integer getBytesLimitPerFilePercent() {
    return bytesLimitPerFilePercent;
  }

  public void setBytesLimitPerFilePercent(Integer bytesLimitPerFilePercent) {
    this.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
  }


  public GooglePrivacyDlpV2CloudStorageOptions fileSet(GooglePrivacyDlpV2FileSet fileSet) {
    this.fileSet = fileSet;
    return this;
  }

  /**
   * Get fileSet
   * @return fileSet
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2FileSet getFileSet() {
    return fileSet;
  }

  public void setFileSet(GooglePrivacyDlpV2FileSet fileSet) {
    this.fileSet = fileSet;
  }


  public GooglePrivacyDlpV2CloudStorageOptions fileTypes(List<FileTypesEnum> fileTypes) {
    this.fileTypes = fileTypes;
    return this;
  }

  public GooglePrivacyDlpV2CloudStorageOptions addFileTypesItem(FileTypesEnum fileTypesItem) {
    if (this.fileTypes == null) {
      this.fileTypes = new ArrayList<>();
    }
    this.fileTypes.add(fileTypesItem);
    return this;
  }

  /**
   * List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to &#39;global&#39;, &#39;us&#39;, &#39;asia&#39;, and &#39;europe&#39;.
   * @return fileTypes
   */
  @javax.annotation.Nullable
  public List<FileTypesEnum> getFileTypes() {
    return fileTypes;
  }

  public void setFileTypes(List<FileTypesEnum> fileTypes) {
    this.fileTypes = fileTypes;
  }


  public GooglePrivacyDlpV2CloudStorageOptions filesLimitPercent(Integer filesLimitPercent) {
    this.filesLimitPercent = filesLimitPercent;
    return this;
  }

  /**
   * Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
   * @return filesLimitPercent
   */
  @javax.annotation.Nullable
  public Integer getFilesLimitPercent() {
    return filesLimitPercent;
  }

  public void setFilesLimitPercent(Integer filesLimitPercent) {
    this.filesLimitPercent = filesLimitPercent;
  }


  public GooglePrivacyDlpV2CloudStorageOptions sampleMethod(SampleMethodEnum sampleMethod) {
    this.sampleMethod = sampleMethod;
    return this;
  }

  /**
   * How to sample the data.
   * @return sampleMethod
   */
  @javax.annotation.Nullable
  public SampleMethodEnum getSampleMethod() {
    return sampleMethod;
  }

  public void setSampleMethod(SampleMethodEnum sampleMethod) {
    this.sampleMethod = sampleMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CloudStorageOptions googlePrivacyDlpV2CloudStorageOptions = (GooglePrivacyDlpV2CloudStorageOptions) o;
    return Objects.equals(this.bytesLimitPerFile, googlePrivacyDlpV2CloudStorageOptions.bytesLimitPerFile) &&
        Objects.equals(this.bytesLimitPerFilePercent, googlePrivacyDlpV2CloudStorageOptions.bytesLimitPerFilePercent) &&
        Objects.equals(this.fileSet, googlePrivacyDlpV2CloudStorageOptions.fileSet) &&
        Objects.equals(this.fileTypes, googlePrivacyDlpV2CloudStorageOptions.fileTypes) &&
        Objects.equals(this.filesLimitPercent, googlePrivacyDlpV2CloudStorageOptions.filesLimitPercent) &&
        Objects.equals(this.sampleMethod, googlePrivacyDlpV2CloudStorageOptions.sampleMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesLimitPerFile, bytesLimitPerFilePercent, fileSet, fileTypes, filesLimitPercent, sampleMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CloudStorageOptions {\n");
    sb.append("    bytesLimitPerFile: ").append(toIndentedString(bytesLimitPerFile)).append("\n");
    sb.append("    bytesLimitPerFilePercent: ").append(toIndentedString(bytesLimitPerFilePercent)).append("\n");
    sb.append("    fileSet: ").append(toIndentedString(fileSet)).append("\n");
    sb.append("    fileTypes: ").append(toIndentedString(fileTypes)).append("\n");
    sb.append("    filesLimitPercent: ").append(toIndentedString(filesLimitPercent)).append("\n");
    sb.append("    sampleMethod: ").append(toIndentedString(sampleMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesLimitPerFile");
    openapiFields.add("bytesLimitPerFilePercent");
    openapiFields.add("fileSet");
    openapiFields.add("fileTypes");
    openapiFields.add("filesLimitPercent");
    openapiFields.add("sampleMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CloudStorageOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CloudStorageOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CloudStorageOptions is not found in the empty JSON string", GooglePrivacyDlpV2CloudStorageOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CloudStorageOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CloudStorageOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bytesLimitPerFile") != null && !jsonObj.get("bytesLimitPerFile").isJsonNull()) && !jsonObj.get("bytesLimitPerFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytesLimitPerFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytesLimitPerFile").toString()));
      }
      // validate the optional field `fileSet`
      if (jsonObj.get("fileSet") != null && !jsonObj.get("fileSet").isJsonNull()) {
        GooglePrivacyDlpV2FileSet.validateJsonElement(jsonObj.get("fileSet"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileTypes") != null && !jsonObj.get("fileTypes").isJsonNull() && !jsonObj.get("fileTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileTypes` to be an array in the JSON string but got `%s`", jsonObj.get("fileTypes").toString()));
      }
      if ((jsonObj.get("sampleMethod") != null && !jsonObj.get("sampleMethod").isJsonNull()) && !jsonObj.get("sampleMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleMethod").toString()));
      }
      // validate the optional field `sampleMethod`
      if (jsonObj.get("sampleMethod") != null && !jsonObj.get("sampleMethod").isJsonNull()) {
        SampleMethodEnum.validateJsonElement(jsonObj.get("sampleMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CloudStorageOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CloudStorageOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CloudStorageOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CloudStorageOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CloudStorageOptions>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CloudStorageOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CloudStorageOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CloudStorageOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CloudStorageOptions
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CloudStorageOptions
   */
  public static GooglePrivacyDlpV2CloudStorageOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CloudStorageOptions.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CloudStorageOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

