/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message for specifying an adjustment to the likelihood of a finding as part of a detection rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2LikelihoodAdjustment {
  /**
   * Set the likelihood of a finding to a fixed value.
   */
  @JsonAdapter(FixedLikelihoodEnum.Adapter.class)
  public enum FixedLikelihoodEnum {
    LIKELIHOOD_UNSPECIFIED("LIKELIHOOD_UNSPECIFIED"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    FixedLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FixedLikelihoodEnum fromValue(String value) {
      for (FixedLikelihoodEnum b : FixedLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FixedLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FixedLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FixedLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FixedLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FixedLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIXED_LIKELIHOOD = "fixedLikelihood";
  @SerializedName(SERIALIZED_NAME_FIXED_LIKELIHOOD)
  private FixedLikelihoodEnum fixedLikelihood;

  public static final String SERIALIZED_NAME_RELATIVE_LIKELIHOOD = "relativeLikelihood";
  @SerializedName(SERIALIZED_NAME_RELATIVE_LIKELIHOOD)
  private Integer relativeLikelihood;

  public GooglePrivacyDlpV2LikelihoodAdjustment() {
  }

  public GooglePrivacyDlpV2LikelihoodAdjustment fixedLikelihood(FixedLikelihoodEnum fixedLikelihood) {
    this.fixedLikelihood = fixedLikelihood;
    return this;
  }

  /**
   * Set the likelihood of a finding to a fixed value.
   * @return fixedLikelihood
   */
  @javax.annotation.Nullable
  public FixedLikelihoodEnum getFixedLikelihood() {
    return fixedLikelihood;
  }

  public void setFixedLikelihood(FixedLikelihoodEnum fixedLikelihood) {
    this.fixedLikelihood = fixedLikelihood;
  }


  public GooglePrivacyDlpV2LikelihoodAdjustment relativeLikelihood(Integer relativeLikelihood) {
    this.relativeLikelihood = relativeLikelihood;
    return this;
  }

  /**
   * Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be &#x60;POSSIBLE&#x60; without the detection rule and &#x60;relative_likelihood&#x60; is 1, then it is upgraded to &#x60;LIKELY&#x60;, while a value of -1 would downgrade it to &#x60;UNLIKELY&#x60;. Likelihood may never drop below &#x60;VERY_UNLIKELY&#x60; or exceed &#x60;VERY_LIKELY&#x60;, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is &#x60;VERY_LIKELY&#x60; will result in a final likelihood of &#x60;LIKELY&#x60;.
   * @return relativeLikelihood
   */
  @javax.annotation.Nullable
  public Integer getRelativeLikelihood() {
    return relativeLikelihood;
  }

  public void setRelativeLikelihood(Integer relativeLikelihood) {
    this.relativeLikelihood = relativeLikelihood;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2LikelihoodAdjustment googlePrivacyDlpV2LikelihoodAdjustment = (GooglePrivacyDlpV2LikelihoodAdjustment) o;
    return Objects.equals(this.fixedLikelihood, googlePrivacyDlpV2LikelihoodAdjustment.fixedLikelihood) &&
        Objects.equals(this.relativeLikelihood, googlePrivacyDlpV2LikelihoodAdjustment.relativeLikelihood);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedLikelihood, relativeLikelihood);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2LikelihoodAdjustment {\n");
    sb.append("    fixedLikelihood: ").append(toIndentedString(fixedLikelihood)).append("\n");
    sb.append("    relativeLikelihood: ").append(toIndentedString(relativeLikelihood)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixedLikelihood");
    openapiFields.add("relativeLikelihood");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2LikelihoodAdjustment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2LikelihoodAdjustment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2LikelihoodAdjustment is not found in the empty JSON string", GooglePrivacyDlpV2LikelihoodAdjustment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2LikelihoodAdjustment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2LikelihoodAdjustment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fixedLikelihood") != null && !jsonObj.get("fixedLikelihood").isJsonNull()) && !jsonObj.get("fixedLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixedLikelihood").toString()));
      }
      // validate the optional field `fixedLikelihood`
      if (jsonObj.get("fixedLikelihood") != null && !jsonObj.get("fixedLikelihood").isJsonNull()) {
        FixedLikelihoodEnum.validateJsonElement(jsonObj.get("fixedLikelihood"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2LikelihoodAdjustment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2LikelihoodAdjustment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2LikelihoodAdjustment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2LikelihoodAdjustment.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2LikelihoodAdjustment>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2LikelihoodAdjustment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2LikelihoodAdjustment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2LikelihoodAdjustment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2LikelihoodAdjustment
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2LikelihoodAdjustment
   */
  public static GooglePrivacyDlpV2LikelihoodAdjustment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2LikelihoodAdjustment.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2LikelihoodAdjustment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

