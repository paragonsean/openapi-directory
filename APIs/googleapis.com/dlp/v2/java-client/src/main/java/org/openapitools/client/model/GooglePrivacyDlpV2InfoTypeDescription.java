/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2InfoTypeCategory;
import org.openapitools.client.model.GooglePrivacyDlpV2SensitivityScore;
import org.openapitools.client.model.GooglePrivacyDlpV2VersionDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InfoType description.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2InfoTypeDescription {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<GooglePrivacyDlpV2InfoTypeCategory> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SENSITIVITY_SCORE = "sensitivityScore";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_SCORE)
  private GooglePrivacyDlpV2SensitivityScore sensitivityScore;

  /**
   * Gets or Sets supportedBy
   */
  @JsonAdapter(SupportedByEnum.Adapter.class)
  public enum SupportedByEnum {
    ENUM_TYPE_UNSPECIFIED("ENUM_TYPE_UNSPECIFIED"),
    
    INSPECT("INSPECT"),
    
    RISK_ANALYSIS("RISK_ANALYSIS");

    private String value;

    SupportedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedByEnum fromValue(String value) {
      for (SupportedByEnum b : SupportedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_BY = "supportedBy";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_BY)
  private List<SupportedByEnum> supportedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<GooglePrivacyDlpV2VersionDescription> versions = new ArrayList<>();

  public GooglePrivacyDlpV2InfoTypeDescription() {
  }

  public GooglePrivacyDlpV2InfoTypeDescription categories(List<GooglePrivacyDlpV2InfoTypeCategory> categories) {
    this.categories = categories;
    return this;
  }

  public GooglePrivacyDlpV2InfoTypeDescription addCategoriesItem(GooglePrivacyDlpV2InfoTypeCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The category of the infoType.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2InfoTypeCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<GooglePrivacyDlpV2InfoTypeCategory> categories) {
    this.categories = categories;
  }


  public GooglePrivacyDlpV2InfoTypeDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the infotype. Translated when language is provided in the request.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GooglePrivacyDlpV2InfoTypeDescription displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Human readable form of the infoType name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public GooglePrivacyDlpV2InfoTypeDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Internal name of the infoType.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GooglePrivacyDlpV2InfoTypeDescription sensitivityScore(GooglePrivacyDlpV2SensitivityScore sensitivityScore) {
    this.sensitivityScore = sensitivityScore;
    return this;
  }

  /**
   * Get sensitivityScore
   * @return sensitivityScore
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2SensitivityScore getSensitivityScore() {
    return sensitivityScore;
  }

  public void setSensitivityScore(GooglePrivacyDlpV2SensitivityScore sensitivityScore) {
    this.sensitivityScore = sensitivityScore;
  }


  public GooglePrivacyDlpV2InfoTypeDescription supportedBy(List<SupportedByEnum> supportedBy) {
    this.supportedBy = supportedBy;
    return this;
  }

  public GooglePrivacyDlpV2InfoTypeDescription addSupportedByItem(SupportedByEnum supportedByItem) {
    if (this.supportedBy == null) {
      this.supportedBy = new ArrayList<>();
    }
    this.supportedBy.add(supportedByItem);
    return this;
  }

  /**
   * Which parts of the API supports this InfoType.
   * @return supportedBy
   */
  @javax.annotation.Nullable
  public List<SupportedByEnum> getSupportedBy() {
    return supportedBy;
  }

  public void setSupportedBy(List<SupportedByEnum> supportedBy) {
    this.supportedBy = supportedBy;
  }


  public GooglePrivacyDlpV2InfoTypeDescription versions(List<GooglePrivacyDlpV2VersionDescription> versions) {
    this.versions = versions;
    return this;
  }

  public GooglePrivacyDlpV2InfoTypeDescription addVersionsItem(GooglePrivacyDlpV2VersionDescription versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * A list of available versions for the infotype.
   * @return versions
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2VersionDescription> getVersions() {
    return versions;
  }

  public void setVersions(List<GooglePrivacyDlpV2VersionDescription> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2InfoTypeDescription googlePrivacyDlpV2InfoTypeDescription = (GooglePrivacyDlpV2InfoTypeDescription) o;
    return Objects.equals(this.categories, googlePrivacyDlpV2InfoTypeDescription.categories) &&
        Objects.equals(this.description, googlePrivacyDlpV2InfoTypeDescription.description) &&
        Objects.equals(this.displayName, googlePrivacyDlpV2InfoTypeDescription.displayName) &&
        Objects.equals(this.name, googlePrivacyDlpV2InfoTypeDescription.name) &&
        Objects.equals(this.sensitivityScore, googlePrivacyDlpV2InfoTypeDescription.sensitivityScore) &&
        Objects.equals(this.supportedBy, googlePrivacyDlpV2InfoTypeDescription.supportedBy) &&
        Objects.equals(this.versions, googlePrivacyDlpV2InfoTypeDescription.versions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, description, displayName, name, sensitivityScore, supportedBy, versions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2InfoTypeDescription {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sensitivityScore: ").append(toIndentedString(sensitivityScore)).append("\n");
    sb.append("    supportedBy: ").append(toIndentedString(supportedBy)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("sensitivityScore");
    openapiFields.add("supportedBy");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2InfoTypeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2InfoTypeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2InfoTypeDescription is not found in the empty JSON string", GooglePrivacyDlpV2InfoTypeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2InfoTypeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2InfoTypeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            GooglePrivacyDlpV2InfoTypeCategory.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `sensitivityScore`
      if (jsonObj.get("sensitivityScore") != null && !jsonObj.get("sensitivityScore").isJsonNull()) {
        GooglePrivacyDlpV2SensitivityScore.validateJsonElement(jsonObj.get("sensitivityScore"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedBy") != null && !jsonObj.get("supportedBy").isJsonNull() && !jsonObj.get("supportedBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedBy` to be an array in the JSON string but got `%s`", jsonObj.get("supportedBy").toString()));
      }
      if (jsonObj.get("versions") != null && !jsonObj.get("versions").isJsonNull()) {
        JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
        if (jsonArrayversions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("versions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
          }

          // validate the optional field `versions` (array)
          for (int i = 0; i < jsonArrayversions.size(); i++) {
            GooglePrivacyDlpV2VersionDescription.validateJsonElement(jsonArrayversions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2InfoTypeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2InfoTypeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2InfoTypeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2InfoTypeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2InfoTypeDescription>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2InfoTypeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2InfoTypeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2InfoTypeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2InfoTypeDescription
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2InfoTypeDescription
   */
  public static GooglePrivacyDlpV2InfoTypeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2InfoTypeDescription.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2InfoTypeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

