/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2Conditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An expression, consisting of an operator and conditions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Expressions {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private GooglePrivacyDlpV2Conditions conditions;

  /**
   * The operator to apply to the result of conditions. Default and currently only supported value is &#x60;AND&#x60;.
   */
  @JsonAdapter(LogicalOperatorEnum.Adapter.class)
  public enum LogicalOperatorEnum {
    LOGICAL_OPERATOR_UNSPECIFIED("LOGICAL_OPERATOR_UNSPECIFIED"),
    
    AND("AND");

    private String value;

    LogicalOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogicalOperatorEnum fromValue(String value) {
      for (LogicalOperatorEnum b : LogicalOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogicalOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogicalOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogicalOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogicalOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogicalOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGICAL_OPERATOR = "logicalOperator";
  @SerializedName(SERIALIZED_NAME_LOGICAL_OPERATOR)
  private LogicalOperatorEnum logicalOperator;

  public GooglePrivacyDlpV2Expressions() {
  }

  public GooglePrivacyDlpV2Expressions conditions(GooglePrivacyDlpV2Conditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Conditions getConditions() {
    return conditions;
  }

  public void setConditions(GooglePrivacyDlpV2Conditions conditions) {
    this.conditions = conditions;
  }


  public GooglePrivacyDlpV2Expressions logicalOperator(LogicalOperatorEnum logicalOperator) {
    this.logicalOperator = logicalOperator;
    return this;
  }

  /**
   * The operator to apply to the result of conditions. Default and currently only supported value is &#x60;AND&#x60;.
   * @return logicalOperator
   */
  @javax.annotation.Nullable
  public LogicalOperatorEnum getLogicalOperator() {
    return logicalOperator;
  }

  public void setLogicalOperator(LogicalOperatorEnum logicalOperator) {
    this.logicalOperator = logicalOperator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Expressions googlePrivacyDlpV2Expressions = (GooglePrivacyDlpV2Expressions) o;
    return Objects.equals(this.conditions, googlePrivacyDlpV2Expressions.conditions) &&
        Objects.equals(this.logicalOperator, googlePrivacyDlpV2Expressions.logicalOperator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, logicalOperator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Expressions {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    logicalOperator: ").append(toIndentedString(logicalOperator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("logicalOperator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Expressions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Expressions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Expressions is not found in the empty JSON string", GooglePrivacyDlpV2Expressions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Expressions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Expressions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        GooglePrivacyDlpV2Conditions.validateJsonElement(jsonObj.get("conditions"));
      }
      if ((jsonObj.get("logicalOperator") != null && !jsonObj.get("logicalOperator").isJsonNull()) && !jsonObj.get("logicalOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logicalOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logicalOperator").toString()));
      }
      // validate the optional field `logicalOperator`
      if (jsonObj.get("logicalOperator") != null && !jsonObj.get("logicalOperator").isJsonNull()) {
        LogicalOperatorEnum.validateJsonElement(jsonObj.get("logicalOperator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Expressions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Expressions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Expressions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Expressions.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Expressions>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Expressions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Expressions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Expressions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Expressions
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Expressions
   */
  public static GooglePrivacyDlpV2Expressions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Expressions.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Expressions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

