/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2BigQueryTableTypes;
import org.openapitools.client.model.GooglePrivacyDlpV2OrConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DiscoveryBigQueryConditions {
  public static final String SERIALIZED_NAME_CREATED_AFTER = "createdAfter";
  @SerializedName(SERIALIZED_NAME_CREATED_AFTER)
  private String createdAfter;

  public static final String SERIALIZED_NAME_OR_CONDITIONS = "orConditions";
  @SerializedName(SERIALIZED_NAME_OR_CONDITIONS)
  private GooglePrivacyDlpV2OrConditions orConditions;

  /**
   * Restrict discovery to categories of table types.
   */
  @JsonAdapter(TypeCollectionEnum.Adapter.class)
  public enum TypeCollectionEnum {
    UNSPECIFIED("BIG_QUERY_COLLECTION_UNSPECIFIED"),
    
    ALL_TYPES("BIG_QUERY_COLLECTION_ALL_TYPES"),
    
    ONLY_SUPPORTED_TYPES("BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES");

    private String value;

    TypeCollectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeCollectionEnum fromValue(String value) {
      for (TypeCollectionEnum b : TypeCollectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeCollectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeCollectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeCollectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeCollectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeCollectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_COLLECTION = "typeCollection";
  @SerializedName(SERIALIZED_NAME_TYPE_COLLECTION)
  private TypeCollectionEnum typeCollection;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private GooglePrivacyDlpV2BigQueryTableTypes types;

  public GooglePrivacyDlpV2DiscoveryBigQueryConditions() {
  }

  public GooglePrivacyDlpV2DiscoveryBigQueryConditions createdAfter(String createdAfter) {
    this.createdAfter = createdAfter;
    return this;
  }

  /**
   * BigQuery table must have been created after this date. Used to avoid backfilling.
   * @return createdAfter
   */
  @javax.annotation.Nullable
  public String getCreatedAfter() {
    return createdAfter;
  }

  public void setCreatedAfter(String createdAfter) {
    this.createdAfter = createdAfter;
  }


  public GooglePrivacyDlpV2DiscoveryBigQueryConditions orConditions(GooglePrivacyDlpV2OrConditions orConditions) {
    this.orConditions = orConditions;
    return this;
  }

  /**
   * Get orConditions
   * @return orConditions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2OrConditions getOrConditions() {
    return orConditions;
  }

  public void setOrConditions(GooglePrivacyDlpV2OrConditions orConditions) {
    this.orConditions = orConditions;
  }


  public GooglePrivacyDlpV2DiscoveryBigQueryConditions typeCollection(TypeCollectionEnum typeCollection) {
    this.typeCollection = typeCollection;
    return this;
  }

  /**
   * Restrict discovery to categories of table types.
   * @return typeCollection
   */
  @javax.annotation.Nullable
  public TypeCollectionEnum getTypeCollection() {
    return typeCollection;
  }

  public void setTypeCollection(TypeCollectionEnum typeCollection) {
    this.typeCollection = typeCollection;
  }


  public GooglePrivacyDlpV2DiscoveryBigQueryConditions types(GooglePrivacyDlpV2BigQueryTableTypes types) {
    this.types = types;
    return this;
  }

  /**
   * Get types
   * @return types
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2BigQueryTableTypes getTypes() {
    return types;
  }

  public void setTypes(GooglePrivacyDlpV2BigQueryTableTypes types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DiscoveryBigQueryConditions googlePrivacyDlpV2DiscoveryBigQueryConditions = (GooglePrivacyDlpV2DiscoveryBigQueryConditions) o;
    return Objects.equals(this.createdAfter, googlePrivacyDlpV2DiscoveryBigQueryConditions.createdAfter) &&
        Objects.equals(this.orConditions, googlePrivacyDlpV2DiscoveryBigQueryConditions.orConditions) &&
        Objects.equals(this.typeCollection, googlePrivacyDlpV2DiscoveryBigQueryConditions.typeCollection) &&
        Objects.equals(this.types, googlePrivacyDlpV2DiscoveryBigQueryConditions.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAfter, orConditions, typeCollection, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DiscoveryBigQueryConditions {\n");
    sb.append("    createdAfter: ").append(toIndentedString(createdAfter)).append("\n");
    sb.append("    orConditions: ").append(toIndentedString(orConditions)).append("\n");
    sb.append("    typeCollection: ").append(toIndentedString(typeCollection)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAfter");
    openapiFields.add("orConditions");
    openapiFields.add("typeCollection");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DiscoveryBigQueryConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DiscoveryBigQueryConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DiscoveryBigQueryConditions is not found in the empty JSON string", GooglePrivacyDlpV2DiscoveryBigQueryConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DiscoveryBigQueryConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DiscoveryBigQueryConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdAfter") != null && !jsonObj.get("createdAfter").isJsonNull()) && !jsonObj.get("createdAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAfter").toString()));
      }
      // validate the optional field `orConditions`
      if (jsonObj.get("orConditions") != null && !jsonObj.get("orConditions").isJsonNull()) {
        GooglePrivacyDlpV2OrConditions.validateJsonElement(jsonObj.get("orConditions"));
      }
      if ((jsonObj.get("typeCollection") != null && !jsonObj.get("typeCollection").isJsonNull()) && !jsonObj.get("typeCollection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCollection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCollection").toString()));
      }
      // validate the optional field `typeCollection`
      if (jsonObj.get("typeCollection") != null && !jsonObj.get("typeCollection").isJsonNull()) {
        TypeCollectionEnum.validateJsonElement(jsonObj.get("typeCollection"));
      }
      // validate the optional field `types`
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) {
        GooglePrivacyDlpV2BigQueryTableTypes.validateJsonElement(jsonObj.get("types"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DiscoveryBigQueryConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DiscoveryBigQueryConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DiscoveryBigQueryConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DiscoveryBigQueryConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DiscoveryBigQueryConditions>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DiscoveryBigQueryConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DiscoveryBigQueryConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DiscoveryBigQueryConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DiscoveryBigQueryConditions
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DiscoveryBigQueryConditions
   */
  public static GooglePrivacyDlpV2DiscoveryBigQueryConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DiscoveryBigQueryConditions.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DiscoveryBigQueryConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

