/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2Finding;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All the findings for a single scanned item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2InspectResult {
  public static final String SERIALIZED_NAME_FINDINGS = "findings";
  @SerializedName(SERIALIZED_NAME_FINDINGS)
  private List<GooglePrivacyDlpV2Finding> findings = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINDINGS_TRUNCATED = "findingsTruncated";
  @SerializedName(SERIALIZED_NAME_FINDINGS_TRUNCATED)
  private Boolean findingsTruncated;

  public GooglePrivacyDlpV2InspectResult() {
  }

  public GooglePrivacyDlpV2InspectResult findings(List<GooglePrivacyDlpV2Finding> findings) {
    this.findings = findings;
    return this;
  }

  public GooglePrivacyDlpV2InspectResult addFindingsItem(GooglePrivacyDlpV2Finding findingsItem) {
    if (this.findings == null) {
      this.findings = new ArrayList<>();
    }
    this.findings.add(findingsItem);
    return this;
  }

  /**
   * List of findings for an item.
   * @return findings
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Finding> getFindings() {
    return findings;
  }

  public void setFindings(List<GooglePrivacyDlpV2Finding> findings) {
    this.findings = findings;
  }


  public GooglePrivacyDlpV2InspectResult findingsTruncated(Boolean findingsTruncated) {
    this.findingsTruncated = findingsTruncated;
    return this;
  }

  /**
   * If true, then this item might have more findings than were returned, and the findings returned are an arbitrary subset of all findings. The findings list might be truncated because the input items were too large, or because the server reached the maximum amount of resources allowed for a single API call. For best results, divide the input into smaller batches.
   * @return findingsTruncated
   */
  @javax.annotation.Nullable
  public Boolean getFindingsTruncated() {
    return findingsTruncated;
  }

  public void setFindingsTruncated(Boolean findingsTruncated) {
    this.findingsTruncated = findingsTruncated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2InspectResult googlePrivacyDlpV2InspectResult = (GooglePrivacyDlpV2InspectResult) o;
    return Objects.equals(this.findings, googlePrivacyDlpV2InspectResult.findings) &&
        Objects.equals(this.findingsTruncated, googlePrivacyDlpV2InspectResult.findingsTruncated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(findings, findingsTruncated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2InspectResult {\n");
    sb.append("    findings: ").append(toIndentedString(findings)).append("\n");
    sb.append("    findingsTruncated: ").append(toIndentedString(findingsTruncated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("findings");
    openapiFields.add("findingsTruncated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2InspectResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2InspectResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2InspectResult is not found in the empty JSON string", GooglePrivacyDlpV2InspectResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2InspectResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2InspectResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("findings") != null && !jsonObj.get("findings").isJsonNull()) {
        JsonArray jsonArrayfindings = jsonObj.getAsJsonArray("findings");
        if (jsonArrayfindings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("findings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `findings` to be an array in the JSON string but got `%s`", jsonObj.get("findings").toString()));
          }

          // validate the optional field `findings` (array)
          for (int i = 0; i < jsonArrayfindings.size(); i++) {
            GooglePrivacyDlpV2Finding.validateJsonElement(jsonArrayfindings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2InspectResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2InspectResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2InspectResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2InspectResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2InspectResult>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2InspectResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2InspectResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2InspectResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2InspectResult
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2InspectResult
   */
  public static GooglePrivacyDlpV2InspectResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2InspectResult.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2InspectResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

