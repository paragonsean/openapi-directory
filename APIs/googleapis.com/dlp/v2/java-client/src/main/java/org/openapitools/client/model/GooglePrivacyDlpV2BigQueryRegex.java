/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2BigQueryRegex {
  public static final String SERIALIZED_NAME_DATASET_ID_REGEX = "datasetIdRegex";
  @SerializedName(SERIALIZED_NAME_DATASET_ID_REGEX)
  private String datasetIdRegex;

  public static final String SERIALIZED_NAME_PROJECT_ID_REGEX = "projectIdRegex";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID_REGEX)
  private String projectIdRegex;

  public static final String SERIALIZED_NAME_TABLE_ID_REGEX = "tableIdRegex";
  @SerializedName(SERIALIZED_NAME_TABLE_ID_REGEX)
  private String tableIdRegex;

  public GooglePrivacyDlpV2BigQueryRegex() {
  }

  public GooglePrivacyDlpV2BigQueryRegex datasetIdRegex(String datasetIdRegex) {
    this.datasetIdRegex = datasetIdRegex;
    return this;
  }

  /**
   * If unset, this property matches all datasets.
   * @return datasetIdRegex
   */
  @javax.annotation.Nullable
  public String getDatasetIdRegex() {
    return datasetIdRegex;
  }

  public void setDatasetIdRegex(String datasetIdRegex) {
    this.datasetIdRegex = datasetIdRegex;
  }


  public GooglePrivacyDlpV2BigQueryRegex projectIdRegex(String projectIdRegex) {
    this.projectIdRegex = projectIdRegex;
    return this;
  }

  /**
   * For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.
   * @return projectIdRegex
   */
  @javax.annotation.Nullable
  public String getProjectIdRegex() {
    return projectIdRegex;
  }

  public void setProjectIdRegex(String projectIdRegex) {
    this.projectIdRegex = projectIdRegex;
  }


  public GooglePrivacyDlpV2BigQueryRegex tableIdRegex(String tableIdRegex) {
    this.tableIdRegex = tableIdRegex;
    return this;
  }

  /**
   * If unset, this property matches all tables.
   * @return tableIdRegex
   */
  @javax.annotation.Nullable
  public String getTableIdRegex() {
    return tableIdRegex;
  }

  public void setTableIdRegex(String tableIdRegex) {
    this.tableIdRegex = tableIdRegex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2BigQueryRegex googlePrivacyDlpV2BigQueryRegex = (GooglePrivacyDlpV2BigQueryRegex) o;
    return Objects.equals(this.datasetIdRegex, googlePrivacyDlpV2BigQueryRegex.datasetIdRegex) &&
        Objects.equals(this.projectIdRegex, googlePrivacyDlpV2BigQueryRegex.projectIdRegex) &&
        Objects.equals(this.tableIdRegex, googlePrivacyDlpV2BigQueryRegex.tableIdRegex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetIdRegex, projectIdRegex, tableIdRegex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2BigQueryRegex {\n");
    sb.append("    datasetIdRegex: ").append(toIndentedString(datasetIdRegex)).append("\n");
    sb.append("    projectIdRegex: ").append(toIndentedString(projectIdRegex)).append("\n");
    sb.append("    tableIdRegex: ").append(toIndentedString(tableIdRegex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasetIdRegex");
    openapiFields.add("projectIdRegex");
    openapiFields.add("tableIdRegex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2BigQueryRegex
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2BigQueryRegex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2BigQueryRegex is not found in the empty JSON string", GooglePrivacyDlpV2BigQueryRegex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2BigQueryRegex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2BigQueryRegex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasetIdRegex") != null && !jsonObj.get("datasetIdRegex").isJsonNull()) && !jsonObj.get("datasetIdRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetIdRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetIdRegex").toString()));
      }
      if ((jsonObj.get("projectIdRegex") != null && !jsonObj.get("projectIdRegex").isJsonNull()) && !jsonObj.get("projectIdRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectIdRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectIdRegex").toString()));
      }
      if ((jsonObj.get("tableIdRegex") != null && !jsonObj.get("tableIdRegex").isJsonNull()) && !jsonObj.get("tableIdRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableIdRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableIdRegex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2BigQueryRegex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2BigQueryRegex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2BigQueryRegex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2BigQueryRegex.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2BigQueryRegex>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2BigQueryRegex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2BigQueryRegex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2BigQueryRegex given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2BigQueryRegex
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2BigQueryRegex
   */
  public static GooglePrivacyDlpV2BigQueryRegex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2BigQueryRegex.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2BigQueryRegex to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

