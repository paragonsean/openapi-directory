/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition consisting of a value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2PubSubCondition {
  /**
   * The minimum data risk score that triggers the condition.
   */
  @JsonAdapter(MinimumRiskScoreEnum.Adapter.class)
  public enum MinimumRiskScoreEnum {
    PROFILE_SCORE_BUCKET_UNSPECIFIED("PROFILE_SCORE_BUCKET_UNSPECIFIED"),
    
    HIGH("HIGH"),
    
    MEDIUM_OR_HIGH("MEDIUM_OR_HIGH");

    private String value;

    MinimumRiskScoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumRiskScoreEnum fromValue(String value) {
      for (MinimumRiskScoreEnum b : MinimumRiskScoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumRiskScoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumRiskScoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumRiskScoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumRiskScoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumRiskScoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_RISK_SCORE = "minimumRiskScore";
  @SerializedName(SERIALIZED_NAME_MINIMUM_RISK_SCORE)
  private MinimumRiskScoreEnum minimumRiskScore;

  /**
   * The minimum sensitivity level that triggers the condition.
   */
  @JsonAdapter(MinimumSensitivityScoreEnum.Adapter.class)
  public enum MinimumSensitivityScoreEnum {
    PROFILE_SCORE_BUCKET_UNSPECIFIED("PROFILE_SCORE_BUCKET_UNSPECIFIED"),
    
    HIGH("HIGH"),
    
    MEDIUM_OR_HIGH("MEDIUM_OR_HIGH");

    private String value;

    MinimumSensitivityScoreEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinimumSensitivityScoreEnum fromValue(String value) {
      for (MinimumSensitivityScoreEnum b : MinimumSensitivityScoreEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinimumSensitivityScoreEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinimumSensitivityScoreEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinimumSensitivityScoreEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinimumSensitivityScoreEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinimumSensitivityScoreEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MINIMUM_SENSITIVITY_SCORE = "minimumSensitivityScore";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SENSITIVITY_SCORE)
  private MinimumSensitivityScoreEnum minimumSensitivityScore;

  public GooglePrivacyDlpV2PubSubCondition() {
  }

  public GooglePrivacyDlpV2PubSubCondition minimumRiskScore(MinimumRiskScoreEnum minimumRiskScore) {
    this.minimumRiskScore = minimumRiskScore;
    return this;
  }

  /**
   * The minimum data risk score that triggers the condition.
   * @return minimumRiskScore
   */
  @javax.annotation.Nullable
  public MinimumRiskScoreEnum getMinimumRiskScore() {
    return minimumRiskScore;
  }

  public void setMinimumRiskScore(MinimumRiskScoreEnum minimumRiskScore) {
    this.minimumRiskScore = minimumRiskScore;
  }


  public GooglePrivacyDlpV2PubSubCondition minimumSensitivityScore(MinimumSensitivityScoreEnum minimumSensitivityScore) {
    this.minimumSensitivityScore = minimumSensitivityScore;
    return this;
  }

  /**
   * The minimum sensitivity level that triggers the condition.
   * @return minimumSensitivityScore
   */
  @javax.annotation.Nullable
  public MinimumSensitivityScoreEnum getMinimumSensitivityScore() {
    return minimumSensitivityScore;
  }

  public void setMinimumSensitivityScore(MinimumSensitivityScoreEnum minimumSensitivityScore) {
    this.minimumSensitivityScore = minimumSensitivityScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2PubSubCondition googlePrivacyDlpV2PubSubCondition = (GooglePrivacyDlpV2PubSubCondition) o;
    return Objects.equals(this.minimumRiskScore, googlePrivacyDlpV2PubSubCondition.minimumRiskScore) &&
        Objects.equals(this.minimumSensitivityScore, googlePrivacyDlpV2PubSubCondition.minimumSensitivityScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minimumRiskScore, minimumSensitivityScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2PubSubCondition {\n");
    sb.append("    minimumRiskScore: ").append(toIndentedString(minimumRiskScore)).append("\n");
    sb.append("    minimumSensitivityScore: ").append(toIndentedString(minimumSensitivityScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("minimumRiskScore");
    openapiFields.add("minimumSensitivityScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2PubSubCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2PubSubCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2PubSubCondition is not found in the empty JSON string", GooglePrivacyDlpV2PubSubCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2PubSubCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2PubSubCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("minimumRiskScore") != null && !jsonObj.get("minimumRiskScore").isJsonNull()) && !jsonObj.get("minimumRiskScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumRiskScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumRiskScore").toString()));
      }
      // validate the optional field `minimumRiskScore`
      if (jsonObj.get("minimumRiskScore") != null && !jsonObj.get("minimumRiskScore").isJsonNull()) {
        MinimumRiskScoreEnum.validateJsonElement(jsonObj.get("minimumRiskScore"));
      }
      if ((jsonObj.get("minimumSensitivityScore") != null && !jsonObj.get("minimumSensitivityScore").isJsonNull()) && !jsonObj.get("minimumSensitivityScore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumSensitivityScore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumSensitivityScore").toString()));
      }
      // validate the optional field `minimumSensitivityScore`
      if (jsonObj.get("minimumSensitivityScore") != null && !jsonObj.get("minimumSensitivityScore").isJsonNull()) {
        MinimumSensitivityScoreEnum.validateJsonElement(jsonObj.get("minimumSensitivityScore"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2PubSubCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2PubSubCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2PubSubCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2PubSubCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2PubSubCondition>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2PubSubCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2PubSubCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2PubSubCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2PubSubCondition
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2PubSubCondition
   */
  public static GooglePrivacyDlpV2PubSubCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2PubSubCondition.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2PubSubCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

