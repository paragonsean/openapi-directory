/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message for specifying a window around a finding to apply a detection rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Proximity {
  public static final String SERIALIZED_NAME_WINDOW_AFTER = "windowAfter";
  @SerializedName(SERIALIZED_NAME_WINDOW_AFTER)
  private Integer windowAfter;

  public static final String SERIALIZED_NAME_WINDOW_BEFORE = "windowBefore";
  @SerializedName(SERIALIZED_NAME_WINDOW_BEFORE)
  private Integer windowBefore;

  public GooglePrivacyDlpV2Proximity() {
  }

  public GooglePrivacyDlpV2Proximity windowAfter(Integer windowAfter) {
    this.windowAfter = windowAfter;
    return this;
  }

  /**
   * Number of characters after the finding to consider.
   * @return windowAfter
   */
  @javax.annotation.Nullable
  public Integer getWindowAfter() {
    return windowAfter;
  }

  public void setWindowAfter(Integer windowAfter) {
    this.windowAfter = windowAfter;
  }


  public GooglePrivacyDlpV2Proximity windowBefore(Integer windowBefore) {
    this.windowBefore = windowBefore;
    return this;
  }

  /**
   * Number of characters before the finding to consider. For tabular data, if you want to modify the likelihood of an entire column of findngs, set this to 1. For more information, see [Hotword example: Set the match likelihood of a table column] (https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes-likelihood#match-column-values).
   * @return windowBefore
   */
  @javax.annotation.Nullable
  public Integer getWindowBefore() {
    return windowBefore;
  }

  public void setWindowBefore(Integer windowBefore) {
    this.windowBefore = windowBefore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Proximity googlePrivacyDlpV2Proximity = (GooglePrivacyDlpV2Proximity) o;
    return Objects.equals(this.windowAfter, googlePrivacyDlpV2Proximity.windowAfter) &&
        Objects.equals(this.windowBefore, googlePrivacyDlpV2Proximity.windowBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(windowAfter, windowBefore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Proximity {\n");
    sb.append("    windowAfter: ").append(toIndentedString(windowAfter)).append("\n");
    sb.append("    windowBefore: ").append(toIndentedString(windowBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("windowAfter");
    openapiFields.add("windowBefore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Proximity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Proximity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Proximity is not found in the empty JSON string", GooglePrivacyDlpV2Proximity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Proximity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Proximity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Proximity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Proximity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Proximity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Proximity.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Proximity>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Proximity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Proximity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Proximity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Proximity
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Proximity
   */
  public static GooglePrivacyDlpV2Proximity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Proximity.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Proximity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

