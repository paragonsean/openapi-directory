/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2Value;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound &#x3D; 10 and upper_bound &#x3D; 20, all values that are within this bucket will be replaced with \&quot;10-20\&quot;. This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to learn more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2FixedSizeBucketingConfig {
  public static final String SERIALIZED_NAME_BUCKET_SIZE = "bucketSize";
  @SerializedName(SERIALIZED_NAME_BUCKET_SIZE)
  private Double bucketSize;

  public static final String SERIALIZED_NAME_LOWER_BOUND = "lowerBound";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUND)
  private GooglePrivacyDlpV2Value lowerBound;

  public static final String SERIALIZED_NAME_UPPER_BOUND = "upperBound";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND)
  private GooglePrivacyDlpV2Value upperBound;

  public GooglePrivacyDlpV2FixedSizeBucketingConfig() {
  }

  public GooglePrivacyDlpV2FixedSizeBucketingConfig bucketSize(Double bucketSize) {
    this.bucketSize = bucketSize;
    return this;
  }

  /**
   * Required. Size of each bucket (except for minimum and maximum buckets). So if &#x60;lower_bound&#x60; &#x3D; 10, &#x60;upper_bound&#x60; &#x3D; 89, and &#x60;bucket_size&#x60; &#x3D; 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
   * @return bucketSize
   */
  @javax.annotation.Nullable
  public Double getBucketSize() {
    return bucketSize;
  }

  public void setBucketSize(Double bucketSize) {
    this.bucketSize = bucketSize;
  }


  public GooglePrivacyDlpV2FixedSizeBucketingConfig lowerBound(GooglePrivacyDlpV2Value lowerBound) {
    this.lowerBound = lowerBound;
    return this;
  }

  /**
   * Get lowerBound
   * @return lowerBound
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Value getLowerBound() {
    return lowerBound;
  }

  public void setLowerBound(GooglePrivacyDlpV2Value lowerBound) {
    this.lowerBound = lowerBound;
  }


  public GooglePrivacyDlpV2FixedSizeBucketingConfig upperBound(GooglePrivacyDlpV2Value upperBound) {
    this.upperBound = upperBound;
    return this;
  }

  /**
   * Get upperBound
   * @return upperBound
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Value getUpperBound() {
    return upperBound;
  }

  public void setUpperBound(GooglePrivacyDlpV2Value upperBound) {
    this.upperBound = upperBound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2FixedSizeBucketingConfig googlePrivacyDlpV2FixedSizeBucketingConfig = (GooglePrivacyDlpV2FixedSizeBucketingConfig) o;
    return Objects.equals(this.bucketSize, googlePrivacyDlpV2FixedSizeBucketingConfig.bucketSize) &&
        Objects.equals(this.lowerBound, googlePrivacyDlpV2FixedSizeBucketingConfig.lowerBound) &&
        Objects.equals(this.upperBound, googlePrivacyDlpV2FixedSizeBucketingConfig.upperBound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketSize, lowerBound, upperBound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2FixedSizeBucketingConfig {\n");
    sb.append("    bucketSize: ").append(toIndentedString(bucketSize)).append("\n");
    sb.append("    lowerBound: ").append(toIndentedString(lowerBound)).append("\n");
    sb.append("    upperBound: ").append(toIndentedString(upperBound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketSize");
    openapiFields.add("lowerBound");
    openapiFields.add("upperBound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2FixedSizeBucketingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2FixedSizeBucketingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2FixedSizeBucketingConfig is not found in the empty JSON string", GooglePrivacyDlpV2FixedSizeBucketingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2FixedSizeBucketingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2FixedSizeBucketingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lowerBound`
      if (jsonObj.get("lowerBound") != null && !jsonObj.get("lowerBound").isJsonNull()) {
        GooglePrivacyDlpV2Value.validateJsonElement(jsonObj.get("lowerBound"));
      }
      // validate the optional field `upperBound`
      if (jsonObj.get("upperBound") != null && !jsonObj.get("upperBound").isJsonNull()) {
        GooglePrivacyDlpV2Value.validateJsonElement(jsonObj.get("upperBound"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2FixedSizeBucketingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2FixedSizeBucketingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2FixedSizeBucketingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2FixedSizeBucketingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2FixedSizeBucketingConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2FixedSizeBucketingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2FixedSizeBucketingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2FixedSizeBucketingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2FixedSizeBucketingConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2FixedSizeBucketingConfig
   */
  public static GooglePrivacyDlpV2FixedSizeBucketingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2FixedSizeBucketingConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2FixedSizeBucketingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

