/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2Deidentify;
import org.openapitools.client.model.GooglePrivacyDlpV2PublishToPubSub;
import org.openapitools.client.model.GooglePrivacyDlpV2SaveFindings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A task to execute on the completion of a job. See https://cloud.google.com/sensitive-data-protection/docs/concepts-actions to learn more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Action {
  public static final String SERIALIZED_NAME_DEIDENTIFY = "deidentify";
  @SerializedName(SERIALIZED_NAME_DEIDENTIFY)
  private GooglePrivacyDlpV2Deidentify deidentify;

  public static final String SERIALIZED_NAME_JOB_NOTIFICATION_EMAILS = "jobNotificationEmails";
  @SerializedName(SERIALIZED_NAME_JOB_NOTIFICATION_EMAILS)
  private Object jobNotificationEmails;

  public static final String SERIALIZED_NAME_PUB_SUB = "pubSub";
  @SerializedName(SERIALIZED_NAME_PUB_SUB)
  private GooglePrivacyDlpV2PublishToPubSub pubSub;

  public static final String SERIALIZED_NAME_PUBLISH_FINDINGS_TO_CLOUD_DATA_CATALOG = "publishFindingsToCloudDataCatalog";
  @SerializedName(SERIALIZED_NAME_PUBLISH_FINDINGS_TO_CLOUD_DATA_CATALOG)
  private Object publishFindingsToCloudDataCatalog;

  public static final String SERIALIZED_NAME_PUBLISH_SUMMARY_TO_CSCC = "publishSummaryToCscc";
  @SerializedName(SERIALIZED_NAME_PUBLISH_SUMMARY_TO_CSCC)
  private Object publishSummaryToCscc;

  public static final String SERIALIZED_NAME_PUBLISH_TO_STACKDRIVER = "publishToStackdriver";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TO_STACKDRIVER)
  private Object publishToStackdriver;

  public static final String SERIALIZED_NAME_SAVE_FINDINGS = "saveFindings";
  @SerializedName(SERIALIZED_NAME_SAVE_FINDINGS)
  private GooglePrivacyDlpV2SaveFindings saveFindings;

  public GooglePrivacyDlpV2Action() {
  }

  public GooglePrivacyDlpV2Action deidentify(GooglePrivacyDlpV2Deidentify deidentify) {
    this.deidentify = deidentify;
    return this;
  }

  /**
   * Get deidentify
   * @return deidentify
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Deidentify getDeidentify() {
    return deidentify;
  }

  public void setDeidentify(GooglePrivacyDlpV2Deidentify deidentify) {
    this.deidentify = deidentify;
  }


  public GooglePrivacyDlpV2Action jobNotificationEmails(Object jobNotificationEmails) {
    this.jobNotificationEmails = jobNotificationEmails;
    return this;
  }

  /**
   * Sends an email when the job completes. The email goes to IAM project owners and technical [Essential Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
   * @return jobNotificationEmails
   */
  @javax.annotation.Nullable
  public Object getJobNotificationEmails() {
    return jobNotificationEmails;
  }

  public void setJobNotificationEmails(Object jobNotificationEmails) {
    this.jobNotificationEmails = jobNotificationEmails;
  }


  public GooglePrivacyDlpV2Action pubSub(GooglePrivacyDlpV2PublishToPubSub pubSub) {
    this.pubSub = pubSub;
    return this;
  }

  /**
   * Get pubSub
   * @return pubSub
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2PublishToPubSub getPubSub() {
    return pubSub;
  }

  public void setPubSub(GooglePrivacyDlpV2PublishToPubSub pubSub) {
    this.pubSub = pubSub;
  }


  public GooglePrivacyDlpV2Action publishFindingsToCloudDataCatalog(Object publishFindingsToCloudDataCatalog) {
    this.publishFindingsToCloudDataCatalog = publishFindingsToCloudDataCatalog;
    return this;
  }

  /**
   * Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates are applied to the resource that Cloud DLP scanned. Data Catalog tag templates are stored in the same project and region where the BigQuery table exists. For Cloud DLP to create and apply the tag template, the Cloud DLP service agent must have the &#x60;roles/datacatalog.tagTemplateOwner&#x60; permission on the project. The tag template contains fields summarizing the results of the DlpJob. Any field values previously written by another DlpJob are deleted. InfoType naming patterns are strictly enforced when using this feature. Findings are persisted in Data Catalog storage and are governed by service-specific policies for Data Catalog. For more information, see [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. This action is allowed only if all resources being scanned are BigQuery tables. Compatible with: Inspect
   * @return publishFindingsToCloudDataCatalog
   */
  @javax.annotation.Nullable
  public Object getPublishFindingsToCloudDataCatalog() {
    return publishFindingsToCloudDataCatalog;
  }

  public void setPublishFindingsToCloudDataCatalog(Object publishFindingsToCloudDataCatalog) {
    this.publishFindingsToCloudDataCatalog = publishFindingsToCloudDataCatalog;
  }


  public GooglePrivacyDlpV2Action publishSummaryToCscc(Object publishSummaryToCscc) {
    this.publishSummaryToCscc = publishSummaryToCscc;
    return this;
  }

  /**
   * Publish the result summary of a DlpJob to [Security Command Center](https://cloud.google.com/security-command-center). This action is available for only projects that belong to an organization. This action publishes the count of finding instances and their infoTypes. The summary of findings are persisted in Security Command Center and are governed by [service-specific policies for Security Command Center](https://cloud.google.com/terms/service-terms). Only a single instance of this action can be specified. Compatible with: Inspect
   * @return publishSummaryToCscc
   */
  @javax.annotation.Nullable
  public Object getPublishSummaryToCscc() {
    return publishSummaryToCscc;
  }

  public void setPublishSummaryToCscc(Object publishSummaryToCscc) {
    this.publishSummaryToCscc = publishSummaryToCscc;
  }


  public GooglePrivacyDlpV2Action publishToStackdriver(Object publishToStackdriver) {
    this.publishToStackdriver = publishToStackdriver;
    return this;
  }

  /**
   * Enable Stackdriver metric dlp.googleapis.com/finding_count. This will publish a metric to stack driver on each infotype requested and how many findings were found for it. CustomDetectors will be bucketed as &#39;Custom&#39; under the Stackdriver label &#39;info_type&#39;.
   * @return publishToStackdriver
   */
  @javax.annotation.Nullable
  public Object getPublishToStackdriver() {
    return publishToStackdriver;
  }

  public void setPublishToStackdriver(Object publishToStackdriver) {
    this.publishToStackdriver = publishToStackdriver;
  }


  public GooglePrivacyDlpV2Action saveFindings(GooglePrivacyDlpV2SaveFindings saveFindings) {
    this.saveFindings = saveFindings;
    return this;
  }

  /**
   * Get saveFindings
   * @return saveFindings
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2SaveFindings getSaveFindings() {
    return saveFindings;
  }

  public void setSaveFindings(GooglePrivacyDlpV2SaveFindings saveFindings) {
    this.saveFindings = saveFindings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Action googlePrivacyDlpV2Action = (GooglePrivacyDlpV2Action) o;
    return Objects.equals(this.deidentify, googlePrivacyDlpV2Action.deidentify) &&
        Objects.equals(this.jobNotificationEmails, googlePrivacyDlpV2Action.jobNotificationEmails) &&
        Objects.equals(this.pubSub, googlePrivacyDlpV2Action.pubSub) &&
        Objects.equals(this.publishFindingsToCloudDataCatalog, googlePrivacyDlpV2Action.publishFindingsToCloudDataCatalog) &&
        Objects.equals(this.publishSummaryToCscc, googlePrivacyDlpV2Action.publishSummaryToCscc) &&
        Objects.equals(this.publishToStackdriver, googlePrivacyDlpV2Action.publishToStackdriver) &&
        Objects.equals(this.saveFindings, googlePrivacyDlpV2Action.saveFindings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deidentify, jobNotificationEmails, pubSub, publishFindingsToCloudDataCatalog, publishSummaryToCscc, publishToStackdriver, saveFindings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Action {\n");
    sb.append("    deidentify: ").append(toIndentedString(deidentify)).append("\n");
    sb.append("    jobNotificationEmails: ").append(toIndentedString(jobNotificationEmails)).append("\n");
    sb.append("    pubSub: ").append(toIndentedString(pubSub)).append("\n");
    sb.append("    publishFindingsToCloudDataCatalog: ").append(toIndentedString(publishFindingsToCloudDataCatalog)).append("\n");
    sb.append("    publishSummaryToCscc: ").append(toIndentedString(publishSummaryToCscc)).append("\n");
    sb.append("    publishToStackdriver: ").append(toIndentedString(publishToStackdriver)).append("\n");
    sb.append("    saveFindings: ").append(toIndentedString(saveFindings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deidentify");
    openapiFields.add("jobNotificationEmails");
    openapiFields.add("pubSub");
    openapiFields.add("publishFindingsToCloudDataCatalog");
    openapiFields.add("publishSummaryToCscc");
    openapiFields.add("publishToStackdriver");
    openapiFields.add("saveFindings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Action is not found in the empty JSON string", GooglePrivacyDlpV2Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deidentify`
      if (jsonObj.get("deidentify") != null && !jsonObj.get("deidentify").isJsonNull()) {
        GooglePrivacyDlpV2Deidentify.validateJsonElement(jsonObj.get("deidentify"));
      }
      // validate the optional field `pubSub`
      if (jsonObj.get("pubSub") != null && !jsonObj.get("pubSub").isJsonNull()) {
        GooglePrivacyDlpV2PublishToPubSub.validateJsonElement(jsonObj.get("pubSub"));
      }
      // validate the optional field `saveFindings`
      if (jsonObj.get("saveFindings") != null && !jsonObj.get("saveFindings").isJsonNull()) {
        GooglePrivacyDlpV2SaveFindings.validateJsonElement(jsonObj.get("saveFindings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Action.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Action>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Action
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Action
   */
  public static GooglePrivacyDlpV2Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Action.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

