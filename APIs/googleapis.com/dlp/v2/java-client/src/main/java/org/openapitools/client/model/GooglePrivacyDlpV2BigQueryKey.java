/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2BigQueryTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Row key for identifying a record in BigQuery table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2BigQueryKey {
  public static final String SERIALIZED_NAME_ROW_NUMBER = "rowNumber";
  @SerializedName(SERIALIZED_NAME_ROW_NUMBER)
  private String rowNumber;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private GooglePrivacyDlpV2BigQueryTable tableReference;

  public GooglePrivacyDlpV2BigQueryKey() {
  }

  public GooglePrivacyDlpV2BigQueryKey rowNumber(String rowNumber) {
    this.rowNumber = rowNumber;
    return this;
  }

  /**
   * Row number inferred at the time the table was scanned. This value is nondeterministic, cannot be queried, and may be null for inspection jobs. To locate findings within a table, specify &#x60;inspect_job.storage_config.big_query_options.identifying_fields&#x60; in &#x60;CreateDlpJobRequest&#x60;.
   * @return rowNumber
   */
  @javax.annotation.Nullable
  public String getRowNumber() {
    return rowNumber;
  }

  public void setRowNumber(String rowNumber) {
    this.rowNumber = rowNumber;
  }


  public GooglePrivacyDlpV2BigQueryKey tableReference(GooglePrivacyDlpV2BigQueryTable tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2BigQueryTable getTableReference() {
    return tableReference;
  }

  public void setTableReference(GooglePrivacyDlpV2BigQueryTable tableReference) {
    this.tableReference = tableReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2BigQueryKey googlePrivacyDlpV2BigQueryKey = (GooglePrivacyDlpV2BigQueryKey) o;
    return Objects.equals(this.rowNumber, googlePrivacyDlpV2BigQueryKey.rowNumber) &&
        Objects.equals(this.tableReference, googlePrivacyDlpV2BigQueryKey.tableReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rowNumber, tableReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2BigQueryKey {\n");
    sb.append("    rowNumber: ").append(toIndentedString(rowNumber)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rowNumber");
    openapiFields.add("tableReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2BigQueryKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2BigQueryKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2BigQueryKey is not found in the empty JSON string", GooglePrivacyDlpV2BigQueryKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2BigQueryKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2BigQueryKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("rowNumber") != null && !jsonObj.get("rowNumber").isJsonNull()) && !jsonObj.get("rowNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowNumber").toString()));
      }
      // validate the optional field `tableReference`
      if (jsonObj.get("tableReference") != null && !jsonObj.get("tableReference").isJsonNull()) {
        GooglePrivacyDlpV2BigQueryTable.validateJsonElement(jsonObj.get("tableReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2BigQueryKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2BigQueryKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2BigQueryKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2BigQueryKey.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2BigQueryKey>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2BigQueryKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2BigQueryKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2BigQueryKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2BigQueryKey
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2BigQueryKey
   */
  public static GooglePrivacyDlpV2BigQueryKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2BigQueryKey.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2BigQueryKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

