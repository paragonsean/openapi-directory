/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Classification of infoTypes to organize them according to geographic location, industry, and data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2InfoTypeCategory {
  /**
   * The group of relevant businesses where this infoType is commonly used
   */
  @JsonAdapter(IndustryCategoryEnum.Adapter.class)
  public enum IndustryCategoryEnum {
    INDUSTRY_UNSPECIFIED("INDUSTRY_UNSPECIFIED"),
    
    FINANCE("FINANCE"),
    
    HEALTH("HEALTH"),
    
    TELECOMMUNICATIONS("TELECOMMUNICATIONS");

    private String value;

    IndustryCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndustryCategoryEnum fromValue(String value) {
      for (IndustryCategoryEnum b : IndustryCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndustryCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndustryCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndustryCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndustryCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndustryCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDUSTRY_CATEGORY = "industryCategory";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_CATEGORY)
  private IndustryCategoryEnum industryCategory;

  /**
   * The region or country that issued the ID or document represented by the infoType.
   */
  @JsonAdapter(LocationCategoryEnum.Adapter.class)
  public enum LocationCategoryEnum {
    LOCATION_UNSPECIFIED("LOCATION_UNSPECIFIED"),
    
    GLOBAL("GLOBAL"),
    
    ARGENTINA("ARGENTINA"),
    
    AUSTRALIA("AUSTRALIA"),
    
    BELGIUM("BELGIUM"),
    
    BRAZIL("BRAZIL"),
    
    CANADA("CANADA"),
    
    CHILE("CHILE"),
    
    CHINA("CHINA"),
    
    COLOMBIA("COLOMBIA"),
    
    CROATIA("CROATIA"),
    
    DENMARK("DENMARK"),
    
    FRANCE("FRANCE"),
    
    FINLAND("FINLAND"),
    
    GERMANY("GERMANY"),
    
    HONG_KONG("HONG_KONG"),
    
    INDIA("INDIA"),
    
    INDONESIA("INDONESIA"),
    
    IRELAND("IRELAND"),
    
    ISRAEL("ISRAEL"),
    
    ITALY("ITALY"),
    
    JAPAN("JAPAN"),
    
    KOREA("KOREA"),
    
    MEXICO("MEXICO"),
    
    THE_NETHERLANDS("THE_NETHERLANDS"),
    
    NEW_ZEALAND("NEW_ZEALAND"),
    
    NORWAY("NORWAY"),
    
    PARAGUAY("PARAGUAY"),
    
    PERU("PERU"),
    
    POLAND("POLAND"),
    
    PORTUGAL("PORTUGAL"),
    
    SINGAPORE("SINGAPORE"),
    
    SOUTH_AFRICA("SOUTH_AFRICA"),
    
    SPAIN("SPAIN"),
    
    SWEDEN("SWEDEN"),
    
    SWITZERLAND("SWITZERLAND"),
    
    TAIWAN("TAIWAN"),
    
    THAILAND("THAILAND"),
    
    TURKEY("TURKEY"),
    
    UNITED_KINGDOM("UNITED_KINGDOM"),
    
    UNITED_STATES("UNITED_STATES"),
    
    URUGUAY("URUGUAY"),
    
    VENEZUELA("VENEZUELA"),
    
    INTERNAL("INTERNAL");

    private String value;

    LocationCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationCategoryEnum fromValue(String value) {
      for (LocationCategoryEnum b : LocationCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_CATEGORY = "locationCategory";
  @SerializedName(SERIALIZED_NAME_LOCATION_CATEGORY)
  private LocationCategoryEnum locationCategory;

  /**
   * The class of identifiers where this infoType belongs
   */
  @JsonAdapter(TypeCategoryEnum.Adapter.class)
  public enum TypeCategoryEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    PII("PII"),
    
    SPII("SPII"),
    
    DEMOGRAPHIC("DEMOGRAPHIC"),
    
    CREDENTIAL("CREDENTIAL"),
    
    GOVERNMENT_ID("GOVERNMENT_ID"),
    
    DOCUMENT("DOCUMENT"),
    
    CONTEXTUAL_INFORMATION("CONTEXTUAL_INFORMATION");

    private String value;

    TypeCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeCategoryEnum fromValue(String value) {
      for (TypeCategoryEnum b : TypeCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_CATEGORY = "typeCategory";
  @SerializedName(SERIALIZED_NAME_TYPE_CATEGORY)
  private TypeCategoryEnum typeCategory;

  public GooglePrivacyDlpV2InfoTypeCategory() {
  }

  public GooglePrivacyDlpV2InfoTypeCategory industryCategory(IndustryCategoryEnum industryCategory) {
    this.industryCategory = industryCategory;
    return this;
  }

  /**
   * The group of relevant businesses where this infoType is commonly used
   * @return industryCategory
   */
  @javax.annotation.Nullable
  public IndustryCategoryEnum getIndustryCategory() {
    return industryCategory;
  }

  public void setIndustryCategory(IndustryCategoryEnum industryCategory) {
    this.industryCategory = industryCategory;
  }


  public GooglePrivacyDlpV2InfoTypeCategory locationCategory(LocationCategoryEnum locationCategory) {
    this.locationCategory = locationCategory;
    return this;
  }

  /**
   * The region or country that issued the ID or document represented by the infoType.
   * @return locationCategory
   */
  @javax.annotation.Nullable
  public LocationCategoryEnum getLocationCategory() {
    return locationCategory;
  }

  public void setLocationCategory(LocationCategoryEnum locationCategory) {
    this.locationCategory = locationCategory;
  }


  public GooglePrivacyDlpV2InfoTypeCategory typeCategory(TypeCategoryEnum typeCategory) {
    this.typeCategory = typeCategory;
    return this;
  }

  /**
   * The class of identifiers where this infoType belongs
   * @return typeCategory
   */
  @javax.annotation.Nullable
  public TypeCategoryEnum getTypeCategory() {
    return typeCategory;
  }

  public void setTypeCategory(TypeCategoryEnum typeCategory) {
    this.typeCategory = typeCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2InfoTypeCategory googlePrivacyDlpV2InfoTypeCategory = (GooglePrivacyDlpV2InfoTypeCategory) o;
    return Objects.equals(this.industryCategory, googlePrivacyDlpV2InfoTypeCategory.industryCategory) &&
        Objects.equals(this.locationCategory, googlePrivacyDlpV2InfoTypeCategory.locationCategory) &&
        Objects.equals(this.typeCategory, googlePrivacyDlpV2InfoTypeCategory.typeCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(industryCategory, locationCategory, typeCategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2InfoTypeCategory {\n");
    sb.append("    industryCategory: ").append(toIndentedString(industryCategory)).append("\n");
    sb.append("    locationCategory: ").append(toIndentedString(locationCategory)).append("\n");
    sb.append("    typeCategory: ").append(toIndentedString(typeCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("industryCategory");
    openapiFields.add("locationCategory");
    openapiFields.add("typeCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2InfoTypeCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2InfoTypeCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2InfoTypeCategory is not found in the empty JSON string", GooglePrivacyDlpV2InfoTypeCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2InfoTypeCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2InfoTypeCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("industryCategory") != null && !jsonObj.get("industryCategory").isJsonNull()) && !jsonObj.get("industryCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryCategory").toString()));
      }
      // validate the optional field `industryCategory`
      if (jsonObj.get("industryCategory") != null && !jsonObj.get("industryCategory").isJsonNull()) {
        IndustryCategoryEnum.validateJsonElement(jsonObj.get("industryCategory"));
      }
      if ((jsonObj.get("locationCategory") != null && !jsonObj.get("locationCategory").isJsonNull()) && !jsonObj.get("locationCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationCategory").toString()));
      }
      // validate the optional field `locationCategory`
      if (jsonObj.get("locationCategory") != null && !jsonObj.get("locationCategory").isJsonNull()) {
        LocationCategoryEnum.validateJsonElement(jsonObj.get("locationCategory"));
      }
      if ((jsonObj.get("typeCategory") != null && !jsonObj.get("typeCategory").isJsonNull()) && !jsonObj.get("typeCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCategory").toString()));
      }
      // validate the optional field `typeCategory`
      if (jsonObj.get("typeCategory") != null && !jsonObj.get("typeCategory").isJsonNull()) {
        TypeCategoryEnum.validateJsonElement(jsonObj.get("typeCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2InfoTypeCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2InfoTypeCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2InfoTypeCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2InfoTypeCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2InfoTypeCategory>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2InfoTypeCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2InfoTypeCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2InfoTypeCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2InfoTypeCategory
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2InfoTypeCategory
   */
  public static GooglePrivacyDlpV2InfoTypeCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2InfoTypeCategory.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2InfoTypeCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

