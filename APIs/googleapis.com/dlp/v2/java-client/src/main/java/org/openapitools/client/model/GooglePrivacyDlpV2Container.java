/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a container that may contain DLP findings. Examples of a container include a file, table, or database record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Container {
  public static final String SERIALIZED_NAME_FULL_PATH = "fullPath";
  @SerializedName(SERIALIZED_NAME_FULL_PATH)
  private String fullPath;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_RELATIVE_PATH = "relativePath";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PATH)
  private String relativePath;

  public static final String SERIALIZED_NAME_ROOT_PATH = "rootPath";
  @SerializedName(SERIALIZED_NAME_ROOT_PATH)
  private String rootPath;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GooglePrivacyDlpV2Container() {
  }

  public GooglePrivacyDlpV2Container fullPath(String fullPath) {
    this.fullPath = fullPath;
    return this;
  }

  /**
   * A string representation of the full container name. Examples: - BigQuery: &#39;Project:DataSetId.TableId&#39; - Cloud Storage: &#39;gs://Bucket/folders/filename.txt&#39;
   * @return fullPath
   */
  @javax.annotation.Nullable
  public String getFullPath() {
    return fullPath;
  }

  public void setFullPath(String fullPath) {
    this.fullPath = fullPath;
  }


  public GooglePrivacyDlpV2Container projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project where the finding was found. Can be different from the project that owns the finding.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public GooglePrivacyDlpV2Container relativePath(String relativePath) {
    this.relativePath = relativePath;
    return this;
  }

  /**
   * The rest of the path after the root. Examples: - For BigQuery table &#x60;project_id:dataset_id.table_id&#x60;, the relative path is &#x60;table_id&#x60; - For Cloud Storage file &#x60;gs://bucket/folder/filename.txt&#x60;, the relative path is &#x60;folder/filename.txt&#x60;
   * @return relativePath
   */
  @javax.annotation.Nullable
  public String getRelativePath() {
    return relativePath;
  }

  public void setRelativePath(String relativePath) {
    this.relativePath = relativePath;
  }


  public GooglePrivacyDlpV2Container rootPath(String rootPath) {
    this.rootPath = rootPath;
    return this;
  }

  /**
   * The root of the container. Examples: - For BigQuery table &#x60;project_id:dataset_id.table_id&#x60;, the root is &#x60;dataset_id&#x60; - For Cloud Storage file &#x60;gs://bucket/folder/filename.txt&#x60;, the root is &#x60;gs://bucket&#x60;
   * @return rootPath
   */
  @javax.annotation.Nullable
  public String getRootPath() {
    return rootPath;
  }

  public void setRootPath(String rootPath) {
    this.rootPath = rootPath;
  }


  public GooglePrivacyDlpV2Container type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Container type, for example BigQuery or Cloud Storage.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public GooglePrivacyDlpV2Container updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Findings container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn&#39;t populated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public GooglePrivacyDlpV2Container version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Findings container version, if available (\&quot;generation\&quot; for Cloud Storage).
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Container googlePrivacyDlpV2Container = (GooglePrivacyDlpV2Container) o;
    return Objects.equals(this.fullPath, googlePrivacyDlpV2Container.fullPath) &&
        Objects.equals(this.projectId, googlePrivacyDlpV2Container.projectId) &&
        Objects.equals(this.relativePath, googlePrivacyDlpV2Container.relativePath) &&
        Objects.equals(this.rootPath, googlePrivacyDlpV2Container.rootPath) &&
        Objects.equals(this.type, googlePrivacyDlpV2Container.type) &&
        Objects.equals(this.updateTime, googlePrivacyDlpV2Container.updateTime) &&
        Objects.equals(this.version, googlePrivacyDlpV2Container.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullPath, projectId, relativePath, rootPath, type, updateTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Container {\n");
    sb.append("    fullPath: ").append(toIndentedString(fullPath)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("    rootPath: ").append(toIndentedString(rootPath)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullPath");
    openapiFields.add("projectId");
    openapiFields.add("relativePath");
    openapiFields.add("rootPath");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Container
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Container.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Container is not found in the empty JSON string", GooglePrivacyDlpV2Container.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Container.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Container` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fullPath") != null && !jsonObj.get("fullPath").isJsonNull()) && !jsonObj.get("fullPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPath").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("relativePath") != null && !jsonObj.get("relativePath").isJsonNull()) && !jsonObj.get("relativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePath").toString()));
      }
      if ((jsonObj.get("rootPath") != null && !jsonObj.get("rootPath").isJsonNull()) && !jsonObj.get("rootPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootPath").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Container.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Container' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Container> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Container.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Container>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Container value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Container read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Container given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Container
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Container
   */
  public static GooglePrivacyDlpV2Container fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Container.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Container to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

