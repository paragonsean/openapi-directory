/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2ActionDetails;
import org.openapitools.client.model.GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails;
import org.openapitools.client.model.GooglePrivacyDlpV2Error;
import org.openapitools.client.model.GooglePrivacyDlpV2InspectDataSourceDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Combines all of the information about a DLP job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DlpJob {
  public static final String SERIALIZED_NAME_ACTION_DETAILS = "actionDetails";
  @SerializedName(SERIALIZED_NAME_ACTION_DETAILS)
  private List<GooglePrivacyDlpV2ActionDetails> actionDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<GooglePrivacyDlpV2Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSPECT_DETAILS = "inspectDetails";
  @SerializedName(SERIALIZED_NAME_INSPECT_DETAILS)
  private GooglePrivacyDlpV2InspectDataSourceDetails inspectDetails;

  public static final String SERIALIZED_NAME_JOB_TRIGGER_NAME = "jobTriggerName";
  @SerializedName(SERIALIZED_NAME_JOB_TRIGGER_NAME)
  private String jobTriggerName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RISK_DETAILS = "riskDetails";
  @SerializedName(SERIALIZED_NAME_RISK_DETAILS)
  private GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails riskDetails;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * State of a job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    JOB_STATE_UNSPECIFIED("JOB_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE"),
    
    CANCELED("CANCELED"),
    
    FAILED("FAILED"),
    
    ACTIVE("ACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The type of job.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DLP_JOB_TYPE_UNSPECIFIED("DLP_JOB_TYPE_UNSPECIFIED"),
    
    INSPECT_JOB("INSPECT_JOB"),
    
    RISK_ANALYSIS_JOB("RISK_ANALYSIS_JOB");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GooglePrivacyDlpV2DlpJob() {
  }

  public GooglePrivacyDlpV2DlpJob actionDetails(List<GooglePrivacyDlpV2ActionDetails> actionDetails) {
    this.actionDetails = actionDetails;
    return this;
  }

  public GooglePrivacyDlpV2DlpJob addActionDetailsItem(GooglePrivacyDlpV2ActionDetails actionDetailsItem) {
    if (this.actionDetails == null) {
      this.actionDetails = new ArrayList<>();
    }
    this.actionDetails.add(actionDetailsItem);
    return this;
  }

  /**
   * Events that should occur after the job has completed.
   * @return actionDetails
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2ActionDetails> getActionDetails() {
    return actionDetails;
  }

  public void setActionDetails(List<GooglePrivacyDlpV2ActionDetails> actionDetails) {
    this.actionDetails = actionDetails;
  }


  public GooglePrivacyDlpV2DlpJob createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Time when the job was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GooglePrivacyDlpV2DlpJob endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Time when the job finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public GooglePrivacyDlpV2DlpJob errors(List<GooglePrivacyDlpV2Error> errors) {
    this.errors = errors;
    return this;
  }

  public GooglePrivacyDlpV2DlpJob addErrorsItem(GooglePrivacyDlpV2Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * A stream of errors encountered running the job.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Error> getErrors() {
    return errors;
  }

  public void setErrors(List<GooglePrivacyDlpV2Error> errors) {
    this.errors = errors;
  }


  public GooglePrivacyDlpV2DlpJob inspectDetails(GooglePrivacyDlpV2InspectDataSourceDetails inspectDetails) {
    this.inspectDetails = inspectDetails;
    return this;
  }

  /**
   * Get inspectDetails
   * @return inspectDetails
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2InspectDataSourceDetails getInspectDetails() {
    return inspectDetails;
  }

  public void setInspectDetails(GooglePrivacyDlpV2InspectDataSourceDetails inspectDetails) {
    this.inspectDetails = inspectDetails;
  }


  public GooglePrivacyDlpV2DlpJob jobTriggerName(String jobTriggerName) {
    this.jobTriggerName = jobTriggerName;
    return this;
  }

  /**
   * If created by a job trigger, the resource name of the trigger that instantiated the job.
   * @return jobTriggerName
   */
  @javax.annotation.Nullable
  public String getJobTriggerName() {
    return jobTriggerName;
  }

  public void setJobTriggerName(String jobTriggerName) {
    this.jobTriggerName = jobTriggerName;
  }


  public GooglePrivacyDlpV2DlpJob lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Time when the job was last modified by the system.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public GooglePrivacyDlpV2DlpJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The server-assigned name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GooglePrivacyDlpV2DlpJob riskDetails(GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails riskDetails) {
    this.riskDetails = riskDetails;
    return this;
  }

  /**
   * Get riskDetails
   * @return riskDetails
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails getRiskDetails() {
    return riskDetails;
  }

  public void setRiskDetails(GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails riskDetails) {
    this.riskDetails = riskDetails;
  }


  public GooglePrivacyDlpV2DlpJob startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time when the job started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public GooglePrivacyDlpV2DlpJob state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of a job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GooglePrivacyDlpV2DlpJob type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of job.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DlpJob googlePrivacyDlpV2DlpJob = (GooglePrivacyDlpV2DlpJob) o;
    return Objects.equals(this.actionDetails, googlePrivacyDlpV2DlpJob.actionDetails) &&
        Objects.equals(this.createTime, googlePrivacyDlpV2DlpJob.createTime) &&
        Objects.equals(this.endTime, googlePrivacyDlpV2DlpJob.endTime) &&
        Objects.equals(this.errors, googlePrivacyDlpV2DlpJob.errors) &&
        Objects.equals(this.inspectDetails, googlePrivacyDlpV2DlpJob.inspectDetails) &&
        Objects.equals(this.jobTriggerName, googlePrivacyDlpV2DlpJob.jobTriggerName) &&
        Objects.equals(this.lastModified, googlePrivacyDlpV2DlpJob.lastModified) &&
        Objects.equals(this.name, googlePrivacyDlpV2DlpJob.name) &&
        Objects.equals(this.riskDetails, googlePrivacyDlpV2DlpJob.riskDetails) &&
        Objects.equals(this.startTime, googlePrivacyDlpV2DlpJob.startTime) &&
        Objects.equals(this.state, googlePrivacyDlpV2DlpJob.state) &&
        Objects.equals(this.type, googlePrivacyDlpV2DlpJob.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionDetails, createTime, endTime, errors, inspectDetails, jobTriggerName, lastModified, name, riskDetails, startTime, state, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DlpJob {\n");
    sb.append("    actionDetails: ").append(toIndentedString(actionDetails)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    inspectDetails: ").append(toIndentedString(inspectDetails)).append("\n");
    sb.append("    jobTriggerName: ").append(toIndentedString(jobTriggerName)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    riskDetails: ").append(toIndentedString(riskDetails)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionDetails");
    openapiFields.add("createTime");
    openapiFields.add("endTime");
    openapiFields.add("errors");
    openapiFields.add("inspectDetails");
    openapiFields.add("jobTriggerName");
    openapiFields.add("lastModified");
    openapiFields.add("name");
    openapiFields.add("riskDetails");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DlpJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DlpJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DlpJob is not found in the empty JSON string", GooglePrivacyDlpV2DlpJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DlpJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DlpJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actionDetails") != null && !jsonObj.get("actionDetails").isJsonNull()) {
        JsonArray jsonArrayactionDetails = jsonObj.getAsJsonArray("actionDetails");
        if (jsonArrayactionDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actionDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actionDetails` to be an array in the JSON string but got `%s`", jsonObj.get("actionDetails").toString()));
          }

          // validate the optional field `actionDetails` (array)
          for (int i = 0; i < jsonArrayactionDetails.size(); i++) {
            GooglePrivacyDlpV2ActionDetails.validateJsonElement(jsonArrayactionDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            GooglePrivacyDlpV2Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `inspectDetails`
      if (jsonObj.get("inspectDetails") != null && !jsonObj.get("inspectDetails").isJsonNull()) {
        GooglePrivacyDlpV2InspectDataSourceDetails.validateJsonElement(jsonObj.get("inspectDetails"));
      }
      if ((jsonObj.get("jobTriggerName") != null && !jsonObj.get("jobTriggerName").isJsonNull()) && !jsonObj.get("jobTriggerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTriggerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTriggerName").toString()));
      }
      if ((jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) && !jsonObj.get("lastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModified").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `riskDetails`
      if (jsonObj.get("riskDetails") != null && !jsonObj.get("riskDetails").isJsonNull()) {
        GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails.validateJsonElement(jsonObj.get("riskDetails"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DlpJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DlpJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DlpJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DlpJob.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DlpJob>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DlpJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DlpJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DlpJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DlpJob
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DlpJob
   */
  public static GooglePrivacyDlpV2DlpJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DlpJob.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DlpJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

