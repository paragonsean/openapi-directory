/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2CloudStoragePath;
import org.openapitools.client.model.GooglePrivacyDlpV2WordList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase \&quot;Sam Johnson\&quot; will match all three phrases \&quot;sam johnson\&quot;, \&quot;Sam, Johnson\&quot;, and \&quot;Sam (Johnson)\&quot;. Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word \&quot;jen\&quot; will match the first three letters of the text \&quot;jen123\&quot; but will return no matches for \&quot;jennifer\&quot;. Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/sensitive-data-protection/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using &#x60;LargeCustomDictionaryConfig&#x60; in the &#x60;StoredInfoType&#x60; API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2Dictionary {
  public static final String SERIALIZED_NAME_CLOUD_STORAGE_PATH = "cloudStoragePath";
  @SerializedName(SERIALIZED_NAME_CLOUD_STORAGE_PATH)
  private GooglePrivacyDlpV2CloudStoragePath cloudStoragePath;

  public static final String SERIALIZED_NAME_WORD_LIST = "wordList";
  @SerializedName(SERIALIZED_NAME_WORD_LIST)
  private GooglePrivacyDlpV2WordList wordList;

  public GooglePrivacyDlpV2Dictionary() {
  }

  public GooglePrivacyDlpV2Dictionary cloudStoragePath(GooglePrivacyDlpV2CloudStoragePath cloudStoragePath) {
    this.cloudStoragePath = cloudStoragePath;
    return this;
  }

  /**
   * Get cloudStoragePath
   * @return cloudStoragePath
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2CloudStoragePath getCloudStoragePath() {
    return cloudStoragePath;
  }

  public void setCloudStoragePath(GooglePrivacyDlpV2CloudStoragePath cloudStoragePath) {
    this.cloudStoragePath = cloudStoragePath;
  }


  public GooglePrivacyDlpV2Dictionary wordList(GooglePrivacyDlpV2WordList wordList) {
    this.wordList = wordList;
    return this;
  }

  /**
   * Get wordList
   * @return wordList
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2WordList getWordList() {
    return wordList;
  }

  public void setWordList(GooglePrivacyDlpV2WordList wordList) {
    this.wordList = wordList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2Dictionary googlePrivacyDlpV2Dictionary = (GooglePrivacyDlpV2Dictionary) o;
    return Objects.equals(this.cloudStoragePath, googlePrivacyDlpV2Dictionary.cloudStoragePath) &&
        Objects.equals(this.wordList, googlePrivacyDlpV2Dictionary.wordList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudStoragePath, wordList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2Dictionary {\n");
    sb.append("    cloudStoragePath: ").append(toIndentedString(cloudStoragePath)).append("\n");
    sb.append("    wordList: ").append(toIndentedString(wordList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudStoragePath");
    openapiFields.add("wordList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2Dictionary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2Dictionary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2Dictionary is not found in the empty JSON string", GooglePrivacyDlpV2Dictionary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2Dictionary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2Dictionary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudStoragePath`
      if (jsonObj.get("cloudStoragePath") != null && !jsonObj.get("cloudStoragePath").isJsonNull()) {
        GooglePrivacyDlpV2CloudStoragePath.validateJsonElement(jsonObj.get("cloudStoragePath"));
      }
      // validate the optional field `wordList`
      if (jsonObj.get("wordList") != null && !jsonObj.get("wordList").isJsonNull()) {
        GooglePrivacyDlpV2WordList.validateJsonElement(jsonObj.get("wordList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2Dictionary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2Dictionary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2Dictionary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2Dictionary.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2Dictionary>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2Dictionary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2Dictionary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2Dictionary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2Dictionary
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2Dictionary
   */
  public static GooglePrivacyDlpV2Dictionary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2Dictionary.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2Dictionary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

