/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2TransformationDescription;
import org.openapitools.client.model.GooglePrivacyDlpV2TransformationLocation;
import org.openapitools.client.model.GooglePrivacyDlpV2TransformationResultStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about a single transformation. This object contains a description of the transformation, information about whether the transformation was successfully applied, and the precise location where the transformation occurred. These details are stored in a user-specified BigQuery table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2TransformationDetails {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private GooglePrivacyDlpV2TransformationResultStatus statusDetails;

  public static final String SERIALIZED_NAME_TRANSFORMATION = "transformation";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION)
  private List<GooglePrivacyDlpV2TransformationDescription> transformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFORMATION_LOCATION = "transformationLocation";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION_LOCATION)
  private GooglePrivacyDlpV2TransformationLocation transformationLocation;

  public static final String SERIALIZED_NAME_TRANSFORMED_BYTES = "transformedBytes";
  @SerializedName(SERIALIZED_NAME_TRANSFORMED_BYTES)
  private String transformedBytes;

  public GooglePrivacyDlpV2TransformationDetails() {
  }

  public GooglePrivacyDlpV2TransformationDetails containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * The top level name of the container where the transformation is located (this will be the source file name or table name).
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public GooglePrivacyDlpV2TransformationDetails resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * The name of the job that completed the transformation.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public GooglePrivacyDlpV2TransformationDetails statusDetails(GooglePrivacyDlpV2TransformationResultStatus statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Get statusDetails
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TransformationResultStatus getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(GooglePrivacyDlpV2TransformationResultStatus statusDetails) {
    this.statusDetails = statusDetails;
  }


  public GooglePrivacyDlpV2TransformationDetails transformation(List<GooglePrivacyDlpV2TransformationDescription> transformation) {
    this.transformation = transformation;
    return this;
  }

  public GooglePrivacyDlpV2TransformationDetails addTransformationItem(GooglePrivacyDlpV2TransformationDescription transformationItem) {
    if (this.transformation == null) {
      this.transformation = new ArrayList<>();
    }
    this.transformation.add(transformationItem);
    return this;
  }

  /**
   * Description of transformation. This would only contain more than one element if there were multiple matching transformations and which one to apply was ambiguous. Not set for states that contain no transformation, currently only state that contains no transformation is TransformationResultStateType.METADATA_UNRETRIEVABLE.
   * @return transformation
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2TransformationDescription> getTransformation() {
    return transformation;
  }

  public void setTransformation(List<GooglePrivacyDlpV2TransformationDescription> transformation) {
    this.transformation = transformation;
  }


  public GooglePrivacyDlpV2TransformationDetails transformationLocation(GooglePrivacyDlpV2TransformationLocation transformationLocation) {
    this.transformationLocation = transformationLocation;
    return this;
  }

  /**
   * Get transformationLocation
   * @return transformationLocation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TransformationLocation getTransformationLocation() {
    return transformationLocation;
  }

  public void setTransformationLocation(GooglePrivacyDlpV2TransformationLocation transformationLocation) {
    this.transformationLocation = transformationLocation;
  }


  public GooglePrivacyDlpV2TransformationDetails transformedBytes(String transformedBytes) {
    this.transformedBytes = transformedBytes;
    return this;
  }

  /**
   * The number of bytes that were transformed. If transformation was unsuccessful or did not take place because there was no content to transform, this will be zero.
   * @return transformedBytes
   */
  @javax.annotation.Nullable
  public String getTransformedBytes() {
    return transformedBytes;
  }

  public void setTransformedBytes(String transformedBytes) {
    this.transformedBytes = transformedBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2TransformationDetails googlePrivacyDlpV2TransformationDetails = (GooglePrivacyDlpV2TransformationDetails) o;
    return Objects.equals(this.containerName, googlePrivacyDlpV2TransformationDetails.containerName) &&
        Objects.equals(this.resourceName, googlePrivacyDlpV2TransformationDetails.resourceName) &&
        Objects.equals(this.statusDetails, googlePrivacyDlpV2TransformationDetails.statusDetails) &&
        Objects.equals(this.transformation, googlePrivacyDlpV2TransformationDetails.transformation) &&
        Objects.equals(this.transformationLocation, googlePrivacyDlpV2TransformationDetails.transformationLocation) &&
        Objects.equals(this.transformedBytes, googlePrivacyDlpV2TransformationDetails.transformedBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, resourceName, statusDetails, transformation, transformationLocation, transformedBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2TransformationDetails {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    transformationLocation: ").append(toIndentedString(transformationLocation)).append("\n");
    sb.append("    transformedBytes: ").append(toIndentedString(transformedBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("resourceName");
    openapiFields.add("statusDetails");
    openapiFields.add("transformation");
    openapiFields.add("transformationLocation");
    openapiFields.add("transformedBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2TransformationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2TransformationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2TransformationDetails is not found in the empty JSON string", GooglePrivacyDlpV2TransformationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2TransformationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2TransformationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      // validate the optional field `statusDetails`
      if (jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) {
        GooglePrivacyDlpV2TransformationResultStatus.validateJsonElement(jsonObj.get("statusDetails"));
      }
      if (jsonObj.get("transformation") != null && !jsonObj.get("transformation").isJsonNull()) {
        JsonArray jsonArraytransformation = jsonObj.getAsJsonArray("transformation");
        if (jsonArraytransformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transformation` to be an array in the JSON string but got `%s`", jsonObj.get("transformation").toString()));
          }

          // validate the optional field `transformation` (array)
          for (int i = 0; i < jsonArraytransformation.size(); i++) {
            GooglePrivacyDlpV2TransformationDescription.validateJsonElement(jsonArraytransformation.get(i));
          };
        }
      }
      // validate the optional field `transformationLocation`
      if (jsonObj.get("transformationLocation") != null && !jsonObj.get("transformationLocation").isJsonNull()) {
        GooglePrivacyDlpV2TransformationLocation.validateJsonElement(jsonObj.get("transformationLocation"));
      }
      if ((jsonObj.get("transformedBytes") != null && !jsonObj.get("transformedBytes").isJsonNull()) && !jsonObj.get("transformedBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformedBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transformedBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2TransformationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2TransformationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2TransformationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2TransformationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2TransformationDetails>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2TransformationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2TransformationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2TransformationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2TransformationDetails
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2TransformationDetails
   */
  public static GooglePrivacyDlpV2TransformationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2TransformationDetails.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2TransformationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

