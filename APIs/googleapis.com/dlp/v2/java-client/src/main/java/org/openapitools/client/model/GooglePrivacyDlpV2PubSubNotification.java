/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2DataProfilePubSubCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of &#x60;DataProfilePubSubMessage&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2PubSubNotification {
  /**
   * How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
   */
  @JsonAdapter(DetailOfMessageEnum.Adapter.class)
  public enum DetailOfMessageEnum {
    DETAIL_LEVEL_UNSPECIFIED("DETAIL_LEVEL_UNSPECIFIED"),
    
    TABLE_PROFILE("TABLE_PROFILE"),
    
    RESOURCE_NAME("RESOURCE_NAME");

    private String value;

    DetailOfMessageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetailOfMessageEnum fromValue(String value) {
      for (DetailOfMessageEnum b : DetailOfMessageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetailOfMessageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetailOfMessageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetailOfMessageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetailOfMessageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetailOfMessageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETAIL_OF_MESSAGE = "detailOfMessage";
  @SerializedName(SERIALIZED_NAME_DETAIL_OF_MESSAGE)
  private DetailOfMessageEnum detailOfMessage;

  /**
   * The type of event that triggers a Pub/Sub. At most one &#x60;PubSubNotification&#x60; per EventType is permitted.
   */
  @JsonAdapter(EventEnum.Adapter.class)
  public enum EventEnum {
    EVENT_TYPE_UNSPECIFIED("EVENT_TYPE_UNSPECIFIED"),
    
    NEW_PROFILE("NEW_PROFILE"),
    
    CHANGED_PROFILE("CHANGED_PROFILE"),
    
    SCORE_INCREASED("SCORE_INCREASED"),
    
    ERROR_CHANGED("ERROR_CHANGED");

    private String value;

    EventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventEnum fromValue(String value) {
      for (EventEnum b : EventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private EventEnum event;

  public static final String SERIALIZED_NAME_PUBSUB_CONDITION = "pubsubCondition";
  @SerializedName(SERIALIZED_NAME_PUBSUB_CONDITION)
  private GooglePrivacyDlpV2DataProfilePubSubCondition pubsubCondition;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public GooglePrivacyDlpV2PubSubNotification() {
  }

  public GooglePrivacyDlpV2PubSubNotification detailOfMessage(DetailOfMessageEnum detailOfMessage) {
    this.detailOfMessage = detailOfMessage;
    return this;
  }

  /**
   * How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).
   * @return detailOfMessage
   */
  @javax.annotation.Nullable
  public DetailOfMessageEnum getDetailOfMessage() {
    return detailOfMessage;
  }

  public void setDetailOfMessage(DetailOfMessageEnum detailOfMessage) {
    this.detailOfMessage = detailOfMessage;
  }


  public GooglePrivacyDlpV2PubSubNotification event(EventEnum event) {
    this.event = event;
    return this;
  }

  /**
   * The type of event that triggers a Pub/Sub. At most one &#x60;PubSubNotification&#x60; per EventType is permitted.
   * @return event
   */
  @javax.annotation.Nullable
  public EventEnum getEvent() {
    return event;
  }

  public void setEvent(EventEnum event) {
    this.event = event;
  }


  public GooglePrivacyDlpV2PubSubNotification pubsubCondition(GooglePrivacyDlpV2DataProfilePubSubCondition pubsubCondition) {
    this.pubsubCondition = pubsubCondition;
    return this;
  }

  /**
   * Get pubsubCondition
   * @return pubsubCondition
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2DataProfilePubSubCondition getPubsubCondition() {
    return pubsubCondition;
  }

  public void setPubsubCondition(GooglePrivacyDlpV2DataProfilePubSubCondition pubsubCondition) {
    this.pubsubCondition = pubsubCondition;
  }


  public GooglePrivacyDlpV2PubSubNotification topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2PubSubNotification googlePrivacyDlpV2PubSubNotification = (GooglePrivacyDlpV2PubSubNotification) o;
    return Objects.equals(this.detailOfMessage, googlePrivacyDlpV2PubSubNotification.detailOfMessage) &&
        Objects.equals(this.event, googlePrivacyDlpV2PubSubNotification.event) &&
        Objects.equals(this.pubsubCondition, googlePrivacyDlpV2PubSubNotification.pubsubCondition) &&
        Objects.equals(this.topic, googlePrivacyDlpV2PubSubNotification.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detailOfMessage, event, pubsubCondition, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2PubSubNotification {\n");
    sb.append("    detailOfMessage: ").append(toIndentedString(detailOfMessage)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    pubsubCondition: ").append(toIndentedString(pubsubCondition)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detailOfMessage");
    openapiFields.add("event");
    openapiFields.add("pubsubCondition");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2PubSubNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2PubSubNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2PubSubNotification is not found in the empty JSON string", GooglePrivacyDlpV2PubSubNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2PubSubNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2PubSubNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detailOfMessage") != null && !jsonObj.get("detailOfMessage").isJsonNull()) && !jsonObj.get("detailOfMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailOfMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailOfMessage").toString()));
      }
      // validate the optional field `detailOfMessage`
      if (jsonObj.get("detailOfMessage") != null && !jsonObj.get("detailOfMessage").isJsonNull()) {
        DetailOfMessageEnum.validateJsonElement(jsonObj.get("detailOfMessage"));
      }
      if ((jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) && !jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // validate the optional field `event`
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull()) {
        EventEnum.validateJsonElement(jsonObj.get("event"));
      }
      // validate the optional field `pubsubCondition`
      if (jsonObj.get("pubsubCondition") != null && !jsonObj.get("pubsubCondition").isJsonNull()) {
        GooglePrivacyDlpV2DataProfilePubSubCondition.validateJsonElement(jsonObj.get("pubsubCondition"));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2PubSubNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2PubSubNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2PubSubNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2PubSubNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2PubSubNotification>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2PubSubNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2PubSubNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2PubSubNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2PubSubNotification
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2PubSubNotification
   */
  public static GooglePrivacyDlpV2PubSubNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2PubSubNotification.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2PubSubNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

