/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2KmsWrappedCryptoKey;
import org.openapitools.client.model.GooglePrivacyDlpV2TransientCryptoKey;
import org.openapitools.client.model.GooglePrivacyDlpV2UnwrappedCryptoKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CryptoKey {
  public static final String SERIALIZED_NAME_KMS_WRAPPED = "kmsWrapped";
  @SerializedName(SERIALIZED_NAME_KMS_WRAPPED)
  private GooglePrivacyDlpV2KmsWrappedCryptoKey kmsWrapped;

  public static final String SERIALIZED_NAME_TRANSIENT = "transient";
  @SerializedName(SERIALIZED_NAME_TRANSIENT)
  private GooglePrivacyDlpV2TransientCryptoKey _transient;

  public static final String SERIALIZED_NAME_UNWRAPPED = "unwrapped";
  @SerializedName(SERIALIZED_NAME_UNWRAPPED)
  private GooglePrivacyDlpV2UnwrappedCryptoKey unwrapped;

  public GooglePrivacyDlpV2CryptoKey() {
  }

  public GooglePrivacyDlpV2CryptoKey kmsWrapped(GooglePrivacyDlpV2KmsWrappedCryptoKey kmsWrapped) {
    this.kmsWrapped = kmsWrapped;
    return this;
  }

  /**
   * Get kmsWrapped
   * @return kmsWrapped
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2KmsWrappedCryptoKey getKmsWrapped() {
    return kmsWrapped;
  }

  public void setKmsWrapped(GooglePrivacyDlpV2KmsWrappedCryptoKey kmsWrapped) {
    this.kmsWrapped = kmsWrapped;
  }


  public GooglePrivacyDlpV2CryptoKey _transient(GooglePrivacyDlpV2TransientCryptoKey _transient) {
    this._transient = _transient;
    return this;
  }

  /**
   * Get _transient
   * @return _transient
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TransientCryptoKey getTransient() {
    return _transient;
  }

  public void setTransient(GooglePrivacyDlpV2TransientCryptoKey _transient) {
    this._transient = _transient;
  }


  public GooglePrivacyDlpV2CryptoKey unwrapped(GooglePrivacyDlpV2UnwrappedCryptoKey unwrapped) {
    this.unwrapped = unwrapped;
    return this;
  }

  /**
   * Get unwrapped
   * @return unwrapped
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2UnwrappedCryptoKey getUnwrapped() {
    return unwrapped;
  }

  public void setUnwrapped(GooglePrivacyDlpV2UnwrappedCryptoKey unwrapped) {
    this.unwrapped = unwrapped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CryptoKey googlePrivacyDlpV2CryptoKey = (GooglePrivacyDlpV2CryptoKey) o;
    return Objects.equals(this.kmsWrapped, googlePrivacyDlpV2CryptoKey.kmsWrapped) &&
        Objects.equals(this._transient, googlePrivacyDlpV2CryptoKey._transient) &&
        Objects.equals(this.unwrapped, googlePrivacyDlpV2CryptoKey.unwrapped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kmsWrapped, _transient, unwrapped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CryptoKey {\n");
    sb.append("    kmsWrapped: ").append(toIndentedString(kmsWrapped)).append("\n");
    sb.append("    _transient: ").append(toIndentedString(_transient)).append("\n");
    sb.append("    unwrapped: ").append(toIndentedString(unwrapped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kmsWrapped");
    openapiFields.add("transient");
    openapiFields.add("unwrapped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CryptoKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CryptoKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CryptoKey is not found in the empty JSON string", GooglePrivacyDlpV2CryptoKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CryptoKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CryptoKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `kmsWrapped`
      if (jsonObj.get("kmsWrapped") != null && !jsonObj.get("kmsWrapped").isJsonNull()) {
        GooglePrivacyDlpV2KmsWrappedCryptoKey.validateJsonElement(jsonObj.get("kmsWrapped"));
      }
      // validate the optional field `transient`
      if (jsonObj.get("transient") != null && !jsonObj.get("transient").isJsonNull()) {
        GooglePrivacyDlpV2TransientCryptoKey.validateJsonElement(jsonObj.get("transient"));
      }
      // validate the optional field `unwrapped`
      if (jsonObj.get("unwrapped") != null && !jsonObj.get("unwrapped").isJsonNull()) {
        GooglePrivacyDlpV2UnwrappedCryptoKey.validateJsonElement(jsonObj.get("unwrapped"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CryptoKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CryptoKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CryptoKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CryptoKey.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CryptoKey>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CryptoKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CryptoKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CryptoKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CryptoKey
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CryptoKey
   */
  public static GooglePrivacyDlpV2CryptoKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CryptoKey.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CryptoKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

