/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2Error;
import org.openapitools.client.model.GooglePrivacyDlpV2InspectJobConfig;
import org.openapitools.client.model.GooglePrivacyDlpV2Trigger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a configuration to make dlp api calls on a repeating basis. See https://cloud.google.com/sensitive-data-protection/docs/concepts-job-triggers to learn more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2JobTrigger {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<GooglePrivacyDlpV2Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSPECT_JOB = "inspectJob";
  @SerializedName(SERIALIZED_NAME_INSPECT_JOB)
  private GooglePrivacyDlpV2InspectJobConfig inspectJob;

  public static final String SERIALIZED_NAME_LAST_RUN_TIME = "lastRunTime";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_TIME)
  private String lastRunTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Required. A status for this trigger.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    PAUSED("PAUSED"),
    
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private List<GooglePrivacyDlpV2Trigger> triggers = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GooglePrivacyDlpV2JobTrigger() {
  }

  public GooglePrivacyDlpV2JobTrigger(
     String createTime, 
     List<GooglePrivacyDlpV2Error> errors, 
     String lastRunTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.errors = errors;
    this.lastRunTime = lastRunTime;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The creation timestamp of a triggeredJob.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GooglePrivacyDlpV2JobTrigger description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User provided description (max 256 chars)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GooglePrivacyDlpV2JobTrigger displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name (max 100 chars)
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Error> getErrors() {
    return errors;
  }



  public GooglePrivacyDlpV2JobTrigger inspectJob(GooglePrivacyDlpV2InspectJobConfig inspectJob) {
    this.inspectJob = inspectJob;
    return this;
  }

  /**
   * Get inspectJob
   * @return inspectJob
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2InspectJobConfig getInspectJob() {
    return inspectJob;
  }

  public void setInspectJob(GooglePrivacyDlpV2InspectJobConfig inspectJob) {
    this.inspectJob = inspectJob;
  }


  /**
   * Output only. The timestamp of the last time this trigger executed.
   * @return lastRunTime
   */
  @javax.annotation.Nullable
  public String getLastRunTime() {
    return lastRunTime;
  }



  public GooglePrivacyDlpV2JobTrigger name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique resource name for the triggeredJob, assigned by the service when the triggeredJob is created, for example &#x60;projects/dlp-test-project/jobTriggers/53234423&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GooglePrivacyDlpV2JobTrigger status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Required. A status for this trigger.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GooglePrivacyDlpV2JobTrigger triggers(List<GooglePrivacyDlpV2Trigger> triggers) {
    this.triggers = triggers;
    return this;
  }

  public GooglePrivacyDlpV2JobTrigger addTriggersItem(GooglePrivacyDlpV2Trigger triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * A list of triggers which will be OR&#39;ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object.
   * @return triggers
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Trigger> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<GooglePrivacyDlpV2Trigger> triggers) {
    this.triggers = triggers;
  }


  /**
   * Output only. The last update timestamp of a triggeredJob.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2JobTrigger googlePrivacyDlpV2JobTrigger = (GooglePrivacyDlpV2JobTrigger) o;
    return Objects.equals(this.createTime, googlePrivacyDlpV2JobTrigger.createTime) &&
        Objects.equals(this.description, googlePrivacyDlpV2JobTrigger.description) &&
        Objects.equals(this.displayName, googlePrivacyDlpV2JobTrigger.displayName) &&
        Objects.equals(this.errors, googlePrivacyDlpV2JobTrigger.errors) &&
        Objects.equals(this.inspectJob, googlePrivacyDlpV2JobTrigger.inspectJob) &&
        Objects.equals(this.lastRunTime, googlePrivacyDlpV2JobTrigger.lastRunTime) &&
        Objects.equals(this.name, googlePrivacyDlpV2JobTrigger.name) &&
        Objects.equals(this.status, googlePrivacyDlpV2JobTrigger.status) &&
        Objects.equals(this.triggers, googlePrivacyDlpV2JobTrigger.triggers) &&
        Objects.equals(this.updateTime, googlePrivacyDlpV2JobTrigger.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, displayName, errors, inspectJob, lastRunTime, name, status, triggers, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2JobTrigger {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    inspectJob: ").append(toIndentedString(inspectJob)).append("\n");
    sb.append("    lastRunTime: ").append(toIndentedString(lastRunTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("errors");
    openapiFields.add("inspectJob");
    openapiFields.add("lastRunTime");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("triggers");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2JobTrigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2JobTrigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2JobTrigger is not found in the empty JSON string", GooglePrivacyDlpV2JobTrigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2JobTrigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2JobTrigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            GooglePrivacyDlpV2Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `inspectJob`
      if (jsonObj.get("inspectJob") != null && !jsonObj.get("inspectJob").isJsonNull()) {
        GooglePrivacyDlpV2InspectJobConfig.validateJsonElement(jsonObj.get("inspectJob"));
      }
      if ((jsonObj.get("lastRunTime") != null && !jsonObj.get("lastRunTime").isJsonNull()) && !jsonObj.get("lastRunTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRunTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRunTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("triggers") != null && !jsonObj.get("triggers").isJsonNull()) {
        JsonArray jsonArraytriggers = jsonObj.getAsJsonArray("triggers");
        if (jsonArraytriggers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("triggers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `triggers` to be an array in the JSON string but got `%s`", jsonObj.get("triggers").toString()));
          }

          // validate the optional field `triggers` (array)
          for (int i = 0; i < jsonArraytriggers.size(); i++) {
            GooglePrivacyDlpV2Trigger.validateJsonElement(jsonArraytriggers.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2JobTrigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2JobTrigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2JobTrigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2JobTrigger.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2JobTrigger>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2JobTrigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2JobTrigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2JobTrigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2JobTrigger
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2JobTrigger
   */
  public static GooglePrivacyDlpV2JobTrigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2JobTrigger.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2JobTrigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

