/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2CryptoKey;
import org.openapitools.client.model.GooglePrivacyDlpV2FieldId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/sensitive-data-protection/docs/concepts-date-shifting to learn more.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DateShiftConfig {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private GooglePrivacyDlpV2FieldId context;

  public static final String SERIALIZED_NAME_CRYPTO_KEY = "cryptoKey";
  @SerializedName(SERIALIZED_NAME_CRYPTO_KEY)
  private GooglePrivacyDlpV2CryptoKey cryptoKey;

  public static final String SERIALIZED_NAME_LOWER_BOUND_DAYS = "lowerBoundDays";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUND_DAYS)
  private Integer lowerBoundDays;

  public static final String SERIALIZED_NAME_UPPER_BOUND_DAYS = "upperBoundDays";
  @SerializedName(SERIALIZED_NAME_UPPER_BOUND_DAYS)
  private Integer upperBoundDays;

  public GooglePrivacyDlpV2DateShiftConfig() {
  }

  public GooglePrivacyDlpV2DateShiftConfig context(GooglePrivacyDlpV2FieldId context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2FieldId getContext() {
    return context;
  }

  public void setContext(GooglePrivacyDlpV2FieldId context) {
    this.context = context;
  }


  public GooglePrivacyDlpV2DateShiftConfig cryptoKey(GooglePrivacyDlpV2CryptoKey cryptoKey) {
    this.cryptoKey = cryptoKey;
    return this;
  }

  /**
   * Get cryptoKey
   * @return cryptoKey
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2CryptoKey getCryptoKey() {
    return cryptoKey;
  }

  public void setCryptoKey(GooglePrivacyDlpV2CryptoKey cryptoKey) {
    this.cryptoKey = cryptoKey;
  }


  public GooglePrivacyDlpV2DateShiftConfig lowerBoundDays(Integer lowerBoundDays) {
    this.lowerBoundDays = lowerBoundDays;
    return this;
  }

  /**
   * Required. For example, -5 means shift date to at most 5 days back in the past.
   * @return lowerBoundDays
   */
  @javax.annotation.Nullable
  public Integer getLowerBoundDays() {
    return lowerBoundDays;
  }

  public void setLowerBoundDays(Integer lowerBoundDays) {
    this.lowerBoundDays = lowerBoundDays;
  }


  public GooglePrivacyDlpV2DateShiftConfig upperBoundDays(Integer upperBoundDays) {
    this.upperBoundDays = upperBoundDays;
    return this;
  }

  /**
   * Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.
   * @return upperBoundDays
   */
  @javax.annotation.Nullable
  public Integer getUpperBoundDays() {
    return upperBoundDays;
  }

  public void setUpperBoundDays(Integer upperBoundDays) {
    this.upperBoundDays = upperBoundDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DateShiftConfig googlePrivacyDlpV2DateShiftConfig = (GooglePrivacyDlpV2DateShiftConfig) o;
    return Objects.equals(this.context, googlePrivacyDlpV2DateShiftConfig.context) &&
        Objects.equals(this.cryptoKey, googlePrivacyDlpV2DateShiftConfig.cryptoKey) &&
        Objects.equals(this.lowerBoundDays, googlePrivacyDlpV2DateShiftConfig.lowerBoundDays) &&
        Objects.equals(this.upperBoundDays, googlePrivacyDlpV2DateShiftConfig.upperBoundDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, cryptoKey, lowerBoundDays, upperBoundDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DateShiftConfig {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    cryptoKey: ").append(toIndentedString(cryptoKey)).append("\n");
    sb.append("    lowerBoundDays: ").append(toIndentedString(lowerBoundDays)).append("\n");
    sb.append("    upperBoundDays: ").append(toIndentedString(upperBoundDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("cryptoKey");
    openapiFields.add("lowerBoundDays");
    openapiFields.add("upperBoundDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DateShiftConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DateShiftConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DateShiftConfig is not found in the empty JSON string", GooglePrivacyDlpV2DateShiftConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DateShiftConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DateShiftConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        GooglePrivacyDlpV2FieldId.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `cryptoKey`
      if (jsonObj.get("cryptoKey") != null && !jsonObj.get("cryptoKey").isJsonNull()) {
        GooglePrivacyDlpV2CryptoKey.validateJsonElement(jsonObj.get("cryptoKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DateShiftConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DateShiftConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DateShiftConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DateShiftConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DateShiftConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DateShiftConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DateShiftConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DateShiftConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DateShiftConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DateShiftConfig
   */
  public static GooglePrivacyDlpV2DateShiftConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DateShiftConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DateShiftConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

