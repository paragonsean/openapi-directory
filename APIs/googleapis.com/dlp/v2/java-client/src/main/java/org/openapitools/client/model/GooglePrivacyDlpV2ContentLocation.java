/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2DocumentLocation;
import org.openapitools.client.model.GooglePrivacyDlpV2ImageLocation;
import org.openapitools.client.model.GooglePrivacyDlpV2MetadataLocation;
import org.openapitools.client.model.GooglePrivacyDlpV2RecordLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Precise location of the finding within a document, record, image, or metadata container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2ContentLocation {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_CONTAINER_TIMESTAMP = "containerTimestamp";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TIMESTAMP)
  private String containerTimestamp;

  public static final String SERIALIZED_NAME_CONTAINER_VERSION = "containerVersion";
  @SerializedName(SERIALIZED_NAME_CONTAINER_VERSION)
  private String containerVersion;

  public static final String SERIALIZED_NAME_DOCUMENT_LOCATION = "documentLocation";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LOCATION)
  private GooglePrivacyDlpV2DocumentLocation documentLocation;

  public static final String SERIALIZED_NAME_IMAGE_LOCATION = "imageLocation";
  @SerializedName(SERIALIZED_NAME_IMAGE_LOCATION)
  private GooglePrivacyDlpV2ImageLocation imageLocation;

  public static final String SERIALIZED_NAME_METADATA_LOCATION = "metadataLocation";
  @SerializedName(SERIALIZED_NAME_METADATA_LOCATION)
  private GooglePrivacyDlpV2MetadataLocation metadataLocation;

  public static final String SERIALIZED_NAME_RECORD_LOCATION = "recordLocation";
  @SerializedName(SERIALIZED_NAME_RECORD_LOCATION)
  private GooglePrivacyDlpV2RecordLocation recordLocation;

  public GooglePrivacyDlpV2ContentLocation() {
  }

  public GooglePrivacyDlpV2ContentLocation containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Name of the container where the finding is located. The top level name is the source file name or table name. Names of some common storage containers are formatted as follows: * BigQuery tables: &#x60;{project_id}:{dataset_id}.{table_id}&#x60; * Cloud Storage files: &#x60;gs://{bucket}/{path}&#x60; * Datastore namespace: {namespace} Nested names could be absent if the embedded object has no string identifier (for example, an image contained within a document).
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public GooglePrivacyDlpV2ContentLocation containerTimestamp(String containerTimestamp) {
    this.containerTimestamp = containerTimestamp;
    return this;
  }

  /**
   * Finding container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn&#39;t populated.
   * @return containerTimestamp
   */
  @javax.annotation.Nullable
  public String getContainerTimestamp() {
    return containerTimestamp;
  }

  public void setContainerTimestamp(String containerTimestamp) {
    this.containerTimestamp = containerTimestamp;
  }


  public GooglePrivacyDlpV2ContentLocation containerVersion(String containerVersion) {
    this.containerVersion = containerVersion;
    return this;
  }

  /**
   * Finding container version, if available (\&quot;generation\&quot; for Cloud Storage).
   * @return containerVersion
   */
  @javax.annotation.Nullable
  public String getContainerVersion() {
    return containerVersion;
  }

  public void setContainerVersion(String containerVersion) {
    this.containerVersion = containerVersion;
  }


  public GooglePrivacyDlpV2ContentLocation documentLocation(GooglePrivacyDlpV2DocumentLocation documentLocation) {
    this.documentLocation = documentLocation;
    return this;
  }

  /**
   * Get documentLocation
   * @return documentLocation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2DocumentLocation getDocumentLocation() {
    return documentLocation;
  }

  public void setDocumentLocation(GooglePrivacyDlpV2DocumentLocation documentLocation) {
    this.documentLocation = documentLocation;
  }


  public GooglePrivacyDlpV2ContentLocation imageLocation(GooglePrivacyDlpV2ImageLocation imageLocation) {
    this.imageLocation = imageLocation;
    return this;
  }

  /**
   * Get imageLocation
   * @return imageLocation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2ImageLocation getImageLocation() {
    return imageLocation;
  }

  public void setImageLocation(GooglePrivacyDlpV2ImageLocation imageLocation) {
    this.imageLocation = imageLocation;
  }


  public GooglePrivacyDlpV2ContentLocation metadataLocation(GooglePrivacyDlpV2MetadataLocation metadataLocation) {
    this.metadataLocation = metadataLocation;
    return this;
  }

  /**
   * Get metadataLocation
   * @return metadataLocation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2MetadataLocation getMetadataLocation() {
    return metadataLocation;
  }

  public void setMetadataLocation(GooglePrivacyDlpV2MetadataLocation metadataLocation) {
    this.metadataLocation = metadataLocation;
  }


  public GooglePrivacyDlpV2ContentLocation recordLocation(GooglePrivacyDlpV2RecordLocation recordLocation) {
    this.recordLocation = recordLocation;
    return this;
  }

  /**
   * Get recordLocation
   * @return recordLocation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2RecordLocation getRecordLocation() {
    return recordLocation;
  }

  public void setRecordLocation(GooglePrivacyDlpV2RecordLocation recordLocation) {
    this.recordLocation = recordLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2ContentLocation googlePrivacyDlpV2ContentLocation = (GooglePrivacyDlpV2ContentLocation) o;
    return Objects.equals(this.containerName, googlePrivacyDlpV2ContentLocation.containerName) &&
        Objects.equals(this.containerTimestamp, googlePrivacyDlpV2ContentLocation.containerTimestamp) &&
        Objects.equals(this.containerVersion, googlePrivacyDlpV2ContentLocation.containerVersion) &&
        Objects.equals(this.documentLocation, googlePrivacyDlpV2ContentLocation.documentLocation) &&
        Objects.equals(this.imageLocation, googlePrivacyDlpV2ContentLocation.imageLocation) &&
        Objects.equals(this.metadataLocation, googlePrivacyDlpV2ContentLocation.metadataLocation) &&
        Objects.equals(this.recordLocation, googlePrivacyDlpV2ContentLocation.recordLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, containerTimestamp, containerVersion, documentLocation, imageLocation, metadataLocation, recordLocation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2ContentLocation {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    containerTimestamp: ").append(toIndentedString(containerTimestamp)).append("\n");
    sb.append("    containerVersion: ").append(toIndentedString(containerVersion)).append("\n");
    sb.append("    documentLocation: ").append(toIndentedString(documentLocation)).append("\n");
    sb.append("    imageLocation: ").append(toIndentedString(imageLocation)).append("\n");
    sb.append("    metadataLocation: ").append(toIndentedString(metadataLocation)).append("\n");
    sb.append("    recordLocation: ").append(toIndentedString(recordLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("containerTimestamp");
    openapiFields.add("containerVersion");
    openapiFields.add("documentLocation");
    openapiFields.add("imageLocation");
    openapiFields.add("metadataLocation");
    openapiFields.add("recordLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2ContentLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2ContentLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2ContentLocation is not found in the empty JSON string", GooglePrivacyDlpV2ContentLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2ContentLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2ContentLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("containerTimestamp") != null && !jsonObj.get("containerTimestamp").isJsonNull()) && !jsonObj.get("containerTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerTimestamp").toString()));
      }
      if ((jsonObj.get("containerVersion") != null && !jsonObj.get("containerVersion").isJsonNull()) && !jsonObj.get("containerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerVersion").toString()));
      }
      // validate the optional field `documentLocation`
      if (jsonObj.get("documentLocation") != null && !jsonObj.get("documentLocation").isJsonNull()) {
        GooglePrivacyDlpV2DocumentLocation.validateJsonElement(jsonObj.get("documentLocation"));
      }
      // validate the optional field `imageLocation`
      if (jsonObj.get("imageLocation") != null && !jsonObj.get("imageLocation").isJsonNull()) {
        GooglePrivacyDlpV2ImageLocation.validateJsonElement(jsonObj.get("imageLocation"));
      }
      // validate the optional field `metadataLocation`
      if (jsonObj.get("metadataLocation") != null && !jsonObj.get("metadataLocation").isJsonNull()) {
        GooglePrivacyDlpV2MetadataLocation.validateJsonElement(jsonObj.get("metadataLocation"));
      }
      // validate the optional field `recordLocation`
      if (jsonObj.get("recordLocation") != null && !jsonObj.get("recordLocation").isJsonNull()) {
        GooglePrivacyDlpV2RecordLocation.validateJsonElement(jsonObj.get("recordLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2ContentLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2ContentLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2ContentLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2ContentLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2ContentLocation>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2ContentLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2ContentLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2ContentLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2ContentLocation
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2ContentLocation
   */
  public static GooglePrivacyDlpV2ContentLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2ContentLocation.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2ContentLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

