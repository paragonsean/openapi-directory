/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2BigQueryTable;
import org.openapitools.client.model.GooglePrivacyDlpV2FieldId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options defining BigQuery table and row identifiers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2BigQueryOptions {
  public static final String SERIALIZED_NAME_EXCLUDED_FIELDS = "excludedFields";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_FIELDS)
  private List<GooglePrivacyDlpV2FieldId> excludedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFYING_FIELDS = "identifyingFields";
  @SerializedName(SERIALIZED_NAME_IDENTIFYING_FIELDS)
  private List<GooglePrivacyDlpV2FieldId> identifyingFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_FIELDS = "includedFields";
  @SerializedName(SERIALIZED_NAME_INCLUDED_FIELDS)
  private List<GooglePrivacyDlpV2FieldId> includedFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROWS_LIMIT = "rowsLimit";
  @SerializedName(SERIALIZED_NAME_ROWS_LIMIT)
  private String rowsLimit;

  public static final String SERIALIZED_NAME_ROWS_LIMIT_PERCENT = "rowsLimitPercent";
  @SerializedName(SERIALIZED_NAME_ROWS_LIMIT_PERCENT)
  private Integer rowsLimitPercent;

  /**
   * How to sample the data.
   */
  @JsonAdapter(SampleMethodEnum.Adapter.class)
  public enum SampleMethodEnum {
    SAMPLE_METHOD_UNSPECIFIED("SAMPLE_METHOD_UNSPECIFIED"),
    
    TOP("TOP"),
    
    RANDOM_START("RANDOM_START");

    private String value;

    SampleMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SampleMethodEnum fromValue(String value) {
      for (SampleMethodEnum b : SampleMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SampleMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SampleMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SampleMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SampleMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SampleMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLE_METHOD = "sampleMethod";
  @SerializedName(SERIALIZED_NAME_SAMPLE_METHOD)
  private SampleMethodEnum sampleMethod;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private GooglePrivacyDlpV2BigQueryTable tableReference;

  public GooglePrivacyDlpV2BigQueryOptions() {
  }

  public GooglePrivacyDlpV2BigQueryOptions excludedFields(List<GooglePrivacyDlpV2FieldId> excludedFields) {
    this.excludedFields = excludedFields;
    return this;
  }

  public GooglePrivacyDlpV2BigQueryOptions addExcludedFieldsItem(GooglePrivacyDlpV2FieldId excludedFieldsItem) {
    if (this.excludedFields == null) {
      this.excludedFields = new ArrayList<>();
    }
    this.excludedFields.add(excludedFieldsItem);
    return this;
  }

  /**
   * References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
   * @return excludedFields
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2FieldId> getExcludedFields() {
    return excludedFields;
  }

  public void setExcludedFields(List<GooglePrivacyDlpV2FieldId> excludedFields) {
    this.excludedFields = excludedFields;
  }


  public GooglePrivacyDlpV2BigQueryOptions identifyingFields(List<GooglePrivacyDlpV2FieldId> identifyingFields) {
    this.identifyingFields = identifyingFields;
    return this;
  }

  public GooglePrivacyDlpV2BigQueryOptions addIdentifyingFieldsItem(GooglePrivacyDlpV2FieldId identifyingFieldsItem) {
    if (this.identifyingFields == null) {
      this.identifyingFields = new ArrayList<>();
    }
    this.identifyingFields.add(identifyingFieldsItem);
    return this;
  }

  /**
   * Table fields that may uniquely identify a row within the table. When &#x60;actions.saveFindings.outputConfig.table&#x60; is specified, the values of columns specified here are available in the output table under &#x60;location.content_locations.record_location.record_key.id_values&#x60;. Nested fields such as &#x60;person.birthdate.year&#x60; are allowed.
   * @return identifyingFields
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2FieldId> getIdentifyingFields() {
    return identifyingFields;
  }

  public void setIdentifyingFields(List<GooglePrivacyDlpV2FieldId> identifyingFields) {
    this.identifyingFields = identifyingFields;
  }


  public GooglePrivacyDlpV2BigQueryOptions includedFields(List<GooglePrivacyDlpV2FieldId> includedFields) {
    this.includedFields = includedFields;
    return this;
  }

  public GooglePrivacyDlpV2BigQueryOptions addIncludedFieldsItem(GooglePrivacyDlpV2FieldId includedFieldsItem) {
    if (this.includedFields == null) {
      this.includedFields = new ArrayList<>();
    }
    this.includedFields.add(includedFieldsItem);
    return this;
  }

  /**
   * Limit scanning only to these fields. When inspecting a table, we recommend that you inspect all columns. Otherwise, findings might be affected because hints from excluded columns will not be used.
   * @return includedFields
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2FieldId> getIncludedFields() {
    return includedFields;
  }

  public void setIncludedFields(List<GooglePrivacyDlpV2FieldId> includedFields) {
    this.includedFields = includedFields;
  }


  public GooglePrivacyDlpV2BigQueryOptions rowsLimit(String rowsLimit) {
    this.rowsLimit = rowsLimit;
    return this;
  }

  /**
   * Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig.
   * @return rowsLimit
   */
  @javax.annotation.Nullable
  public String getRowsLimit() {
    return rowsLimit;
  }

  public void setRowsLimit(String rowsLimit) {
    this.rowsLimit = rowsLimit;
  }


  public GooglePrivacyDlpV2BigQueryOptions rowsLimitPercent(Integer rowsLimitPercent) {
    this.rowsLimitPercent = rowsLimitPercent;
    return this;
  }

  /**
   * Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. Caution: A [known issue](https://cloud.google.com/sensitive-data-protection/docs/known-issues#bq-sampling) is causing the &#x60;rowsLimitPercent&#x60; field to behave unexpectedly. We recommend using &#x60;rowsLimit&#x60; instead.
   * @return rowsLimitPercent
   */
  @javax.annotation.Nullable
  public Integer getRowsLimitPercent() {
    return rowsLimitPercent;
  }

  public void setRowsLimitPercent(Integer rowsLimitPercent) {
    this.rowsLimitPercent = rowsLimitPercent;
  }


  public GooglePrivacyDlpV2BigQueryOptions sampleMethod(SampleMethodEnum sampleMethod) {
    this.sampleMethod = sampleMethod;
    return this;
  }

  /**
   * How to sample the data.
   * @return sampleMethod
   */
  @javax.annotation.Nullable
  public SampleMethodEnum getSampleMethod() {
    return sampleMethod;
  }

  public void setSampleMethod(SampleMethodEnum sampleMethod) {
    this.sampleMethod = sampleMethod;
  }


  public GooglePrivacyDlpV2BigQueryOptions tableReference(GooglePrivacyDlpV2BigQueryTable tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2BigQueryTable getTableReference() {
    return tableReference;
  }

  public void setTableReference(GooglePrivacyDlpV2BigQueryTable tableReference) {
    this.tableReference = tableReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2BigQueryOptions googlePrivacyDlpV2BigQueryOptions = (GooglePrivacyDlpV2BigQueryOptions) o;
    return Objects.equals(this.excludedFields, googlePrivacyDlpV2BigQueryOptions.excludedFields) &&
        Objects.equals(this.identifyingFields, googlePrivacyDlpV2BigQueryOptions.identifyingFields) &&
        Objects.equals(this.includedFields, googlePrivacyDlpV2BigQueryOptions.includedFields) &&
        Objects.equals(this.rowsLimit, googlePrivacyDlpV2BigQueryOptions.rowsLimit) &&
        Objects.equals(this.rowsLimitPercent, googlePrivacyDlpV2BigQueryOptions.rowsLimitPercent) &&
        Objects.equals(this.sampleMethod, googlePrivacyDlpV2BigQueryOptions.sampleMethod) &&
        Objects.equals(this.tableReference, googlePrivacyDlpV2BigQueryOptions.tableReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedFields, identifyingFields, includedFields, rowsLimit, rowsLimitPercent, sampleMethod, tableReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2BigQueryOptions {\n");
    sb.append("    excludedFields: ").append(toIndentedString(excludedFields)).append("\n");
    sb.append("    identifyingFields: ").append(toIndentedString(identifyingFields)).append("\n");
    sb.append("    includedFields: ").append(toIndentedString(includedFields)).append("\n");
    sb.append("    rowsLimit: ").append(toIndentedString(rowsLimit)).append("\n");
    sb.append("    rowsLimitPercent: ").append(toIndentedString(rowsLimitPercent)).append("\n");
    sb.append("    sampleMethod: ").append(toIndentedString(sampleMethod)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludedFields");
    openapiFields.add("identifyingFields");
    openapiFields.add("includedFields");
    openapiFields.add("rowsLimit");
    openapiFields.add("rowsLimitPercent");
    openapiFields.add("sampleMethod");
    openapiFields.add("tableReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2BigQueryOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2BigQueryOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2BigQueryOptions is not found in the empty JSON string", GooglePrivacyDlpV2BigQueryOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2BigQueryOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2BigQueryOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("excludedFields") != null && !jsonObj.get("excludedFields").isJsonNull()) {
        JsonArray jsonArrayexcludedFields = jsonObj.getAsJsonArray("excludedFields");
        if (jsonArrayexcludedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedFields` to be an array in the JSON string but got `%s`", jsonObj.get("excludedFields").toString()));
          }

          // validate the optional field `excludedFields` (array)
          for (int i = 0; i < jsonArrayexcludedFields.size(); i++) {
            GooglePrivacyDlpV2FieldId.validateJsonElement(jsonArrayexcludedFields.get(i));
          };
        }
      }
      if (jsonObj.get("identifyingFields") != null && !jsonObj.get("identifyingFields").isJsonNull()) {
        JsonArray jsonArrayidentifyingFields = jsonObj.getAsJsonArray("identifyingFields");
        if (jsonArrayidentifyingFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identifyingFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identifyingFields` to be an array in the JSON string but got `%s`", jsonObj.get("identifyingFields").toString()));
          }

          // validate the optional field `identifyingFields` (array)
          for (int i = 0; i < jsonArrayidentifyingFields.size(); i++) {
            GooglePrivacyDlpV2FieldId.validateJsonElement(jsonArrayidentifyingFields.get(i));
          };
        }
      }
      if (jsonObj.get("includedFields") != null && !jsonObj.get("includedFields").isJsonNull()) {
        JsonArray jsonArrayincludedFields = jsonObj.getAsJsonArray("includedFields");
        if (jsonArrayincludedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedFields` to be an array in the JSON string but got `%s`", jsonObj.get("includedFields").toString()));
          }

          // validate the optional field `includedFields` (array)
          for (int i = 0; i < jsonArrayincludedFields.size(); i++) {
            GooglePrivacyDlpV2FieldId.validateJsonElement(jsonArrayincludedFields.get(i));
          };
        }
      }
      if ((jsonObj.get("rowsLimit") != null && !jsonObj.get("rowsLimit").isJsonNull()) && !jsonObj.get("rowsLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowsLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowsLimit").toString()));
      }
      if ((jsonObj.get("sampleMethod") != null && !jsonObj.get("sampleMethod").isJsonNull()) && !jsonObj.get("sampleMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleMethod").toString()));
      }
      // validate the optional field `sampleMethod`
      if (jsonObj.get("sampleMethod") != null && !jsonObj.get("sampleMethod").isJsonNull()) {
        SampleMethodEnum.validateJsonElement(jsonObj.get("sampleMethod"));
      }
      // validate the optional field `tableReference`
      if (jsonObj.get("tableReference") != null && !jsonObj.get("tableReference").isJsonNull()) {
        GooglePrivacyDlpV2BigQueryTable.validateJsonElement(jsonObj.get("tableReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2BigQueryOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2BigQueryOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2BigQueryOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2BigQueryOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2BigQueryOptions>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2BigQueryOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2BigQueryOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2BigQueryOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2BigQueryOptions
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2BigQueryOptions
   */
  public static GooglePrivacyDlpV2BigQueryOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2BigQueryOptions.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2BigQueryOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

