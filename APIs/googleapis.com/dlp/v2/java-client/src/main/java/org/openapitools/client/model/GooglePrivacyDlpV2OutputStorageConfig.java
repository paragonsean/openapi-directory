/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2BigQueryTable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cloud repository for storing output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2OutputStorageConfig {
  /**
   * Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the &#x60;Finding&#x60; object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
   */
  @JsonAdapter(OutputSchemaEnum.Adapter.class)
  public enum OutputSchemaEnum {
    OUTPUT_SCHEMA_UNSPECIFIED("OUTPUT_SCHEMA_UNSPECIFIED"),
    
    BASIC_COLUMNS("BASIC_COLUMNS"),
    
    GCS_COLUMNS("GCS_COLUMNS"),
    
    DATASTORE_COLUMNS("DATASTORE_COLUMNS"),
    
    BIG_QUERY_COLUMNS("BIG_QUERY_COLUMNS"),
    
    ALL_COLUMNS("ALL_COLUMNS");

    private String value;

    OutputSchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputSchemaEnum fromValue(String value) {
      for (OutputSchemaEnum b : OutputSchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputSchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputSchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputSchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputSchemaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputSchemaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMA = "outputSchema";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMA)
  private OutputSchemaEnum outputSchema;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private GooglePrivacyDlpV2BigQueryTable table;

  public GooglePrivacyDlpV2OutputStorageConfig() {
  }

  public GooglePrivacyDlpV2OutputStorageConfig outputSchema(OutputSchemaEnum outputSchema) {
    this.outputSchema = outputSchema;
    return this;
  }

  /**
   * Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the &#x60;Finding&#x60; object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.
   * @return outputSchema
   */
  @javax.annotation.Nullable
  public OutputSchemaEnum getOutputSchema() {
    return outputSchema;
  }

  public void setOutputSchema(OutputSchemaEnum outputSchema) {
    this.outputSchema = outputSchema;
  }


  public GooglePrivacyDlpV2OutputStorageConfig table(GooglePrivacyDlpV2BigQueryTable table) {
    this.table = table;
    return this;
  }

  /**
   * Get table
   * @return table
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2BigQueryTable getTable() {
    return table;
  }

  public void setTable(GooglePrivacyDlpV2BigQueryTable table) {
    this.table = table;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2OutputStorageConfig googlePrivacyDlpV2OutputStorageConfig = (GooglePrivacyDlpV2OutputStorageConfig) o;
    return Objects.equals(this.outputSchema, googlePrivacyDlpV2OutputStorageConfig.outputSchema) &&
        Objects.equals(this.table, googlePrivacyDlpV2OutputStorageConfig.table);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputSchema, table);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2OutputStorageConfig {\n");
    sb.append("    outputSchema: ").append(toIndentedString(outputSchema)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outputSchema");
    openapiFields.add("table");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2OutputStorageConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2OutputStorageConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2OutputStorageConfig is not found in the empty JSON string", GooglePrivacyDlpV2OutputStorageConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2OutputStorageConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2OutputStorageConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("outputSchema") != null && !jsonObj.get("outputSchema").isJsonNull()) && !jsonObj.get("outputSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputSchema").toString()));
      }
      // validate the optional field `outputSchema`
      if (jsonObj.get("outputSchema") != null && !jsonObj.get("outputSchema").isJsonNull()) {
        OutputSchemaEnum.validateJsonElement(jsonObj.get("outputSchema"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        GooglePrivacyDlpV2BigQueryTable.validateJsonElement(jsonObj.get("table"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2OutputStorageConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2OutputStorageConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2OutputStorageConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2OutputStorageConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2OutputStorageConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2OutputStorageConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2OutputStorageConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2OutputStorageConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2OutputStorageConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2OutputStorageConfig
   */
  public static GooglePrivacyDlpV2OutputStorageConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2OutputStorageConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2OutputStorageConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

