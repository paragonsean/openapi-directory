/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a &#x60;DateShift&#x60; transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the &#x60;TransformationOverviews&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2TransformationErrorHandling {
  public static final String SERIALIZED_NAME_LEAVE_UNTRANSFORMED = "leaveUntransformed";
  @SerializedName(SERIALIZED_NAME_LEAVE_UNTRANSFORMED)
  private Object leaveUntransformed;

  public static final String SERIALIZED_NAME_THROW_ERROR = "throwError";
  @SerializedName(SERIALIZED_NAME_THROW_ERROR)
  private Object throwError;

  public GooglePrivacyDlpV2TransformationErrorHandling() {
  }

  public GooglePrivacyDlpV2TransformationErrorHandling leaveUntransformed(Object leaveUntransformed) {
    this.leaveUntransformed = leaveUntransformed;
    return this;
  }

  /**
   * Skips the data without modifying it if the requested transformation would cause an error. For example, if a &#x60;DateShift&#x60; transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.
   * @return leaveUntransformed
   */
  @javax.annotation.Nullable
  public Object getLeaveUntransformed() {
    return leaveUntransformed;
  }

  public void setLeaveUntransformed(Object leaveUntransformed) {
    this.leaveUntransformed = leaveUntransformed;
  }


  public GooglePrivacyDlpV2TransformationErrorHandling throwError(Object throwError) {
    this.throwError = throwError;
    return this;
  }

  /**
   * Throw an error and fail the request when a transformation error occurs.
   * @return throwError
   */
  @javax.annotation.Nullable
  public Object getThrowError() {
    return throwError;
  }

  public void setThrowError(Object throwError) {
    this.throwError = throwError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2TransformationErrorHandling googlePrivacyDlpV2TransformationErrorHandling = (GooglePrivacyDlpV2TransformationErrorHandling) o;
    return Objects.equals(this.leaveUntransformed, googlePrivacyDlpV2TransformationErrorHandling.leaveUntransformed) &&
        Objects.equals(this.throwError, googlePrivacyDlpV2TransformationErrorHandling.throwError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leaveUntransformed, throwError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2TransformationErrorHandling {\n");
    sb.append("    leaveUntransformed: ").append(toIndentedString(leaveUntransformed)).append("\n");
    sb.append("    throwError: ").append(toIndentedString(throwError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leaveUntransformed");
    openapiFields.add("throwError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2TransformationErrorHandling
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2TransformationErrorHandling.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2TransformationErrorHandling is not found in the empty JSON string", GooglePrivacyDlpV2TransformationErrorHandling.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2TransformationErrorHandling.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2TransformationErrorHandling` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2TransformationErrorHandling.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2TransformationErrorHandling' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2TransformationErrorHandling> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2TransformationErrorHandling.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2TransformationErrorHandling>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2TransformationErrorHandling value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2TransformationErrorHandling read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2TransformationErrorHandling given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2TransformationErrorHandling
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2TransformationErrorHandling
   */
  public static GooglePrivacyDlpV2TransformationErrorHandling fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2TransformationErrorHandling.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2TransformationErrorHandling to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

