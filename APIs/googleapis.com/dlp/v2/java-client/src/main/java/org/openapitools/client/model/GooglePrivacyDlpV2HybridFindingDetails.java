/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GooglePrivacyDlpV2Container;
import org.openapitools.client.model.GooglePrivacyDlpV2TableOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Populate to associate additional data with each finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2HybridFindingDetails {
  public static final String SERIALIZED_NAME_CONTAINER_DETAILS = "containerDetails";
  @SerializedName(SERIALIZED_NAME_CONTAINER_DETAILS)
  private GooglePrivacyDlpV2Container containerDetails;

  public static final String SERIALIZED_NAME_FILE_OFFSET = "fileOffset";
  @SerializedName(SERIALIZED_NAME_FILE_OFFSET)
  private String fileOffset;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_ROW_OFFSET = "rowOffset";
  @SerializedName(SERIALIZED_NAME_ROW_OFFSET)
  private String rowOffset;

  public static final String SERIALIZED_NAME_TABLE_OPTIONS = "tableOptions";
  @SerializedName(SERIALIZED_NAME_TABLE_OPTIONS)
  private GooglePrivacyDlpV2TableOptions tableOptions;

  public GooglePrivacyDlpV2HybridFindingDetails() {
  }

  public GooglePrivacyDlpV2HybridFindingDetails containerDetails(GooglePrivacyDlpV2Container containerDetails) {
    this.containerDetails = containerDetails;
    return this;
  }

  /**
   * Get containerDetails
   * @return containerDetails
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Container getContainerDetails() {
    return containerDetails;
  }

  public void setContainerDetails(GooglePrivacyDlpV2Container containerDetails) {
    this.containerDetails = containerDetails;
  }


  public GooglePrivacyDlpV2HybridFindingDetails fileOffset(String fileOffset) {
    this.fileOffset = fileOffset;
    return this;
  }

  /**
   * Offset in bytes of the line, from the beginning of the file, where the finding is located. Populate if the item being scanned is only part of a bigger item, such as a shard of a file and you want to track the absolute position of the finding.
   * @return fileOffset
   */
  @javax.annotation.Nullable
  public String getFileOffset() {
    return fileOffset;
  }

  public void setFileOffset(String fileOffset) {
    this.fileOffset = fileOffset;
  }


  public GooglePrivacyDlpV2HybridFindingDetails labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public GooglePrivacyDlpV2HybridFindingDetails putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels to represent user provided metadata about the data being inspected. If configured by the job, some key values may be required. The labels associated with &#x60;Finding&#x60;&#39;s produced by hybrid inspection. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: &#x60;[a-z]([-a-z0-9]*[a-z0-9])?&#x60;. Label values must be between 0 and 63 characters long and must conform to the regular expression &#x60;([a-z]([-a-z0-9]*[a-z0-9])?)?&#x60;. No more than 10 labels can be associated with a given finding. Examples: * &#x60;\&quot;environment\&quot; : \&quot;production\&quot;&#x60; * &#x60;\&quot;pipeline\&quot; : \&quot;etl\&quot;&#x60;
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public GooglePrivacyDlpV2HybridFindingDetails rowOffset(String rowOffset) {
    this.rowOffset = rowOffset;
    return this;
  }

  /**
   * Offset of the row for tables. Populate if the row(s) being scanned are part of a bigger dataset and you want to keep track of their absolute position.
   * @return rowOffset
   */
  @javax.annotation.Nullable
  public String getRowOffset() {
    return rowOffset;
  }

  public void setRowOffset(String rowOffset) {
    this.rowOffset = rowOffset;
  }


  public GooglePrivacyDlpV2HybridFindingDetails tableOptions(GooglePrivacyDlpV2TableOptions tableOptions) {
    this.tableOptions = tableOptions;
    return this;
  }

  /**
   * Get tableOptions
   * @return tableOptions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TableOptions getTableOptions() {
    return tableOptions;
  }

  public void setTableOptions(GooglePrivacyDlpV2TableOptions tableOptions) {
    this.tableOptions = tableOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2HybridFindingDetails googlePrivacyDlpV2HybridFindingDetails = (GooglePrivacyDlpV2HybridFindingDetails) o;
    return Objects.equals(this.containerDetails, googlePrivacyDlpV2HybridFindingDetails.containerDetails) &&
        Objects.equals(this.fileOffset, googlePrivacyDlpV2HybridFindingDetails.fileOffset) &&
        Objects.equals(this.labels, googlePrivacyDlpV2HybridFindingDetails.labels) &&
        Objects.equals(this.rowOffset, googlePrivacyDlpV2HybridFindingDetails.rowOffset) &&
        Objects.equals(this.tableOptions, googlePrivacyDlpV2HybridFindingDetails.tableOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerDetails, fileOffset, labels, rowOffset, tableOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2HybridFindingDetails {\n");
    sb.append("    containerDetails: ").append(toIndentedString(containerDetails)).append("\n");
    sb.append("    fileOffset: ").append(toIndentedString(fileOffset)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    rowOffset: ").append(toIndentedString(rowOffset)).append("\n");
    sb.append("    tableOptions: ").append(toIndentedString(tableOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerDetails");
    openapiFields.add("fileOffset");
    openapiFields.add("labels");
    openapiFields.add("rowOffset");
    openapiFields.add("tableOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2HybridFindingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2HybridFindingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2HybridFindingDetails is not found in the empty JSON string", GooglePrivacyDlpV2HybridFindingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2HybridFindingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2HybridFindingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerDetails`
      if (jsonObj.get("containerDetails") != null && !jsonObj.get("containerDetails").isJsonNull()) {
        GooglePrivacyDlpV2Container.validateJsonElement(jsonObj.get("containerDetails"));
      }
      if ((jsonObj.get("fileOffset") != null && !jsonObj.get("fileOffset").isJsonNull()) && !jsonObj.get("fileOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileOffset").toString()));
      }
      if ((jsonObj.get("rowOffset") != null && !jsonObj.get("rowOffset").isJsonNull()) && !jsonObj.get("rowOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowOffset").toString()));
      }
      // validate the optional field `tableOptions`
      if (jsonObj.get("tableOptions") != null && !jsonObj.get("tableOptions").isJsonNull()) {
        GooglePrivacyDlpV2TableOptions.validateJsonElement(jsonObj.get("tableOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2HybridFindingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2HybridFindingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2HybridFindingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2HybridFindingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2HybridFindingDetails>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2HybridFindingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2HybridFindingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2HybridFindingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2HybridFindingDetails
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2HybridFindingDetails
   */
  public static GooglePrivacyDlpV2HybridFindingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2HybridFindingDetails.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2HybridFindingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

