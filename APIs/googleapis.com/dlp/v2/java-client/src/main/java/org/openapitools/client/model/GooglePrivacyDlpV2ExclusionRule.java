/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2Dictionary;
import org.openapitools.client.model.GooglePrivacyDlpV2ExcludeByHotword;
import org.openapitools.client.model.GooglePrivacyDlpV2ExcludeInfoTypes;
import org.openapitools.client.model.GooglePrivacyDlpV2Regex;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The rule that specifies conditions when findings of infoTypes specified in &#x60;InspectionRuleSet&#x60; are removed from results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2ExclusionRule {
  public static final String SERIALIZED_NAME_DICTIONARY = "dictionary";
  @SerializedName(SERIALIZED_NAME_DICTIONARY)
  private GooglePrivacyDlpV2Dictionary dictionary;

  public static final String SERIALIZED_NAME_EXCLUDE_BY_HOTWORD = "excludeByHotword";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_BY_HOTWORD)
  private GooglePrivacyDlpV2ExcludeByHotword excludeByHotword;

  public static final String SERIALIZED_NAME_EXCLUDE_INFO_TYPES = "excludeInfoTypes";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_INFO_TYPES)
  private GooglePrivacyDlpV2ExcludeInfoTypes excludeInfoTypes;

  /**
   * How the rule is applied, see MatchingType documentation for details.
   */
  @JsonAdapter(MatchingTypeEnum.Adapter.class)
  public enum MatchingTypeEnum {
    UNSPECIFIED("MATCHING_TYPE_UNSPECIFIED"),
    
    FULL_MATCH("MATCHING_TYPE_FULL_MATCH"),
    
    PARTIAL_MATCH("MATCHING_TYPE_PARTIAL_MATCH"),
    
    INVERSE_MATCH("MATCHING_TYPE_INVERSE_MATCH");

    private String value;

    MatchingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchingTypeEnum fromValue(String value) {
      for (MatchingTypeEnum b : MatchingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHING_TYPE = "matchingType";
  @SerializedName(SERIALIZED_NAME_MATCHING_TYPE)
  private MatchingTypeEnum matchingType;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private GooglePrivacyDlpV2Regex regex;

  public GooglePrivacyDlpV2ExclusionRule() {
  }

  public GooglePrivacyDlpV2ExclusionRule dictionary(GooglePrivacyDlpV2Dictionary dictionary) {
    this.dictionary = dictionary;
    return this;
  }

  /**
   * Get dictionary
   * @return dictionary
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Dictionary getDictionary() {
    return dictionary;
  }

  public void setDictionary(GooglePrivacyDlpV2Dictionary dictionary) {
    this.dictionary = dictionary;
  }


  public GooglePrivacyDlpV2ExclusionRule excludeByHotword(GooglePrivacyDlpV2ExcludeByHotword excludeByHotword) {
    this.excludeByHotword = excludeByHotword;
    return this;
  }

  /**
   * Get excludeByHotword
   * @return excludeByHotword
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2ExcludeByHotword getExcludeByHotword() {
    return excludeByHotword;
  }

  public void setExcludeByHotword(GooglePrivacyDlpV2ExcludeByHotword excludeByHotword) {
    this.excludeByHotword = excludeByHotword;
  }


  public GooglePrivacyDlpV2ExclusionRule excludeInfoTypes(GooglePrivacyDlpV2ExcludeInfoTypes excludeInfoTypes) {
    this.excludeInfoTypes = excludeInfoTypes;
    return this;
  }

  /**
   * Get excludeInfoTypes
   * @return excludeInfoTypes
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2ExcludeInfoTypes getExcludeInfoTypes() {
    return excludeInfoTypes;
  }

  public void setExcludeInfoTypes(GooglePrivacyDlpV2ExcludeInfoTypes excludeInfoTypes) {
    this.excludeInfoTypes = excludeInfoTypes;
  }


  public GooglePrivacyDlpV2ExclusionRule matchingType(MatchingTypeEnum matchingType) {
    this.matchingType = matchingType;
    return this;
  }

  /**
   * How the rule is applied, see MatchingType documentation for details.
   * @return matchingType
   */
  @javax.annotation.Nullable
  public MatchingTypeEnum getMatchingType() {
    return matchingType;
  }

  public void setMatchingType(MatchingTypeEnum matchingType) {
    this.matchingType = matchingType;
  }


  public GooglePrivacyDlpV2ExclusionRule regex(GooglePrivacyDlpV2Regex regex) {
    this.regex = regex;
    return this;
  }

  /**
   * Get regex
   * @return regex
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Regex getRegex() {
    return regex;
  }

  public void setRegex(GooglePrivacyDlpV2Regex regex) {
    this.regex = regex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2ExclusionRule googlePrivacyDlpV2ExclusionRule = (GooglePrivacyDlpV2ExclusionRule) o;
    return Objects.equals(this.dictionary, googlePrivacyDlpV2ExclusionRule.dictionary) &&
        Objects.equals(this.excludeByHotword, googlePrivacyDlpV2ExclusionRule.excludeByHotword) &&
        Objects.equals(this.excludeInfoTypes, googlePrivacyDlpV2ExclusionRule.excludeInfoTypes) &&
        Objects.equals(this.matchingType, googlePrivacyDlpV2ExclusionRule.matchingType) &&
        Objects.equals(this.regex, googlePrivacyDlpV2ExclusionRule.regex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dictionary, excludeByHotword, excludeInfoTypes, matchingType, regex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2ExclusionRule {\n");
    sb.append("    dictionary: ").append(toIndentedString(dictionary)).append("\n");
    sb.append("    excludeByHotword: ").append(toIndentedString(excludeByHotword)).append("\n");
    sb.append("    excludeInfoTypes: ").append(toIndentedString(excludeInfoTypes)).append("\n");
    sb.append("    matchingType: ").append(toIndentedString(matchingType)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dictionary");
    openapiFields.add("excludeByHotword");
    openapiFields.add("excludeInfoTypes");
    openapiFields.add("matchingType");
    openapiFields.add("regex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2ExclusionRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2ExclusionRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2ExclusionRule is not found in the empty JSON string", GooglePrivacyDlpV2ExclusionRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2ExclusionRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2ExclusionRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dictionary`
      if (jsonObj.get("dictionary") != null && !jsonObj.get("dictionary").isJsonNull()) {
        GooglePrivacyDlpV2Dictionary.validateJsonElement(jsonObj.get("dictionary"));
      }
      // validate the optional field `excludeByHotword`
      if (jsonObj.get("excludeByHotword") != null && !jsonObj.get("excludeByHotword").isJsonNull()) {
        GooglePrivacyDlpV2ExcludeByHotword.validateJsonElement(jsonObj.get("excludeByHotword"));
      }
      // validate the optional field `excludeInfoTypes`
      if (jsonObj.get("excludeInfoTypes") != null && !jsonObj.get("excludeInfoTypes").isJsonNull()) {
        GooglePrivacyDlpV2ExcludeInfoTypes.validateJsonElement(jsonObj.get("excludeInfoTypes"));
      }
      if ((jsonObj.get("matchingType") != null && !jsonObj.get("matchingType").isJsonNull()) && !jsonObj.get("matchingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingType").toString()));
      }
      // validate the optional field `matchingType`
      if (jsonObj.get("matchingType") != null && !jsonObj.get("matchingType").isJsonNull()) {
        MatchingTypeEnum.validateJsonElement(jsonObj.get("matchingType"));
      }
      // validate the optional field `regex`
      if (jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) {
        GooglePrivacyDlpV2Regex.validateJsonElement(jsonObj.get("regex"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2ExclusionRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2ExclusionRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2ExclusionRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2ExclusionRule.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2ExclusionRule>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2ExclusionRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2ExclusionRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2ExclusionRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2ExclusionRule
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2ExclusionRule
   */
  public static GooglePrivacyDlpV2ExclusionRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2ExclusionRule.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2ExclusionRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

