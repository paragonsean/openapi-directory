/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message representing a set of files in a Cloud Storage bucket. Regular expressions are used to allow fine-grained control over which files in the bucket to include. Included files are those that match at least one item in &#x60;include_regex&#x60; and do not match any items in &#x60;exclude_regex&#x60;. Note that a file that matches items from both lists will _not_ be included. For a match to occur, the entire file path (i.e., everything in the url after the bucket name) must match the regular expression. For example, given the input &#x60;{bucket_name: \&quot;mybucket\&quot;, include_regex: [\&quot;directory1/.*\&quot;], exclude_regex: [\&quot;directory1/excluded.*\&quot;]}&#x60;: * &#x60;gs://mybucket/directory1/myfile&#x60; will be included * &#x60;gs://mybucket/directory1/directory2/myfile&#x60; will be included (&#x60;.*&#x60; matches across &#x60;/&#x60;) * &#x60;gs://mybucket/directory0/directory1/myfile&#x60; will _not_ be included (the full path doesn&#39;t match any items in &#x60;include_regex&#x60;) * &#x60;gs://mybucket/directory1/excludedfile&#x60; will _not_ be included (the path matches an item in &#x60;exclude_regex&#x60;) If &#x60;include_regex&#x60; is left empty, it will match all files by default (this is equivalent to setting &#x60;include_regex: [\&quot;.*\&quot;]&#x60;). Some other common use cases: * &#x60;{bucket_name: \&quot;mybucket\&quot;, exclude_regex: [\&quot;.*\\.pdf\&quot;]}&#x60; will include all files in &#x60;mybucket&#x60; except for .pdf files * &#x60;{bucket_name: \&quot;mybucket\&quot;, include_regex: [\&quot;directory/[^/]+\&quot;]}&#x60; will include all files directly under &#x60;gs://mybucket/directory/&#x60;, without matching across &#x60;/&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CloudStorageRegexFileSet {
  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_EXCLUDE_REGEX = "excludeRegex";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_REGEX)
  private List<String> excludeRegex = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_REGEX = "includeRegex";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REGEX)
  private List<String> includeRegex = new ArrayList<>();

  public GooglePrivacyDlpV2CloudStorageRegexFileSet() {
  }

  public GooglePrivacyDlpV2CloudStorageRegexFileSet bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * The name of a Cloud Storage bucket. Required.
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public GooglePrivacyDlpV2CloudStorageRegexFileSet excludeRegex(List<String> excludeRegex) {
    this.excludeRegex = excludeRegex;
    return this;
  }

  public GooglePrivacyDlpV2CloudStorageRegexFileSet addExcludeRegexItem(String excludeRegexItem) {
    if (this.excludeRegex == null) {
      this.excludeRegex = new ArrayList<>();
    }
    this.excludeRegex.add(excludeRegexItem);
    return this;
  }

  /**
   * A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
   * @return excludeRegex
   */
  @javax.annotation.Nullable
  public List<String> getExcludeRegex() {
    return excludeRegex;
  }

  public void setExcludeRegex(List<String> excludeRegex) {
    this.excludeRegex = excludeRegex;
  }


  public GooglePrivacyDlpV2CloudStorageRegexFileSet includeRegex(List<String> includeRegex) {
    this.includeRegex = includeRegex;
    return this;
  }

  public GooglePrivacyDlpV2CloudStorageRegexFileSet addIncludeRegexItem(String includeRegexItem) {
    if (this.includeRegex == null) {
      this.includeRegex = new ArrayList<>();
    }
    this.includeRegex.add(includeRegexItem);
    return this;
  }

  /**
   * A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in &#x60;exclude_regex&#x60;. Leaving this field empty will match all files by default (this is equivalent to including &#x60;.*&#x60; in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.
   * @return includeRegex
   */
  @javax.annotation.Nullable
  public List<String> getIncludeRegex() {
    return includeRegex;
  }

  public void setIncludeRegex(List<String> includeRegex) {
    this.includeRegex = includeRegex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CloudStorageRegexFileSet googlePrivacyDlpV2CloudStorageRegexFileSet = (GooglePrivacyDlpV2CloudStorageRegexFileSet) o;
    return Objects.equals(this.bucketName, googlePrivacyDlpV2CloudStorageRegexFileSet.bucketName) &&
        Objects.equals(this.excludeRegex, googlePrivacyDlpV2CloudStorageRegexFileSet.excludeRegex) &&
        Objects.equals(this.includeRegex, googlePrivacyDlpV2CloudStorageRegexFileSet.includeRegex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketName, excludeRegex, includeRegex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CloudStorageRegexFileSet {\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    excludeRegex: ").append(toIndentedString(excludeRegex)).append("\n");
    sb.append("    includeRegex: ").append(toIndentedString(includeRegex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketName");
    openapiFields.add("excludeRegex");
    openapiFields.add("includeRegex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CloudStorageRegexFileSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CloudStorageRegexFileSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CloudStorageRegexFileSet is not found in the empty JSON string", GooglePrivacyDlpV2CloudStorageRegexFileSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CloudStorageRegexFileSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CloudStorageRegexFileSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucketName") != null && !jsonObj.get("bucketName").isJsonNull()) && !jsonObj.get("bucketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeRegex") != null && !jsonObj.get("excludeRegex").isJsonNull() && !jsonObj.get("excludeRegex").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeRegex` to be an array in the JSON string but got `%s`", jsonObj.get("excludeRegex").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeRegex") != null && !jsonObj.get("includeRegex").isJsonNull() && !jsonObj.get("includeRegex").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeRegex` to be an array in the JSON string but got `%s`", jsonObj.get("includeRegex").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CloudStorageRegexFileSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CloudStorageRegexFileSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CloudStorageRegexFileSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CloudStorageRegexFileSet.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CloudStorageRegexFileSet>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CloudStorageRegexFileSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CloudStorageRegexFileSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CloudStorageRegexFileSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CloudStorageRegexFileSet
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CloudStorageRegexFileSet
   */
  public static GooglePrivacyDlpV2CloudStorageRegexFileSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CloudStorageRegexFileSet.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CloudStorageRegexFileSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

