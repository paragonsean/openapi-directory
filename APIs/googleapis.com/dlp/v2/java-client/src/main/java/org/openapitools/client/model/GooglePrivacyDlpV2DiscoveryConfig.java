/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2DataProfileAction;
import org.openapitools.client.model.GooglePrivacyDlpV2DiscoveryTarget;
import org.openapitools.client.model.GooglePrivacyDlpV2Error;
import org.openapitools.client.model.GooglePrivacyDlpV2OrgConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for discovery to scan resources for profile generation. Only one discovery configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DiscoveryConfig {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<GooglePrivacyDlpV2DataProfileAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<GooglePrivacyDlpV2Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSPECT_TEMPLATES = "inspectTemplates";
  @SerializedName(SERIALIZED_NAME_INSPECT_TEMPLATES)
  private List<String> inspectTemplates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_RUN_TIME = "lastRunTime";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_TIME)
  private String lastRunTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORG_CONFIG = "orgConfig";
  @SerializedName(SERIALIZED_NAME_ORG_CONFIG)
  private GooglePrivacyDlpV2OrgConfig orgConfig;

  /**
   * Required. A status for this configuration.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    RUNNING("RUNNING"),
    
    PAUSED("PAUSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<GooglePrivacyDlpV2DiscoveryTarget> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public GooglePrivacyDlpV2DiscoveryConfig() {
  }

  public GooglePrivacyDlpV2DiscoveryConfig(
     String createTime, 
     List<GooglePrivacyDlpV2Error> errors, 
     String lastRunTime, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.errors = errors;
    this.lastRunTime = lastRunTime;
    this.updateTime = updateTime;
  }

  public GooglePrivacyDlpV2DiscoveryConfig actions(List<GooglePrivacyDlpV2DataProfileAction> actions) {
    this.actions = actions;
    return this;
  }

  public GooglePrivacyDlpV2DiscoveryConfig addActionsItem(GooglePrivacyDlpV2DataProfileAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Actions to execute at the completion of scanning.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2DataProfileAction> getActions() {
    return actions;
  }

  public void setActions(List<GooglePrivacyDlpV2DataProfileAction> actions) {
    this.actions = actions;
  }


  /**
   * Output only. The creation timestamp of a DiscoveryConfig.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public GooglePrivacyDlpV2DiscoveryConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name (max 100 chars)
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2Error> getErrors() {
    return errors;
  }



  public GooglePrivacyDlpV2DiscoveryConfig inspectTemplates(List<String> inspectTemplates) {
    this.inspectTemplates = inspectTemplates;
    return this;
  }

  public GooglePrivacyDlpV2DiscoveryConfig addInspectTemplatesItem(String inspectTemplatesItem) {
    if (this.inspectTemplates == null) {
      this.inspectTemplates = new ArrayList<>();
    }
    this.inspectTemplates.add(inspectTemplatesItem);
    return this;
  }

  /**
   * Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \&quot;global\&quot;). Each region is scanned using the applicable template. If no region-specific template is specified, but a \&quot;global\&quot; template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region&#39;s data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.
   * @return inspectTemplates
   */
  @javax.annotation.Nullable
  public List<String> getInspectTemplates() {
    return inspectTemplates;
  }

  public void setInspectTemplates(List<String> inspectTemplates) {
    this.inspectTemplates = inspectTemplates;
  }


  /**
   * Output only. The timestamp of the last time this config was executed.
   * @return lastRunTime
   */
  @javax.annotation.Nullable
  public String getLastRunTime() {
    return lastRunTime;
  }



  public GooglePrivacyDlpV2DiscoveryConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example &#x60;projects/dlp-test-project/locations/global/discoveryConfigs/53234423&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GooglePrivacyDlpV2DiscoveryConfig orgConfig(GooglePrivacyDlpV2OrgConfig orgConfig) {
    this.orgConfig = orgConfig;
    return this;
  }

  /**
   * Get orgConfig
   * @return orgConfig
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2OrgConfig getOrgConfig() {
    return orgConfig;
  }

  public void setOrgConfig(GooglePrivacyDlpV2OrgConfig orgConfig) {
    this.orgConfig = orgConfig;
  }


  public GooglePrivacyDlpV2DiscoveryConfig status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Required. A status for this configuration.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GooglePrivacyDlpV2DiscoveryConfig targets(List<GooglePrivacyDlpV2DiscoveryTarget> targets) {
    this.targets = targets;
    return this;
  }

  public GooglePrivacyDlpV2DiscoveryConfig addTargetsItem(GooglePrivacyDlpV2DiscoveryTarget targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Target to match against for determining what to scan and how frequently.
   * @return targets
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2DiscoveryTarget> getTargets() {
    return targets;
  }

  public void setTargets(List<GooglePrivacyDlpV2DiscoveryTarget> targets) {
    this.targets = targets;
  }


  /**
   * Output only. The last update timestamp of a DiscoveryConfig.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DiscoveryConfig googlePrivacyDlpV2DiscoveryConfig = (GooglePrivacyDlpV2DiscoveryConfig) o;
    return Objects.equals(this.actions, googlePrivacyDlpV2DiscoveryConfig.actions) &&
        Objects.equals(this.createTime, googlePrivacyDlpV2DiscoveryConfig.createTime) &&
        Objects.equals(this.displayName, googlePrivacyDlpV2DiscoveryConfig.displayName) &&
        Objects.equals(this.errors, googlePrivacyDlpV2DiscoveryConfig.errors) &&
        Objects.equals(this.inspectTemplates, googlePrivacyDlpV2DiscoveryConfig.inspectTemplates) &&
        Objects.equals(this.lastRunTime, googlePrivacyDlpV2DiscoveryConfig.lastRunTime) &&
        Objects.equals(this.name, googlePrivacyDlpV2DiscoveryConfig.name) &&
        Objects.equals(this.orgConfig, googlePrivacyDlpV2DiscoveryConfig.orgConfig) &&
        Objects.equals(this.status, googlePrivacyDlpV2DiscoveryConfig.status) &&
        Objects.equals(this.targets, googlePrivacyDlpV2DiscoveryConfig.targets) &&
        Objects.equals(this.updateTime, googlePrivacyDlpV2DiscoveryConfig.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, createTime, displayName, errors, inspectTemplates, lastRunTime, name, orgConfig, status, targets, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DiscoveryConfig {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    inspectTemplates: ").append(toIndentedString(inspectTemplates)).append("\n");
    sb.append("    lastRunTime: ").append(toIndentedString(lastRunTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgConfig: ").append(toIndentedString(orgConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("errors");
    openapiFields.add("inspectTemplates");
    openapiFields.add("lastRunTime");
    openapiFields.add("name");
    openapiFields.add("orgConfig");
    openapiFields.add("status");
    openapiFields.add("targets");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DiscoveryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DiscoveryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DiscoveryConfig is not found in the empty JSON string", GooglePrivacyDlpV2DiscoveryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DiscoveryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DiscoveryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            GooglePrivacyDlpV2DataProfileAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            GooglePrivacyDlpV2Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inspectTemplates") != null && !jsonObj.get("inspectTemplates").isJsonNull() && !jsonObj.get("inspectTemplates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inspectTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("inspectTemplates").toString()));
      }
      if ((jsonObj.get("lastRunTime") != null && !jsonObj.get("lastRunTime").isJsonNull()) && !jsonObj.get("lastRunTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastRunTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastRunTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `orgConfig`
      if (jsonObj.get("orgConfig") != null && !jsonObj.get("orgConfig").isJsonNull()) {
        GooglePrivacyDlpV2OrgConfig.validateJsonElement(jsonObj.get("orgConfig"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        JsonArray jsonArraytargets = jsonObj.getAsJsonArray("targets");
        if (jsonArraytargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
          }

          // validate the optional field `targets` (array)
          for (int i = 0; i < jsonArraytargets.size(); i++) {
            GooglePrivacyDlpV2DiscoveryTarget.validateJsonElement(jsonArraytargets.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DiscoveryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DiscoveryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DiscoveryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DiscoveryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DiscoveryConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DiscoveryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DiscoveryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DiscoveryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DiscoveryConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DiscoveryConfig
   */
  public static GooglePrivacyDlpV2DiscoveryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DiscoveryConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DiscoveryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

