/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2DetectionRule;
import org.openapitools.client.model.GooglePrivacyDlpV2Dictionary;
import org.openapitools.client.model.GooglePrivacyDlpV2InfoType;
import org.openapitools.client.model.GooglePrivacyDlpV2Regex;
import org.openapitools.client.model.GooglePrivacyDlpV2SensitivityScore;
import org.openapitools.client.model.GooglePrivacyDlpV2StoredType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2CustomInfoType {
  public static final String SERIALIZED_NAME_DETECTION_RULES = "detectionRules";
  @SerializedName(SERIALIZED_NAME_DETECTION_RULES)
  private List<GooglePrivacyDlpV2DetectionRule> detectionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_DICTIONARY = "dictionary";
  @SerializedName(SERIALIZED_NAME_DICTIONARY)
  private GooglePrivacyDlpV2Dictionary dictionary;

  /**
   * If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
   */
  @JsonAdapter(ExclusionTypeEnum.Adapter.class)
  public enum ExclusionTypeEnum {
    UNSPECIFIED("EXCLUSION_TYPE_UNSPECIFIED"),
    
    EXCLUDE("EXCLUSION_TYPE_EXCLUDE");

    private String value;

    ExclusionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExclusionTypeEnum fromValue(String value) {
      for (ExclusionTypeEnum b : ExclusionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExclusionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExclusionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExclusionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExclusionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExclusionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUSION_TYPE = "exclusionType";
  @SerializedName(SERIALIZED_NAME_EXCLUSION_TYPE)
  private ExclusionTypeEnum exclusionType;

  public static final String SERIALIZED_NAME_INFO_TYPE = "infoType";
  @SerializedName(SERIALIZED_NAME_INFO_TYPE)
  private GooglePrivacyDlpV2InfoType infoType;

  /**
   * Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to &#x60;VERY_LIKELY&#x60; if not specified.
   */
  @JsonAdapter(LikelihoodEnum.Adapter.class)
  public enum LikelihoodEnum {
    LIKELIHOOD_UNSPECIFIED("LIKELIHOOD_UNSPECIFIED"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    LikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LikelihoodEnum fromValue(String value) {
      for (LikelihoodEnum b : LikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIKELIHOOD = "likelihood";
  @SerializedName(SERIALIZED_NAME_LIKELIHOOD)
  private LikelihoodEnum likelihood;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private GooglePrivacyDlpV2Regex regex;

  public static final String SERIALIZED_NAME_SENSITIVITY_SCORE = "sensitivityScore";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_SCORE)
  private GooglePrivacyDlpV2SensitivityScore sensitivityScore;

  public static final String SERIALIZED_NAME_STORED_TYPE = "storedType";
  @SerializedName(SERIALIZED_NAME_STORED_TYPE)
  private GooglePrivacyDlpV2StoredType storedType;

  public static final String SERIALIZED_NAME_SURROGATE_TYPE = "surrogateType";
  @SerializedName(SERIALIZED_NAME_SURROGATE_TYPE)
  private Object surrogateType;

  public GooglePrivacyDlpV2CustomInfoType() {
  }

  public GooglePrivacyDlpV2CustomInfoType detectionRules(List<GooglePrivacyDlpV2DetectionRule> detectionRules) {
    this.detectionRules = detectionRules;
    return this;
  }

  public GooglePrivacyDlpV2CustomInfoType addDetectionRulesItem(GooglePrivacyDlpV2DetectionRule detectionRulesItem) {
    if (this.detectionRules == null) {
      this.detectionRules = new ArrayList<>();
    }
    this.detectionRules.add(detectionRulesItem);
    return this;
  }

  /**
   * Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the &#x60;surrogate_type&#x60; CustomInfoType.
   * @return detectionRules
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2DetectionRule> getDetectionRules() {
    return detectionRules;
  }

  public void setDetectionRules(List<GooglePrivacyDlpV2DetectionRule> detectionRules) {
    this.detectionRules = detectionRules;
  }


  public GooglePrivacyDlpV2CustomInfoType dictionary(GooglePrivacyDlpV2Dictionary dictionary) {
    this.dictionary = dictionary;
    return this;
  }

  /**
   * Get dictionary
   * @return dictionary
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Dictionary getDictionary() {
    return dictionary;
  }

  public void setDictionary(GooglePrivacyDlpV2Dictionary dictionary) {
    this.dictionary = dictionary;
  }


  public GooglePrivacyDlpV2CustomInfoType exclusionType(ExclusionTypeEnum exclusionType) {
    this.exclusionType = exclusionType;
    return this;
  }

  /**
   * If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.
   * @return exclusionType
   */
  @javax.annotation.Nullable
  public ExclusionTypeEnum getExclusionType() {
    return exclusionType;
  }

  public void setExclusionType(ExclusionTypeEnum exclusionType) {
    this.exclusionType = exclusionType;
  }


  public GooglePrivacyDlpV2CustomInfoType infoType(GooglePrivacyDlpV2InfoType infoType) {
    this.infoType = infoType;
    return this;
  }

  /**
   * Get infoType
   * @return infoType
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2InfoType getInfoType() {
    return infoType;
  }

  public void setInfoType(GooglePrivacyDlpV2InfoType infoType) {
    this.infoType = infoType;
  }


  public GooglePrivacyDlpV2CustomInfoType likelihood(LikelihoodEnum likelihood) {
    this.likelihood = likelihood;
    return this;
  }

  /**
   * Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to &#x60;VERY_LIKELY&#x60; if not specified.
   * @return likelihood
   */
  @javax.annotation.Nullable
  public LikelihoodEnum getLikelihood() {
    return likelihood;
  }

  public void setLikelihood(LikelihoodEnum likelihood) {
    this.likelihood = likelihood;
  }


  public GooglePrivacyDlpV2CustomInfoType regex(GooglePrivacyDlpV2Regex regex) {
    this.regex = regex;
    return this;
  }

  /**
   * Get regex
   * @return regex
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2Regex getRegex() {
    return regex;
  }

  public void setRegex(GooglePrivacyDlpV2Regex regex) {
    this.regex = regex;
  }


  public GooglePrivacyDlpV2CustomInfoType sensitivityScore(GooglePrivacyDlpV2SensitivityScore sensitivityScore) {
    this.sensitivityScore = sensitivityScore;
    return this;
  }

  /**
   * Get sensitivityScore
   * @return sensitivityScore
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2SensitivityScore getSensitivityScore() {
    return sensitivityScore;
  }

  public void setSensitivityScore(GooglePrivacyDlpV2SensitivityScore sensitivityScore) {
    this.sensitivityScore = sensitivityScore;
  }


  public GooglePrivacyDlpV2CustomInfoType storedType(GooglePrivacyDlpV2StoredType storedType) {
    this.storedType = storedType;
    return this;
  }

  /**
   * Get storedType
   * @return storedType
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2StoredType getStoredType() {
    return storedType;
  }

  public void setStoredType(GooglePrivacyDlpV2StoredType storedType) {
    this.storedType = storedType;
  }


  public GooglePrivacyDlpV2CustomInfoType surrogateType(Object surrogateType) {
    this.surrogateType = surrogateType;
    return this;
  }

  /**
   * Message for detecting output from deidentification transformations such as [&#x60;CryptoReplaceFfxFpeConfig&#x60;](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a \&quot;surrogate\&quot; as output. This should be used in conjunction with a field on the transformation such as &#x60;surrogate_info_type&#x60;. This CustomInfoType does not support the use of &#x60;detection_rules&#x60;.
   * @return surrogateType
   */
  @javax.annotation.Nullable
  public Object getSurrogateType() {
    return surrogateType;
  }

  public void setSurrogateType(Object surrogateType) {
    this.surrogateType = surrogateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2CustomInfoType googlePrivacyDlpV2CustomInfoType = (GooglePrivacyDlpV2CustomInfoType) o;
    return Objects.equals(this.detectionRules, googlePrivacyDlpV2CustomInfoType.detectionRules) &&
        Objects.equals(this.dictionary, googlePrivacyDlpV2CustomInfoType.dictionary) &&
        Objects.equals(this.exclusionType, googlePrivacyDlpV2CustomInfoType.exclusionType) &&
        Objects.equals(this.infoType, googlePrivacyDlpV2CustomInfoType.infoType) &&
        Objects.equals(this.likelihood, googlePrivacyDlpV2CustomInfoType.likelihood) &&
        Objects.equals(this.regex, googlePrivacyDlpV2CustomInfoType.regex) &&
        Objects.equals(this.sensitivityScore, googlePrivacyDlpV2CustomInfoType.sensitivityScore) &&
        Objects.equals(this.storedType, googlePrivacyDlpV2CustomInfoType.storedType) &&
        Objects.equals(this.surrogateType, googlePrivacyDlpV2CustomInfoType.surrogateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectionRules, dictionary, exclusionType, infoType, likelihood, regex, sensitivityScore, storedType, surrogateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2CustomInfoType {\n");
    sb.append("    detectionRules: ").append(toIndentedString(detectionRules)).append("\n");
    sb.append("    dictionary: ").append(toIndentedString(dictionary)).append("\n");
    sb.append("    exclusionType: ").append(toIndentedString(exclusionType)).append("\n");
    sb.append("    infoType: ").append(toIndentedString(infoType)).append("\n");
    sb.append("    likelihood: ").append(toIndentedString(likelihood)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    sensitivityScore: ").append(toIndentedString(sensitivityScore)).append("\n");
    sb.append("    storedType: ").append(toIndentedString(storedType)).append("\n");
    sb.append("    surrogateType: ").append(toIndentedString(surrogateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detectionRules");
    openapiFields.add("dictionary");
    openapiFields.add("exclusionType");
    openapiFields.add("infoType");
    openapiFields.add("likelihood");
    openapiFields.add("regex");
    openapiFields.add("sensitivityScore");
    openapiFields.add("storedType");
    openapiFields.add("surrogateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2CustomInfoType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2CustomInfoType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2CustomInfoType is not found in the empty JSON string", GooglePrivacyDlpV2CustomInfoType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2CustomInfoType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2CustomInfoType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("detectionRules") != null && !jsonObj.get("detectionRules").isJsonNull()) {
        JsonArray jsonArraydetectionRules = jsonObj.getAsJsonArray("detectionRules");
        if (jsonArraydetectionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detectionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detectionRules` to be an array in the JSON string but got `%s`", jsonObj.get("detectionRules").toString()));
          }

          // validate the optional field `detectionRules` (array)
          for (int i = 0; i < jsonArraydetectionRules.size(); i++) {
            GooglePrivacyDlpV2DetectionRule.validateJsonElement(jsonArraydetectionRules.get(i));
          };
        }
      }
      // validate the optional field `dictionary`
      if (jsonObj.get("dictionary") != null && !jsonObj.get("dictionary").isJsonNull()) {
        GooglePrivacyDlpV2Dictionary.validateJsonElement(jsonObj.get("dictionary"));
      }
      if ((jsonObj.get("exclusionType") != null && !jsonObj.get("exclusionType").isJsonNull()) && !jsonObj.get("exclusionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusionType").toString()));
      }
      // validate the optional field `exclusionType`
      if (jsonObj.get("exclusionType") != null && !jsonObj.get("exclusionType").isJsonNull()) {
        ExclusionTypeEnum.validateJsonElement(jsonObj.get("exclusionType"));
      }
      // validate the optional field `infoType`
      if (jsonObj.get("infoType") != null && !jsonObj.get("infoType").isJsonNull()) {
        GooglePrivacyDlpV2InfoType.validateJsonElement(jsonObj.get("infoType"));
      }
      if ((jsonObj.get("likelihood") != null && !jsonObj.get("likelihood").isJsonNull()) && !jsonObj.get("likelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `likelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("likelihood").toString()));
      }
      // validate the optional field `likelihood`
      if (jsonObj.get("likelihood") != null && !jsonObj.get("likelihood").isJsonNull()) {
        LikelihoodEnum.validateJsonElement(jsonObj.get("likelihood"));
      }
      // validate the optional field `regex`
      if (jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) {
        GooglePrivacyDlpV2Regex.validateJsonElement(jsonObj.get("regex"));
      }
      // validate the optional field `sensitivityScore`
      if (jsonObj.get("sensitivityScore") != null && !jsonObj.get("sensitivityScore").isJsonNull()) {
        GooglePrivacyDlpV2SensitivityScore.validateJsonElement(jsonObj.get("sensitivityScore"));
      }
      // validate the optional field `storedType`
      if (jsonObj.get("storedType") != null && !jsonObj.get("storedType").isJsonNull()) {
        GooglePrivacyDlpV2StoredType.validateJsonElement(jsonObj.get("storedType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2CustomInfoType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2CustomInfoType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2CustomInfoType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2CustomInfoType.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2CustomInfoType>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2CustomInfoType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2CustomInfoType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2CustomInfoType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2CustomInfoType
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2CustomInfoType
   */
  public static GooglePrivacyDlpV2CustomInfoType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2CustomInfoType.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2CustomInfoType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

