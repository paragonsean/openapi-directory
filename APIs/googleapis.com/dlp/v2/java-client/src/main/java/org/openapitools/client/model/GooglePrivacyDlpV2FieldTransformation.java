/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2FieldId;
import org.openapitools.client.model.GooglePrivacyDlpV2InfoTypeTransformations;
import org.openapitools.client.model.GooglePrivacyDlpV2PrimitiveTransformation;
import org.openapitools.client.model.GooglePrivacyDlpV2RecordCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The transformation to apply to the field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2FieldTransformation {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private GooglePrivacyDlpV2RecordCondition condition;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<GooglePrivacyDlpV2FieldId> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_INFO_TYPE_TRANSFORMATIONS = "infoTypeTransformations";
  @SerializedName(SERIALIZED_NAME_INFO_TYPE_TRANSFORMATIONS)
  private GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations;

  public static final String SERIALIZED_NAME_PRIMITIVE_TRANSFORMATION = "primitiveTransformation";
  @SerializedName(SERIALIZED_NAME_PRIMITIVE_TRANSFORMATION)
  private GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation;

  public GooglePrivacyDlpV2FieldTransformation() {
  }

  public GooglePrivacyDlpV2FieldTransformation condition(GooglePrivacyDlpV2RecordCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2RecordCondition getCondition() {
    return condition;
  }

  public void setCondition(GooglePrivacyDlpV2RecordCondition condition) {
    this.condition = condition;
  }


  public GooglePrivacyDlpV2FieldTransformation fields(List<GooglePrivacyDlpV2FieldId> fields) {
    this.fields = fields;
    return this;
  }

  public GooglePrivacyDlpV2FieldTransformation addFieldsItem(GooglePrivacyDlpV2FieldId fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \&quot;contact.nums[0].type\&quot;, use \&quot;contact.nums.type\&quot;.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2FieldId> getFields() {
    return fields;
  }

  public void setFields(List<GooglePrivacyDlpV2FieldId> fields) {
    this.fields = fields;
  }


  public GooglePrivacyDlpV2FieldTransformation infoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations) {
    this.infoTypeTransformations = infoTypeTransformations;
    return this;
  }

  /**
   * Get infoTypeTransformations
   * @return infoTypeTransformations
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2InfoTypeTransformations getInfoTypeTransformations() {
    return infoTypeTransformations;
  }

  public void setInfoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations) {
    this.infoTypeTransformations = infoTypeTransformations;
  }


  public GooglePrivacyDlpV2FieldTransformation primitiveTransformation(GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation) {
    this.primitiveTransformation = primitiveTransformation;
    return this;
  }

  /**
   * Get primitiveTransformation
   * @return primitiveTransformation
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2PrimitiveTransformation getPrimitiveTransformation() {
    return primitiveTransformation;
  }

  public void setPrimitiveTransformation(GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation) {
    this.primitiveTransformation = primitiveTransformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2FieldTransformation googlePrivacyDlpV2FieldTransformation = (GooglePrivacyDlpV2FieldTransformation) o;
    return Objects.equals(this.condition, googlePrivacyDlpV2FieldTransformation.condition) &&
        Objects.equals(this.fields, googlePrivacyDlpV2FieldTransformation.fields) &&
        Objects.equals(this.infoTypeTransformations, googlePrivacyDlpV2FieldTransformation.infoTypeTransformations) &&
        Objects.equals(this.primitiveTransformation, googlePrivacyDlpV2FieldTransformation.primitiveTransformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, fields, infoTypeTransformations, primitiveTransformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2FieldTransformation {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    infoTypeTransformations: ").append(toIndentedString(infoTypeTransformations)).append("\n");
    sb.append("    primitiveTransformation: ").append(toIndentedString(primitiveTransformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("fields");
    openapiFields.add("infoTypeTransformations");
    openapiFields.add("primitiveTransformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2FieldTransformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2FieldTransformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2FieldTransformation is not found in the empty JSON string", GooglePrivacyDlpV2FieldTransformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2FieldTransformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2FieldTransformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        GooglePrivacyDlpV2RecordCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            GooglePrivacyDlpV2FieldId.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      // validate the optional field `infoTypeTransformations`
      if (jsonObj.get("infoTypeTransformations") != null && !jsonObj.get("infoTypeTransformations").isJsonNull()) {
        GooglePrivacyDlpV2InfoTypeTransformations.validateJsonElement(jsonObj.get("infoTypeTransformations"));
      }
      // validate the optional field `primitiveTransformation`
      if (jsonObj.get("primitiveTransformation") != null && !jsonObj.get("primitiveTransformation").isJsonNull()) {
        GooglePrivacyDlpV2PrimitiveTransformation.validateJsonElement(jsonObj.get("primitiveTransformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2FieldTransformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2FieldTransformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2FieldTransformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2FieldTransformation.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2FieldTransformation>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2FieldTransformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2FieldTransformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2FieldTransformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2FieldTransformation
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2FieldTransformation
   */
  public static GooglePrivacyDlpV2FieldTransformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2FieldTransformation.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2FieldTransformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

