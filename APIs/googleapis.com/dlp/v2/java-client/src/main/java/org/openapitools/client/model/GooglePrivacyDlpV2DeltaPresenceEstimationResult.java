/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Result of the Î´-presence computation. Note that these results are an estimation, not exact values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2DeltaPresenceEstimationResult {
  public static final String SERIALIZED_NAME_DELTA_PRESENCE_ESTIMATION_HISTOGRAM = "deltaPresenceEstimationHistogram";
  @SerializedName(SERIALIZED_NAME_DELTA_PRESENCE_ESTIMATION_HISTOGRAM)
  private List<GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket> deltaPresenceEstimationHistogram = new ArrayList<>();

  public GooglePrivacyDlpV2DeltaPresenceEstimationResult() {
  }

  public GooglePrivacyDlpV2DeltaPresenceEstimationResult deltaPresenceEstimationHistogram(List<GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket> deltaPresenceEstimationHistogram) {
    this.deltaPresenceEstimationHistogram = deltaPresenceEstimationHistogram;
    return this;
  }

  public GooglePrivacyDlpV2DeltaPresenceEstimationResult addDeltaPresenceEstimationHistogramItem(GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket deltaPresenceEstimationHistogramItem) {
    if (this.deltaPresenceEstimationHistogram == null) {
      this.deltaPresenceEstimationHistogram = new ArrayList<>();
    }
    this.deltaPresenceEstimationHistogram.add(deltaPresenceEstimationHistogramItem);
    return this;
  }

  /**
   * The intervals [min_probability, max_probability) do not overlap. If a value doesn&#39;t correspond to any such interval, the associated frequency is zero. For example, the following records: {min_probability: 0, max_probability: 0.1, frequency: 17} {min_probability: 0.2, max_probability: 0.3, frequency: 42} {min_probability: 0.3, max_probability: 0.4, frequency: 99} mean that there are no record with an estimated probability in [0.1, 0.2) nor larger or equal to 0.4.
   * @return deltaPresenceEstimationHistogram
   */
  @javax.annotation.Nullable
  public List<GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket> getDeltaPresenceEstimationHistogram() {
    return deltaPresenceEstimationHistogram;
  }

  public void setDeltaPresenceEstimationHistogram(List<GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket> deltaPresenceEstimationHistogram) {
    this.deltaPresenceEstimationHistogram = deltaPresenceEstimationHistogram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2DeltaPresenceEstimationResult googlePrivacyDlpV2DeltaPresenceEstimationResult = (GooglePrivacyDlpV2DeltaPresenceEstimationResult) o;
    return Objects.equals(this.deltaPresenceEstimationHistogram, googlePrivacyDlpV2DeltaPresenceEstimationResult.deltaPresenceEstimationHistogram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deltaPresenceEstimationHistogram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2DeltaPresenceEstimationResult {\n");
    sb.append("    deltaPresenceEstimationHistogram: ").append(toIndentedString(deltaPresenceEstimationHistogram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deltaPresenceEstimationHistogram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2DeltaPresenceEstimationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2DeltaPresenceEstimationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2DeltaPresenceEstimationResult is not found in the empty JSON string", GooglePrivacyDlpV2DeltaPresenceEstimationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2DeltaPresenceEstimationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2DeltaPresenceEstimationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deltaPresenceEstimationHistogram") != null && !jsonObj.get("deltaPresenceEstimationHistogram").isJsonNull()) {
        JsonArray jsonArraydeltaPresenceEstimationHistogram = jsonObj.getAsJsonArray("deltaPresenceEstimationHistogram");
        if (jsonArraydeltaPresenceEstimationHistogram != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deltaPresenceEstimationHistogram").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deltaPresenceEstimationHistogram` to be an array in the JSON string but got `%s`", jsonObj.get("deltaPresenceEstimationHistogram").toString()));
          }

          // validate the optional field `deltaPresenceEstimationHistogram` (array)
          for (int i = 0; i < jsonArraydeltaPresenceEstimationHistogram.size(); i++) {
            GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket.validateJsonElement(jsonArraydeltaPresenceEstimationHistogram.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2DeltaPresenceEstimationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2DeltaPresenceEstimationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2DeltaPresenceEstimationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2DeltaPresenceEstimationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2DeltaPresenceEstimationResult>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2DeltaPresenceEstimationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2DeltaPresenceEstimationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2DeltaPresenceEstimationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2DeltaPresenceEstimationResult
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2DeltaPresenceEstimationResult
   */
  public static GooglePrivacyDlpV2DeltaPresenceEstimationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2DeltaPresenceEstimationResult.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2DeltaPresenceEstimationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

