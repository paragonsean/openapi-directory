/*
 * Sensitive Data Protection (DLP)
 * Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GooglePrivacyDlpV2BigQueryOptions;
import org.openapitools.client.model.GooglePrivacyDlpV2CloudStorageOptions;
import org.openapitools.client.model.GooglePrivacyDlpV2DatastoreOptions;
import org.openapitools.client.model.GooglePrivacyDlpV2HybridOptions;
import org.openapitools.client.model.GooglePrivacyDlpV2TimespanConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Shared message indicating Cloud storage type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:39.298775-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GooglePrivacyDlpV2StorageConfig {
  public static final String SERIALIZED_NAME_BIG_QUERY_OPTIONS = "bigQueryOptions";
  @SerializedName(SERIALIZED_NAME_BIG_QUERY_OPTIONS)
  private GooglePrivacyDlpV2BigQueryOptions bigQueryOptions;

  public static final String SERIALIZED_NAME_CLOUD_STORAGE_OPTIONS = "cloudStorageOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_STORAGE_OPTIONS)
  private GooglePrivacyDlpV2CloudStorageOptions cloudStorageOptions;

  public static final String SERIALIZED_NAME_DATASTORE_OPTIONS = "datastoreOptions";
  @SerializedName(SERIALIZED_NAME_DATASTORE_OPTIONS)
  private GooglePrivacyDlpV2DatastoreOptions datastoreOptions;

  public static final String SERIALIZED_NAME_HYBRID_OPTIONS = "hybridOptions";
  @SerializedName(SERIALIZED_NAME_HYBRID_OPTIONS)
  private GooglePrivacyDlpV2HybridOptions hybridOptions;

  public static final String SERIALIZED_NAME_TIMESPAN_CONFIG = "timespanConfig";
  @SerializedName(SERIALIZED_NAME_TIMESPAN_CONFIG)
  private GooglePrivacyDlpV2TimespanConfig timespanConfig;

  public GooglePrivacyDlpV2StorageConfig() {
  }

  public GooglePrivacyDlpV2StorageConfig bigQueryOptions(GooglePrivacyDlpV2BigQueryOptions bigQueryOptions) {
    this.bigQueryOptions = bigQueryOptions;
    return this;
  }

  /**
   * Get bigQueryOptions
   * @return bigQueryOptions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2BigQueryOptions getBigQueryOptions() {
    return bigQueryOptions;
  }

  public void setBigQueryOptions(GooglePrivacyDlpV2BigQueryOptions bigQueryOptions) {
    this.bigQueryOptions = bigQueryOptions;
  }


  public GooglePrivacyDlpV2StorageConfig cloudStorageOptions(GooglePrivacyDlpV2CloudStorageOptions cloudStorageOptions) {
    this.cloudStorageOptions = cloudStorageOptions;
    return this;
  }

  /**
   * Get cloudStorageOptions
   * @return cloudStorageOptions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2CloudStorageOptions getCloudStorageOptions() {
    return cloudStorageOptions;
  }

  public void setCloudStorageOptions(GooglePrivacyDlpV2CloudStorageOptions cloudStorageOptions) {
    this.cloudStorageOptions = cloudStorageOptions;
  }


  public GooglePrivacyDlpV2StorageConfig datastoreOptions(GooglePrivacyDlpV2DatastoreOptions datastoreOptions) {
    this.datastoreOptions = datastoreOptions;
    return this;
  }

  /**
   * Get datastoreOptions
   * @return datastoreOptions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2DatastoreOptions getDatastoreOptions() {
    return datastoreOptions;
  }

  public void setDatastoreOptions(GooglePrivacyDlpV2DatastoreOptions datastoreOptions) {
    this.datastoreOptions = datastoreOptions;
  }


  public GooglePrivacyDlpV2StorageConfig hybridOptions(GooglePrivacyDlpV2HybridOptions hybridOptions) {
    this.hybridOptions = hybridOptions;
    return this;
  }

  /**
   * Get hybridOptions
   * @return hybridOptions
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2HybridOptions getHybridOptions() {
    return hybridOptions;
  }

  public void setHybridOptions(GooglePrivacyDlpV2HybridOptions hybridOptions) {
    this.hybridOptions = hybridOptions;
  }


  public GooglePrivacyDlpV2StorageConfig timespanConfig(GooglePrivacyDlpV2TimespanConfig timespanConfig) {
    this.timespanConfig = timespanConfig;
    return this;
  }

  /**
   * Get timespanConfig
   * @return timespanConfig
   */
  @javax.annotation.Nullable
  public GooglePrivacyDlpV2TimespanConfig getTimespanConfig() {
    return timespanConfig;
  }

  public void setTimespanConfig(GooglePrivacyDlpV2TimespanConfig timespanConfig) {
    this.timespanConfig = timespanConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GooglePrivacyDlpV2StorageConfig googlePrivacyDlpV2StorageConfig = (GooglePrivacyDlpV2StorageConfig) o;
    return Objects.equals(this.bigQueryOptions, googlePrivacyDlpV2StorageConfig.bigQueryOptions) &&
        Objects.equals(this.cloudStorageOptions, googlePrivacyDlpV2StorageConfig.cloudStorageOptions) &&
        Objects.equals(this.datastoreOptions, googlePrivacyDlpV2StorageConfig.datastoreOptions) &&
        Objects.equals(this.hybridOptions, googlePrivacyDlpV2StorageConfig.hybridOptions) &&
        Objects.equals(this.timespanConfig, googlePrivacyDlpV2StorageConfig.timespanConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bigQueryOptions, cloudStorageOptions, datastoreOptions, hybridOptions, timespanConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GooglePrivacyDlpV2StorageConfig {\n");
    sb.append("    bigQueryOptions: ").append(toIndentedString(bigQueryOptions)).append("\n");
    sb.append("    cloudStorageOptions: ").append(toIndentedString(cloudStorageOptions)).append("\n");
    sb.append("    datastoreOptions: ").append(toIndentedString(datastoreOptions)).append("\n");
    sb.append("    hybridOptions: ").append(toIndentedString(hybridOptions)).append("\n");
    sb.append("    timespanConfig: ").append(toIndentedString(timespanConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bigQueryOptions");
    openapiFields.add("cloudStorageOptions");
    openapiFields.add("datastoreOptions");
    openapiFields.add("hybridOptions");
    openapiFields.add("timespanConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GooglePrivacyDlpV2StorageConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GooglePrivacyDlpV2StorageConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GooglePrivacyDlpV2StorageConfig is not found in the empty JSON string", GooglePrivacyDlpV2StorageConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GooglePrivacyDlpV2StorageConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GooglePrivacyDlpV2StorageConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bigQueryOptions`
      if (jsonObj.get("bigQueryOptions") != null && !jsonObj.get("bigQueryOptions").isJsonNull()) {
        GooglePrivacyDlpV2BigQueryOptions.validateJsonElement(jsonObj.get("bigQueryOptions"));
      }
      // validate the optional field `cloudStorageOptions`
      if (jsonObj.get("cloudStorageOptions") != null && !jsonObj.get("cloudStorageOptions").isJsonNull()) {
        GooglePrivacyDlpV2CloudStorageOptions.validateJsonElement(jsonObj.get("cloudStorageOptions"));
      }
      // validate the optional field `datastoreOptions`
      if (jsonObj.get("datastoreOptions") != null && !jsonObj.get("datastoreOptions").isJsonNull()) {
        GooglePrivacyDlpV2DatastoreOptions.validateJsonElement(jsonObj.get("datastoreOptions"));
      }
      // validate the optional field `hybridOptions`
      if (jsonObj.get("hybridOptions") != null && !jsonObj.get("hybridOptions").isJsonNull()) {
        GooglePrivacyDlpV2HybridOptions.validateJsonElement(jsonObj.get("hybridOptions"));
      }
      // validate the optional field `timespanConfig`
      if (jsonObj.get("timespanConfig") != null && !jsonObj.get("timespanConfig").isJsonNull()) {
        GooglePrivacyDlpV2TimespanConfig.validateJsonElement(jsonObj.get("timespanConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GooglePrivacyDlpV2StorageConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GooglePrivacyDlpV2StorageConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GooglePrivacyDlpV2StorageConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GooglePrivacyDlpV2StorageConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GooglePrivacyDlpV2StorageConfig>() {
           @Override
           public void write(JsonWriter out, GooglePrivacyDlpV2StorageConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GooglePrivacyDlpV2StorageConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GooglePrivacyDlpV2StorageConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GooglePrivacyDlpV2StorageConfig
   * @throws IOException if the JSON string is invalid with respect to GooglePrivacyDlpV2StorageConfig
   */
  public static GooglePrivacyDlpV2StorageConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GooglePrivacyDlpV2StorageConfig.class);
  }

  /**
   * Convert an instance of GooglePrivacyDlpV2StorageConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

