/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptProposalRequest from '../model/AcceptProposalRequest';
import AddDealAssociationRequest from '../model/AddDealAssociationRequest';
import AddNoteRequest from '../model/AddNoteRequest';
import Client from '../model/Client';
import ClientUser from '../model/ClientUser';
import ClientUserInvitation from '../model/ClientUserInvitation';
import Creative from '../model/Creative';
import ListClientUserInvitationsResponse from '../model/ListClientUserInvitationsResponse';
import ListClientUsersResponse from '../model/ListClientUsersResponse';
import ListClientsResponse from '../model/ListClientsResponse';
import ListCreativesResponse from '../model/ListCreativesResponse';
import ListDealAssociationsResponse from '../model/ListDealAssociationsResponse';
import ListProductsResponse from '../model/ListProductsResponse';
import ListProposalsResponse from '../model/ListProposalsResponse';
import ListPublisherProfilesResponse from '../model/ListPublisherProfilesResponse';
import Note from '../model/Note';
import PauseProposalDealsRequest from '../model/PauseProposalDealsRequest';
import PauseProposalRequest from '../model/PauseProposalRequest';
import Product from '../model/Product';
import Proposal from '../model/Proposal';
import PublisherProfile from '../model/PublisherProfile';
import RemoveDealAssociationRequest from '../model/RemoveDealAssociationRequest';
import ResumeProposalDealsRequest from '../model/ResumeProposalDealsRequest';
import WatchCreativeRequest from '../model/WatchCreativeRequest';

/**
* Accounts service.
* @module api/AccountsApi
* @version v2beta1
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsCreate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new client buyer.
     * @param {String} accountId Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Client} [client] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    adexchangebuyer2AccountsClientsCreate(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['client'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsCreate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a client buyer with a given client account ID.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer to retrieve. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    adexchangebuyer2AccountsClientsGet(accountId, clientAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsGet");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsInvitationsCreate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUserInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and sends out an email invitation to access an Ad Exchange client buyer account.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer that the user should be associated with. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ClientUserInvitation} [clientUserInvitation] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUserInvitation}
     */
    adexchangebuyer2AccountsClientsInvitationsCreate(accountId, clientAccountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clientUserInvitation'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsInvitationsCreate");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsInvitationsCreate");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientUserInvitation;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsInvitationsGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUserInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing client user invitation.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required)
     * @param {String} invitationId Numerical identifier of the user invitation to retrieve. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUserInvitation}
     */
    adexchangebuyer2AccountsClientsInvitationsGet(accountId, clientAccountId, invitationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsInvitationsGet");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsInvitationsGet");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling adexchangebuyer2AccountsClientsInvitationsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId,
        'invitationId': invitationId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientUserInvitation;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsInvitationsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClientUserInvitationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the client users invitations for a client with a given account ID.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the `-` character to list all the invitations for all the clients of a given sponsor buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call to the clients.invitations.list method.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsInvitationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClientUserInvitationsResponse}
     */
    adexchangebuyer2AccountsClientsInvitationsList(accountId, clientAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsInvitationsList");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsInvitationsList");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClientUserInvitationsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClientsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the clients for the current sponsor buyer.
     * @param {String} accountId Unique numerical account ID of the sponsor buyer to list the clients for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the accounts.clients.list method.
     * @param {String} [partnerClientId] Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the response.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClientsResponse}
     */
    adexchangebuyer2AccountsClientsList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'partnerClientId': opts['partnerClientId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClientsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsUpdate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing client buyer.
     * @param {String} accountId Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required)
     * @param {String} clientAccountId Unique numerical account ID of the client to update. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Client} [client] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Client}
     */
    adexchangebuyer2AccountsClientsUpdate(accountId, clientAccountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['client'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsUpdate");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Client;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsUsersGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an existing client user.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
     * @param {String} userId Numerical identifier of the user to retrieve. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUser}
     */
    adexchangebuyer2AccountsClientsUsersGet(accountId, clientAccountId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsUsersGet");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsUsersGet");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adexchangebuyer2AccountsClientsUsersGet");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientUser;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsUsersList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClientUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the known client users for a specified sponsor buyer account ID.
     * @param {String} accountId Numerical account ID of the sponsor buyer of the client to list users for. (required)
     * @param {String} clientAccountId The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the `-` character to list all the client users for all the clients of a given sponsor buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the accounts.clients.users.list method.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClientUsersResponse}
     */
    adexchangebuyer2AccountsClientsUsersList(accountId, clientAccountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsUsersList");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsUsersList");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClientUsersResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsClientsUsersUpdate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing client user. Only the user status can be changed on update.
     * @param {String} accountId Numerical account ID of the client's sponsor buyer. (required)
     * @param {String} clientAccountId Numerical account ID of the client buyer that the user to be retrieved is associated with. (required)
     * @param {String} userId Numerical identifier of the user to retrieve. (required)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ClientUser} [clientUser] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsClientsUsersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientUser}
     */
    adexchangebuyer2AccountsClientsUsersUpdate(accountId, clientAccountId, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['clientUser'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsClientsUsersUpdate");
      }
      // verify the required parameter 'clientAccountId' is set
      if (clientAccountId === undefined || clientAccountId === null) {
        throw new Error("Missing the required parameter 'clientAccountId' when calling adexchangebuyer2AccountsClientsUsersUpdate");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling adexchangebuyer2AccountsClientsUsersUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'clientAccountId': clientAccountId,
        'userId': userId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientUser;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesCreate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a creative.
     * @param {String} accountId The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/String} [duplicateIdMode] Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative).
     * @param {module:model/Creative} [creative] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    adexchangebuyer2AccountsCreativesCreate(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['creative'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesCreate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'duplicateIdMode': opts['duplicateIdMode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesDealAssociationsAdd operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsAddCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate an existing deal with a creative.
     * @param {String} accountId The account the creative belongs to.
     * @param {String} creativeId The ID of the creative associated with the deal.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddDealAssociationRequest} [addDealAssociationRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    adexchangebuyer2AccountsCreativesDealAssociationsAdd(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addDealAssociationRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesDealAssociationsAdd");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesDealAssociationsAdd");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesDealAssociationsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDealAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all creative-deal associations.
     * @param {String} accountId The account to list the associations from. Specify \"-\" to list all creatives the current user has access to.
     * @param {String} creativeId The creative ID to list the associations from. Specify \"-\" to list all creatives under the above account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to 'ListDealAssociations' method.
     * @param {String} [query] An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsId=*deals_id_string* - dealsStatus:{approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus:{approved, conditionally_approved, disapproved, not_checked} Example: 'dealsId=12345 AND dealsStatus:disapproved'
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDealAssociationsResponse}
     */
    adexchangebuyer2AccountsCreativesDealAssociationsList(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesDealAssociationsList");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesDealAssociationsList");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDealAssociationsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesDealAssociationsRemove operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsRemoveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove the association between a deal and a creative.
     * @param {String} accountId The account the creative belongs to.
     * @param {String} creativeId The ID of the creative associated with the deal.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RemoveDealAssociationRequest} [removeDealAssociationRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesDealAssociationsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    adexchangebuyer2AccountsCreativesDealAssociationsRemove(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeDealAssociationRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesDealAssociationsRemove");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesDealAssociationsRemove");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a creative.
     * @param {String} accountId The account the creative belongs to.
     * @param {String} creativeId The ID of the creative to retrieve.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    adexchangebuyer2AccountsCreativesGet(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesGet");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesGet");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreativesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists creatives.
     * @param {String} accountId The account to list the creatives from. Specify \"-\" to list all creatives the current user has access to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available through another call. If unspecified, server will pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to 'ListCreatives' method.
     * @param {String} [query] An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. Supported queries are: - accountId=*account_id_string* - creativeId=*creative_id_string* - dealsStatus: {approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus: {approved, conditionally_approved, disapproved, not_checked} - attribute: {a numeric attribute from the list of attributes} - disapprovalReason: {a reason from DisapprovalReason} Example: 'accountId=12345 AND (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47'
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreativesResponse}
     */
    adexchangebuyer2AccountsCreativesList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCreativesResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesStopWatching operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesStopWatchingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.
     * @param {String} accountId The account of the creative to stop notifications for.
     * @param {String} creativeId The creative ID of the creative to stop notifications for. Specify \"-\" to specify stopping account level notifications.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesStopWatchingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    adexchangebuyer2AccountsCreativesStopWatching(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesStopWatching");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesStopWatching");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesUpdate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Creative} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a creative.
     * @param {String} accountId The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
     * @param {String} creativeId The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Creative} [creative] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Creative}
     */
    adexchangebuyer2AccountsCreativesUpdate(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['creative'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesUpdate");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Creative;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsCreativesWatch operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsCreativesWatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.
     * @param {String} accountId The account of the creative to watch.
     * @param {String} creativeId The creative ID to watch for status changes. Specify \"-\" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a single notification will be sent to the creative-level notification topic.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/WatchCreativeRequest} [watchCreativeRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsCreativesWatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    adexchangebuyer2AccountsCreativesWatch(accountId, creativeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['watchCreativeRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsCreativesWatch");
      }
      // verify the required parameter 'creativeId' is set
      if (creativeId === undefined || creativeId === null) {
        throw new Error("Missing the required parameter 'creativeId' when calling adexchangebuyer2AccountsCreativesWatch");
      }

      let pathParams = {
        'accountId': accountId,
        'creativeId': creativeId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/creatives/{creativeId}:watch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsFinalizedProposalsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProposalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.
     * @param {String} accountId Account ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.
     * @param {module:model/String} [filterSyntax] Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] The page token as returned from ListProposalsResponse.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProposalsResponse}
     */
    adexchangebuyer2AccountsFinalizedProposalsList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsFinalizedProposalsList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'filterSyntax': opts['filterSyntax'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProposalsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/finalizedProposals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsFinalizedProposalsPause operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsPauseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update given deals to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The proposal_id of the proposal containing the deals.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/PauseProposalDealsRequest} [pauseProposalDealsRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsPauseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsFinalizedProposalsPause(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pauseProposalDealsRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsFinalizedProposalsPause");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsFinalizedProposalsPause");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsFinalizedProposalsResume operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update given deals to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The proposal_id of the proposal containing the deals.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ResumeProposalDealsRequest} [resumeProposalDealsRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsFinalizedProposalsResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsFinalizedProposalsResume(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['resumeProposalDealsRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsFinalizedProposalsResume");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsFinalizedProposalsResume");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProductsGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the requested product by ID.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} productId The ID for the product to get the head revision for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    adexchangebuyer2AccountsProductsGet(accountId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProductsGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling adexchangebuyer2AccountsProductsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Product;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProductsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProductsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProductsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all products visible to the buyer (optionally filtered by the specified PQL query).
     * @param {String} accountId Account ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] An optional PQL query used to query for products. See https://developers.google.com/ad-manager/docs/pqlreference for documentation about PQL and examples. Nested repeated fields, such as product.targetingCriterion.inclusions, cannot be filtered.
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] The page token as returned from ListProductsResponse.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProductsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProductsResponse}
     */
    adexchangebuyer2AccountsProductsList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProductsList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsAccept operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsAcceptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to accept.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AcceptProposalRequest} [acceptProposalRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsAccept(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['acceptProposalRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsAccept");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsAccept");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsAddNote operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsAddNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to attach the note to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddNoteRequest} [addNoteRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsAddNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    adexchangebuyer2AccountsProposalsAddNote(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addNoteRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsAddNote");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsAddNote");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsCancelNegotiation operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsCancelNegotiationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to cancel negotiation for.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsCancelNegotiationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsCancelNegotiation(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsCancelNegotiation");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsCancelNegotiation");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsCompleteSetup operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsCompleteSetupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can opt-in to manually update proposals to indicate that setup is complete. By default, proposal setup is automatically completed after their deals are finalized. Contact your Technical Account Manager to opt in. Buyers can call this method when the proposal has been finalized, and all the required creatives have been uploaded using the Creatives API. This call updates the `is_setup_completed` field on the deals in the proposal, and notifies the seller. The server then advances the revision number of the most recent proposal. To mark an individual deal as ready to serve, call `buyers.finalizedDeals.setReadyToServe` in the Marketplace API.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to mark as setup completed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsCompleteSetupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsCompleteSetup(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsCompleteSetup");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsCompleteSetup");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsCreate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.
     * @param {String} accountId Account ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Proposal} [proposal] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsCreate(accountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['proposal'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsCreate");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a proposal given its ID. The proposal is returned at its head revision.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The unique ID of the proposal
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsGet(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsGet");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsGet");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProposalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the ChildSeat's accountId in the request path.
     * @param {String} accountId Account ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered.
     * @param {module:model/String} [filterSyntax] Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER.
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] The page token as returned from ListProposalsResponse.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProposalsResponse}
     */
    adexchangebuyer2AccountsProposalsList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'filterSyntax': opts['filterSyntax'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProposalsResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsPause operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsPauseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to pause.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/PauseProposalRequest} [pauseProposalRequest] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsPauseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsPause(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['pauseProposalRequest'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsPause");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsPause");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsResume operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The ID of the proposal to resume.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsResume(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsResume");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsResume");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}:resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsProposalsUpdate operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsProposalsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Proposal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} proposalId The unique ID of the proposal.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Proposal} [proposal] 
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsProposalsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proposal}
     */
    adexchangebuyer2AccountsProposalsUpdate(accountId, proposalId, opts, callback) {
      opts = opts || {};
      let postBody = opts['proposal'];
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsProposalsUpdate");
      }
      // verify the required parameter 'proposalId' is set
      if (proposalId === undefined || proposalId === null) {
        throw new Error("Missing the required parameter 'proposalId' when calling adexchangebuyer2AccountsProposalsUpdate");
      }

      let pathParams = {
        'accountId': accountId,
        'proposalId': proposalId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proposal;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/proposals/{proposalId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsPublisherProfilesGet operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsPublisherProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublisherProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the requested publisher profile by id.
     * @param {String} accountId Account ID of the buyer.
     * @param {String} publisherProfileId The id for the publisher profile to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsPublisherProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublisherProfile}
     */
    adexchangebuyer2AccountsPublisherProfilesGet(accountId, publisherProfileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsPublisherProfilesGet");
      }
      // verify the required parameter 'publisherProfileId' is set
      if (publisherProfileId === undefined || publisherProfileId === null) {
        throw new Error("Missing the required parameter 'publisherProfileId' when calling adexchangebuyer2AccountsPublisherProfilesGet");
      }

      let pathParams = {
        'accountId': accountId,
        'publisherProfileId': publisherProfileId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublisherProfile;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2AccountsPublisherProfilesList operation.
     * @callback module:api/AccountsApi~adexchangebuyer2AccountsPublisherProfilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPublisherProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all publisher profiles visible to the buyer
     * @param {String} accountId Account ID of the buyer.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Specify the number of results to include per page.
     * @param {String} [pageToken] The page token as return from ListPublisherProfilesResponse.
     * @param {module:api/AccountsApi~adexchangebuyer2AccountsPublisherProfilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPublisherProfilesResponse}
     */
    adexchangebuyer2AccountsPublisherProfilesList(accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling adexchangebuyer2AccountsPublisherProfilesList");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPublisherProfilesResponse;
      return this.apiClient.callApi(
        '/v2beta1/accounts/{accountId}/publisherProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
