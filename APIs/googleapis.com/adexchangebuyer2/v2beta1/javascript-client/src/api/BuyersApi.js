/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FilterSet from '../model/FilterSet';
import ListBidMetricsResponse from '../model/ListBidMetricsResponse';
import ListBidResponseErrorsResponse from '../model/ListBidResponseErrorsResponse';
import ListBidResponsesWithoutBidsResponse from '../model/ListBidResponsesWithoutBidsResponse';
import ListCreativeStatusBreakdownByCreativeResponse from '../model/ListCreativeStatusBreakdownByCreativeResponse';
import ListCreativeStatusBreakdownByDetailResponse from '../model/ListCreativeStatusBreakdownByDetailResponse';
import ListFilterSetsResponse from '../model/ListFilterSetsResponse';
import ListFilteredBidRequestsResponse from '../model/ListFilteredBidRequestsResponse';
import ListFilteredBidsResponse from '../model/ListFilteredBidsResponse';
import ListImpressionMetricsResponse from '../model/ListImpressionMetricsResponse';
import ListLosingBidsResponse from '../model/ListLosingBidsResponse';
import ListNonBillableWinningBidsResponse from '../model/ListNonBillableWinningBidsResponse';

/**
* Buyers service.
* @module api/BuyersApi
* @version v2beta1
*/
export default class BuyersApi {

    /**
    * Constructs a new BuyersApi. 
    * @alias module:api/BuyersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsBidMetricsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidMetricsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBidMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all metrics that are measured in terms of number of bids.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the bidMetrics.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidMetricsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBidMetricsResponse}
     */
    adexchangebuyer2BuyersFilterSetsBidMetricsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsBidMetricsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBidMetricsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/bidMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsBidResponseErrorsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidResponseErrorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBidResponseErrorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all errors that occurred in bid responses, with the number of bid responses affected for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to the bidResponseErrors.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidResponseErrorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBidResponseErrorsResponse}
     */
    adexchangebuyer2BuyersFilterSetsBidResponseErrorsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsBidResponseErrorsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBidResponseErrorsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/bidResponseErrors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBidResponsesWithoutBidsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call to the bidResponsesWithoutBids.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBidResponsesWithoutBidsResponse}
     */
    adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBidResponsesWithoutBidsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/bidResponsesWithoutBids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsCreate operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the specified filter set for the account with the given account ID.
     * @param {String} ownerName Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [isTransient] Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after creation.
     * @param {module:model/FilterSet} [filterSet] 
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilterSet}
     */
    adexchangebuyer2BuyersFilterSetsCreate(ownerName, opts, callback) {
      opts = opts || {};
      let postBody = opts['filterSet'];
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling adexchangebuyer2BuyersFilterSetsCreate");
      }

      let pathParams = {
        'ownerName': ownerName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'isTransient': opts['isTransient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FilterSet;
      return this.apiClient.callApi(
        '/v2beta1/{ownerName}/filterSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsDelete operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the requested filter set from the account with the given account ID.
     * @param {String} name Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    adexchangebuyer2BuyersFilterSetsDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adexchangebuyer2BuyersFilterSetsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2beta1/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsFilteredBidRequestsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidRequestsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFilteredBidRequestsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to the filteredBidRequests.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidRequestsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFilteredBidRequestsResponse}
     */
    adexchangebuyer2BuyersFilterSetsFilteredBidRequestsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsFilteredBidRequestsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilteredBidRequestsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/filteredBidRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreativeStatusBreakdownByCreativeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Number} creativeStatusId The ID of the creative status for which to retrieve a breakdown by creative. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the previous call to the filteredBids.creatives.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreativeStatusBreakdownByCreativeResponse}
     */
    adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesList(filterSetName, creativeStatusId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesList");
      }
      // verify the required parameter 'creativeStatusId' is set
      if (creativeStatusId === undefined || creativeStatusId === null) {
        throw new Error("Missing the required parameter 'creativeStatusId' when calling adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesList");
      }

      let pathParams = {
        'filterSetName': filterSetName,
        'creativeStatusId': creativeStatusId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCreativeStatusBreakdownByCreativeResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCreativeStatusBreakdownByDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Number} creativeStatusId The ID of the creative status for which to retrieve a breakdown by detail. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86, and 87.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the previous call to the filteredBids.details.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCreativeStatusBreakdownByDetailResponse}
     */
    adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsList(filterSetName, creativeStatusId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsList");
      }
      // verify the required parameter 'creativeStatusId' is set
      if (creativeStatusId === undefined || creativeStatusId === null) {
        throw new Error("Missing the required parameter 'creativeStatusId' when calling adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsList");
      }

      let pathParams = {
        'filterSetName': filterSetName,
        'creativeStatusId': creativeStatusId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCreativeStatusBreakdownByDetailResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsFilteredBidsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFilteredBidsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reasons for which bids were filtered, with the number of bids filtered for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the filteredBids.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsFilteredBidsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFilteredBidsResponse}
     */
    adexchangebuyer2BuyersFilterSetsFilteredBidsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsFilteredBidsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilteredBidsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/filteredBids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsGet operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilterSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the requested filter set for the account with the given account ID.
     * @param {String} name Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilterSet}
     */
    adexchangebuyer2BuyersFilterSetsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling adexchangebuyer2BuyersFilterSetsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FilterSet;
      return this.apiClient.callApi(
        '/v2beta1/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsImpressionMetricsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsImpressionMetricsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImpressionMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all metrics that are measured in terms of number of impressions.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to the impressionMetrics.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsImpressionMetricsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImpressionMetricsResponse}
     */
    adexchangebuyer2BuyersFilterSetsImpressionMetricsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsImpressionMetricsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListImpressionMetricsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/impressionMetrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFilterSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all filter sets for the account with the given account ID.
     * @param {String} ownerName Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the accounts.filterSets.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFilterSetsResponse}
     */
    adexchangebuyer2BuyersFilterSetsList(ownerName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ownerName' is set
      if (ownerName === undefined || ownerName === null) {
        throw new Error("Missing the required parameter 'ownerName' when calling adexchangebuyer2BuyersFilterSetsList");
      }

      let pathParams = {
        'ownerName': ownerName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFilterSetsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{ownerName}/filterSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsLosingBidsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsLosingBidsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLosingBidsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the losingBids.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsLosingBidsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLosingBidsResponse}
     */
    adexchangebuyer2BuyersFilterSetsLosingBidsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsLosingBidsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLosingBidsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/losingBids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsList operation.
     * @callback module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNonBillableWinningBidsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.
     * @param {String} filterSetName Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call to the nonBillableWinningBids.list method.
     * @param {module:api/BuyersApi~adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNonBillableWinningBidsResponse}
     */
    adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsList(filterSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filterSetName' is set
      if (filterSetName === undefined || filterSetName === null) {
        throw new Error("Missing the required parameter 'filterSetName' when calling adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsList");
      }

      let pathParams = {
        'filterSetName': filterSetName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNonBillableWinningBidsResponse;
      return this.apiClient.callApi(
        '/v2beta1/{filterSetName}/nonBillableWinningBids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
