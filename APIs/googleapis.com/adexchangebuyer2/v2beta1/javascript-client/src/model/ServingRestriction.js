/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Disapproval from './Disapproval';
import ServingContext from './ServingContext';

/**
 * The ServingRestriction model module.
 * @module model/ServingRestriction
 * @version v2beta1
 */
class ServingRestriction {
    /**
     * Constructs a new <code>ServingRestriction</code>.
     * Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).
     * @alias module:model/ServingRestriction
     */
    constructor() { 
        
        ServingRestriction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServingRestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServingRestriction} obj Optional instance to populate.
     * @return {module:model/ServingRestriction} The populated <code>ServingRestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServingRestriction();

            if (data.hasOwnProperty('contexts')) {
                obj['contexts'] = ApiClient.convertToType(data['contexts'], [ServingContext]);
            }
            if (data.hasOwnProperty('disapproval')) {
                obj['disapproval'] = Disapproval.constructFromObject(data['disapproval']);
            }
            if (data.hasOwnProperty('disapprovalReasons')) {
                obj['disapprovalReasons'] = ApiClient.convertToType(data['disapprovalReasons'], [Disapproval]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServingRestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServingRestriction</code>.
     */
    static validateJSON(data) {
        if (data['contexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contexts'])) {
                throw new Error("Expected the field `contexts` to be an array in the JSON data but got " + data['contexts']);
            }
            // validate the optional field `contexts` (array)
            for (const item of data['contexts']) {
                ServingContext.validateJSON(item);
            };
        }
        // validate the optional field `disapproval`
        if (data['disapproval']) { // data not null
          Disapproval.validateJSON(data['disapproval']);
        }
        if (data['disapprovalReasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disapprovalReasons'])) {
                throw new Error("Expected the field `disapprovalReasons` to be an array in the JSON data but got " + data['disapprovalReasons']);
            }
            // validate the optional field `disapprovalReasons` (array)
            for (const item of data['disapprovalReasons']) {
                Disapproval.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The contexts for the restriction.
 * @member {Array.<module:model/ServingContext>} contexts
 */
ServingRestriction.prototype['contexts'] = undefined;

/**
 * @member {module:model/Disapproval} disapproval
 */
ServingRestriction.prototype['disapproval'] = undefined;

/**
 * Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.
 * @member {Array.<module:model/Disapproval>} disapprovalReasons
 */
ServingRestriction.prototype['disapprovalReasons'] = undefined;

/**
 * The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
 * @member {module:model/ServingRestriction.StatusEnum} status
 */
ServingRestriction.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ServingRestriction['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "DISAPPROVAL"
     * @const
     */
    "DISAPPROVAL": "DISAPPROVAL",

    /**
     * value: "PENDING_REVIEW"
     * @const
     */
    "PENDING_REVIEW": "PENDING_REVIEW"
};



export default ServingRestriction;

