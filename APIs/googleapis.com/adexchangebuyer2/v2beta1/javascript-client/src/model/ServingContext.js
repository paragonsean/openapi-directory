/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppContext from './AppContext';
import AuctionContext from './AuctionContext';
import LocationContext from './LocationContext';
import PlatformContext from './PlatformContext';
import SecurityContext from './SecurityContext';

/**
 * The ServingContext model module.
 * @module model/ServingContext
 * @version v2beta1
 */
class ServingContext {
    /**
     * Constructs a new <code>ServingContext</code>.
     * The serving context for this restriction.
     * @alias module:model/ServingContext
     */
    constructor() { 
        
        ServingContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServingContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServingContext} obj Optional instance to populate.
     * @return {module:model/ServingContext} The populated <code>ServingContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServingContext();

            if (data.hasOwnProperty('all')) {
                obj['all'] = ApiClient.convertToType(data['all'], 'String');
            }
            if (data.hasOwnProperty('appType')) {
                obj['appType'] = AppContext.constructFromObject(data['appType']);
            }
            if (data.hasOwnProperty('auctionType')) {
                obj['auctionType'] = AuctionContext.constructFromObject(data['auctionType']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationContext.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = PlatformContext.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('securityType')) {
                obj['securityType'] = SecurityContext.constructFromObject(data['securityType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServingContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServingContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['all'] && !(typeof data['all'] === 'string' || data['all'] instanceof String)) {
            throw new Error("Expected the field `all` to be a primitive type in the JSON string but got " + data['all']);
        }
        // validate the optional field `appType`
        if (data['appType']) { // data not null
          AppContext.validateJSON(data['appType']);
        }
        // validate the optional field `auctionType`
        if (data['auctionType']) { // data not null
          AuctionContext.validateJSON(data['auctionType']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          LocationContext.validateJSON(data['location']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          PlatformContext.validateJSON(data['platform']);
        }
        // validate the optional field `securityType`
        if (data['securityType']) { // data not null
          SecurityContext.validateJSON(data['securityType']);
        }

        return true;
    }


}



/**
 * Matches all contexts.
 * @member {module:model/ServingContext.AllEnum} all
 */
ServingContext.prototype['all'] = undefined;

/**
 * @member {module:model/AppContext} appType
 */
ServingContext.prototype['appType'] = undefined;

/**
 * @member {module:model/AuctionContext} auctionType
 */
ServingContext.prototype['auctionType'] = undefined;

/**
 * @member {module:model/LocationContext} location
 */
ServingContext.prototype['location'] = undefined;

/**
 * @member {module:model/PlatformContext} platform
 */
ServingContext.prototype['platform'] = undefined;

/**
 * @member {module:model/SecurityContext} securityType
 */
ServingContext.prototype['securityType'] = undefined;





/**
 * Allowed values for the <code>all</code> property.
 * @enum {String}
 * @readonly
 */
ServingContext['AllEnum'] = {

    /**
     * value: "SIMPLE_CONTEXT"
     * @const
     */
    "SIMPLE_CONTEXT": "SIMPLE_CONTEXT"
};



export default ServingContext;

