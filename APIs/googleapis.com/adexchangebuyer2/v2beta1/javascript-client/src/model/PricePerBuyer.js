/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Buyer from './Buyer';
import Price from './Price';

/**
 * The PricePerBuyer model module.
 * @module model/PricePerBuyer
 * @version v2beta1
 */
class PricePerBuyer {
    /**
     * Constructs a new <code>PricePerBuyer</code>.
     * Used to specify pricing rules for buyers/advertisers. Each PricePerBuyer in a product can become 0 or 1 deals. To check if there is a PricePerBuyer for a particular buyer or buyer/advertiser pair, we look for the most specific matching rule - we first look for a rule matching the buyer and advertiser, next a rule with the buyer but an empty advertiser list, and otherwise look for a matching rule where no buyer is set.
     * @alias module:model/PricePerBuyer
     */
    constructor() { 
        
        PricePerBuyer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PricePerBuyer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PricePerBuyer} obj Optional instance to populate.
     * @return {module:model/PricePerBuyer} The populated <code>PricePerBuyer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PricePerBuyer();

            if (data.hasOwnProperty('advertiserIds')) {
                obj['advertiserIds'] = ApiClient.convertToType(data['advertiserIds'], ['String']);
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = Buyer.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PricePerBuyer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PricePerBuyer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advertiserIds'])) {
            throw new Error("Expected the field `advertiserIds` to be an array in the JSON data but got " + data['advertiserIds']);
        }
        // validate the optional field `buyer`
        if (data['buyer']) { // data not null
          Buyer.validateJSON(data['buyer']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }

        return true;
    }


}



/**
 * The list of advertisers for this price when associated with this buyer. If empty, all advertisers with this buyer pay this price.
 * @member {Array.<String>} advertiserIds
 */
PricePerBuyer.prototype['advertiserIds'] = undefined;

/**
 * @member {module:model/Buyer} buyer
 */
PricePerBuyer.prototype['buyer'] = undefined;

/**
 * @member {module:model/Price} price
 */
PricePerBuyer.prototype['price'] = undefined;






export default PricePerBuyer;

