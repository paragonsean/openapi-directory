/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationContext model module.
 * @module model/LocationContext
 * @version v2beta1
 */
class LocationContext {
    /**
     * Constructs a new <code>LocationContext</code>.
     * Output only. The Geo criteria the restriction applies to.
     * @alias module:model/LocationContext
     */
    constructor() { 
        
        LocationContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationContext} obj Optional instance to populate.
     * @return {module:model/LocationContext} The populated <code>LocationContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationContext();

            if (data.hasOwnProperty('geoCriteriaIds')) {
                obj['geoCriteriaIds'] = ApiClient.convertToType(data['geoCriteriaIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['geoCriteriaIds'])) {
            throw new Error("Expected the field `geoCriteriaIds` to be an array in the JSON data but got " + data['geoCriteriaIds']);
        }

        return true;
    }


}



/**
 * IDs representing the geo location for this context. Refer to the [geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv) file for different geo criteria IDs.
 * @member {Array.<Number>} geoCriteriaIds
 */
LocationContext.prototype['geoCriteriaIds'] = undefined;






export default LocationContext;

