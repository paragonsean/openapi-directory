/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricValue from './MetricValue';
import RowDimensions from './RowDimensions';

/**
 * The ImpressionMetricsRow model module.
 * @module model/ImpressionMetricsRow
 * @version v2beta1
 */
class ImpressionMetricsRow {
    /**
     * Constructs a new <code>ImpressionMetricsRow</code>.
     * The set of metrics that are measured in numbers of impressions, representing how many impressions with the specified dimension values were considered eligible at each stage of the bidding funnel.
     * @alias module:model/ImpressionMetricsRow
     */
    constructor() { 
        
        ImpressionMetricsRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImpressionMetricsRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImpressionMetricsRow} obj Optional instance to populate.
     * @return {module:model/ImpressionMetricsRow} The populated <code>ImpressionMetricsRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImpressionMetricsRow();

            if (data.hasOwnProperty('availableImpressions')) {
                obj['availableImpressions'] = MetricValue.constructFromObject(data['availableImpressions']);
            }
            if (data.hasOwnProperty('bidRequests')) {
                obj['bidRequests'] = MetricValue.constructFromObject(data['bidRequests']);
            }
            if (data.hasOwnProperty('inventoryMatches')) {
                obj['inventoryMatches'] = MetricValue.constructFromObject(data['inventoryMatches']);
            }
            if (data.hasOwnProperty('responsesWithBids')) {
                obj['responsesWithBids'] = MetricValue.constructFromObject(data['responsesWithBids']);
            }
            if (data.hasOwnProperty('rowDimensions')) {
                obj['rowDimensions'] = RowDimensions.constructFromObject(data['rowDimensions']);
            }
            if (data.hasOwnProperty('successfulResponses')) {
                obj['successfulResponses'] = MetricValue.constructFromObject(data['successfulResponses']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImpressionMetricsRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImpressionMetricsRow</code>.
     */
    static validateJSON(data) {
        // validate the optional field `availableImpressions`
        if (data['availableImpressions']) { // data not null
          MetricValue.validateJSON(data['availableImpressions']);
        }
        // validate the optional field `bidRequests`
        if (data['bidRequests']) { // data not null
          MetricValue.validateJSON(data['bidRequests']);
        }
        // validate the optional field `inventoryMatches`
        if (data['inventoryMatches']) { // data not null
          MetricValue.validateJSON(data['inventoryMatches']);
        }
        // validate the optional field `responsesWithBids`
        if (data['responsesWithBids']) { // data not null
          MetricValue.validateJSON(data['responsesWithBids']);
        }
        // validate the optional field `rowDimensions`
        if (data['rowDimensions']) { // data not null
          RowDimensions.validateJSON(data['rowDimensions']);
        }
        // validate the optional field `successfulResponses`
        if (data['successfulResponses']) { // data not null
          MetricValue.validateJSON(data['successfulResponses']);
        }

        return true;
    }


}



/**
 * @member {module:model/MetricValue} availableImpressions
 */
ImpressionMetricsRow.prototype['availableImpressions'] = undefined;

/**
 * @member {module:model/MetricValue} bidRequests
 */
ImpressionMetricsRow.prototype['bidRequests'] = undefined;

/**
 * @member {module:model/MetricValue} inventoryMatches
 */
ImpressionMetricsRow.prototype['inventoryMatches'] = undefined;

/**
 * @member {module:model/MetricValue} responsesWithBids
 */
ImpressionMetricsRow.prototype['responsesWithBids'] = undefined;

/**
 * @member {module:model/RowDimensions} rowDimensions
 */
ImpressionMetricsRow.prototype['rowDimensions'] = undefined;

/**
 * @member {module:model/MetricValue} successfulResponses
 */
ImpressionMetricsRow.prototype['successfulResponses'] = undefined;






export default ImpressionMetricsRow;

