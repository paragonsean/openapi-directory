/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdTechnologyProviders model module.
 * @module model/AdTechnologyProviders
 * @version v2beta1
 */
class AdTechnologyProviders {
    /**
     * Constructs a new <code>AdTechnologyProviders</code>.
     * Detected ad technology provider information.
     * @alias module:model/AdTechnologyProviders
     */
    constructor() { 
        
        AdTechnologyProviders.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdTechnologyProviders</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdTechnologyProviders} obj Optional instance to populate.
     * @return {module:model/AdTechnologyProviders} The populated <code>AdTechnologyProviders</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdTechnologyProviders();

            if (data.hasOwnProperty('detectedProviderIds')) {
                obj['detectedProviderIds'] = ApiClient.convertToType(data['detectedProviderIds'], ['String']);
            }
            if (data.hasOwnProperty('hasUnidentifiedProvider')) {
                obj['hasUnidentifiedProvider'] = ApiClient.convertToType(data['hasUnidentifiedProvider'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdTechnologyProviders</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdTechnologyProviders</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['detectedProviderIds'])) {
            throw new Error("Expected the field `detectedProviderIds` to be an array in the JSON data but got " + data['detectedProviderIds']);
        }

        return true;
    }


}



/**
 * The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will serve to an EEA user, the bid will be filtered before the auction.
 * @member {Array.<String>} detectedProviderIds
 */
AdTechnologyProviders.prototype['detectedProviderIds'] = undefined;

/**
 * Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA user will be filtered before the auction.
 * @member {Boolean} hasUnidentifiedProvider
 */
AdTechnologyProviders.prototype['hasUnidentifiedProvider'] = undefined;






export default AdTechnologyProviders;

