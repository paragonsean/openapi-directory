/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecurityContext model module.
 * @module model/SecurityContext
 * @version v2beta1
 */
class SecurityContext {
    /**
     * Constructs a new <code>SecurityContext</code>.
     * Output only. A security context.
     * @alias module:model/SecurityContext
     */
    constructor() { 
        
        SecurityContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecurityContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecurityContext} obj Optional instance to populate.
     * @return {module:model/SecurityContext} The populated <code>SecurityContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecurityContext();

            if (data.hasOwnProperty('securities')) {
                obj['securities'] = ApiClient.convertToType(data['securities'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecurityContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecurityContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['securities'])) {
            throw new Error("Expected the field `securities` to be an array in the JSON data but got " + data['securities']);
        }

        return true;
    }


}



/**
 * The security types in this context.
 * @member {Array.<module:model/SecurityContext.SecuritiesEnum>} securities
 */
SecurityContext.prototype['securities'] = undefined;





/**
 * Allowed values for the <code>securities</code> property.
 * @enum {String}
 * @readonly
 */
SecurityContext['SecuritiesEnum'] = {

    /**
     * value: "INSECURE"
     * @const
     */
    "INSECURE": "INSECURE",

    /**
     * value: "SSL"
     * @const
     */
    "SSL": "SSL"
};



export default SecurityContext;

