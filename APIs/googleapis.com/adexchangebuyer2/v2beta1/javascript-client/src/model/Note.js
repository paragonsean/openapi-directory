/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Note model module.
 * @module model/Note
 * @version v2beta1
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * A proposal may be associated to several notes.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creatorRole')) {
                obj['creatorRole'] = ApiClient.convertToType(data['creatorRole'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('noteId')) {
                obj['noteId'] = ApiClient.convertToType(data['noteId'], 'String');
            }
            if (data.hasOwnProperty('proposalRevision')) {
                obj['proposalRevision'] = ApiClient.convertToType(data['proposalRevision'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creatorRole'] && !(typeof data['creatorRole'] === 'string' || data['creatorRole'] instanceof String)) {
            throw new Error("Expected the field `creatorRole` to be a primitive type in the JSON string but got " + data['creatorRole']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['noteId'] && !(typeof data['noteId'] === 'string' || data['noteId'] instanceof String)) {
            throw new Error("Expected the field `noteId` to be a primitive type in the JSON string but got " + data['noteId']);
        }
        // ensure the json data is a string
        if (data['proposalRevision'] && !(typeof data['proposalRevision'] === 'string' || data['proposalRevision'] instanceof String)) {
            throw new Error("Expected the field `proposalRevision` to be a primitive type in the JSON string but got " + data['proposalRevision']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp for when this note was created.
 * @member {String} createTime
 */
Note.prototype['createTime'] = undefined;

/**
 * Output only. The role of the person (buyer/seller) creating the note.
 * @member {module:model/Note.CreatorRoleEnum} creatorRole
 */
Note.prototype['creatorRole'] = undefined;

/**
 * The actual note to attach. (max-length: 1024 unicode code units) Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
 * @member {String} note
 */
Note.prototype['note'] = undefined;

/**
 * Output only. The unique ID for the note.
 * @member {String} noteId
 */
Note.prototype['noteId'] = undefined;

/**
 * Output only. The revision number of the proposal when the note is created.
 * @member {String} proposalRevision
 */
Note.prototype['proposalRevision'] = undefined;





/**
 * Allowed values for the <code>creatorRole</code> property.
 * @enum {String}
 * @readonly
 */
Note['CreatorRoleEnum'] = {

    /**
     * value: "BUYER_SELLER_ROLE_UNSPECIFIED"
     * @const
     */
    "BUYER_SELLER_ROLE_UNSPECIFIED": "BUYER_SELLER_ROLE_UNSPECIFIED",

    /**
     * value: "BUYER"
     * @const
     */
    "BUYER": "BUYER",

    /**
     * value: "SELLER"
     * @const
     */
    "SELLER": "SELLER"
};



export default Note;

