/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClientUser model module.
 * @module model/ClientUser
 * @version v2beta1
 */
class ClientUser {
    /**
     * Constructs a new <code>ClientUser</code>.
     * A client user is created under a client buyer and has restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the associated client buyer. The only way a new client user can be created is through accepting an email invitation (see the accounts.clients.invitations.create method). All fields are required unless otherwise specified.
     * @alias module:model/ClientUser
     */
    constructor() { 
        
        ClientUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientUser} obj Optional instance to populate.
     * @return {module:model/ClientUser} The populated <code>ClientUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientUser();

            if (data.hasOwnProperty('clientAccountId')) {
                obj['clientAccountId'] = ApiClient.convertToType(data['clientAccountId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientAccountId'] && !(typeof data['clientAccountId'] === 'string' || data['clientAccountId'] instanceof String)) {
            throw new Error("Expected the field `clientAccountId` to be a primitive type in the JSON string but got " + data['clientAccountId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update operation.
 * @member {String} clientAccountId
 */
ClientUser.prototype['clientAccountId'] = undefined;

/**
 * User's email address. The value of this field is ignored in an update operation.
 * @member {String} email
 */
ClientUser.prototype['email'] = undefined;

/**
 * The status of the client user.
 * @member {module:model/ClientUser.StatusEnum} status
 */
ClientUser.prototype['status'] = undefined;

/**
 * The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation.
 * @member {String} userId
 */
ClientUser.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ClientUser['StatusEnum'] = {

    /**
     * value: "USER_STATUS_UNSPECIFIED"
     * @const
     */
    "USER_STATUS_UNSPECIFIED": "USER_STATUS_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default ClientUser;

