/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuctionContext model module.
 * @module model/AuctionContext
 * @version v2beta1
 */
class AuctionContext {
    /**
     * Constructs a new <code>AuctionContext</code>.
     * Output only. The auction type the restriction applies to.
     * @alias module:model/AuctionContext
     */
    constructor() { 
        
        AuctionContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuctionContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuctionContext} obj Optional instance to populate.
     * @return {module:model/AuctionContext} The populated <code>AuctionContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuctionContext();

            if (data.hasOwnProperty('auctionTypes')) {
                obj['auctionTypes'] = ApiClient.convertToType(data['auctionTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuctionContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuctionContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['auctionTypes'])) {
            throw new Error("Expected the field `auctionTypes` to be an array in the JSON data but got " + data['auctionTypes']);
        }

        return true;
    }


}



/**
 * The auction types this restriction applies to.
 * @member {Array.<module:model/AuctionContext.AuctionTypesEnum>} auctionTypes
 */
AuctionContext.prototype['auctionTypes'] = undefined;





/**
 * Allowed values for the <code>auctionTypes</code> property.
 * @enum {String}
 * @readonly
 */
AuctionContext['AuctionTypesEnum'] = {

    /**
     * value: "OPEN_AUCTION"
     * @const
     */
    "OPEN_AUCTION": "OPEN_AUCTION",

    /**
     * value: "DIRECT_DEALS"
     * @const
     */
    "DIRECT_DEALS": "DIRECT_DEALS"
};



export default AuctionContext;

