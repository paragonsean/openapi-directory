/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbsoluteDateRange from './AbsoluteDateRange';
import RealtimeTimeRange from './RealtimeTimeRange';
import RelativeDateRange from './RelativeDateRange';

/**
 * The FilterSet model module.
 * @module model/FilterSet
 * @version v2beta1
 */
class FilterSet {
    /**
     * Constructs a new <code>FilterSet</code>.
     * A set of filters that is applied to a request for data. Within a filter set, an AND operation is performed across the filters represented by each field. An OR operation is performed across the filters represented by the multiple values of a repeated field, for example, \&quot;format&#x3D;VIDEO AND deal_id&#x3D;12 AND (seller_network_id&#x3D;34 OR seller_network_id&#x3D;56)\&quot;.
     * @alias module:model/FilterSet
     */
    constructor() { 
        
        FilterSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FilterSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterSet} obj Optional instance to populate.
     * @return {module:model/FilterSet} The populated <code>FilterSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterSet();

            if (data.hasOwnProperty('absoluteDateRange')) {
                obj['absoluteDateRange'] = AbsoluteDateRange.constructFromObject(data['absoluteDateRange']);
            }
            if (data.hasOwnProperty('breakdownDimensions')) {
                obj['breakdownDimensions'] = ApiClient.convertToType(data['breakdownDimensions'], ['String']);
            }
            if (data.hasOwnProperty('creativeId')) {
                obj['creativeId'] = ApiClient.convertToType(data['creativeId'], 'String');
            }
            if (data.hasOwnProperty('dealId')) {
                obj['dealId'] = ApiClient.convertToType(data['dealId'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platforms')) {
                obj['platforms'] = ApiClient.convertToType(data['platforms'], ['String']);
            }
            if (data.hasOwnProperty('publisherIdentifiers')) {
                obj['publisherIdentifiers'] = ApiClient.convertToType(data['publisherIdentifiers'], ['String']);
            }
            if (data.hasOwnProperty('realtimeTimeRange')) {
                obj['realtimeTimeRange'] = RealtimeTimeRange.constructFromObject(data['realtimeTimeRange']);
            }
            if (data.hasOwnProperty('relativeDateRange')) {
                obj['relativeDateRange'] = RelativeDateRange.constructFromObject(data['relativeDateRange']);
            }
            if (data.hasOwnProperty('sellerNetworkIds')) {
                obj['sellerNetworkIds'] = ApiClient.convertToType(data['sellerNetworkIds'], ['Number']);
            }
            if (data.hasOwnProperty('timeSeriesGranularity')) {
                obj['timeSeriesGranularity'] = ApiClient.convertToType(data['timeSeriesGranularity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterSet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `absoluteDateRange`
        if (data['absoluteDateRange']) { // data not null
          AbsoluteDateRange.validateJSON(data['absoluteDateRange']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['breakdownDimensions'])) {
            throw new Error("Expected the field `breakdownDimensions` to be an array in the JSON data but got " + data['breakdownDimensions']);
        }
        // ensure the json data is a string
        if (data['creativeId'] && !(typeof data['creativeId'] === 'string' || data['creativeId'] instanceof String)) {
            throw new Error("Expected the field `creativeId` to be a primitive type in the JSON string but got " + data['creativeId']);
        }
        // ensure the json data is a string
        if (data['dealId'] && !(typeof data['dealId'] === 'string' || data['dealId'] instanceof String)) {
            throw new Error("Expected the field `dealId` to be a primitive type in the JSON string but got " + data['dealId']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['formats'])) {
            throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['platforms'])) {
            throw new Error("Expected the field `platforms` to be an array in the JSON data but got " + data['platforms']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publisherIdentifiers'])) {
            throw new Error("Expected the field `publisherIdentifiers` to be an array in the JSON data but got " + data['publisherIdentifiers']);
        }
        // validate the optional field `realtimeTimeRange`
        if (data['realtimeTimeRange']) { // data not null
          RealtimeTimeRange.validateJSON(data['realtimeTimeRange']);
        }
        // validate the optional field `relativeDateRange`
        if (data['relativeDateRange']) { // data not null
          RelativeDateRange.validateJSON(data['relativeDateRange']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sellerNetworkIds'])) {
            throw new Error("Expected the field `sellerNetworkIds` to be an array in the JSON data but got " + data['sellerNetworkIds']);
        }
        // ensure the json data is a string
        if (data['timeSeriesGranularity'] && !(typeof data['timeSeriesGranularity'] === 'string' || data['timeSeriesGranularity'] instanceof String)) {
            throw new Error("Expected the field `timeSeriesGranularity` to be a primitive type in the JSON string but got " + data['timeSeriesGranularity']);
        }

        return true;
    }


}



/**
 * @member {module:model/AbsoluteDateRange} absoluteDateRange
 */
FilterSet.prototype['absoluteDateRange'] = undefined;

/**
 * The set of dimensions along which to break down the response; may be empty. If multiple dimensions are requested, the breakdown is along the Cartesian product of the requested dimensions.
 * @member {Array.<module:model/FilterSet.BreakdownDimensionsEnum>} breakdownDimensions
 */
FilterSet.prototype['breakdownDimensions'] = undefined;

/**
 * The ID of the creative on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/_*_/accounts/_*_/filterSets/_*` pattern.
 * @member {String} creativeId
 */
FilterSet.prototype['creativeId'] = undefined;

/**
 * The ID of the deal on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, for example, one whose name matches the `bidders/_*_/accounts/_*_/filterSets/_*` pattern.
 * @member {String} dealId
 */
FilterSet.prototype['dealId'] = undefined;

/**
 * The environment on which to filter; optional.
 * @member {module:model/FilterSet.EnvironmentEnum} environment
 */
FilterSet.prototype['environment'] = undefined;

/**
 * Creative format bidded on or allowed to bid on, can be empty.
 * @member {module:model/FilterSet.FormatEnum} format
 */
FilterSet.prototype['format'] = undefined;

/**
 * Creative formats bidded on or allowed to bid on, can be empty. Although this field is a list, it can only be populated with a single item. A HTTP 400 bad request error will be returned in the response if you specify multiple items.
 * @member {Array.<module:model/FilterSet.FormatsEnum>} formats
 */
FilterSet.prototype['formats'] = undefined;

/**
 * A user-defined name of the filter set. Filter set names must be unique globally and match one of the patterns: - `bidders/_*_/filterSets/_*` (for accessing bidder-level troubleshooting data) - `bidders/_*_/accounts/_*_/filterSets/_*` (for accessing account-level troubleshooting data) This field is required in create operations.
 * @member {String} name
 */
FilterSet.prototype['name'] = undefined;

/**
 * The list of platforms on which to filter; may be empty. The filters represented by multiple platforms are ORed together (for example, if non-empty, results must match any one of the platforms).
 * @member {Array.<module:model/FilterSet.PlatformsEnum>} platforms
 */
FilterSet.prototype['platforms'] = undefined;

/**
 * For Open Bidding partners only. The list of publisher identifiers on which to filter; may be empty. The filters represented by multiple publisher identifiers are ORed together.
 * @member {Array.<String>} publisherIdentifiers
 */
FilterSet.prototype['publisherIdentifiers'] = undefined;

/**
 * @member {module:model/RealtimeTimeRange} realtimeTimeRange
 */
FilterSet.prototype['realtimeTimeRange'] = undefined;

/**
 * @member {module:model/RelativeDateRange} relativeDateRange
 */
FilterSet.prototype['relativeDateRange'] = undefined;

/**
 * For Authorized Buyers only. The list of IDs of the seller (publisher) networks on which to filter; may be empty. The filters represented by multiple seller network IDs are ORed together (for example, if non-empty, results must match any one of the publisher networks). See [seller-network-ids](https://developers.google.com/authorized-buyers/rtb/downloads/seller-network-ids) file for the set of existing seller network IDs.
 * @member {Array.<Number>} sellerNetworkIds
 */
FilterSet.prototype['sellerNetworkIds'] = undefined;

/**
 * The granularity of time intervals if a time series breakdown is preferred; optional.
 * @member {module:model/FilterSet.TimeSeriesGranularityEnum} timeSeriesGranularity
 */
FilterSet.prototype['timeSeriesGranularity'] = undefined;





/**
 * Allowed values for the <code>breakdownDimensions</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['BreakdownDimensionsEnum'] = {

    /**
     * value: "BREAKDOWN_DIMENSION_UNSPECIFIED"
     * @const
     */
    "BREAKDOWN_DIMENSION_UNSPECIFIED": "BREAKDOWN_DIMENSION_UNSPECIFIED",

    /**
     * value: "PUBLISHER_IDENTIFIER"
     * @const
     */
    "PUBLISHER_IDENTIFIER": "PUBLISHER_IDENTIFIER"
};


/**
 * Allowed values for the <code>environment</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['EnvironmentEnum'] = {

    /**
     * value: "ENVIRONMENT_UNSPECIFIED"
     * @const
     */
    "ENVIRONMENT_UNSPECIFIED": "ENVIRONMENT_UNSPECIFIED",

    /**
     * value: "WEB"
     * @const
     */
    "WEB": "WEB",

    /**
     * value: "APP"
     * @const
     */
    "APP": "APP"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['FormatEnum'] = {

    /**
     * value: "FORMAT_UNSPECIFIED"
     * @const
     */
    "FORMAT_UNSPECIFIED": "FORMAT_UNSPECIFIED",

    /**
     * value: "NATIVE_DISPLAY"
     * @const
     */
    "NATIVE_DISPLAY": "NATIVE_DISPLAY",

    /**
     * value: "NATIVE_VIDEO"
     * @const
     */
    "NATIVE_VIDEO": "NATIVE_VIDEO",

    /**
     * value: "NON_NATIVE_DISPLAY"
     * @const
     */
    "NON_NATIVE_DISPLAY": "NON_NATIVE_DISPLAY",

    /**
     * value: "NON_NATIVE_VIDEO"
     * @const
     */
    "NON_NATIVE_VIDEO": "NON_NATIVE_VIDEO"
};


/**
 * Allowed values for the <code>formats</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['FormatsEnum'] = {

    /**
     * value: "FORMAT_UNSPECIFIED"
     * @const
     */
    "FORMAT_UNSPECIFIED": "FORMAT_UNSPECIFIED",

    /**
     * value: "NATIVE_DISPLAY"
     * @const
     */
    "NATIVE_DISPLAY": "NATIVE_DISPLAY",

    /**
     * value: "NATIVE_VIDEO"
     * @const
     */
    "NATIVE_VIDEO": "NATIVE_VIDEO",

    /**
     * value: "NON_NATIVE_DISPLAY"
     * @const
     */
    "NON_NATIVE_DISPLAY": "NON_NATIVE_DISPLAY",

    /**
     * value: "NON_NATIVE_VIDEO"
     * @const
     */
    "NON_NATIVE_VIDEO": "NON_NATIVE_VIDEO"
};


/**
 * Allowed values for the <code>platforms</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['PlatformsEnum'] = {

    /**
     * value: "PLATFORM_UNSPECIFIED"
     * @const
     */
    "PLATFORM_UNSPECIFIED": "PLATFORM_UNSPECIFIED",

    /**
     * value: "DESKTOP"
     * @const
     */
    "DESKTOP": "DESKTOP",

    /**
     * value: "TABLET"
     * @const
     */
    "TABLET": "TABLET",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE"
};


/**
 * Allowed values for the <code>timeSeriesGranularity</code> property.
 * @enum {String}
 * @readonly
 */
FilterSet['TimeSeriesGranularityEnum'] = {

    /**
     * value: "TIME_SERIES_GRANULARITY_UNSPECIFIED"
     * @const
     */
    "TIME_SERIES_GRANULARITY_UNSPECIFIED": "TIME_SERIES_GRANULARITY_UNSPECIFIED",

    /**
     * value: "HOURLY"
     * @const
     */
    "HOURLY": "HOURLY",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY"
};



export default FilterSet;

