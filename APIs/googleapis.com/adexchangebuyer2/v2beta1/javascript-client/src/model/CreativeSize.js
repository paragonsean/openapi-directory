/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Size from './Size';

/**
 * The CreativeSize model module.
 * @module model/CreativeSize
 * @version v2beta1
 */
class CreativeSize {
    /**
     * Constructs a new <code>CreativeSize</code>.
     * Specifies the size of the creative.
     * @alias module:model/CreativeSize
     */
    constructor() { 
        
        CreativeSize.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreativeSize</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreativeSize} obj Optional instance to populate.
     * @return {module:model/CreativeSize} The populated <code>CreativeSize</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreativeSize();

            if (data.hasOwnProperty('allowedFormats')) {
                obj['allowedFormats'] = ApiClient.convertToType(data['allowedFormats'], ['String']);
            }
            if (data.hasOwnProperty('companionSizes')) {
                obj['companionSizes'] = ApiClient.convertToType(data['companionSizes'], [Size]);
            }
            if (data.hasOwnProperty('creativeSizeType')) {
                obj['creativeSizeType'] = ApiClient.convertToType(data['creativeSizeType'], 'String');
            }
            if (data.hasOwnProperty('nativeTemplate')) {
                obj['nativeTemplate'] = ApiClient.convertToType(data['nativeTemplate'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('skippableAdType')) {
                obj['skippableAdType'] = ApiClient.convertToType(data['skippableAdType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreativeSize</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreativeSize</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedFormats'])) {
            throw new Error("Expected the field `allowedFormats` to be an array in the JSON data but got " + data['allowedFormats']);
        }
        if (data['companionSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['companionSizes'])) {
                throw new Error("Expected the field `companionSizes` to be an array in the JSON data but got " + data['companionSizes']);
            }
            // validate the optional field `companionSizes` (array)
            for (const item of data['companionSizes']) {
                Size.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creativeSizeType'] && !(typeof data['creativeSizeType'] === 'string' || data['creativeSizeType'] instanceof String)) {
            throw new Error("Expected the field `creativeSizeType` to be a primitive type in the JSON string but got " + data['creativeSizeType']);
        }
        // ensure the json data is a string
        if (data['nativeTemplate'] && !(typeof data['nativeTemplate'] === 'string' || data['nativeTemplate'] instanceof String)) {
            throw new Error("Expected the field `nativeTemplate` to be a primitive type in the JSON string but got " + data['nativeTemplate']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // ensure the json data is a string
        if (data['skippableAdType'] && !(typeof data['skippableAdType'] === 'string' || data['skippableAdType'] instanceof String)) {
            throw new Error("Expected the field `skippableAdType` to be a primitive type in the JSON string but got " + data['skippableAdType']);
        }

        return true;
    }


}



/**
 * What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).
 * @member {Array.<module:model/CreativeSize.AllowedFormatsEnum>} allowedFormats
 */
CreativeSize.prototype['allowedFormats'] = undefined;

/**
 * For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO
 * @member {Array.<module:model/Size>} companionSizes
 */
CreativeSize.prototype['companionSizes'] = undefined;

/**
 * The creative size type.
 * @member {module:model/CreativeSize.CreativeSizeTypeEnum} creativeSizeType
 */
CreativeSize.prototype['creativeSizeType'] = undefined;

/**
 * Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.
 * @member {module:model/CreativeSize.NativeTemplateEnum} nativeTemplate
 */
CreativeSize.prototype['nativeTemplate'] = undefined;

/**
 * @member {module:model/Size} size
 */
CreativeSize.prototype['size'] = undefined;

/**
 * The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.
 * @member {module:model/CreativeSize.SkippableAdTypeEnum} skippableAdType
 */
CreativeSize.prototype['skippableAdType'] = undefined;





/**
 * Allowed values for the <code>allowedFormats</code> property.
 * @enum {String}
 * @readonly
 */
CreativeSize['AllowedFormatsEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO"
};


/**
 * Allowed values for the <code>creativeSizeType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeSize['CreativeSizeTypeEnum'] = {

    /**
     * value: "CREATIVE_SIZE_TYPE_UNSPECIFIED"
     * @const
     */
    "CREATIVE_SIZE_TYPE_UNSPECIFIED": "CREATIVE_SIZE_TYPE_UNSPECIFIED",

    /**
     * value: "REGULAR"
     * @const
     */
    "REGULAR": "REGULAR",

    /**
     * value: "INTERSTITIAL"
     * @const
     */
    "INTERSTITIAL": "INTERSTITIAL",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "NATIVE"
     * @const
     */
    "NATIVE": "NATIVE"
};


/**
 * Allowed values for the <code>nativeTemplate</code> property.
 * @enum {String}
 * @readonly
 */
CreativeSize['NativeTemplateEnum'] = {

    /**
     * value: "UNKNOWN_NATIVE_TEMPLATE"
     * @const
     */
    "UNKNOWN_NATIVE_TEMPLATE": "UNKNOWN_NATIVE_TEMPLATE",

    /**
     * value: "NATIVE_CONTENT_AD"
     * @const
     */
    "NATIVE_CONTENT_AD": "NATIVE_CONTENT_AD",

    /**
     * value: "NATIVE_APP_INSTALL_AD"
     * @const
     */
    "NATIVE_APP_INSTALL_AD": "NATIVE_APP_INSTALL_AD",

    /**
     * value: "NATIVE_VIDEO_CONTENT_AD"
     * @const
     */
    "NATIVE_VIDEO_CONTENT_AD": "NATIVE_VIDEO_CONTENT_AD",

    /**
     * value: "NATIVE_VIDEO_APP_INSTALL_AD"
     * @const
     */
    "NATIVE_VIDEO_APP_INSTALL_AD": "NATIVE_VIDEO_APP_INSTALL_AD"
};


/**
 * Allowed values for the <code>skippableAdType</code> property.
 * @enum {String}
 * @readonly
 */
CreativeSize['SkippableAdTypeEnum'] = {

    /**
     * value: "SKIPPABLE_AD_TYPE_UNSPECIFIED"
     * @const
     */
    "SKIPPABLE_AD_TYPE_UNSPECIFIED": "SKIPPABLE_AD_TYPE_UNSPECIFIED",

    /**
     * value: "GENERIC"
     * @const
     */
    "GENERIC": "GENERIC",

    /**
     * value: "INSTREAM_SELECT"
     * @const
     */
    "INSTREAM_SELECT": "INSTREAM_SELECT",

    /**
     * value: "NOT_SKIPPABLE"
     * @const
     */
    "NOT_SKIPPABLE": "NOT_SKIPPABLE"
};



export default CreativeSize;

