/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServingContext from './ServingContext';

/**
 * The Correction model module.
 * @module model/Correction
 * @version v2beta1
 */
class Correction {
    /**
     * Constructs a new <code>Correction</code>.
     * Output only. Shows any corrections that were applied to this creative.
     * @alias module:model/Correction
     */
    constructor() { 
        
        Correction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Correction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Correction} obj Optional instance to populate.
     * @return {module:model/Correction} The populated <code>Correction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Correction();

            if (data.hasOwnProperty('contexts')) {
                obj['contexts'] = ApiClient.convertToType(data['contexts'], [ServingContext]);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Correction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Correction</code>.
     */
    static validateJSON(data) {
        if (data['contexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['contexts'])) {
                throw new Error("Expected the field `contexts` to be an array in the JSON data but got " + data['contexts']);
            }
            // validate the optional field `contexts` (array)
            for (const item of data['contexts']) {
                ServingContext.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['details'])) {
            throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The contexts for the correction.
 * @member {Array.<module:model/ServingContext>} contexts
 */
Correction.prototype['contexts'] = undefined;

/**
 * Additional details about what was corrected.
 * @member {Array.<String>} details
 */
Correction.prototype['details'] = undefined;

/**
 * The type of correction that was applied to the creative.
 * @member {module:model/Correction.TypeEnum} type
 */
Correction.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Correction['TypeEnum'] = {

    /**
     * value: "CORRECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "CORRECTION_TYPE_UNSPECIFIED": "CORRECTION_TYPE_UNSPECIFIED",

    /**
     * value: "VENDOR_IDS_ADDED"
     * @const
     */
    "VENDOR_IDS_ADDED": "VENDOR_IDS_ADDED",

    /**
     * value: "SSL_ATTRIBUTE_REMOVED"
     * @const
     */
    "SSL_ATTRIBUTE_REMOVED": "SSL_ATTRIBUTE_REMOVED",

    /**
     * value: "FLASH_FREE_ATTRIBUTE_REMOVED"
     * @const
     */
    "FLASH_FREE_ATTRIBUTE_REMOVED": "FLASH_FREE_ATTRIBUTE_REMOVED",

    /**
     * value: "FLASH_FREE_ATTRIBUTE_ADDED"
     * @const
     */
    "FLASH_FREE_ATTRIBUTE_ADDED": "FLASH_FREE_ATTRIBUTE_ADDED",

    /**
     * value: "REQUIRED_ATTRIBUTE_ADDED"
     * @const
     */
    "REQUIRED_ATTRIBUTE_ADDED": "REQUIRED_ATTRIBUTE_ADDED",

    /**
     * value: "REQUIRED_VENDOR_ADDED"
     * @const
     */
    "REQUIRED_VENDOR_ADDED": "REQUIRED_VENDOR_ADDED",

    /**
     * value: "SSL_ATTRIBUTE_ADDED"
     * @const
     */
    "SSL_ATTRIBUTE_ADDED": "SSL_ATTRIBUTE_ADDED",

    /**
     * value: "IN_BANNER_VIDEO_ATTRIBUTE_ADDED"
     * @const
     */
    "IN_BANNER_VIDEO_ATTRIBUTE_ADDED": "IN_BANNER_VIDEO_ATTRIBUTE_ADDED",

    /**
     * value: "MRAID_ATTRIBUTE_ADDED"
     * @const
     */
    "MRAID_ATTRIBUTE_ADDED": "MRAID_ATTRIBUTE_ADDED",

    /**
     * value: "FLASH_ATTRIBUTE_REMOVED"
     * @const
     */
    "FLASH_ATTRIBUTE_REMOVED": "FLASH_ATTRIBUTE_REMOVED",

    /**
     * value: "VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED"
     * @const
     */
    "VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED": "VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED"
};



export default Correction;

