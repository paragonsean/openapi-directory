# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_technology_providers import AdTechnologyProviders
from openapi_server.models.correction import Correction
from openapi_server.models.html_content import HtmlContent
from openapi_server.models.native_content import NativeContent
from openapi_server.models.serving_restriction import ServingRestriction
from openapi_server.models.video_content import VideoContent
from openapi_server import util


class Creative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, ad_choices_destination_url: str=None, ad_technology_providers: AdTechnologyProviders=None, advertiser_name: str=None, agency_id: str=None, api_update_time: str=None, attributes: List[str]=None, click_through_urls: List[str]=None, corrections: List[Correction]=None, creative_id: str=None, deals_status: str=None, declared_click_through_urls: List[str]=None, detected_advertiser_ids: List[str]=None, detected_domains: List[str]=None, detected_languages: List[str]=None, detected_product_categories: List[int]=None, detected_sensitive_categories: List[int]=None, html: HtmlContent=None, impression_tracking_urls: List[str]=None, native: NativeContent=None, open_auction_status: str=None, restricted_categories: List[str]=None, serving_restrictions: List[ServingRestriction]=None, vendor_ids: List[int]=None, version: int=None, video: VideoContent=None):
        """Creative - a model defined in OpenAPI

        :param account_id: The account_id of this Creative.
        :param ad_choices_destination_url: The ad_choices_destination_url of this Creative.
        :param ad_technology_providers: The ad_technology_providers of this Creative.
        :param advertiser_name: The advertiser_name of this Creative.
        :param agency_id: The agency_id of this Creative.
        :param api_update_time: The api_update_time of this Creative.
        :param attributes: The attributes of this Creative.
        :param click_through_urls: The click_through_urls of this Creative.
        :param corrections: The corrections of this Creative.
        :param creative_id: The creative_id of this Creative.
        :param deals_status: The deals_status of this Creative.
        :param declared_click_through_urls: The declared_click_through_urls of this Creative.
        :param detected_advertiser_ids: The detected_advertiser_ids of this Creative.
        :param detected_domains: The detected_domains of this Creative.
        :param detected_languages: The detected_languages of this Creative.
        :param detected_product_categories: The detected_product_categories of this Creative.
        :param detected_sensitive_categories: The detected_sensitive_categories of this Creative.
        :param html: The html of this Creative.
        :param impression_tracking_urls: The impression_tracking_urls of this Creative.
        :param native: The native of this Creative.
        :param open_auction_status: The open_auction_status of this Creative.
        :param restricted_categories: The restricted_categories of this Creative.
        :param serving_restrictions: The serving_restrictions of this Creative.
        :param vendor_ids: The vendor_ids of this Creative.
        :param version: The version of this Creative.
        :param video: The video of this Creative.
        """
        self.openapi_types = {
            'account_id': str,
            'ad_choices_destination_url': str,
            'ad_technology_providers': AdTechnologyProviders,
            'advertiser_name': str,
            'agency_id': str,
            'api_update_time': str,
            'attributes': List[str],
            'click_through_urls': List[str],
            'corrections': List[Correction],
            'creative_id': str,
            'deals_status': str,
            'declared_click_through_urls': List[str],
            'detected_advertiser_ids': List[str],
            'detected_domains': List[str],
            'detected_languages': List[str],
            'detected_product_categories': List[int],
            'detected_sensitive_categories': List[int],
            'html': HtmlContent,
            'impression_tracking_urls': List[str],
            'native': NativeContent,
            'open_auction_status': str,
            'restricted_categories': List[str],
            'serving_restrictions': List[ServingRestriction],
            'vendor_ids': List[int],
            'version': int,
            'video': VideoContent
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'ad_choices_destination_url': 'adChoicesDestinationUrl',
            'ad_technology_providers': 'adTechnologyProviders',
            'advertiser_name': 'advertiserName',
            'agency_id': 'agencyId',
            'api_update_time': 'apiUpdateTime',
            'attributes': 'attributes',
            'click_through_urls': 'clickThroughUrls',
            'corrections': 'corrections',
            'creative_id': 'creativeId',
            'deals_status': 'dealsStatus',
            'declared_click_through_urls': 'declaredClickThroughUrls',
            'detected_advertiser_ids': 'detectedAdvertiserIds',
            'detected_domains': 'detectedDomains',
            'detected_languages': 'detectedLanguages',
            'detected_product_categories': 'detectedProductCategories',
            'detected_sensitive_categories': 'detectedSensitiveCategories',
            'html': 'html',
            'impression_tracking_urls': 'impressionTrackingUrls',
            'native': 'native',
            'open_auction_status': 'openAuctionStatus',
            'restricted_categories': 'restrictedCategories',
            'serving_restrictions': 'servingRestrictions',
            'vendor_ids': 'vendorIds',
            'version': 'version',
            'video': 'video'
        }

        self._account_id = account_id
        self._ad_choices_destination_url = ad_choices_destination_url
        self._ad_technology_providers = ad_technology_providers
        self._advertiser_name = advertiser_name
        self._agency_id = agency_id
        self._api_update_time = api_update_time
        self._attributes = attributes
        self._click_through_urls = click_through_urls
        self._corrections = corrections
        self._creative_id = creative_id
        self._deals_status = deals_status
        self._declared_click_through_urls = declared_click_through_urls
        self._detected_advertiser_ids = detected_advertiser_ids
        self._detected_domains = detected_domains
        self._detected_languages = detected_languages
        self._detected_product_categories = detected_product_categories
        self._detected_sensitive_categories = detected_sensitive_categories
        self._html = html
        self._impression_tracking_urls = impression_tracking_urls
        self._native = native
        self._open_auction_status = open_auction_status
        self._restricted_categories = restricted_categories
        self._serving_restrictions = serving_restrictions
        self._vendor_ids = vendor_ids
        self._version = version
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Creative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative of this Creative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Creative.

        The account that this creative belongs to. Can be used to filter the response of the creatives.list method.

        :return: The account_id of this Creative.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Creative.

        The account that this creative belongs to. Can be used to filter the response of the creatives.list method.

        :param account_id: The account_id of this Creative.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def ad_choices_destination_url(self):
        """Gets the ad_choices_destination_url of this Creative.

        The link to AdChoices destination page.

        :return: The ad_choices_destination_url of this Creative.
        :rtype: str
        """
        return self._ad_choices_destination_url

    @ad_choices_destination_url.setter
    def ad_choices_destination_url(self, ad_choices_destination_url):
        """Sets the ad_choices_destination_url of this Creative.

        The link to AdChoices destination page.

        :param ad_choices_destination_url: The ad_choices_destination_url of this Creative.
        :type ad_choices_destination_url: str
        """

        self._ad_choices_destination_url = ad_choices_destination_url

    @property
    def ad_technology_providers(self):
        """Gets the ad_technology_providers of this Creative.


        :return: The ad_technology_providers of this Creative.
        :rtype: AdTechnologyProviders
        """
        return self._ad_technology_providers

    @ad_technology_providers.setter
    def ad_technology_providers(self, ad_technology_providers):
        """Sets the ad_technology_providers of this Creative.


        :param ad_technology_providers: The ad_technology_providers of this Creative.
        :type ad_technology_providers: AdTechnologyProviders
        """

        self._ad_technology_providers = ad_technology_providers

    @property
    def advertiser_name(self):
        """Gets the advertiser_name of this Creative.

        The name of the company being advertised in the creative.

        :return: The advertiser_name of this Creative.
        :rtype: str
        """
        return self._advertiser_name

    @advertiser_name.setter
    def advertiser_name(self, advertiser_name):
        """Sets the advertiser_name of this Creative.

        The name of the company being advertised in the creative.

        :param advertiser_name: The advertiser_name of this Creative.
        :type advertiser_name: str
        """

        self._advertiser_name = advertiser_name

    @property
    def agency_id(self):
        """Gets the agency_id of this Creative.

        The agency ID for this creative.

        :return: The agency_id of this Creative.
        :rtype: str
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this Creative.

        The agency ID for this creative.

        :param agency_id: The agency_id of this Creative.
        :type agency_id: str
        """

        self._agency_id = agency_id

    @property
    def api_update_time(self):
        """Gets the api_update_time of this Creative.

        Output only. The last update timestamp of the creative through the API.

        :return: The api_update_time of this Creative.
        :rtype: str
        """
        return self._api_update_time

    @api_update_time.setter
    def api_update_time(self, api_update_time):
        """Sets the api_update_time of this Creative.

        Output only. The last update timestamp of the creative through the API.

        :param api_update_time: The api_update_time of this Creative.
        :type api_update_time: str
        """

        self._api_update_time = api_update_time

    @property
    def attributes(self):
        """Gets the attributes of this Creative.

        All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.

        :return: The attributes of this Creative.
        :rtype: List[str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Creative.

        All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.

        :param attributes: The attributes of this Creative.
        :type attributes: List[str]
        """
        allowed_values = ["ATTRIBUTE_UNSPECIFIED", "IMAGE_RICH_MEDIA", "ADOBE_FLASH_FLV", "IS_TAGGED", "IS_COOKIE_TARGETED", "IS_USER_INTEREST_TARGETED", "EXPANDING_DIRECTION_NONE", "EXPANDING_DIRECTION_UP", "EXPANDING_DIRECTION_DOWN", "EXPANDING_DIRECTION_LEFT", "EXPANDING_DIRECTION_RIGHT", "EXPANDING_DIRECTION_UP_LEFT", "EXPANDING_DIRECTION_UP_RIGHT", "EXPANDING_DIRECTION_DOWN_LEFT", "EXPANDING_DIRECTION_DOWN_RIGHT", "CREATIVE_TYPE_HTML", "CREATIVE_TYPE_VAST_VIDEO", "EXPANDING_DIRECTION_UP_OR_DOWN", "EXPANDING_DIRECTION_LEFT_OR_RIGHT", "EXPANDING_DIRECTION_ANY_DIAGONAL", "EXPANDING_ACTION_ROLLOVER_TO_EXPAND", "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_MRAID", "RICH_MEDIA_CAPABILITY_TYPE_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_HTML5", "SKIPPABLE_INSTREAM_VIDEO", "RICH_MEDIA_CAPABILITY_TYPE_SSL", "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL", "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL", "NON_SKIPPABLE_INSTREAM_VIDEO", "NATIVE_ELIGIBILITY_ELIGIBLE", "NON_VPAID", "NATIVE_ELIGIBILITY_NOT_ELIGIBLE", "ANY_INTERSTITIAL", "NON_INTERSTITIAL", "IN_BANNER_VIDEO", "RENDERING_SIZELESS_ADX", "OMSDK_1_0", "RENDERING_PLAYABLE"]  # noqa: E501
        if not set(attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._attributes = attributes

    @property
    def click_through_urls(self):
        """Gets the click_through_urls of this Creative.

        The set of destination URLs for the creative.

        :return: The click_through_urls of this Creative.
        :rtype: List[str]
        """
        return self._click_through_urls

    @click_through_urls.setter
    def click_through_urls(self, click_through_urls):
        """Sets the click_through_urls of this Creative.

        The set of destination URLs for the creative.

        :param click_through_urls: The click_through_urls of this Creative.
        :type click_through_urls: List[str]
        """

        self._click_through_urls = click_through_urls

    @property
    def corrections(self):
        """Gets the corrections of this Creative.

        Output only. Shows any corrections that were applied to this creative.

        :return: The corrections of this Creative.
        :rtype: List[Correction]
        """
        return self._corrections

    @corrections.setter
    def corrections(self, corrections):
        """Sets the corrections of this Creative.

        Output only. Shows any corrections that were applied to this creative.

        :param corrections: The corrections of this Creative.
        :type corrections: List[Correction]
        """

        self._corrections = corrections

    @property
    def creative_id(self):
        """Gets the creative_id of this Creative.

        The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.

        :return: The creative_id of this Creative.
        :rtype: str
        """
        return self._creative_id

    @creative_id.setter
    def creative_id(self, creative_id):
        """Sets the creative_id of this Creative.

        The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.

        :param creative_id: The creative_id of this Creative.
        :type creative_id: str
        """

        self._creative_id = creative_id

    @property
    def deals_status(self):
        """Gets the deals_status of this Creative.

        Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.

        :return: The deals_status of this Creative.
        :rtype: str
        """
        return self._deals_status

    @deals_status.setter
    def deals_status(self, deals_status):
        """Sets the deals_status of this Creative.

        Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.

        :param deals_status: The deals_status of this Creative.
        :type deals_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "NOT_CHECKED", "CONDITIONALLY_APPROVED", "APPROVED", "DISAPPROVED", "PENDING_REVIEW", "STATUS_TYPE_UNSPECIFIED"]  # noqa: E501
        if deals_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deals_status` ({0}), must be one of {1}"
                .format(deals_status, allowed_values)
            )

        self._deals_status = deals_status

    @property
    def declared_click_through_urls(self):
        """Gets the declared_click_through_urls of this Creative.

        The set of declared destination URLs for the creative.

        :return: The declared_click_through_urls of this Creative.
        :rtype: List[str]
        """
        return self._declared_click_through_urls

    @declared_click_through_urls.setter
    def declared_click_through_urls(self, declared_click_through_urls):
        """Sets the declared_click_through_urls of this Creative.

        The set of declared destination URLs for the creative.

        :param declared_click_through_urls: The declared_click_through_urls of this Creative.
        :type declared_click_through_urls: List[str]
        """

        self._declared_click_through_urls = declared_click_through_urls

    @property
    def detected_advertiser_ids(self):
        """Gets the detected_advertiser_ids of this Creative.

        Output only. Detected advertiser IDs, if any.

        :return: The detected_advertiser_ids of this Creative.
        :rtype: List[str]
        """
        return self._detected_advertiser_ids

    @detected_advertiser_ids.setter
    def detected_advertiser_ids(self, detected_advertiser_ids):
        """Sets the detected_advertiser_ids of this Creative.

        Output only. Detected advertiser IDs, if any.

        :param detected_advertiser_ids: The detected_advertiser_ids of this Creative.
        :type detected_advertiser_ids: List[str]
        """

        self._detected_advertiser_ids = detected_advertiser_ids

    @property
    def detected_domains(self):
        """Gets the detected_domains of this Creative.

        Output only. The detected domains for this creative.

        :return: The detected_domains of this Creative.
        :rtype: List[str]
        """
        return self._detected_domains

    @detected_domains.setter
    def detected_domains(self, detected_domains):
        """Sets the detected_domains of this Creative.

        Output only. The detected domains for this creative.

        :param detected_domains: The detected_domains of this Creative.
        :type detected_domains: List[str]
        """

        self._detected_domains = detected_domains

    @property
    def detected_languages(self):
        """Gets the detected_languages of this Creative.

        Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes.

        :return: The detected_languages of this Creative.
        :rtype: List[str]
        """
        return self._detected_languages

    @detected_languages.setter
    def detected_languages(self, detected_languages):
        """Sets the detected_languages of this Creative.

        Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes.

        :param detected_languages: The detected_languages of this Creative.
        :type detected_languages: List[str]
        """

        self._detected_languages = detected_languages

    @property
    def detected_product_categories(self):
        """Gets the detected_product_categories of this Creative.

        Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs.

        :return: The detected_product_categories of this Creative.
        :rtype: List[int]
        """
        return self._detected_product_categories

    @detected_product_categories.setter
    def detected_product_categories(self, detected_product_categories):
        """Sets the detected_product_categories of this Creative.

        Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs.

        :param detected_product_categories: The detected_product_categories of this Creative.
        :type detected_product_categories: List[int]
        """

        self._detected_product_categories = detected_product_categories

    @property
    def detected_sensitive_categories(self):
        """Gets the detected_sensitive_categories of this Creative.

        Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.

        :return: The detected_sensitive_categories of this Creative.
        :rtype: List[int]
        """
        return self._detected_sensitive_categories

    @detected_sensitive_categories.setter
    def detected_sensitive_categories(self, detected_sensitive_categories):
        """Sets the detected_sensitive_categories of this Creative.

        Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.

        :param detected_sensitive_categories: The detected_sensitive_categories of this Creative.
        :type detected_sensitive_categories: List[int]
        """

        self._detected_sensitive_categories = detected_sensitive_categories

    @property
    def html(self):
        """Gets the html of this Creative.


        :return: The html of this Creative.
        :rtype: HtmlContent
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Creative.


        :param html: The html of this Creative.
        :type html: HtmlContent
        """

        self._html = html

    @property
    def impression_tracking_urls(self):
        """Gets the impression_tracking_urls of this Creative.

        The set of URLs to be called to record an impression.

        :return: The impression_tracking_urls of this Creative.
        :rtype: List[str]
        """
        return self._impression_tracking_urls

    @impression_tracking_urls.setter
    def impression_tracking_urls(self, impression_tracking_urls):
        """Sets the impression_tracking_urls of this Creative.

        The set of URLs to be called to record an impression.

        :param impression_tracking_urls: The impression_tracking_urls of this Creative.
        :type impression_tracking_urls: List[str]
        """

        self._impression_tracking_urls = impression_tracking_urls

    @property
    def native(self):
        """Gets the native of this Creative.


        :return: The native of this Creative.
        :rtype: NativeContent
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this Creative.


        :param native: The native of this Creative.
        :type native: NativeContent
        """

        self._native = native

    @property
    def open_auction_status(self):
        """Gets the open_auction_status of this Creative.

        Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.

        :return: The open_auction_status of this Creative.
        :rtype: str
        """
        return self._open_auction_status

    @open_auction_status.setter
    def open_auction_status(self, open_auction_status):
        """Sets the open_auction_status of this Creative.

        Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.

        :param open_auction_status: The open_auction_status of this Creative.
        :type open_auction_status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "NOT_CHECKED", "CONDITIONALLY_APPROVED", "APPROVED", "DISAPPROVED", "PENDING_REVIEW", "STATUS_TYPE_UNSPECIFIED"]  # noqa: E501
        if open_auction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `open_auction_status` ({0}), must be one of {1}"
                .format(open_auction_status, allowed_values)
            )

        self._open_auction_status = open_auction_status

    @property
    def restricted_categories(self):
        """Gets the restricted_categories of this Creative.

        All restricted categories for the ads that may be shown from this creative.

        :return: The restricted_categories of this Creative.
        :rtype: List[str]
        """
        return self._restricted_categories

    @restricted_categories.setter
    def restricted_categories(self, restricted_categories):
        """Sets the restricted_categories of this Creative.

        All restricted categories for the ads that may be shown from this creative.

        :param restricted_categories: The restricted_categories of this Creative.
        :type restricted_categories: List[str]
        """
        allowed_values = ["NO_RESTRICTED_CATEGORIES", "ALCOHOL"]  # noqa: E501
        if not set(restricted_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `restricted_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(restricted_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._restricted_categories = restricted_categories

    @property
    def serving_restrictions(self):
        """Gets the serving_restrictions of this Creative.

        Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).

        :return: The serving_restrictions of this Creative.
        :rtype: List[ServingRestriction]
        """
        return self._serving_restrictions

    @serving_restrictions.setter
    def serving_restrictions(self, serving_restrictions):
        """Sets the serving_restrictions of this Creative.

        Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).

        :param serving_restrictions: The serving_restrictions of this Creative.
        :type serving_restrictions: List[ServingRestriction]
        """

        self._serving_restrictions = serving_restrictions

    @property
    def vendor_ids(self):
        """Gets the vendor_ids of this Creative.

        All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values.

        :return: The vendor_ids of this Creative.
        :rtype: List[int]
        """
        return self._vendor_ids

    @vendor_ids.setter
    def vendor_ids(self, vendor_ids):
        """Sets the vendor_ids of this Creative.

        All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values.

        :param vendor_ids: The vendor_ids of this Creative.
        :type vendor_ids: List[int]
        """

        self._vendor_ids = vendor_ids

    @property
    def version(self):
        """Gets the version of this Creative.

        Output only. The version of this creative.

        :return: The version of this Creative.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Creative.

        Output only. The version of this creative.

        :param version: The version of this Creative.
        :type version: int
        """

        self._version = version

    @property
    def video(self):
        """Gets the video of this Creative.


        :return: The video of this Creative.
        :rtype: VideoContent
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Creative.


        :param video: The video of this Creative.
        :type video: VideoContent
        """

        self._video = video
