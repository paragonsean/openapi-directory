# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.buyer import Buyer
from openapi_server.models.contact_information import ContactInformation
from openapi_server.models.deal import Deal
from openapi_server.models.note import Note
from openapi_server.models.private_data import PrivateData
from openapi_server.models.seller import Seller
from openapi_server import util


class Proposal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billed_buyer: Buyer=None, buyer: Buyer=None, buyer_contacts: List[ContactInformation]=None, buyer_private_data: PrivateData=None, deals: List[Deal]=None, display_name: str=None, is_renegotiating: bool=None, is_setup_complete: bool=None, last_updater_or_commentor_role: str=None, notes: List[Note]=None, originator_role: str=None, private_auction_id: str=None, proposal_id: str=None, proposal_revision: str=None, proposal_state: str=None, seller: Seller=None, seller_contacts: List[ContactInformation]=None, terms_and_conditions: str=None, update_time: str=None):
        """Proposal - a model defined in OpenAPI

        :param billed_buyer: The billed_buyer of this Proposal.
        :param buyer: The buyer of this Proposal.
        :param buyer_contacts: The buyer_contacts of this Proposal.
        :param buyer_private_data: The buyer_private_data of this Proposal.
        :param deals: The deals of this Proposal.
        :param display_name: The display_name of this Proposal.
        :param is_renegotiating: The is_renegotiating of this Proposal.
        :param is_setup_complete: The is_setup_complete of this Proposal.
        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :param notes: The notes of this Proposal.
        :param originator_role: The originator_role of this Proposal.
        :param private_auction_id: The private_auction_id of this Proposal.
        :param proposal_id: The proposal_id of this Proposal.
        :param proposal_revision: The proposal_revision of this Proposal.
        :param proposal_state: The proposal_state of this Proposal.
        :param seller: The seller of this Proposal.
        :param seller_contacts: The seller_contacts of this Proposal.
        :param terms_and_conditions: The terms_and_conditions of this Proposal.
        :param update_time: The update_time of this Proposal.
        """
        self.openapi_types = {
            'billed_buyer': Buyer,
            'buyer': Buyer,
            'buyer_contacts': List[ContactInformation],
            'buyer_private_data': PrivateData,
            'deals': List[Deal],
            'display_name': str,
            'is_renegotiating': bool,
            'is_setup_complete': bool,
            'last_updater_or_commentor_role': str,
            'notes': List[Note],
            'originator_role': str,
            'private_auction_id': str,
            'proposal_id': str,
            'proposal_revision': str,
            'proposal_state': str,
            'seller': Seller,
            'seller_contacts': List[ContactInformation],
            'terms_and_conditions': str,
            'update_time': str
        }

        self.attribute_map = {
            'billed_buyer': 'billedBuyer',
            'buyer': 'buyer',
            'buyer_contacts': 'buyerContacts',
            'buyer_private_data': 'buyerPrivateData',
            'deals': 'deals',
            'display_name': 'displayName',
            'is_renegotiating': 'isRenegotiating',
            'is_setup_complete': 'isSetupComplete',
            'last_updater_or_commentor_role': 'lastUpdaterOrCommentorRole',
            'notes': 'notes',
            'originator_role': 'originatorRole',
            'private_auction_id': 'privateAuctionId',
            'proposal_id': 'proposalId',
            'proposal_revision': 'proposalRevision',
            'proposal_state': 'proposalState',
            'seller': 'seller',
            'seller_contacts': 'sellerContacts',
            'terms_and_conditions': 'termsAndConditions',
            'update_time': 'updateTime'
        }

        self._billed_buyer = billed_buyer
        self._buyer = buyer
        self._buyer_contacts = buyer_contacts
        self._buyer_private_data = buyer_private_data
        self._deals = deals
        self._display_name = display_name
        self._is_renegotiating = is_renegotiating
        self._is_setup_complete = is_setup_complete
        self._last_updater_or_commentor_role = last_updater_or_commentor_role
        self._notes = notes
        self._originator_role = originator_role
        self._private_auction_id = private_auction_id
        self._proposal_id = proposal_id
        self._proposal_revision = proposal_revision
        self._proposal_state = proposal_state
        self._seller = seller
        self._seller_contacts = seller_contacts
        self._terms_and_conditions = terms_and_conditions
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Proposal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Proposal of this Proposal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billed_buyer(self):
        """Gets the billed_buyer of this Proposal.


        :return: The billed_buyer of this Proposal.
        :rtype: Buyer
        """
        return self._billed_buyer

    @billed_buyer.setter
    def billed_buyer(self, billed_buyer):
        """Sets the billed_buyer of this Proposal.


        :param billed_buyer: The billed_buyer of this Proposal.
        :type billed_buyer: Buyer
        """

        self._billed_buyer = billed_buyer

    @property
    def buyer(self):
        """Gets the buyer of this Proposal.


        :return: The buyer of this Proposal.
        :rtype: Buyer
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this Proposal.


        :param buyer: The buyer of this Proposal.
        :type buyer: Buyer
        """

        self._buyer = buyer

    @property
    def buyer_contacts(self):
        """Gets the buyer_contacts of this Proposal.

        Contact information for the buyer.

        :return: The buyer_contacts of this Proposal.
        :rtype: List[ContactInformation]
        """
        return self._buyer_contacts

    @buyer_contacts.setter
    def buyer_contacts(self, buyer_contacts):
        """Sets the buyer_contacts of this Proposal.

        Contact information for the buyer.

        :param buyer_contacts: The buyer_contacts of this Proposal.
        :type buyer_contacts: List[ContactInformation]
        """

        self._buyer_contacts = buyer_contacts

    @property
    def buyer_private_data(self):
        """Gets the buyer_private_data of this Proposal.


        :return: The buyer_private_data of this Proposal.
        :rtype: PrivateData
        """
        return self._buyer_private_data

    @buyer_private_data.setter
    def buyer_private_data(self, buyer_private_data):
        """Sets the buyer_private_data of this Proposal.


        :param buyer_private_data: The buyer_private_data of this Proposal.
        :type buyer_private_data: PrivateData
        """

        self._buyer_private_data = buyer_private_data

    @property
    def deals(self):
        """Gets the deals of this Proposal.

        The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.

        :return: The deals of this Proposal.
        :rtype: List[Deal]
        """
        return self._deals

    @deals.setter
    def deals(self, deals):
        """Sets the deals of this Proposal.

        The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.

        :param deals: The deals of this Proposal.
        :type deals: List[Deal]
        """

        self._deals = deals

    @property
    def display_name(self):
        """Gets the display_name of this Proposal.

        The name for the proposal.

        :return: The display_name of this Proposal.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Proposal.

        The name for the proposal.

        :param display_name: The display_name of this Proposal.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_renegotiating(self):
        """Gets the is_renegotiating of this Proposal.

        Output only. True if the proposal is being renegotiated.

        :return: The is_renegotiating of this Proposal.
        :rtype: bool
        """
        return self._is_renegotiating

    @is_renegotiating.setter
    def is_renegotiating(self, is_renegotiating):
        """Sets the is_renegotiating of this Proposal.

        Output only. True if the proposal is being renegotiated.

        :param is_renegotiating: The is_renegotiating of this Proposal.
        :type is_renegotiating: bool
        """

        self._is_renegotiating = is_renegotiating

    @property
    def is_setup_complete(self):
        """Gets the is_setup_complete of this Proposal.

        Output only. True, if the buyside inventory setup is complete for this proposal.

        :return: The is_setup_complete of this Proposal.
        :rtype: bool
        """
        return self._is_setup_complete

    @is_setup_complete.setter
    def is_setup_complete(self, is_setup_complete):
        """Sets the is_setup_complete of this Proposal.

        Output only. True, if the buyside inventory setup is complete for this proposal.

        :param is_setup_complete: The is_setup_complete of this Proposal.
        :type is_setup_complete: bool
        """

        self._is_setup_complete = is_setup_complete

    @property
    def last_updater_or_commentor_role(self):
        """Gets the last_updater_or_commentor_role of this Proposal.

        Output only. The role of the last user that either updated the proposal or left a comment.

        :return: The last_updater_or_commentor_role of this Proposal.
        :rtype: str
        """
        return self._last_updater_or_commentor_role

    @last_updater_or_commentor_role.setter
    def last_updater_or_commentor_role(self, last_updater_or_commentor_role):
        """Sets the last_updater_or_commentor_role of this Proposal.

        Output only. The role of the last user that either updated the proposal or left a comment.

        :param last_updater_or_commentor_role: The last_updater_or_commentor_role of this Proposal.
        :type last_updater_or_commentor_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if last_updater_or_commentor_role not in allowed_values:
            raise ValueError(
                "Invalid value for `last_updater_or_commentor_role` ({0}), must be one of {1}"
                .format(last_updater_or_commentor_role, allowed_values)
            )

        self._last_updater_or_commentor_role = last_updater_or_commentor_role

    @property
    def notes(self):
        """Gets the notes of this Proposal.

        Output only. The notes associated with this proposal.

        :return: The notes of this Proposal.
        :rtype: List[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Proposal.

        Output only. The notes associated with this proposal.

        :param notes: The notes of this Proposal.
        :type notes: List[Note]
        """

        self._notes = notes

    @property
    def originator_role(self):
        """Gets the originator_role of this Proposal.

        Output only. Indicates whether the buyer/seller created the proposal.

        :return: The originator_role of this Proposal.
        :rtype: str
        """
        return self._originator_role

    @originator_role.setter
    def originator_role(self, originator_role):
        """Sets the originator_role of this Proposal.

        Output only. Indicates whether the buyer/seller created the proposal.

        :param originator_role: The originator_role of this Proposal.
        :type originator_role: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if originator_role not in allowed_values:
            raise ValueError(
                "Invalid value for `originator_role` ({0}), must be one of {1}"
                .format(originator_role, allowed_values)
            )

        self._originator_role = originator_role

    @property
    def private_auction_id(self):
        """Gets the private_auction_id of this Proposal.

        Output only. Private auction ID if this proposal is a private auction proposal.

        :return: The private_auction_id of this Proposal.
        :rtype: str
        """
        return self._private_auction_id

    @private_auction_id.setter
    def private_auction_id(self, private_auction_id):
        """Sets the private_auction_id of this Proposal.

        Output only. Private auction ID if this proposal is a private auction proposal.

        :param private_auction_id: The private_auction_id of this Proposal.
        :type private_auction_id: str
        """

        self._private_auction_id = private_auction_id

    @property
    def proposal_id(self):
        """Gets the proposal_id of this Proposal.

        Output only. The unique ID of the proposal.

        :return: The proposal_id of this Proposal.
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this Proposal.

        Output only. The unique ID of the proposal.

        :param proposal_id: The proposal_id of this Proposal.
        :type proposal_id: str
        """

        self._proposal_id = proposal_id

    @property
    def proposal_revision(self):
        """Gets the proposal_revision of this Proposal.

        Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :return: The proposal_revision of this Proposal.
        :rtype: str
        """
        return self._proposal_revision

    @proposal_revision.setter
    def proposal_revision(self, proposal_revision):
        """Sets the proposal_revision of this Proposal.

        Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.

        :param proposal_revision: The proposal_revision of this Proposal.
        :type proposal_revision: str
        """

        self._proposal_revision = proposal_revision

    @property
    def proposal_state(self):
        """Gets the proposal_state of this Proposal.

        Output only. The current state of the proposal.

        :return: The proposal_state of this Proposal.
        :rtype: str
        """
        return self._proposal_state

    @proposal_state.setter
    def proposal_state(self, proposal_state):
        """Sets the proposal_state of this Proposal.

        Output only. The current state of the proposal.

        :param proposal_state: The proposal_state of this Proposal.
        :type proposal_state: str
        """
        allowed_values = ["PROPOSAL_STATE_UNSPECIFIED", "PROPOSED", "BUYER_ACCEPTED", "SELLER_ACCEPTED", "CANCELED", "FINALIZED"]  # noqa: E501
        if proposal_state not in allowed_values:
            raise ValueError(
                "Invalid value for `proposal_state` ({0}), must be one of {1}"
                .format(proposal_state, allowed_values)
            )

        self._proposal_state = proposal_state

    @property
    def seller(self):
        """Gets the seller of this Proposal.


        :return: The seller of this Proposal.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Proposal.


        :param seller: The seller of this Proposal.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def seller_contacts(self):
        """Gets the seller_contacts of this Proposal.

        Output only. Contact information for the seller.

        :return: The seller_contacts of this Proposal.
        :rtype: List[ContactInformation]
        """
        return self._seller_contacts

    @seller_contacts.setter
    def seller_contacts(self, seller_contacts):
        """Sets the seller_contacts of this Proposal.

        Output only. Contact information for the seller.

        :param seller_contacts: The seller_contacts of this Proposal.
        :type seller_contacts: List[ContactInformation]
        """

        self._seller_contacts = seller_contacts

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this Proposal.

        Output only. The terms and conditions set by the publisher for this proposal.

        :return: The terms_and_conditions of this Proposal.
        :rtype: str
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this Proposal.

        Output only. The terms and conditions set by the publisher for this proposal.

        :param terms_and_conditions: The terms_and_conditions of this Proposal.
        :type terms_and_conditions: str
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def update_time(self):
        """Gets the update_time of this Proposal.

        Output only. The time when the proposal was last revised.

        :return: The update_time of this Proposal.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Proposal.

        Output only. The time when the proposal was last revised.

        :param update_time: The update_time of this Proposal.
        :type update_time: str
        """

        self._update_time = update_time
