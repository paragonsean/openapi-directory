# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Money=None, pricing_type: str=None):
        """Price - a model defined in OpenAPI

        :param amount: The amount of this Price.
        :param pricing_type: The pricing_type of this Price.
        """
        self.openapi_types = {
            'amount': Money,
            'pricing_type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'pricing_type': 'pricingType'
        }

        self._amount = amount
        self._pricing_type = pricing_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Price.


        :return: The amount of this Price.
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Price.


        :param amount: The amount of this Price.
        :type amount: Money
        """

        self._amount = amount

    @property
    def pricing_type(self):
        """Gets the pricing_type of this Price.

        The pricing type for the deal/product. (default: CPM)

        :return: The pricing_type of this Price.
        :rtype: str
        """
        return self._pricing_type

    @pricing_type.setter
    def pricing_type(self, pricing_type):
        """Sets the pricing_type of this Price.

        The pricing type for the deal/product. (default: CPM)

        :param pricing_type: The pricing_type of this Price.
        :type pricing_type: str
        """
        allowed_values = ["PRICING_TYPE_UNSPECIFIED", "COST_PER_MILLE", "COST_PER_DAY"]  # noqa: E501
        if pricing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pricing_type` ({0}), must be one of {1}"
                .format(pricing_type, allowed_values)
            )

        self._pricing_type = pricing_type
