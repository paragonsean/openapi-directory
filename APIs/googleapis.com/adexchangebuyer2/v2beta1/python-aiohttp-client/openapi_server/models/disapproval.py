# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Disapproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[str]=None, reason: str=None):
        """Disapproval - a model defined in OpenAPI

        :param details: The details of this Disapproval.
        :param reason: The reason of this Disapproval.
        """
        self.openapi_types = {
            'details': List[str],
            'reason': str
        }

        self.attribute_map = {
            'details': 'details',
            'reason': 'reason'
        }

        self._details = details
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Disapproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Disapproval of this Disapproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this Disapproval.

        Additional details about the reason for disapproval.

        :return: The details of this Disapproval.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Disapproval.

        Additional details about the reason for disapproval.

        :param details: The details of this Disapproval.
        :type details: List[str]
        """

        self._details = details

    @property
    def reason(self):
        """Gets the reason of this Disapproval.

        The categorized reason for disapproval.

        :return: The reason of this Disapproval.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Disapproval.

        The categorized reason for disapproval.

        :param reason: The reason of this Disapproval.
        :type reason: str
        """
        allowed_values = ["LENGTH_OF_IMAGE_ANIMATION", "BROKEN_URL", "MEDIA_NOT_FUNCTIONAL", "INVALID_FOURTH_PARTY_CALL", "INCORRECT_REMARKETING_DECLARATION", "LANDING_PAGE_ERROR", "AD_SIZE_DOES_NOT_MATCH_AD_SLOT", "NO_BORDER", "FOURTH_PARTY_BROWSER_COOKIES", "LSO_OBJECTS", "BLANK_CREATIVE", "DESTINATION_URLS_UNDECLARED", "PROBLEM_WITH_CLICK_MACRO", "INCORRECT_AD_TECHNOLOGY_DECLARATION", "INCORRECT_DESTINATION_URL_DECLARATION", "EXPANDABLE_INCORRECT_DIRECTION", "EXPANDABLE_DIRECTION_NOT_SUPPORTED", "EXPANDABLE_INVALID_VENDOR", "EXPANDABLE_FUNCTIONALITY", "VIDEO_INVALID_VENDOR", "VIDEO_UNSUPPORTED_LENGTH", "VIDEO_UNSUPPORTED_FORMAT", "VIDEO_FUNCTIONALITY", "LANDING_PAGE_DISABLED", "MALWARE_SUSPECTED", "ADULT_IMAGE_OR_VIDEO", "INACCURATE_AD_TEXT", "COUNTERFEIT_DESIGNER_GOODS", "POP_UP", "INVALID_RTB_PROTOCOL_USAGE", "RAW_IP_ADDRESS_IN_SNIPPET", "UNACCEPTABLE_CONTENT_SOFTWARE", "UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN", "UNDECLARED_FLASH_OBJECTS", "INVALID_SSL_DECLARATION", "DIRECT_DOWNLOAD_IN_AD", "MAXIMUM_DOWNLOAD_SIZE_EXCEEDED", "DESTINATION_URL_SITE_NOT_CRAWLABLE", "BAD_URL_LEGAL_DISAPPROVAL", "PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED", "DYNAMIC_DNS_AT_DESTINATION_URL", "POOR_IMAGE_OR_VIDEO_QUALITY", "UNACCEPTABLE_IMAGE_CONTENT", "INCORRECT_IMAGE_LAYOUT", "IRRELEVANT_IMAGE_OR_VIDEO", "DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK", "MISLEADING_CLAIMS_IN_AD", "RESTRICTED_PRODUCTS", "UNACCEPTABLE_CONTENT", "AUTOMATED_AD_CLICKING", "INVALID_URL_PROTOCOL", "UNDECLARED_RESTRICTED_CONTENT", "INVALID_REMARKETING_LIST_USAGE", "DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT", "CLICK_TO_DOWNLOAD_NOT_AN_APP", "INACCURATE_REVIEW_EXTENSION", "SEXUALLY_EXPLICIT_CONTENT", "GAINING_AN_UNFAIR_ADVANTAGE", "GAMING_THE_GOOGLE_NETWORK", "DANGEROUS_PRODUCTS_KNIVES", "DANGEROUS_PRODUCTS_EXPLOSIVES", "DANGEROUS_PRODUCTS_GUNS", "DANGEROUS_PRODUCTS_DRUGS", "DANGEROUS_PRODUCTS_TOBACCO", "DANGEROUS_PRODUCTS_WEAPONS", "UNCLEAR_OR_IRRELEVANT_AD", "PROFESSIONAL_STANDARDS", "DYSFUNCTIONAL_PROMOTION", "INVALID_INTEREST_BASED_AD", "MISUSE_OF_PERSONAL_INFORMATION", "OMISSION_OF_RELEVANT_INFORMATION", "UNAVAILABLE_PROMOTIONS", "MISLEADING_PROMOTIONS", "INAPPROPRIATE_CONTENT", "SENSITIVE_EVENTS", "SHOCKING_CONTENT", "ENABLING_DISHONEST_BEHAVIOR", "TECHNICAL_REQUIREMENTS", "RESTRICTED_POLITICAL_CONTENT", "UNSUPPORTED_CONTENT", "INVALID_BIDDING_METHOD", "VIDEO_TOO_LONG", "VIOLATES_JAPANESE_PHARMACY_LAW", "UNACCREDITED_PET_PHARMACY", "ABORTION", "CONTRACEPTIVES", "NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA", "KCDSP_REGISTRATION", "NOT_FAMILY_SAFE", "CLINICAL_TRIAL_RECRUITMENT", "MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED", "MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED", "PERSONAL_LOANS", "UNSUPPORTED_FLASH_CONTENT", "MISUSE_BY_OMID_SCRIPT", "NON_WHITELISTED_OMID_VENDOR", "DESTINATION_EXPERIENCE", "UNSUPPORTED_LANGUAGE", "NON_SSL_COMPLIANT", "TEMPORARY_PAUSE", "BAIL_BONDS", "EXPERIMENTAL_MEDICAL_TREATMENT"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
