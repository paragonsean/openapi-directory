# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_value import MetricValue
from openapi_server.models.row_dimensions import RowDimensions
from openapi_server import util


class NonBillableWinningBidStatusRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bid_count: MetricValue=None, row_dimensions: RowDimensions=None, status: str=None):
        """NonBillableWinningBidStatusRow - a model defined in OpenAPI

        :param bid_count: The bid_count of this NonBillableWinningBidStatusRow.
        :param row_dimensions: The row_dimensions of this NonBillableWinningBidStatusRow.
        :param status: The status of this NonBillableWinningBidStatusRow.
        """
        self.openapi_types = {
            'bid_count': MetricValue,
            'row_dimensions': RowDimensions,
            'status': str
        }

        self.attribute_map = {
            'bid_count': 'bidCount',
            'row_dimensions': 'rowDimensions',
            'status': 'status'
        }

        self._bid_count = bid_count
        self._row_dimensions = row_dimensions
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NonBillableWinningBidStatusRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NonBillableWinningBidStatusRow of this NonBillableWinningBidStatusRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_count(self):
        """Gets the bid_count of this NonBillableWinningBidStatusRow.


        :return: The bid_count of this NonBillableWinningBidStatusRow.
        :rtype: MetricValue
        """
        return self._bid_count

    @bid_count.setter
    def bid_count(self, bid_count):
        """Sets the bid_count of this NonBillableWinningBidStatusRow.


        :param bid_count: The bid_count of this NonBillableWinningBidStatusRow.
        :type bid_count: MetricValue
        """

        self._bid_count = bid_count

    @property
    def row_dimensions(self):
        """Gets the row_dimensions of this NonBillableWinningBidStatusRow.


        :return: The row_dimensions of this NonBillableWinningBidStatusRow.
        :rtype: RowDimensions
        """
        return self._row_dimensions

    @row_dimensions.setter
    def row_dimensions(self, row_dimensions):
        """Sets the row_dimensions of this NonBillableWinningBidStatusRow.


        :param row_dimensions: The row_dimensions of this NonBillableWinningBidStatusRow.
        :type row_dimensions: RowDimensions
        """

        self._row_dimensions = row_dimensions

    @property
    def status(self):
        """Gets the status of this NonBillableWinningBidStatusRow.

        The status specifying why the winning bids were not billed.

        :return: The status of this NonBillableWinningBidStatusRow.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NonBillableWinningBidStatusRow.

        The status specifying why the winning bids were not billed.

        :param status: The status of this NonBillableWinningBidStatusRow.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "AD_NOT_RENDERED", "INVALID_IMPRESSION", "FATAL_VAST_ERROR", "LOST_IN_MEDIATION"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
