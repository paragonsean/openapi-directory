# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_information import ContactInformation
from openapi_server.models.creative_restrictions import CreativeRestrictions
from openapi_server.models.deal_serving_metadata import DealServingMetadata
from openapi_server.models.deal_terms import DealTerms
from openapi_server.models.delivery_control import DeliveryControl
from openapi_server.models.marketplace_targeting import MarketplaceTargeting
from openapi_server.models.private_data import PrivateData
from openapi_server.models.targeting_criteria import TargetingCriteria
from openapi_server import util


class Deal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_end_time: str=None, available_start_time: str=None, buyer_private_data: PrivateData=None, create_product_id: str=None, create_product_revision: str=None, create_time: str=None, creative_pre_approval_policy: str=None, creative_restrictions: CreativeRestrictions=None, creative_safe_frame_compatibility: str=None, deal_id: str=None, deal_serving_metadata: DealServingMetadata=None, deal_terms: DealTerms=None, delivery_control: DeliveryControl=None, description: str=None, display_name: str=None, external_deal_id: str=None, is_setup_complete: bool=None, programmatic_creative_source: str=None, proposal_id: str=None, seller_contacts: List[ContactInformation]=None, syndication_product: str=None, targeting: MarketplaceTargeting=None, targeting_criterion: List[TargetingCriteria]=None, update_time: str=None, web_property_code: str=None):
        """Deal - a model defined in OpenAPI

        :param available_end_time: The available_end_time of this Deal.
        :param available_start_time: The available_start_time of this Deal.
        :param buyer_private_data: The buyer_private_data of this Deal.
        :param create_product_id: The create_product_id of this Deal.
        :param create_product_revision: The create_product_revision of this Deal.
        :param create_time: The create_time of this Deal.
        :param creative_pre_approval_policy: The creative_pre_approval_policy of this Deal.
        :param creative_restrictions: The creative_restrictions of this Deal.
        :param creative_safe_frame_compatibility: The creative_safe_frame_compatibility of this Deal.
        :param deal_id: The deal_id of this Deal.
        :param deal_serving_metadata: The deal_serving_metadata of this Deal.
        :param deal_terms: The deal_terms of this Deal.
        :param delivery_control: The delivery_control of this Deal.
        :param description: The description of this Deal.
        :param display_name: The display_name of this Deal.
        :param external_deal_id: The external_deal_id of this Deal.
        :param is_setup_complete: The is_setup_complete of this Deal.
        :param programmatic_creative_source: The programmatic_creative_source of this Deal.
        :param proposal_id: The proposal_id of this Deal.
        :param seller_contacts: The seller_contacts of this Deal.
        :param syndication_product: The syndication_product of this Deal.
        :param targeting: The targeting of this Deal.
        :param targeting_criterion: The targeting_criterion of this Deal.
        :param update_time: The update_time of this Deal.
        :param web_property_code: The web_property_code of this Deal.
        """
        self.openapi_types = {
            'available_end_time': str,
            'available_start_time': str,
            'buyer_private_data': PrivateData,
            'create_product_id': str,
            'create_product_revision': str,
            'create_time': str,
            'creative_pre_approval_policy': str,
            'creative_restrictions': CreativeRestrictions,
            'creative_safe_frame_compatibility': str,
            'deal_id': str,
            'deal_serving_metadata': DealServingMetadata,
            'deal_terms': DealTerms,
            'delivery_control': DeliveryControl,
            'description': str,
            'display_name': str,
            'external_deal_id': str,
            'is_setup_complete': bool,
            'programmatic_creative_source': str,
            'proposal_id': str,
            'seller_contacts': List[ContactInformation],
            'syndication_product': str,
            'targeting': MarketplaceTargeting,
            'targeting_criterion': List[TargetingCriteria],
            'update_time': str,
            'web_property_code': str
        }

        self.attribute_map = {
            'available_end_time': 'availableEndTime',
            'available_start_time': 'availableStartTime',
            'buyer_private_data': 'buyerPrivateData',
            'create_product_id': 'createProductId',
            'create_product_revision': 'createProductRevision',
            'create_time': 'createTime',
            'creative_pre_approval_policy': 'creativePreApprovalPolicy',
            'creative_restrictions': 'creativeRestrictions',
            'creative_safe_frame_compatibility': 'creativeSafeFrameCompatibility',
            'deal_id': 'dealId',
            'deal_serving_metadata': 'dealServingMetadata',
            'deal_terms': 'dealTerms',
            'delivery_control': 'deliveryControl',
            'description': 'description',
            'display_name': 'displayName',
            'external_deal_id': 'externalDealId',
            'is_setup_complete': 'isSetupComplete',
            'programmatic_creative_source': 'programmaticCreativeSource',
            'proposal_id': 'proposalId',
            'seller_contacts': 'sellerContacts',
            'syndication_product': 'syndicationProduct',
            'targeting': 'targeting',
            'targeting_criterion': 'targetingCriterion',
            'update_time': 'updateTime',
            'web_property_code': 'webPropertyCode'
        }

        self._available_end_time = available_end_time
        self._available_start_time = available_start_time
        self._buyer_private_data = buyer_private_data
        self._create_product_id = create_product_id
        self._create_product_revision = create_product_revision
        self._create_time = create_time
        self._creative_pre_approval_policy = creative_pre_approval_policy
        self._creative_restrictions = creative_restrictions
        self._creative_safe_frame_compatibility = creative_safe_frame_compatibility
        self._deal_id = deal_id
        self._deal_serving_metadata = deal_serving_metadata
        self._deal_terms = deal_terms
        self._delivery_control = delivery_control
        self._description = description
        self._display_name = display_name
        self._external_deal_id = external_deal_id
        self._is_setup_complete = is_setup_complete
        self._programmatic_creative_source = programmatic_creative_source
        self._proposal_id = proposal_id
        self._seller_contacts = seller_contacts
        self._syndication_product = syndication_product
        self._targeting = targeting
        self._targeting_criterion = targeting_criterion
        self._update_time = update_time
        self._web_property_code = web_property_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Deal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Deal of this Deal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_end_time(self):
        """Gets the available_end_time of this Deal.

        Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.

        :return: The available_end_time of this Deal.
        :rtype: str
        """
        return self._available_end_time

    @available_end_time.setter
    def available_end_time(self, available_end_time):
        """Sets the available_end_time of this Deal.

        Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.

        :param available_end_time: The available_end_time of this Deal.
        :type available_end_time: str
        """

        self._available_end_time = available_end_time

    @property
    def available_start_time(self):
        """Gets the available_start_time of this Deal.

        Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.

        :return: The available_start_time of this Deal.
        :rtype: str
        """
        return self._available_start_time

    @available_start_time.setter
    def available_start_time(self, available_start_time):
        """Sets the available_start_time of this Deal.

        Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.

        :param available_start_time: The available_start_time of this Deal.
        :type available_start_time: str
        """

        self._available_start_time = available_start_time

    @property
    def buyer_private_data(self):
        """Gets the buyer_private_data of this Deal.


        :return: The buyer_private_data of this Deal.
        :rtype: PrivateData
        """
        return self._buyer_private_data

    @buyer_private_data.setter
    def buyer_private_data(self, buyer_private_data):
        """Sets the buyer_private_data of this Deal.


        :param buyer_private_data: The buyer_private_data of this Deal.
        :type buyer_private_data: PrivateData
        """

        self._buyer_private_data = buyer_private_data

    @property
    def create_product_id(self):
        """Gets the create_product_id of this Deal.

        The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :return: The create_product_id of this Deal.
        :rtype: str
        """
        return self._create_product_id

    @create_product_id.setter
    def create_product_id(self, create_product_id):
        """Sets the create_product_id of this Deal.

        The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :param create_product_id: The create_product_id of this Deal.
        :type create_product_id: str
        """

        self._create_product_id = create_product_id

    @property
    def create_product_revision(self):
        """Gets the create_product_revision of this Deal.

        Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :return: The create_product_revision of this Deal.
        :rtype: str
        """
        return self._create_product_revision

    @create_product_revision.setter
    def create_product_revision(self, create_product_revision):
        """Sets the create_product_revision of this Deal.

        Optional. Revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced since the passed-in `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :param create_product_revision: The create_product_revision of this Deal.
        :type create_product_revision: str
        """

        self._create_product_revision = create_product_revision

    @property
    def create_time(self):
        """Gets the create_time of this Deal.

        Output only. The time of the deal creation.

        :return: The create_time of this Deal.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Deal.

        Output only. The time of the deal creation.

        :param create_time: The create_time of this Deal.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creative_pre_approval_policy(self):
        """Gets the creative_pre_approval_policy of this Deal.

        Output only. Specifies the creative pre-approval policy.

        :return: The creative_pre_approval_policy of this Deal.
        :rtype: str
        """
        return self._creative_pre_approval_policy

    @creative_pre_approval_policy.setter
    def creative_pre_approval_policy(self, creative_pre_approval_policy):
        """Sets the creative_pre_approval_policy of this Deal.

        Output only. Specifies the creative pre-approval policy.

        :param creative_pre_approval_policy: The creative_pre_approval_policy of this Deal.
        :type creative_pre_approval_policy: str
        """
        allowed_values = ["CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED", "SELLER_PRE_APPROVAL_REQUIRED", "SELLER_PRE_APPROVAL_NOT_REQUIRED"]  # noqa: E501
        if creative_pre_approval_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_pre_approval_policy` ({0}), must be one of {1}"
                .format(creative_pre_approval_policy, allowed_values)
            )

        self._creative_pre_approval_policy = creative_pre_approval_policy

    @property
    def creative_restrictions(self):
        """Gets the creative_restrictions of this Deal.


        :return: The creative_restrictions of this Deal.
        :rtype: CreativeRestrictions
        """
        return self._creative_restrictions

    @creative_restrictions.setter
    def creative_restrictions(self, creative_restrictions):
        """Sets the creative_restrictions of this Deal.


        :param creative_restrictions: The creative_restrictions of this Deal.
        :type creative_restrictions: CreativeRestrictions
        """

        self._creative_restrictions = creative_restrictions

    @property
    def creative_safe_frame_compatibility(self):
        """Gets the creative_safe_frame_compatibility of this Deal.

        Output only. Specifies whether the creative is safeFrame compatible.

        :return: The creative_safe_frame_compatibility of this Deal.
        :rtype: str
        """
        return self._creative_safe_frame_compatibility

    @creative_safe_frame_compatibility.setter
    def creative_safe_frame_compatibility(self, creative_safe_frame_compatibility):
        """Sets the creative_safe_frame_compatibility of this Deal.

        Output only. Specifies whether the creative is safeFrame compatible.

        :param creative_safe_frame_compatibility: The creative_safe_frame_compatibility of this Deal.
        :type creative_safe_frame_compatibility: str
        """
        allowed_values = ["CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED", "COMPATIBLE", "INCOMPATIBLE"]  # noqa: E501
        if creative_safe_frame_compatibility not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_safe_frame_compatibility` ({0}), must be one of {1}"
                .format(creative_safe_frame_compatibility, allowed_values)
            )

        self._creative_safe_frame_compatibility = creative_safe_frame_compatibility

    @property
    def deal_id(self):
        """Gets the deal_id of this Deal.

        Output only. A unique deal ID for the deal (server-assigned).

        :return: The deal_id of this Deal.
        :rtype: str
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this Deal.

        Output only. A unique deal ID for the deal (server-assigned).

        :param deal_id: The deal_id of this Deal.
        :type deal_id: str
        """

        self._deal_id = deal_id

    @property
    def deal_serving_metadata(self):
        """Gets the deal_serving_metadata of this Deal.


        :return: The deal_serving_metadata of this Deal.
        :rtype: DealServingMetadata
        """
        return self._deal_serving_metadata

    @deal_serving_metadata.setter
    def deal_serving_metadata(self, deal_serving_metadata):
        """Sets the deal_serving_metadata of this Deal.


        :param deal_serving_metadata: The deal_serving_metadata of this Deal.
        :type deal_serving_metadata: DealServingMetadata
        """

        self._deal_serving_metadata = deal_serving_metadata

    @property
    def deal_terms(self):
        """Gets the deal_terms of this Deal.


        :return: The deal_terms of this Deal.
        :rtype: DealTerms
        """
        return self._deal_terms

    @deal_terms.setter
    def deal_terms(self, deal_terms):
        """Sets the deal_terms of this Deal.


        :param deal_terms: The deal_terms of this Deal.
        :type deal_terms: DealTerms
        """

        self._deal_terms = deal_terms

    @property
    def delivery_control(self):
        """Gets the delivery_control of this Deal.


        :return: The delivery_control of this Deal.
        :rtype: DeliveryControl
        """
        return self._delivery_control

    @delivery_control.setter
    def delivery_control(self, delivery_control):
        """Sets the delivery_control of this Deal.


        :param delivery_control: The delivery_control of this Deal.
        :type delivery_control: DeliveryControl
        """

        self._delivery_control = delivery_control

    @property
    def description(self):
        """Gets the description of this Deal.

        Description for the deal terms.

        :return: The description of this Deal.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Deal.

        Description for the deal terms.

        :param description: The description of this Deal.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Deal.

        The name of the deal.

        :return: The display_name of this Deal.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Deal.

        The name of the deal.

        :param display_name: The display_name of this Deal.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_deal_id(self):
        """Gets the external_deal_id of this Deal.

        Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.

        :return: The external_deal_id of this Deal.
        :rtype: str
        """
        return self._external_deal_id

    @external_deal_id.setter
    def external_deal_id(self, external_deal_id):
        """Sets the external_deal_id of this Deal.

        Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.

        :param external_deal_id: The external_deal_id of this Deal.
        :type external_deal_id: str
        """

        self._external_deal_id = external_deal_id

    @property
    def is_setup_complete(self):
        """Gets the is_setup_complete of this Deal.

        Output only. True, if the buyside inventory setup is complete for this deal.

        :return: The is_setup_complete of this Deal.
        :rtype: bool
        """
        return self._is_setup_complete

    @is_setup_complete.setter
    def is_setup_complete(self, is_setup_complete):
        """Sets the is_setup_complete of this Deal.

        Output only. True, if the buyside inventory setup is complete for this deal.

        :param is_setup_complete: The is_setup_complete of this Deal.
        :type is_setup_complete: bool
        """

        self._is_setup_complete = is_setup_complete

    @property
    def programmatic_creative_source(self):
        """Gets the programmatic_creative_source of this Deal.

        Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.

        :return: The programmatic_creative_source of this Deal.
        :rtype: str
        """
        return self._programmatic_creative_source

    @programmatic_creative_source.setter
    def programmatic_creative_source(self, programmatic_creative_source):
        """Sets the programmatic_creative_source of this Deal.

        Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.

        :param programmatic_creative_source: The programmatic_creative_source of this Deal.
        :type programmatic_creative_source: str
        """
        allowed_values = ["PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED", "ADVERTISER", "PUBLISHER"]  # noqa: E501
        if programmatic_creative_source not in allowed_values:
            raise ValueError(
                "Invalid value for `programmatic_creative_source` ({0}), must be one of {1}"
                .format(programmatic_creative_source, allowed_values)
            )

        self._programmatic_creative_source = programmatic_creative_source

    @property
    def proposal_id(self):
        """Gets the proposal_id of this Deal.

        Output only. ID of the proposal that this deal is part of.

        :return: The proposal_id of this Deal.
        :rtype: str
        """
        return self._proposal_id

    @proposal_id.setter
    def proposal_id(self, proposal_id):
        """Sets the proposal_id of this Deal.

        Output only. ID of the proposal that this deal is part of.

        :param proposal_id: The proposal_id of this Deal.
        :type proposal_id: str
        """

        self._proposal_id = proposal_id

    @property
    def seller_contacts(self):
        """Gets the seller_contacts of this Deal.

        Output only. Seller contact information for the deal.

        :return: The seller_contacts of this Deal.
        :rtype: List[ContactInformation]
        """
        return self._seller_contacts

    @seller_contacts.setter
    def seller_contacts(self, seller_contacts):
        """Sets the seller_contacts of this Deal.

        Output only. Seller contact information for the deal.

        :param seller_contacts: The seller_contacts of this Deal.
        :type seller_contacts: List[ContactInformation]
        """

        self._seller_contacts = seller_contacts

    @property
    def syndication_product(self):
        """Gets the syndication_product of this Deal.

        The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :return: The syndication_product of this Deal.
        :rtype: str
        """
        return self._syndication_product

    @syndication_product.setter
    def syndication_product(self, syndication_product):
        """Sets the syndication_product of this Deal.

        The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.

        :param syndication_product: The syndication_product of this Deal.
        :type syndication_product: str
        """
        allowed_values = ["SYNDICATION_PRODUCT_UNSPECIFIED", "CONTENT", "MOBILE", "VIDEO", "GAMES"]  # noqa: E501
        if syndication_product not in allowed_values:
            raise ValueError(
                "Invalid value for `syndication_product` ({0}), must be one of {1}"
                .format(syndication_product, allowed_values)
            )

        self._syndication_product = syndication_product

    @property
    def targeting(self):
        """Gets the targeting of this Deal.


        :return: The targeting of this Deal.
        :rtype: MarketplaceTargeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this Deal.


        :param targeting: The targeting of this Deal.
        :type targeting: MarketplaceTargeting
        """

        self._targeting = targeting

    @property
    def targeting_criterion(self):
        """Gets the targeting_criterion of this Deal.

        The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.

        :return: The targeting_criterion of this Deal.
        :rtype: List[TargetingCriteria]
        """
        return self._targeting_criterion

    @targeting_criterion.setter
    def targeting_criterion(self, targeting_criterion):
        """Sets the targeting_criterion of this Deal.

        The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together.

        :param targeting_criterion: The targeting_criterion of this Deal.
        :type targeting_criterion: List[TargetingCriteria]
        """

        self._targeting_criterion = targeting_criterion

    @property
    def update_time(self):
        """Gets the update_time of this Deal.

        Output only. The time when the deal was last updated.

        :return: The update_time of this Deal.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Deal.

        Output only. The time when the deal was last updated.

        :param update_time: The update_time of this Deal.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def web_property_code(self):
        """Gets the web_property_code of this Deal.

        The web property code for the seller copied over from the product.

        :return: The web_property_code of this Deal.
        :rtype: str
        """
        return self._web_property_code

    @web_property_code.setter
    def web_property_code(self, web_property_code):
        """Sets the web_property_code of this Deal.

        The web property code for the seller copied over from the product.

        :param web_property_code: The web_property_code of this Deal.
        :type web_property_code: str
        """

        self._web_property_code = web_property_code
