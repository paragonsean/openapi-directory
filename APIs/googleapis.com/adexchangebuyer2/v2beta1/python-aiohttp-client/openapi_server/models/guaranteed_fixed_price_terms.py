# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_per_buyer import PricePerBuyer
from openapi_server import util


class GuaranteedFixedPriceTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed_prices: List[PricePerBuyer]=None, guaranteed_impressions: str=None, guaranteed_looks: str=None, impression_cap: str=None, minimum_daily_looks: str=None, percent_share_of_voice: str=None, reservation_type: str=None):
        """GuaranteedFixedPriceTerms - a model defined in OpenAPI

        :param fixed_prices: The fixed_prices of this GuaranteedFixedPriceTerms.
        :param guaranteed_impressions: The guaranteed_impressions of this GuaranteedFixedPriceTerms.
        :param guaranteed_looks: The guaranteed_looks of this GuaranteedFixedPriceTerms.
        :param impression_cap: The impression_cap of this GuaranteedFixedPriceTerms.
        :param minimum_daily_looks: The minimum_daily_looks of this GuaranteedFixedPriceTerms.
        :param percent_share_of_voice: The percent_share_of_voice of this GuaranteedFixedPriceTerms.
        :param reservation_type: The reservation_type of this GuaranteedFixedPriceTerms.
        """
        self.openapi_types = {
            'fixed_prices': List[PricePerBuyer],
            'guaranteed_impressions': str,
            'guaranteed_looks': str,
            'impression_cap': str,
            'minimum_daily_looks': str,
            'percent_share_of_voice': str,
            'reservation_type': str
        }

        self.attribute_map = {
            'fixed_prices': 'fixedPrices',
            'guaranteed_impressions': 'guaranteedImpressions',
            'guaranteed_looks': 'guaranteedLooks',
            'impression_cap': 'impressionCap',
            'minimum_daily_looks': 'minimumDailyLooks',
            'percent_share_of_voice': 'percentShareOfVoice',
            'reservation_type': 'reservationType'
        }

        self._fixed_prices = fixed_prices
        self._guaranteed_impressions = guaranteed_impressions
        self._guaranteed_looks = guaranteed_looks
        self._impression_cap = impression_cap
        self._minimum_daily_looks = minimum_daily_looks
        self._percent_share_of_voice = percent_share_of_voice
        self._reservation_type = reservation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuaranteedFixedPriceTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuaranteedFixedPriceTerms of this GuaranteedFixedPriceTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed_prices(self):
        """Gets the fixed_prices of this GuaranteedFixedPriceTerms.

        Fixed price for the specified buyer.

        :return: The fixed_prices of this GuaranteedFixedPriceTerms.
        :rtype: List[PricePerBuyer]
        """
        return self._fixed_prices

    @fixed_prices.setter
    def fixed_prices(self, fixed_prices):
        """Sets the fixed_prices of this GuaranteedFixedPriceTerms.

        Fixed price for the specified buyer.

        :param fixed_prices: The fixed_prices of this GuaranteedFixedPriceTerms.
        :type fixed_prices: List[PricePerBuyer]
        """

        self._fixed_prices = fixed_prices

    @property
    def guaranteed_impressions(self):
        """Gets the guaranteed_impressions of this GuaranteedFixedPriceTerms.

        Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.

        :return: The guaranteed_impressions of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._guaranteed_impressions

    @guaranteed_impressions.setter
    def guaranteed_impressions(self, guaranteed_impressions):
        """Sets the guaranteed_impressions of this GuaranteedFixedPriceTerms.

        Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy.

        :param guaranteed_impressions: The guaranteed_impressions of this GuaranteedFixedPriceTerms.
        :type guaranteed_impressions: str
        """

        self._guaranteed_impressions = guaranteed_impressions

    @property
    def guaranteed_looks(self):
        """Gets the guaranteed_looks of this GuaranteedFixedPriceTerms.

        Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.

        :return: The guaranteed_looks of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._guaranteed_looks

    @guaranteed_looks.setter
    def guaranteed_looks(self, guaranteed_looks):
        """Sets the guaranteed_looks of this GuaranteedFixedPriceTerms.

        Count of guaranteed looks. Required for deal, optional for product. For CPD deals, buyer changes to guaranteed_looks will be ignored.

        :param guaranteed_looks: The guaranteed_looks of this GuaranteedFixedPriceTerms.
        :type guaranteed_looks: str
        """

        self._guaranteed_looks = guaranteed_looks

    @property
    def impression_cap(self):
        """Gets the impression_cap of this GuaranteedFixedPriceTerms.

        The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached.

        :return: The impression_cap of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._impression_cap

    @impression_cap.setter
    def impression_cap(self, impression_cap):
        """Sets the impression_cap of this GuaranteedFixedPriceTerms.

        The lifetime impression cap for CPM sponsorship deals. The deal will stop serving when the cap is reached.

        :param impression_cap: The impression_cap of this GuaranteedFixedPriceTerms.
        :type impression_cap: str
        """

        self._impression_cap = impression_cap

    @property
    def minimum_daily_looks(self):
        """Gets the minimum_daily_looks of this GuaranteedFixedPriceTerms.

        Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.

        :return: The minimum_daily_looks of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._minimum_daily_looks

    @minimum_daily_looks.setter
    def minimum_daily_looks(self, minimum_daily_looks):
        """Sets the minimum_daily_looks of this GuaranteedFixedPriceTerms.

        Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.

        :param minimum_daily_looks: The minimum_daily_looks of this GuaranteedFixedPriceTerms.
        :type minimum_daily_looks: str
        """

        self._minimum_daily_looks = minimum_daily_looks

    @property
    def percent_share_of_voice(self):
        """Gets the percent_share_of_voice of this GuaranteedFixedPriceTerms.

        For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached.

        :return: The percent_share_of_voice of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._percent_share_of_voice

    @percent_share_of_voice.setter
    def percent_share_of_voice(self, percent_share_of_voice):
        """Sets the percent_share_of_voice of this GuaranteedFixedPriceTerms.

        For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached.

        :param percent_share_of_voice: The percent_share_of_voice of this GuaranteedFixedPriceTerms.
        :type percent_share_of_voice: str
        """

        self._percent_share_of_voice = percent_share_of_voice

    @property
    def reservation_type(self):
        """Gets the reservation_type of this GuaranteedFixedPriceTerms.

        The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.

        :return: The reservation_type of this GuaranteedFixedPriceTerms.
        :rtype: str
        """
        return self._reservation_type

    @reservation_type.setter
    def reservation_type(self, reservation_type):
        """Sets the reservation_type of this GuaranteedFixedPriceTerms.

        The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.

        :param reservation_type: The reservation_type of this GuaranteedFixedPriceTerms.
        :type reservation_type: str
        """
        allowed_values = ["RESERVATION_TYPE_UNSPECIFIED", "STANDARD", "SPONSORSHIP"]  # noqa: E501
        if reservation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_type` ({0}), must be one of {1}"
                .format(reservation_type, allowed_values)
            )

        self._reservation_type = reservation_type
