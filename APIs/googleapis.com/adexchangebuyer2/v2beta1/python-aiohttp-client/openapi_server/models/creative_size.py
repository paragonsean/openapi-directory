# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.size import Size
from openapi_server import util


class CreativeSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_formats: List[str]=None, companion_sizes: List[Size]=None, creative_size_type: str=None, native_template: str=None, size: Size=None, skippable_ad_type: str=None):
        """CreativeSize - a model defined in OpenAPI

        :param allowed_formats: The allowed_formats of this CreativeSize.
        :param companion_sizes: The companion_sizes of this CreativeSize.
        :param creative_size_type: The creative_size_type of this CreativeSize.
        :param native_template: The native_template of this CreativeSize.
        :param size: The size of this CreativeSize.
        :param skippable_ad_type: The skippable_ad_type of this CreativeSize.
        """
        self.openapi_types = {
            'allowed_formats': List[str],
            'companion_sizes': List[Size],
            'creative_size_type': str,
            'native_template': str,
            'size': Size,
            'skippable_ad_type': str
        }

        self.attribute_map = {
            'allowed_formats': 'allowedFormats',
            'companion_sizes': 'companionSizes',
            'creative_size_type': 'creativeSizeType',
            'native_template': 'nativeTemplate',
            'size': 'size',
            'skippable_ad_type': 'skippableAdType'
        }

        self._allowed_formats = allowed_formats
        self._companion_sizes = companion_sizes
        self._creative_size_type = creative_size_type
        self._native_template = native_template
        self._size = size
        self._skippable_ad_type = skippable_ad_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeSize of this CreativeSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_formats(self):
        """Gets the allowed_formats of this CreativeSize.

        What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).

        :return: The allowed_formats of this CreativeSize.
        :rtype: List[str]
        """
        return self._allowed_formats

    @allowed_formats.setter
    def allowed_formats(self, allowed_formats):
        """Sets the allowed_formats of this CreativeSize.

        What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).

        :param allowed_formats: The allowed_formats of this CreativeSize.
        :type allowed_formats: List[str]
        """
        allowed_values = ["UNKNOWN", "AUDIO"]  # noqa: E501
        if not set(allowed_formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_formats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_formats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_formats = allowed_formats

    @property
    def companion_sizes(self):
        """Gets the companion_sizes of this CreativeSize.

        For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO

        :return: The companion_sizes of this CreativeSize.
        :rtype: List[Size]
        """
        return self._companion_sizes

    @companion_sizes.setter
    def companion_sizes(self, companion_sizes):
        """Sets the companion_sizes of this CreativeSize.

        For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO

        :param companion_sizes: The companion_sizes of this CreativeSize.
        :type companion_sizes: List[Size]
        """

        self._companion_sizes = companion_sizes

    @property
    def creative_size_type(self):
        """Gets the creative_size_type of this CreativeSize.

        The creative size type.

        :return: The creative_size_type of this CreativeSize.
        :rtype: str
        """
        return self._creative_size_type

    @creative_size_type.setter
    def creative_size_type(self, creative_size_type):
        """Sets the creative_size_type of this CreativeSize.

        The creative size type.

        :param creative_size_type: The creative_size_type of this CreativeSize.
        :type creative_size_type: str
        """
        allowed_values = ["CREATIVE_SIZE_TYPE_UNSPECIFIED", "REGULAR", "INTERSTITIAL", "VIDEO", "NATIVE"]  # noqa: E501
        if creative_size_type not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_size_type` ({0}), must be one of {1}"
                .format(creative_size_type, allowed_values)
            )

        self._creative_size_type = creative_size_type

    @property
    def native_template(self):
        """Gets the native_template of this CreativeSize.

        Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.

        :return: The native_template of this CreativeSize.
        :rtype: str
        """
        return self._native_template

    @native_template.setter
    def native_template(self, native_template):
        """Sets the native_template of this CreativeSize.

        Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE.

        :param native_template: The native_template of this CreativeSize.
        :type native_template: str
        """
        allowed_values = ["UNKNOWN_NATIVE_TEMPLATE", "NATIVE_CONTENT_AD", "NATIVE_APP_INSTALL_AD", "NATIVE_VIDEO_CONTENT_AD", "NATIVE_VIDEO_APP_INSTALL_AD"]  # noqa: E501
        if native_template not in allowed_values:
            raise ValueError(
                "Invalid value for `native_template` ({0}), must be one of {1}"
                .format(native_template, allowed_values)
            )

        self._native_template = native_template

    @property
    def size(self):
        """Gets the size of this CreativeSize.


        :return: The size of this CreativeSize.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreativeSize.


        :param size: The size of this CreativeSize.
        :type size: Size
        """

        self._size = size

    @property
    def skippable_ad_type(self):
        """Gets the skippable_ad_type of this CreativeSize.

        The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.

        :return: The skippable_ad_type of this CreativeSize.
        :rtype: str
        """
        return self._skippable_ad_type

    @skippable_ad_type.setter
    def skippable_ad_type(self, skippable_ad_type):
        """Sets the skippable_ad_type of this CreativeSize.

        The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO.

        :param skippable_ad_type: The skippable_ad_type of this CreativeSize.
        :type skippable_ad_type: str
        """
        allowed_values = ["SKIPPABLE_AD_TYPE_UNSPECIFIED", "GENERIC", "INSTREAM_SELECT", "NOT_SKIPPABLE"]  # noqa: E501
        if skippable_ad_type not in allowed_values:
            raise ValueError(
                "Invalid value for `skippable_ad_type` ({0}), must be one of {1}"
                .format(skippable_ad_type, allowed_values)
            )

        self._skippable_ad_type = skippable_ad_type
