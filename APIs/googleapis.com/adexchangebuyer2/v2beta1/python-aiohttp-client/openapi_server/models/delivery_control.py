# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_cap import FrequencyCap
from openapi_server import util


class DeliveryControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_blocking_level: str=None, delivery_rate_type: str=None, frequency_caps: List[FrequencyCap]=None):
        """DeliveryControl - a model defined in OpenAPI

        :param creative_blocking_level: The creative_blocking_level of this DeliveryControl.
        :param delivery_rate_type: The delivery_rate_type of this DeliveryControl.
        :param frequency_caps: The frequency_caps of this DeliveryControl.
        """
        self.openapi_types = {
            'creative_blocking_level': str,
            'delivery_rate_type': str,
            'frequency_caps': List[FrequencyCap]
        }

        self.attribute_map = {
            'creative_blocking_level': 'creativeBlockingLevel',
            'delivery_rate_type': 'deliveryRateType',
            'frequency_caps': 'frequencyCaps'
        }

        self._creative_blocking_level = creative_blocking_level
        self._delivery_rate_type = delivery_rate_type
        self._frequency_caps = frequency_caps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryControl of this DeliveryControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_blocking_level(self):
        """Gets the creative_blocking_level of this DeliveryControl.

        Output only. Specified the creative blocking levels to be applied.

        :return: The creative_blocking_level of this DeliveryControl.
        :rtype: str
        """
        return self._creative_blocking_level

    @creative_blocking_level.setter
    def creative_blocking_level(self, creative_blocking_level):
        """Sets the creative_blocking_level of this DeliveryControl.

        Output only. Specified the creative blocking levels to be applied.

        :param creative_blocking_level: The creative_blocking_level of this DeliveryControl.
        :type creative_blocking_level: str
        """
        allowed_values = ["CREATIVE_BLOCKING_LEVEL_UNSPECIFIED", "PUBLISHER_BLOCKING_RULES", "ADX_POLICY_BLOCKING_ONLY"]  # noqa: E501
        if creative_blocking_level not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_blocking_level` ({0}), must be one of {1}"
                .format(creative_blocking_level, allowed_values)
            )

        self._creative_blocking_level = creative_blocking_level

    @property
    def delivery_rate_type(self):
        """Gets the delivery_rate_type of this DeliveryControl.

        Output only. Specifies how the impression delivery will be paced.

        :return: The delivery_rate_type of this DeliveryControl.
        :rtype: str
        """
        return self._delivery_rate_type

    @delivery_rate_type.setter
    def delivery_rate_type(self, delivery_rate_type):
        """Sets the delivery_rate_type of this DeliveryControl.

        Output only. Specifies how the impression delivery will be paced.

        :param delivery_rate_type: The delivery_rate_type of this DeliveryControl.
        :type delivery_rate_type: str
        """
        allowed_values = ["DELIVERY_RATE_TYPE_UNSPECIFIED", "EVENLY", "FRONT_LOADED", "AS_FAST_AS_POSSIBLE"]  # noqa: E501
        if delivery_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_rate_type` ({0}), must be one of {1}"
                .format(delivery_rate_type, allowed_values)
            )

        self._delivery_rate_type = delivery_rate_type

    @property
    def frequency_caps(self):
        """Gets the frequency_caps of this DeliveryControl.

        Output only. Specifies any frequency caps.

        :return: The frequency_caps of this DeliveryControl.
        :rtype: List[FrequencyCap]
        """
        return self._frequency_caps

    @frequency_caps.setter
    def frequency_caps(self, frequency_caps):
        """Sets the frequency_caps of this DeliveryControl.

        Output only. Specifies any frequency caps.

        :param frequency_caps: The frequency_caps of this DeliveryControl.
        :type frequency_caps: List[FrequencyCap]
        """

        self._frequency_caps = frequency_caps
