# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdTechnologyProviders(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detected_provider_ids: List[str]=None, has_unidentified_provider: bool=None):
        """AdTechnologyProviders - a model defined in OpenAPI

        :param detected_provider_ids: The detected_provider_ids of this AdTechnologyProviders.
        :param has_unidentified_provider: The has_unidentified_provider of this AdTechnologyProviders.
        """
        self.openapi_types = {
            'detected_provider_ids': List[str],
            'has_unidentified_provider': bool
        }

        self.attribute_map = {
            'detected_provider_ids': 'detectedProviderIds',
            'has_unidentified_provider': 'hasUnidentifiedProvider'
        }

        self._detected_provider_ids = detected_provider_ids
        self._has_unidentified_provider = has_unidentified_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdTechnologyProviders':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdTechnologyProviders of this AdTechnologyProviders.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detected_provider_ids(self):
        """Gets the detected_provider_ids of this AdTechnologyProviders.

        The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will serve to an EEA user, the bid will be filtered before the auction.

        :return: The detected_provider_ids of this AdTechnologyProviders.
        :rtype: List[str]
        """
        return self._detected_provider_ids

    @detected_provider_ids.setter
    def detected_provider_ids(self, detected_provider_ids):
        """Sets the detected_provider_ids of this AdTechnologyProviders.

        The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will serve to an EEA user, the bid will be filtered before the auction.

        :param detected_provider_ids: The detected_provider_ids of this AdTechnologyProviders.
        :type detected_provider_ids: List[str]
        """

        self._detected_provider_ids = detected_provider_ids

    @property
    def has_unidentified_provider(self):
        """Gets the has_unidentified_provider of this AdTechnologyProviders.

        Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA user will be filtered before the auction.

        :return: The has_unidentified_provider of this AdTechnologyProviders.
        :rtype: bool
        """
        return self._has_unidentified_provider

    @has_unidentified_provider.setter
    def has_unidentified_provider(self, has_unidentified_provider):
        """Sets the has_unidentified_provider of this AdTechnologyProviders.

        Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA user will be filtered before the auction.

        :param has_unidentified_provider: The has_unidentified_provider of this AdTechnologyProviders.
        :type has_unidentified_provider: bool
        """

        self._has_unidentified_provider = has_unidentified_provider
