# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_account_id: str=None, client_name: str=None, entity_id: str=None, entity_name: str=None, entity_type: str=None, partner_client_id: str=None, role: str=None, status: str=None, visible_to_seller: bool=None):
        """Client - a model defined in OpenAPI

        :param client_account_id: The client_account_id of this Client.
        :param client_name: The client_name of this Client.
        :param entity_id: The entity_id of this Client.
        :param entity_name: The entity_name of this Client.
        :param entity_type: The entity_type of this Client.
        :param partner_client_id: The partner_client_id of this Client.
        :param role: The role of this Client.
        :param status: The status of this Client.
        :param visible_to_seller: The visible_to_seller of this Client.
        """
        self.openapi_types = {
            'client_account_id': str,
            'client_name': str,
            'entity_id': str,
            'entity_name': str,
            'entity_type': str,
            'partner_client_id': str,
            'role': str,
            'status': str,
            'visible_to_seller': bool
        }

        self.attribute_map = {
            'client_account_id': 'clientAccountId',
            'client_name': 'clientName',
            'entity_id': 'entityId',
            'entity_name': 'entityName',
            'entity_type': 'entityType',
            'partner_client_id': 'partnerClientId',
            'role': 'role',
            'status': 'status',
            'visible_to_seller': 'visibleToSeller'
        }

        self._client_account_id = client_account_id
        self._client_name = client_name
        self._entity_id = entity_id
        self._entity_name = entity_name
        self._entity_type = entity_type
        self._partner_client_id = partner_client_id
        self._role = role
        self._status = status
        self._visible_to_seller = visible_to_seller

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Client of this Client.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_account_id(self):
        """Gets the client_account_id of this Client.

        The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations.

        :return: The client_account_id of this Client.
        :rtype: str
        """
        return self._client_account_id

    @client_account_id.setter
    def client_account_id(self, client_account_id):
        """Sets the client_account_id of this Client.

        The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations.

        :param client_account_id: The client_account_id of this Client.
        :type client_account_id: str
        """

        self._client_account_id = client_account_id

    @property
    def client_name(self):
        """Gets the client_name of this Client.

        Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of `clientName` and entity must be unique. You can specify this field as empty. Maximum length of 255 characters is allowed.

        :return: The client_name of this Client.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Client.

        Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of `clientName` and entity must be unique. You can specify this field as empty. Maximum length of 255 characters is allowed.

        :param client_name: The client_name of this Client.
        :type client_name: str
        """

        self._client_name = client_name

    @property
    def entity_id(self):
        """Gets the entity_id of this Client.

        Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file.

        :return: The entity_id of this Client.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Client.

        Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file.

        :param entity_id: The entity_id of this Client.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this Client.

        The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations.

        :return: The entity_name of this Client.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this Client.

        The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations.

        :param entity_name: The entity_name of this Client.
        :type entity_name: str
        """

        self._entity_name = entity_name

    @property
    def entity_type(self):
        """Gets the entity_type of this Client.

        An optional field for specifying the type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.

        :return: The entity_type of this Client.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Client.

        An optional field for specifying the type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`.

        :param entity_type: The entity_type of this Client.
        :type entity_type: str
        """
        allowed_values = ["ENTITY_TYPE_UNSPECIFIED", "ADVERTISER", "BRAND", "AGENCY", "ENTITY_TYPE_UNCLASSIFIED"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def partner_client_id(self):
        """Gets the partner_client_id of this Client.

        Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.

        :return: The partner_client_id of this Client.
        :rtype: str
        """
        return self._partner_client_id

    @partner_client_id.setter
    def partner_client_id(self, partner_client_id):
        """Sets the partner_client_id of this Client.

        Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.

        :param partner_client_id: The partner_client_id of this Client.
        :type partner_client_id: str
        """

        self._partner_client_id = partner_client_id

    @property
    def role(self):
        """Gets the role of this Client.

        The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`, `CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.

        :return: The role of this Client.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Client.

        The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`, `CLIENT_DEAL_NEGOTIATOR` or `CLIENT_DEAL_APPROVER`.

        :param role: The role of this Client.
        :type role: str
        """
        allowed_values = ["CLIENT_ROLE_UNSPECIFIED", "CLIENT_DEAL_VIEWER", "CLIENT_DEAL_NEGOTIATOR", "CLIENT_DEAL_APPROVER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this Client.

        The status of the client buyer.

        :return: The status of this Client.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Client.

        The status of the client buyer.

        :param status: The status of this Client.
        :type status: str
        """
        allowed_values = ["CLIENT_STATUS_UNSPECIFIED", "DISABLED", "ACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def visible_to_seller(self):
        """Gets the visible_to_seller of this Client.

        Whether the client buyer will be visible to sellers.

        :return: The visible_to_seller of this Client.
        :rtype: bool
        """
        return self._visible_to_seller

    @visible_to_seller.setter
    def visible_to_seller(self, visible_to_seller):
        """Sets the visible_to_seller of this Client.

        Whether the client buyer will be visible to sellers.

        :param visible_to_seller: The visible_to_seller of this Client.
        :type visible_to_seller: bool
        """

        self._visible_to_seller = visible_to_seller
