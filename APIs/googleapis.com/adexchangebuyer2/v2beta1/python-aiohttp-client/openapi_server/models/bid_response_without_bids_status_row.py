# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_value import MetricValue
from openapi_server.models.row_dimensions import RowDimensions
from openapi_server import util


class BidResponseWithoutBidsStatusRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, impression_count: MetricValue=None, row_dimensions: RowDimensions=None, status: str=None):
        """BidResponseWithoutBidsStatusRow - a model defined in OpenAPI

        :param impression_count: The impression_count of this BidResponseWithoutBidsStatusRow.
        :param row_dimensions: The row_dimensions of this BidResponseWithoutBidsStatusRow.
        :param status: The status of this BidResponseWithoutBidsStatusRow.
        """
        self.openapi_types = {
            'impression_count': MetricValue,
            'row_dimensions': RowDimensions,
            'status': str
        }

        self.attribute_map = {
            'impression_count': 'impressionCount',
            'row_dimensions': 'rowDimensions',
            'status': 'status'
        }

        self._impression_count = impression_count
        self._row_dimensions = row_dimensions
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BidResponseWithoutBidsStatusRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BidResponseWithoutBidsStatusRow of this BidResponseWithoutBidsStatusRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def impression_count(self):
        """Gets the impression_count of this BidResponseWithoutBidsStatusRow.


        :return: The impression_count of this BidResponseWithoutBidsStatusRow.
        :rtype: MetricValue
        """
        return self._impression_count

    @impression_count.setter
    def impression_count(self, impression_count):
        """Sets the impression_count of this BidResponseWithoutBidsStatusRow.


        :param impression_count: The impression_count of this BidResponseWithoutBidsStatusRow.
        :type impression_count: MetricValue
        """

        self._impression_count = impression_count

    @property
    def row_dimensions(self):
        """Gets the row_dimensions of this BidResponseWithoutBidsStatusRow.


        :return: The row_dimensions of this BidResponseWithoutBidsStatusRow.
        :rtype: RowDimensions
        """
        return self._row_dimensions

    @row_dimensions.setter
    def row_dimensions(self, row_dimensions):
        """Sets the row_dimensions of this BidResponseWithoutBidsStatusRow.


        :param row_dimensions: The row_dimensions of this BidResponseWithoutBidsStatusRow.
        :type row_dimensions: RowDimensions
        """

        self._row_dimensions = row_dimensions

    @property
    def status(self):
        """Gets the status of this BidResponseWithoutBidsStatusRow.

        The status specifying why the bid responses were considered to have no applicable bids.

        :return: The status of this BidResponseWithoutBidsStatusRow.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BidResponseWithoutBidsStatusRow.

        The status specifying why the bid responses were considered to have no applicable bids.

        :param status: The status of this BidResponseWithoutBidsStatusRow.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "RESPONSES_WITHOUT_BIDS", "RESPONSES_WITHOUT_BIDS_FOR_ACCOUNT", "RESPONSES_WITHOUT_BIDS_FOR_DEAL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
