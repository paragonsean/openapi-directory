# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platforms: List[str]=None):
        """PlatformContext - a model defined in OpenAPI

        :param platforms: The platforms of this PlatformContext.
        """
        self.openapi_types = {
            'platforms': List[str]
        }

        self.attribute_map = {
            'platforms': 'platforms'
        }

        self._platforms = platforms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformContext of this PlatformContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platforms(self):
        """Gets the platforms of this PlatformContext.

        The platforms this restriction applies to.

        :return: The platforms of this PlatformContext.
        :rtype: List[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this PlatformContext.

        The platforms this restriction applies to.

        :param platforms: The platforms of this PlatformContext.
        :type platforms: List[str]
        """
        allowed_values = ["DESKTOP", "ANDROID", "IOS"]  # noqa: E501
        if not set(platforms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `platforms` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(platforms) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._platforms = platforms
