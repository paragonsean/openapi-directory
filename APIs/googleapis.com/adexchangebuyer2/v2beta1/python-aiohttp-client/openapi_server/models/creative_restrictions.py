# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_specification import CreativeSpecification
from openapi_server import util


class CreativeRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_format: str=None, creative_specifications: List[CreativeSpecification]=None, skippable_ad_type: str=None):
        """CreativeRestrictions - a model defined in OpenAPI

        :param creative_format: The creative_format of this CreativeRestrictions.
        :param creative_specifications: The creative_specifications of this CreativeRestrictions.
        :param skippable_ad_type: The skippable_ad_type of this CreativeRestrictions.
        """
        self.openapi_types = {
            'creative_format': str,
            'creative_specifications': List[CreativeSpecification],
            'skippable_ad_type': str
        }

        self.attribute_map = {
            'creative_format': 'creativeFormat',
            'creative_specifications': 'creativeSpecifications',
            'skippable_ad_type': 'skippableAdType'
        }

        self._creative_format = creative_format
        self._creative_specifications = creative_specifications
        self._skippable_ad_type = skippable_ad_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeRestrictions of this CreativeRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_format(self):
        """Gets the creative_format of this CreativeRestrictions.

        The format of the environment that the creatives will be displayed in.

        :return: The creative_format of this CreativeRestrictions.
        :rtype: str
        """
        return self._creative_format

    @creative_format.setter
    def creative_format(self, creative_format):
        """Sets the creative_format of this CreativeRestrictions.

        The format of the environment that the creatives will be displayed in.

        :param creative_format: The creative_format of this CreativeRestrictions.
        :type creative_format: str
        """
        allowed_values = ["CREATIVE_FORMAT_UNSPECIFIED", "DISPLAY", "VIDEO"]  # noqa: E501
        if creative_format not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_format` ({0}), must be one of {1}"
                .format(creative_format, allowed_values)
            )

        self._creative_format = creative_format

    @property
    def creative_specifications(self):
        """Gets the creative_specifications of this CreativeRestrictions.


        :return: The creative_specifications of this CreativeRestrictions.
        :rtype: List[CreativeSpecification]
        """
        return self._creative_specifications

    @creative_specifications.setter
    def creative_specifications(self, creative_specifications):
        """Sets the creative_specifications of this CreativeRestrictions.


        :param creative_specifications: The creative_specifications of this CreativeRestrictions.
        :type creative_specifications: List[CreativeSpecification]
        """

        self._creative_specifications = creative_specifications

    @property
    def skippable_ad_type(self):
        """Gets the skippable_ad_type of this CreativeRestrictions.

        Skippable video ads allow viewers to skip ads after 5 seconds.

        :return: The skippable_ad_type of this CreativeRestrictions.
        :rtype: str
        """
        return self._skippable_ad_type

    @skippable_ad_type.setter
    def skippable_ad_type(self, skippable_ad_type):
        """Sets the skippable_ad_type of this CreativeRestrictions.

        Skippable video ads allow viewers to skip ads after 5 seconds.

        :param skippable_ad_type: The skippable_ad_type of this CreativeRestrictions.
        :type skippable_ad_type: str
        """
        allowed_values = ["SKIPPABLE_AD_TYPE_UNSPECIFIED", "SKIPPABLE", "INSTREAM_SELECT", "NOT_SKIPPABLE"]  # noqa: E501
        if skippable_ad_type not in allowed_values:
            raise ValueError(
                "Invalid value for `skippable_ad_type` ({0}), must be one of {1}"
                .format(skippable_ad_type, allowed_values)
            )

        self._skippable_ad_type = skippable_ad_type
