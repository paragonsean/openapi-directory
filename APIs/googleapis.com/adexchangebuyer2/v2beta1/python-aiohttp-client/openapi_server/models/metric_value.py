# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: str=None, variance: str=None):
        """MetricValue - a model defined in OpenAPI

        :param value: The value of this MetricValue.
        :param variance: The variance of this MetricValue.
        """
        self.openapi_types = {
            'value': str,
            'variance': str
        }

        self.attribute_map = {
            'value': 'value',
            'variance': 'variance'
        }

        self._value = value
        self._variance = variance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricValue of this MetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this MetricValue.

        The expected value of the metric.

        :return: The value of this MetricValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetricValue.

        The expected value of the metric.

        :param value: The value of this MetricValue.
        :type value: str
        """

        self._value = value

    @property
    def variance(self):
        """Gets the variance of this MetricValue.

        The variance (for example, square of the standard deviation) of the metric value. If value is exact, variance is 0. Can be used to calculate margin of error as a percentage of value, using the following formula, where Z is the standard constant that depends on the preferred size of the confidence interval (for example, for 90% confidence interval, use Z = 1.645): marginOfError = 100 * Z * sqrt(variance) / value

        :return: The variance of this MetricValue.
        :rtype: str
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """Sets the variance of this MetricValue.

        The variance (for example, square of the standard deviation) of the metric value. If value is exact, variance is 0. Can be used to calculate margin of error as a percentage of value, using the following formula, where Z is the standard constant that depends on the preferred size of the confidence interval (for example, for 90% confidence interval, use Z = 1.645): marginOfError = 100 * Z * sqrt(variance) / value

        :param variance: The variance of this MetricValue.
        :type variance: str
        """

        self._variance = variance
