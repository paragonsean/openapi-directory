# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.serving_context import ServingContext
from openapi_server import util


class Correction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[ServingContext]=None, details: List[str]=None, type: str=None):
        """Correction - a model defined in OpenAPI

        :param contexts: The contexts of this Correction.
        :param details: The details of this Correction.
        :param type: The type of this Correction.
        """
        self.openapi_types = {
            'contexts': List[ServingContext],
            'details': List[str],
            'type': str
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'details': 'details',
            'type': 'type'
        }

        self._contexts = contexts
        self._details = details
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Correction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Correction of this Correction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this Correction.

        The contexts for the correction.

        :return: The contexts of this Correction.
        :rtype: List[ServingContext]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this Correction.

        The contexts for the correction.

        :param contexts: The contexts of this Correction.
        :type contexts: List[ServingContext]
        """

        self._contexts = contexts

    @property
    def details(self):
        """Gets the details of this Correction.

        Additional details about what was corrected.

        :return: The details of this Correction.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Correction.

        Additional details about what was corrected.

        :param details: The details of this Correction.
        :type details: List[str]
        """

        self._details = details

    @property
    def type(self):
        """Gets the type of this Correction.

        The type of correction that was applied to the creative.

        :return: The type of this Correction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Correction.

        The type of correction that was applied to the creative.

        :param type: The type of this Correction.
        :type type: str
        """
        allowed_values = ["CORRECTION_TYPE_UNSPECIFIED", "VENDOR_IDS_ADDED", "SSL_ATTRIBUTE_REMOVED", "FLASH_FREE_ATTRIBUTE_REMOVED", "FLASH_FREE_ATTRIBUTE_ADDED", "REQUIRED_ATTRIBUTE_ADDED", "REQUIRED_VENDOR_ADDED", "SSL_ATTRIBUTE_ADDED", "IN_BANNER_VIDEO_ATTRIBUTE_ADDED", "MRAID_ATTRIBUTE_ADDED", "FLASH_ATTRIBUTE_REMOVED", "VIDEO_IN_SNIPPET_ATTRIBUTE_ADDED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
