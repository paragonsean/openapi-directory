# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.day_part import DayPart
from openapi_server import util


class DayPartTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_parts: List[DayPart]=None, time_zone_type: str=None):
        """DayPartTargeting - a model defined in OpenAPI

        :param day_parts: The day_parts of this DayPartTargeting.
        :param time_zone_type: The time_zone_type of this DayPartTargeting.
        """
        self.openapi_types = {
            'day_parts': List[DayPart],
            'time_zone_type': str
        }

        self.attribute_map = {
            'day_parts': 'dayParts',
            'time_zone_type': 'timeZoneType'
        }

        self._day_parts = day_parts
        self._time_zone_type = time_zone_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DayPartTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DayPartTargeting of this DayPartTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_parts(self):
        """Gets the day_parts of this DayPartTargeting.

        A list of day part targeting criterion.

        :return: The day_parts of this DayPartTargeting.
        :rtype: List[DayPart]
        """
        return self._day_parts

    @day_parts.setter
    def day_parts(self, day_parts):
        """Sets the day_parts of this DayPartTargeting.

        A list of day part targeting criterion.

        :param day_parts: The day_parts of this DayPartTargeting.
        :type day_parts: List[DayPart]
        """

        self._day_parts = day_parts

    @property
    def time_zone_type(self):
        """Gets the time_zone_type of this DayPartTargeting.

        The timezone to use for interpreting the day part targeting.

        :return: The time_zone_type of this DayPartTargeting.
        :rtype: str
        """
        return self._time_zone_type

    @time_zone_type.setter
    def time_zone_type(self, time_zone_type):
        """Sets the time_zone_type of this DayPartTargeting.

        The timezone to use for interpreting the day part targeting.

        :param time_zone_type: The time_zone_type of this DayPartTargeting.
        :type time_zone_type: str
        """
        allowed_values = ["TIME_ZONE_SOURCE_UNSPECIFIED", "PUBLISHER", "USER"]  # noqa: E501
        if time_zone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `time_zone_type` ({0}), must be one of {1}"
                .format(time_zone_type, allowed_values)
            )

        self._time_zone_type = time_zone_type
