# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_account_id: str=None, email: str=None, status: str=None, user_id: str=None):
        """ClientUser - a model defined in OpenAPI

        :param client_account_id: The client_account_id of this ClientUser.
        :param email: The email of this ClientUser.
        :param status: The status of this ClientUser.
        :param user_id: The user_id of this ClientUser.
        """
        self.openapi_types = {
            'client_account_id': str,
            'email': str,
            'status': str,
            'user_id': str
        }

        self.attribute_map = {
            'client_account_id': 'clientAccountId',
            'email': 'email',
            'status': 'status',
            'user_id': 'userId'
        }

        self._client_account_id = client_account_id
        self._email = email
        self._status = status
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientUser of this ClientUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_account_id(self):
        """Gets the client_account_id of this ClientUser.

        Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update operation.

        :return: The client_account_id of this ClientUser.
        :rtype: str
        """
        return self._client_account_id

    @client_account_id.setter
    def client_account_id(self, client_account_id):
        """Sets the client_account_id of this ClientUser.

        Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update operation.

        :param client_account_id: The client_account_id of this ClientUser.
        :type client_account_id: str
        """

        self._client_account_id = client_account_id

    @property
    def email(self):
        """Gets the email of this ClientUser.

        User's email address. The value of this field is ignored in an update operation.

        :return: The email of this ClientUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientUser.

        User's email address. The value of this field is ignored in an update operation.

        :param email: The email of this ClientUser.
        :type email: str
        """

        self._email = email

    @property
    def status(self):
        """Gets the status of this ClientUser.

        The status of the client user.

        :return: The status of this ClientUser.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClientUser.

        The status of the client user.

        :param status: The status of this ClientUser.
        :type status: str
        """
        allowed_values = ["USER_STATUS_UNSPECIFIED", "PENDING", "ACTIVE", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this ClientUser.

        The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation.

        :return: The user_id of this ClientUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ClientUser.

        The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation.

        :param user_id: The user_id of this ClientUser.
        :type user_id: str
        """

        self._user_id = user_id
