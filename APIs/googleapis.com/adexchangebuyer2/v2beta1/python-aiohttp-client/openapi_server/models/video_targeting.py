# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_position_types: List[str]=None, targeted_position_types: List[str]=None):
        """VideoTargeting - a model defined in OpenAPI

        :param excluded_position_types: The excluded_position_types of this VideoTargeting.
        :param targeted_position_types: The targeted_position_types of this VideoTargeting.
        """
        self.openapi_types = {
            'excluded_position_types': List[str],
            'targeted_position_types': List[str]
        }

        self.attribute_map = {
            'excluded_position_types': 'excludedPositionTypes',
            'targeted_position_types': 'targetedPositionTypes'
        }

        self._excluded_position_types = excluded_position_types
        self._targeted_position_types = targeted_position_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoTargeting of this VideoTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_position_types(self):
        """Gets the excluded_position_types of this VideoTargeting.

        A list of video positions to be excluded. Position types can either be included or excluded (XOR).

        :return: The excluded_position_types of this VideoTargeting.
        :rtype: List[str]
        """
        return self._excluded_position_types

    @excluded_position_types.setter
    def excluded_position_types(self, excluded_position_types):
        """Sets the excluded_position_types of this VideoTargeting.

        A list of video positions to be excluded. Position types can either be included or excluded (XOR).

        :param excluded_position_types: The excluded_position_types of this VideoTargeting.
        :type excluded_position_types: List[str]
        """
        allowed_values = ["POSITION_TYPE_UNSPECIFIED", "PREROLL", "MIDROLL", "POSTROLL"]  # noqa: E501
        if not set(excluded_position_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `excluded_position_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(excluded_position_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._excluded_position_types = excluded_position_types

    @property
    def targeted_position_types(self):
        """Gets the targeted_position_types of this VideoTargeting.

        A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty.

        :return: The targeted_position_types of this VideoTargeting.
        :rtype: List[str]
        """
        return self._targeted_position_types

    @targeted_position_types.setter
    def targeted_position_types(self, targeted_position_types):
        """Sets the targeted_position_types of this VideoTargeting.

        A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty.

        :param targeted_position_types: The targeted_position_types of this VideoTargeting.
        :type targeted_position_types: List[str]
        """
        allowed_values = ["POSITION_TYPE_UNSPECIFIED", "PREROLL", "MIDROLL", "POSTROLL"]  # noqa: E501
        if not set(targeted_position_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `targeted_position_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(targeted_position_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._targeted_position_types = targeted_position_types
