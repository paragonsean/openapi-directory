# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Money(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, nanos: int=None, units: str=None):
        """Money - a model defined in OpenAPI

        :param currency_code: The currency_code of this Money.
        :param nanos: The nanos of this Money.
        :param units: The units of this Money.
        """
        self.openapi_types = {
            'currency_code': str,
            'nanos': int,
            'units': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'nanos': 'nanos',
            'units': 'units'
        }

        self._currency_code = currency_code
        self._nanos = nanos
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Money':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Money of this Money.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Money.

        The three-letter currency code defined in ISO 4217.

        :return: The currency_code of this Money.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Money.

        The three-letter currency code defined in ISO 4217.

        :param currency_code: The currency_code of this Money.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def nanos(self):
        """Gets the nanos of this Money.

        Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.

        :return: The nanos of this Money.
        :rtype: int
        """
        return self._nanos

    @nanos.setter
    def nanos(self, nanos):
        """Sets the nanos of this Money.

        Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.

        :param nanos: The nanos of this Money.
        :type nanos: int
        """

        self._nanos = nanos

    @property
    def units(self):
        """Gets the units of this Money.

        The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.

        :return: The units of this Money.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Money.

        The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.

        :param units: The units of this Money.
        :type units: str
        """

        self._units = units
