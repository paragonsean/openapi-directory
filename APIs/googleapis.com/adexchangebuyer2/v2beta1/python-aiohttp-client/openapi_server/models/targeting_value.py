# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_size import CreativeSize
from openapi_server.models.day_part_targeting import DayPartTargeting
from openapi_server import util


class TargetingValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creative_size_value: CreativeSize=None, day_part_targeting_value: DayPartTargeting=None, long_value: str=None, string_value: str=None):
        """TargetingValue - a model defined in OpenAPI

        :param creative_size_value: The creative_size_value of this TargetingValue.
        :param day_part_targeting_value: The day_part_targeting_value of this TargetingValue.
        :param long_value: The long_value of this TargetingValue.
        :param string_value: The string_value of this TargetingValue.
        """
        self.openapi_types = {
            'creative_size_value': CreativeSize,
            'day_part_targeting_value': DayPartTargeting,
            'long_value': str,
            'string_value': str
        }

        self.attribute_map = {
            'creative_size_value': 'creativeSizeValue',
            'day_part_targeting_value': 'dayPartTargetingValue',
            'long_value': 'longValue',
            'string_value': 'stringValue'
        }

        self._creative_size_value = creative_size_value
        self._day_part_targeting_value = day_part_targeting_value
        self._long_value = long_value
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetingValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetingValue of this TargetingValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creative_size_value(self):
        """Gets the creative_size_value of this TargetingValue.


        :return: The creative_size_value of this TargetingValue.
        :rtype: CreativeSize
        """
        return self._creative_size_value

    @creative_size_value.setter
    def creative_size_value(self, creative_size_value):
        """Sets the creative_size_value of this TargetingValue.


        :param creative_size_value: The creative_size_value of this TargetingValue.
        :type creative_size_value: CreativeSize
        """

        self._creative_size_value = creative_size_value

    @property
    def day_part_targeting_value(self):
        """Gets the day_part_targeting_value of this TargetingValue.


        :return: The day_part_targeting_value of this TargetingValue.
        :rtype: DayPartTargeting
        """
        return self._day_part_targeting_value

    @day_part_targeting_value.setter
    def day_part_targeting_value(self, day_part_targeting_value):
        """Sets the day_part_targeting_value of this TargetingValue.


        :param day_part_targeting_value: The day_part_targeting_value of this TargetingValue.
        :type day_part_targeting_value: DayPartTargeting
        """

        self._day_part_targeting_value = day_part_targeting_value

    @property
    def long_value(self):
        """Gets the long_value of this TargetingValue.

        The long value to include/exclude.

        :return: The long_value of this TargetingValue.
        :rtype: str
        """
        return self._long_value

    @long_value.setter
    def long_value(self, long_value):
        """Sets the long_value of this TargetingValue.

        The long value to include/exclude.

        :param long_value: The long_value of this TargetingValue.
        :type long_value: str
        """

        self._long_value = long_value

    @property
    def string_value(self):
        """Gets the string_value of this TargetingValue.

        The string value to include/exclude.

        :return: The string_value of this TargetingValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this TargetingValue.

        The string value to include/exclude.

        :param string_value: The string_value of this TargetingValue.
        :type string_value: str
        """

        self._string_value = string_value
