# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WatchCreativeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None):
        """WatchCreativeRequest - a model defined in OpenAPI

        :param topic: The topic of this WatchCreativeRequest.
        """
        self.openapi_types = {
            'topic': str
        }

        self.attribute_map = {
            'topic': 'topic'
        }

        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WatchCreativeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WatchCreativeRequest of this WatchCreativeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self):
        """Gets the topic of this WatchCreativeRequest.

        The Pub/Sub topic to publish notifications to. This topic must already exist and must give permission to ad-exchange-buyside-reports@google.com to write to the topic. This should be the full resource name in \"projects/{project_id}/topics/{topic_id}\" format.

        :return: The topic of this WatchCreativeRequest.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WatchCreativeRequest.

        The Pub/Sub topic to publish notifications to. This topic must already exist and must give permission to ad-exchange-buyside-reports@google.com to write to the topic. This should be the full resource name in \"projects/{project_id}/topics/{topic_id}\" format.

        :param topic: The topic of this WatchCreativeRequest.
        :type topic: str
        """

        self._topic = topic
