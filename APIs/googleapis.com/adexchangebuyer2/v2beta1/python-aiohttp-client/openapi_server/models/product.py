# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_information import ContactInformation
from openapi_server.models.deal_terms import DealTerms
from openapi_server.models.seller import Seller
from openapi_server.models.targeting_criteria import TargetingCriteria
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_end_time: str=None, available_start_time: str=None, create_time: str=None, creator_contacts: List[ContactInformation]=None, display_name: str=None, has_creator_signed_off: bool=None, product_id: str=None, product_revision: str=None, publisher_profile_id: str=None, seller: Seller=None, syndication_product: str=None, targeting_criterion: List[TargetingCriteria]=None, terms: DealTerms=None, update_time: str=None, web_property_code: str=None):
        """Product - a model defined in OpenAPI

        :param available_end_time: The available_end_time of this Product.
        :param available_start_time: The available_start_time of this Product.
        :param create_time: The create_time of this Product.
        :param creator_contacts: The creator_contacts of this Product.
        :param display_name: The display_name of this Product.
        :param has_creator_signed_off: The has_creator_signed_off of this Product.
        :param product_id: The product_id of this Product.
        :param product_revision: The product_revision of this Product.
        :param publisher_profile_id: The publisher_profile_id of this Product.
        :param seller: The seller of this Product.
        :param syndication_product: The syndication_product of this Product.
        :param targeting_criterion: The targeting_criterion of this Product.
        :param terms: The terms of this Product.
        :param update_time: The update_time of this Product.
        :param web_property_code: The web_property_code of this Product.
        """
        self.openapi_types = {
            'available_end_time': str,
            'available_start_time': str,
            'create_time': str,
            'creator_contacts': List[ContactInformation],
            'display_name': str,
            'has_creator_signed_off': bool,
            'product_id': str,
            'product_revision': str,
            'publisher_profile_id': str,
            'seller': Seller,
            'syndication_product': str,
            'targeting_criterion': List[TargetingCriteria],
            'terms': DealTerms,
            'update_time': str,
            'web_property_code': str
        }

        self.attribute_map = {
            'available_end_time': 'availableEndTime',
            'available_start_time': 'availableStartTime',
            'create_time': 'createTime',
            'creator_contacts': 'creatorContacts',
            'display_name': 'displayName',
            'has_creator_signed_off': 'hasCreatorSignedOff',
            'product_id': 'productId',
            'product_revision': 'productRevision',
            'publisher_profile_id': 'publisherProfileId',
            'seller': 'seller',
            'syndication_product': 'syndicationProduct',
            'targeting_criterion': 'targetingCriterion',
            'terms': 'terms',
            'update_time': 'updateTime',
            'web_property_code': 'webPropertyCode'
        }

        self._available_end_time = available_end_time
        self._available_start_time = available_start_time
        self._create_time = create_time
        self._creator_contacts = creator_contacts
        self._display_name = display_name
        self._has_creator_signed_off = has_creator_signed_off
        self._product_id = product_id
        self._product_revision = product_revision
        self._publisher_profile_id = publisher_profile_id
        self._seller = seller
        self._syndication_product = syndication_product
        self._targeting_criterion = targeting_criterion
        self._terms = terms
        self._update_time = update_time
        self._web_property_code = web_property_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_end_time(self):
        """Gets the available_end_time of this Product.

        The proposed end time for the deal. The field will be truncated to the order of seconds during serving.

        :return: The available_end_time of this Product.
        :rtype: str
        """
        return self._available_end_time

    @available_end_time.setter
    def available_end_time(self, available_end_time):
        """Sets the available_end_time of this Product.

        The proposed end time for the deal. The field will be truncated to the order of seconds during serving.

        :param available_end_time: The available_end_time of this Product.
        :type available_end_time: str
        """

        self._available_end_time = available_end_time

    @property
    def available_start_time(self):
        """Gets the available_start_time of this Product.

        Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving.

        :return: The available_start_time of this Product.
        :rtype: str
        """
        return self._available_start_time

    @available_start_time.setter
    def available_start_time(self, available_start_time):
        """Sets the available_start_time of this Product.

        Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving.

        :param available_start_time: The available_start_time of this Product.
        :type available_start_time: str
        """

        self._available_start_time = available_start_time

    @property
    def create_time(self):
        """Gets the create_time of this Product.

        Creation time.

        :return: The create_time of this Product.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Product.

        Creation time.

        :param create_time: The create_time of this Product.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator_contacts(self):
        """Gets the creator_contacts of this Product.

        Optional contact information for the creator of this product.

        :return: The creator_contacts of this Product.
        :rtype: List[ContactInformation]
        """
        return self._creator_contacts

    @creator_contacts.setter
    def creator_contacts(self, creator_contacts):
        """Sets the creator_contacts of this Product.

        Optional contact information for the creator of this product.

        :param creator_contacts: The creator_contacts of this Product.
        :type creator_contacts: List[ContactInformation]
        """

        self._creator_contacts = creator_contacts

    @property
    def display_name(self):
        """Gets the display_name of this Product.

        The display name for this product as set by the seller.

        :return: The display_name of this Product.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Product.

        The display name for this product as set by the seller.

        :param display_name: The display_name of this Product.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def has_creator_signed_off(self):
        """Gets the has_creator_signed_off of this Product.

        If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.

        :return: The has_creator_signed_off of this Product.
        :rtype: bool
        """
        return self._has_creator_signed_off

    @has_creator_signed_off.setter
    def has_creator_signed_off(self, has_creator_signed_off):
        """Sets the has_creator_signed_off of this Product.

        If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.

        :param has_creator_signed_off: The has_creator_signed_off of this Product.
        :type has_creator_signed_off: bool
        """

        self._has_creator_signed_off = has_creator_signed_off

    @property
    def product_id(self):
        """Gets the product_id of this Product.

        The unique ID for the product.

        :return: The product_id of this Product.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Product.

        The unique ID for the product.

        :param product_id: The product_id of this Product.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_revision(self):
        """Gets the product_revision of this Product.

        The revision number of the product (auto-assigned by Marketplace).

        :return: The product_revision of this Product.
        :rtype: str
        """
        return self._product_revision

    @product_revision.setter
    def product_revision(self, product_revision):
        """Sets the product_revision of this Product.

        The revision number of the product (auto-assigned by Marketplace).

        :param product_revision: The product_revision of this Product.
        :type product_revision: str
        """

        self._product_revision = product_revision

    @property
    def publisher_profile_id(self):
        """Gets the publisher_profile_id of this Product.

        An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.

        :return: The publisher_profile_id of this Product.
        :rtype: str
        """
        return self._publisher_profile_id

    @publisher_profile_id.setter
    def publisher_profile_id(self, publisher_profile_id):
        """Sets the publisher_profile_id of this Product.

        An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.

        :param publisher_profile_id: The publisher_profile_id of this Product.
        :type publisher_profile_id: str
        """

        self._publisher_profile_id = publisher_profile_id

    @property
    def seller(self):
        """Gets the seller of this Product.


        :return: The seller of this Product.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Product.


        :param seller: The seller of this Product.
        :type seller: Seller
        """

        self._seller = seller

    @property
    def syndication_product(self):
        """Gets the syndication_product of this Product.

        The syndication product associated with the deal.

        :return: The syndication_product of this Product.
        :rtype: str
        """
        return self._syndication_product

    @syndication_product.setter
    def syndication_product(self, syndication_product):
        """Sets the syndication_product of this Product.

        The syndication product associated with the deal.

        :param syndication_product: The syndication_product of this Product.
        :type syndication_product: str
        """
        allowed_values = ["SYNDICATION_PRODUCT_UNSPECIFIED", "CONTENT", "MOBILE", "VIDEO", "GAMES"]  # noqa: E501
        if syndication_product not in allowed_values:
            raise ValueError(
                "Invalid value for `syndication_product` ({0}), must be one of {1}"
                .format(syndication_product, allowed_values)
            )

        self._syndication_product = syndication_product

    @property
    def targeting_criterion(self):
        """Gets the targeting_criterion of this Product.

        Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values.

        :return: The targeting_criterion of this Product.
        :rtype: List[TargetingCriteria]
        """
        return self._targeting_criterion

    @targeting_criterion.setter
    def targeting_criterion(self, targeting_criterion):
        """Sets the targeting_criterion of this Product.

        Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values.

        :param targeting_criterion: The targeting_criterion of this Product.
        :type targeting_criterion: List[TargetingCriteria]
        """

        self._targeting_criterion = targeting_criterion

    @property
    def terms(self):
        """Gets the terms of this Product.


        :return: The terms of this Product.
        :rtype: DealTerms
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Product.


        :param terms: The terms of this Product.
        :type terms: DealTerms
        """

        self._terms = terms

    @property
    def update_time(self):
        """Gets the update_time of this Product.

        Time of last update.

        :return: The update_time of this Product.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Product.

        Time of last update.

        :param update_time: The update_time of this Product.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def web_property_code(self):
        """Gets the web_property_code of this Product.

        The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal.

        :return: The web_property_code of this Product.
        :rtype: str
        """
        return self._web_property_code

    @web_property_code.setter
    def web_property_code(self, web_property_code):
        """Sets the web_property_code of this Product.

        The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal.

        :param web_property_code: The web_property_code of this Product.
        :type web_property_code: str
        """

        self._web_property_code = web_property_code
