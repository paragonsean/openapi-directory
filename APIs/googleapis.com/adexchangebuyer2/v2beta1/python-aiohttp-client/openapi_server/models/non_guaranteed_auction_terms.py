# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_per_buyer import PricePerBuyer
from openapi_server import util


class NonGuaranteedAuctionTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_optimize_private_auction: bool=None, reserve_prices_per_buyer: List[PricePerBuyer]=None):
        """NonGuaranteedAuctionTerms - a model defined in OpenAPI

        :param auto_optimize_private_auction: The auto_optimize_private_auction of this NonGuaranteedAuctionTerms.
        :param reserve_prices_per_buyer: The reserve_prices_per_buyer of this NonGuaranteedAuctionTerms.
        """
        self.openapi_types = {
            'auto_optimize_private_auction': bool,
            'reserve_prices_per_buyer': List[PricePerBuyer]
        }

        self.attribute_map = {
            'auto_optimize_private_auction': 'autoOptimizePrivateAuction',
            'reserve_prices_per_buyer': 'reservePricesPerBuyer'
        }

        self._auto_optimize_private_auction = auto_optimize_private_auction
        self._reserve_prices_per_buyer = reserve_prices_per_buyer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NonGuaranteedAuctionTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NonGuaranteedAuctionTerms of this NonGuaranteedAuctionTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_optimize_private_auction(self):
        """Gets the auto_optimize_private_auction of this NonGuaranteedAuctionTerms.

        True if open auction buyers are allowed to compete with invited buyers in this private auction.

        :return: The auto_optimize_private_auction of this NonGuaranteedAuctionTerms.
        :rtype: bool
        """
        return self._auto_optimize_private_auction

    @auto_optimize_private_auction.setter
    def auto_optimize_private_auction(self, auto_optimize_private_auction):
        """Sets the auto_optimize_private_auction of this NonGuaranteedAuctionTerms.

        True if open auction buyers are allowed to compete with invited buyers in this private auction.

        :param auto_optimize_private_auction: The auto_optimize_private_auction of this NonGuaranteedAuctionTerms.
        :type auto_optimize_private_auction: bool
        """

        self._auto_optimize_private_auction = auto_optimize_private_auction

    @property
    def reserve_prices_per_buyer(self):
        """Gets the reserve_prices_per_buyer of this NonGuaranteedAuctionTerms.

        Reserve price for the specified buyer.

        :return: The reserve_prices_per_buyer of this NonGuaranteedAuctionTerms.
        :rtype: List[PricePerBuyer]
        """
        return self._reserve_prices_per_buyer

    @reserve_prices_per_buyer.setter
    def reserve_prices_per_buyer(self, reserve_prices_per_buyer):
        """Sets the reserve_prices_per_buyer of this NonGuaranteedAuctionTerms.

        Reserve price for the specified buyer.

        :param reserve_prices_per_buyer: The reserve_prices_per_buyer of this NonGuaranteedAuctionTerms.
        :type reserve_prices_per_buyer: List[PricePerBuyer]
        """

        self._reserve_prices_per_buyer = reserve_prices_per_buyer
