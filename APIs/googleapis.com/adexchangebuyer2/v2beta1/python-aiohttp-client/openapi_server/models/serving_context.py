# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_context import AppContext
from openapi_server.models.auction_context import AuctionContext
from openapi_server.models.location_context import LocationContext
from openapi_server.models.platform_context import PlatformContext
from openapi_server.models.security_context import SecurityContext
from openapi_server import util


class ServingContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all: str=None, app_type: AppContext=None, auction_type: AuctionContext=None, location: LocationContext=None, platform: PlatformContext=None, security_type: SecurityContext=None):
        """ServingContext - a model defined in OpenAPI

        :param all: The all of this ServingContext.
        :param app_type: The app_type of this ServingContext.
        :param auction_type: The auction_type of this ServingContext.
        :param location: The location of this ServingContext.
        :param platform: The platform of this ServingContext.
        :param security_type: The security_type of this ServingContext.
        """
        self.openapi_types = {
            'all': str,
            'app_type': AppContext,
            'auction_type': AuctionContext,
            'location': LocationContext,
            'platform': PlatformContext,
            'security_type': SecurityContext
        }

        self.attribute_map = {
            'all': 'all',
            'app_type': 'appType',
            'auction_type': 'auctionType',
            'location': 'location',
            'platform': 'platform',
            'security_type': 'securityType'
        }

        self._all = all
        self._app_type = app_type
        self._auction_type = auction_type
        self._location = location
        self._platform = platform
        self._security_type = security_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServingContext of this ServingContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all(self):
        """Gets the all of this ServingContext.

        Matches all contexts.

        :return: The all of this ServingContext.
        :rtype: str
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this ServingContext.

        Matches all contexts.

        :param all: The all of this ServingContext.
        :type all: str
        """
        allowed_values = ["SIMPLE_CONTEXT"]  # noqa: E501
        if all not in allowed_values:
            raise ValueError(
                "Invalid value for `all` ({0}), must be one of {1}"
                .format(all, allowed_values)
            )

        self._all = all

    @property
    def app_type(self):
        """Gets the app_type of this ServingContext.


        :return: The app_type of this ServingContext.
        :rtype: AppContext
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this ServingContext.


        :param app_type: The app_type of this ServingContext.
        :type app_type: AppContext
        """

        self._app_type = app_type

    @property
    def auction_type(self):
        """Gets the auction_type of this ServingContext.


        :return: The auction_type of this ServingContext.
        :rtype: AuctionContext
        """
        return self._auction_type

    @auction_type.setter
    def auction_type(self, auction_type):
        """Sets the auction_type of this ServingContext.


        :param auction_type: The auction_type of this ServingContext.
        :type auction_type: AuctionContext
        """

        self._auction_type = auction_type

    @property
    def location(self):
        """Gets the location of this ServingContext.


        :return: The location of this ServingContext.
        :rtype: LocationContext
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ServingContext.


        :param location: The location of this ServingContext.
        :type location: LocationContext
        """

        self._location = location

    @property
    def platform(self):
        """Gets the platform of this ServingContext.


        :return: The platform of this ServingContext.
        :rtype: PlatformContext
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ServingContext.


        :param platform: The platform of this ServingContext.
        :type platform: PlatformContext
        """

        self._platform = platform

    @property
    def security_type(self):
        """Gets the security_type of this ServingContext.


        :return: The security_type of this ServingContext.
        :rtype: SecurityContext
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this ServingContext.


        :param security_type: The security_type of this ServingContext.
        :type security_type: SecurityContext
        """

        self._security_type = security_type
