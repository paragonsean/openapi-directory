# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_types: List[str]=None):
        """AppContext - a model defined in OpenAPI

        :param app_types: The app_types of this AppContext.
        """
        self.openapi_types = {
            'app_types': List[str]
        }

        self.attribute_map = {
            'app_types': 'appTypes'
        }

        self._app_types = app_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppContext of this AppContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_types(self):
        """Gets the app_types of this AppContext.

        The app types this restriction applies to.

        :return: The app_types of this AppContext.
        :rtype: List[str]
        """
        return self._app_types

    @app_types.setter
    def app_types(self, app_types):
        """Sets the app_types of this AppContext.

        The app types this restriction applies to.

        :param app_types: The app_types of this AppContext.
        :type app_types: List[str]
        """
        allowed_values = ["NATIVE", "WEB"]  # noqa: E501
        if not set(app_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `app_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(app_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._app_types = app_types
