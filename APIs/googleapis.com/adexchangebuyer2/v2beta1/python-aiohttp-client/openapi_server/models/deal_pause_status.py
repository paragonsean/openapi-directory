# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DealPauseStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buyer_pause_reason: str=None, first_paused_by: str=None, has_buyer_paused: bool=None, has_seller_paused: bool=None, seller_pause_reason: str=None):
        """DealPauseStatus - a model defined in OpenAPI

        :param buyer_pause_reason: The buyer_pause_reason of this DealPauseStatus.
        :param first_paused_by: The first_paused_by of this DealPauseStatus.
        :param has_buyer_paused: The has_buyer_paused of this DealPauseStatus.
        :param has_seller_paused: The has_seller_paused of this DealPauseStatus.
        :param seller_pause_reason: The seller_pause_reason of this DealPauseStatus.
        """
        self.openapi_types = {
            'buyer_pause_reason': str,
            'first_paused_by': str,
            'has_buyer_paused': bool,
            'has_seller_paused': bool,
            'seller_pause_reason': str
        }

        self.attribute_map = {
            'buyer_pause_reason': 'buyerPauseReason',
            'first_paused_by': 'firstPausedBy',
            'has_buyer_paused': 'hasBuyerPaused',
            'has_seller_paused': 'hasSellerPaused',
            'seller_pause_reason': 'sellerPauseReason'
        }

        self._buyer_pause_reason = buyer_pause_reason
        self._first_paused_by = first_paused_by
        self._has_buyer_paused = has_buyer_paused
        self._has_seller_paused = has_seller_paused
        self._seller_pause_reason = seller_pause_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DealPauseStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DealPauseStatus of this DealPauseStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buyer_pause_reason(self):
        """Gets the buyer_pause_reason of this DealPauseStatus.

        The buyer's reason for pausing, if the buyer paused the deal.

        :return: The buyer_pause_reason of this DealPauseStatus.
        :rtype: str
        """
        return self._buyer_pause_reason

    @buyer_pause_reason.setter
    def buyer_pause_reason(self, buyer_pause_reason):
        """Sets the buyer_pause_reason of this DealPauseStatus.

        The buyer's reason for pausing, if the buyer paused the deal.

        :param buyer_pause_reason: The buyer_pause_reason of this DealPauseStatus.
        :type buyer_pause_reason: str
        """

        self._buyer_pause_reason = buyer_pause_reason

    @property
    def first_paused_by(self):
        """Gets the first_paused_by of this DealPauseStatus.

        The role of the person who first paused this deal.

        :return: The first_paused_by of this DealPauseStatus.
        :rtype: str
        """
        return self._first_paused_by

    @first_paused_by.setter
    def first_paused_by(self, first_paused_by):
        """Sets the first_paused_by of this DealPauseStatus.

        The role of the person who first paused this deal.

        :param first_paused_by: The first_paused_by of this DealPauseStatus.
        :type first_paused_by: str
        """
        allowed_values = ["BUYER_SELLER_ROLE_UNSPECIFIED", "BUYER", "SELLER"]  # noqa: E501
        if first_paused_by not in allowed_values:
            raise ValueError(
                "Invalid value for `first_paused_by` ({0}), must be one of {1}"
                .format(first_paused_by, allowed_values)
            )

        self._first_paused_by = first_paused_by

    @property
    def has_buyer_paused(self):
        """Gets the has_buyer_paused of this DealPauseStatus.

        True, if the buyer has paused the deal unilaterally.

        :return: The has_buyer_paused of this DealPauseStatus.
        :rtype: bool
        """
        return self._has_buyer_paused

    @has_buyer_paused.setter
    def has_buyer_paused(self, has_buyer_paused):
        """Sets the has_buyer_paused of this DealPauseStatus.

        True, if the buyer has paused the deal unilaterally.

        :param has_buyer_paused: The has_buyer_paused of this DealPauseStatus.
        :type has_buyer_paused: bool
        """

        self._has_buyer_paused = has_buyer_paused

    @property
    def has_seller_paused(self):
        """Gets the has_seller_paused of this DealPauseStatus.

        True, if the seller has paused the deal unilaterally.

        :return: The has_seller_paused of this DealPauseStatus.
        :rtype: bool
        """
        return self._has_seller_paused

    @has_seller_paused.setter
    def has_seller_paused(self, has_seller_paused):
        """Sets the has_seller_paused of this DealPauseStatus.

        True, if the seller has paused the deal unilaterally.

        :param has_seller_paused: The has_seller_paused of this DealPauseStatus.
        :type has_seller_paused: bool
        """

        self._has_seller_paused = has_seller_paused

    @property
    def seller_pause_reason(self):
        """Gets the seller_pause_reason of this DealPauseStatus.

        The seller's reason for pausing, if the seller paused the deal.

        :return: The seller_pause_reason of this DealPauseStatus.
        :rtype: str
        """
        return self._seller_pause_reason

    @seller_pause_reason.setter
    def seller_pause_reason(self, seller_pause_reason):
        """Sets the seller_pause_reason of this DealPauseStatus.

        The seller's reason for pausing, if the seller paused the deal.

        :param seller_pause_reason: The seller_pause_reason of this DealPauseStatus.
        :type seller_pause_reason: str
        """

        self._seller_pause_reason = seller_pause_reason
