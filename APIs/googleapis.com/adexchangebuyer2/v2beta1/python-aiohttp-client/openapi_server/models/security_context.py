# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, securities: List[str]=None):
        """SecurityContext - a model defined in OpenAPI

        :param securities: The securities of this SecurityContext.
        """
        self.openapi_types = {
            'securities': List[str]
        }

        self.attribute_map = {
            'securities': 'securities'
        }

        self._securities = securities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityContext of this SecurityContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def securities(self):
        """Gets the securities of this SecurityContext.

        The security types in this context.

        :return: The securities of this SecurityContext.
        :rtype: List[str]
        """
        return self._securities

    @securities.setter
    def securities(self, securities):
        """Sets the securities of this SecurityContext.

        The security types in this context.

        :param securities: The securities of this SecurityContext.
        :type securities: List[str]
        """
        allowed_values = ["INSECURE", "SSL"]  # noqa: E501
        if not set(securities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `securities` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(securities) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._securities = securities
