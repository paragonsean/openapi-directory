# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disapproval import Disapproval
from openapi_server.models.serving_context import ServingContext
from openapi_server import util


class ServingRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts: List[ServingContext]=None, disapproval: Disapproval=None, disapproval_reasons: List[Disapproval]=None, status: str=None):
        """ServingRestriction - a model defined in OpenAPI

        :param contexts: The contexts of this ServingRestriction.
        :param disapproval: The disapproval of this ServingRestriction.
        :param disapproval_reasons: The disapproval_reasons of this ServingRestriction.
        :param status: The status of this ServingRestriction.
        """
        self.openapi_types = {
            'contexts': List[ServingContext],
            'disapproval': Disapproval,
            'disapproval_reasons': List[Disapproval],
            'status': str
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'disapproval': 'disapproval',
            'disapproval_reasons': 'disapprovalReasons',
            'status': 'status'
        }

        self._contexts = contexts
        self._disapproval = disapproval
        self._disapproval_reasons = disapproval_reasons
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServingRestriction of this ServingRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this ServingRestriction.

        The contexts for the restriction.

        :return: The contexts of this ServingRestriction.
        :rtype: List[ServingContext]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this ServingRestriction.

        The contexts for the restriction.

        :param contexts: The contexts of this ServingRestriction.
        :type contexts: List[ServingContext]
        """

        self._contexts = contexts

    @property
    def disapproval(self):
        """Gets the disapproval of this ServingRestriction.


        :return: The disapproval of this ServingRestriction.
        :rtype: Disapproval
        """
        return self._disapproval

    @disapproval.setter
    def disapproval(self, disapproval):
        """Sets the disapproval of this ServingRestriction.


        :param disapproval: The disapproval of this ServingRestriction.
        :type disapproval: Disapproval
        """

        self._disapproval = disapproval

    @property
    def disapproval_reasons(self):
        """Gets the disapproval_reasons of this ServingRestriction.

        Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.

        :return: The disapproval_reasons of this ServingRestriction.
        :rtype: List[Disapproval]
        """
        return self._disapproval_reasons

    @disapproval_reasons.setter
    def disapproval_reasons(self, disapproval_reasons):
        """Sets the disapproval_reasons of this ServingRestriction.

        Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.

        :param disapproval_reasons: The disapproval_reasons of this ServingRestriction.
        :type disapproval_reasons: List[Disapproval]
        """

        self._disapproval_reasons = disapproval_reasons

    @property
    def status(self):
        """Gets the status of this ServingRestriction.

        The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).

        :return: The status of this ServingRestriction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServingRestriction.

        The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).

        :param status: The status of this ServingRestriction.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "DISAPPROVAL", "PENDING_REVIEW"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
