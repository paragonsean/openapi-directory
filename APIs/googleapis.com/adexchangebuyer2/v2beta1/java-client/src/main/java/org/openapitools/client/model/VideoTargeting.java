/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents targeting information about video.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoTargeting {
  /**
   * Gets or Sets excludedPositionTypes
   */
  @JsonAdapter(ExcludedPositionTypesEnum.Adapter.class)
  public enum ExcludedPositionTypesEnum {
    POSITION_TYPE_UNSPECIFIED("POSITION_TYPE_UNSPECIFIED"),
    
    PREROLL("PREROLL"),
    
    MIDROLL("MIDROLL"),
    
    POSTROLL("POSTROLL");

    private String value;

    ExcludedPositionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedPositionTypesEnum fromValue(String value) {
      for (ExcludedPositionTypesEnum b : ExcludedPositionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedPositionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedPositionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedPositionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedPositionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedPositionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_POSITION_TYPES = "excludedPositionTypes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_POSITION_TYPES)
  private List<ExcludedPositionTypesEnum> excludedPositionTypes = new ArrayList<>();

  /**
   * Gets or Sets targetedPositionTypes
   */
  @JsonAdapter(TargetedPositionTypesEnum.Adapter.class)
  public enum TargetedPositionTypesEnum {
    POSITION_TYPE_UNSPECIFIED("POSITION_TYPE_UNSPECIFIED"),
    
    PREROLL("PREROLL"),
    
    MIDROLL("MIDROLL"),
    
    POSTROLL("POSTROLL");

    private String value;

    TargetedPositionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetedPositionTypesEnum fromValue(String value) {
      for (TargetedPositionTypesEnum b : TargetedPositionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetedPositionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetedPositionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetedPositionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetedPositionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetedPositionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGETED_POSITION_TYPES = "targetedPositionTypes";
  @SerializedName(SERIALIZED_NAME_TARGETED_POSITION_TYPES)
  private List<TargetedPositionTypesEnum> targetedPositionTypes = new ArrayList<>();

  public VideoTargeting() {
  }

  public VideoTargeting excludedPositionTypes(List<ExcludedPositionTypesEnum> excludedPositionTypes) {
    this.excludedPositionTypes = excludedPositionTypes;
    return this;
  }

  public VideoTargeting addExcludedPositionTypesItem(ExcludedPositionTypesEnum excludedPositionTypesItem) {
    if (this.excludedPositionTypes == null) {
      this.excludedPositionTypes = new ArrayList<>();
    }
    this.excludedPositionTypes.add(excludedPositionTypesItem);
    return this;
  }

  /**
   * A list of video positions to be excluded. Position types can either be included or excluded (XOR).
   * @return excludedPositionTypes
   */
  @javax.annotation.Nullable
  public List<ExcludedPositionTypesEnum> getExcludedPositionTypes() {
    return excludedPositionTypes;
  }

  public void setExcludedPositionTypes(List<ExcludedPositionTypesEnum> excludedPositionTypes) {
    this.excludedPositionTypes = excludedPositionTypes;
  }


  public VideoTargeting targetedPositionTypes(List<TargetedPositionTypesEnum> targetedPositionTypes) {
    this.targetedPositionTypes = targetedPositionTypes;
    return this;
  }

  public VideoTargeting addTargetedPositionTypesItem(TargetedPositionTypesEnum targetedPositionTypesItem) {
    if (this.targetedPositionTypes == null) {
      this.targetedPositionTypes = new ArrayList<>();
    }
    this.targetedPositionTypes.add(targetedPositionTypesItem);
    return this;
  }

  /**
   * A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty.
   * @return targetedPositionTypes
   */
  @javax.annotation.Nullable
  public List<TargetedPositionTypesEnum> getTargetedPositionTypes() {
    return targetedPositionTypes;
  }

  public void setTargetedPositionTypes(List<TargetedPositionTypesEnum> targetedPositionTypes) {
    this.targetedPositionTypes = targetedPositionTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoTargeting videoTargeting = (VideoTargeting) o;
    return Objects.equals(this.excludedPositionTypes, videoTargeting.excludedPositionTypes) &&
        Objects.equals(this.targetedPositionTypes, videoTargeting.targetedPositionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedPositionTypes, targetedPositionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoTargeting {\n");
    sb.append("    excludedPositionTypes: ").append(toIndentedString(excludedPositionTypes)).append("\n");
    sb.append("    targetedPositionTypes: ").append(toIndentedString(targetedPositionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludedPositionTypes");
    openapiFields.add("targetedPositionTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoTargeting is not found in the empty JSON string", VideoTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedPositionTypes") != null && !jsonObj.get("excludedPositionTypes").isJsonNull() && !jsonObj.get("excludedPositionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedPositionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("excludedPositionTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetedPositionTypes") != null && !jsonObj.get("targetedPositionTypes").isJsonNull() && !jsonObj.get("targetedPositionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetedPositionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("targetedPositionTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoTargeting>() {
           @Override
           public void write(JsonWriter out, VideoTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoTargeting
   * @throws IOException if the JSON string is invalid with respect to VideoTargeting
   */
  public static VideoTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoTargeting.class);
  }

  /**
   * Convert an instance of VideoTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

