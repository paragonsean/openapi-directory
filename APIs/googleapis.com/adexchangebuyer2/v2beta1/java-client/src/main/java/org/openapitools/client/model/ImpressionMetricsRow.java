/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetricValue;
import org.openapitools.client.model.RowDimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of metrics that are measured in numbers of impressions, representing how many impressions with the specified dimension values were considered eligible at each stage of the bidding funnel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImpressionMetricsRow {
  public static final String SERIALIZED_NAME_AVAILABLE_IMPRESSIONS = "availableImpressions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_IMPRESSIONS)
  private MetricValue availableImpressions;

  public static final String SERIALIZED_NAME_BID_REQUESTS = "bidRequests";
  @SerializedName(SERIALIZED_NAME_BID_REQUESTS)
  private MetricValue bidRequests;

  public static final String SERIALIZED_NAME_INVENTORY_MATCHES = "inventoryMatches";
  @SerializedName(SERIALIZED_NAME_INVENTORY_MATCHES)
  private MetricValue inventoryMatches;

  public static final String SERIALIZED_NAME_RESPONSES_WITH_BIDS = "responsesWithBids";
  @SerializedName(SERIALIZED_NAME_RESPONSES_WITH_BIDS)
  private MetricValue responsesWithBids;

  public static final String SERIALIZED_NAME_ROW_DIMENSIONS = "rowDimensions";
  @SerializedName(SERIALIZED_NAME_ROW_DIMENSIONS)
  private RowDimensions rowDimensions;

  public static final String SERIALIZED_NAME_SUCCESSFUL_RESPONSES = "successfulResponses";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_RESPONSES)
  private MetricValue successfulResponses;

  public ImpressionMetricsRow() {
  }

  public ImpressionMetricsRow availableImpressions(MetricValue availableImpressions) {
    this.availableImpressions = availableImpressions;
    return this;
  }

  /**
   * Get availableImpressions
   * @return availableImpressions
   */
  @javax.annotation.Nullable
  public MetricValue getAvailableImpressions() {
    return availableImpressions;
  }

  public void setAvailableImpressions(MetricValue availableImpressions) {
    this.availableImpressions = availableImpressions;
  }


  public ImpressionMetricsRow bidRequests(MetricValue bidRequests) {
    this.bidRequests = bidRequests;
    return this;
  }

  /**
   * Get bidRequests
   * @return bidRequests
   */
  @javax.annotation.Nullable
  public MetricValue getBidRequests() {
    return bidRequests;
  }

  public void setBidRequests(MetricValue bidRequests) {
    this.bidRequests = bidRequests;
  }


  public ImpressionMetricsRow inventoryMatches(MetricValue inventoryMatches) {
    this.inventoryMatches = inventoryMatches;
    return this;
  }

  /**
   * Get inventoryMatches
   * @return inventoryMatches
   */
  @javax.annotation.Nullable
  public MetricValue getInventoryMatches() {
    return inventoryMatches;
  }

  public void setInventoryMatches(MetricValue inventoryMatches) {
    this.inventoryMatches = inventoryMatches;
  }


  public ImpressionMetricsRow responsesWithBids(MetricValue responsesWithBids) {
    this.responsesWithBids = responsesWithBids;
    return this;
  }

  /**
   * Get responsesWithBids
   * @return responsesWithBids
   */
  @javax.annotation.Nullable
  public MetricValue getResponsesWithBids() {
    return responsesWithBids;
  }

  public void setResponsesWithBids(MetricValue responsesWithBids) {
    this.responsesWithBids = responsesWithBids;
  }


  public ImpressionMetricsRow rowDimensions(RowDimensions rowDimensions) {
    this.rowDimensions = rowDimensions;
    return this;
  }

  /**
   * Get rowDimensions
   * @return rowDimensions
   */
  @javax.annotation.Nullable
  public RowDimensions getRowDimensions() {
    return rowDimensions;
  }

  public void setRowDimensions(RowDimensions rowDimensions) {
    this.rowDimensions = rowDimensions;
  }


  public ImpressionMetricsRow successfulResponses(MetricValue successfulResponses) {
    this.successfulResponses = successfulResponses;
    return this;
  }

  /**
   * Get successfulResponses
   * @return successfulResponses
   */
  @javax.annotation.Nullable
  public MetricValue getSuccessfulResponses() {
    return successfulResponses;
  }

  public void setSuccessfulResponses(MetricValue successfulResponses) {
    this.successfulResponses = successfulResponses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImpressionMetricsRow impressionMetricsRow = (ImpressionMetricsRow) o;
    return Objects.equals(this.availableImpressions, impressionMetricsRow.availableImpressions) &&
        Objects.equals(this.bidRequests, impressionMetricsRow.bidRequests) &&
        Objects.equals(this.inventoryMatches, impressionMetricsRow.inventoryMatches) &&
        Objects.equals(this.responsesWithBids, impressionMetricsRow.responsesWithBids) &&
        Objects.equals(this.rowDimensions, impressionMetricsRow.rowDimensions) &&
        Objects.equals(this.successfulResponses, impressionMetricsRow.successfulResponses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableImpressions, bidRequests, inventoryMatches, responsesWithBids, rowDimensions, successfulResponses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImpressionMetricsRow {\n");
    sb.append("    availableImpressions: ").append(toIndentedString(availableImpressions)).append("\n");
    sb.append("    bidRequests: ").append(toIndentedString(bidRequests)).append("\n");
    sb.append("    inventoryMatches: ").append(toIndentedString(inventoryMatches)).append("\n");
    sb.append("    responsesWithBids: ").append(toIndentedString(responsesWithBids)).append("\n");
    sb.append("    rowDimensions: ").append(toIndentedString(rowDimensions)).append("\n");
    sb.append("    successfulResponses: ").append(toIndentedString(successfulResponses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableImpressions");
    openapiFields.add("bidRequests");
    openapiFields.add("inventoryMatches");
    openapiFields.add("responsesWithBids");
    openapiFields.add("rowDimensions");
    openapiFields.add("successfulResponses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImpressionMetricsRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImpressionMetricsRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImpressionMetricsRow is not found in the empty JSON string", ImpressionMetricsRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImpressionMetricsRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImpressionMetricsRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `availableImpressions`
      if (jsonObj.get("availableImpressions") != null && !jsonObj.get("availableImpressions").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("availableImpressions"));
      }
      // validate the optional field `bidRequests`
      if (jsonObj.get("bidRequests") != null && !jsonObj.get("bidRequests").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("bidRequests"));
      }
      // validate the optional field `inventoryMatches`
      if (jsonObj.get("inventoryMatches") != null && !jsonObj.get("inventoryMatches").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("inventoryMatches"));
      }
      // validate the optional field `responsesWithBids`
      if (jsonObj.get("responsesWithBids") != null && !jsonObj.get("responsesWithBids").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("responsesWithBids"));
      }
      // validate the optional field `rowDimensions`
      if (jsonObj.get("rowDimensions") != null && !jsonObj.get("rowDimensions").isJsonNull()) {
        RowDimensions.validateJsonElement(jsonObj.get("rowDimensions"));
      }
      // validate the optional field `successfulResponses`
      if (jsonObj.get("successfulResponses") != null && !jsonObj.get("successfulResponses").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("successfulResponses"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImpressionMetricsRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImpressionMetricsRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImpressionMetricsRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImpressionMetricsRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ImpressionMetricsRow>() {
           @Override
           public void write(JsonWriter out, ImpressionMetricsRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImpressionMetricsRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImpressionMetricsRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImpressionMetricsRow
   * @throws IOException if the JSON string is invalid with respect to ImpressionMetricsRow
   */
  public static ImpressionMetricsRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImpressionMetricsRow.class);
  }

  /**
   * Convert an instance of ImpressionMetricsRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

