/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. The reason and details for a disapproval.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Disapproval {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<String> details = new ArrayList<>();

  /**
   * The categorized reason for disapproval.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    LENGTH_OF_IMAGE_ANIMATION("LENGTH_OF_IMAGE_ANIMATION"),
    
    BROKEN_URL("BROKEN_URL"),
    
    MEDIA_NOT_FUNCTIONAL("MEDIA_NOT_FUNCTIONAL"),
    
    INVALID_FOURTH_PARTY_CALL("INVALID_FOURTH_PARTY_CALL"),
    
    INCORRECT_REMARKETING_DECLARATION("INCORRECT_REMARKETING_DECLARATION"),
    
    LANDING_PAGE_ERROR("LANDING_PAGE_ERROR"),
    
    AD_SIZE_DOES_NOT_MATCH_AD_SLOT("AD_SIZE_DOES_NOT_MATCH_AD_SLOT"),
    
    NO_BORDER("NO_BORDER"),
    
    FOURTH_PARTY_BROWSER_COOKIES("FOURTH_PARTY_BROWSER_COOKIES"),
    
    LSO_OBJECTS("LSO_OBJECTS"),
    
    BLANK_CREATIVE("BLANK_CREATIVE"),
    
    DESTINATION_URLS_UNDECLARED("DESTINATION_URLS_UNDECLARED"),
    
    PROBLEM_WITH_CLICK_MACRO("PROBLEM_WITH_CLICK_MACRO"),
    
    INCORRECT_AD_TECHNOLOGY_DECLARATION("INCORRECT_AD_TECHNOLOGY_DECLARATION"),
    
    INCORRECT_DESTINATION_URL_DECLARATION("INCORRECT_DESTINATION_URL_DECLARATION"),
    
    EXPANDABLE_INCORRECT_DIRECTION("EXPANDABLE_INCORRECT_DIRECTION"),
    
    EXPANDABLE_DIRECTION_NOT_SUPPORTED("EXPANDABLE_DIRECTION_NOT_SUPPORTED"),
    
    EXPANDABLE_INVALID_VENDOR("EXPANDABLE_INVALID_VENDOR"),
    
    EXPANDABLE_FUNCTIONALITY("EXPANDABLE_FUNCTIONALITY"),
    
    VIDEO_INVALID_VENDOR("VIDEO_INVALID_VENDOR"),
    
    VIDEO_UNSUPPORTED_LENGTH("VIDEO_UNSUPPORTED_LENGTH"),
    
    VIDEO_UNSUPPORTED_FORMAT("VIDEO_UNSUPPORTED_FORMAT"),
    
    VIDEO_FUNCTIONALITY("VIDEO_FUNCTIONALITY"),
    
    LANDING_PAGE_DISABLED("LANDING_PAGE_DISABLED"),
    
    MALWARE_SUSPECTED("MALWARE_SUSPECTED"),
    
    ADULT_IMAGE_OR_VIDEO("ADULT_IMAGE_OR_VIDEO"),
    
    INACCURATE_AD_TEXT("INACCURATE_AD_TEXT"),
    
    COUNTERFEIT_DESIGNER_GOODS("COUNTERFEIT_DESIGNER_GOODS"),
    
    POP_UP("POP_UP"),
    
    INVALID_RTB_PROTOCOL_USAGE("INVALID_RTB_PROTOCOL_USAGE"),
    
    RAW_IP_ADDRESS_IN_SNIPPET("RAW_IP_ADDRESS_IN_SNIPPET"),
    
    UNACCEPTABLE_CONTENT_SOFTWARE("UNACCEPTABLE_CONTENT_SOFTWARE"),
    
    UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN("UNAUTHORIZED_COOKIE_ON_GOOGLE_DOMAIN"),
    
    UNDECLARED_FLASH_OBJECTS("UNDECLARED_FLASH_OBJECTS"),
    
    INVALID_SSL_DECLARATION("INVALID_SSL_DECLARATION"),
    
    DIRECT_DOWNLOAD_IN_AD("DIRECT_DOWNLOAD_IN_AD"),
    
    MAXIMUM_DOWNLOAD_SIZE_EXCEEDED("MAXIMUM_DOWNLOAD_SIZE_EXCEEDED"),
    
    DESTINATION_URL_SITE_NOT_CRAWLABLE("DESTINATION_URL_SITE_NOT_CRAWLABLE"),
    
    BAD_URL_LEGAL_DISAPPROVAL("BAD_URL_LEGAL_DISAPPROVAL"),
    
    PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED("PHARMA_GAMBLING_ALCOHOL_NOT_ALLOWED"),
    
    DYNAMIC_DNS_AT_DESTINATION_URL("DYNAMIC_DNS_AT_DESTINATION_URL"),
    
    POOR_IMAGE_OR_VIDEO_QUALITY("POOR_IMAGE_OR_VIDEO_QUALITY"),
    
    UNACCEPTABLE_IMAGE_CONTENT("UNACCEPTABLE_IMAGE_CONTENT"),
    
    INCORRECT_IMAGE_LAYOUT("INCORRECT_IMAGE_LAYOUT"),
    
    IRRELEVANT_IMAGE_OR_VIDEO("IRRELEVANT_IMAGE_OR_VIDEO"),
    
    DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK("DESTINATION_SITE_DOES_NOT_ALLOW_GOING_BACK"),
    
    MISLEADING_CLAIMS_IN_AD("MISLEADING_CLAIMS_IN_AD"),
    
    RESTRICTED_PRODUCTS("RESTRICTED_PRODUCTS"),
    
    UNACCEPTABLE_CONTENT("UNACCEPTABLE_CONTENT"),
    
    AUTOMATED_AD_CLICKING("AUTOMATED_AD_CLICKING"),
    
    INVALID_URL_PROTOCOL("INVALID_URL_PROTOCOL"),
    
    UNDECLARED_RESTRICTED_CONTENT("UNDECLARED_RESTRICTED_CONTENT"),
    
    INVALID_REMARKETING_LIST_USAGE("INVALID_REMARKETING_LIST_USAGE"),
    
    DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT("DESTINATION_SITE_NOT_CRAWLABLE_ROBOTS_TXT"),
    
    CLICK_TO_DOWNLOAD_NOT_AN_APP("CLICK_TO_DOWNLOAD_NOT_AN_APP"),
    
    INACCURATE_REVIEW_EXTENSION("INACCURATE_REVIEW_EXTENSION"),
    
    SEXUALLY_EXPLICIT_CONTENT("SEXUALLY_EXPLICIT_CONTENT"),
    
    GAINING_AN_UNFAIR_ADVANTAGE("GAINING_AN_UNFAIR_ADVANTAGE"),
    
    GAMING_THE_GOOGLE_NETWORK("GAMING_THE_GOOGLE_NETWORK"),
    
    DANGEROUS_PRODUCTS_KNIVES("DANGEROUS_PRODUCTS_KNIVES"),
    
    DANGEROUS_PRODUCTS_EXPLOSIVES("DANGEROUS_PRODUCTS_EXPLOSIVES"),
    
    DANGEROUS_PRODUCTS_GUNS("DANGEROUS_PRODUCTS_GUNS"),
    
    DANGEROUS_PRODUCTS_DRUGS("DANGEROUS_PRODUCTS_DRUGS"),
    
    DANGEROUS_PRODUCTS_TOBACCO("DANGEROUS_PRODUCTS_TOBACCO"),
    
    DANGEROUS_PRODUCTS_WEAPONS("DANGEROUS_PRODUCTS_WEAPONS"),
    
    UNCLEAR_OR_IRRELEVANT_AD("UNCLEAR_OR_IRRELEVANT_AD"),
    
    PROFESSIONAL_STANDARDS("PROFESSIONAL_STANDARDS"),
    
    DYSFUNCTIONAL_PROMOTION("DYSFUNCTIONAL_PROMOTION"),
    
    INVALID_INTEREST_BASED_AD("INVALID_INTEREST_BASED_AD"),
    
    MISUSE_OF_PERSONAL_INFORMATION("MISUSE_OF_PERSONAL_INFORMATION"),
    
    OMISSION_OF_RELEVANT_INFORMATION("OMISSION_OF_RELEVANT_INFORMATION"),
    
    UNAVAILABLE_PROMOTIONS("UNAVAILABLE_PROMOTIONS"),
    
    MISLEADING_PROMOTIONS("MISLEADING_PROMOTIONS"),
    
    INAPPROPRIATE_CONTENT("INAPPROPRIATE_CONTENT"),
    
    SENSITIVE_EVENTS("SENSITIVE_EVENTS"),
    
    SHOCKING_CONTENT("SHOCKING_CONTENT"),
    
    ENABLING_DISHONEST_BEHAVIOR("ENABLING_DISHONEST_BEHAVIOR"),
    
    TECHNICAL_REQUIREMENTS("TECHNICAL_REQUIREMENTS"),
    
    RESTRICTED_POLITICAL_CONTENT("RESTRICTED_POLITICAL_CONTENT"),
    
    UNSUPPORTED_CONTENT("UNSUPPORTED_CONTENT"),
    
    INVALID_BIDDING_METHOD("INVALID_BIDDING_METHOD"),
    
    VIDEO_TOO_LONG("VIDEO_TOO_LONG"),
    
    VIOLATES_JAPANESE_PHARMACY_LAW("VIOLATES_JAPANESE_PHARMACY_LAW"),
    
    UNACCREDITED_PET_PHARMACY("UNACCREDITED_PET_PHARMACY"),
    
    ABORTION("ABORTION"),
    
    CONTRACEPTIVES("CONTRACEPTIVES"),
    
    NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA("NEED_CERTIFICATES_TO_ADVERTISE_IN_CHINA"),
    
    KCDSP_REGISTRATION("KCDSP_REGISTRATION"),
    
    NOT_FAMILY_SAFE("NOT_FAMILY_SAFE"),
    
    CLINICAL_TRIAL_RECRUITMENT("CLINICAL_TRIAL_RECRUITMENT"),
    
    MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED("MAXIMUM_NUMBER_OF_HTTP_CALLS_EXCEEDED"),
    
    MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED("MAXIMUM_NUMBER_OF_COOKIES_EXCEEDED"),
    
    PERSONAL_LOANS("PERSONAL_LOANS"),
    
    UNSUPPORTED_FLASH_CONTENT("UNSUPPORTED_FLASH_CONTENT"),
    
    MISUSE_BY_OMID_SCRIPT("MISUSE_BY_OMID_SCRIPT"),
    
    NON_WHITELISTED_OMID_VENDOR("NON_WHITELISTED_OMID_VENDOR"),
    
    DESTINATION_EXPERIENCE("DESTINATION_EXPERIENCE"),
    
    UNSUPPORTED_LANGUAGE("UNSUPPORTED_LANGUAGE"),
    
    NON_SSL_COMPLIANT("NON_SSL_COMPLIANT"),
    
    TEMPORARY_PAUSE("TEMPORARY_PAUSE"),
    
    BAIL_BONDS("BAIL_BONDS"),
    
    EXPERIMENTAL_MEDICAL_TREATMENT("EXPERIMENTAL_MEDICAL_TREATMENT");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public Disapproval() {
  }

  public Disapproval details(List<String> details) {
    this.details = details;
    return this;
  }

  public Disapproval addDetailsItem(String detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Additional details about the reason for disapproval.
   * @return details
   */
  @javax.annotation.Nullable
  public List<String> getDetails() {
    return details;
  }

  public void setDetails(List<String> details) {
    this.details = details;
  }


  public Disapproval reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The categorized reason for disapproval.
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Disapproval disapproval = (Disapproval) o;
    return Objects.equals(this.details, disapproval.details) &&
        Objects.equals(this.reason, disapproval.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Disapproval {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Disapproval
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Disapproval.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Disapproval is not found in the empty JSON string", Disapproval.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Disapproval.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Disapproval` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull() && !jsonObj.get("details").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Disapproval.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Disapproval' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Disapproval> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Disapproval.class));

       return (TypeAdapter<T>) new TypeAdapter<Disapproval>() {
           @Override
           public void write(JsonWriter out, Disapproval value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Disapproval read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Disapproval given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Disapproval
   * @throws IOException if the JSON string is invalid with respect to Disapproval
   */
  public static Disapproval fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Disapproval.class);
  }

  /**
   * Convert an instance of Disapproval to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

