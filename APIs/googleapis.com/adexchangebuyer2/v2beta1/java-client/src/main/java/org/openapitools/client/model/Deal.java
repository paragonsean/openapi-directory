/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactInformation;
import org.openapitools.client.model.CreativeRestrictions;
import org.openapitools.client.model.DealServingMetadata;
import org.openapitools.client.model.DealTerms;
import org.openapitools.client.model.DeliveryControl;
import org.openapitools.client.model.MarketplaceTargeting;
import org.openapitools.client.model.PrivateData;
import org.openapitools.client.model.TargetingCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A deal represents a segment of inventory for displaying ads on. A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deal {
  public static final String SERIALIZED_NAME_AVAILABLE_END_TIME = "availableEndTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_END_TIME)
  private String availableEndTime;

  public static final String SERIALIZED_NAME_AVAILABLE_START_TIME = "availableStartTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_START_TIME)
  private String availableStartTime;

  public static final String SERIALIZED_NAME_BUYER_PRIVATE_DATA = "buyerPrivateData";
  @SerializedName(SERIALIZED_NAME_BUYER_PRIVATE_DATA)
  private PrivateData buyerPrivateData;

  public static final String SERIALIZED_NAME_CREATE_PRODUCT_ID = "createProductId";
  @SerializedName(SERIALIZED_NAME_CREATE_PRODUCT_ID)
  private String createProductId;

  public static final String SERIALIZED_NAME_CREATE_PRODUCT_REVISION = "createProductRevision";
  @SerializedName(SERIALIZED_NAME_CREATE_PRODUCT_REVISION)
  private String createProductRevision;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Output only. Specifies the creative pre-approval policy.
   */
  @JsonAdapter(CreativePreApprovalPolicyEnum.Adapter.class)
  public enum CreativePreApprovalPolicyEnum {
    CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED("CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED"),
    
    SELLER_PRE_APPROVAL_REQUIRED("SELLER_PRE_APPROVAL_REQUIRED"),
    
    SELLER_PRE_APPROVAL_NOT_REQUIRED("SELLER_PRE_APPROVAL_NOT_REQUIRED");

    private String value;

    CreativePreApprovalPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativePreApprovalPolicyEnum fromValue(String value) {
      for (CreativePreApprovalPolicyEnum b : CreativePreApprovalPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativePreApprovalPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativePreApprovalPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativePreApprovalPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativePreApprovalPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativePreApprovalPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_PRE_APPROVAL_POLICY = "creativePreApprovalPolicy";
  @SerializedName(SERIALIZED_NAME_CREATIVE_PRE_APPROVAL_POLICY)
  private CreativePreApprovalPolicyEnum creativePreApprovalPolicy;

  public static final String SERIALIZED_NAME_CREATIVE_RESTRICTIONS = "creativeRestrictions";
  @SerializedName(SERIALIZED_NAME_CREATIVE_RESTRICTIONS)
  private CreativeRestrictions creativeRestrictions;

  /**
   * Output only. Specifies whether the creative is safeFrame compatible.
   */
  @JsonAdapter(CreativeSafeFrameCompatibilityEnum.Adapter.class)
  public enum CreativeSafeFrameCompatibilityEnum {
    CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED("CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED"),
    
    COMPATIBLE("COMPATIBLE"),
    
    INCOMPATIBLE("INCOMPATIBLE");

    private String value;

    CreativeSafeFrameCompatibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeSafeFrameCompatibilityEnum fromValue(String value) {
      for (CreativeSafeFrameCompatibilityEnum b : CreativeSafeFrameCompatibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeSafeFrameCompatibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeSafeFrameCompatibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeSafeFrameCompatibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeSafeFrameCompatibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeSafeFrameCompatibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_SAFE_FRAME_COMPATIBILITY = "creativeSafeFrameCompatibility";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SAFE_FRAME_COMPATIBILITY)
  private CreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility;

  public static final String SERIALIZED_NAME_DEAL_ID = "dealId";
  @SerializedName(SERIALIZED_NAME_DEAL_ID)
  private String dealId;

  public static final String SERIALIZED_NAME_DEAL_SERVING_METADATA = "dealServingMetadata";
  @SerializedName(SERIALIZED_NAME_DEAL_SERVING_METADATA)
  private DealServingMetadata dealServingMetadata;

  public static final String SERIALIZED_NAME_DEAL_TERMS = "dealTerms";
  @SerializedName(SERIALIZED_NAME_DEAL_TERMS)
  private DealTerms dealTerms;

  public static final String SERIALIZED_NAME_DELIVERY_CONTROL = "deliveryControl";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CONTROL)
  private DeliveryControl deliveryControl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_DEAL_ID = "externalDealId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DEAL_ID)
  private String externalDealId;

  public static final String SERIALIZED_NAME_IS_SETUP_COMPLETE = "isSetupComplete";
  @SerializedName(SERIALIZED_NAME_IS_SETUP_COMPLETE)
  private Boolean isSetupComplete;

  /**
   * Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.
   */
  @JsonAdapter(ProgrammaticCreativeSourceEnum.Adapter.class)
  public enum ProgrammaticCreativeSourceEnum {
    PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED("PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED"),
    
    ADVERTISER("ADVERTISER"),
    
    PUBLISHER("PUBLISHER");

    private String value;

    ProgrammaticCreativeSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgrammaticCreativeSourceEnum fromValue(String value) {
      for (ProgrammaticCreativeSourceEnum b : ProgrammaticCreativeSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgrammaticCreativeSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgrammaticCreativeSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgrammaticCreativeSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgrammaticCreativeSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgrammaticCreativeSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRAMMATIC_CREATIVE_SOURCE = "programmaticCreativeSource";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_CREATIVE_SOURCE)
  private ProgrammaticCreativeSourceEnum programmaticCreativeSource;

  public static final String SERIALIZED_NAME_PROPOSAL_ID = "proposalId";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_ID)
  private String proposalId;

  public static final String SERIALIZED_NAME_SELLER_CONTACTS = "sellerContacts";
  @SerializedName(SERIALIZED_NAME_SELLER_CONTACTS)
  private List<ContactInformation> sellerContacts = new ArrayList<>();

  /**
   * The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
   */
  @JsonAdapter(SyndicationProductEnum.Adapter.class)
  public enum SyndicationProductEnum {
    SYNDICATION_PRODUCT_UNSPECIFIED("SYNDICATION_PRODUCT_UNSPECIFIED"),
    
    CONTENT("CONTENT"),
    
    MOBILE("MOBILE"),
    
    VIDEO("VIDEO"),
    
    GAMES("GAMES");

    private String value;

    SyndicationProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyndicationProductEnum fromValue(String value) {
      for (SyndicationProductEnum b : SyndicationProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyndicationProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyndicationProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyndicationProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyndicationProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyndicationProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNDICATION_PRODUCT = "syndicationProduct";
  @SerializedName(SERIALIZED_NAME_SYNDICATION_PRODUCT)
  private SyndicationProductEnum syndicationProduct;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private MarketplaceTargeting targeting;

  public static final String SERIALIZED_NAME_TARGETING_CRITERION = "targetingCriterion";
  @SerializedName(SERIALIZED_NAME_TARGETING_CRITERION)
  private List<TargetingCriteria> targetingCriterion = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_CODE = "webPropertyCode";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_CODE)
  private String webPropertyCode;

  public Deal() {
  }

  public Deal(
     String createTime, 
     CreativePreApprovalPolicyEnum creativePreApprovalPolicy, 
     CreativeSafeFrameCompatibilityEnum creativeSafeFrameCompatibility, 
     String dealId, 
     String externalDealId, 
     Boolean isSetupComplete, 
     ProgrammaticCreativeSourceEnum programmaticCreativeSource, 
     String proposalId, 
     List<ContactInformation> sellerContacts, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.creativePreApprovalPolicy = creativePreApprovalPolicy;
    this.creativeSafeFrameCompatibility = creativeSafeFrameCompatibility;
    this.dealId = dealId;
    this.externalDealId = externalDealId;
    this.isSetupComplete = isSetupComplete;
    this.programmaticCreativeSource = programmaticCreativeSource;
    this.proposalId = proposalId;
    this.sellerContacts = sellerContacts;
    this.updateTime = updateTime;
  }

  public Deal availableEndTime(String availableEndTime) {
    this.availableEndTime = availableEndTime;
    return this;
  }

  /**
   * Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals.
   * @return availableEndTime
   */
  @javax.annotation.Nullable
  public String getAvailableEndTime() {
    return availableEndTime;
  }

  public void setAvailableEndTime(String availableEndTime) {
    this.availableEndTime = availableEndTime;
  }


  public Deal availableStartTime(String availableStartTime) {
    this.availableStartTime = availableStartTime;
    return this;
  }

  /**
   * Optional. Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.
   * @return availableStartTime
   */
  @javax.annotation.Nullable
  public String getAvailableStartTime() {
    return availableStartTime;
  }

  public void setAvailableStartTime(String availableStartTime) {
    this.availableStartTime = availableStartTime;
  }


  public Deal buyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
    return this;
  }

  /**
   * Get buyerPrivateData
   * @return buyerPrivateData
   */
  @javax.annotation.Nullable
  public PrivateData getBuyerPrivateData() {
    return buyerPrivateData;
  }

  public void setBuyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
  }


  public Deal createProductId(String createProductId) {
    this.createProductId = createProductId;
    return this;
  }

  /**
   * The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
   * @return createProductId
   */
  @javax.annotation.Nullable
  public String getCreateProductId() {
    return createProductId;
  }

  public void setCreateProductId(String createProductId) {
    this.createProductId = createProductId;
  }


  public Deal createProductRevision(String createProductRevision) {
    this.createProductRevision = createProductRevision;
    return this;
  }

  /**
   * Optional. Revision number of the product that the deal was created from. If present on create, and the server &#x60;product_revision&#x60; has advanced since the passed-in &#x60;create_product_revision&#x60;, an &#x60;ABORTED&#x60; error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
   * @return createProductRevision
   */
  @javax.annotation.Nullable
  public String getCreateProductRevision() {
    return createProductRevision;
  }

  public void setCreateProductRevision(String createProductRevision) {
    this.createProductRevision = createProductRevision;
  }


  /**
   * Output only. The time of the deal creation.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Specifies the creative pre-approval policy.
   * @return creativePreApprovalPolicy
   */
  @javax.annotation.Nullable
  public CreativePreApprovalPolicyEnum getCreativePreApprovalPolicy() {
    return creativePreApprovalPolicy;
  }



  public Deal creativeRestrictions(CreativeRestrictions creativeRestrictions) {
    this.creativeRestrictions = creativeRestrictions;
    return this;
  }

  /**
   * Get creativeRestrictions
   * @return creativeRestrictions
   */
  @javax.annotation.Nullable
  public CreativeRestrictions getCreativeRestrictions() {
    return creativeRestrictions;
  }

  public void setCreativeRestrictions(CreativeRestrictions creativeRestrictions) {
    this.creativeRestrictions = creativeRestrictions;
  }


  /**
   * Output only. Specifies whether the creative is safeFrame compatible.
   * @return creativeSafeFrameCompatibility
   */
  @javax.annotation.Nullable
  public CreativeSafeFrameCompatibilityEnum getCreativeSafeFrameCompatibility() {
    return creativeSafeFrameCompatibility;
  }



  /**
   * Output only. A unique deal ID for the deal (server-assigned).
   * @return dealId
   */
  @javax.annotation.Nullable
  public String getDealId() {
    return dealId;
  }



  public Deal dealServingMetadata(DealServingMetadata dealServingMetadata) {
    this.dealServingMetadata = dealServingMetadata;
    return this;
  }

  /**
   * Get dealServingMetadata
   * @return dealServingMetadata
   */
  @javax.annotation.Nullable
  public DealServingMetadata getDealServingMetadata() {
    return dealServingMetadata;
  }

  public void setDealServingMetadata(DealServingMetadata dealServingMetadata) {
    this.dealServingMetadata = dealServingMetadata;
  }


  public Deal dealTerms(DealTerms dealTerms) {
    this.dealTerms = dealTerms;
    return this;
  }

  /**
   * Get dealTerms
   * @return dealTerms
   */
  @javax.annotation.Nullable
  public DealTerms getDealTerms() {
    return dealTerms;
  }

  public void setDealTerms(DealTerms dealTerms) {
    this.dealTerms = dealTerms;
  }


  public Deal deliveryControl(DeliveryControl deliveryControl) {
    this.deliveryControl = deliveryControl;
    return this;
  }

  /**
   * Get deliveryControl
   * @return deliveryControl
   */
  @javax.annotation.Nullable
  public DeliveryControl getDeliveryControl() {
    return deliveryControl;
  }

  public void setDeliveryControl(DeliveryControl deliveryControl) {
    this.deliveryControl = deliveryControl;
  }


  public Deal description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the deal terms.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Deal displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the deal.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc.
   * @return externalDealId
   */
  @javax.annotation.Nullable
  public String getExternalDealId() {
    return externalDealId;
  }



  /**
   * Output only. True, if the buyside inventory setup is complete for this deal.
   * @return isSetupComplete
   */
  @javax.annotation.Nullable
  public Boolean getIsSetupComplete() {
    return isSetupComplete;
  }



  /**
   * Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer.
   * @return programmaticCreativeSource
   */
  @javax.annotation.Nullable
  public ProgrammaticCreativeSourceEnum getProgrammaticCreativeSource() {
    return programmaticCreativeSource;
  }



  /**
   * Output only. ID of the proposal that this deal is part of.
   * @return proposalId
   */
  @javax.annotation.Nullable
  public String getProposalId() {
    return proposalId;
  }



  /**
   * Output only. Seller contact information for the deal.
   * @return sellerContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getSellerContacts() {
    return sellerContacts;
  }



  public Deal syndicationProduct(SyndicationProductEnum syndicationProduct) {
    this.syndicationProduct = syndicationProduct;
    return this;
  }

  /**
   * The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
   * @return syndicationProduct
   */
  @javax.annotation.Nullable
  public SyndicationProductEnum getSyndicationProduct() {
    return syndicationProduct;
  }

  public void setSyndicationProduct(SyndicationProductEnum syndicationProduct) {
    this.syndicationProduct = syndicationProduct;
  }


  public Deal targeting(MarketplaceTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public MarketplaceTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(MarketplaceTargeting targeting) {
    this.targeting = targeting;
  }


  public Deal targetingCriterion(List<TargetingCriteria> targetingCriterion) {
    this.targetingCriterion = targetingCriterion;
    return this;
  }

  public Deal addTargetingCriterionItem(TargetingCriteria targetingCriterionItem) {
    if (this.targetingCriterion == null) {
      this.targetingCriterion = new ArrayList<>();
    }
    this.targetingCriterion.add(targetingCriterionItem);
    return this;
  }

  /**
   * The shared targeting visible to buyers and sellers. Each shared targeting entity is AND&#39;d together.
   * @return targetingCriterion
   */
  @javax.annotation.Nullable
  public List<TargetingCriteria> getTargetingCriterion() {
    return targetingCriterion;
  }

  public void setTargetingCriterion(List<TargetingCriteria> targetingCriterion) {
    this.targetingCriterion = targetingCriterion;
  }


  /**
   * Output only. The time when the deal was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Deal webPropertyCode(String webPropertyCode) {
    this.webPropertyCode = webPropertyCode;
    return this;
  }

  /**
   * The web property code for the seller copied over from the product.
   * @return webPropertyCode
   */
  @javax.annotation.Nullable
  public String getWebPropertyCode() {
    return webPropertyCode;
  }

  public void setWebPropertyCode(String webPropertyCode) {
    this.webPropertyCode = webPropertyCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deal deal = (Deal) o;
    return Objects.equals(this.availableEndTime, deal.availableEndTime) &&
        Objects.equals(this.availableStartTime, deal.availableStartTime) &&
        Objects.equals(this.buyerPrivateData, deal.buyerPrivateData) &&
        Objects.equals(this.createProductId, deal.createProductId) &&
        Objects.equals(this.createProductRevision, deal.createProductRevision) &&
        Objects.equals(this.createTime, deal.createTime) &&
        Objects.equals(this.creativePreApprovalPolicy, deal.creativePreApprovalPolicy) &&
        Objects.equals(this.creativeRestrictions, deal.creativeRestrictions) &&
        Objects.equals(this.creativeSafeFrameCompatibility, deal.creativeSafeFrameCompatibility) &&
        Objects.equals(this.dealId, deal.dealId) &&
        Objects.equals(this.dealServingMetadata, deal.dealServingMetadata) &&
        Objects.equals(this.dealTerms, deal.dealTerms) &&
        Objects.equals(this.deliveryControl, deal.deliveryControl) &&
        Objects.equals(this.description, deal.description) &&
        Objects.equals(this.displayName, deal.displayName) &&
        Objects.equals(this.externalDealId, deal.externalDealId) &&
        Objects.equals(this.isSetupComplete, deal.isSetupComplete) &&
        Objects.equals(this.programmaticCreativeSource, deal.programmaticCreativeSource) &&
        Objects.equals(this.proposalId, deal.proposalId) &&
        Objects.equals(this.sellerContacts, deal.sellerContacts) &&
        Objects.equals(this.syndicationProduct, deal.syndicationProduct) &&
        Objects.equals(this.targeting, deal.targeting) &&
        Objects.equals(this.targetingCriterion, deal.targetingCriterion) &&
        Objects.equals(this.updateTime, deal.updateTime) &&
        Objects.equals(this.webPropertyCode, deal.webPropertyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableEndTime, availableStartTime, buyerPrivateData, createProductId, createProductRevision, createTime, creativePreApprovalPolicy, creativeRestrictions, creativeSafeFrameCompatibility, dealId, dealServingMetadata, dealTerms, deliveryControl, description, displayName, externalDealId, isSetupComplete, programmaticCreativeSource, proposalId, sellerContacts, syndicationProduct, targeting, targetingCriterion, updateTime, webPropertyCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deal {\n");
    sb.append("    availableEndTime: ").append(toIndentedString(availableEndTime)).append("\n");
    sb.append("    availableStartTime: ").append(toIndentedString(availableStartTime)).append("\n");
    sb.append("    buyerPrivateData: ").append(toIndentedString(buyerPrivateData)).append("\n");
    sb.append("    createProductId: ").append(toIndentedString(createProductId)).append("\n");
    sb.append("    createProductRevision: ").append(toIndentedString(createProductRevision)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creativePreApprovalPolicy: ").append(toIndentedString(creativePreApprovalPolicy)).append("\n");
    sb.append("    creativeRestrictions: ").append(toIndentedString(creativeRestrictions)).append("\n");
    sb.append("    creativeSafeFrameCompatibility: ").append(toIndentedString(creativeSafeFrameCompatibility)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    dealServingMetadata: ").append(toIndentedString(dealServingMetadata)).append("\n");
    sb.append("    dealTerms: ").append(toIndentedString(dealTerms)).append("\n");
    sb.append("    deliveryControl: ").append(toIndentedString(deliveryControl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalDealId: ").append(toIndentedString(externalDealId)).append("\n");
    sb.append("    isSetupComplete: ").append(toIndentedString(isSetupComplete)).append("\n");
    sb.append("    programmaticCreativeSource: ").append(toIndentedString(programmaticCreativeSource)).append("\n");
    sb.append("    proposalId: ").append(toIndentedString(proposalId)).append("\n");
    sb.append("    sellerContacts: ").append(toIndentedString(sellerContacts)).append("\n");
    sb.append("    syndicationProduct: ").append(toIndentedString(syndicationProduct)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("    targetingCriterion: ").append(toIndentedString(targetingCriterion)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    webPropertyCode: ").append(toIndentedString(webPropertyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableEndTime");
    openapiFields.add("availableStartTime");
    openapiFields.add("buyerPrivateData");
    openapiFields.add("createProductId");
    openapiFields.add("createProductRevision");
    openapiFields.add("createTime");
    openapiFields.add("creativePreApprovalPolicy");
    openapiFields.add("creativeRestrictions");
    openapiFields.add("creativeSafeFrameCompatibility");
    openapiFields.add("dealId");
    openapiFields.add("dealServingMetadata");
    openapiFields.add("dealTerms");
    openapiFields.add("deliveryControl");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("externalDealId");
    openapiFields.add("isSetupComplete");
    openapiFields.add("programmaticCreativeSource");
    openapiFields.add("proposalId");
    openapiFields.add("sellerContacts");
    openapiFields.add("syndicationProduct");
    openapiFields.add("targeting");
    openapiFields.add("targetingCriterion");
    openapiFields.add("updateTime");
    openapiFields.add("webPropertyCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deal is not found in the empty JSON string", Deal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availableEndTime") != null && !jsonObj.get("availableEndTime").isJsonNull()) && !jsonObj.get("availableEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableEndTime").toString()));
      }
      if ((jsonObj.get("availableStartTime") != null && !jsonObj.get("availableStartTime").isJsonNull()) && !jsonObj.get("availableStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableStartTime").toString()));
      }
      // validate the optional field `buyerPrivateData`
      if (jsonObj.get("buyerPrivateData") != null && !jsonObj.get("buyerPrivateData").isJsonNull()) {
        PrivateData.validateJsonElement(jsonObj.get("buyerPrivateData"));
      }
      if ((jsonObj.get("createProductId") != null && !jsonObj.get("createProductId").isJsonNull()) && !jsonObj.get("createProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createProductId").toString()));
      }
      if ((jsonObj.get("createProductRevision") != null && !jsonObj.get("createProductRevision").isJsonNull()) && !jsonObj.get("createProductRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createProductRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createProductRevision").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("creativePreApprovalPolicy") != null && !jsonObj.get("creativePreApprovalPolicy").isJsonNull()) && !jsonObj.get("creativePreApprovalPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativePreApprovalPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativePreApprovalPolicy").toString()));
      }
      // validate the optional field `creativePreApprovalPolicy`
      if (jsonObj.get("creativePreApprovalPolicy") != null && !jsonObj.get("creativePreApprovalPolicy").isJsonNull()) {
        CreativePreApprovalPolicyEnum.validateJsonElement(jsonObj.get("creativePreApprovalPolicy"));
      }
      // validate the optional field `creativeRestrictions`
      if (jsonObj.get("creativeRestrictions") != null && !jsonObj.get("creativeRestrictions").isJsonNull()) {
        CreativeRestrictions.validateJsonElement(jsonObj.get("creativeRestrictions"));
      }
      if ((jsonObj.get("creativeSafeFrameCompatibility") != null && !jsonObj.get("creativeSafeFrameCompatibility").isJsonNull()) && !jsonObj.get("creativeSafeFrameCompatibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeSafeFrameCompatibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeSafeFrameCompatibility").toString()));
      }
      // validate the optional field `creativeSafeFrameCompatibility`
      if (jsonObj.get("creativeSafeFrameCompatibility") != null && !jsonObj.get("creativeSafeFrameCompatibility").isJsonNull()) {
        CreativeSafeFrameCompatibilityEnum.validateJsonElement(jsonObj.get("creativeSafeFrameCompatibility"));
      }
      if ((jsonObj.get("dealId") != null && !jsonObj.get("dealId").isJsonNull()) && !jsonObj.get("dealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealId").toString()));
      }
      // validate the optional field `dealServingMetadata`
      if (jsonObj.get("dealServingMetadata") != null && !jsonObj.get("dealServingMetadata").isJsonNull()) {
        DealServingMetadata.validateJsonElement(jsonObj.get("dealServingMetadata"));
      }
      // validate the optional field `dealTerms`
      if (jsonObj.get("dealTerms") != null && !jsonObj.get("dealTerms").isJsonNull()) {
        DealTerms.validateJsonElement(jsonObj.get("dealTerms"));
      }
      // validate the optional field `deliveryControl`
      if (jsonObj.get("deliveryControl") != null && !jsonObj.get("deliveryControl").isJsonNull()) {
        DeliveryControl.validateJsonElement(jsonObj.get("deliveryControl"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalDealId") != null && !jsonObj.get("externalDealId").isJsonNull()) && !jsonObj.get("externalDealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDealId").toString()));
      }
      if ((jsonObj.get("programmaticCreativeSource") != null && !jsonObj.get("programmaticCreativeSource").isJsonNull()) && !jsonObj.get("programmaticCreativeSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmaticCreativeSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programmaticCreativeSource").toString()));
      }
      // validate the optional field `programmaticCreativeSource`
      if (jsonObj.get("programmaticCreativeSource") != null && !jsonObj.get("programmaticCreativeSource").isJsonNull()) {
        ProgrammaticCreativeSourceEnum.validateJsonElement(jsonObj.get("programmaticCreativeSource"));
      }
      if ((jsonObj.get("proposalId") != null && !jsonObj.get("proposalId").isJsonNull()) && !jsonObj.get("proposalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalId").toString()));
      }
      if (jsonObj.get("sellerContacts") != null && !jsonObj.get("sellerContacts").isJsonNull()) {
        JsonArray jsonArraysellerContacts = jsonObj.getAsJsonArray("sellerContacts");
        if (jsonArraysellerContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sellerContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sellerContacts` to be an array in the JSON string but got `%s`", jsonObj.get("sellerContacts").toString()));
          }

          // validate the optional field `sellerContacts` (array)
          for (int i = 0; i < jsonArraysellerContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraysellerContacts.get(i));
          };
        }
      }
      if ((jsonObj.get("syndicationProduct") != null && !jsonObj.get("syndicationProduct").isJsonNull()) && !jsonObj.get("syndicationProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syndicationProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syndicationProduct").toString()));
      }
      // validate the optional field `syndicationProduct`
      if (jsonObj.get("syndicationProduct") != null && !jsonObj.get("syndicationProduct").isJsonNull()) {
        SyndicationProductEnum.validateJsonElement(jsonObj.get("syndicationProduct"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        MarketplaceTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
      if (jsonObj.get("targetingCriterion") != null && !jsonObj.get("targetingCriterion").isJsonNull()) {
        JsonArray jsonArraytargetingCriterion = jsonObj.getAsJsonArray("targetingCriterion");
        if (jsonArraytargetingCriterion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetingCriterion").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetingCriterion` to be an array in the JSON string but got `%s`", jsonObj.get("targetingCriterion").toString()));
          }

          // validate the optional field `targetingCriterion` (array)
          for (int i = 0; i < jsonArraytargetingCriterion.size(); i++) {
            TargetingCriteria.validateJsonElement(jsonArraytargetingCriterion.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("webPropertyCode") != null && !jsonObj.get("webPropertyCode").isJsonNull()) && !jsonObj.get("webPropertyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deal.class));

       return (TypeAdapter<T>) new TypeAdapter<Deal>() {
           @Override
           public void write(JsonWriter out, Deal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deal
   * @throws IOException if the JSON string is invalid with respect to Deal
   */
  public static Deal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deal.class);
  }

  /**
   * Convert an instance of Deal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

