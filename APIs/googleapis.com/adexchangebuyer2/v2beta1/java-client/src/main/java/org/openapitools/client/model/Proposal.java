/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Buyer;
import org.openapitools.client.model.ContactInformation;
import org.openapitools.client.model.Deal;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.PrivateData;
import org.openapitools.client.model.Seller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Note: You can&#39;t update, create, or otherwise modify Private Auction deals through the API. Fields are updatable unless noted otherwise.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Proposal {
  public static final String SERIALIZED_NAME_BILLED_BUYER = "billedBuyer";
  @SerializedName(SERIALIZED_NAME_BILLED_BUYER)
  private Buyer billedBuyer;

  public static final String SERIALIZED_NAME_BUYER = "buyer";
  @SerializedName(SERIALIZED_NAME_BUYER)
  private Buyer buyer;

  public static final String SERIALIZED_NAME_BUYER_CONTACTS = "buyerContacts";
  @SerializedName(SERIALIZED_NAME_BUYER_CONTACTS)
  private List<ContactInformation> buyerContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUYER_PRIVATE_DATA = "buyerPrivateData";
  @SerializedName(SERIALIZED_NAME_BUYER_PRIVATE_DATA)
  private PrivateData buyerPrivateData;

  public static final String SERIALIZED_NAME_DEALS = "deals";
  @SerializedName(SERIALIZED_NAME_DEALS)
  private List<Deal> deals = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_RENEGOTIATING = "isRenegotiating";
  @SerializedName(SERIALIZED_NAME_IS_RENEGOTIATING)
  private Boolean isRenegotiating;

  public static final String SERIALIZED_NAME_IS_SETUP_COMPLETE = "isSetupComplete";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_IS_SETUP_COMPLETE)
  private Boolean isSetupComplete;

  /**
   * Output only. The role of the last user that either updated the proposal or left a comment.
   */
  @JsonAdapter(LastUpdaterOrCommentorRoleEnum.Adapter.class)
  public enum LastUpdaterOrCommentorRoleEnum {
    BUYER_SELLER_ROLE_UNSPECIFIED("BUYER_SELLER_ROLE_UNSPECIFIED"),
    
    BUYER("BUYER"),
    
    SELLER("SELLER");

    private String value;

    LastUpdaterOrCommentorRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LastUpdaterOrCommentorRoleEnum fromValue(String value) {
      for (LastUpdaterOrCommentorRoleEnum b : LastUpdaterOrCommentorRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LastUpdaterOrCommentorRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LastUpdaterOrCommentorRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LastUpdaterOrCommentorRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LastUpdaterOrCommentorRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LastUpdaterOrCommentorRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAST_UPDATER_OR_COMMENTOR_ROLE = "lastUpdaterOrCommentorRole";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATER_OR_COMMENTOR_ROLE)
  private LastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Note> notes = new ArrayList<>();

  /**
   * Output only. Indicates whether the buyer/seller created the proposal.
   */
  @JsonAdapter(OriginatorRoleEnum.Adapter.class)
  public enum OriginatorRoleEnum {
    BUYER_SELLER_ROLE_UNSPECIFIED("BUYER_SELLER_ROLE_UNSPECIFIED"),
    
    BUYER("BUYER"),
    
    SELLER("SELLER");

    private String value;

    OriginatorRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginatorRoleEnum fromValue(String value) {
      for (OriginatorRoleEnum b : OriginatorRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginatorRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginatorRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginatorRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginatorRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginatorRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGINATOR_ROLE = "originatorRole";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ROLE)
  private OriginatorRoleEnum originatorRole;

  public static final String SERIALIZED_NAME_PRIVATE_AUCTION_ID = "privateAuctionId";
  @SerializedName(SERIALIZED_NAME_PRIVATE_AUCTION_ID)
  private String privateAuctionId;

  public static final String SERIALIZED_NAME_PROPOSAL_ID = "proposalId";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_ID)
  private String proposalId;

  public static final String SERIALIZED_NAME_PROPOSAL_REVISION = "proposalRevision";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_REVISION)
  private String proposalRevision;

  /**
   * Output only. The current state of the proposal.
   */
  @JsonAdapter(ProposalStateEnum.Adapter.class)
  public enum ProposalStateEnum {
    PROPOSAL_STATE_UNSPECIFIED("PROPOSAL_STATE_UNSPECIFIED"),
    
    PROPOSED("PROPOSED"),
    
    BUYER_ACCEPTED("BUYER_ACCEPTED"),
    
    SELLER_ACCEPTED("SELLER_ACCEPTED"),
    
    CANCELED("CANCELED"),
    
    FINALIZED("FINALIZED");

    private String value;

    ProposalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProposalStateEnum fromValue(String value) {
      for (ProposalStateEnum b : ProposalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProposalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProposalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProposalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProposalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProposalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROPOSAL_STATE = "proposalState";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_STATE)
  private ProposalStateEnum proposalState;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  public static final String SERIALIZED_NAME_SELLER_CONTACTS = "sellerContacts";
  @SerializedName(SERIALIZED_NAME_SELLER_CONTACTS)
  private List<ContactInformation> sellerContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "termsAndConditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Proposal() {
  }

  public Proposal(
     Boolean isRenegotiating, 
     Boolean isSetupComplete, 
     LastUpdaterOrCommentorRoleEnum lastUpdaterOrCommentorRole, 
     List<Note> notes, 
     OriginatorRoleEnum originatorRole, 
     String privateAuctionId, 
     String proposalId, 
     String proposalRevision, 
     ProposalStateEnum proposalState, 
     List<ContactInformation> sellerContacts, 
     String termsAndConditions, 
     String updateTime
  ) {
    this();
    this.isRenegotiating = isRenegotiating;
    this.isSetupComplete = isSetupComplete;
    this.lastUpdaterOrCommentorRole = lastUpdaterOrCommentorRole;
    this.notes = notes;
    this.originatorRole = originatorRole;
    this.privateAuctionId = privateAuctionId;
    this.proposalId = proposalId;
    this.proposalRevision = proposalRevision;
    this.proposalState = proposalState;
    this.sellerContacts = sellerContacts;
    this.termsAndConditions = termsAndConditions;
    this.updateTime = updateTime;
  }

  public Proposal billedBuyer(Buyer billedBuyer) {
    this.billedBuyer = billedBuyer;
    return this;
  }

  /**
   * Get billedBuyer
   * @return billedBuyer
   */
  @javax.annotation.Nullable
  public Buyer getBilledBuyer() {
    return billedBuyer;
  }

  public void setBilledBuyer(Buyer billedBuyer) {
    this.billedBuyer = billedBuyer;
  }


  public Proposal buyer(Buyer buyer) {
    this.buyer = buyer;
    return this;
  }

  /**
   * Get buyer
   * @return buyer
   */
  @javax.annotation.Nullable
  public Buyer getBuyer() {
    return buyer;
  }

  public void setBuyer(Buyer buyer) {
    this.buyer = buyer;
  }


  public Proposal buyerContacts(List<ContactInformation> buyerContacts) {
    this.buyerContacts = buyerContacts;
    return this;
  }

  public Proposal addBuyerContactsItem(ContactInformation buyerContactsItem) {
    if (this.buyerContacts == null) {
      this.buyerContacts = new ArrayList<>();
    }
    this.buyerContacts.add(buyerContactsItem);
    return this;
  }

  /**
   * Contact information for the buyer.
   * @return buyerContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getBuyerContacts() {
    return buyerContacts;
  }

  public void setBuyerContacts(List<ContactInformation> buyerContacts) {
    this.buyerContacts = buyerContacts;
  }


  public Proposal buyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
    return this;
  }

  /**
   * Get buyerPrivateData
   * @return buyerPrivateData
   */
  @javax.annotation.Nullable
  public PrivateData getBuyerPrivateData() {
    return buyerPrivateData;
  }

  public void setBuyerPrivateData(PrivateData buyerPrivateData) {
    this.buyerPrivateData = buyerPrivateData;
  }


  public Proposal deals(List<Deal> deals) {
    this.deals = deals;
    return this;
  }

  public Proposal addDealsItem(Deal dealsItem) {
    if (this.deals == null) {
      this.deals = new ArrayList<>();
    }
    this.deals.add(dealsItem);
    return this;
  }

  /**
   * The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal.
   * @return deals
   */
  @javax.annotation.Nullable
  public List<Deal> getDeals() {
    return deals;
  }

  public void setDeals(List<Deal> deals) {
    this.deals = deals;
  }


  public Proposal displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name for the proposal.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. True if the proposal is being renegotiated.
   * @return isRenegotiating
   */
  @javax.annotation.Nullable
  public Boolean getIsRenegotiating() {
    return isRenegotiating;
  }



  /**
   * Output only. True, if the buyside inventory setup is complete for this proposal.
   * @return isSetupComplete
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getIsSetupComplete() {
    return isSetupComplete;
  }



  /**
   * Output only. The role of the last user that either updated the proposal or left a comment.
   * @return lastUpdaterOrCommentorRole
   */
  @javax.annotation.Nullable
  public LastUpdaterOrCommentorRoleEnum getLastUpdaterOrCommentorRole() {
    return lastUpdaterOrCommentorRole;
  }



  /**
   * Output only. The notes associated with this proposal.
   * @return notes
   */
  @javax.annotation.Nullable
  public List<Note> getNotes() {
    return notes;
  }



  /**
   * Output only. Indicates whether the buyer/seller created the proposal.
   * @return originatorRole
   */
  @javax.annotation.Nullable
  public OriginatorRoleEnum getOriginatorRole() {
    return originatorRole;
  }



  /**
   * Output only. Private auction ID if this proposal is a private auction proposal.
   * @return privateAuctionId
   */
  @javax.annotation.Nullable
  public String getPrivateAuctionId() {
    return privateAuctionId;
  }



  /**
   * Output only. The unique ID of the proposal.
   * @return proposalId
   */
  @javax.annotation.Nullable
  public String getProposalId() {
    return proposalId;
  }



  /**
   * Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.
   * @return proposalRevision
   */
  @javax.annotation.Nullable
  public String getProposalRevision() {
    return proposalRevision;
  }



  /**
   * Output only. The current state of the proposal.
   * @return proposalState
   */
  @javax.annotation.Nullable
  public ProposalStateEnum getProposalState() {
    return proposalState;
  }



  public Proposal seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  /**
   * Output only. Contact information for the seller.
   * @return sellerContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getSellerContacts() {
    return sellerContacts;
  }



  /**
   * Output only. The terms and conditions set by the publisher for this proposal.
   * @return termsAndConditions
   */
  @javax.annotation.Nullable
  public String getTermsAndConditions() {
    return termsAndConditions;
  }



  /**
   * Output only. The time when the proposal was last revised.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proposal proposal = (Proposal) o;
    return Objects.equals(this.billedBuyer, proposal.billedBuyer) &&
        Objects.equals(this.buyer, proposal.buyer) &&
        Objects.equals(this.buyerContacts, proposal.buyerContacts) &&
        Objects.equals(this.buyerPrivateData, proposal.buyerPrivateData) &&
        Objects.equals(this.deals, proposal.deals) &&
        Objects.equals(this.displayName, proposal.displayName) &&
        Objects.equals(this.isRenegotiating, proposal.isRenegotiating) &&
        Objects.equals(this.isSetupComplete, proposal.isSetupComplete) &&
        Objects.equals(this.lastUpdaterOrCommentorRole, proposal.lastUpdaterOrCommentorRole) &&
        Objects.equals(this.notes, proposal.notes) &&
        Objects.equals(this.originatorRole, proposal.originatorRole) &&
        Objects.equals(this.privateAuctionId, proposal.privateAuctionId) &&
        Objects.equals(this.proposalId, proposal.proposalId) &&
        Objects.equals(this.proposalRevision, proposal.proposalRevision) &&
        Objects.equals(this.proposalState, proposal.proposalState) &&
        Objects.equals(this.seller, proposal.seller) &&
        Objects.equals(this.sellerContacts, proposal.sellerContacts) &&
        Objects.equals(this.termsAndConditions, proposal.termsAndConditions) &&
        Objects.equals(this.updateTime, proposal.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billedBuyer, buyer, buyerContacts, buyerPrivateData, deals, displayName, isRenegotiating, isSetupComplete, lastUpdaterOrCommentorRole, notes, originatorRole, privateAuctionId, proposalId, proposalRevision, proposalState, seller, sellerContacts, termsAndConditions, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proposal {\n");
    sb.append("    billedBuyer: ").append(toIndentedString(billedBuyer)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    buyerContacts: ").append(toIndentedString(buyerContacts)).append("\n");
    sb.append("    buyerPrivateData: ").append(toIndentedString(buyerPrivateData)).append("\n");
    sb.append("    deals: ").append(toIndentedString(deals)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isRenegotiating: ").append(toIndentedString(isRenegotiating)).append("\n");
    sb.append("    isSetupComplete: ").append(toIndentedString(isSetupComplete)).append("\n");
    sb.append("    lastUpdaterOrCommentorRole: ").append(toIndentedString(lastUpdaterOrCommentorRole)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    originatorRole: ").append(toIndentedString(originatorRole)).append("\n");
    sb.append("    privateAuctionId: ").append(toIndentedString(privateAuctionId)).append("\n");
    sb.append("    proposalId: ").append(toIndentedString(proposalId)).append("\n");
    sb.append("    proposalRevision: ").append(toIndentedString(proposalRevision)).append("\n");
    sb.append("    proposalState: ").append(toIndentedString(proposalState)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerContacts: ").append(toIndentedString(sellerContacts)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billedBuyer");
    openapiFields.add("buyer");
    openapiFields.add("buyerContacts");
    openapiFields.add("buyerPrivateData");
    openapiFields.add("deals");
    openapiFields.add("displayName");
    openapiFields.add("isRenegotiating");
    openapiFields.add("isSetupComplete");
    openapiFields.add("lastUpdaterOrCommentorRole");
    openapiFields.add("notes");
    openapiFields.add("originatorRole");
    openapiFields.add("privateAuctionId");
    openapiFields.add("proposalId");
    openapiFields.add("proposalRevision");
    openapiFields.add("proposalState");
    openapiFields.add("seller");
    openapiFields.add("sellerContacts");
    openapiFields.add("termsAndConditions");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Proposal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Proposal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Proposal is not found in the empty JSON string", Proposal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Proposal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Proposal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billedBuyer`
      if (jsonObj.get("billedBuyer") != null && !jsonObj.get("billedBuyer").isJsonNull()) {
        Buyer.validateJsonElement(jsonObj.get("billedBuyer"));
      }
      // validate the optional field `buyer`
      if (jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull()) {
        Buyer.validateJsonElement(jsonObj.get("buyer"));
      }
      if (jsonObj.get("buyerContacts") != null && !jsonObj.get("buyerContacts").isJsonNull()) {
        JsonArray jsonArraybuyerContacts = jsonObj.getAsJsonArray("buyerContacts");
        if (jsonArraybuyerContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buyerContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buyerContacts` to be an array in the JSON string but got `%s`", jsonObj.get("buyerContacts").toString()));
          }

          // validate the optional field `buyerContacts` (array)
          for (int i = 0; i < jsonArraybuyerContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraybuyerContacts.get(i));
          };
        }
      }
      // validate the optional field `buyerPrivateData`
      if (jsonObj.get("buyerPrivateData") != null && !jsonObj.get("buyerPrivateData").isJsonNull()) {
        PrivateData.validateJsonElement(jsonObj.get("buyerPrivateData"));
      }
      if (jsonObj.get("deals") != null && !jsonObj.get("deals").isJsonNull()) {
        JsonArray jsonArraydeals = jsonObj.getAsJsonArray("deals");
        if (jsonArraydeals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deals` to be an array in the JSON string but got `%s`", jsonObj.get("deals").toString()));
          }

          // validate the optional field `deals` (array)
          for (int i = 0; i < jsonArraydeals.size(); i++) {
            Deal.validateJsonElement(jsonArraydeals.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("lastUpdaterOrCommentorRole") != null && !jsonObj.get("lastUpdaterOrCommentorRole").isJsonNull()) && !jsonObj.get("lastUpdaterOrCommentorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdaterOrCommentorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdaterOrCommentorRole").toString()));
      }
      // validate the optional field `lastUpdaterOrCommentorRole`
      if (jsonObj.get("lastUpdaterOrCommentorRole") != null && !jsonObj.get("lastUpdaterOrCommentorRole").isJsonNull()) {
        LastUpdaterOrCommentorRoleEnum.validateJsonElement(jsonObj.get("lastUpdaterOrCommentorRole"));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        JsonArray jsonArraynotes = jsonObj.getAsJsonArray("notes");
        if (jsonArraynotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notes` to be an array in the JSON string but got `%s`", jsonObj.get("notes").toString()));
          }

          // validate the optional field `notes` (array)
          for (int i = 0; i < jsonArraynotes.size(); i++) {
            Note.validateJsonElement(jsonArraynotes.get(i));
          };
        }
      }
      if ((jsonObj.get("originatorRole") != null && !jsonObj.get("originatorRole").isJsonNull()) && !jsonObj.get("originatorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorRole").toString()));
      }
      // validate the optional field `originatorRole`
      if (jsonObj.get("originatorRole") != null && !jsonObj.get("originatorRole").isJsonNull()) {
        OriginatorRoleEnum.validateJsonElement(jsonObj.get("originatorRole"));
      }
      if ((jsonObj.get("privateAuctionId") != null && !jsonObj.get("privateAuctionId").isJsonNull()) && !jsonObj.get("privateAuctionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateAuctionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateAuctionId").toString()));
      }
      if ((jsonObj.get("proposalId") != null && !jsonObj.get("proposalId").isJsonNull()) && !jsonObj.get("proposalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalId").toString()));
      }
      if ((jsonObj.get("proposalRevision") != null && !jsonObj.get("proposalRevision").isJsonNull()) && !jsonObj.get("proposalRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalRevision").toString()));
      }
      if ((jsonObj.get("proposalState") != null && !jsonObj.get("proposalState").isJsonNull()) && !jsonObj.get("proposalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalState").toString()));
      }
      // validate the optional field `proposalState`
      if (jsonObj.get("proposalState") != null && !jsonObj.get("proposalState").isJsonNull()) {
        ProposalStateEnum.validateJsonElement(jsonObj.get("proposalState"));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      if (jsonObj.get("sellerContacts") != null && !jsonObj.get("sellerContacts").isJsonNull()) {
        JsonArray jsonArraysellerContacts = jsonObj.getAsJsonArray("sellerContacts");
        if (jsonArraysellerContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sellerContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sellerContacts` to be an array in the JSON string but got `%s`", jsonObj.get("sellerContacts").toString()));
          }

          // validate the optional field `sellerContacts` (array)
          for (int i = 0; i < jsonArraysellerContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraysellerContacts.get(i));
          };
        }
      }
      if ((jsonObj.get("termsAndConditions") != null && !jsonObj.get("termsAndConditions").isJsonNull()) && !jsonObj.get("termsAndConditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsAndConditions").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Proposal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Proposal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Proposal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Proposal.class));

       return (TypeAdapter<T>) new TypeAdapter<Proposal>() {
           @Override
           public void write(JsonWriter out, Proposal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Proposal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Proposal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Proposal
   * @throws IOException if the JSON string is invalid with respect to Proposal
   */
  public static Proposal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Proposal.class);
  }

  /**
   * Convert an instance of Proposal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

