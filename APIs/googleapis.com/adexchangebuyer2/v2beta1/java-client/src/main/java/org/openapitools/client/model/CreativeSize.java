/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Size;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the size of the creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeSize {
  /**
   * Gets or Sets allowedFormats
   */
  @JsonAdapter(AllowedFormatsEnum.Adapter.class)
  public enum AllowedFormatsEnum {
    UNKNOWN("UNKNOWN"),
    
    AUDIO("AUDIO");

    private String value;

    AllowedFormatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedFormatsEnum fromValue(String value) {
      for (AllowedFormatsEnum b : AllowedFormatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedFormatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedFormatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedFormatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedFormatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedFormatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_FORMATS = "allowedFormats";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FORMATS)
  private List<AllowedFormatsEnum> allowedFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANION_SIZES = "companionSizes";
  @SerializedName(SERIALIZED_NAME_COMPANION_SIZES)
  private List<Size> companionSizes = new ArrayList<>();

  /**
   * The creative size type.
   */
  @JsonAdapter(CreativeSizeTypeEnum.Adapter.class)
  public enum CreativeSizeTypeEnum {
    CREATIVE_SIZE_TYPE_UNSPECIFIED("CREATIVE_SIZE_TYPE_UNSPECIFIED"),
    
    REGULAR("REGULAR"),
    
    INTERSTITIAL("INTERSTITIAL"),
    
    VIDEO("VIDEO"),
    
    NATIVE("NATIVE");

    private String value;

    CreativeSizeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeSizeTypeEnum fromValue(String value) {
      for (CreativeSizeTypeEnum b : CreativeSizeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeSizeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeSizeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeSizeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeSizeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeSizeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_SIZE_TYPE = "creativeSizeType";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SIZE_TYPE)
  private CreativeSizeTypeEnum creativeSizeType;

  /**
   * Output only. The native template for this creative. It will have a value only if creative_size_type &#x3D; CreativeSizeType.NATIVE.
   */
  @JsonAdapter(NativeTemplateEnum.Adapter.class)
  public enum NativeTemplateEnum {
    UNKNOWN_NATIVE_TEMPLATE("UNKNOWN_NATIVE_TEMPLATE"),
    
    NATIVE_CONTENT_AD("NATIVE_CONTENT_AD"),
    
    NATIVE_APP_INSTALL_AD("NATIVE_APP_INSTALL_AD"),
    
    NATIVE_VIDEO_CONTENT_AD("NATIVE_VIDEO_CONTENT_AD"),
    
    NATIVE_VIDEO_APP_INSTALL_AD("NATIVE_VIDEO_APP_INSTALL_AD");

    private String value;

    NativeTemplateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NativeTemplateEnum fromValue(String value) {
      for (NativeTemplateEnum b : NativeTemplateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NativeTemplateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NativeTemplateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NativeTemplateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NativeTemplateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NativeTemplateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NATIVE_TEMPLATE = "nativeTemplate";
  @SerializedName(SERIALIZED_NAME_NATIVE_TEMPLATE)
  private NativeTemplateEnum nativeTemplate;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  /**
   * The type of skippable ad for this creative. It will have a value only if creative_size_type &#x3D; CreativeSizeType.VIDEO.
   */
  @JsonAdapter(SkippableAdTypeEnum.Adapter.class)
  public enum SkippableAdTypeEnum {
    SKIPPABLE_AD_TYPE_UNSPECIFIED("SKIPPABLE_AD_TYPE_UNSPECIFIED"),
    
    GENERIC("GENERIC"),
    
    INSTREAM_SELECT("INSTREAM_SELECT"),
    
    NOT_SKIPPABLE("NOT_SKIPPABLE");

    private String value;

    SkippableAdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkippableAdTypeEnum fromValue(String value) {
      for (SkippableAdTypeEnum b : SkippableAdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkippableAdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkippableAdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkippableAdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkippableAdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkippableAdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKIPPABLE_AD_TYPE = "skippableAdType";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE_AD_TYPE)
  private SkippableAdTypeEnum skippableAdType;

  public CreativeSize() {
  }

  public CreativeSize allowedFormats(List<AllowedFormatsEnum> allowedFormats) {
    this.allowedFormats = allowedFormats;
    return this;
  }

  public CreativeSize addAllowedFormatsItem(AllowedFormatsEnum allowedFormatsItem) {
    if (this.allowedFormats == null) {
      this.allowedFormats = new ArrayList<>();
    }
    this.allowedFormats.add(allowedFormatsItem);
    return this;
  }

  /**
   * What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the publisher only allows an audio ad (without any video).
   * @return allowedFormats
   */
  @javax.annotation.Nullable
  public List<AllowedFormatsEnum> getAllowedFormats() {
    return allowedFormats;
  }

  public void setAllowedFormats(List<AllowedFormatsEnum> allowedFormats) {
    this.allowedFormats = allowedFormats;
  }


  public CreativeSize companionSizes(List<Size> companionSizes) {
    this.companionSizes = companionSizes;
    return this;
  }

  public CreativeSize addCompanionSizesItem(Size companionSizesItem) {
    if (this.companionSizes == null) {
      this.companionSizes = new ArrayList<>();
    }
    this.companionSizes.add(companionSizesItem);
    return this;
  }

  /**
   * For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type &#x3D; VIDEO
   * @return companionSizes
   */
  @javax.annotation.Nullable
  public List<Size> getCompanionSizes() {
    return companionSizes;
  }

  public void setCompanionSizes(List<Size> companionSizes) {
    this.companionSizes = companionSizes;
  }


  public CreativeSize creativeSizeType(CreativeSizeTypeEnum creativeSizeType) {
    this.creativeSizeType = creativeSizeType;
    return this;
  }

  /**
   * The creative size type.
   * @return creativeSizeType
   */
  @javax.annotation.Nullable
  public CreativeSizeTypeEnum getCreativeSizeType() {
    return creativeSizeType;
  }

  public void setCreativeSizeType(CreativeSizeTypeEnum creativeSizeType) {
    this.creativeSizeType = creativeSizeType;
  }


  public CreativeSize nativeTemplate(NativeTemplateEnum nativeTemplate) {
    this.nativeTemplate = nativeTemplate;
    return this;
  }

  /**
   * Output only. The native template for this creative. It will have a value only if creative_size_type &#x3D; CreativeSizeType.NATIVE.
   * @return nativeTemplate
   */
  @javax.annotation.Nullable
  public NativeTemplateEnum getNativeTemplate() {
    return nativeTemplate;
  }

  public void setNativeTemplate(NativeTemplateEnum nativeTemplate) {
    this.nativeTemplate = nativeTemplate;
  }


  public CreativeSize size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public CreativeSize skippableAdType(SkippableAdTypeEnum skippableAdType) {
    this.skippableAdType = skippableAdType;
    return this;
  }

  /**
   * The type of skippable ad for this creative. It will have a value only if creative_size_type &#x3D; CreativeSizeType.VIDEO.
   * @return skippableAdType
   */
  @javax.annotation.Nullable
  public SkippableAdTypeEnum getSkippableAdType() {
    return skippableAdType;
  }

  public void setSkippableAdType(SkippableAdTypeEnum skippableAdType) {
    this.skippableAdType = skippableAdType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeSize creativeSize = (CreativeSize) o;
    return Objects.equals(this.allowedFormats, creativeSize.allowedFormats) &&
        Objects.equals(this.companionSizes, creativeSize.companionSizes) &&
        Objects.equals(this.creativeSizeType, creativeSize.creativeSizeType) &&
        Objects.equals(this.nativeTemplate, creativeSize.nativeTemplate) &&
        Objects.equals(this.size, creativeSize.size) &&
        Objects.equals(this.skippableAdType, creativeSize.skippableAdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFormats, companionSizes, creativeSizeType, nativeTemplate, size, skippableAdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeSize {\n");
    sb.append("    allowedFormats: ").append(toIndentedString(allowedFormats)).append("\n");
    sb.append("    companionSizes: ").append(toIndentedString(companionSizes)).append("\n");
    sb.append("    creativeSizeType: ").append(toIndentedString(creativeSizeType)).append("\n");
    sb.append("    nativeTemplate: ").append(toIndentedString(nativeTemplate)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    skippableAdType: ").append(toIndentedString(skippableAdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedFormats");
    openapiFields.add("companionSizes");
    openapiFields.add("creativeSizeType");
    openapiFields.add("nativeTemplate");
    openapiFields.add("size");
    openapiFields.add("skippableAdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeSize is not found in the empty JSON string", CreativeSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedFormats") != null && !jsonObj.get("allowedFormats").isJsonNull() && !jsonObj.get("allowedFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedFormats` to be an array in the JSON string but got `%s`", jsonObj.get("allowedFormats").toString()));
      }
      if (jsonObj.get("companionSizes") != null && !jsonObj.get("companionSizes").isJsonNull()) {
        JsonArray jsonArraycompanionSizes = jsonObj.getAsJsonArray("companionSizes");
        if (jsonArraycompanionSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("companionSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `companionSizes` to be an array in the JSON string but got `%s`", jsonObj.get("companionSizes").toString()));
          }

          // validate the optional field `companionSizes` (array)
          for (int i = 0; i < jsonArraycompanionSizes.size(); i++) {
            Size.validateJsonElement(jsonArraycompanionSizes.get(i));
          };
        }
      }
      if ((jsonObj.get("creativeSizeType") != null && !jsonObj.get("creativeSizeType").isJsonNull()) && !jsonObj.get("creativeSizeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeSizeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeSizeType").toString()));
      }
      // validate the optional field `creativeSizeType`
      if (jsonObj.get("creativeSizeType") != null && !jsonObj.get("creativeSizeType").isJsonNull()) {
        CreativeSizeTypeEnum.validateJsonElement(jsonObj.get("creativeSizeType"));
      }
      if ((jsonObj.get("nativeTemplate") != null && !jsonObj.get("nativeTemplate").isJsonNull()) && !jsonObj.get("nativeTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nativeTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nativeTemplate").toString()));
      }
      // validate the optional field `nativeTemplate`
      if (jsonObj.get("nativeTemplate") != null && !jsonObj.get("nativeTemplate").isJsonNull()) {
        NativeTemplateEnum.validateJsonElement(jsonObj.get("nativeTemplate"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) && !jsonObj.get("skippableAdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skippableAdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skippableAdType").toString()));
      }
      // validate the optional field `skippableAdType`
      if (jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) {
        SkippableAdTypeEnum.validateJsonElement(jsonObj.get("skippableAdType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeSize.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeSize>() {
           @Override
           public void write(JsonWriter out, CreativeSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeSize
   * @throws IOException if the JSON string is invalid with respect to CreativeSize
   */
  public static CreativeSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeSize.class);
  }

  /**
   * Convert an instance of CreativeSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

