/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppContext;
import org.openapitools.client.model.AuctionContext;
import org.openapitools.client.model.LocationContext;
import org.openapitools.client.model.PlatformContext;
import org.openapitools.client.model.SecurityContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The serving context for this restriction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServingContext {
  /**
   * Matches all contexts.
   */
  @JsonAdapter(AllEnum.Adapter.class)
  public enum AllEnum {
    SIMPLE_CONTEXT("SIMPLE_CONTEXT");

    private String value;

    AllEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllEnum fromValue(String value) {
      for (AllEnum b : AllEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALL = "all";
  @SerializedName(SERIALIZED_NAME_ALL)
  private AllEnum all;

  public static final String SERIALIZED_NAME_APP_TYPE = "appType";
  @SerializedName(SERIALIZED_NAME_APP_TYPE)
  private AppContext appType;

  public static final String SERIALIZED_NAME_AUCTION_TYPE = "auctionType";
  @SerializedName(SERIALIZED_NAME_AUCTION_TYPE)
  private AuctionContext auctionType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationContext location;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformContext platform;

  public static final String SERIALIZED_NAME_SECURITY_TYPE = "securityType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SECURITY_TYPE)
  private SecurityContext securityType;

  public ServingContext() {
  }

  public ServingContext all(AllEnum all) {
    this.all = all;
    return this;
  }

  /**
   * Matches all contexts.
   * @return all
   */
  @javax.annotation.Nullable
  public AllEnum getAll() {
    return all;
  }

  public void setAll(AllEnum all) {
    this.all = all;
  }


  public ServingContext appType(AppContext appType) {
    this.appType = appType;
    return this;
  }

  /**
   * Get appType
   * @return appType
   */
  @javax.annotation.Nullable
  public AppContext getAppType() {
    return appType;
  }

  public void setAppType(AppContext appType) {
    this.appType = appType;
  }


  public ServingContext auctionType(AuctionContext auctionType) {
    this.auctionType = auctionType;
    return this;
  }

  /**
   * Get auctionType
   * @return auctionType
   */
  @javax.annotation.Nullable
  public AuctionContext getAuctionType() {
    return auctionType;
  }

  public void setAuctionType(AuctionContext auctionType) {
    this.auctionType = auctionType;
  }


  public ServingContext location(LocationContext location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public LocationContext getLocation() {
    return location;
  }

  public void setLocation(LocationContext location) {
    this.location = location;
  }


  public ServingContext platform(PlatformContext platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformContext getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformContext platform) {
    this.platform = platform;
  }


  @Deprecated
  public ServingContext securityType(SecurityContext securityType) {
    this.securityType = securityType;
    return this;
  }

  /**
   * Get securityType
   * @return securityType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public SecurityContext getSecurityType() {
    return securityType;
  }

  @Deprecated
  public void setSecurityType(SecurityContext securityType) {
    this.securityType = securityType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServingContext servingContext = (ServingContext) o;
    return Objects.equals(this.all, servingContext.all) &&
        Objects.equals(this.appType, servingContext.appType) &&
        Objects.equals(this.auctionType, servingContext.auctionType) &&
        Objects.equals(this.location, servingContext.location) &&
        Objects.equals(this.platform, servingContext.platform) &&
        Objects.equals(this.securityType, servingContext.securityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, appType, auctionType, location, platform, securityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServingContext {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    auctionType: ").append(toIndentedString(auctionType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all");
    openapiFields.add("appType");
    openapiFields.add("auctionType");
    openapiFields.add("location");
    openapiFields.add("platform");
    openapiFields.add("securityType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServingContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServingContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServingContext is not found in the empty JSON string", ServingContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServingContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServingContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("all") != null && !jsonObj.get("all").isJsonNull()) && !jsonObj.get("all").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `all` to be a primitive type in the JSON string but got `%s`", jsonObj.get("all").toString()));
      }
      // validate the optional field `all`
      if (jsonObj.get("all") != null && !jsonObj.get("all").isJsonNull()) {
        AllEnum.validateJsonElement(jsonObj.get("all"));
      }
      // validate the optional field `appType`
      if (jsonObj.get("appType") != null && !jsonObj.get("appType").isJsonNull()) {
        AppContext.validateJsonElement(jsonObj.get("appType"));
      }
      // validate the optional field `auctionType`
      if (jsonObj.get("auctionType") != null && !jsonObj.get("auctionType").isJsonNull()) {
        AuctionContext.validateJsonElement(jsonObj.get("auctionType"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationContext.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformContext.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `securityType`
      if (jsonObj.get("securityType") != null && !jsonObj.get("securityType").isJsonNull()) {
        SecurityContext.validateJsonElement(jsonObj.get("securityType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServingContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServingContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServingContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServingContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ServingContext>() {
           @Override
           public void write(JsonWriter out, ServingContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServingContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServingContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServingContext
   * @throws IOException if the JSON string is invalid with respect to ServingContext
   */
  public static ServingContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServingContext.class);
  }

  /**
   * Convert an instance of ServingContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

