/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactInformation;
import org.openapitools.client.model.DealTerms;
import org.openapitools.client.model.Seller;
import org.openapitools.client.model.TargetingCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A product is a segment of inventory that a seller wants to sell. It is associated with certain terms and targeting information which helps the buyer know more about the inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_AVAILABLE_END_TIME = "availableEndTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_END_TIME)
  private String availableEndTime;

  public static final String SERIALIZED_NAME_AVAILABLE_START_TIME = "availableStartTime";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_START_TIME)
  private String availableStartTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATOR_CONTACTS = "creatorContacts";
  @SerializedName(SERIALIZED_NAME_CREATOR_CONTACTS)
  private List<ContactInformation> creatorContacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HAS_CREATOR_SIGNED_OFF = "hasCreatorSignedOff";
  @SerializedName(SERIALIZED_NAME_HAS_CREATOR_SIGNED_OFF)
  private Boolean hasCreatorSignedOff;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_REVISION = "productRevision";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REVISION)
  private String productRevision;

  public static final String SERIALIZED_NAME_PUBLISHER_PROFILE_ID = "publisherProfileId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_PROFILE_ID)
  private String publisherProfileId;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  /**
   * The syndication product associated with the deal.
   */
  @JsonAdapter(SyndicationProductEnum.Adapter.class)
  public enum SyndicationProductEnum {
    SYNDICATION_PRODUCT_UNSPECIFIED("SYNDICATION_PRODUCT_UNSPECIFIED"),
    
    CONTENT("CONTENT"),
    
    MOBILE("MOBILE"),
    
    VIDEO("VIDEO"),
    
    GAMES("GAMES");

    private String value;

    SyndicationProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyndicationProductEnum fromValue(String value) {
      for (SyndicationProductEnum b : SyndicationProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyndicationProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyndicationProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyndicationProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyndicationProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyndicationProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNDICATION_PRODUCT = "syndicationProduct";
  @SerializedName(SERIALIZED_NAME_SYNDICATION_PRODUCT)
  private SyndicationProductEnum syndicationProduct;

  public static final String SERIALIZED_NAME_TARGETING_CRITERION = "targetingCriterion";
  @SerializedName(SERIALIZED_NAME_TARGETING_CRITERION)
  private List<TargetingCriteria> targetingCriterion = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private DealTerms terms;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_CODE = "webPropertyCode";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_CODE)
  private String webPropertyCode;

  public Product() {
  }

  public Product availableEndTime(String availableEndTime) {
    this.availableEndTime = availableEndTime;
    return this;
  }

  /**
   * The proposed end time for the deal. The field will be truncated to the order of seconds during serving.
   * @return availableEndTime
   */
  @javax.annotation.Nullable
  public String getAvailableEndTime() {
    return availableEndTime;
  }

  public void setAvailableEndTime(String availableEndTime) {
    this.availableEndTime = availableEndTime;
  }


  public Product availableStartTime(String availableStartTime) {
    this.availableStartTime = availableStartTime;
    return this;
  }

  /**
   * Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when serving.
   * @return availableStartTime
   */
  @javax.annotation.Nullable
  public String getAvailableStartTime() {
    return availableStartTime;
  }

  public void setAvailableStartTime(String availableStartTime) {
    this.availableStartTime = availableStartTime;
  }


  public Product createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Creation time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Product creatorContacts(List<ContactInformation> creatorContacts) {
    this.creatorContacts = creatorContacts;
    return this;
  }

  public Product addCreatorContactsItem(ContactInformation creatorContactsItem) {
    if (this.creatorContacts == null) {
      this.creatorContacts = new ArrayList<>();
    }
    this.creatorContacts.add(creatorContactsItem);
    return this;
  }

  /**
   * Optional contact information for the creator of this product.
   * @return creatorContacts
   */
  @javax.annotation.Nullable
  public List<ContactInformation> getCreatorContacts() {
    return creatorContacts;
  }

  public void setCreatorContacts(List<ContactInformation> creatorContacts) {
    this.creatorContacts = creatorContacts;
  }


  public Product displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for this product as set by the seller.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Product hasCreatorSignedOff(Boolean hasCreatorSignedOff) {
    this.hasCreatorSignedOff = hasCreatorSignedOff;
    return this;
  }

  /**
   * If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
   * @return hasCreatorSignedOff
   */
  @javax.annotation.Nullable
  public Boolean getHasCreatorSignedOff() {
    return hasCreatorSignedOff;
  }

  public void setHasCreatorSignedOff(Boolean hasCreatorSignedOff) {
    this.hasCreatorSignedOff = hasCreatorSignedOff;
  }


  public Product productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The unique ID for the product.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Product productRevision(String productRevision) {
    this.productRevision = productRevision;
    return this;
  }

  /**
   * The revision number of the product (auto-assigned by Marketplace).
   * @return productRevision
   */
  @javax.annotation.Nullable
  public String getProductRevision() {
    return productRevision;
  }

  public void setProductRevision(String productRevision) {
    this.productRevision = productRevision;
  }


  public Product publisherProfileId(String publisherProfileId) {
    this.publisherProfileId = publisherProfileId;
    return this;
  }

  /**
   * An ID which can be used by the Publisher Profile API to get more information about the seller that created this product.
   * @return publisherProfileId
   */
  @javax.annotation.Nullable
  public String getPublisherProfileId() {
    return publisherProfileId;
  }

  public void setPublisherProfileId(String publisherProfileId) {
    this.publisherProfileId = publisherProfileId;
  }


  public Product seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  public Product syndicationProduct(SyndicationProductEnum syndicationProduct) {
    this.syndicationProduct = syndicationProduct;
    return this;
  }

  /**
   * The syndication product associated with the deal.
   * @return syndicationProduct
   */
  @javax.annotation.Nullable
  public SyndicationProductEnum getSyndicationProduct() {
    return syndicationProduct;
  }

  public void setSyndicationProduct(SyndicationProductEnum syndicationProduct) {
    this.syndicationProduct = syndicationProduct;
  }


  public Product targetingCriterion(List<TargetingCriteria> targetingCriterion) {
    this.targetingCriterion = targetingCriterion;
    return this;
  }

  public Product addTargetingCriterionItem(TargetingCriteria targetingCriterionItem) {
    if (this.targetingCriterion == null) {
      this.targetingCriterion = new ArrayList<>();
    }
    this.targetingCriterion.add(targetingCriterionItem);
    return this;
  }

  /**
   * Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values.
   * @return targetingCriterion
   */
  @javax.annotation.Nullable
  public List<TargetingCriteria> getTargetingCriterion() {
    return targetingCriterion;
  }

  public void setTargetingCriterion(List<TargetingCriteria> targetingCriterion) {
    this.targetingCriterion = targetingCriterion;
  }


  public Product terms(DealTerms terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Get terms
   * @return terms
   */
  @javax.annotation.Nullable
  public DealTerms getTerms() {
    return terms;
  }

  public void setTerms(DealTerms terms) {
    this.terms = terms;
  }


  public Product updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Time of last update.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public Product webPropertyCode(String webPropertyCode) {
    this.webPropertyCode = webPropertyCode;
    return this;
  }

  /**
   * The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal.
   * @return webPropertyCode
   */
  @javax.annotation.Nullable
  public String getWebPropertyCode() {
    return webPropertyCode;
  }

  public void setWebPropertyCode(String webPropertyCode) {
    this.webPropertyCode = webPropertyCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.availableEndTime, product.availableEndTime) &&
        Objects.equals(this.availableStartTime, product.availableStartTime) &&
        Objects.equals(this.createTime, product.createTime) &&
        Objects.equals(this.creatorContacts, product.creatorContacts) &&
        Objects.equals(this.displayName, product.displayName) &&
        Objects.equals(this.hasCreatorSignedOff, product.hasCreatorSignedOff) &&
        Objects.equals(this.productId, product.productId) &&
        Objects.equals(this.productRevision, product.productRevision) &&
        Objects.equals(this.publisherProfileId, product.publisherProfileId) &&
        Objects.equals(this.seller, product.seller) &&
        Objects.equals(this.syndicationProduct, product.syndicationProduct) &&
        Objects.equals(this.targetingCriterion, product.targetingCriterion) &&
        Objects.equals(this.terms, product.terms) &&
        Objects.equals(this.updateTime, product.updateTime) &&
        Objects.equals(this.webPropertyCode, product.webPropertyCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableEndTime, availableStartTime, createTime, creatorContacts, displayName, hasCreatorSignedOff, productId, productRevision, publisherProfileId, seller, syndicationProduct, targetingCriterion, terms, updateTime, webPropertyCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    availableEndTime: ").append(toIndentedString(availableEndTime)).append("\n");
    sb.append("    availableStartTime: ").append(toIndentedString(availableStartTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creatorContacts: ").append(toIndentedString(creatorContacts)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    hasCreatorSignedOff: ").append(toIndentedString(hasCreatorSignedOff)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productRevision: ").append(toIndentedString(productRevision)).append("\n");
    sb.append("    publisherProfileId: ").append(toIndentedString(publisherProfileId)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    syndicationProduct: ").append(toIndentedString(syndicationProduct)).append("\n");
    sb.append("    targetingCriterion: ").append(toIndentedString(targetingCriterion)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    webPropertyCode: ").append(toIndentedString(webPropertyCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableEndTime");
    openapiFields.add("availableStartTime");
    openapiFields.add("createTime");
    openapiFields.add("creatorContacts");
    openapiFields.add("displayName");
    openapiFields.add("hasCreatorSignedOff");
    openapiFields.add("productId");
    openapiFields.add("productRevision");
    openapiFields.add("publisherProfileId");
    openapiFields.add("seller");
    openapiFields.add("syndicationProduct");
    openapiFields.add("targetingCriterion");
    openapiFields.add("terms");
    openapiFields.add("updateTime");
    openapiFields.add("webPropertyCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availableEndTime") != null && !jsonObj.get("availableEndTime").isJsonNull()) && !jsonObj.get("availableEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableEndTime").toString()));
      }
      if ((jsonObj.get("availableStartTime") != null && !jsonObj.get("availableStartTime").isJsonNull()) && !jsonObj.get("availableStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availableStartTime").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if (jsonObj.get("creatorContacts") != null && !jsonObj.get("creatorContacts").isJsonNull()) {
        JsonArray jsonArraycreatorContacts = jsonObj.getAsJsonArray("creatorContacts");
        if (jsonArraycreatorContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creatorContacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creatorContacts` to be an array in the JSON string but got `%s`", jsonObj.get("creatorContacts").toString()));
          }

          // validate the optional field `creatorContacts` (array)
          for (int i = 0; i < jsonArraycreatorContacts.size(); i++) {
            ContactInformation.validateJsonElement(jsonArraycreatorContacts.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productRevision") != null && !jsonObj.get("productRevision").isJsonNull()) && !jsonObj.get("productRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productRevision").toString()));
      }
      if ((jsonObj.get("publisherProfileId") != null && !jsonObj.get("publisherProfileId").isJsonNull()) && !jsonObj.get("publisherProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherProfileId").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      if ((jsonObj.get("syndicationProduct") != null && !jsonObj.get("syndicationProduct").isJsonNull()) && !jsonObj.get("syndicationProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syndicationProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syndicationProduct").toString()));
      }
      // validate the optional field `syndicationProduct`
      if (jsonObj.get("syndicationProduct") != null && !jsonObj.get("syndicationProduct").isJsonNull()) {
        SyndicationProductEnum.validateJsonElement(jsonObj.get("syndicationProduct"));
      }
      if (jsonObj.get("targetingCriterion") != null && !jsonObj.get("targetingCriterion").isJsonNull()) {
        JsonArray jsonArraytargetingCriterion = jsonObj.getAsJsonArray("targetingCriterion");
        if (jsonArraytargetingCriterion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetingCriterion").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetingCriterion` to be an array in the JSON string but got `%s`", jsonObj.get("targetingCriterion").toString()));
          }

          // validate the optional field `targetingCriterion` (array)
          for (int i = 0; i < jsonArraytargetingCriterion.size(); i++) {
            TargetingCriteria.validateJsonElement(jsonArraytargetingCriterion.get(i));
          };
        }
      }
      // validate the optional field `terms`
      if (jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonNull()) {
        DealTerms.validateJsonElement(jsonObj.get("terms"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("webPropertyCode") != null && !jsonObj.get("webPropertyCode").isJsonNull()) && !jsonObj.get("webPropertyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

