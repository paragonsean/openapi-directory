/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetricValue;
import org.openapitools.client.model.RowDimensions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The number of filtered bids with the specified dimension values, among those filtered due to the requested filtering reason (for example, creative status), that have the specified detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilteredBidDetailRow {
  public static final String SERIALIZED_NAME_BID_COUNT = "bidCount";
  @SerializedName(SERIALIZED_NAME_BID_COUNT)
  private MetricValue bidCount;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_DETAIL_ID = "detailId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DETAIL_ID)
  private Integer detailId;

  public static final String SERIALIZED_NAME_ROW_DIMENSIONS = "rowDimensions";
  @SerializedName(SERIALIZED_NAME_ROW_DIMENSIONS)
  private RowDimensions rowDimensions;

  public FilteredBidDetailRow() {
  }

  public FilteredBidDetailRow bidCount(MetricValue bidCount) {
    this.bidCount = bidCount;
    return this;
  }

  /**
   * Get bidCount
   * @return bidCount
   */
  @javax.annotation.Nullable
  public MetricValue getBidCount() {
    return bidCount;
  }

  public void setBidCount(MetricValue bidCount) {
    this.bidCount = bidCount;
  }


  public FilteredBidDetailRow detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * The ID of the detail, can be numeric or text. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  @Deprecated
  public FilteredBidDetailRow detailId(Integer detailId) {
    this.detailId = detailId;
    return this;
  }

  /**
   * Note: this field will be deprecated, use \&quot;detail\&quot; field instead. When \&quot;detail\&quot; field represents an integer value, this field is populated as the same integer value \&quot;detail\&quot; field represents, otherwise this field will be 0. The ID of the detail. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message.
   * @return detailId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getDetailId() {
    return detailId;
  }

  @Deprecated
  public void setDetailId(Integer detailId) {
    this.detailId = detailId;
  }


  public FilteredBidDetailRow rowDimensions(RowDimensions rowDimensions) {
    this.rowDimensions = rowDimensions;
    return this;
  }

  /**
   * Get rowDimensions
   * @return rowDimensions
   */
  @javax.annotation.Nullable
  public RowDimensions getRowDimensions() {
    return rowDimensions;
  }

  public void setRowDimensions(RowDimensions rowDimensions) {
    this.rowDimensions = rowDimensions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilteredBidDetailRow filteredBidDetailRow = (FilteredBidDetailRow) o;
    return Objects.equals(this.bidCount, filteredBidDetailRow.bidCount) &&
        Objects.equals(this.detail, filteredBidDetailRow.detail) &&
        Objects.equals(this.detailId, filteredBidDetailRow.detailId) &&
        Objects.equals(this.rowDimensions, filteredBidDetailRow.rowDimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidCount, detail, detailId, rowDimensions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilteredBidDetailRow {\n");
    sb.append("    bidCount: ").append(toIndentedString(bidCount)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    detailId: ").append(toIndentedString(detailId)).append("\n");
    sb.append("    rowDimensions: ").append(toIndentedString(rowDimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidCount");
    openapiFields.add("detail");
    openapiFields.add("detailId");
    openapiFields.add("rowDimensions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilteredBidDetailRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilteredBidDetailRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilteredBidDetailRow is not found in the empty JSON string", FilteredBidDetailRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilteredBidDetailRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilteredBidDetailRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bidCount`
      if (jsonObj.get("bidCount") != null && !jsonObj.get("bidCount").isJsonNull()) {
        MetricValue.validateJsonElement(jsonObj.get("bidCount"));
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      // validate the optional field `rowDimensions`
      if (jsonObj.get("rowDimensions") != null && !jsonObj.get("rowDimensions").isJsonNull()) {
        RowDimensions.validateJsonElement(jsonObj.get("rowDimensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilteredBidDetailRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilteredBidDetailRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilteredBidDetailRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilteredBidDetailRow.class));

       return (TypeAdapter<T>) new TypeAdapter<FilteredBidDetailRow>() {
           @Override
           public void write(JsonWriter out, FilteredBidDetailRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilteredBidDetailRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilteredBidDetailRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilteredBidDetailRow
   * @throws IOException if the JSON string is invalid with respect to FilteredBidDetailRow
   */
  public static FilteredBidDetailRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilteredBidDetailRow.class);
  }

  /**
   * Convert an instance of FilteredBidDetailRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

