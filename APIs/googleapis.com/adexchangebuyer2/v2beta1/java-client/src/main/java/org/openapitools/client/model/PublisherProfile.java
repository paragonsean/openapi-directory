/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublisherProfileMobileApplication;
import org.openapitools.client.model.Seller;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a publisher profile (https://support.google.com/admanager/answer/6035806) in Marketplace. All fields are read only. All string fields are free-form text entered by the publisher unless noted otherwise.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublisherProfile {
  public static final String SERIALIZED_NAME_AUDIENCE_DESCRIPTION = "audienceDescription";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_DESCRIPTION)
  private String audienceDescription;

  public static final String SERIALIZED_NAME_BUYER_PITCH_STATEMENT = "buyerPitchStatement";
  @SerializedName(SERIALIZED_NAME_BUYER_PITCH_STATEMENT)
  private String buyerPitchStatement;

  public static final String SERIALIZED_NAME_DIRECT_DEALS_CONTACT = "directDealsContact";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEALS_CONTACT)
  private String directDealsContact;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_PLUS_URL = "googlePlusUrl";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PLUS_URL)
  private String googlePlusUrl;

  public static final String SERIALIZED_NAME_IS_PARENT = "isParent";
  @SerializedName(SERIALIZED_NAME_IS_PARENT)
  private Boolean isParent;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_MEDIA_KIT_URL = "mediaKitUrl";
  @SerializedName(SERIALIZED_NAME_MEDIA_KIT_URL)
  private String mediaKitUrl;

  public static final String SERIALIZED_NAME_MOBILE_APPS = "mobileApps";
  @SerializedName(SERIALIZED_NAME_MOBILE_APPS)
  private List<PublisherProfileMobileApplication> mobileApps = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_PROGRAMMATIC_DEALS_CONTACT = "programmaticDealsContact";
  @SerializedName(SERIALIZED_NAME_PROGRAMMATIC_DEALS_CONTACT)
  private String programmaticDealsContact;

  public static final String SERIALIZED_NAME_PUBLISHER_PROFILE_ID = "publisherProfileId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_PROFILE_ID)
  private String publisherProfileId;

  public static final String SERIALIZED_NAME_RATE_CARD_INFO_URL = "rateCardInfoUrl";
  @SerializedName(SERIALIZED_NAME_RATE_CARD_INFO_URL)
  private String rateCardInfoUrl;

  public static final String SERIALIZED_NAME_SAMPLE_PAGE_URL = "samplePageUrl";
  @SerializedName(SERIALIZED_NAME_SAMPLE_PAGE_URL)
  private String samplePageUrl;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private Seller seller;

  public static final String SERIALIZED_NAME_TOP_HEADLINES = "topHeadlines";
  @SerializedName(SERIALIZED_NAME_TOP_HEADLINES)
  private List<String> topHeadlines = new ArrayList<>();

  public PublisherProfile() {
  }

  public PublisherProfile audienceDescription(String audienceDescription) {
    this.audienceDescription = audienceDescription;
    return this;
  }

  /**
   * Description on the publisher&#39;s audience.
   * @return audienceDescription
   */
  @javax.annotation.Nullable
  public String getAudienceDescription() {
    return audienceDescription;
  }

  public void setAudienceDescription(String audienceDescription) {
    this.audienceDescription = audienceDescription;
  }


  public PublisherProfile buyerPitchStatement(String buyerPitchStatement) {
    this.buyerPitchStatement = buyerPitchStatement;
    return this;
  }

  /**
   * Statement explaining what&#39;s unique about publisher&#39;s business, and why buyers should partner with the publisher.
   * @return buyerPitchStatement
   */
  @javax.annotation.Nullable
  public String getBuyerPitchStatement() {
    return buyerPitchStatement;
  }

  public void setBuyerPitchStatement(String buyerPitchStatement) {
    this.buyerPitchStatement = buyerPitchStatement;
  }


  public PublisherProfile directDealsContact(String directDealsContact) {
    this.directDealsContact = directDealsContact;
    return this;
  }

  /**
   * Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
   * @return directDealsContact
   */
  @javax.annotation.Nullable
  public String getDirectDealsContact() {
    return directDealsContact;
  }

  public void setDirectDealsContact(String directDealsContact) {
    this.directDealsContact = directDealsContact;
  }


  public PublisherProfile displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of the publisher profile.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PublisherProfile domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public PublisherProfile addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

  /**
   * The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like \&quot;photos.google.co.uk/123\&quot;, but will instead contain \&quot;google.co.uk\&quot;.
   * @return domains
   */
  @javax.annotation.Nullable
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }


  public PublisherProfile googlePlusUrl(String googlePlusUrl) {
    this.googlePlusUrl = googlePlusUrl;
    return this;
  }

  /**
   * URL to publisher&#39;s Google+ page.
   * @return googlePlusUrl
   */
  @javax.annotation.Nullable
  public String getGooglePlusUrl() {
    return googlePlusUrl;
  }

  public void setGooglePlusUrl(String googlePlusUrl) {
    this.googlePlusUrl = googlePlusUrl;
  }


  public PublisherProfile isParent(Boolean isParent) {
    this.isParent = isParent;
    return this;
  }

  /**
   * Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a portion of inventory. One seller should have only one parent publisher profile, and can have multiple child profiles. Publisher profiles for the same seller will have same value of field google.ads.adexchange.buyer.v2beta1.PublisherProfile.seller. See https://support.google.com/admanager/answer/6035806 for details.
   * @return isParent
   */
  @javax.annotation.Nullable
  public Boolean getIsParent() {
    return isParent;
  }

  public void setIsParent(Boolean isParent) {
    this.isParent = isParent;
  }


  public PublisherProfile logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image.
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public PublisherProfile mediaKitUrl(String mediaKitUrl) {
    this.mediaKitUrl = mediaKitUrl;
    return this;
  }

  /**
   * URL to additional marketing and sales materials.
   * @return mediaKitUrl
   */
  @javax.annotation.Nullable
  public String getMediaKitUrl() {
    return mediaKitUrl;
  }

  public void setMediaKitUrl(String mediaKitUrl) {
    this.mediaKitUrl = mediaKitUrl;
  }


  public PublisherProfile mobileApps(List<PublisherProfileMobileApplication> mobileApps) {
    this.mobileApps = mobileApps;
    return this;
  }

  public PublisherProfile addMobileAppsItem(PublisherProfileMobileApplication mobileAppsItem) {
    if (this.mobileApps == null) {
      this.mobileApps = new ArrayList<>();
    }
    this.mobileApps.add(mobileAppsItem);
    return this;
  }

  /**
   * The list of apps represented in this publisher profile. Empty if this is a parent profile.
   * @return mobileApps
   */
  @javax.annotation.Nullable
  public List<PublisherProfileMobileApplication> getMobileApps() {
    return mobileApps;
  }

  public void setMobileApps(List<PublisherProfileMobileApplication> mobileApps) {
    this.mobileApps = mobileApps;
  }


  public PublisherProfile overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Overview of the publisher.
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public PublisherProfile programmaticDealsContact(String programmaticDealsContact) {
    this.programmaticDealsContact = programmaticDealsContact;
    return this;
  }

  /**
   * Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses.
   * @return programmaticDealsContact
   */
  @javax.annotation.Nullable
  public String getProgrammaticDealsContact() {
    return programmaticDealsContact;
  }

  public void setProgrammaticDealsContact(String programmaticDealsContact) {
    this.programmaticDealsContact = programmaticDealsContact;
  }


  public PublisherProfile publisherProfileId(String publisherProfileId) {
    this.publisherProfileId = publisherProfileId;
    return this;
  }

  /**
   * Unique ID for publisher profile.
   * @return publisherProfileId
   */
  @javax.annotation.Nullable
  public String getPublisherProfileId() {
    return publisherProfileId;
  }

  public void setPublisherProfileId(String publisherProfileId) {
    this.publisherProfileId = publisherProfileId;
  }


  public PublisherProfile rateCardInfoUrl(String rateCardInfoUrl) {
    this.rateCardInfoUrl = rateCardInfoUrl;
    return this;
  }

  /**
   * URL to a publisher rate card.
   * @return rateCardInfoUrl
   */
  @javax.annotation.Nullable
  public String getRateCardInfoUrl() {
    return rateCardInfoUrl;
  }

  public void setRateCardInfoUrl(String rateCardInfoUrl) {
    this.rateCardInfoUrl = rateCardInfoUrl;
  }


  public PublisherProfile samplePageUrl(String samplePageUrl) {
    this.samplePageUrl = samplePageUrl;
    return this;
  }

  /**
   * URL to a sample content page.
   * @return samplePageUrl
   */
  @javax.annotation.Nullable
  public String getSamplePageUrl() {
    return samplePageUrl;
  }

  public void setSamplePageUrl(String samplePageUrl) {
    this.samplePageUrl = samplePageUrl;
  }


  public PublisherProfile seller(Seller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public Seller getSeller() {
    return seller;
  }

  public void setSeller(Seller seller) {
    this.seller = seller;
  }


  public PublisherProfile topHeadlines(List<String> topHeadlines) {
    this.topHeadlines = topHeadlines;
    return this;
  }

  public PublisherProfile addTopHeadlinesItem(String topHeadlinesItem) {
    if (this.topHeadlines == null) {
      this.topHeadlines = new ArrayList<>();
    }
    this.topHeadlines.add(topHeadlinesItem);
    return this;
  }

  /**
   * Up to three key metrics and rankings. Max 100 characters each. For example \&quot;#1 Mobile News Site for 20 Straight Months\&quot;.
   * @return topHeadlines
   */
  @javax.annotation.Nullable
  public List<String> getTopHeadlines() {
    return topHeadlines;
  }

  public void setTopHeadlines(List<String> topHeadlines) {
    this.topHeadlines = topHeadlines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublisherProfile publisherProfile = (PublisherProfile) o;
    return Objects.equals(this.audienceDescription, publisherProfile.audienceDescription) &&
        Objects.equals(this.buyerPitchStatement, publisherProfile.buyerPitchStatement) &&
        Objects.equals(this.directDealsContact, publisherProfile.directDealsContact) &&
        Objects.equals(this.displayName, publisherProfile.displayName) &&
        Objects.equals(this.domains, publisherProfile.domains) &&
        Objects.equals(this.googlePlusUrl, publisherProfile.googlePlusUrl) &&
        Objects.equals(this.isParent, publisherProfile.isParent) &&
        Objects.equals(this.logoUrl, publisherProfile.logoUrl) &&
        Objects.equals(this.mediaKitUrl, publisherProfile.mediaKitUrl) &&
        Objects.equals(this.mobileApps, publisherProfile.mobileApps) &&
        Objects.equals(this.overview, publisherProfile.overview) &&
        Objects.equals(this.programmaticDealsContact, publisherProfile.programmaticDealsContact) &&
        Objects.equals(this.publisherProfileId, publisherProfile.publisherProfileId) &&
        Objects.equals(this.rateCardInfoUrl, publisherProfile.rateCardInfoUrl) &&
        Objects.equals(this.samplePageUrl, publisherProfile.samplePageUrl) &&
        Objects.equals(this.seller, publisherProfile.seller) &&
        Objects.equals(this.topHeadlines, publisherProfile.topHeadlines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audienceDescription, buyerPitchStatement, directDealsContact, displayName, domains, googlePlusUrl, isParent, logoUrl, mediaKitUrl, mobileApps, overview, programmaticDealsContact, publisherProfileId, rateCardInfoUrl, samplePageUrl, seller, topHeadlines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublisherProfile {\n");
    sb.append("    audienceDescription: ").append(toIndentedString(audienceDescription)).append("\n");
    sb.append("    buyerPitchStatement: ").append(toIndentedString(buyerPitchStatement)).append("\n");
    sb.append("    directDealsContact: ").append(toIndentedString(directDealsContact)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    googlePlusUrl: ").append(toIndentedString(googlePlusUrl)).append("\n");
    sb.append("    isParent: ").append(toIndentedString(isParent)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    mediaKitUrl: ").append(toIndentedString(mediaKitUrl)).append("\n");
    sb.append("    mobileApps: ").append(toIndentedString(mobileApps)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    programmaticDealsContact: ").append(toIndentedString(programmaticDealsContact)).append("\n");
    sb.append("    publisherProfileId: ").append(toIndentedString(publisherProfileId)).append("\n");
    sb.append("    rateCardInfoUrl: ").append(toIndentedString(rateCardInfoUrl)).append("\n");
    sb.append("    samplePageUrl: ").append(toIndentedString(samplePageUrl)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    topHeadlines: ").append(toIndentedString(topHeadlines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audienceDescription");
    openapiFields.add("buyerPitchStatement");
    openapiFields.add("directDealsContact");
    openapiFields.add("displayName");
    openapiFields.add("domains");
    openapiFields.add("googlePlusUrl");
    openapiFields.add("isParent");
    openapiFields.add("logoUrl");
    openapiFields.add("mediaKitUrl");
    openapiFields.add("mobileApps");
    openapiFields.add("overview");
    openapiFields.add("programmaticDealsContact");
    openapiFields.add("publisherProfileId");
    openapiFields.add("rateCardInfoUrl");
    openapiFields.add("samplePageUrl");
    openapiFields.add("seller");
    openapiFields.add("topHeadlines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublisherProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublisherProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublisherProfile is not found in the empty JSON string", PublisherProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublisherProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublisherProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audienceDescription") != null && !jsonObj.get("audienceDescription").isJsonNull()) && !jsonObj.get("audienceDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceDescription").toString()));
      }
      if ((jsonObj.get("buyerPitchStatement") != null && !jsonObj.get("buyerPitchStatement").isJsonNull()) && !jsonObj.get("buyerPitchStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyerPitchStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyerPitchStatement").toString()));
      }
      if ((jsonObj.get("directDealsContact") != null && !jsonObj.get("directDealsContact").isJsonNull()) && !jsonObj.get("directDealsContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDealsContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDealsContact").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull() && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      if ((jsonObj.get("googlePlusUrl") != null && !jsonObj.get("googlePlusUrl").isJsonNull()) && !jsonObj.get("googlePlusUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googlePlusUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googlePlusUrl").toString()));
      }
      if ((jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) && !jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
      if ((jsonObj.get("mediaKitUrl") != null && !jsonObj.get("mediaKitUrl").isJsonNull()) && !jsonObj.get("mediaKitUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaKitUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaKitUrl").toString()));
      }
      if (jsonObj.get("mobileApps") != null && !jsonObj.get("mobileApps").isJsonNull()) {
        JsonArray jsonArraymobileApps = jsonObj.getAsJsonArray("mobileApps");
        if (jsonArraymobileApps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mobileApps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mobileApps` to be an array in the JSON string but got `%s`", jsonObj.get("mobileApps").toString()));
          }

          // validate the optional field `mobileApps` (array)
          for (int i = 0; i < jsonArraymobileApps.size(); i++) {
            PublisherProfileMobileApplication.validateJsonElement(jsonArraymobileApps.get(i));
          };
        }
      }
      if ((jsonObj.get("overview") != null && !jsonObj.get("overview").isJsonNull()) && !jsonObj.get("overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overview").toString()));
      }
      if ((jsonObj.get("programmaticDealsContact") != null && !jsonObj.get("programmaticDealsContact").isJsonNull()) && !jsonObj.get("programmaticDealsContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programmaticDealsContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programmaticDealsContact").toString()));
      }
      if ((jsonObj.get("publisherProfileId") != null && !jsonObj.get("publisherProfileId").isJsonNull()) && !jsonObj.get("publisherProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherProfileId").toString()));
      }
      if ((jsonObj.get("rateCardInfoUrl") != null && !jsonObj.get("rateCardInfoUrl").isJsonNull()) && !jsonObj.get("rateCardInfoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateCardInfoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateCardInfoUrl").toString()));
      }
      if ((jsonObj.get("samplePageUrl") != null && !jsonObj.get("samplePageUrl").isJsonNull()) && !jsonObj.get("samplePageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplePageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplePageUrl").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        Seller.validateJsonElement(jsonObj.get("seller"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topHeadlines") != null && !jsonObj.get("topHeadlines").isJsonNull() && !jsonObj.get("topHeadlines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topHeadlines` to be an array in the JSON string but got `%s`", jsonObj.get("topHeadlines").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublisherProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublisherProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublisherProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublisherProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<PublisherProfile>() {
           @Override
           public void write(JsonWriter out, PublisherProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublisherProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublisherProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublisherProfile
   * @throws IOException if the JSON string is invalid with respect to PublisherProfile
   */
  public static PublisherProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublisherProfile.class);
  }

  /**
   * Convert an instance of PublisherProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

