/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the size of an ad unit that can be targeted on an ad request. It only applies to Private Auction, AdX Preferred Deals and Auction Packages. This targeting does not apply to Programmatic Guaranteed and Preferred Deals in Ad Manager.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InventorySizeTargeting {
  public static final String SERIALIZED_NAME_EXCLUDED_INVENTORY_SIZES = "excludedInventorySizes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_INVENTORY_SIZES)
  private List<AdSize> excludedInventorySizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETED_INVENTORY_SIZES = "targetedInventorySizes";
  @SerializedName(SERIALIZED_NAME_TARGETED_INVENTORY_SIZES)
  private List<AdSize> targetedInventorySizes = new ArrayList<>();

  public InventorySizeTargeting() {
  }

  public InventorySizeTargeting excludedInventorySizes(List<AdSize> excludedInventorySizes) {
    this.excludedInventorySizes = excludedInventorySizes;
    return this;
  }

  public InventorySizeTargeting addExcludedInventorySizesItem(AdSize excludedInventorySizesItem) {
    if (this.excludedInventorySizes == null) {
      this.excludedInventorySizes = new ArrayList<>();
    }
    this.excludedInventorySizes.add(excludedInventorySizesItem);
    return this;
  }

  /**
   * A list of inventory sizes to be excluded.
   * @return excludedInventorySizes
   */
  @javax.annotation.Nullable
  public List<AdSize> getExcludedInventorySizes() {
    return excludedInventorySizes;
  }

  public void setExcludedInventorySizes(List<AdSize> excludedInventorySizes) {
    this.excludedInventorySizes = excludedInventorySizes;
  }


  public InventorySizeTargeting targetedInventorySizes(List<AdSize> targetedInventorySizes) {
    this.targetedInventorySizes = targetedInventorySizes;
    return this;
  }

  public InventorySizeTargeting addTargetedInventorySizesItem(AdSize targetedInventorySizesItem) {
    if (this.targetedInventorySizes == null) {
      this.targetedInventorySizes = new ArrayList<>();
    }
    this.targetedInventorySizes.add(targetedInventorySizesItem);
    return this;
  }

  /**
   * A list of inventory sizes to be included.
   * @return targetedInventorySizes
   */
  @javax.annotation.Nullable
  public List<AdSize> getTargetedInventorySizes() {
    return targetedInventorySizes;
  }

  public void setTargetedInventorySizes(List<AdSize> targetedInventorySizes) {
    this.targetedInventorySizes = targetedInventorySizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventorySizeTargeting inventorySizeTargeting = (InventorySizeTargeting) o;
    return Objects.equals(this.excludedInventorySizes, inventorySizeTargeting.excludedInventorySizes) &&
        Objects.equals(this.targetedInventorySizes, inventorySizeTargeting.targetedInventorySizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludedInventorySizes, targetedInventorySizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventorySizeTargeting {\n");
    sb.append("    excludedInventorySizes: ").append(toIndentedString(excludedInventorySizes)).append("\n");
    sb.append("    targetedInventorySizes: ").append(toIndentedString(targetedInventorySizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludedInventorySizes");
    openapiFields.add("targetedInventorySizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InventorySizeTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InventorySizeTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InventorySizeTargeting is not found in the empty JSON string", InventorySizeTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InventorySizeTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InventorySizeTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("excludedInventorySizes") != null && !jsonObj.get("excludedInventorySizes").isJsonNull()) {
        JsonArray jsonArrayexcludedInventorySizes = jsonObj.getAsJsonArray("excludedInventorySizes");
        if (jsonArrayexcludedInventorySizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedInventorySizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedInventorySizes` to be an array in the JSON string but got `%s`", jsonObj.get("excludedInventorySizes").toString()));
          }

          // validate the optional field `excludedInventorySizes` (array)
          for (int i = 0; i < jsonArrayexcludedInventorySizes.size(); i++) {
            AdSize.validateJsonElement(jsonArrayexcludedInventorySizes.get(i));
          };
        }
      }
      if (jsonObj.get("targetedInventorySizes") != null && !jsonObj.get("targetedInventorySizes").isJsonNull()) {
        JsonArray jsonArraytargetedInventorySizes = jsonObj.getAsJsonArray("targetedInventorySizes");
        if (jsonArraytargetedInventorySizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("targetedInventorySizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `targetedInventorySizes` to be an array in the JSON string but got `%s`", jsonObj.get("targetedInventorySizes").toString()));
          }

          // validate the optional field `targetedInventorySizes` (array)
          for (int i = 0; i < jsonArraytargetedInventorySizes.size(); i++) {
            AdSize.validateJsonElement(jsonArraytargetedInventorySizes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InventorySizeTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InventorySizeTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InventorySizeTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InventorySizeTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<InventorySizeTargeting>() {
           @Override
           public void write(JsonWriter out, InventorySizeTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InventorySizeTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InventorySizeTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InventorySizeTargeting
   * @throws IOException if the JSON string is invalid with respect to InventorySizeTargeting
   */
  public static InventorySizeTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InventorySizeTargeting.class);
  }

  /**
   * Convert an instance of InventorySizeTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

