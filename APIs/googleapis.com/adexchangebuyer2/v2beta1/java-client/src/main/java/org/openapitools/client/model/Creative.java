/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdTechnologyProviders;
import org.openapitools.client.model.Correction;
import org.openapitools.client.model.HtmlContent;
import org.openapitools.client.model.NativeContent;
import org.openapitools.client.model.ServingRestriction;
import org.openapitools.client.model.VideoContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A creative and its classification data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Creative {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AD_CHOICES_DESTINATION_URL = "adChoicesDestinationUrl";
  @SerializedName(SERIALIZED_NAME_AD_CHOICES_DESTINATION_URL)
  private String adChoicesDestinationUrl;

  public static final String SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS = "adTechnologyProviders";
  @SerializedName(SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS)
  private AdTechnologyProviders adTechnologyProviders;

  public static final String SERIALIZED_NAME_ADVERTISER_NAME = "advertiserName";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_NAME)
  private String advertiserName;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_API_UPDATE_TIME = "apiUpdateTime";
  @SerializedName(SERIALIZED_NAME_API_UPDATE_TIME)
  private String apiUpdateTime;

  /**
   * Gets or Sets attributes
   */
  @JsonAdapter(AttributesEnum.Adapter.class)
  public enum AttributesEnum {
    ATTRIBUTE_UNSPECIFIED("ATTRIBUTE_UNSPECIFIED"),
    
    IMAGE_RICH_MEDIA("IMAGE_RICH_MEDIA"),
    
    ADOBE_FLASH_FLV("ADOBE_FLASH_FLV"),
    
    IS_TAGGED("IS_TAGGED"),
    
    IS_COOKIE_TARGETED("IS_COOKIE_TARGETED"),
    
    IS_USER_INTEREST_TARGETED("IS_USER_INTEREST_TARGETED"),
    
    EXPANDING_DIRECTION_NONE("EXPANDING_DIRECTION_NONE"),
    
    EXPANDING_DIRECTION_UP("EXPANDING_DIRECTION_UP"),
    
    EXPANDING_DIRECTION_DOWN("EXPANDING_DIRECTION_DOWN"),
    
    EXPANDING_DIRECTION_LEFT("EXPANDING_DIRECTION_LEFT"),
    
    EXPANDING_DIRECTION_RIGHT("EXPANDING_DIRECTION_RIGHT"),
    
    EXPANDING_DIRECTION_UP_LEFT("EXPANDING_DIRECTION_UP_LEFT"),
    
    EXPANDING_DIRECTION_UP_RIGHT("EXPANDING_DIRECTION_UP_RIGHT"),
    
    EXPANDING_DIRECTION_DOWN_LEFT("EXPANDING_DIRECTION_DOWN_LEFT"),
    
    EXPANDING_DIRECTION_DOWN_RIGHT("EXPANDING_DIRECTION_DOWN_RIGHT"),
    
    CREATIVE_TYPE_HTML("CREATIVE_TYPE_HTML"),
    
    CREATIVE_TYPE_VAST_VIDEO("CREATIVE_TYPE_VAST_VIDEO"),
    
    EXPANDING_DIRECTION_UP_OR_DOWN("EXPANDING_DIRECTION_UP_OR_DOWN"),
    
    EXPANDING_DIRECTION_LEFT_OR_RIGHT("EXPANDING_DIRECTION_LEFT_OR_RIGHT"),
    
    EXPANDING_DIRECTION_ANY_DIAGONAL("EXPANDING_DIRECTION_ANY_DIAGONAL"),
    
    EXPANDING_ACTION_ROLLOVER_TO_EXPAND("EXPANDING_ACTION_ROLLOVER_TO_EXPAND"),
    
    INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH("INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_MRAID("RICH_MEDIA_CAPABILITY_TYPE_MRAID"),
    
    RICH_MEDIA_CAPABILITY_TYPE_FLASH("RICH_MEDIA_CAPABILITY_TYPE_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_HTML5("RICH_MEDIA_CAPABILITY_TYPE_HTML5"),
    
    SKIPPABLE_INSTREAM_VIDEO("SKIPPABLE_INSTREAM_VIDEO"),
    
    RICH_MEDIA_CAPABILITY_TYPE_SSL("RICH_MEDIA_CAPABILITY_TYPE_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_NON_SSL("RICH_MEDIA_CAPABILITY_TYPE_NON_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL("RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL"),
    
    NON_SKIPPABLE_INSTREAM_VIDEO("NON_SKIPPABLE_INSTREAM_VIDEO"),
    
    NATIVE_ELIGIBILITY_ELIGIBLE("NATIVE_ELIGIBILITY_ELIGIBLE"),
    
    NON_VPAID("NON_VPAID"),
    
    NATIVE_ELIGIBILITY_NOT_ELIGIBLE("NATIVE_ELIGIBILITY_NOT_ELIGIBLE"),
    
    ANY_INTERSTITIAL("ANY_INTERSTITIAL"),
    
    NON_INTERSTITIAL("NON_INTERSTITIAL"),
    
    IN_BANNER_VIDEO("IN_BANNER_VIDEO"),
    
    RENDERING_SIZELESS_ADX("RENDERING_SIZELESS_ADX"),
    
    OMSDK_1_0("OMSDK_1_0"),
    
    RENDERING_PLAYABLE("RENDERING_PLAYABLE");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributesEnum fromValue(String value) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AttributesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AttributesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributesEnum> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLICK_THROUGH_URLS = "clickThroughUrls";
  @SerializedName(SERIALIZED_NAME_CLICK_THROUGH_URLS)
  private List<String> clickThroughUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CORRECTIONS = "corrections";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CORRECTIONS)
  private List<Correction> corrections = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  /**
   * Output only. The top-level deals status of this creative. If disapproved, an entry for &#39;auctionType&#x3D;DIRECT_DEALS&#39; (or &#39;ALL&#39;) in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
   */
  @JsonAdapter(DealsStatusEnum.Adapter.class)
  public enum DealsStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    NOT_CHECKED("NOT_CHECKED"),
    
    CONDITIONALLY_APPROVED("CONDITIONALLY_APPROVED"),
    
    APPROVED("APPROVED"),
    
    DISAPPROVED("DISAPPROVED"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    STATUS_TYPE_UNSPECIFIED("STATUS_TYPE_UNSPECIFIED");

    private String value;

    DealsStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DealsStatusEnum fromValue(String value) {
      for (DealsStatusEnum b : DealsStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DealsStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DealsStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DealsStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DealsStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DealsStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEALS_STATUS = "dealsStatus";
  @SerializedName(SERIALIZED_NAME_DEALS_STATUS)
  private DealsStatusEnum dealsStatus;

  public static final String SERIALIZED_NAME_DECLARED_CLICK_THROUGH_URLS = "declaredClickThroughUrls";
  @SerializedName(SERIALIZED_NAME_DECLARED_CLICK_THROUGH_URLS)
  private List<String> declaredClickThroughUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_ADVERTISER_IDS = "detectedAdvertiserIds";
  @SerializedName(SERIALIZED_NAME_DETECTED_ADVERTISER_IDS)
  private List<String> detectedAdvertiserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_DOMAINS = "detectedDomains";
  @SerializedName(SERIALIZED_NAME_DETECTED_DOMAINS)
  private List<String> detectedDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGES = "detectedLanguages";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGES)
  private List<String> detectedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_PRODUCT_CATEGORIES = "detectedProductCategories";
  @SerializedName(SERIALIZED_NAME_DETECTED_PRODUCT_CATEGORIES)
  private List<Integer> detectedProductCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_SENSITIVE_CATEGORIES = "detectedSensitiveCategories";
  @SerializedName(SERIALIZED_NAME_DETECTED_SENSITIVE_CATEGORIES)
  private List<Integer> detectedSensitiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private HtmlContent html;

  public static final String SERIALIZED_NAME_IMPRESSION_TRACKING_URLS = "impressionTrackingUrls";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_TRACKING_URLS)
  private List<String> impressionTrackingUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_NATIVE = "native";
  @SerializedName(SERIALIZED_NAME_NATIVE)
  private NativeContent _native;

  /**
   * Output only. The top-level open auction status of this creative. If disapproved, an entry for &#39;auctionType &#x3D; OPEN_AUCTION&#39; (or &#39;ALL&#39;) in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
   */
  @JsonAdapter(OpenAuctionStatusEnum.Adapter.class)
  public enum OpenAuctionStatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    NOT_CHECKED("NOT_CHECKED"),
    
    CONDITIONALLY_APPROVED("CONDITIONALLY_APPROVED"),
    
    APPROVED("APPROVED"),
    
    DISAPPROVED("DISAPPROVED"),
    
    PENDING_REVIEW("PENDING_REVIEW"),
    
    STATUS_TYPE_UNSPECIFIED("STATUS_TYPE_UNSPECIFIED");

    private String value;

    OpenAuctionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpenAuctionStatusEnum fromValue(String value) {
      for (OpenAuctionStatusEnum b : OpenAuctionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpenAuctionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpenAuctionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpenAuctionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpenAuctionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpenAuctionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPEN_AUCTION_STATUS = "openAuctionStatus";
  @SerializedName(SERIALIZED_NAME_OPEN_AUCTION_STATUS)
  private OpenAuctionStatusEnum openAuctionStatus;

  /**
   * Gets or Sets restrictedCategories
   */
  @JsonAdapter(RestrictedCategoriesEnum.Adapter.class)
  public enum RestrictedCategoriesEnum {
    NO_RESTRICTED_CATEGORIES("NO_RESTRICTED_CATEGORIES"),
    
    ALCOHOL("ALCOHOL");

    private String value;

    RestrictedCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictedCategoriesEnum fromValue(String value) {
      for (RestrictedCategoriesEnum b : RestrictedCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictedCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictedCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictedCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictedCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictedCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTED_CATEGORIES = "restrictedCategories";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_CATEGORIES)
  private List<RestrictedCategoriesEnum> restrictedCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVING_RESTRICTIONS = "servingRestrictions";
  @SerializedName(SERIALIZED_NAME_SERVING_RESTRICTIONS)
  private List<ServingRestriction> servingRestrictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR_IDS = "vendorIds";
  @SerializedName(SERIALIZED_NAME_VENDOR_IDS)
  private List<Integer> vendorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private VideoContent video;

  public Creative() {
  }

  public Creative accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * The account that this creative belongs to. Can be used to filter the response of the creatives.list method.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Creative adChoicesDestinationUrl(String adChoicesDestinationUrl) {
    this.adChoicesDestinationUrl = adChoicesDestinationUrl;
    return this;
  }

  /**
   * The link to AdChoices destination page.
   * @return adChoicesDestinationUrl
   */
  @javax.annotation.Nullable
  public String getAdChoicesDestinationUrl() {
    return adChoicesDestinationUrl;
  }

  public void setAdChoicesDestinationUrl(String adChoicesDestinationUrl) {
    this.adChoicesDestinationUrl = adChoicesDestinationUrl;
  }


  public Creative adTechnologyProviders(AdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
    return this;
  }

  /**
   * Get adTechnologyProviders
   * @return adTechnologyProviders
   */
  @javax.annotation.Nullable
  public AdTechnologyProviders getAdTechnologyProviders() {
    return adTechnologyProviders;
  }

  public void setAdTechnologyProviders(AdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
  }


  public Creative advertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
    return this;
  }

  /**
   * The name of the company being advertised in the creative.
   * @return advertiserName
   */
  @javax.annotation.Nullable
  public String getAdvertiserName() {
    return advertiserName;
  }

  public void setAdvertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
  }


  public Creative agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * The agency ID for this creative.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  public Creative apiUpdateTime(String apiUpdateTime) {
    this.apiUpdateTime = apiUpdateTime;
    return this;
  }

  /**
   * Output only. The last update timestamp of the creative through the API.
   * @return apiUpdateTime
   */
  @javax.annotation.Nullable
  public String getApiUpdateTime() {
    return apiUpdateTime;
  }

  public void setApiUpdateTime(String apiUpdateTime) {
    this.apiUpdateTime = apiUpdateTime;
  }


  public Creative attributes(List<AttributesEnum> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Creative addAttributesItem(AttributesEnum attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<AttributesEnum> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<AttributesEnum> attributes) {
    this.attributes = attributes;
  }


  public Creative clickThroughUrls(List<String> clickThroughUrls) {
    this.clickThroughUrls = clickThroughUrls;
    return this;
  }

  public Creative addClickThroughUrlsItem(String clickThroughUrlsItem) {
    if (this.clickThroughUrls == null) {
      this.clickThroughUrls = new ArrayList<>();
    }
    this.clickThroughUrls.add(clickThroughUrlsItem);
    return this;
  }

  /**
   * The set of destination URLs for the creative.
   * @return clickThroughUrls
   */
  @javax.annotation.Nullable
  public List<String> getClickThroughUrls() {
    return clickThroughUrls;
  }

  public void setClickThroughUrls(List<String> clickThroughUrls) {
    this.clickThroughUrls = clickThroughUrls;
  }


  @Deprecated
  public Creative corrections(List<Correction> corrections) {
    this.corrections = corrections;
    return this;
  }

  public Creative addCorrectionsItem(Correction correctionsItem) {
    if (this.corrections == null) {
      this.corrections = new ArrayList<>();
    }
    this.corrections.add(correctionsItem);
    return this;
  }

  /**
   * Output only. Shows any corrections that were applied to this creative.
   * @return corrections
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Correction> getCorrections() {
    return corrections;
  }

  @Deprecated
  public void setCorrections(List<Correction> corrections) {
    this.corrections = corrections;
  }


  public Creative creativeId(String creativeId) {
    this.creativeId = creativeId;
    return this;
  }

  /**
   * The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method.
   * @return creativeId
   */
  @javax.annotation.Nullable
  public String getCreativeId() {
    return creativeId;
  }

  public void setCreativeId(String creativeId) {
    this.creativeId = creativeId;
  }


  public Creative dealsStatus(DealsStatusEnum dealsStatus) {
    this.dealsStatus = dealsStatus;
    return this;
  }

  /**
   * Output only. The top-level deals status of this creative. If disapproved, an entry for &#39;auctionType&#x3D;DIRECT_DEALS&#39; (or &#39;ALL&#39;) in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
   * @return dealsStatus
   */
  @javax.annotation.Nullable
  public DealsStatusEnum getDealsStatus() {
    return dealsStatus;
  }

  public void setDealsStatus(DealsStatusEnum dealsStatus) {
    this.dealsStatus = dealsStatus;
  }


  public Creative declaredClickThroughUrls(List<String> declaredClickThroughUrls) {
    this.declaredClickThroughUrls = declaredClickThroughUrls;
    return this;
  }

  public Creative addDeclaredClickThroughUrlsItem(String declaredClickThroughUrlsItem) {
    if (this.declaredClickThroughUrls == null) {
      this.declaredClickThroughUrls = new ArrayList<>();
    }
    this.declaredClickThroughUrls.add(declaredClickThroughUrlsItem);
    return this;
  }

  /**
   * The set of declared destination URLs for the creative.
   * @return declaredClickThroughUrls
   */
  @javax.annotation.Nullable
  public List<String> getDeclaredClickThroughUrls() {
    return declaredClickThroughUrls;
  }

  public void setDeclaredClickThroughUrls(List<String> declaredClickThroughUrls) {
    this.declaredClickThroughUrls = declaredClickThroughUrls;
  }


  public Creative detectedAdvertiserIds(List<String> detectedAdvertiserIds) {
    this.detectedAdvertiserIds = detectedAdvertiserIds;
    return this;
  }

  public Creative addDetectedAdvertiserIdsItem(String detectedAdvertiserIdsItem) {
    if (this.detectedAdvertiserIds == null) {
      this.detectedAdvertiserIds = new ArrayList<>();
    }
    this.detectedAdvertiserIds.add(detectedAdvertiserIdsItem);
    return this;
  }

  /**
   * Output only. Detected advertiser IDs, if any.
   * @return detectedAdvertiserIds
   */
  @javax.annotation.Nullable
  public List<String> getDetectedAdvertiserIds() {
    return detectedAdvertiserIds;
  }

  public void setDetectedAdvertiserIds(List<String> detectedAdvertiserIds) {
    this.detectedAdvertiserIds = detectedAdvertiserIds;
  }


  public Creative detectedDomains(List<String> detectedDomains) {
    this.detectedDomains = detectedDomains;
    return this;
  }

  public Creative addDetectedDomainsItem(String detectedDomainsItem) {
    if (this.detectedDomains == null) {
      this.detectedDomains = new ArrayList<>();
    }
    this.detectedDomains.add(detectedDomainsItem);
    return this;
  }

  /**
   * Output only. The detected domains for this creative.
   * @return detectedDomains
   */
  @javax.annotation.Nullable
  public List<String> getDetectedDomains() {
    return detectedDomains;
  }

  public void setDetectedDomains(List<String> detectedDomains) {
    this.detectedDomains = detectedDomains;
  }


  public Creative detectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
    return this;
  }

  public Creative addDetectedLanguagesItem(String detectedLanguagesItem) {
    if (this.detectedLanguages == null) {
      this.detectedLanguages = new ArrayList<>();
    }
    this.detectedLanguages.add(detectedLanguagesItem);
    return this;
  }

  /**
   * Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes.
   * @return detectedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getDetectedLanguages() {
    return detectedLanguages;
  }

  public void setDetectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
  }


  public Creative detectedProductCategories(List<Integer> detectedProductCategories) {
    this.detectedProductCategories = detectedProductCategories;
    return this;
  }

  public Creative addDetectedProductCategoriesItem(Integer detectedProductCategoriesItem) {
    if (this.detectedProductCategories == null) {
      this.detectedProductCategories = new ArrayList<>();
    }
    this.detectedProductCategories.add(detectedProductCategoriesItem);
    return this;
  }

  /**
   * Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs.
   * @return detectedProductCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getDetectedProductCategories() {
    return detectedProductCategories;
  }

  public void setDetectedProductCategories(List<Integer> detectedProductCategories) {
    this.detectedProductCategories = detectedProductCategories;
  }


  public Creative detectedSensitiveCategories(List<Integer> detectedSensitiveCategories) {
    this.detectedSensitiveCategories = detectedSensitiveCategories;
    return this;
  }

  public Creative addDetectedSensitiveCategoriesItem(Integer detectedSensitiveCategoriesItem) {
    if (this.detectedSensitiveCategories == null) {
      this.detectedSensitiveCategories = new ArrayList<>();
    }
    this.detectedSensitiveCategories.add(detectedSensitiveCategoriesItem);
    return this;
  }

  /**
   * Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.
   * @return detectedSensitiveCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getDetectedSensitiveCategories() {
    return detectedSensitiveCategories;
  }

  public void setDetectedSensitiveCategories(List<Integer> detectedSensitiveCategories) {
    this.detectedSensitiveCategories = detectedSensitiveCategories;
  }


  public Creative html(HtmlContent html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public HtmlContent getHtml() {
    return html;
  }

  public void setHtml(HtmlContent html) {
    this.html = html;
  }


  public Creative impressionTrackingUrls(List<String> impressionTrackingUrls) {
    this.impressionTrackingUrls = impressionTrackingUrls;
    return this;
  }

  public Creative addImpressionTrackingUrlsItem(String impressionTrackingUrlsItem) {
    if (this.impressionTrackingUrls == null) {
      this.impressionTrackingUrls = new ArrayList<>();
    }
    this.impressionTrackingUrls.add(impressionTrackingUrlsItem);
    return this;
  }

  /**
   * The set of URLs to be called to record an impression.
   * @return impressionTrackingUrls
   */
  @javax.annotation.Nullable
  public List<String> getImpressionTrackingUrls() {
    return impressionTrackingUrls;
  }

  public void setImpressionTrackingUrls(List<String> impressionTrackingUrls) {
    this.impressionTrackingUrls = impressionTrackingUrls;
  }


  public Creative _native(NativeContent _native) {
    this._native = _native;
    return this;
  }

  /**
   * Get _native
   * @return _native
   */
  @javax.annotation.Nullable
  public NativeContent getNative() {
    return _native;
  }

  public void setNative(NativeContent _native) {
    this._native = _native;
  }


  public Creative openAuctionStatus(OpenAuctionStatusEnum openAuctionStatus) {
    this.openAuctionStatus = openAuctionStatus;
    return this;
  }

  /**
   * Output only. The top-level open auction status of this creative. If disapproved, an entry for &#39;auctionType &#x3D; OPEN_AUCTION&#39; (or &#39;ALL&#39;) in serving_restrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the creatives.list method.
   * @return openAuctionStatus
   */
  @javax.annotation.Nullable
  public OpenAuctionStatusEnum getOpenAuctionStatus() {
    return openAuctionStatus;
  }

  public void setOpenAuctionStatus(OpenAuctionStatusEnum openAuctionStatus) {
    this.openAuctionStatus = openAuctionStatus;
  }


  public Creative restrictedCategories(List<RestrictedCategoriesEnum> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
    return this;
  }

  public Creative addRestrictedCategoriesItem(RestrictedCategoriesEnum restrictedCategoriesItem) {
    if (this.restrictedCategories == null) {
      this.restrictedCategories = new ArrayList<>();
    }
    this.restrictedCategories.add(restrictedCategoriesItem);
    return this;
  }

  /**
   * All restricted categories for the ads that may be shown from this creative.
   * @return restrictedCategories
   */
  @javax.annotation.Nullable
  public List<RestrictedCategoriesEnum> getRestrictedCategories() {
    return restrictedCategories;
  }

  public void setRestrictedCategories(List<RestrictedCategoriesEnum> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
  }


  public Creative servingRestrictions(List<ServingRestriction> servingRestrictions) {
    this.servingRestrictions = servingRestrictions;
    return this;
  }

  public Creative addServingRestrictionsItem(ServingRestriction servingRestrictionsItem) {
    if (this.servingRestrictions == null) {
      this.servingRestrictions = new ArrayList<>();
    }
    this.servingRestrictions.add(servingRestrictionsItem);
    return this;
  }

  /**
   * Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS versus HTTP request, or the type of auction).
   * @return servingRestrictions
   */
  @javax.annotation.Nullable
  public List<ServingRestriction> getServingRestrictions() {
    return servingRestrictions;
  }

  public void setServingRestrictions(List<ServingRestriction> servingRestrictions) {
    this.servingRestrictions = servingRestrictions;
  }


  public Creative vendorIds(List<Integer> vendorIds) {
    this.vendorIds = vendorIds;
    return this;
  }

  public Creative addVendorIdsItem(Integer vendorIdsItem) {
    if (this.vendorIds == null) {
      this.vendorIds = new ArrayList<>();
    }
    this.vendorIds.add(vendorIdsItem);
    return this;
  }

  /**
   * All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values.
   * @return vendorIds
   */
  @javax.annotation.Nullable
  public List<Integer> getVendorIds() {
    return vendorIds;
  }

  public void setVendorIds(List<Integer> vendorIds) {
    this.vendorIds = vendorIds;
  }


  public Creative version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Output only. The version of this creative.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public Creative video(VideoContent video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public VideoContent getVideo() {
    return video;
  }

  public void setVideo(VideoContent video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.accountId, creative.accountId) &&
        Objects.equals(this.adChoicesDestinationUrl, creative.adChoicesDestinationUrl) &&
        Objects.equals(this.adTechnologyProviders, creative.adTechnologyProviders) &&
        Objects.equals(this.advertiserName, creative.advertiserName) &&
        Objects.equals(this.agencyId, creative.agencyId) &&
        Objects.equals(this.apiUpdateTime, creative.apiUpdateTime) &&
        Objects.equals(this.attributes, creative.attributes) &&
        Objects.equals(this.clickThroughUrls, creative.clickThroughUrls) &&
        Objects.equals(this.corrections, creative.corrections) &&
        Objects.equals(this.creativeId, creative.creativeId) &&
        Objects.equals(this.dealsStatus, creative.dealsStatus) &&
        Objects.equals(this.declaredClickThroughUrls, creative.declaredClickThroughUrls) &&
        Objects.equals(this.detectedAdvertiserIds, creative.detectedAdvertiserIds) &&
        Objects.equals(this.detectedDomains, creative.detectedDomains) &&
        Objects.equals(this.detectedLanguages, creative.detectedLanguages) &&
        Objects.equals(this.detectedProductCategories, creative.detectedProductCategories) &&
        Objects.equals(this.detectedSensitiveCategories, creative.detectedSensitiveCategories) &&
        Objects.equals(this.html, creative.html) &&
        Objects.equals(this.impressionTrackingUrls, creative.impressionTrackingUrls) &&
        Objects.equals(this._native, creative._native) &&
        Objects.equals(this.openAuctionStatus, creative.openAuctionStatus) &&
        Objects.equals(this.restrictedCategories, creative.restrictedCategories) &&
        Objects.equals(this.servingRestrictions, creative.servingRestrictions) &&
        Objects.equals(this.vendorIds, creative.vendorIds) &&
        Objects.equals(this.version, creative.version) &&
        Objects.equals(this.video, creative.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, adChoicesDestinationUrl, adTechnologyProviders, advertiserName, agencyId, apiUpdateTime, attributes, clickThroughUrls, corrections, creativeId, dealsStatus, declaredClickThroughUrls, detectedAdvertiserIds, detectedDomains, detectedLanguages, detectedProductCategories, detectedSensitiveCategories, html, impressionTrackingUrls, _native, openAuctionStatus, restrictedCategories, servingRestrictions, vendorIds, version, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adChoicesDestinationUrl: ").append(toIndentedString(adChoicesDestinationUrl)).append("\n");
    sb.append("    adTechnologyProviders: ").append(toIndentedString(adTechnologyProviders)).append("\n");
    sb.append("    advertiserName: ").append(toIndentedString(advertiserName)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    apiUpdateTime: ").append(toIndentedString(apiUpdateTime)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clickThroughUrls: ").append(toIndentedString(clickThroughUrls)).append("\n");
    sb.append("    corrections: ").append(toIndentedString(corrections)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    dealsStatus: ").append(toIndentedString(dealsStatus)).append("\n");
    sb.append("    declaredClickThroughUrls: ").append(toIndentedString(declaredClickThroughUrls)).append("\n");
    sb.append("    detectedAdvertiserIds: ").append(toIndentedString(detectedAdvertiserIds)).append("\n");
    sb.append("    detectedDomains: ").append(toIndentedString(detectedDomains)).append("\n");
    sb.append("    detectedLanguages: ").append(toIndentedString(detectedLanguages)).append("\n");
    sb.append("    detectedProductCategories: ").append(toIndentedString(detectedProductCategories)).append("\n");
    sb.append("    detectedSensitiveCategories: ").append(toIndentedString(detectedSensitiveCategories)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    impressionTrackingUrls: ").append(toIndentedString(impressionTrackingUrls)).append("\n");
    sb.append("    _native: ").append(toIndentedString(_native)).append("\n");
    sb.append("    openAuctionStatus: ").append(toIndentedString(openAuctionStatus)).append("\n");
    sb.append("    restrictedCategories: ").append(toIndentedString(restrictedCategories)).append("\n");
    sb.append("    servingRestrictions: ").append(toIndentedString(servingRestrictions)).append("\n");
    sb.append("    vendorIds: ").append(toIndentedString(vendorIds)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("adChoicesDestinationUrl");
    openapiFields.add("adTechnologyProviders");
    openapiFields.add("advertiserName");
    openapiFields.add("agencyId");
    openapiFields.add("apiUpdateTime");
    openapiFields.add("attributes");
    openapiFields.add("clickThroughUrls");
    openapiFields.add("corrections");
    openapiFields.add("creativeId");
    openapiFields.add("dealsStatus");
    openapiFields.add("declaredClickThroughUrls");
    openapiFields.add("detectedAdvertiserIds");
    openapiFields.add("detectedDomains");
    openapiFields.add("detectedLanguages");
    openapiFields.add("detectedProductCategories");
    openapiFields.add("detectedSensitiveCategories");
    openapiFields.add("html");
    openapiFields.add("impressionTrackingUrls");
    openapiFields.add("native");
    openapiFields.add("openAuctionStatus");
    openapiFields.add("restrictedCategories");
    openapiFields.add("servingRestrictions");
    openapiFields.add("vendorIds");
    openapiFields.add("version");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Creative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("adChoicesDestinationUrl") != null && !jsonObj.get("adChoicesDestinationUrl").isJsonNull()) && !jsonObj.get("adChoicesDestinationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adChoicesDestinationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adChoicesDestinationUrl").toString()));
      }
      // validate the optional field `adTechnologyProviders`
      if (jsonObj.get("adTechnologyProviders") != null && !jsonObj.get("adTechnologyProviders").isJsonNull()) {
        AdTechnologyProviders.validateJsonElement(jsonObj.get("adTechnologyProviders"));
      }
      if ((jsonObj.get("advertiserName") != null && !jsonObj.get("advertiserName").isJsonNull()) && !jsonObj.get("advertiserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserName").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("apiUpdateTime") != null && !jsonObj.get("apiUpdateTime").isJsonNull()) && !jsonObj.get("apiUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiUpdateTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull() && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clickThroughUrls") != null && !jsonObj.get("clickThroughUrls").isJsonNull() && !jsonObj.get("clickThroughUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickThroughUrls` to be an array in the JSON string but got `%s`", jsonObj.get("clickThroughUrls").toString()));
      }
      if (jsonObj.get("corrections") != null && !jsonObj.get("corrections").isJsonNull()) {
        JsonArray jsonArraycorrections = jsonObj.getAsJsonArray("corrections");
        if (jsonArraycorrections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("corrections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `corrections` to be an array in the JSON string but got `%s`", jsonObj.get("corrections").toString()));
          }

          // validate the optional field `corrections` (array)
          for (int i = 0; i < jsonArraycorrections.size(); i++) {
            Correction.validateJsonElement(jsonArraycorrections.get(i));
          };
        }
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      if ((jsonObj.get("dealsStatus") != null && !jsonObj.get("dealsStatus").isJsonNull()) && !jsonObj.get("dealsStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealsStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealsStatus").toString()));
      }
      // validate the optional field `dealsStatus`
      if (jsonObj.get("dealsStatus") != null && !jsonObj.get("dealsStatus").isJsonNull()) {
        DealsStatusEnum.validateJsonElement(jsonObj.get("dealsStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("declaredClickThroughUrls") != null && !jsonObj.get("declaredClickThroughUrls").isJsonNull() && !jsonObj.get("declaredClickThroughUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaredClickThroughUrls` to be an array in the JSON string but got `%s`", jsonObj.get("declaredClickThroughUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedAdvertiserIds") != null && !jsonObj.get("detectedAdvertiserIds").isJsonNull() && !jsonObj.get("detectedAdvertiserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedAdvertiserIds` to be an array in the JSON string but got `%s`", jsonObj.get("detectedAdvertiserIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedDomains") != null && !jsonObj.get("detectedDomains").isJsonNull() && !jsonObj.get("detectedDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedDomains` to be an array in the JSON string but got `%s`", jsonObj.get("detectedDomains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedLanguages") != null && !jsonObj.get("detectedLanguages").isJsonNull() && !jsonObj.get("detectedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedProductCategories") != null && !jsonObj.get("detectedProductCategories").isJsonNull() && !jsonObj.get("detectedProductCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedProductCategories` to be an array in the JSON string but got `%s`", jsonObj.get("detectedProductCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedSensitiveCategories") != null && !jsonObj.get("detectedSensitiveCategories").isJsonNull() && !jsonObj.get("detectedSensitiveCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedSensitiveCategories` to be an array in the JSON string but got `%s`", jsonObj.get("detectedSensitiveCategories").toString()));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        HtmlContent.validateJsonElement(jsonObj.get("html"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("impressionTrackingUrls") != null && !jsonObj.get("impressionTrackingUrls").isJsonNull() && !jsonObj.get("impressionTrackingUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionTrackingUrls` to be an array in the JSON string but got `%s`", jsonObj.get("impressionTrackingUrls").toString()));
      }
      // validate the optional field `native`
      if (jsonObj.get("native") != null && !jsonObj.get("native").isJsonNull()) {
        NativeContent.validateJsonElement(jsonObj.get("native"));
      }
      if ((jsonObj.get("openAuctionStatus") != null && !jsonObj.get("openAuctionStatus").isJsonNull()) && !jsonObj.get("openAuctionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openAuctionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openAuctionStatus").toString()));
      }
      // validate the optional field `openAuctionStatus`
      if (jsonObj.get("openAuctionStatus") != null && !jsonObj.get("openAuctionStatus").isJsonNull()) {
        OpenAuctionStatusEnum.validateJsonElement(jsonObj.get("openAuctionStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedCategories") != null && !jsonObj.get("restrictedCategories").isJsonNull() && !jsonObj.get("restrictedCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedCategories` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedCategories").toString()));
      }
      if (jsonObj.get("servingRestrictions") != null && !jsonObj.get("servingRestrictions").isJsonNull()) {
        JsonArray jsonArrayservingRestrictions = jsonObj.getAsJsonArray("servingRestrictions");
        if (jsonArrayservingRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servingRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servingRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("servingRestrictions").toString()));
          }

          // validate the optional field `servingRestrictions` (array)
          for (int i = 0; i < jsonArrayservingRestrictions.size(); i++) {
            ServingRestriction.validateJsonElement(jsonArrayservingRestrictions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendorIds") != null && !jsonObj.get("vendorIds").isJsonNull() && !jsonObj.get("vendorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorIds` to be an array in the JSON string but got `%s`", jsonObj.get("vendorIds").toString()));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        VideoContent.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Creative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Creative
   * @throws IOException if the JSON string is invalid with respect to Creative
   */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

  /**
   * Convert an instance of Creative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

