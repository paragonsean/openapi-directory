/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A proposal may be associated to several notes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Note {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Output only. The role of the person (buyer/seller) creating the note.
   */
  @JsonAdapter(CreatorRoleEnum.Adapter.class)
  public enum CreatorRoleEnum {
    BUYER_SELLER_ROLE_UNSPECIFIED("BUYER_SELLER_ROLE_UNSPECIFIED"),
    
    BUYER("BUYER"),
    
    SELLER("SELLER");

    private String value;

    CreatorRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreatorRoleEnum fromValue(String value) {
      for (CreatorRoleEnum b : CreatorRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreatorRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreatorRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreatorRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreatorRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreatorRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATOR_ROLE = "creatorRole";
  @SerializedName(SERIALIZED_NAME_CREATOR_ROLE)
  private CreatorRoleEnum creatorRole;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_ID = "noteId";
  @SerializedName(SERIALIZED_NAME_NOTE_ID)
  private String noteId;

  public static final String SERIALIZED_NAME_PROPOSAL_REVISION = "proposalRevision";
  @SerializedName(SERIALIZED_NAME_PROPOSAL_REVISION)
  private String proposalRevision;

  public Note() {
  }

  public Note(
     String createTime, 
     CreatorRoleEnum creatorRole, 
     String noteId, 
     String proposalRevision
  ) {
    this();
    this.createTime = createTime;
    this.creatorRole = creatorRole;
    this.noteId = noteId;
    this.proposalRevision = proposalRevision;
  }

  /**
   * Output only. The timestamp for when this note was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The role of the person (buyer/seller) creating the note.
   * @return creatorRole
   */
  @javax.annotation.Nullable
  public CreatorRoleEnum getCreatorRole() {
    return creatorRole;
  }



  public Note note(String note) {
    this.note = note;
    return this;
  }

  /**
   * The actual note to attach. (max-length: 1024 unicode code units) Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  /**
   * Output only. The unique ID for the note.
   * @return noteId
   */
  @javax.annotation.Nullable
  public String getNoteId() {
    return noteId;
  }



  /**
   * Output only. The revision number of the proposal when the note is created.
   * @return proposalRevision
   */
  @javax.annotation.Nullable
  public String getProposalRevision() {
    return proposalRevision;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Note note = (Note) o;
    return Objects.equals(this.createTime, note.createTime) &&
        Objects.equals(this.creatorRole, note.creatorRole) &&
        Objects.equals(this.note, note.note) &&
        Objects.equals(this.noteId, note.noteId) &&
        Objects.equals(this.proposalRevision, note.proposalRevision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, creatorRole, note, noteId, proposalRevision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Note {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creatorRole: ").append(toIndentedString(creatorRole)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteId: ").append(toIndentedString(noteId)).append("\n");
    sb.append("    proposalRevision: ").append(toIndentedString(proposalRevision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("creatorRole");
    openapiFields.add("note");
    openapiFields.add("noteId");
    openapiFields.add("proposalRevision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Note
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Note.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Note is not found in the empty JSON string", Note.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Note.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Note` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("creatorRole") != null && !jsonObj.get("creatorRole").isJsonNull()) && !jsonObj.get("creatorRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorRole").toString()));
      }
      // validate the optional field `creatorRole`
      if (jsonObj.get("creatorRole") != null && !jsonObj.get("creatorRole").isJsonNull()) {
        CreatorRoleEnum.validateJsonElement(jsonObj.get("creatorRole"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("noteId") != null && !jsonObj.get("noteId").isJsonNull()) && !jsonObj.get("noteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `noteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("noteId").toString()));
      }
      if ((jsonObj.get("proposalRevision") != null && !jsonObj.get("proposalRevision").isJsonNull()) && !jsonObj.get("proposalRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposalRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposalRevision").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Note.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Note' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Note> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Note.class));

       return (TypeAdapter<T>) new TypeAdapter<Note>() {
           @Override
           public void write(JsonWriter out, Note value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Note read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Note given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Note
   * @throws IOException if the JSON string is invalid with respect to Note
   */
  public static Note fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Note.class);
  }

  /**
   * Convert an instance of Note to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

