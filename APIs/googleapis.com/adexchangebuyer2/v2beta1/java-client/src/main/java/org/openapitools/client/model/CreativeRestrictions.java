/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents creative restrictions associated to Programmatic Guaranteed/ Preferred Deal in Ad Manager. This doesn&#39;t apply to Private Auction and AdX Preferred Deals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeRestrictions {
  /**
   * The format of the environment that the creatives will be displayed in.
   */
  @JsonAdapter(CreativeFormatEnum.Adapter.class)
  public enum CreativeFormatEnum {
    CREATIVE_FORMAT_UNSPECIFIED("CREATIVE_FORMAT_UNSPECIFIED"),
    
    DISPLAY("DISPLAY"),
    
    VIDEO("VIDEO");

    private String value;

    CreativeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeFormatEnum fromValue(String value) {
      for (CreativeFormatEnum b : CreativeFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_FORMAT = "creativeFormat";
  @SerializedName(SERIALIZED_NAME_CREATIVE_FORMAT)
  private CreativeFormatEnum creativeFormat;

  public static final String SERIALIZED_NAME_CREATIVE_SPECIFICATIONS = "creativeSpecifications";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SPECIFICATIONS)
  private List<CreativeSpecification> creativeSpecifications = new ArrayList<>();

  /**
   * Skippable video ads allow viewers to skip ads after 5 seconds.
   */
  @JsonAdapter(SkippableAdTypeEnum.Adapter.class)
  public enum SkippableAdTypeEnum {
    SKIPPABLE_AD_TYPE_UNSPECIFIED("SKIPPABLE_AD_TYPE_UNSPECIFIED"),
    
    SKIPPABLE("SKIPPABLE"),
    
    INSTREAM_SELECT("INSTREAM_SELECT"),
    
    NOT_SKIPPABLE("NOT_SKIPPABLE");

    private String value;

    SkippableAdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SkippableAdTypeEnum fromValue(String value) {
      for (SkippableAdTypeEnum b : SkippableAdTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SkippableAdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SkippableAdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SkippableAdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SkippableAdTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SkippableAdTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SKIPPABLE_AD_TYPE = "skippableAdType";
  @SerializedName(SERIALIZED_NAME_SKIPPABLE_AD_TYPE)
  private SkippableAdTypeEnum skippableAdType;

  public CreativeRestrictions() {
  }

  public CreativeRestrictions creativeFormat(CreativeFormatEnum creativeFormat) {
    this.creativeFormat = creativeFormat;
    return this;
  }

  /**
   * The format of the environment that the creatives will be displayed in.
   * @return creativeFormat
   */
  @javax.annotation.Nullable
  public CreativeFormatEnum getCreativeFormat() {
    return creativeFormat;
  }

  public void setCreativeFormat(CreativeFormatEnum creativeFormat) {
    this.creativeFormat = creativeFormat;
  }


  public CreativeRestrictions creativeSpecifications(List<CreativeSpecification> creativeSpecifications) {
    this.creativeSpecifications = creativeSpecifications;
    return this;
  }

  public CreativeRestrictions addCreativeSpecificationsItem(CreativeSpecification creativeSpecificationsItem) {
    if (this.creativeSpecifications == null) {
      this.creativeSpecifications = new ArrayList<>();
    }
    this.creativeSpecifications.add(creativeSpecificationsItem);
    return this;
  }

  /**
   * Get creativeSpecifications
   * @return creativeSpecifications
   */
  @javax.annotation.Nullable
  public List<CreativeSpecification> getCreativeSpecifications() {
    return creativeSpecifications;
  }

  public void setCreativeSpecifications(List<CreativeSpecification> creativeSpecifications) {
    this.creativeSpecifications = creativeSpecifications;
  }


  public CreativeRestrictions skippableAdType(SkippableAdTypeEnum skippableAdType) {
    this.skippableAdType = skippableAdType;
    return this;
  }

  /**
   * Skippable video ads allow viewers to skip ads after 5 seconds.
   * @return skippableAdType
   */
  @javax.annotation.Nullable
  public SkippableAdTypeEnum getSkippableAdType() {
    return skippableAdType;
  }

  public void setSkippableAdType(SkippableAdTypeEnum skippableAdType) {
    this.skippableAdType = skippableAdType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeRestrictions creativeRestrictions = (CreativeRestrictions) o;
    return Objects.equals(this.creativeFormat, creativeRestrictions.creativeFormat) &&
        Objects.equals(this.creativeSpecifications, creativeRestrictions.creativeSpecifications) &&
        Objects.equals(this.skippableAdType, creativeRestrictions.skippableAdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creativeFormat, creativeSpecifications, skippableAdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeRestrictions {\n");
    sb.append("    creativeFormat: ").append(toIndentedString(creativeFormat)).append("\n");
    sb.append("    creativeSpecifications: ").append(toIndentedString(creativeSpecifications)).append("\n");
    sb.append("    skippableAdType: ").append(toIndentedString(skippableAdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creativeFormat");
    openapiFields.add("creativeSpecifications");
    openapiFields.add("skippableAdType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeRestrictions is not found in the empty JSON string", CreativeRestrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeRestrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeRestrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) && !jsonObj.get("creativeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeFormat").toString()));
      }
      // validate the optional field `creativeFormat`
      if (jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) {
        CreativeFormatEnum.validateJsonElement(jsonObj.get("creativeFormat"));
      }
      if (jsonObj.get("creativeSpecifications") != null && !jsonObj.get("creativeSpecifications").isJsonNull()) {
        JsonArray jsonArraycreativeSpecifications = jsonObj.getAsJsonArray("creativeSpecifications");
        if (jsonArraycreativeSpecifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creativeSpecifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creativeSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("creativeSpecifications").toString()));
          }

          // validate the optional field `creativeSpecifications` (array)
          for (int i = 0; i < jsonArraycreativeSpecifications.size(); i++) {
            CreativeSpecification.validateJsonElement(jsonArraycreativeSpecifications.get(i));
          };
        }
      }
      if ((jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) && !jsonObj.get("skippableAdType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skippableAdType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skippableAdType").toString()));
      }
      // validate the optional field `skippableAdType`
      if (jsonObj.get("skippableAdType") != null && !jsonObj.get("skippableAdType").isJsonNull()) {
        SkippableAdTypeEnum.validateJsonElement(jsonObj.get("skippableAdType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeRestrictions>() {
           @Override
           public void write(JsonWriter out, CreativeRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeRestrictions
   * @throws IOException if the JSON string is invalid with respect to CreativeRestrictions
   */
  public static CreativeRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeRestrictions.class);
  }

  /**
   * Convert an instance of CreativeRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

