/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A relative date range, specified by an offset and a duration. The supported range of dates begins 30 days before today and ends today, for example, the limits for these values are: offset_days &gt;&#x3D; 0 duration_days &gt;&#x3D; 1 offset_days + duration_days &lt;&#x3D; 30
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelativeDateRange {
  public static final String SERIALIZED_NAME_DURATION_DAYS = "durationDays";
  @SerializedName(SERIALIZED_NAME_DURATION_DAYS)
  private Integer durationDays;

  public static final String SERIALIZED_NAME_OFFSET_DAYS = "offsetDays";
  @SerializedName(SERIALIZED_NAME_OFFSET_DAYS)
  private Integer offsetDays;

  public RelativeDateRange() {
  }

  public RelativeDateRange durationDays(Integer durationDays) {
    this.durationDays = durationDays;
    return this;
  }

  /**
   * The number of days in the requested date range, for example, for a range spanning today: 1. For a range spanning the last 7 days: 7.
   * @return durationDays
   */
  @javax.annotation.Nullable
  public Integer getDurationDays() {
    return durationDays;
  }

  public void setDurationDays(Integer durationDays) {
    this.durationDays = durationDays;
  }


  public RelativeDateRange offsetDays(Integer offsetDays) {
    this.offsetDays = offsetDays;
    return this;
  }

  /**
   * The end date of the filter set, specified as the number of days before today, for example, for a range where the last date is today: 0.
   * @return offsetDays
   */
  @javax.annotation.Nullable
  public Integer getOffsetDays() {
    return offsetDays;
  }

  public void setOffsetDays(Integer offsetDays) {
    this.offsetDays = offsetDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelativeDateRange relativeDateRange = (RelativeDateRange) o;
    return Objects.equals(this.durationDays, relativeDateRange.durationDays) &&
        Objects.equals(this.offsetDays, relativeDateRange.offsetDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationDays, offsetDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelativeDateRange {\n");
    sb.append("    durationDays: ").append(toIndentedString(durationDays)).append("\n");
    sb.append("    offsetDays: ").append(toIndentedString(offsetDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("durationDays");
    openapiFields.add("offsetDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelativeDateRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelativeDateRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelativeDateRange is not found in the empty JSON string", RelativeDateRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelativeDateRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelativeDateRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelativeDateRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelativeDateRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelativeDateRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelativeDateRange.class));

       return (TypeAdapter<T>) new TypeAdapter<RelativeDateRange>() {
           @Override
           public void write(JsonWriter out, RelativeDateRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelativeDateRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelativeDateRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelativeDateRange
   * @throws IOException if the JSON string is invalid with respect to RelativeDateRange
   */
  public static RelativeDateRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelativeDateRange.class);
  }

  /**
   * Convert an instance of RelativeDateRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

