/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A client resource represents a client buyerâ€”an agency, a brand, or an advertiser customer of the sponsor buyer. Users associated with the client buyer have restricted access to the Marketplace and certain other sections of the Authorized Buyers UI based on the role granted to the client buyer. All fields are required unless otherwise specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:01.871396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Client {
  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT_ID = "clientAccountId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT_ID)
  private String clientAccountId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  /**
   * An optional field for specifying the type of the client entity: &#x60;ADVERTISER&#x60;, &#x60;BRAND&#x60;, or &#x60;AGENCY&#x60;.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    ENTITY_TYPE_UNSPECIFIED("ENTITY_TYPE_UNSPECIFIED"),
    
    ADVERTISER("ADVERTISER"),
    
    BRAND("BRAND"),
    
    AGENCY("AGENCY"),
    
    ENTITY_TYPE_UNCLASSIFIED("ENTITY_TYPE_UNCLASSIFIED");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_PARTNER_CLIENT_ID = "partnerClientId";
  @SerializedName(SERIALIZED_NAME_PARTNER_CLIENT_ID)
  private String partnerClientId;

  /**
   * The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of &#x60;CLIENT_DEAL_VIEWER&#x60;, &#x60;CLIENT_DEAL_NEGOTIATOR&#x60; or &#x60;CLIENT_DEAL_APPROVER&#x60;.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ROLE_UNSPECIFIED("CLIENT_ROLE_UNSPECIFIED"),
    
    DEAL_VIEWER("CLIENT_DEAL_VIEWER"),
    
    DEAL_NEGOTIATOR("CLIENT_DEAL_NEGOTIATOR"),
    
    DEAL_APPROVER("CLIENT_DEAL_APPROVER");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * The status of the client buyer.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CLIENT_STATUS_UNSPECIFIED("CLIENT_STATUS_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    ACTIVE("ACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VISIBLE_TO_SELLER = "visibleToSeller";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_SELLER)
  private Boolean visibleToSeller;

  public Client() {
  }

  public Client clientAccountId(String clientAccountId) {
    this.clientAccountId = clientAccountId;
    return this;
  }

  /**
   * The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations.
   * @return clientAccountId
   */
  @javax.annotation.Nullable
  public String getClientAccountId() {
    return clientAccountId;
  }

  public void setClientAccountId(String clientAccountId) {
    this.clientAccountId = clientAccountId;
  }


  public Client clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of &#x60;clientName&#x60; and entity must be unique. You can specify this field as empty. Maximum length of 255 characters is allowed.
   * @return clientName
   */
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public Client entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public Client entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

  /**
   * The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations.
   * @return entityName
   */
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public Client entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * An optional field for specifying the type of the client entity: &#x60;ADVERTISER&#x60;, &#x60;BRAND&#x60;, or &#x60;AGENCY&#x60;.
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public Client partnerClientId(String partnerClientId) {
    this.partnerClientId = partnerClientId;
    return this;
  }

  /**
   * Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.
   * @return partnerClientId
   */
  @javax.annotation.Nullable
  public String getPartnerClientId() {
    return partnerClientId;
  }

  public void setPartnerClientId(String partnerClientId) {
    this.partnerClientId = partnerClientId;
  }


  public Client role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of &#x60;CLIENT_DEAL_VIEWER&#x60;, &#x60;CLIENT_DEAL_NEGOTIATOR&#x60; or &#x60;CLIENT_DEAL_APPROVER&#x60;.
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public Client status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the client buyer.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Client visibleToSeller(Boolean visibleToSeller) {
    this.visibleToSeller = visibleToSeller;
    return this;
  }

  /**
   * Whether the client buyer will be visible to sellers.
   * @return visibleToSeller
   */
  @javax.annotation.Nullable
  public Boolean getVisibleToSeller() {
    return visibleToSeller;
  }

  public void setVisibleToSeller(Boolean visibleToSeller) {
    this.visibleToSeller = visibleToSeller;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Client client = (Client) o;
    return Objects.equals(this.clientAccountId, client.clientAccountId) &&
        Objects.equals(this.clientName, client.clientName) &&
        Objects.equals(this.entityId, client.entityId) &&
        Objects.equals(this.entityName, client.entityName) &&
        Objects.equals(this.entityType, client.entityType) &&
        Objects.equals(this.partnerClientId, client.partnerClientId) &&
        Objects.equals(this.role, client.role) &&
        Objects.equals(this.status, client.status) &&
        Objects.equals(this.visibleToSeller, client.visibleToSeller);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAccountId, clientName, entityId, entityName, entityType, partnerClientId, role, status, visibleToSeller);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Client {\n");
    sb.append("    clientAccountId: ").append(toIndentedString(clientAccountId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    partnerClientId: ").append(toIndentedString(partnerClientId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibleToSeller: ").append(toIndentedString(visibleToSeller)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientAccountId");
    openapiFields.add("clientName");
    openapiFields.add("entityId");
    openapiFields.add("entityName");
    openapiFields.add("entityType");
    openapiFields.add("partnerClientId");
    openapiFields.add("role");
    openapiFields.add("status");
    openapiFields.add("visibleToSeller");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Client
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Client.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Client is not found in the empty JSON string", Client.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Client.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Client` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientAccountId") != null && !jsonObj.get("clientAccountId").isJsonNull()) && !jsonObj.get("clientAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientAccountId").toString()));
      }
      if ((jsonObj.get("clientName") != null && !jsonObj.get("clientName").isJsonNull()) && !jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityName") != null && !jsonObj.get("entityName").isJsonNull()) && !jsonObj.get("entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityName").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      if ((jsonObj.get("partnerClientId") != null && !jsonObj.get("partnerClientId").isJsonNull()) && !jsonObj.get("partnerClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerClientId").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Client.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Client' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Client> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Client.class));

       return (TypeAdapter<T>) new TypeAdapter<Client>() {
           @Override
           public void write(JsonWriter out, Client value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Client read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Client given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Client
   * @throws IOException if the JSON string is invalid with respect to Client
   */
  public static Client fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Client.class);
  }

  /**
   * Convert an instance of Client to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

