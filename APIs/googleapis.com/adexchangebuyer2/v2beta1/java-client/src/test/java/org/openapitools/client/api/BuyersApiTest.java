/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FilterSet;
import org.openapitools.client.model.ListBidMetricsResponse;
import org.openapitools.client.model.ListBidResponseErrorsResponse;
import org.openapitools.client.model.ListBidResponsesWithoutBidsResponse;
import org.openapitools.client.model.ListCreativeStatusBreakdownByCreativeResponse;
import org.openapitools.client.model.ListCreativeStatusBreakdownByDetailResponse;
import org.openapitools.client.model.ListFilterSetsResponse;
import org.openapitools.client.model.ListFilteredBidRequestsResponse;
import org.openapitools.client.model.ListFilteredBidsResponse;
import org.openapitools.client.model.ListImpressionMetricsResponse;
import org.openapitools.client.model.ListLosingBidsResponse;
import org.openapitools.client.model.ListNonBillableWinningBidsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuyersApi
 */
@Disabled
public class BuyersApiTest {

    private final BuyersApi api = new BuyersApi();

    /**
     * Lists all metrics that are measured in terms of number of bids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsBidMetricsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBidMetricsResponse response = api.adexchangebuyer2BuyersFilterSetsBidMetricsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all errors that occurred in bid responses, with the number of bid responses affected for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsBidResponseErrorsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBidResponseErrorsResponse response = api.adexchangebuyer2BuyersFilterSetsBidResponseErrorsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBidResponsesWithoutBidsResponse response = api.adexchangebuyer2BuyersFilterSetsBidResponsesWithoutBidsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates the specified filter set for the account with the given account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsCreateTest() throws ApiException {
        String ownerName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean isTransient = null;
        FilterSet filterSet = null;
        FilterSet response = api.adexchangebuyer2BuyersFilterSetsCreate(ownerName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, isTransient, filterSet);
        // TODO: test validations
    }

    /**
     * Deletes the requested filter set from the account with the given account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.adexchangebuyer2BuyersFilterSetsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsFilteredBidRequestsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFilteredBidRequestsResponse response = api.adexchangebuyer2BuyersFilterSetsFilteredBidRequestsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesListTest() throws ApiException {
        String filterSetName = null;
        Integer creativeStatusId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCreativeStatusBreakdownByCreativeResponse response = api.adexchangebuyer2BuyersFilterSetsFilteredBidsCreativesList(filterSetName, creativeStatusId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsListTest() throws ApiException {
        String filterSetName = null;
        Integer creativeStatusId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCreativeStatusBreakdownByDetailResponse response = api.adexchangebuyer2BuyersFilterSetsFilteredBidsDetailsList(filterSetName, creativeStatusId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all reasons for which bids were filtered, with the number of bids filtered for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsFilteredBidsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFilteredBidsResponse response = api.adexchangebuyer2BuyersFilterSetsFilteredBidsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieves the requested filter set for the account with the given account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FilterSet response = api.adexchangebuyer2BuyersFilterSetsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all metrics that are measured in terms of number of impressions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsImpressionMetricsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListImpressionMetricsResponse response = api.adexchangebuyer2BuyersFilterSetsImpressionMetricsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all filter sets for the account with the given account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsListTest() throws ApiException {
        String ownerName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFilterSetsResponse response = api.adexchangebuyer2BuyersFilterSetsList(ownerName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsLosingBidsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLosingBidsResponse response = api.adexchangebuyer2BuyersFilterSetsLosingBidsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsListTest() throws ApiException {
        String filterSetName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNonBillableWinningBidsResponse response = api.adexchangebuyer2BuyersFilterSetsNonBillableWinningBidsList(filterSetName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
