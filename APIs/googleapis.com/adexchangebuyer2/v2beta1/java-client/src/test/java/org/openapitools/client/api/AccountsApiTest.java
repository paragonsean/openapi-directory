/*
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptProposalRequest;
import org.openapitools.client.model.AddDealAssociationRequest;
import org.openapitools.client.model.AddNoteRequest;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.ClientUser;
import org.openapitools.client.model.ClientUserInvitation;
import org.openapitools.client.model.Creative;
import org.openapitools.client.model.ListClientUserInvitationsResponse;
import org.openapitools.client.model.ListClientUsersResponse;
import org.openapitools.client.model.ListClientsResponse;
import org.openapitools.client.model.ListCreativesResponse;
import org.openapitools.client.model.ListDealAssociationsResponse;
import org.openapitools.client.model.ListProductsResponse;
import org.openapitools.client.model.ListProposalsResponse;
import org.openapitools.client.model.ListPublisherProfilesResponse;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.PauseProposalDealsRequest;
import org.openapitools.client.model.PauseProposalRequest;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.Proposal;
import org.openapitools.client.model.PublisherProfile;
import org.openapitools.client.model.RemoveDealAssociationRequest;
import org.openapitools.client.model.ResumeProposalDealsRequest;
import org.openapitools.client.model.WatchCreativeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Creates a new client buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Client client = null;
        Client response = api.adexchangebuyer2AccountsClientsCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, client);
        // TODO: test validations
    }

    /**
     * Gets a client buyer with a given client account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsGetTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Client response = api.adexchangebuyer2AccountsClientsGet(accountId, clientAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates and sends out an email invitation to access an Ad Exchange client buyer account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsInvitationsCreateTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientUserInvitation clientUserInvitation = null;
        ClientUserInvitation response = api.adexchangebuyer2AccountsClientsInvitationsCreate(accountId, clientAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientUserInvitation);
        // TODO: test validations
    }

    /**
     * Retrieves an existing client user invitation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsInvitationsGetTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String invitationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientUserInvitation response = api.adexchangebuyer2AccountsClientsInvitationsGet(accountId, clientAccountId, invitationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all the client users invitations for a client with a given account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsInvitationsListTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClientUserInvitationsResponse response = api.adexchangebuyer2AccountsClientsInvitationsList(accountId, clientAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all the clients for the current sponsor buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String partnerClientId = null;
        ListClientsResponse response = api.adexchangebuyer2AccountsClientsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, partnerClientId);
        // TODO: test validations
    }

    /**
     * Updates an existing client buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsUpdateTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Client client = null;
        Client response = api.adexchangebuyer2AccountsClientsUpdate(accountId, clientAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, client);
        // TODO: test validations
    }

    /**
     * Retrieves an existing client user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsUsersGetTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientUser response = api.adexchangebuyer2AccountsClientsUsersGet(accountId, clientAccountId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all the known client users for a specified sponsor buyer account ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsUsersListTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListClientUsersResponse response = api.adexchangebuyer2AccountsClientsUsersList(accountId, clientAccountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing client user. Only the user status can be changed on update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsClientsUsersUpdateTest() throws ApiException {
        String accountId = null;
        String clientAccountId = null;
        String userId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ClientUser clientUser = null;
        ClientUser response = api.adexchangebuyer2AccountsClientsUsersUpdate(accountId, clientAccountId, userId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, clientUser);
        // TODO: test validations
    }

    /**
     * Creates a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String duplicateIdMode = null;
        Creative creative = null;
        Creative response = api.adexchangebuyer2AccountsCreativesCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, duplicateIdMode, creative);
        // TODO: test validations
    }

    /**
     * Associate an existing deal with a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesDealAssociationsAddTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddDealAssociationRequest addDealAssociationRequest = null;
        Object response = api.adexchangebuyer2AccountsCreativesDealAssociationsAdd(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addDealAssociationRequest);
        // TODO: test validations
    }

    /**
     * List all creative-deal associations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesDealAssociationsListTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        ListDealAssociationsResponse response = api.adexchangebuyer2AccountsCreativesDealAssociationsList(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, query);
        // TODO: test validations
    }

    /**
     * Remove the association between a deal and a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesDealAssociationsRemoveTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveDealAssociationRequest removeDealAssociationRequest = null;
        Object response = api.adexchangebuyer2AccountsCreativesDealAssociationsRemove(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeDealAssociationRequest);
        // TODO: test validations
    }

    /**
     * Gets a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesGetTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Creative response = api.adexchangebuyer2AccountsCreativesGet(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists creatives.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        ListCreativesResponse response = api.adexchangebuyer2AccountsCreativesList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, query);
        // TODO: test validations
    }

    /**
     * Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesStopWatchingTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.adexchangebuyer2AccountsCreativesStopWatching(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Updates a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesUpdateTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Creative creative = null;
        Creative response = api.adexchangebuyer2AccountsCreativesUpdate(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, creative);
        // TODO: test validations
    }

    /**
     * Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsCreativesWatchTest() throws ApiException {
        String accountId = null;
        String creativeId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        WatchCreativeRequest watchCreativeRequest = null;
        Object response = api.adexchangebuyer2AccountsCreativesWatch(accountId, creativeId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, watchCreativeRequest);
        // TODO: test validations
    }

    /**
     * List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsFinalizedProposalsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String filterSyntax = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProposalsResponse response = api.adexchangebuyer2AccountsFinalizedProposalsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, filterSyntax, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update given deals to pause serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsFinalizedProposalsPauseTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PauseProposalDealsRequest pauseProposalDealsRequest = null;
        Proposal response = api.adexchangebuyer2AccountsFinalizedProposalsPause(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pauseProposalDealsRequest);
        // TODO: test validations
    }

    /**
     * Update given deals to resume serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsFinalizedProposalsResumeTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResumeProposalDealsRequest resumeProposalDealsRequest = null;
        Proposal response = api.adexchangebuyer2AccountsFinalizedProposalsResume(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resumeProposalDealsRequest);
        // TODO: test validations
    }

    /**
     * Gets the requested product by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProductsGetTest() throws ApiException {
        String accountId = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Product response = api.adexchangebuyer2AccountsProductsGet(accountId, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all products visible to the buyer (optionally filtered by the specified PQL query).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProductsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProductsResponse response = api.adexchangebuyer2AccountsProductsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Mark the proposal as accepted at the given revision number. If the number does not match the server&#39;s revision number an &#x60;ABORTED&#x60; error message will be returned. This call updates the proposal_state from &#x60;PROPOSED&#x60; to &#x60;BUYER_ACCEPTED&#x60;, or from &#x60;SELLER_ACCEPTED&#x60; to &#x60;FINALIZED&#x60;. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsAcceptTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AcceptProposalRequest acceptProposalRequest = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsAccept(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acceptProposalRequest);
        // TODO: test validations
    }

    /**
     * Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsAddNoteTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddNoteRequest addNoteRequest = null;
        Note response = api.adexchangebuyer2AccountsProposalsAddNote(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addNoteRequest);
        // TODO: test validations
    }

    /**
     * Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsCancelNegotiationTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsCancelNegotiation(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * You can opt-in to manually update proposals to indicate that setup is complete. By default, proposal setup is automatically completed after their deals are finalized. Contact your Technical Account Manager to opt in. Buyers can call this method when the proposal has been finalized, and all the required creatives have been uploaded using the Creatives API. This call updates the &#x60;is_setup_completed&#x60; field on the deals in the proposal, and notifies the seller. The server then advances the revision number of the most recent proposal. To mark an individual deal as ready to serve, call &#x60;buyers.finalizedDeals.setReadyToServe&#x60; in the Marketplace API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsCompleteSetupTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsCompleteSetup(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Proposal proposal = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, proposal);
        // TODO: test validations
    }

    /**
     * Gets a proposal given its ID. The proposal is returned at its head revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsGetTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsGet(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats&#39; proposals by specifying the ChildSeat&#39;s accountId in the request path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String filterSyntax = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProposalsResponse response = api.adexchangebuyer2AccountsProposalsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, filterSyntax, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update the given proposal to pause serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsPauseTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PauseProposalRequest pauseProposalRequest = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsPause(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pauseProposalRequest);
        // TODO: test validations
    }

    /**
     * Update the given proposal to resume serving. This method will set the &#x60;DealServingMetadata.DealPauseStatus.has_buyer_paused&#x60; bit to false for all deals in the proposal. Note that if the &#x60;has_seller_paused&#x60; bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsResumeTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsResume(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in &#x60;proposal.proposal_revision&#x60;, an &#x60;ABORTED&#x60; error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a &#x60;deal_id&#x60;, the server will assign a new unique ID and create the deal. If passed-in deal has a &#x60;deal_id&#x60;, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a &#x60;deal_id&#x60; not present at head.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsProposalsUpdateTest() throws ApiException {
        String accountId = null;
        String proposalId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Proposal proposal = null;
        Proposal response = api.adexchangebuyer2AccountsProposalsUpdate(accountId, proposalId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, proposal);
        // TODO: test validations
    }

    /**
     * Gets the requested publisher profile by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsPublisherProfilesGetTest() throws ApiException {
        String accountId = null;
        String publisherProfileId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublisherProfile response = api.adexchangebuyer2AccountsPublisherProfilesGet(accountId, publisherProfileId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all publisher profiles visible to the buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adexchangebuyer2AccountsPublisherProfilesListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPublisherProfilesResponse response = api.adexchangebuyer2AccountsPublisherProfilesList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
