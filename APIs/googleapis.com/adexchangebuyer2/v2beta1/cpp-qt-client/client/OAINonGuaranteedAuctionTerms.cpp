/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINonGuaranteedAuctionTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINonGuaranteedAuctionTerms::OAINonGuaranteedAuctionTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINonGuaranteedAuctionTerms::OAINonGuaranteedAuctionTerms() {
    this->initializeModel();
}

OAINonGuaranteedAuctionTerms::~OAINonGuaranteedAuctionTerms() {}

void OAINonGuaranteedAuctionTerms::initializeModel() {

    m_auto_optimize_private_auction_isSet = false;
    m_auto_optimize_private_auction_isValid = false;

    m_reserve_prices_per_buyer_isSet = false;
    m_reserve_prices_per_buyer_isValid = false;
}

void OAINonGuaranteedAuctionTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINonGuaranteedAuctionTerms::fromJsonObject(QJsonObject json) {

    m_auto_optimize_private_auction_isValid = ::OpenAPI::fromJsonValue(m_auto_optimize_private_auction, json[QString("autoOptimizePrivateAuction")]);
    m_auto_optimize_private_auction_isSet = !json[QString("autoOptimizePrivateAuction")].isNull() && m_auto_optimize_private_auction_isValid;

    m_reserve_prices_per_buyer_isValid = ::OpenAPI::fromJsonValue(m_reserve_prices_per_buyer, json[QString("reservePricesPerBuyer")]);
    m_reserve_prices_per_buyer_isSet = !json[QString("reservePricesPerBuyer")].isNull() && m_reserve_prices_per_buyer_isValid;
}

QString OAINonGuaranteedAuctionTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINonGuaranteedAuctionTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_optimize_private_auction_isSet) {
        obj.insert(QString("autoOptimizePrivateAuction"), ::OpenAPI::toJsonValue(m_auto_optimize_private_auction));
    }
    if (m_reserve_prices_per_buyer.size() > 0) {
        obj.insert(QString("reservePricesPerBuyer"), ::OpenAPI::toJsonValue(m_reserve_prices_per_buyer));
    }
    return obj;
}

bool OAINonGuaranteedAuctionTerms::isAutoOptimizePrivateAuction() const {
    return m_auto_optimize_private_auction;
}
void OAINonGuaranteedAuctionTerms::setAutoOptimizePrivateAuction(const bool &auto_optimize_private_auction) {
    m_auto_optimize_private_auction = auto_optimize_private_auction;
    m_auto_optimize_private_auction_isSet = true;
}

bool OAINonGuaranteedAuctionTerms::is_auto_optimize_private_auction_Set() const{
    return m_auto_optimize_private_auction_isSet;
}

bool OAINonGuaranteedAuctionTerms::is_auto_optimize_private_auction_Valid() const{
    return m_auto_optimize_private_auction_isValid;
}

QList<OAIPricePerBuyer> OAINonGuaranteedAuctionTerms::getReservePricesPerBuyer() const {
    return m_reserve_prices_per_buyer;
}
void OAINonGuaranteedAuctionTerms::setReservePricesPerBuyer(const QList<OAIPricePerBuyer> &reserve_prices_per_buyer) {
    m_reserve_prices_per_buyer = reserve_prices_per_buyer;
    m_reserve_prices_per_buyer_isSet = true;
}

bool OAINonGuaranteedAuctionTerms::is_reserve_prices_per_buyer_Set() const{
    return m_reserve_prices_per_buyer_isSet;
}

bool OAINonGuaranteedAuctionTerms::is_reserve_prices_per_buyer_Valid() const{
    return m_reserve_prices_per_buyer_isValid;
}

bool OAINonGuaranteedAuctionTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_optimize_private_auction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserve_prices_per_buyer.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINonGuaranteedAuctionTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
