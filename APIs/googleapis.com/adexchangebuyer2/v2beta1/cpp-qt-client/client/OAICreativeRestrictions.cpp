/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeRestrictions::OAICreativeRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeRestrictions::OAICreativeRestrictions() {
    this->initializeModel();
}

OAICreativeRestrictions::~OAICreativeRestrictions() {}

void OAICreativeRestrictions::initializeModel() {

    m_creative_format_isSet = false;
    m_creative_format_isValid = false;

    m_creative_specifications_isSet = false;
    m_creative_specifications_isValid = false;

    m_skippable_ad_type_isSet = false;
    m_skippable_ad_type_isValid = false;
}

void OAICreativeRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeRestrictions::fromJsonObject(QJsonObject json) {

    m_creative_format_isValid = ::OpenAPI::fromJsonValue(m_creative_format, json[QString("creativeFormat")]);
    m_creative_format_isSet = !json[QString("creativeFormat")].isNull() && m_creative_format_isValid;

    m_creative_specifications_isValid = ::OpenAPI::fromJsonValue(m_creative_specifications, json[QString("creativeSpecifications")]);
    m_creative_specifications_isSet = !json[QString("creativeSpecifications")].isNull() && m_creative_specifications_isValid;

    m_skippable_ad_type_isValid = ::OpenAPI::fromJsonValue(m_skippable_ad_type, json[QString("skippableAdType")]);
    m_skippable_ad_type_isSet = !json[QString("skippableAdType")].isNull() && m_skippable_ad_type_isValid;
}

QString OAICreativeRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_format_isSet) {
        obj.insert(QString("creativeFormat"), ::OpenAPI::toJsonValue(m_creative_format));
    }
    if (m_creative_specifications.size() > 0) {
        obj.insert(QString("creativeSpecifications"), ::OpenAPI::toJsonValue(m_creative_specifications));
    }
    if (m_skippable_ad_type_isSet) {
        obj.insert(QString("skippableAdType"), ::OpenAPI::toJsonValue(m_skippable_ad_type));
    }
    return obj;
}

QString OAICreativeRestrictions::getCreativeFormat() const {
    return m_creative_format;
}
void OAICreativeRestrictions::setCreativeFormat(const QString &creative_format) {
    m_creative_format = creative_format;
    m_creative_format_isSet = true;
}

bool OAICreativeRestrictions::is_creative_format_Set() const{
    return m_creative_format_isSet;
}

bool OAICreativeRestrictions::is_creative_format_Valid() const{
    return m_creative_format_isValid;
}

QList<OAICreativeSpecification> OAICreativeRestrictions::getCreativeSpecifications() const {
    return m_creative_specifications;
}
void OAICreativeRestrictions::setCreativeSpecifications(const QList<OAICreativeSpecification> &creative_specifications) {
    m_creative_specifications = creative_specifications;
    m_creative_specifications_isSet = true;
}

bool OAICreativeRestrictions::is_creative_specifications_Set() const{
    return m_creative_specifications_isSet;
}

bool OAICreativeRestrictions::is_creative_specifications_Valid() const{
    return m_creative_specifications_isValid;
}

QString OAICreativeRestrictions::getSkippableAdType() const {
    return m_skippable_ad_type;
}
void OAICreativeRestrictions::setSkippableAdType(const QString &skippable_ad_type) {
    m_skippable_ad_type = skippable_ad_type;
    m_skippable_ad_type_isSet = true;
}

bool OAICreativeRestrictions::is_skippable_ad_type_Set() const{
    return m_skippable_ad_type_isSet;
}

bool OAICreativeRestrictions::is_skippable_ad_type_Valid() const{
    return m_skippable_ad_type_isValid;
}

bool OAICreativeRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_ad_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
