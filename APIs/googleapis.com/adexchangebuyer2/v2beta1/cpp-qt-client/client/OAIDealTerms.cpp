/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealTerms::OAIDealTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealTerms::OAIDealTerms() {
    this->initializeModel();
}

OAIDealTerms::~OAIDealTerms() {}

void OAIDealTerms::initializeModel() {

    m_branding_type_isSet = false;
    m_branding_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimated_gross_spend_isSet = false;
    m_estimated_gross_spend_isValid = false;

    m_estimated_impressions_per_day_isSet = false;
    m_estimated_impressions_per_day_isValid = false;

    m_guaranteed_fixed_price_terms_isSet = false;
    m_guaranteed_fixed_price_terms_isValid = false;

    m_non_guaranteed_auction_terms_isSet = false;
    m_non_guaranteed_auction_terms_isValid = false;

    m_non_guaranteed_fixed_price_terms_isSet = false;
    m_non_guaranteed_fixed_price_terms_isValid = false;

    m_seller_time_zone_isSet = false;
    m_seller_time_zone_isValid = false;
}

void OAIDealTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealTerms::fromJsonObject(QJsonObject json) {

    m_branding_type_isValid = ::OpenAPI::fromJsonValue(m_branding_type, json[QString("brandingType")]);
    m_branding_type_isSet = !json[QString("brandingType")].isNull() && m_branding_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_estimated_gross_spend_isValid = ::OpenAPI::fromJsonValue(m_estimated_gross_spend, json[QString("estimatedGrossSpend")]);
    m_estimated_gross_spend_isSet = !json[QString("estimatedGrossSpend")].isNull() && m_estimated_gross_spend_isValid;

    m_estimated_impressions_per_day_isValid = ::OpenAPI::fromJsonValue(m_estimated_impressions_per_day, json[QString("estimatedImpressionsPerDay")]);
    m_estimated_impressions_per_day_isSet = !json[QString("estimatedImpressionsPerDay")].isNull() && m_estimated_impressions_per_day_isValid;

    m_guaranteed_fixed_price_terms_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_fixed_price_terms, json[QString("guaranteedFixedPriceTerms")]);
    m_guaranteed_fixed_price_terms_isSet = !json[QString("guaranteedFixedPriceTerms")].isNull() && m_guaranteed_fixed_price_terms_isValid;

    m_non_guaranteed_auction_terms_isValid = ::OpenAPI::fromJsonValue(m_non_guaranteed_auction_terms, json[QString("nonGuaranteedAuctionTerms")]);
    m_non_guaranteed_auction_terms_isSet = !json[QString("nonGuaranteedAuctionTerms")].isNull() && m_non_guaranteed_auction_terms_isValid;

    m_non_guaranteed_fixed_price_terms_isValid = ::OpenAPI::fromJsonValue(m_non_guaranteed_fixed_price_terms, json[QString("nonGuaranteedFixedPriceTerms")]);
    m_non_guaranteed_fixed_price_terms_isSet = !json[QString("nonGuaranteedFixedPriceTerms")].isNull() && m_non_guaranteed_fixed_price_terms_isValid;

    m_seller_time_zone_isValid = ::OpenAPI::fromJsonValue(m_seller_time_zone, json[QString("sellerTimeZone")]);
    m_seller_time_zone_isSet = !json[QString("sellerTimeZone")].isNull() && m_seller_time_zone_isValid;
}

QString OAIDealTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_branding_type_isSet) {
        obj.insert(QString("brandingType"), ::OpenAPI::toJsonValue(m_branding_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimated_gross_spend.isSet()) {
        obj.insert(QString("estimatedGrossSpend"), ::OpenAPI::toJsonValue(m_estimated_gross_spend));
    }
    if (m_estimated_impressions_per_day_isSet) {
        obj.insert(QString("estimatedImpressionsPerDay"), ::OpenAPI::toJsonValue(m_estimated_impressions_per_day));
    }
    if (m_guaranteed_fixed_price_terms.isSet()) {
        obj.insert(QString("guaranteedFixedPriceTerms"), ::OpenAPI::toJsonValue(m_guaranteed_fixed_price_terms));
    }
    if (m_non_guaranteed_auction_terms.isSet()) {
        obj.insert(QString("nonGuaranteedAuctionTerms"), ::OpenAPI::toJsonValue(m_non_guaranteed_auction_terms));
    }
    if (m_non_guaranteed_fixed_price_terms.isSet()) {
        obj.insert(QString("nonGuaranteedFixedPriceTerms"), ::OpenAPI::toJsonValue(m_non_guaranteed_fixed_price_terms));
    }
    if (m_seller_time_zone_isSet) {
        obj.insert(QString("sellerTimeZone"), ::OpenAPI::toJsonValue(m_seller_time_zone));
    }
    return obj;
}

QString OAIDealTerms::getBrandingType() const {
    return m_branding_type;
}
void OAIDealTerms::setBrandingType(const QString &branding_type) {
    m_branding_type = branding_type;
    m_branding_type_isSet = true;
}

bool OAIDealTerms::is_branding_type_Set() const{
    return m_branding_type_isSet;
}

bool OAIDealTerms::is_branding_type_Valid() const{
    return m_branding_type_isValid;
}

QString OAIDealTerms::getDescription() const {
    return m_description;
}
void OAIDealTerms::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDealTerms::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDealTerms::is_description_Valid() const{
    return m_description_isValid;
}

OAIPrice OAIDealTerms::getEstimatedGrossSpend() const {
    return m_estimated_gross_spend;
}
void OAIDealTerms::setEstimatedGrossSpend(const OAIPrice &estimated_gross_spend) {
    m_estimated_gross_spend = estimated_gross_spend;
    m_estimated_gross_spend_isSet = true;
}

bool OAIDealTerms::is_estimated_gross_spend_Set() const{
    return m_estimated_gross_spend_isSet;
}

bool OAIDealTerms::is_estimated_gross_spend_Valid() const{
    return m_estimated_gross_spend_isValid;
}

QString OAIDealTerms::getEstimatedImpressionsPerDay() const {
    return m_estimated_impressions_per_day;
}
void OAIDealTerms::setEstimatedImpressionsPerDay(const QString &estimated_impressions_per_day) {
    m_estimated_impressions_per_day = estimated_impressions_per_day;
    m_estimated_impressions_per_day_isSet = true;
}

bool OAIDealTerms::is_estimated_impressions_per_day_Set() const{
    return m_estimated_impressions_per_day_isSet;
}

bool OAIDealTerms::is_estimated_impressions_per_day_Valid() const{
    return m_estimated_impressions_per_day_isValid;
}

OAIGuaranteedFixedPriceTerms OAIDealTerms::getGuaranteedFixedPriceTerms() const {
    return m_guaranteed_fixed_price_terms;
}
void OAIDealTerms::setGuaranteedFixedPriceTerms(const OAIGuaranteedFixedPriceTerms &guaranteed_fixed_price_terms) {
    m_guaranteed_fixed_price_terms = guaranteed_fixed_price_terms;
    m_guaranteed_fixed_price_terms_isSet = true;
}

bool OAIDealTerms::is_guaranteed_fixed_price_terms_Set() const{
    return m_guaranteed_fixed_price_terms_isSet;
}

bool OAIDealTerms::is_guaranteed_fixed_price_terms_Valid() const{
    return m_guaranteed_fixed_price_terms_isValid;
}

OAINonGuaranteedAuctionTerms OAIDealTerms::getNonGuaranteedAuctionTerms() const {
    return m_non_guaranteed_auction_terms;
}
void OAIDealTerms::setNonGuaranteedAuctionTerms(const OAINonGuaranteedAuctionTerms &non_guaranteed_auction_terms) {
    m_non_guaranteed_auction_terms = non_guaranteed_auction_terms;
    m_non_guaranteed_auction_terms_isSet = true;
}

bool OAIDealTerms::is_non_guaranteed_auction_terms_Set() const{
    return m_non_guaranteed_auction_terms_isSet;
}

bool OAIDealTerms::is_non_guaranteed_auction_terms_Valid() const{
    return m_non_guaranteed_auction_terms_isValid;
}

OAINonGuaranteedFixedPriceTerms OAIDealTerms::getNonGuaranteedFixedPriceTerms() const {
    return m_non_guaranteed_fixed_price_terms;
}
void OAIDealTerms::setNonGuaranteedFixedPriceTerms(const OAINonGuaranteedFixedPriceTerms &non_guaranteed_fixed_price_terms) {
    m_non_guaranteed_fixed_price_terms = non_guaranteed_fixed_price_terms;
    m_non_guaranteed_fixed_price_terms_isSet = true;
}

bool OAIDealTerms::is_non_guaranteed_fixed_price_terms_Set() const{
    return m_non_guaranteed_fixed_price_terms_isSet;
}

bool OAIDealTerms::is_non_guaranteed_fixed_price_terms_Valid() const{
    return m_non_guaranteed_fixed_price_terms_isValid;
}

QString OAIDealTerms::getSellerTimeZone() const {
    return m_seller_time_zone;
}
void OAIDealTerms::setSellerTimeZone(const QString &seller_time_zone) {
    m_seller_time_zone = seller_time_zone;
    m_seller_time_zone_isSet = true;
}

bool OAIDealTerms::is_seller_time_zone_Set() const{
    return m_seller_time_zone_isSet;
}

bool OAIDealTerms::is_seller_time_zone_Valid() const{
    return m_seller_time_zone_isValid;
}

bool OAIDealTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branding_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_gross_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_impressions_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_fixed_price_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_guaranteed_auction_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_guaranteed_fixed_price_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
