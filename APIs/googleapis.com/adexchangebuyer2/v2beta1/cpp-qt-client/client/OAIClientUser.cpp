/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientUser::OAIClientUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientUser::OAIClientUser() {
    this->initializeModel();
}

OAIClientUser::~OAIClientUser() {}

void OAIClientUser::initializeModel() {

    m_client_account_id_isSet = false;
    m_client_account_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIClientUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientUser::fromJsonObject(QJsonObject json) {

    m_client_account_id_isValid = ::OpenAPI::fromJsonValue(m_client_account_id, json[QString("clientAccountId")]);
    m_client_account_id_isSet = !json[QString("clientAccountId")].isNull() && m_client_account_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIClientUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientUser::asJsonObject() const {
    QJsonObject obj;
    if (m_client_account_id_isSet) {
        obj.insert(QString("clientAccountId"), ::OpenAPI::toJsonValue(m_client_account_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIClientUser::getClientAccountId() const {
    return m_client_account_id;
}
void OAIClientUser::setClientAccountId(const QString &client_account_id) {
    m_client_account_id = client_account_id;
    m_client_account_id_isSet = true;
}

bool OAIClientUser::is_client_account_id_Set() const{
    return m_client_account_id_isSet;
}

bool OAIClientUser::is_client_account_id_Valid() const{
    return m_client_account_id_isValid;
}

QString OAIClientUser::getEmail() const {
    return m_email;
}
void OAIClientUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIClientUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIClientUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIClientUser::getStatus() const {
    return m_status;
}
void OAIClientUser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClientUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClientUser::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIClientUser::getUserId() const {
    return m_user_id;
}
void OAIClientUser::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIClientUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIClientUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIClientUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
