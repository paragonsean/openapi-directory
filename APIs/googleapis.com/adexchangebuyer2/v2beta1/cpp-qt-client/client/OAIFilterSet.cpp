/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterSet::OAIFilterSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterSet::OAIFilterSet() {
    this->initializeModel();
}

OAIFilterSet::~OAIFilterSet() {}

void OAIFilterSet::initializeModel() {

    m_absolute_date_range_isSet = false;
    m_absolute_date_range_isValid = false;

    m_breakdown_dimensions_isSet = false;
    m_breakdown_dimensions_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_publisher_identifiers_isSet = false;
    m_publisher_identifiers_isValid = false;

    m_realtime_time_range_isSet = false;
    m_realtime_time_range_isValid = false;

    m_relative_date_range_isSet = false;
    m_relative_date_range_isValid = false;

    m_seller_network_ids_isSet = false;
    m_seller_network_ids_isValid = false;

    m_time_series_granularity_isSet = false;
    m_time_series_granularity_isValid = false;
}

void OAIFilterSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterSet::fromJsonObject(QJsonObject json) {

    m_absolute_date_range_isValid = ::OpenAPI::fromJsonValue(m_absolute_date_range, json[QString("absoluteDateRange")]);
    m_absolute_date_range_isSet = !json[QString("absoluteDateRange")].isNull() && m_absolute_date_range_isValid;

    m_breakdown_dimensions_isValid = ::OpenAPI::fromJsonValue(m_breakdown_dimensions, json[QString("breakdownDimensions")]);
    m_breakdown_dimensions_isSet = !json[QString("breakdownDimensions")].isNull() && m_breakdown_dimensions_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_publisher_identifiers_isValid = ::OpenAPI::fromJsonValue(m_publisher_identifiers, json[QString("publisherIdentifiers")]);
    m_publisher_identifiers_isSet = !json[QString("publisherIdentifiers")].isNull() && m_publisher_identifiers_isValid;

    m_realtime_time_range_isValid = ::OpenAPI::fromJsonValue(m_realtime_time_range, json[QString("realtimeTimeRange")]);
    m_realtime_time_range_isSet = !json[QString("realtimeTimeRange")].isNull() && m_realtime_time_range_isValid;

    m_relative_date_range_isValid = ::OpenAPI::fromJsonValue(m_relative_date_range, json[QString("relativeDateRange")]);
    m_relative_date_range_isSet = !json[QString("relativeDateRange")].isNull() && m_relative_date_range_isValid;

    m_seller_network_ids_isValid = ::OpenAPI::fromJsonValue(m_seller_network_ids, json[QString("sellerNetworkIds")]);
    m_seller_network_ids_isSet = !json[QString("sellerNetworkIds")].isNull() && m_seller_network_ids_isValid;

    m_time_series_granularity_isValid = ::OpenAPI::fromJsonValue(m_time_series_granularity, json[QString("timeSeriesGranularity")]);
    m_time_series_granularity_isSet = !json[QString("timeSeriesGranularity")].isNull() && m_time_series_granularity_isValid;
}

QString OAIFilterSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterSet::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_date_range.isSet()) {
        obj.insert(QString("absoluteDateRange"), ::OpenAPI::toJsonValue(m_absolute_date_range));
    }
    if (m_breakdown_dimensions.size() > 0) {
        obj.insert(QString("breakdownDimensions"), ::OpenAPI::toJsonValue(m_breakdown_dimensions));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_publisher_identifiers.size() > 0) {
        obj.insert(QString("publisherIdentifiers"), ::OpenAPI::toJsonValue(m_publisher_identifiers));
    }
    if (m_realtime_time_range.isSet()) {
        obj.insert(QString("realtimeTimeRange"), ::OpenAPI::toJsonValue(m_realtime_time_range));
    }
    if (m_relative_date_range.isSet()) {
        obj.insert(QString("relativeDateRange"), ::OpenAPI::toJsonValue(m_relative_date_range));
    }
    if (m_seller_network_ids.size() > 0) {
        obj.insert(QString("sellerNetworkIds"), ::OpenAPI::toJsonValue(m_seller_network_ids));
    }
    if (m_time_series_granularity_isSet) {
        obj.insert(QString("timeSeriesGranularity"), ::OpenAPI::toJsonValue(m_time_series_granularity));
    }
    return obj;
}

OAIAbsoluteDateRange OAIFilterSet::getAbsoluteDateRange() const {
    return m_absolute_date_range;
}
void OAIFilterSet::setAbsoluteDateRange(const OAIAbsoluteDateRange &absolute_date_range) {
    m_absolute_date_range = absolute_date_range;
    m_absolute_date_range_isSet = true;
}

bool OAIFilterSet::is_absolute_date_range_Set() const{
    return m_absolute_date_range_isSet;
}

bool OAIFilterSet::is_absolute_date_range_Valid() const{
    return m_absolute_date_range_isValid;
}

QList<QString> OAIFilterSet::getBreakdownDimensions() const {
    return m_breakdown_dimensions;
}
void OAIFilterSet::setBreakdownDimensions(const QList<QString> &breakdown_dimensions) {
    m_breakdown_dimensions = breakdown_dimensions;
    m_breakdown_dimensions_isSet = true;
}

bool OAIFilterSet::is_breakdown_dimensions_Set() const{
    return m_breakdown_dimensions_isSet;
}

bool OAIFilterSet::is_breakdown_dimensions_Valid() const{
    return m_breakdown_dimensions_isValid;
}

QString OAIFilterSet::getCreativeId() const {
    return m_creative_id;
}
void OAIFilterSet::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAIFilterSet::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAIFilterSet::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

QString OAIFilterSet::getDealId() const {
    return m_deal_id;
}
void OAIFilterSet::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIFilterSet::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIFilterSet::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

QString OAIFilterSet::getEnvironment() const {
    return m_environment;
}
void OAIFilterSet::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIFilterSet::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIFilterSet::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIFilterSet::getFormat() const {
    return m_format;
}
void OAIFilterSet::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIFilterSet::is_format_Set() const{
    return m_format_isSet;
}

bool OAIFilterSet::is_format_Valid() const{
    return m_format_isValid;
}

QList<QString> OAIFilterSet::getFormats() const {
    return m_formats;
}
void OAIFilterSet::setFormats(const QList<QString> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIFilterSet::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIFilterSet::is_formats_Valid() const{
    return m_formats_isValid;
}

QString OAIFilterSet::getName() const {
    return m_name;
}
void OAIFilterSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFilterSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFilterSet::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIFilterSet::getPlatforms() const {
    return m_platforms;
}
void OAIFilterSet::setPlatforms(const QList<QString> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIFilterSet::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIFilterSet::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QList<QString> OAIFilterSet::getPublisherIdentifiers() const {
    return m_publisher_identifiers;
}
void OAIFilterSet::setPublisherIdentifiers(const QList<QString> &publisher_identifiers) {
    m_publisher_identifiers = publisher_identifiers;
    m_publisher_identifiers_isSet = true;
}

bool OAIFilterSet::is_publisher_identifiers_Set() const{
    return m_publisher_identifiers_isSet;
}

bool OAIFilterSet::is_publisher_identifiers_Valid() const{
    return m_publisher_identifiers_isValid;
}

OAIRealtimeTimeRange OAIFilterSet::getRealtimeTimeRange() const {
    return m_realtime_time_range;
}
void OAIFilterSet::setRealtimeTimeRange(const OAIRealtimeTimeRange &realtime_time_range) {
    m_realtime_time_range = realtime_time_range;
    m_realtime_time_range_isSet = true;
}

bool OAIFilterSet::is_realtime_time_range_Set() const{
    return m_realtime_time_range_isSet;
}

bool OAIFilterSet::is_realtime_time_range_Valid() const{
    return m_realtime_time_range_isValid;
}

OAIRelativeDateRange OAIFilterSet::getRelativeDateRange() const {
    return m_relative_date_range;
}
void OAIFilterSet::setRelativeDateRange(const OAIRelativeDateRange &relative_date_range) {
    m_relative_date_range = relative_date_range;
    m_relative_date_range_isSet = true;
}

bool OAIFilterSet::is_relative_date_range_Set() const{
    return m_relative_date_range_isSet;
}

bool OAIFilterSet::is_relative_date_range_Valid() const{
    return m_relative_date_range_isValid;
}

QList<qint32> OAIFilterSet::getSellerNetworkIds() const {
    return m_seller_network_ids;
}
void OAIFilterSet::setSellerNetworkIds(const QList<qint32> &seller_network_ids) {
    m_seller_network_ids = seller_network_ids;
    m_seller_network_ids_isSet = true;
}

bool OAIFilterSet::is_seller_network_ids_Set() const{
    return m_seller_network_ids_isSet;
}

bool OAIFilterSet::is_seller_network_ids_Valid() const{
    return m_seller_network_ids_isValid;
}

QString OAIFilterSet::getTimeSeriesGranularity() const {
    return m_time_series_granularity;
}
void OAIFilterSet::setTimeSeriesGranularity(const QString &time_series_granularity) {
    m_time_series_granularity = time_series_granularity;
    m_time_series_granularity_isSet = true;
}

bool OAIFilterSet::is_time_series_granularity_Set() const{
    return m_time_series_granularity_isSet;
}

bool OAIFilterSet::is_time_series_granularity_Valid() const{
    return m_time_series_granularity_isValid;
}

bool OAIFilterSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdown_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_network_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
