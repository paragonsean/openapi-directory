/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuaranteedFixedPriceTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuaranteedFixedPriceTerms::OAIGuaranteedFixedPriceTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuaranteedFixedPriceTerms::OAIGuaranteedFixedPriceTerms() {
    this->initializeModel();
}

OAIGuaranteedFixedPriceTerms::~OAIGuaranteedFixedPriceTerms() {}

void OAIGuaranteedFixedPriceTerms::initializeModel() {

    m_fixed_prices_isSet = false;
    m_fixed_prices_isValid = false;

    m_guaranteed_impressions_isSet = false;
    m_guaranteed_impressions_isValid = false;

    m_guaranteed_looks_isSet = false;
    m_guaranteed_looks_isValid = false;

    m_impression_cap_isSet = false;
    m_impression_cap_isValid = false;

    m_minimum_daily_looks_isSet = false;
    m_minimum_daily_looks_isValid = false;

    m_percent_share_of_voice_isSet = false;
    m_percent_share_of_voice_isValid = false;

    m_reservation_type_isSet = false;
    m_reservation_type_isValid = false;
}

void OAIGuaranteedFixedPriceTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuaranteedFixedPriceTerms::fromJsonObject(QJsonObject json) {

    m_fixed_prices_isValid = ::OpenAPI::fromJsonValue(m_fixed_prices, json[QString("fixedPrices")]);
    m_fixed_prices_isSet = !json[QString("fixedPrices")].isNull() && m_fixed_prices_isValid;

    m_guaranteed_impressions_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_impressions, json[QString("guaranteedImpressions")]);
    m_guaranteed_impressions_isSet = !json[QString("guaranteedImpressions")].isNull() && m_guaranteed_impressions_isValid;

    m_guaranteed_looks_isValid = ::OpenAPI::fromJsonValue(m_guaranteed_looks, json[QString("guaranteedLooks")]);
    m_guaranteed_looks_isSet = !json[QString("guaranteedLooks")].isNull() && m_guaranteed_looks_isValid;

    m_impression_cap_isValid = ::OpenAPI::fromJsonValue(m_impression_cap, json[QString("impressionCap")]);
    m_impression_cap_isSet = !json[QString("impressionCap")].isNull() && m_impression_cap_isValid;

    m_minimum_daily_looks_isValid = ::OpenAPI::fromJsonValue(m_minimum_daily_looks, json[QString("minimumDailyLooks")]);
    m_minimum_daily_looks_isSet = !json[QString("minimumDailyLooks")].isNull() && m_minimum_daily_looks_isValid;

    m_percent_share_of_voice_isValid = ::OpenAPI::fromJsonValue(m_percent_share_of_voice, json[QString("percentShareOfVoice")]);
    m_percent_share_of_voice_isSet = !json[QString("percentShareOfVoice")].isNull() && m_percent_share_of_voice_isValid;

    m_reservation_type_isValid = ::OpenAPI::fromJsonValue(m_reservation_type, json[QString("reservationType")]);
    m_reservation_type_isSet = !json[QString("reservationType")].isNull() && m_reservation_type_isValid;
}

QString OAIGuaranteedFixedPriceTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuaranteedFixedPriceTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_prices.size() > 0) {
        obj.insert(QString("fixedPrices"), ::OpenAPI::toJsonValue(m_fixed_prices));
    }
    if (m_guaranteed_impressions_isSet) {
        obj.insert(QString("guaranteedImpressions"), ::OpenAPI::toJsonValue(m_guaranteed_impressions));
    }
    if (m_guaranteed_looks_isSet) {
        obj.insert(QString("guaranteedLooks"), ::OpenAPI::toJsonValue(m_guaranteed_looks));
    }
    if (m_impression_cap_isSet) {
        obj.insert(QString("impressionCap"), ::OpenAPI::toJsonValue(m_impression_cap));
    }
    if (m_minimum_daily_looks_isSet) {
        obj.insert(QString("minimumDailyLooks"), ::OpenAPI::toJsonValue(m_minimum_daily_looks));
    }
    if (m_percent_share_of_voice_isSet) {
        obj.insert(QString("percentShareOfVoice"), ::OpenAPI::toJsonValue(m_percent_share_of_voice));
    }
    if (m_reservation_type_isSet) {
        obj.insert(QString("reservationType"), ::OpenAPI::toJsonValue(m_reservation_type));
    }
    return obj;
}

QList<OAIPricePerBuyer> OAIGuaranteedFixedPriceTerms::getFixedPrices() const {
    return m_fixed_prices;
}
void OAIGuaranteedFixedPriceTerms::setFixedPrices(const QList<OAIPricePerBuyer> &fixed_prices) {
    m_fixed_prices = fixed_prices;
    m_fixed_prices_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_fixed_prices_Set() const{
    return m_fixed_prices_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_fixed_prices_Valid() const{
    return m_fixed_prices_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getGuaranteedImpressions() const {
    return m_guaranteed_impressions;
}
void OAIGuaranteedFixedPriceTerms::setGuaranteedImpressions(const QString &guaranteed_impressions) {
    m_guaranteed_impressions = guaranteed_impressions;
    m_guaranteed_impressions_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_guaranteed_impressions_Set() const{
    return m_guaranteed_impressions_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_guaranteed_impressions_Valid() const{
    return m_guaranteed_impressions_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getGuaranteedLooks() const {
    return m_guaranteed_looks;
}
void OAIGuaranteedFixedPriceTerms::setGuaranteedLooks(const QString &guaranteed_looks) {
    m_guaranteed_looks = guaranteed_looks;
    m_guaranteed_looks_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_guaranteed_looks_Set() const{
    return m_guaranteed_looks_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_guaranteed_looks_Valid() const{
    return m_guaranteed_looks_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getImpressionCap() const {
    return m_impression_cap;
}
void OAIGuaranteedFixedPriceTerms::setImpressionCap(const QString &impression_cap) {
    m_impression_cap = impression_cap;
    m_impression_cap_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_impression_cap_Set() const{
    return m_impression_cap_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_impression_cap_Valid() const{
    return m_impression_cap_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getMinimumDailyLooks() const {
    return m_minimum_daily_looks;
}
void OAIGuaranteedFixedPriceTerms::setMinimumDailyLooks(const QString &minimum_daily_looks) {
    m_minimum_daily_looks = minimum_daily_looks;
    m_minimum_daily_looks_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_minimum_daily_looks_Set() const{
    return m_minimum_daily_looks_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_minimum_daily_looks_Valid() const{
    return m_minimum_daily_looks_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getPercentShareOfVoice() const {
    return m_percent_share_of_voice;
}
void OAIGuaranteedFixedPriceTerms::setPercentShareOfVoice(const QString &percent_share_of_voice) {
    m_percent_share_of_voice = percent_share_of_voice;
    m_percent_share_of_voice_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_percent_share_of_voice_Set() const{
    return m_percent_share_of_voice_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_percent_share_of_voice_Valid() const{
    return m_percent_share_of_voice_isValid;
}

QString OAIGuaranteedFixedPriceTerms::getReservationType() const {
    return m_reservation_type;
}
void OAIGuaranteedFixedPriceTerms::setReservationType(const QString &reservation_type) {
    m_reservation_type = reservation_type;
    m_reservation_type_isSet = true;
}

bool OAIGuaranteedFixedPriceTerms::is_reservation_type_Set() const{
    return m_reservation_type_isSet;
}

bool OAIGuaranteedFixedPriceTerms::is_reservation_type_Valid() const{
    return m_reservation_type_isValid;
}

bool OAIGuaranteedFixedPriceTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guaranteed_looks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_daily_looks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_share_of_voice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuaranteedFixedPriceTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
