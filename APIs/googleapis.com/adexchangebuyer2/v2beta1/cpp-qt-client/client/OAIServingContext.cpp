/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingContext::OAIServingContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingContext::OAIServingContext() {
    this->initializeModel();
}

OAIServingContext::~OAIServingContext() {}

void OAIServingContext::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_app_type_isSet = false;
    m_app_type_isValid = false;

    m_auction_type_isSet = false;
    m_auction_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_security_type_isSet = false;
    m_security_type_isValid = false;
}

void OAIServingContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingContext::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("appType")]);
    m_app_type_isSet = !json[QString("appType")].isNull() && m_app_type_isValid;

    m_auction_type_isValid = ::OpenAPI::fromJsonValue(m_auction_type, json[QString("auctionType")]);
    m_auction_type_isSet = !json[QString("auctionType")].isNull() && m_auction_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_security_type_isValid = ::OpenAPI::fromJsonValue(m_security_type, json[QString("securityType")]);
    m_security_type_isSet = !json[QString("securityType")].isNull() && m_security_type_isValid;
}

QString OAIServingContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingContext::asJsonObject() const {
    QJsonObject obj;
    if (m_all_isSet) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_app_type.isSet()) {
        obj.insert(QString("appType"), ::OpenAPI::toJsonValue(m_app_type));
    }
    if (m_auction_type.isSet()) {
        obj.insert(QString("auctionType"), ::OpenAPI::toJsonValue(m_auction_type));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_security_type.isSet()) {
        obj.insert(QString("securityType"), ::OpenAPI::toJsonValue(m_security_type));
    }
    return obj;
}

QString OAIServingContext::getAll() const {
    return m_all;
}
void OAIServingContext::setAll(const QString &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIServingContext::is_all_Set() const{
    return m_all_isSet;
}

bool OAIServingContext::is_all_Valid() const{
    return m_all_isValid;
}

OAIAppContext OAIServingContext::getAppType() const {
    return m_app_type;
}
void OAIServingContext::setAppType(const OAIAppContext &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAIServingContext::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAIServingContext::is_app_type_Valid() const{
    return m_app_type_isValid;
}

OAIAuctionContext OAIServingContext::getAuctionType() const {
    return m_auction_type;
}
void OAIServingContext::setAuctionType(const OAIAuctionContext &auction_type) {
    m_auction_type = auction_type;
    m_auction_type_isSet = true;
}

bool OAIServingContext::is_auction_type_Set() const{
    return m_auction_type_isSet;
}

bool OAIServingContext::is_auction_type_Valid() const{
    return m_auction_type_isValid;
}

OAILocationContext OAIServingContext::getLocation() const {
    return m_location;
}
void OAIServingContext::setLocation(const OAILocationContext &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIServingContext::is_location_Set() const{
    return m_location_isSet;
}

bool OAIServingContext::is_location_Valid() const{
    return m_location_isValid;
}

OAIPlatformContext OAIServingContext::getPlatform() const {
    return m_platform;
}
void OAIServingContext::setPlatform(const OAIPlatformContext &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIServingContext::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIServingContext::is_platform_Valid() const{
    return m_platform_isValid;
}

OAISecurityContext OAIServingContext::getSecurityType() const {
    return m_security_type;
}
void OAIServingContext::setSecurityType(const OAISecurityContext &security_type) {
    m_security_type = security_type;
    m_security_type_isSet = true;
}

bool OAIServingContext::is_security_type_Set() const{
    return m_security_type_isSet;
}

bool OAIServingContext::is_security_type_Valid() const{
    return m_security_type_isValid;
}

bool OAIServingContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
