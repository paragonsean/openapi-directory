/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeSize::OAICreativeSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeSize::OAICreativeSize() {
    this->initializeModel();
}

OAICreativeSize::~OAICreativeSize() {}

void OAICreativeSize::initializeModel() {

    m_allowed_formats_isSet = false;
    m_allowed_formats_isValid = false;

    m_companion_sizes_isSet = false;
    m_companion_sizes_isValid = false;

    m_creative_size_type_isSet = false;
    m_creative_size_type_isValid = false;

    m_native_template_isSet = false;
    m_native_template_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_skippable_ad_type_isSet = false;
    m_skippable_ad_type_isValid = false;
}

void OAICreativeSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeSize::fromJsonObject(QJsonObject json) {

    m_allowed_formats_isValid = ::OpenAPI::fromJsonValue(m_allowed_formats, json[QString("allowedFormats")]);
    m_allowed_formats_isSet = !json[QString("allowedFormats")].isNull() && m_allowed_formats_isValid;

    m_companion_sizes_isValid = ::OpenAPI::fromJsonValue(m_companion_sizes, json[QString("companionSizes")]);
    m_companion_sizes_isSet = !json[QString("companionSizes")].isNull() && m_companion_sizes_isValid;

    m_creative_size_type_isValid = ::OpenAPI::fromJsonValue(m_creative_size_type, json[QString("creativeSizeType")]);
    m_creative_size_type_isSet = !json[QString("creativeSizeType")].isNull() && m_creative_size_type_isValid;

    m_native_template_isValid = ::OpenAPI::fromJsonValue(m_native_template, json[QString("nativeTemplate")]);
    m_native_template_isSet = !json[QString("nativeTemplate")].isNull() && m_native_template_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_skippable_ad_type_isValid = ::OpenAPI::fromJsonValue(m_skippable_ad_type, json[QString("skippableAdType")]);
    m_skippable_ad_type_isSet = !json[QString("skippableAdType")].isNull() && m_skippable_ad_type_isValid;
}

QString OAICreativeSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeSize::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_formats.size() > 0) {
        obj.insert(QString("allowedFormats"), ::OpenAPI::toJsonValue(m_allowed_formats));
    }
    if (m_companion_sizes.size() > 0) {
        obj.insert(QString("companionSizes"), ::OpenAPI::toJsonValue(m_companion_sizes));
    }
    if (m_creative_size_type_isSet) {
        obj.insert(QString("creativeSizeType"), ::OpenAPI::toJsonValue(m_creative_size_type));
    }
    if (m_native_template_isSet) {
        obj.insert(QString("nativeTemplate"), ::OpenAPI::toJsonValue(m_native_template));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_skippable_ad_type_isSet) {
        obj.insert(QString("skippableAdType"), ::OpenAPI::toJsonValue(m_skippable_ad_type));
    }
    return obj;
}

QList<QString> OAICreativeSize::getAllowedFormats() const {
    return m_allowed_formats;
}
void OAICreativeSize::setAllowedFormats(const QList<QString> &allowed_formats) {
    m_allowed_formats = allowed_formats;
    m_allowed_formats_isSet = true;
}

bool OAICreativeSize::is_allowed_formats_Set() const{
    return m_allowed_formats_isSet;
}

bool OAICreativeSize::is_allowed_formats_Valid() const{
    return m_allowed_formats_isValid;
}

QList<OAISize> OAICreativeSize::getCompanionSizes() const {
    return m_companion_sizes;
}
void OAICreativeSize::setCompanionSizes(const QList<OAISize> &companion_sizes) {
    m_companion_sizes = companion_sizes;
    m_companion_sizes_isSet = true;
}

bool OAICreativeSize::is_companion_sizes_Set() const{
    return m_companion_sizes_isSet;
}

bool OAICreativeSize::is_companion_sizes_Valid() const{
    return m_companion_sizes_isValid;
}

QString OAICreativeSize::getCreativeSizeType() const {
    return m_creative_size_type;
}
void OAICreativeSize::setCreativeSizeType(const QString &creative_size_type) {
    m_creative_size_type = creative_size_type;
    m_creative_size_type_isSet = true;
}

bool OAICreativeSize::is_creative_size_type_Set() const{
    return m_creative_size_type_isSet;
}

bool OAICreativeSize::is_creative_size_type_Valid() const{
    return m_creative_size_type_isValid;
}

QString OAICreativeSize::getNativeTemplate() const {
    return m_native_template;
}
void OAICreativeSize::setNativeTemplate(const QString &native_template) {
    m_native_template = native_template;
    m_native_template_isSet = true;
}

bool OAICreativeSize::is_native_template_Set() const{
    return m_native_template_isSet;
}

bool OAICreativeSize::is_native_template_Valid() const{
    return m_native_template_isValid;
}

OAISize OAICreativeSize::getSize() const {
    return m_size;
}
void OAICreativeSize::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICreativeSize::is_size_Set() const{
    return m_size_isSet;
}

bool OAICreativeSize::is_size_Valid() const{
    return m_size_isValid;
}

QString OAICreativeSize::getSkippableAdType() const {
    return m_skippable_ad_type;
}
void OAICreativeSize::setSkippableAdType(const QString &skippable_ad_type) {
    m_skippable_ad_type = skippable_ad_type;
    m_skippable_ad_type_isSet = true;
}

bool OAICreativeSize::is_skippable_ad_type_Set() const{
    return m_skippable_ad_type_isSet;
}

bool OAICreativeSize::is_skippable_ad_type_Valid() const{
    return m_skippable_ad_type_isValid;
}

bool OAICreativeSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_companion_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_size_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skippable_ad_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
