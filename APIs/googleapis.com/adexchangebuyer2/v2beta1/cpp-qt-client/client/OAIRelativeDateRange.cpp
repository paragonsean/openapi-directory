/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelativeDateRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelativeDateRange::OAIRelativeDateRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelativeDateRange::OAIRelativeDateRange() {
    this->initializeModel();
}

OAIRelativeDateRange::~OAIRelativeDateRange() {}

void OAIRelativeDateRange::initializeModel() {

    m_duration_days_isSet = false;
    m_duration_days_isValid = false;

    m_offset_days_isSet = false;
    m_offset_days_isValid = false;
}

void OAIRelativeDateRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelativeDateRange::fromJsonObject(QJsonObject json) {

    m_duration_days_isValid = ::OpenAPI::fromJsonValue(m_duration_days, json[QString("durationDays")]);
    m_duration_days_isSet = !json[QString("durationDays")].isNull() && m_duration_days_isValid;

    m_offset_days_isValid = ::OpenAPI::fromJsonValue(m_offset_days, json[QString("offsetDays")]);
    m_offset_days_isSet = !json[QString("offsetDays")].isNull() && m_offset_days_isValid;
}

QString OAIRelativeDateRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelativeDateRange::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_days_isSet) {
        obj.insert(QString("durationDays"), ::OpenAPI::toJsonValue(m_duration_days));
    }
    if (m_offset_days_isSet) {
        obj.insert(QString("offsetDays"), ::OpenAPI::toJsonValue(m_offset_days));
    }
    return obj;
}

qint32 OAIRelativeDateRange::getDurationDays() const {
    return m_duration_days;
}
void OAIRelativeDateRange::setDurationDays(const qint32 &duration_days) {
    m_duration_days = duration_days;
    m_duration_days_isSet = true;
}

bool OAIRelativeDateRange::is_duration_days_Set() const{
    return m_duration_days_isSet;
}

bool OAIRelativeDateRange::is_duration_days_Valid() const{
    return m_duration_days_isValid;
}

qint32 OAIRelativeDateRange::getOffsetDays() const {
    return m_offset_days;
}
void OAIRelativeDateRange::setOffsetDays(const qint32 &offset_days) {
    m_offset_days = offset_days;
    m_offset_days_isSet = true;
}

bool OAIRelativeDateRange::is_offset_days_Set() const{
    return m_offset_days_isSet;
}

bool OAIRelativeDateRange::is_offset_days_Valid() const{
    return m_offset_days_isValid;
}

bool OAIRelativeDateRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelativeDateRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
