/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoTargeting::OAIVideoTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoTargeting::OAIVideoTargeting() {
    this->initializeModel();
}

OAIVideoTargeting::~OAIVideoTargeting() {}

void OAIVideoTargeting::initializeModel() {

    m_excluded_position_types_isSet = false;
    m_excluded_position_types_isValid = false;

    m_targeted_position_types_isSet = false;
    m_targeted_position_types_isValid = false;
}

void OAIVideoTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoTargeting::fromJsonObject(QJsonObject json) {

    m_excluded_position_types_isValid = ::OpenAPI::fromJsonValue(m_excluded_position_types, json[QString("excludedPositionTypes")]);
    m_excluded_position_types_isSet = !json[QString("excludedPositionTypes")].isNull() && m_excluded_position_types_isValid;

    m_targeted_position_types_isValid = ::OpenAPI::fromJsonValue(m_targeted_position_types, json[QString("targetedPositionTypes")]);
    m_targeted_position_types_isSet = !json[QString("targetedPositionTypes")].isNull() && m_targeted_position_types_isValid;
}

QString OAIVideoTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_position_types.size() > 0) {
        obj.insert(QString("excludedPositionTypes"), ::OpenAPI::toJsonValue(m_excluded_position_types));
    }
    if (m_targeted_position_types.size() > 0) {
        obj.insert(QString("targetedPositionTypes"), ::OpenAPI::toJsonValue(m_targeted_position_types));
    }
    return obj;
}

QList<QString> OAIVideoTargeting::getExcludedPositionTypes() const {
    return m_excluded_position_types;
}
void OAIVideoTargeting::setExcludedPositionTypes(const QList<QString> &excluded_position_types) {
    m_excluded_position_types = excluded_position_types;
    m_excluded_position_types_isSet = true;
}

bool OAIVideoTargeting::is_excluded_position_types_Set() const{
    return m_excluded_position_types_isSet;
}

bool OAIVideoTargeting::is_excluded_position_types_Valid() const{
    return m_excluded_position_types_isValid;
}

QList<QString> OAIVideoTargeting::getTargetedPositionTypes() const {
    return m_targeted_position_types;
}
void OAIVideoTargeting::setTargetedPositionTypes(const QList<QString> &targeted_position_types) {
    m_targeted_position_types = targeted_position_types;
    m_targeted_position_types_isSet = true;
}

bool OAIVideoTargeting::is_targeted_position_types_Set() const{
    return m_targeted_position_types_isSet;
}

bool OAIVideoTargeting::is_targeted_position_types_Valid() const{
    return m_targeted_position_types_isValid;
}

bool OAIVideoTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_position_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_position_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
