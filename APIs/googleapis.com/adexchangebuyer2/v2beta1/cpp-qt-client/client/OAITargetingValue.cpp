/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingValue::OAITargetingValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingValue::OAITargetingValue() {
    this->initializeModel();
}

OAITargetingValue::~OAITargetingValue() {}

void OAITargetingValue::initializeModel() {

    m_creative_size_value_isSet = false;
    m_creative_size_value_isValid = false;

    m_day_part_targeting_value_isSet = false;
    m_day_part_targeting_value_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAITargetingValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingValue::fromJsonObject(QJsonObject json) {

    m_creative_size_value_isValid = ::OpenAPI::fromJsonValue(m_creative_size_value, json[QString("creativeSizeValue")]);
    m_creative_size_value_isSet = !json[QString("creativeSizeValue")].isNull() && m_creative_size_value_isValid;

    m_day_part_targeting_value_isValid = ::OpenAPI::fromJsonValue(m_day_part_targeting_value, json[QString("dayPartTargetingValue")]);
    m_day_part_targeting_value_isSet = !json[QString("dayPartTargetingValue")].isNull() && m_day_part_targeting_value_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("longValue")]);
    m_long_value_isSet = !json[QString("longValue")].isNull() && m_long_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAITargetingValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingValue::asJsonObject() const {
    QJsonObject obj;
    if (m_creative_size_value.isSet()) {
        obj.insert(QString("creativeSizeValue"), ::OpenAPI::toJsonValue(m_creative_size_value));
    }
    if (m_day_part_targeting_value.isSet()) {
        obj.insert(QString("dayPartTargetingValue"), ::OpenAPI::toJsonValue(m_day_part_targeting_value));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("longValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

OAICreativeSize OAITargetingValue::getCreativeSizeValue() const {
    return m_creative_size_value;
}
void OAITargetingValue::setCreativeSizeValue(const OAICreativeSize &creative_size_value) {
    m_creative_size_value = creative_size_value;
    m_creative_size_value_isSet = true;
}

bool OAITargetingValue::is_creative_size_value_Set() const{
    return m_creative_size_value_isSet;
}

bool OAITargetingValue::is_creative_size_value_Valid() const{
    return m_creative_size_value_isValid;
}

OAIDayPartTargeting OAITargetingValue::getDayPartTargetingValue() const {
    return m_day_part_targeting_value;
}
void OAITargetingValue::setDayPartTargetingValue(const OAIDayPartTargeting &day_part_targeting_value) {
    m_day_part_targeting_value = day_part_targeting_value;
    m_day_part_targeting_value_isSet = true;
}

bool OAITargetingValue::is_day_part_targeting_value_Set() const{
    return m_day_part_targeting_value_isSet;
}

bool OAITargetingValue::is_day_part_targeting_value_Valid() const{
    return m_day_part_targeting_value_isValid;
}

QString OAITargetingValue::getLongValue() const {
    return m_long_value;
}
void OAITargetingValue::setLongValue(const QString &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAITargetingValue::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAITargetingValue::is_long_value_Valid() const{
    return m_long_value_isValid;
}

QString OAITargetingValue::getStringValue() const {
    return m_string_value;
}
void OAITargetingValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAITargetingValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAITargetingValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAITargetingValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creative_size_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_part_targeting_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
