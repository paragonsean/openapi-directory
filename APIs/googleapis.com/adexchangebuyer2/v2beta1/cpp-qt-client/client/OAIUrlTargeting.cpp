/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlTargeting::OAIUrlTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlTargeting::OAIUrlTargeting() {
    this->initializeModel();
}

OAIUrlTargeting::~OAIUrlTargeting() {}

void OAIUrlTargeting::initializeModel() {

    m_excluded_urls_isSet = false;
    m_excluded_urls_isValid = false;

    m_targeted_urls_isSet = false;
    m_targeted_urls_isValid = false;
}

void OAIUrlTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlTargeting::fromJsonObject(QJsonObject json) {

    m_excluded_urls_isValid = ::OpenAPI::fromJsonValue(m_excluded_urls, json[QString("excludedUrls")]);
    m_excluded_urls_isSet = !json[QString("excludedUrls")].isNull() && m_excluded_urls_isValid;

    m_targeted_urls_isValid = ::OpenAPI::fromJsonValue(m_targeted_urls, json[QString("targetedUrls")]);
    m_targeted_urls_isSet = !json[QString("targetedUrls")].isNull() && m_targeted_urls_isValid;
}

QString OAIUrlTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_urls.size() > 0) {
        obj.insert(QString("excludedUrls"), ::OpenAPI::toJsonValue(m_excluded_urls));
    }
    if (m_targeted_urls.size() > 0) {
        obj.insert(QString("targetedUrls"), ::OpenAPI::toJsonValue(m_targeted_urls));
    }
    return obj;
}

QList<QString> OAIUrlTargeting::getExcludedUrls() const {
    return m_excluded_urls;
}
void OAIUrlTargeting::setExcludedUrls(const QList<QString> &excluded_urls) {
    m_excluded_urls = excluded_urls;
    m_excluded_urls_isSet = true;
}

bool OAIUrlTargeting::is_excluded_urls_Set() const{
    return m_excluded_urls_isSet;
}

bool OAIUrlTargeting::is_excluded_urls_Valid() const{
    return m_excluded_urls_isValid;
}

QList<QString> OAIUrlTargeting::getTargetedUrls() const {
    return m_targeted_urls;
}
void OAIUrlTargeting::setTargetedUrls(const QList<QString> &targeted_urls) {
    m_targeted_urls = targeted_urls;
    m_targeted_urls_isSet = true;
}

bool OAIUrlTargeting::is_targeted_urls_Set() const{
    return m_targeted_urls_isSet;
}

bool OAIUrlTargeting::is_targeted_urls_Valid() const{
    return m_targeted_urls_isValid;
}

bool OAIUrlTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
