/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingRestriction::OAIServingRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingRestriction::OAIServingRestriction() {
    this->initializeModel();
}

OAIServingRestriction::~OAIServingRestriction() {}

void OAIServingRestriction::initializeModel() {

    m_contexts_isSet = false;
    m_contexts_isValid = false;

    m_disapproval_isSet = false;
    m_disapproval_isValid = false;

    m_disapproval_reasons_isSet = false;
    m_disapproval_reasons_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIServingRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingRestriction::fromJsonObject(QJsonObject json) {

    m_contexts_isValid = ::OpenAPI::fromJsonValue(m_contexts, json[QString("contexts")]);
    m_contexts_isSet = !json[QString("contexts")].isNull() && m_contexts_isValid;

    m_disapproval_isValid = ::OpenAPI::fromJsonValue(m_disapproval, json[QString("disapproval")]);
    m_disapproval_isSet = !json[QString("disapproval")].isNull() && m_disapproval_isValid;

    m_disapproval_reasons_isValid = ::OpenAPI::fromJsonValue(m_disapproval_reasons, json[QString("disapprovalReasons")]);
    m_disapproval_reasons_isSet = !json[QString("disapprovalReasons")].isNull() && m_disapproval_reasons_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIServingRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_contexts.size() > 0) {
        obj.insert(QString("contexts"), ::OpenAPI::toJsonValue(m_contexts));
    }
    if (m_disapproval.isSet()) {
        obj.insert(QString("disapproval"), ::OpenAPI::toJsonValue(m_disapproval));
    }
    if (m_disapproval_reasons.size() > 0) {
        obj.insert(QString("disapprovalReasons"), ::OpenAPI::toJsonValue(m_disapproval_reasons));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIServingContext> OAIServingRestriction::getContexts() const {
    return m_contexts;
}
void OAIServingRestriction::setContexts(const QList<OAIServingContext> &contexts) {
    m_contexts = contexts;
    m_contexts_isSet = true;
}

bool OAIServingRestriction::is_contexts_Set() const{
    return m_contexts_isSet;
}

bool OAIServingRestriction::is_contexts_Valid() const{
    return m_contexts_isValid;
}

OAIDisapproval OAIServingRestriction::getDisapproval() const {
    return m_disapproval;
}
void OAIServingRestriction::setDisapproval(const OAIDisapproval &disapproval) {
    m_disapproval = disapproval;
    m_disapproval_isSet = true;
}

bool OAIServingRestriction::is_disapproval_Set() const{
    return m_disapproval_isSet;
}

bool OAIServingRestriction::is_disapproval_Valid() const{
    return m_disapproval_isValid;
}

QList<OAIDisapproval> OAIServingRestriction::getDisapprovalReasons() const {
    return m_disapproval_reasons;
}
void OAIServingRestriction::setDisapprovalReasons(const QList<OAIDisapproval> &disapproval_reasons) {
    m_disapproval_reasons = disapproval_reasons;
    m_disapproval_reasons_isSet = true;
}

bool OAIServingRestriction::is_disapproval_reasons_Set() const{
    return m_disapproval_reasons_isSet;
}

bool OAIServingRestriction::is_disapproval_reasons_Valid() const{
    return m_disapproval_reasons_isValid;
}

QString OAIServingRestriction::getStatus() const {
    return m_status;
}
void OAIServingRestriction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServingRestriction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServingRestriction::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIServingRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disapproval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disapproval_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
