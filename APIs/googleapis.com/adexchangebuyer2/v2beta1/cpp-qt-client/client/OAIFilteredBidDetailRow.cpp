/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilteredBidDetailRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilteredBidDetailRow::OAIFilteredBidDetailRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilteredBidDetailRow::OAIFilteredBidDetailRow() {
    this->initializeModel();
}

OAIFilteredBidDetailRow::~OAIFilteredBidDetailRow() {}

void OAIFilteredBidDetailRow::initializeModel() {

    m_bid_count_isSet = false;
    m_bid_count_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_detail_id_isSet = false;
    m_detail_id_isValid = false;

    m_row_dimensions_isSet = false;
    m_row_dimensions_isValid = false;
}

void OAIFilteredBidDetailRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilteredBidDetailRow::fromJsonObject(QJsonObject json) {

    m_bid_count_isValid = ::OpenAPI::fromJsonValue(m_bid_count, json[QString("bidCount")]);
    m_bid_count_isSet = !json[QString("bidCount")].isNull() && m_bid_count_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_detail_id_isValid = ::OpenAPI::fromJsonValue(m_detail_id, json[QString("detailId")]);
    m_detail_id_isSet = !json[QString("detailId")].isNull() && m_detail_id_isValid;

    m_row_dimensions_isValid = ::OpenAPI::fromJsonValue(m_row_dimensions, json[QString("rowDimensions")]);
    m_row_dimensions_isSet = !json[QString("rowDimensions")].isNull() && m_row_dimensions_isValid;
}

QString OAIFilteredBidDetailRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilteredBidDetailRow::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_count.isSet()) {
        obj.insert(QString("bidCount"), ::OpenAPI::toJsonValue(m_bid_count));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_detail_id_isSet) {
        obj.insert(QString("detailId"), ::OpenAPI::toJsonValue(m_detail_id));
    }
    if (m_row_dimensions.isSet()) {
        obj.insert(QString("rowDimensions"), ::OpenAPI::toJsonValue(m_row_dimensions));
    }
    return obj;
}

OAIMetricValue OAIFilteredBidDetailRow::getBidCount() const {
    return m_bid_count;
}
void OAIFilteredBidDetailRow::setBidCount(const OAIMetricValue &bid_count) {
    m_bid_count = bid_count;
    m_bid_count_isSet = true;
}

bool OAIFilteredBidDetailRow::is_bid_count_Set() const{
    return m_bid_count_isSet;
}

bool OAIFilteredBidDetailRow::is_bid_count_Valid() const{
    return m_bid_count_isValid;
}

QString OAIFilteredBidDetailRow::getDetail() const {
    return m_detail;
}
void OAIFilteredBidDetailRow::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIFilteredBidDetailRow::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIFilteredBidDetailRow::is_detail_Valid() const{
    return m_detail_isValid;
}

qint32 OAIFilteredBidDetailRow::getDetailId() const {
    return m_detail_id;
}
void OAIFilteredBidDetailRow::setDetailId(const qint32 &detail_id) {
    m_detail_id = detail_id;
    m_detail_id_isSet = true;
}

bool OAIFilteredBidDetailRow::is_detail_id_Set() const{
    return m_detail_id_isSet;
}

bool OAIFilteredBidDetailRow::is_detail_id_Valid() const{
    return m_detail_id_isValid;
}

OAIRowDimensions OAIFilteredBidDetailRow::getRowDimensions() const {
    return m_row_dimensions;
}
void OAIFilteredBidDetailRow::setRowDimensions(const OAIRowDimensions &row_dimensions) {
    m_row_dimensions = row_dimensions;
    m_row_dimensions_isSet = true;
}

bool OAIFilteredBidDetailRow::is_row_dimensions_Set() const{
    return m_row_dimensions_isSet;
}

bool OAIFilteredBidDetailRow::is_row_dimensions_Valid() const{
    return m_row_dimensions_isValid;
}

bool OAIFilteredBidDetailRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilteredBidDetailRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
