/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilteredBidCreativeRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilteredBidCreativeRow::OAIFilteredBidCreativeRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilteredBidCreativeRow::OAIFilteredBidCreativeRow() {
    this->initializeModel();
}

OAIFilteredBidCreativeRow::~OAIFilteredBidCreativeRow() {}

void OAIFilteredBidCreativeRow::initializeModel() {

    m_bid_count_isSet = false;
    m_bid_count_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_row_dimensions_isSet = false;
    m_row_dimensions_isValid = false;
}

void OAIFilteredBidCreativeRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilteredBidCreativeRow::fromJsonObject(QJsonObject json) {

    m_bid_count_isValid = ::OpenAPI::fromJsonValue(m_bid_count, json[QString("bidCount")]);
    m_bid_count_isSet = !json[QString("bidCount")].isNull() && m_bid_count_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_row_dimensions_isValid = ::OpenAPI::fromJsonValue(m_row_dimensions, json[QString("rowDimensions")]);
    m_row_dimensions_isSet = !json[QString("rowDimensions")].isNull() && m_row_dimensions_isValid;
}

QString OAIFilteredBidCreativeRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilteredBidCreativeRow::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_count.isSet()) {
        obj.insert(QString("bidCount"), ::OpenAPI::toJsonValue(m_bid_count));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_row_dimensions.isSet()) {
        obj.insert(QString("rowDimensions"), ::OpenAPI::toJsonValue(m_row_dimensions));
    }
    return obj;
}

OAIMetricValue OAIFilteredBidCreativeRow::getBidCount() const {
    return m_bid_count;
}
void OAIFilteredBidCreativeRow::setBidCount(const OAIMetricValue &bid_count) {
    m_bid_count = bid_count;
    m_bid_count_isSet = true;
}

bool OAIFilteredBidCreativeRow::is_bid_count_Set() const{
    return m_bid_count_isSet;
}

bool OAIFilteredBidCreativeRow::is_bid_count_Valid() const{
    return m_bid_count_isValid;
}

QString OAIFilteredBidCreativeRow::getCreativeId() const {
    return m_creative_id;
}
void OAIFilteredBidCreativeRow::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAIFilteredBidCreativeRow::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAIFilteredBidCreativeRow::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

OAIRowDimensions OAIFilteredBidCreativeRow::getRowDimensions() const {
    return m_row_dimensions;
}
void OAIFilteredBidCreativeRow::setRowDimensions(const OAIRowDimensions &row_dimensions) {
    m_row_dimensions = row_dimensions;
    m_row_dimensions_isSet = true;
}

bool OAIFilteredBidCreativeRow::is_row_dimensions_Set() const{
    return m_row_dimensions_isSet;
}

bool OAIFilteredBidCreativeRow::is_row_dimensions_Valid() const{
    return m_row_dimensions_isValid;
}

bool OAIFilteredBidCreativeRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilteredBidCreativeRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
