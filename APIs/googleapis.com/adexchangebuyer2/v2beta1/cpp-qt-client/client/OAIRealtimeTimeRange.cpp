/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealtimeTimeRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealtimeTimeRange::OAIRealtimeTimeRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealtimeTimeRange::OAIRealtimeTimeRange() {
    this->initializeModel();
}

OAIRealtimeTimeRange::~OAIRealtimeTimeRange() {}

void OAIRealtimeTimeRange::initializeModel() {

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;
}

void OAIRealtimeTimeRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealtimeTimeRange::fromJsonObject(QJsonObject json) {

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("startTimestamp")]);
    m_start_timestamp_isSet = !json[QString("startTimestamp")].isNull() && m_start_timestamp_isValid;
}

QString OAIRealtimeTimeRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealtimeTimeRange::asJsonObject() const {
    QJsonObject obj;
    if (m_start_timestamp_isSet) {
        obj.insert(QString("startTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    return obj;
}

QString OAIRealtimeTimeRange::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIRealtimeTimeRange::setStartTimestamp(const QString &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIRealtimeTimeRange::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIRealtimeTimeRange::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

bool OAIRealtimeTimeRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealtimeTimeRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
