/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBidMetricsRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBidMetricsRow::OAIBidMetricsRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBidMetricsRow::OAIBidMetricsRow() {
    this->initializeModel();
}

OAIBidMetricsRow::~OAIBidMetricsRow() {}

void OAIBidMetricsRow::initializeModel() {

    m_bids_isSet = false;
    m_bids_isValid = false;

    m_bids_in_auction_isSet = false;
    m_bids_in_auction_isValid = false;

    m_billed_impressions_isSet = false;
    m_billed_impressions_isValid = false;

    m_impressions_won_isSet = false;
    m_impressions_won_isValid = false;

    m_measurable_impressions_isSet = false;
    m_measurable_impressions_isValid = false;

    m_reached_queries_isSet = false;
    m_reached_queries_isValid = false;

    m_row_dimensions_isSet = false;
    m_row_dimensions_isValid = false;

    m_viewable_impressions_isSet = false;
    m_viewable_impressions_isValid = false;
}

void OAIBidMetricsRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBidMetricsRow::fromJsonObject(QJsonObject json) {

    m_bids_isValid = ::OpenAPI::fromJsonValue(m_bids, json[QString("bids")]);
    m_bids_isSet = !json[QString("bids")].isNull() && m_bids_isValid;

    m_bids_in_auction_isValid = ::OpenAPI::fromJsonValue(m_bids_in_auction, json[QString("bidsInAuction")]);
    m_bids_in_auction_isSet = !json[QString("bidsInAuction")].isNull() && m_bids_in_auction_isValid;

    m_billed_impressions_isValid = ::OpenAPI::fromJsonValue(m_billed_impressions, json[QString("billedImpressions")]);
    m_billed_impressions_isSet = !json[QString("billedImpressions")].isNull() && m_billed_impressions_isValid;

    m_impressions_won_isValid = ::OpenAPI::fromJsonValue(m_impressions_won, json[QString("impressionsWon")]);
    m_impressions_won_isSet = !json[QString("impressionsWon")].isNull() && m_impressions_won_isValid;

    m_measurable_impressions_isValid = ::OpenAPI::fromJsonValue(m_measurable_impressions, json[QString("measurableImpressions")]);
    m_measurable_impressions_isSet = !json[QString("measurableImpressions")].isNull() && m_measurable_impressions_isValid;

    m_reached_queries_isValid = ::OpenAPI::fromJsonValue(m_reached_queries, json[QString("reachedQueries")]);
    m_reached_queries_isSet = !json[QString("reachedQueries")].isNull() && m_reached_queries_isValid;

    m_row_dimensions_isValid = ::OpenAPI::fromJsonValue(m_row_dimensions, json[QString("rowDimensions")]);
    m_row_dimensions_isSet = !json[QString("rowDimensions")].isNull() && m_row_dimensions_isValid;

    m_viewable_impressions_isValid = ::OpenAPI::fromJsonValue(m_viewable_impressions, json[QString("viewableImpressions")]);
    m_viewable_impressions_isSet = !json[QString("viewableImpressions")].isNull() && m_viewable_impressions_isValid;
}

QString OAIBidMetricsRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBidMetricsRow::asJsonObject() const {
    QJsonObject obj;
    if (m_bids.isSet()) {
        obj.insert(QString("bids"), ::OpenAPI::toJsonValue(m_bids));
    }
    if (m_bids_in_auction.isSet()) {
        obj.insert(QString("bidsInAuction"), ::OpenAPI::toJsonValue(m_bids_in_auction));
    }
    if (m_billed_impressions.isSet()) {
        obj.insert(QString("billedImpressions"), ::OpenAPI::toJsonValue(m_billed_impressions));
    }
    if (m_impressions_won.isSet()) {
        obj.insert(QString("impressionsWon"), ::OpenAPI::toJsonValue(m_impressions_won));
    }
    if (m_measurable_impressions.isSet()) {
        obj.insert(QString("measurableImpressions"), ::OpenAPI::toJsonValue(m_measurable_impressions));
    }
    if (m_reached_queries.isSet()) {
        obj.insert(QString("reachedQueries"), ::OpenAPI::toJsonValue(m_reached_queries));
    }
    if (m_row_dimensions.isSet()) {
        obj.insert(QString("rowDimensions"), ::OpenAPI::toJsonValue(m_row_dimensions));
    }
    if (m_viewable_impressions.isSet()) {
        obj.insert(QString("viewableImpressions"), ::OpenAPI::toJsonValue(m_viewable_impressions));
    }
    return obj;
}

OAIMetricValue OAIBidMetricsRow::getBids() const {
    return m_bids;
}
void OAIBidMetricsRow::setBids(const OAIMetricValue &bids) {
    m_bids = bids;
    m_bids_isSet = true;
}

bool OAIBidMetricsRow::is_bids_Set() const{
    return m_bids_isSet;
}

bool OAIBidMetricsRow::is_bids_Valid() const{
    return m_bids_isValid;
}

OAIMetricValue OAIBidMetricsRow::getBidsInAuction() const {
    return m_bids_in_auction;
}
void OAIBidMetricsRow::setBidsInAuction(const OAIMetricValue &bids_in_auction) {
    m_bids_in_auction = bids_in_auction;
    m_bids_in_auction_isSet = true;
}

bool OAIBidMetricsRow::is_bids_in_auction_Set() const{
    return m_bids_in_auction_isSet;
}

bool OAIBidMetricsRow::is_bids_in_auction_Valid() const{
    return m_bids_in_auction_isValid;
}

OAIMetricValue OAIBidMetricsRow::getBilledImpressions() const {
    return m_billed_impressions;
}
void OAIBidMetricsRow::setBilledImpressions(const OAIMetricValue &billed_impressions) {
    m_billed_impressions = billed_impressions;
    m_billed_impressions_isSet = true;
}

bool OAIBidMetricsRow::is_billed_impressions_Set() const{
    return m_billed_impressions_isSet;
}

bool OAIBidMetricsRow::is_billed_impressions_Valid() const{
    return m_billed_impressions_isValid;
}

OAIMetricValue OAIBidMetricsRow::getImpressionsWon() const {
    return m_impressions_won;
}
void OAIBidMetricsRow::setImpressionsWon(const OAIMetricValue &impressions_won) {
    m_impressions_won = impressions_won;
    m_impressions_won_isSet = true;
}

bool OAIBidMetricsRow::is_impressions_won_Set() const{
    return m_impressions_won_isSet;
}

bool OAIBidMetricsRow::is_impressions_won_Valid() const{
    return m_impressions_won_isValid;
}

OAIMetricValue OAIBidMetricsRow::getMeasurableImpressions() const {
    return m_measurable_impressions;
}
void OAIBidMetricsRow::setMeasurableImpressions(const OAIMetricValue &measurable_impressions) {
    m_measurable_impressions = measurable_impressions;
    m_measurable_impressions_isSet = true;
}

bool OAIBidMetricsRow::is_measurable_impressions_Set() const{
    return m_measurable_impressions_isSet;
}

bool OAIBidMetricsRow::is_measurable_impressions_Valid() const{
    return m_measurable_impressions_isValid;
}

OAIMetricValue OAIBidMetricsRow::getReachedQueries() const {
    return m_reached_queries;
}
void OAIBidMetricsRow::setReachedQueries(const OAIMetricValue &reached_queries) {
    m_reached_queries = reached_queries;
    m_reached_queries_isSet = true;
}

bool OAIBidMetricsRow::is_reached_queries_Set() const{
    return m_reached_queries_isSet;
}

bool OAIBidMetricsRow::is_reached_queries_Valid() const{
    return m_reached_queries_isValid;
}

OAIRowDimensions OAIBidMetricsRow::getRowDimensions() const {
    return m_row_dimensions;
}
void OAIBidMetricsRow::setRowDimensions(const OAIRowDimensions &row_dimensions) {
    m_row_dimensions = row_dimensions;
    m_row_dimensions_isSet = true;
}

bool OAIBidMetricsRow::is_row_dimensions_Set() const{
    return m_row_dimensions_isSet;
}

bool OAIBidMetricsRow::is_row_dimensions_Valid() const{
    return m_row_dimensions_isValid;
}

OAIMetricValue OAIBidMetricsRow::getViewableImpressions() const {
    return m_viewable_impressions;
}
void OAIBidMetricsRow::setViewableImpressions(const OAIMetricValue &viewable_impressions) {
    m_viewable_impressions = viewable_impressions;
    m_viewable_impressions_isSet = true;
}

bool OAIBidMetricsRow::is_viewable_impressions_Set() const{
    return m_viewable_impressions_isSet;
}

bool OAIBidMetricsRow::is_viewable_impressions_Valid() const{
    return m_viewable_impressions_isValid;
}

bool OAIBidMetricsRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bids_in_auction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_impressions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impressions_won.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurable_impressions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reached_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewable_impressions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBidMetricsRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
