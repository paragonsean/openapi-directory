/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProposal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProposal::OAIProposal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProposal::OAIProposal() {
    this->initializeModel();
}

OAIProposal::~OAIProposal() {}

void OAIProposal::initializeModel() {

    m_billed_buyer_isSet = false;
    m_billed_buyer_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_buyer_contacts_isSet = false;
    m_buyer_contacts_isValid = false;

    m_buyer_private_data_isSet = false;
    m_buyer_private_data_isValid = false;

    m_deals_isSet = false;
    m_deals_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_renegotiating_isSet = false;
    m_is_renegotiating_isValid = false;

    m_is_setup_complete_isSet = false;
    m_is_setup_complete_isValid = false;

    m_last_updater_or_commentor_role_isSet = false;
    m_last_updater_or_commentor_role_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_originator_role_isSet = false;
    m_originator_role_isValid = false;

    m_private_auction_id_isSet = false;
    m_private_auction_id_isValid = false;

    m_proposal_id_isSet = false;
    m_proposal_id_isValid = false;

    m_proposal_revision_isSet = false;
    m_proposal_revision_isValid = false;

    m_proposal_state_isSet = false;
    m_proposal_state_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_seller_contacts_isSet = false;
    m_seller_contacts_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIProposal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProposal::fromJsonObject(QJsonObject json) {

    m_billed_buyer_isValid = ::OpenAPI::fromJsonValue(m_billed_buyer, json[QString("billedBuyer")]);
    m_billed_buyer_isSet = !json[QString("billedBuyer")].isNull() && m_billed_buyer_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_buyer_contacts_isValid = ::OpenAPI::fromJsonValue(m_buyer_contacts, json[QString("buyerContacts")]);
    m_buyer_contacts_isSet = !json[QString("buyerContacts")].isNull() && m_buyer_contacts_isValid;

    m_buyer_private_data_isValid = ::OpenAPI::fromJsonValue(m_buyer_private_data, json[QString("buyerPrivateData")]);
    m_buyer_private_data_isSet = !json[QString("buyerPrivateData")].isNull() && m_buyer_private_data_isValid;

    m_deals_isValid = ::OpenAPI::fromJsonValue(m_deals, json[QString("deals")]);
    m_deals_isSet = !json[QString("deals")].isNull() && m_deals_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_renegotiating_isValid = ::OpenAPI::fromJsonValue(m_is_renegotiating, json[QString("isRenegotiating")]);
    m_is_renegotiating_isSet = !json[QString("isRenegotiating")].isNull() && m_is_renegotiating_isValid;

    m_is_setup_complete_isValid = ::OpenAPI::fromJsonValue(m_is_setup_complete, json[QString("isSetupComplete")]);
    m_is_setup_complete_isSet = !json[QString("isSetupComplete")].isNull() && m_is_setup_complete_isValid;

    m_last_updater_or_commentor_role_isValid = ::OpenAPI::fromJsonValue(m_last_updater_or_commentor_role, json[QString("lastUpdaterOrCommentorRole")]);
    m_last_updater_or_commentor_role_isSet = !json[QString("lastUpdaterOrCommentorRole")].isNull() && m_last_updater_or_commentor_role_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_originator_role_isValid = ::OpenAPI::fromJsonValue(m_originator_role, json[QString("originatorRole")]);
    m_originator_role_isSet = !json[QString("originatorRole")].isNull() && m_originator_role_isValid;

    m_private_auction_id_isValid = ::OpenAPI::fromJsonValue(m_private_auction_id, json[QString("privateAuctionId")]);
    m_private_auction_id_isSet = !json[QString("privateAuctionId")].isNull() && m_private_auction_id_isValid;

    m_proposal_id_isValid = ::OpenAPI::fromJsonValue(m_proposal_id, json[QString("proposalId")]);
    m_proposal_id_isSet = !json[QString("proposalId")].isNull() && m_proposal_id_isValid;

    m_proposal_revision_isValid = ::OpenAPI::fromJsonValue(m_proposal_revision, json[QString("proposalRevision")]);
    m_proposal_revision_isSet = !json[QString("proposalRevision")].isNull() && m_proposal_revision_isValid;

    m_proposal_state_isValid = ::OpenAPI::fromJsonValue(m_proposal_state, json[QString("proposalState")]);
    m_proposal_state_isSet = !json[QString("proposalState")].isNull() && m_proposal_state_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_seller_contacts_isValid = ::OpenAPI::fromJsonValue(m_seller_contacts, json[QString("sellerContacts")]);
    m_seller_contacts_isSet = !json[QString("sellerContacts")].isNull() && m_seller_contacts_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("termsAndConditions")]);
    m_terms_and_conditions_isSet = !json[QString("termsAndConditions")].isNull() && m_terms_and_conditions_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIProposal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProposal::asJsonObject() const {
    QJsonObject obj;
    if (m_billed_buyer.isSet()) {
        obj.insert(QString("billedBuyer"), ::OpenAPI::toJsonValue(m_billed_buyer));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_buyer_contacts.size() > 0) {
        obj.insert(QString("buyerContacts"), ::OpenAPI::toJsonValue(m_buyer_contacts));
    }
    if (m_buyer_private_data.isSet()) {
        obj.insert(QString("buyerPrivateData"), ::OpenAPI::toJsonValue(m_buyer_private_data));
    }
    if (m_deals.size() > 0) {
        obj.insert(QString("deals"), ::OpenAPI::toJsonValue(m_deals));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_renegotiating_isSet) {
        obj.insert(QString("isRenegotiating"), ::OpenAPI::toJsonValue(m_is_renegotiating));
    }
    if (m_is_setup_complete_isSet) {
        obj.insert(QString("isSetupComplete"), ::OpenAPI::toJsonValue(m_is_setup_complete));
    }
    if (m_last_updater_or_commentor_role_isSet) {
        obj.insert(QString("lastUpdaterOrCommentorRole"), ::OpenAPI::toJsonValue(m_last_updater_or_commentor_role));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_originator_role_isSet) {
        obj.insert(QString("originatorRole"), ::OpenAPI::toJsonValue(m_originator_role));
    }
    if (m_private_auction_id_isSet) {
        obj.insert(QString("privateAuctionId"), ::OpenAPI::toJsonValue(m_private_auction_id));
    }
    if (m_proposal_id_isSet) {
        obj.insert(QString("proposalId"), ::OpenAPI::toJsonValue(m_proposal_id));
    }
    if (m_proposal_revision_isSet) {
        obj.insert(QString("proposalRevision"), ::OpenAPI::toJsonValue(m_proposal_revision));
    }
    if (m_proposal_state_isSet) {
        obj.insert(QString("proposalState"), ::OpenAPI::toJsonValue(m_proposal_state));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_seller_contacts.size() > 0) {
        obj.insert(QString("sellerContacts"), ::OpenAPI::toJsonValue(m_seller_contacts));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("termsAndConditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIBuyer OAIProposal::getBilledBuyer() const {
    return m_billed_buyer;
}
void OAIProposal::setBilledBuyer(const OAIBuyer &billed_buyer) {
    m_billed_buyer = billed_buyer;
    m_billed_buyer_isSet = true;
}

bool OAIProposal::is_billed_buyer_Set() const{
    return m_billed_buyer_isSet;
}

bool OAIProposal::is_billed_buyer_Valid() const{
    return m_billed_buyer_isValid;
}

OAIBuyer OAIProposal::getBuyer() const {
    return m_buyer;
}
void OAIProposal::setBuyer(const OAIBuyer &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIProposal::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIProposal::is_buyer_Valid() const{
    return m_buyer_isValid;
}

QList<OAIContactInformation> OAIProposal::getBuyerContacts() const {
    return m_buyer_contacts;
}
void OAIProposal::setBuyerContacts(const QList<OAIContactInformation> &buyer_contacts) {
    m_buyer_contacts = buyer_contacts;
    m_buyer_contacts_isSet = true;
}

bool OAIProposal::is_buyer_contacts_Set() const{
    return m_buyer_contacts_isSet;
}

bool OAIProposal::is_buyer_contacts_Valid() const{
    return m_buyer_contacts_isValid;
}

OAIPrivateData OAIProposal::getBuyerPrivateData() const {
    return m_buyer_private_data;
}
void OAIProposal::setBuyerPrivateData(const OAIPrivateData &buyer_private_data) {
    m_buyer_private_data = buyer_private_data;
    m_buyer_private_data_isSet = true;
}

bool OAIProposal::is_buyer_private_data_Set() const{
    return m_buyer_private_data_isSet;
}

bool OAIProposal::is_buyer_private_data_Valid() const{
    return m_buyer_private_data_isValid;
}

QList<OAIDeal> OAIProposal::getDeals() const {
    return m_deals;
}
void OAIProposal::setDeals(const QList<OAIDeal> &deals) {
    m_deals = deals;
    m_deals_isSet = true;
}

bool OAIProposal::is_deals_Set() const{
    return m_deals_isSet;
}

bool OAIProposal::is_deals_Valid() const{
    return m_deals_isValid;
}

QString OAIProposal::getDisplayName() const {
    return m_display_name;
}
void OAIProposal::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProposal::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProposal::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIProposal::isIsRenegotiating() const {
    return m_is_renegotiating;
}
void OAIProposal::setIsRenegotiating(const bool &is_renegotiating) {
    m_is_renegotiating = is_renegotiating;
    m_is_renegotiating_isSet = true;
}

bool OAIProposal::is_is_renegotiating_Set() const{
    return m_is_renegotiating_isSet;
}

bool OAIProposal::is_is_renegotiating_Valid() const{
    return m_is_renegotiating_isValid;
}

bool OAIProposal::isIsSetupComplete() const {
    return m_is_setup_complete;
}
void OAIProposal::setIsSetupComplete(const bool &is_setup_complete) {
    m_is_setup_complete = is_setup_complete;
    m_is_setup_complete_isSet = true;
}

bool OAIProposal::is_is_setup_complete_Set() const{
    return m_is_setup_complete_isSet;
}

bool OAIProposal::is_is_setup_complete_Valid() const{
    return m_is_setup_complete_isValid;
}

QString OAIProposal::getLastUpdaterOrCommentorRole() const {
    return m_last_updater_or_commentor_role;
}
void OAIProposal::setLastUpdaterOrCommentorRole(const QString &last_updater_or_commentor_role) {
    m_last_updater_or_commentor_role = last_updater_or_commentor_role;
    m_last_updater_or_commentor_role_isSet = true;
}

bool OAIProposal::is_last_updater_or_commentor_role_Set() const{
    return m_last_updater_or_commentor_role_isSet;
}

bool OAIProposal::is_last_updater_or_commentor_role_Valid() const{
    return m_last_updater_or_commentor_role_isValid;
}

QList<OAINote> OAIProposal::getNotes() const {
    return m_notes;
}
void OAIProposal::setNotes(const QList<OAINote> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIProposal::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIProposal::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIProposal::getOriginatorRole() const {
    return m_originator_role;
}
void OAIProposal::setOriginatorRole(const QString &originator_role) {
    m_originator_role = originator_role;
    m_originator_role_isSet = true;
}

bool OAIProposal::is_originator_role_Set() const{
    return m_originator_role_isSet;
}

bool OAIProposal::is_originator_role_Valid() const{
    return m_originator_role_isValid;
}

QString OAIProposal::getPrivateAuctionId() const {
    return m_private_auction_id;
}
void OAIProposal::setPrivateAuctionId(const QString &private_auction_id) {
    m_private_auction_id = private_auction_id;
    m_private_auction_id_isSet = true;
}

bool OAIProposal::is_private_auction_id_Set() const{
    return m_private_auction_id_isSet;
}

bool OAIProposal::is_private_auction_id_Valid() const{
    return m_private_auction_id_isValid;
}

QString OAIProposal::getProposalId() const {
    return m_proposal_id;
}
void OAIProposal::setProposalId(const QString &proposal_id) {
    m_proposal_id = proposal_id;
    m_proposal_id_isSet = true;
}

bool OAIProposal::is_proposal_id_Set() const{
    return m_proposal_id_isSet;
}

bool OAIProposal::is_proposal_id_Valid() const{
    return m_proposal_id_isValid;
}

QString OAIProposal::getProposalRevision() const {
    return m_proposal_revision;
}
void OAIProposal::setProposalRevision(const QString &proposal_revision) {
    m_proposal_revision = proposal_revision;
    m_proposal_revision_isSet = true;
}

bool OAIProposal::is_proposal_revision_Set() const{
    return m_proposal_revision_isSet;
}

bool OAIProposal::is_proposal_revision_Valid() const{
    return m_proposal_revision_isValid;
}

QString OAIProposal::getProposalState() const {
    return m_proposal_state;
}
void OAIProposal::setProposalState(const QString &proposal_state) {
    m_proposal_state = proposal_state;
    m_proposal_state_isSet = true;
}

bool OAIProposal::is_proposal_state_Set() const{
    return m_proposal_state_isSet;
}

bool OAIProposal::is_proposal_state_Valid() const{
    return m_proposal_state_isValid;
}

OAISeller OAIProposal::getSeller() const {
    return m_seller;
}
void OAIProposal::setSeller(const OAISeller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIProposal::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIProposal::is_seller_Valid() const{
    return m_seller_isValid;
}

QList<OAIContactInformation> OAIProposal::getSellerContacts() const {
    return m_seller_contacts;
}
void OAIProposal::setSellerContacts(const QList<OAIContactInformation> &seller_contacts) {
    m_seller_contacts = seller_contacts;
    m_seller_contacts_isSet = true;
}

bool OAIProposal::is_seller_contacts_Set() const{
    return m_seller_contacts_isSet;
}

bool OAIProposal::is_seller_contacts_Valid() const{
    return m_seller_contacts_isValid;
}

QString OAIProposal::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIProposal::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIProposal::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIProposal::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

QString OAIProposal::getUpdateTime() const {
    return m_update_time;
}
void OAIProposal::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIProposal::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIProposal::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIProposal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billed_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_private_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_renegotiating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_setup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_or_commentor_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_auction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProposal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
