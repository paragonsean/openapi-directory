/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative::OAICreative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative::OAICreative() {
    this->initializeModel();
}

OAICreative::~OAICreative() {}

void OAICreative::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ad_choices_destination_url_isSet = false;
    m_ad_choices_destination_url_isValid = false;

    m_ad_technology_providers_isSet = false;
    m_ad_technology_providers_isValid = false;

    m_advertiser_name_isSet = false;
    m_advertiser_name_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_api_update_time_isSet = false;
    m_api_update_time_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_click_through_urls_isSet = false;
    m_click_through_urls_isValid = false;

    m_corrections_isSet = false;
    m_corrections_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_deals_status_isSet = false;
    m_deals_status_isValid = false;

    m_declared_click_through_urls_isSet = false;
    m_declared_click_through_urls_isValid = false;

    m_detected_advertiser_ids_isSet = false;
    m_detected_advertiser_ids_isValid = false;

    m_detected_domains_isSet = false;
    m_detected_domains_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_detected_product_categories_isSet = false;
    m_detected_product_categories_isValid = false;

    m_detected_sensitive_categories_isSet = false;
    m_detected_sensitive_categories_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_impression_tracking_urls_isSet = false;
    m_impression_tracking_urls_isValid = false;

    m_native_isSet = false;
    m_native_isValid = false;

    m_open_auction_status_isSet = false;
    m_open_auction_status_isValid = false;

    m_restricted_categories_isSet = false;
    m_restricted_categories_isValid = false;

    m_serving_restrictions_isSet = false;
    m_serving_restrictions_isValid = false;

    m_vendor_ids_isSet = false;
    m_vendor_ids_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAICreative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ad_choices_destination_url_isValid = ::OpenAPI::fromJsonValue(m_ad_choices_destination_url, json[QString("adChoicesDestinationUrl")]);
    m_ad_choices_destination_url_isSet = !json[QString("adChoicesDestinationUrl")].isNull() && m_ad_choices_destination_url_isValid;

    m_ad_technology_providers_isValid = ::OpenAPI::fromJsonValue(m_ad_technology_providers, json[QString("adTechnologyProviders")]);
    m_ad_technology_providers_isSet = !json[QString("adTechnologyProviders")].isNull() && m_ad_technology_providers_isValid;

    m_advertiser_name_isValid = ::OpenAPI::fromJsonValue(m_advertiser_name, json[QString("advertiserName")]);
    m_advertiser_name_isSet = !json[QString("advertiserName")].isNull() && m_advertiser_name_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_api_update_time_isValid = ::OpenAPI::fromJsonValue(m_api_update_time, json[QString("apiUpdateTime")]);
    m_api_update_time_isSet = !json[QString("apiUpdateTime")].isNull() && m_api_update_time_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_click_through_urls_isValid = ::OpenAPI::fromJsonValue(m_click_through_urls, json[QString("clickThroughUrls")]);
    m_click_through_urls_isSet = !json[QString("clickThroughUrls")].isNull() && m_click_through_urls_isValid;

    m_corrections_isValid = ::OpenAPI::fromJsonValue(m_corrections, json[QString("corrections")]);
    m_corrections_isSet = !json[QString("corrections")].isNull() && m_corrections_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_deals_status_isValid = ::OpenAPI::fromJsonValue(m_deals_status, json[QString("dealsStatus")]);
    m_deals_status_isSet = !json[QString("dealsStatus")].isNull() && m_deals_status_isValid;

    m_declared_click_through_urls_isValid = ::OpenAPI::fromJsonValue(m_declared_click_through_urls, json[QString("declaredClickThroughUrls")]);
    m_declared_click_through_urls_isSet = !json[QString("declaredClickThroughUrls")].isNull() && m_declared_click_through_urls_isValid;

    m_detected_advertiser_ids_isValid = ::OpenAPI::fromJsonValue(m_detected_advertiser_ids, json[QString("detectedAdvertiserIds")]);
    m_detected_advertiser_ids_isSet = !json[QString("detectedAdvertiserIds")].isNull() && m_detected_advertiser_ids_isValid;

    m_detected_domains_isValid = ::OpenAPI::fromJsonValue(m_detected_domains, json[QString("detectedDomains")]);
    m_detected_domains_isSet = !json[QString("detectedDomains")].isNull() && m_detected_domains_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_detected_product_categories_isValid = ::OpenAPI::fromJsonValue(m_detected_product_categories, json[QString("detectedProductCategories")]);
    m_detected_product_categories_isSet = !json[QString("detectedProductCategories")].isNull() && m_detected_product_categories_isValid;

    m_detected_sensitive_categories_isValid = ::OpenAPI::fromJsonValue(m_detected_sensitive_categories, json[QString("detectedSensitiveCategories")]);
    m_detected_sensitive_categories_isSet = !json[QString("detectedSensitiveCategories")].isNull() && m_detected_sensitive_categories_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_impression_tracking_urls_isValid = ::OpenAPI::fromJsonValue(m_impression_tracking_urls, json[QString("impressionTrackingUrls")]);
    m_impression_tracking_urls_isSet = !json[QString("impressionTrackingUrls")].isNull() && m_impression_tracking_urls_isValid;

    m_native_isValid = ::OpenAPI::fromJsonValue(m_native, json[QString("native")]);
    m_native_isSet = !json[QString("native")].isNull() && m_native_isValid;

    m_open_auction_status_isValid = ::OpenAPI::fromJsonValue(m_open_auction_status, json[QString("openAuctionStatus")]);
    m_open_auction_status_isSet = !json[QString("openAuctionStatus")].isNull() && m_open_auction_status_isValid;

    m_restricted_categories_isValid = ::OpenAPI::fromJsonValue(m_restricted_categories, json[QString("restrictedCategories")]);
    m_restricted_categories_isSet = !json[QString("restrictedCategories")].isNull() && m_restricted_categories_isValid;

    m_serving_restrictions_isValid = ::OpenAPI::fromJsonValue(m_serving_restrictions, json[QString("servingRestrictions")]);
    m_serving_restrictions_isSet = !json[QString("servingRestrictions")].isNull() && m_serving_restrictions_isValid;

    m_vendor_ids_isValid = ::OpenAPI::fromJsonValue(m_vendor_ids, json[QString("vendorIds")]);
    m_vendor_ids_isSet = !json[QString("vendorIds")].isNull() && m_vendor_ids_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAICreative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ad_choices_destination_url_isSet) {
        obj.insert(QString("adChoicesDestinationUrl"), ::OpenAPI::toJsonValue(m_ad_choices_destination_url));
    }
    if (m_ad_technology_providers.isSet()) {
        obj.insert(QString("adTechnologyProviders"), ::OpenAPI::toJsonValue(m_ad_technology_providers));
    }
    if (m_advertiser_name_isSet) {
        obj.insert(QString("advertiserName"), ::OpenAPI::toJsonValue(m_advertiser_name));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_api_update_time_isSet) {
        obj.insert(QString("apiUpdateTime"), ::OpenAPI::toJsonValue(m_api_update_time));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_click_through_urls.size() > 0) {
        obj.insert(QString("clickThroughUrls"), ::OpenAPI::toJsonValue(m_click_through_urls));
    }
    if (m_corrections.size() > 0) {
        obj.insert(QString("corrections"), ::OpenAPI::toJsonValue(m_corrections));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_deals_status_isSet) {
        obj.insert(QString("dealsStatus"), ::OpenAPI::toJsonValue(m_deals_status));
    }
    if (m_declared_click_through_urls.size() > 0) {
        obj.insert(QString("declaredClickThroughUrls"), ::OpenAPI::toJsonValue(m_declared_click_through_urls));
    }
    if (m_detected_advertiser_ids.size() > 0) {
        obj.insert(QString("detectedAdvertiserIds"), ::OpenAPI::toJsonValue(m_detected_advertiser_ids));
    }
    if (m_detected_domains.size() > 0) {
        obj.insert(QString("detectedDomains"), ::OpenAPI::toJsonValue(m_detected_domains));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_detected_product_categories.size() > 0) {
        obj.insert(QString("detectedProductCategories"), ::OpenAPI::toJsonValue(m_detected_product_categories));
    }
    if (m_detected_sensitive_categories.size() > 0) {
        obj.insert(QString("detectedSensitiveCategories"), ::OpenAPI::toJsonValue(m_detected_sensitive_categories));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_impression_tracking_urls.size() > 0) {
        obj.insert(QString("impressionTrackingUrls"), ::OpenAPI::toJsonValue(m_impression_tracking_urls));
    }
    if (m_native.isSet()) {
        obj.insert(QString("native"), ::OpenAPI::toJsonValue(m_native));
    }
    if (m_open_auction_status_isSet) {
        obj.insert(QString("openAuctionStatus"), ::OpenAPI::toJsonValue(m_open_auction_status));
    }
    if (m_restricted_categories.size() > 0) {
        obj.insert(QString("restrictedCategories"), ::OpenAPI::toJsonValue(m_restricted_categories));
    }
    if (m_serving_restrictions.size() > 0) {
        obj.insert(QString("servingRestrictions"), ::OpenAPI::toJsonValue(m_serving_restrictions));
    }
    if (m_vendor_ids.size() > 0) {
        obj.insert(QString("vendorIds"), ::OpenAPI::toJsonValue(m_vendor_ids));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

QString OAICreative::getAccountId() const {
    return m_account_id;
}
void OAICreative::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreative::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreative::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICreative::getAdChoicesDestinationUrl() const {
    return m_ad_choices_destination_url;
}
void OAICreative::setAdChoicesDestinationUrl(const QString &ad_choices_destination_url) {
    m_ad_choices_destination_url = ad_choices_destination_url;
    m_ad_choices_destination_url_isSet = true;
}

bool OAICreative::is_ad_choices_destination_url_Set() const{
    return m_ad_choices_destination_url_isSet;
}

bool OAICreative::is_ad_choices_destination_url_Valid() const{
    return m_ad_choices_destination_url_isValid;
}

OAIAdTechnologyProviders OAICreative::getAdTechnologyProviders() const {
    return m_ad_technology_providers;
}
void OAICreative::setAdTechnologyProviders(const OAIAdTechnologyProviders &ad_technology_providers) {
    m_ad_technology_providers = ad_technology_providers;
    m_ad_technology_providers_isSet = true;
}

bool OAICreative::is_ad_technology_providers_Set() const{
    return m_ad_technology_providers_isSet;
}

bool OAICreative::is_ad_technology_providers_Valid() const{
    return m_ad_technology_providers_isValid;
}

QString OAICreative::getAdvertiserName() const {
    return m_advertiser_name;
}
void OAICreative::setAdvertiserName(const QString &advertiser_name) {
    m_advertiser_name = advertiser_name;
    m_advertiser_name_isSet = true;
}

bool OAICreative::is_advertiser_name_Set() const{
    return m_advertiser_name_isSet;
}

bool OAICreative::is_advertiser_name_Valid() const{
    return m_advertiser_name_isValid;
}

QString OAICreative::getAgencyId() const {
    return m_agency_id;
}
void OAICreative::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAICreative::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAICreative::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QString OAICreative::getApiUpdateTime() const {
    return m_api_update_time;
}
void OAICreative::setApiUpdateTime(const QString &api_update_time) {
    m_api_update_time = api_update_time;
    m_api_update_time_isSet = true;
}

bool OAICreative::is_api_update_time_Set() const{
    return m_api_update_time_isSet;
}

bool OAICreative::is_api_update_time_Valid() const{
    return m_api_update_time_isValid;
}

QList<QString> OAICreative::getAttributes() const {
    return m_attributes;
}
void OAICreative::setAttributes(const QList<QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICreative::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICreative::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<QString> OAICreative::getClickThroughUrls() const {
    return m_click_through_urls;
}
void OAICreative::setClickThroughUrls(const QList<QString> &click_through_urls) {
    m_click_through_urls = click_through_urls;
    m_click_through_urls_isSet = true;
}

bool OAICreative::is_click_through_urls_Set() const{
    return m_click_through_urls_isSet;
}

bool OAICreative::is_click_through_urls_Valid() const{
    return m_click_through_urls_isValid;
}

QList<OAICorrection> OAICreative::getCorrections() const {
    return m_corrections;
}
void OAICreative::setCorrections(const QList<OAICorrection> &corrections) {
    m_corrections = corrections;
    m_corrections_isSet = true;
}

bool OAICreative::is_corrections_Set() const{
    return m_corrections_isSet;
}

bool OAICreative::is_corrections_Valid() const{
    return m_corrections_isValid;
}

QString OAICreative::getCreativeId() const {
    return m_creative_id;
}
void OAICreative::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAICreative::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAICreative::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

QString OAICreative::getDealsStatus() const {
    return m_deals_status;
}
void OAICreative::setDealsStatus(const QString &deals_status) {
    m_deals_status = deals_status;
    m_deals_status_isSet = true;
}

bool OAICreative::is_deals_status_Set() const{
    return m_deals_status_isSet;
}

bool OAICreative::is_deals_status_Valid() const{
    return m_deals_status_isValid;
}

QList<QString> OAICreative::getDeclaredClickThroughUrls() const {
    return m_declared_click_through_urls;
}
void OAICreative::setDeclaredClickThroughUrls(const QList<QString> &declared_click_through_urls) {
    m_declared_click_through_urls = declared_click_through_urls;
    m_declared_click_through_urls_isSet = true;
}

bool OAICreative::is_declared_click_through_urls_Set() const{
    return m_declared_click_through_urls_isSet;
}

bool OAICreative::is_declared_click_through_urls_Valid() const{
    return m_declared_click_through_urls_isValid;
}

QList<QString> OAICreative::getDetectedAdvertiserIds() const {
    return m_detected_advertiser_ids;
}
void OAICreative::setDetectedAdvertiserIds(const QList<QString> &detected_advertiser_ids) {
    m_detected_advertiser_ids = detected_advertiser_ids;
    m_detected_advertiser_ids_isSet = true;
}

bool OAICreative::is_detected_advertiser_ids_Set() const{
    return m_detected_advertiser_ids_isSet;
}

bool OAICreative::is_detected_advertiser_ids_Valid() const{
    return m_detected_advertiser_ids_isValid;
}

QList<QString> OAICreative::getDetectedDomains() const {
    return m_detected_domains;
}
void OAICreative::setDetectedDomains(const QList<QString> &detected_domains) {
    m_detected_domains = detected_domains;
    m_detected_domains_isSet = true;
}

bool OAICreative::is_detected_domains_Set() const{
    return m_detected_domains_isSet;
}

bool OAICreative::is_detected_domains_Valid() const{
    return m_detected_domains_isValid;
}

QList<QString> OAICreative::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAICreative::setDetectedLanguages(const QList<QString> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAICreative::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAICreative::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QList<qint32> OAICreative::getDetectedProductCategories() const {
    return m_detected_product_categories;
}
void OAICreative::setDetectedProductCategories(const QList<qint32> &detected_product_categories) {
    m_detected_product_categories = detected_product_categories;
    m_detected_product_categories_isSet = true;
}

bool OAICreative::is_detected_product_categories_Set() const{
    return m_detected_product_categories_isSet;
}

bool OAICreative::is_detected_product_categories_Valid() const{
    return m_detected_product_categories_isValid;
}

QList<qint32> OAICreative::getDetectedSensitiveCategories() const {
    return m_detected_sensitive_categories;
}
void OAICreative::setDetectedSensitiveCategories(const QList<qint32> &detected_sensitive_categories) {
    m_detected_sensitive_categories = detected_sensitive_categories;
    m_detected_sensitive_categories_isSet = true;
}

bool OAICreative::is_detected_sensitive_categories_Set() const{
    return m_detected_sensitive_categories_isSet;
}

bool OAICreative::is_detected_sensitive_categories_Valid() const{
    return m_detected_sensitive_categories_isValid;
}

OAIHtmlContent OAICreative::getHtml() const {
    return m_html;
}
void OAICreative::setHtml(const OAIHtmlContent &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAICreative::is_html_Set() const{
    return m_html_isSet;
}

bool OAICreative::is_html_Valid() const{
    return m_html_isValid;
}

QList<QString> OAICreative::getImpressionTrackingUrls() const {
    return m_impression_tracking_urls;
}
void OAICreative::setImpressionTrackingUrls(const QList<QString> &impression_tracking_urls) {
    m_impression_tracking_urls = impression_tracking_urls;
    m_impression_tracking_urls_isSet = true;
}

bool OAICreative::is_impression_tracking_urls_Set() const{
    return m_impression_tracking_urls_isSet;
}

bool OAICreative::is_impression_tracking_urls_Valid() const{
    return m_impression_tracking_urls_isValid;
}

OAINativeContent OAICreative::getNative() const {
    return m_native;
}
void OAICreative::setNative(const OAINativeContent &native) {
    m_native = native;
    m_native_isSet = true;
}

bool OAICreative::is_native_Set() const{
    return m_native_isSet;
}

bool OAICreative::is_native_Valid() const{
    return m_native_isValid;
}

QString OAICreative::getOpenAuctionStatus() const {
    return m_open_auction_status;
}
void OAICreative::setOpenAuctionStatus(const QString &open_auction_status) {
    m_open_auction_status = open_auction_status;
    m_open_auction_status_isSet = true;
}

bool OAICreative::is_open_auction_status_Set() const{
    return m_open_auction_status_isSet;
}

bool OAICreative::is_open_auction_status_Valid() const{
    return m_open_auction_status_isValid;
}

QList<QString> OAICreative::getRestrictedCategories() const {
    return m_restricted_categories;
}
void OAICreative::setRestrictedCategories(const QList<QString> &restricted_categories) {
    m_restricted_categories = restricted_categories;
    m_restricted_categories_isSet = true;
}

bool OAICreative::is_restricted_categories_Set() const{
    return m_restricted_categories_isSet;
}

bool OAICreative::is_restricted_categories_Valid() const{
    return m_restricted_categories_isValid;
}

QList<OAIServingRestriction> OAICreative::getServingRestrictions() const {
    return m_serving_restrictions;
}
void OAICreative::setServingRestrictions(const QList<OAIServingRestriction> &serving_restrictions) {
    m_serving_restrictions = serving_restrictions;
    m_serving_restrictions_isSet = true;
}

bool OAICreative::is_serving_restrictions_Set() const{
    return m_serving_restrictions_isSet;
}

bool OAICreative::is_serving_restrictions_Valid() const{
    return m_serving_restrictions_isValid;
}

QList<qint32> OAICreative::getVendorIds() const {
    return m_vendor_ids;
}
void OAICreative::setVendorIds(const QList<qint32> &vendor_ids) {
    m_vendor_ids = vendor_ids;
    m_vendor_ids_isSet = true;
}

bool OAICreative::is_vendor_ids_Set() const{
    return m_vendor_ids_isSet;
}

bool OAICreative::is_vendor_ids_Valid() const{
    return m_vendor_ids_isValid;
}

qint32 OAICreative::getVersion() const {
    return m_version;
}
void OAICreative::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreative::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreative::is_version_Valid() const{
    return m_version_isValid;
}

OAIVideoContent OAICreative::getVideo() const {
    return m_video;
}
void OAICreative::setVideo(const OAIVideoContent &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAICreative::is_video_Set() const{
    return m_video_isSet;
}

bool OAICreative::is_video_Valid() const{
    return m_video_isValid;
}

bool OAICreative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_choices_destination_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_technology_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_through_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_corrections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_click_through_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_advertiser_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_product_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_sensitive_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_tracking_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_native.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_auction_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
