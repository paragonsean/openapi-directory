/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRowDimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRowDimensions::OAIRowDimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRowDimensions::OAIRowDimensions() {
    this->initializeModel();
}

OAIRowDimensions::~OAIRowDimensions() {}

void OAIRowDimensions::initializeModel() {

    m_publisher_identifier_isSet = false;
    m_publisher_identifier_isValid = false;

    m_time_interval_isSet = false;
    m_time_interval_isValid = false;
}

void OAIRowDimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRowDimensions::fromJsonObject(QJsonObject json) {

    m_publisher_identifier_isValid = ::OpenAPI::fromJsonValue(m_publisher_identifier, json[QString("publisherIdentifier")]);
    m_publisher_identifier_isSet = !json[QString("publisherIdentifier")].isNull() && m_publisher_identifier_isValid;

    m_time_interval_isValid = ::OpenAPI::fromJsonValue(m_time_interval, json[QString("timeInterval")]);
    m_time_interval_isSet = !json[QString("timeInterval")].isNull() && m_time_interval_isValid;
}

QString OAIRowDimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRowDimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_identifier_isSet) {
        obj.insert(QString("publisherIdentifier"), ::OpenAPI::toJsonValue(m_publisher_identifier));
    }
    if (m_time_interval.isSet()) {
        obj.insert(QString("timeInterval"), ::OpenAPI::toJsonValue(m_time_interval));
    }
    return obj;
}

QString OAIRowDimensions::getPublisherIdentifier() const {
    return m_publisher_identifier;
}
void OAIRowDimensions::setPublisherIdentifier(const QString &publisher_identifier) {
    m_publisher_identifier = publisher_identifier;
    m_publisher_identifier_isSet = true;
}

bool OAIRowDimensions::is_publisher_identifier_Set() const{
    return m_publisher_identifier_isSet;
}

bool OAIRowDimensions::is_publisher_identifier_Valid() const{
    return m_publisher_identifier_isValid;
}

OAITimeInterval OAIRowDimensions::getTimeInterval() const {
    return m_time_interval;
}
void OAIRowDimensions::setTimeInterval(const OAITimeInterval &time_interval) {
    m_time_interval = time_interval;
    m_time_interval_isSet = true;
}

bool OAIRowDimensions::is_time_interval_Set() const{
    return m_time_interval_isSet;
}

bool OAIRowDimensions::is_time_interval_Valid() const{
    return m_time_interval_isValid;
}

bool OAIRowDimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRowDimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
