/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDealTerms.h
 *
 * The deal terms specify the details of a Product/deal. They specify things like price per buyer, the type of pricing model (for example, fixed price, auction) and expected impressions from the publisher.
 */

#ifndef OAIDealTerms_H
#define OAIDealTerms_H

#include <QJsonObject>

#include "OAIGuaranteedFixedPriceTerms.h"
#include "OAINonGuaranteedAuctionTerms.h"
#include "OAINonGuaranteedFixedPriceTerms.h"
#include "OAIPrice.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrice;
class OAIGuaranteedFixedPriceTerms;
class OAINonGuaranteedAuctionTerms;
class OAINonGuaranteedFixedPriceTerms;

class OAIDealTerms : public OAIObject {
public:
    OAIDealTerms();
    OAIDealTerms(QString json);
    ~OAIDealTerms() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBrandingType() const;
    void setBrandingType(const QString &branding_type);
    bool is_branding_type_Set() const;
    bool is_branding_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIPrice getEstimatedGrossSpend() const;
    void setEstimatedGrossSpend(const OAIPrice &estimated_gross_spend);
    bool is_estimated_gross_spend_Set() const;
    bool is_estimated_gross_spend_Valid() const;

    QString getEstimatedImpressionsPerDay() const;
    void setEstimatedImpressionsPerDay(const QString &estimated_impressions_per_day);
    bool is_estimated_impressions_per_day_Set() const;
    bool is_estimated_impressions_per_day_Valid() const;

    OAIGuaranteedFixedPriceTerms getGuaranteedFixedPriceTerms() const;
    void setGuaranteedFixedPriceTerms(const OAIGuaranteedFixedPriceTerms &guaranteed_fixed_price_terms);
    bool is_guaranteed_fixed_price_terms_Set() const;
    bool is_guaranteed_fixed_price_terms_Valid() const;

    OAINonGuaranteedAuctionTerms getNonGuaranteedAuctionTerms() const;
    void setNonGuaranteedAuctionTerms(const OAINonGuaranteedAuctionTerms &non_guaranteed_auction_terms);
    bool is_non_guaranteed_auction_terms_Set() const;
    bool is_non_guaranteed_auction_terms_Valid() const;

    OAINonGuaranteedFixedPriceTerms getNonGuaranteedFixedPriceTerms() const;
    void setNonGuaranteedFixedPriceTerms(const OAINonGuaranteedFixedPriceTerms &non_guaranteed_fixed_price_terms);
    bool is_non_guaranteed_fixed_price_terms_Set() const;
    bool is_non_guaranteed_fixed_price_terms_Valid() const;

    QString getSellerTimeZone() const;
    void setSellerTimeZone(const QString &seller_time_zone);
    bool is_seller_time_zone_Set() const;
    bool is_seller_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_branding_type;
    bool m_branding_type_isSet;
    bool m_branding_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIPrice m_estimated_gross_spend;
    bool m_estimated_gross_spend_isSet;
    bool m_estimated_gross_spend_isValid;

    QString m_estimated_impressions_per_day;
    bool m_estimated_impressions_per_day_isSet;
    bool m_estimated_impressions_per_day_isValid;

    OAIGuaranteedFixedPriceTerms m_guaranteed_fixed_price_terms;
    bool m_guaranteed_fixed_price_terms_isSet;
    bool m_guaranteed_fixed_price_terms_isValid;

    OAINonGuaranteedAuctionTerms m_non_guaranteed_auction_terms;
    bool m_non_guaranteed_auction_terms_isSet;
    bool m_non_guaranteed_auction_terms_isValid;

    OAINonGuaranteedFixedPriceTerms m_non_guaranteed_fixed_price_terms;
    bool m_non_guaranteed_fixed_price_terms_isSet;
    bool m_non_guaranteed_fixed_price_terms_isValid;

    QString m_seller_time_zone;
    bool m_seller_time_zone_isSet;
    bool m_seller_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDealTerms)

#endif // OAIDealTerms_H
