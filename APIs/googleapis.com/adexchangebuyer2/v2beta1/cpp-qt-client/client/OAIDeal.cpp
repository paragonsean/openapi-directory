/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeal::OAIDeal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeal::OAIDeal() {
    this->initializeModel();
}

OAIDeal::~OAIDeal() {}

void OAIDeal::initializeModel() {

    m_available_end_time_isSet = false;
    m_available_end_time_isValid = false;

    m_available_start_time_isSet = false;
    m_available_start_time_isValid = false;

    m_buyer_private_data_isSet = false;
    m_buyer_private_data_isValid = false;

    m_create_product_id_isSet = false;
    m_create_product_id_isValid = false;

    m_create_product_revision_isSet = false;
    m_create_product_revision_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creative_pre_approval_policy_isSet = false;
    m_creative_pre_approval_policy_isValid = false;

    m_creative_restrictions_isSet = false;
    m_creative_restrictions_isValid = false;

    m_creative_safe_frame_compatibility_isSet = false;
    m_creative_safe_frame_compatibility_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_deal_serving_metadata_isSet = false;
    m_deal_serving_metadata_isValid = false;

    m_deal_terms_isSet = false;
    m_deal_terms_isValid = false;

    m_delivery_control_isSet = false;
    m_delivery_control_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_deal_id_isSet = false;
    m_external_deal_id_isValid = false;

    m_is_setup_complete_isSet = false;
    m_is_setup_complete_isValid = false;

    m_programmatic_creative_source_isSet = false;
    m_programmatic_creative_source_isValid = false;

    m_proposal_id_isSet = false;
    m_proposal_id_isValid = false;

    m_seller_contacts_isSet = false;
    m_seller_contacts_isValid = false;

    m_syndication_product_isSet = false;
    m_syndication_product_isValid = false;

    m_targeting_isSet = false;
    m_targeting_isValid = false;

    m_targeting_criterion_isSet = false;
    m_targeting_criterion_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_web_property_code_isSet = false;
    m_web_property_code_isValid = false;
}

void OAIDeal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeal::fromJsonObject(QJsonObject json) {

    m_available_end_time_isValid = ::OpenAPI::fromJsonValue(m_available_end_time, json[QString("availableEndTime")]);
    m_available_end_time_isSet = !json[QString("availableEndTime")].isNull() && m_available_end_time_isValid;

    m_available_start_time_isValid = ::OpenAPI::fromJsonValue(m_available_start_time, json[QString("availableStartTime")]);
    m_available_start_time_isSet = !json[QString("availableStartTime")].isNull() && m_available_start_time_isValid;

    m_buyer_private_data_isValid = ::OpenAPI::fromJsonValue(m_buyer_private_data, json[QString("buyerPrivateData")]);
    m_buyer_private_data_isSet = !json[QString("buyerPrivateData")].isNull() && m_buyer_private_data_isValid;

    m_create_product_id_isValid = ::OpenAPI::fromJsonValue(m_create_product_id, json[QString("createProductId")]);
    m_create_product_id_isSet = !json[QString("createProductId")].isNull() && m_create_product_id_isValid;

    m_create_product_revision_isValid = ::OpenAPI::fromJsonValue(m_create_product_revision, json[QString("createProductRevision")]);
    m_create_product_revision_isSet = !json[QString("createProductRevision")].isNull() && m_create_product_revision_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creative_pre_approval_policy_isValid = ::OpenAPI::fromJsonValue(m_creative_pre_approval_policy, json[QString("creativePreApprovalPolicy")]);
    m_creative_pre_approval_policy_isSet = !json[QString("creativePreApprovalPolicy")].isNull() && m_creative_pre_approval_policy_isValid;

    m_creative_restrictions_isValid = ::OpenAPI::fromJsonValue(m_creative_restrictions, json[QString("creativeRestrictions")]);
    m_creative_restrictions_isSet = !json[QString("creativeRestrictions")].isNull() && m_creative_restrictions_isValid;

    m_creative_safe_frame_compatibility_isValid = ::OpenAPI::fromJsonValue(m_creative_safe_frame_compatibility, json[QString("creativeSafeFrameCompatibility")]);
    m_creative_safe_frame_compatibility_isSet = !json[QString("creativeSafeFrameCompatibility")].isNull() && m_creative_safe_frame_compatibility_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_deal_serving_metadata_isValid = ::OpenAPI::fromJsonValue(m_deal_serving_metadata, json[QString("dealServingMetadata")]);
    m_deal_serving_metadata_isSet = !json[QString("dealServingMetadata")].isNull() && m_deal_serving_metadata_isValid;

    m_deal_terms_isValid = ::OpenAPI::fromJsonValue(m_deal_terms, json[QString("dealTerms")]);
    m_deal_terms_isSet = !json[QString("dealTerms")].isNull() && m_deal_terms_isValid;

    m_delivery_control_isValid = ::OpenAPI::fromJsonValue(m_delivery_control, json[QString("deliveryControl")]);
    m_delivery_control_isSet = !json[QString("deliveryControl")].isNull() && m_delivery_control_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_deal_id_isValid = ::OpenAPI::fromJsonValue(m_external_deal_id, json[QString("externalDealId")]);
    m_external_deal_id_isSet = !json[QString("externalDealId")].isNull() && m_external_deal_id_isValid;

    m_is_setup_complete_isValid = ::OpenAPI::fromJsonValue(m_is_setup_complete, json[QString("isSetupComplete")]);
    m_is_setup_complete_isSet = !json[QString("isSetupComplete")].isNull() && m_is_setup_complete_isValid;

    m_programmatic_creative_source_isValid = ::OpenAPI::fromJsonValue(m_programmatic_creative_source, json[QString("programmaticCreativeSource")]);
    m_programmatic_creative_source_isSet = !json[QString("programmaticCreativeSource")].isNull() && m_programmatic_creative_source_isValid;

    m_proposal_id_isValid = ::OpenAPI::fromJsonValue(m_proposal_id, json[QString("proposalId")]);
    m_proposal_id_isSet = !json[QString("proposalId")].isNull() && m_proposal_id_isValid;

    m_seller_contacts_isValid = ::OpenAPI::fromJsonValue(m_seller_contacts, json[QString("sellerContacts")]);
    m_seller_contacts_isSet = !json[QString("sellerContacts")].isNull() && m_seller_contacts_isValid;

    m_syndication_product_isValid = ::OpenAPI::fromJsonValue(m_syndication_product, json[QString("syndicationProduct")]);
    m_syndication_product_isSet = !json[QString("syndicationProduct")].isNull() && m_syndication_product_isValid;

    m_targeting_isValid = ::OpenAPI::fromJsonValue(m_targeting, json[QString("targeting")]);
    m_targeting_isSet = !json[QString("targeting")].isNull() && m_targeting_isValid;

    m_targeting_criterion_isValid = ::OpenAPI::fromJsonValue(m_targeting_criterion, json[QString("targetingCriterion")]);
    m_targeting_criterion_isSet = !json[QString("targetingCriterion")].isNull() && m_targeting_criterion_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_web_property_code_isValid = ::OpenAPI::fromJsonValue(m_web_property_code, json[QString("webPropertyCode")]);
    m_web_property_code_isSet = !json[QString("webPropertyCode")].isNull() && m_web_property_code_isValid;
}

QString OAIDeal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeal::asJsonObject() const {
    QJsonObject obj;
    if (m_available_end_time_isSet) {
        obj.insert(QString("availableEndTime"), ::OpenAPI::toJsonValue(m_available_end_time));
    }
    if (m_available_start_time_isSet) {
        obj.insert(QString("availableStartTime"), ::OpenAPI::toJsonValue(m_available_start_time));
    }
    if (m_buyer_private_data.isSet()) {
        obj.insert(QString("buyerPrivateData"), ::OpenAPI::toJsonValue(m_buyer_private_data));
    }
    if (m_create_product_id_isSet) {
        obj.insert(QString("createProductId"), ::OpenAPI::toJsonValue(m_create_product_id));
    }
    if (m_create_product_revision_isSet) {
        obj.insert(QString("createProductRevision"), ::OpenAPI::toJsonValue(m_create_product_revision));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creative_pre_approval_policy_isSet) {
        obj.insert(QString("creativePreApprovalPolicy"), ::OpenAPI::toJsonValue(m_creative_pre_approval_policy));
    }
    if (m_creative_restrictions.isSet()) {
        obj.insert(QString("creativeRestrictions"), ::OpenAPI::toJsonValue(m_creative_restrictions));
    }
    if (m_creative_safe_frame_compatibility_isSet) {
        obj.insert(QString("creativeSafeFrameCompatibility"), ::OpenAPI::toJsonValue(m_creative_safe_frame_compatibility));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_deal_serving_metadata.isSet()) {
        obj.insert(QString("dealServingMetadata"), ::OpenAPI::toJsonValue(m_deal_serving_metadata));
    }
    if (m_deal_terms.isSet()) {
        obj.insert(QString("dealTerms"), ::OpenAPI::toJsonValue(m_deal_terms));
    }
    if (m_delivery_control.isSet()) {
        obj.insert(QString("deliveryControl"), ::OpenAPI::toJsonValue(m_delivery_control));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_deal_id_isSet) {
        obj.insert(QString("externalDealId"), ::OpenAPI::toJsonValue(m_external_deal_id));
    }
    if (m_is_setup_complete_isSet) {
        obj.insert(QString("isSetupComplete"), ::OpenAPI::toJsonValue(m_is_setup_complete));
    }
    if (m_programmatic_creative_source_isSet) {
        obj.insert(QString("programmaticCreativeSource"), ::OpenAPI::toJsonValue(m_programmatic_creative_source));
    }
    if (m_proposal_id_isSet) {
        obj.insert(QString("proposalId"), ::OpenAPI::toJsonValue(m_proposal_id));
    }
    if (m_seller_contacts.size() > 0) {
        obj.insert(QString("sellerContacts"), ::OpenAPI::toJsonValue(m_seller_contacts));
    }
    if (m_syndication_product_isSet) {
        obj.insert(QString("syndicationProduct"), ::OpenAPI::toJsonValue(m_syndication_product));
    }
    if (m_targeting.isSet()) {
        obj.insert(QString("targeting"), ::OpenAPI::toJsonValue(m_targeting));
    }
    if (m_targeting_criterion.size() > 0) {
        obj.insert(QString("targetingCriterion"), ::OpenAPI::toJsonValue(m_targeting_criterion));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_web_property_code_isSet) {
        obj.insert(QString("webPropertyCode"), ::OpenAPI::toJsonValue(m_web_property_code));
    }
    return obj;
}

QString OAIDeal::getAvailableEndTime() const {
    return m_available_end_time;
}
void OAIDeal::setAvailableEndTime(const QString &available_end_time) {
    m_available_end_time = available_end_time;
    m_available_end_time_isSet = true;
}

bool OAIDeal::is_available_end_time_Set() const{
    return m_available_end_time_isSet;
}

bool OAIDeal::is_available_end_time_Valid() const{
    return m_available_end_time_isValid;
}

QString OAIDeal::getAvailableStartTime() const {
    return m_available_start_time;
}
void OAIDeal::setAvailableStartTime(const QString &available_start_time) {
    m_available_start_time = available_start_time;
    m_available_start_time_isSet = true;
}

bool OAIDeal::is_available_start_time_Set() const{
    return m_available_start_time_isSet;
}

bool OAIDeal::is_available_start_time_Valid() const{
    return m_available_start_time_isValid;
}

OAIPrivateData OAIDeal::getBuyerPrivateData() const {
    return m_buyer_private_data;
}
void OAIDeal::setBuyerPrivateData(const OAIPrivateData &buyer_private_data) {
    m_buyer_private_data = buyer_private_data;
    m_buyer_private_data_isSet = true;
}

bool OAIDeal::is_buyer_private_data_Set() const{
    return m_buyer_private_data_isSet;
}

bool OAIDeal::is_buyer_private_data_Valid() const{
    return m_buyer_private_data_isValid;
}

QString OAIDeal::getCreateProductId() const {
    return m_create_product_id;
}
void OAIDeal::setCreateProductId(const QString &create_product_id) {
    m_create_product_id = create_product_id;
    m_create_product_id_isSet = true;
}

bool OAIDeal::is_create_product_id_Set() const{
    return m_create_product_id_isSet;
}

bool OAIDeal::is_create_product_id_Valid() const{
    return m_create_product_id_isValid;
}

QString OAIDeal::getCreateProductRevision() const {
    return m_create_product_revision;
}
void OAIDeal::setCreateProductRevision(const QString &create_product_revision) {
    m_create_product_revision = create_product_revision;
    m_create_product_revision_isSet = true;
}

bool OAIDeal::is_create_product_revision_Set() const{
    return m_create_product_revision_isSet;
}

bool OAIDeal::is_create_product_revision_Valid() const{
    return m_create_product_revision_isValid;
}

QString OAIDeal::getCreateTime() const {
    return m_create_time;
}
void OAIDeal::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDeal::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDeal::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDeal::getCreativePreApprovalPolicy() const {
    return m_creative_pre_approval_policy;
}
void OAIDeal::setCreativePreApprovalPolicy(const QString &creative_pre_approval_policy) {
    m_creative_pre_approval_policy = creative_pre_approval_policy;
    m_creative_pre_approval_policy_isSet = true;
}

bool OAIDeal::is_creative_pre_approval_policy_Set() const{
    return m_creative_pre_approval_policy_isSet;
}

bool OAIDeal::is_creative_pre_approval_policy_Valid() const{
    return m_creative_pre_approval_policy_isValid;
}

OAICreativeRestrictions OAIDeal::getCreativeRestrictions() const {
    return m_creative_restrictions;
}
void OAIDeal::setCreativeRestrictions(const OAICreativeRestrictions &creative_restrictions) {
    m_creative_restrictions = creative_restrictions;
    m_creative_restrictions_isSet = true;
}

bool OAIDeal::is_creative_restrictions_Set() const{
    return m_creative_restrictions_isSet;
}

bool OAIDeal::is_creative_restrictions_Valid() const{
    return m_creative_restrictions_isValid;
}

QString OAIDeal::getCreativeSafeFrameCompatibility() const {
    return m_creative_safe_frame_compatibility;
}
void OAIDeal::setCreativeSafeFrameCompatibility(const QString &creative_safe_frame_compatibility) {
    m_creative_safe_frame_compatibility = creative_safe_frame_compatibility;
    m_creative_safe_frame_compatibility_isSet = true;
}

bool OAIDeal::is_creative_safe_frame_compatibility_Set() const{
    return m_creative_safe_frame_compatibility_isSet;
}

bool OAIDeal::is_creative_safe_frame_compatibility_Valid() const{
    return m_creative_safe_frame_compatibility_isValid;
}

QString OAIDeal::getDealId() const {
    return m_deal_id;
}
void OAIDeal::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIDeal::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIDeal::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

OAIDealServingMetadata OAIDeal::getDealServingMetadata() const {
    return m_deal_serving_metadata;
}
void OAIDeal::setDealServingMetadata(const OAIDealServingMetadata &deal_serving_metadata) {
    m_deal_serving_metadata = deal_serving_metadata;
    m_deal_serving_metadata_isSet = true;
}

bool OAIDeal::is_deal_serving_metadata_Set() const{
    return m_deal_serving_metadata_isSet;
}

bool OAIDeal::is_deal_serving_metadata_Valid() const{
    return m_deal_serving_metadata_isValid;
}

OAIDealTerms OAIDeal::getDealTerms() const {
    return m_deal_terms;
}
void OAIDeal::setDealTerms(const OAIDealTerms &deal_terms) {
    m_deal_terms = deal_terms;
    m_deal_terms_isSet = true;
}

bool OAIDeal::is_deal_terms_Set() const{
    return m_deal_terms_isSet;
}

bool OAIDeal::is_deal_terms_Valid() const{
    return m_deal_terms_isValid;
}

OAIDeliveryControl OAIDeal::getDeliveryControl() const {
    return m_delivery_control;
}
void OAIDeal::setDeliveryControl(const OAIDeliveryControl &delivery_control) {
    m_delivery_control = delivery_control;
    m_delivery_control_isSet = true;
}

bool OAIDeal::is_delivery_control_Set() const{
    return m_delivery_control_isSet;
}

bool OAIDeal::is_delivery_control_Valid() const{
    return m_delivery_control_isValid;
}

QString OAIDeal::getDescription() const {
    return m_description;
}
void OAIDeal::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeal::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeal::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeal::getDisplayName() const {
    return m_display_name;
}
void OAIDeal::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeal::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeal::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDeal::getExternalDealId() const {
    return m_external_deal_id;
}
void OAIDeal::setExternalDealId(const QString &external_deal_id) {
    m_external_deal_id = external_deal_id;
    m_external_deal_id_isSet = true;
}

bool OAIDeal::is_external_deal_id_Set() const{
    return m_external_deal_id_isSet;
}

bool OAIDeal::is_external_deal_id_Valid() const{
    return m_external_deal_id_isValid;
}

bool OAIDeal::isIsSetupComplete() const {
    return m_is_setup_complete;
}
void OAIDeal::setIsSetupComplete(const bool &is_setup_complete) {
    m_is_setup_complete = is_setup_complete;
    m_is_setup_complete_isSet = true;
}

bool OAIDeal::is_is_setup_complete_Set() const{
    return m_is_setup_complete_isSet;
}

bool OAIDeal::is_is_setup_complete_Valid() const{
    return m_is_setup_complete_isValid;
}

QString OAIDeal::getProgrammaticCreativeSource() const {
    return m_programmatic_creative_source;
}
void OAIDeal::setProgrammaticCreativeSource(const QString &programmatic_creative_source) {
    m_programmatic_creative_source = programmatic_creative_source;
    m_programmatic_creative_source_isSet = true;
}

bool OAIDeal::is_programmatic_creative_source_Set() const{
    return m_programmatic_creative_source_isSet;
}

bool OAIDeal::is_programmatic_creative_source_Valid() const{
    return m_programmatic_creative_source_isValid;
}

QString OAIDeal::getProposalId() const {
    return m_proposal_id;
}
void OAIDeal::setProposalId(const QString &proposal_id) {
    m_proposal_id = proposal_id;
    m_proposal_id_isSet = true;
}

bool OAIDeal::is_proposal_id_Set() const{
    return m_proposal_id_isSet;
}

bool OAIDeal::is_proposal_id_Valid() const{
    return m_proposal_id_isValid;
}

QList<OAIContactInformation> OAIDeal::getSellerContacts() const {
    return m_seller_contacts;
}
void OAIDeal::setSellerContacts(const QList<OAIContactInformation> &seller_contacts) {
    m_seller_contacts = seller_contacts;
    m_seller_contacts_isSet = true;
}

bool OAIDeal::is_seller_contacts_Set() const{
    return m_seller_contacts_isSet;
}

bool OAIDeal::is_seller_contacts_Valid() const{
    return m_seller_contacts_isValid;
}

QString OAIDeal::getSyndicationProduct() const {
    return m_syndication_product;
}
void OAIDeal::setSyndicationProduct(const QString &syndication_product) {
    m_syndication_product = syndication_product;
    m_syndication_product_isSet = true;
}

bool OAIDeal::is_syndication_product_Set() const{
    return m_syndication_product_isSet;
}

bool OAIDeal::is_syndication_product_Valid() const{
    return m_syndication_product_isValid;
}

OAIMarketplaceTargeting OAIDeal::getTargeting() const {
    return m_targeting;
}
void OAIDeal::setTargeting(const OAIMarketplaceTargeting &targeting) {
    m_targeting = targeting;
    m_targeting_isSet = true;
}

bool OAIDeal::is_targeting_Set() const{
    return m_targeting_isSet;
}

bool OAIDeal::is_targeting_Valid() const{
    return m_targeting_isValid;
}

QList<OAITargetingCriteria> OAIDeal::getTargetingCriterion() const {
    return m_targeting_criterion;
}
void OAIDeal::setTargetingCriterion(const QList<OAITargetingCriteria> &targeting_criterion) {
    m_targeting_criterion = targeting_criterion;
    m_targeting_criterion_isSet = true;
}

bool OAIDeal::is_targeting_criterion_Set() const{
    return m_targeting_criterion_isSet;
}

bool OAIDeal::is_targeting_criterion_Valid() const{
    return m_targeting_criterion_isValid;
}

QString OAIDeal::getUpdateTime() const {
    return m_update_time;
}
void OAIDeal::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDeal::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDeal::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIDeal::getWebPropertyCode() const {
    return m_web_property_code;
}
void OAIDeal::setWebPropertyCode(const QString &web_property_code) {
    m_web_property_code = web_property_code;
    m_web_property_code_isSet = true;
}

bool OAIDeal::is_web_property_code_Set() const{
    return m_web_property_code_isSet;
}

bool OAIDeal::is_web_property_code_Valid() const{
    return m_web_property_code_isValid;
}

bool OAIDeal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_private_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_product_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_pre_approval_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_safe_frame_compatibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_serving_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_setup_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_programmatic_creative_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_syndication_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_criterion.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_property_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
