/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreative.h
 *
 * A creative and its classification data.
 */

#ifndef OAICreative_H
#define OAICreative_H

#include <QJsonObject>

#include "OAIAdTechnologyProviders.h"
#include "OAICorrection.h"
#include "OAIHtmlContent.h"
#include "OAINativeContent.h"
#include "OAIServingRestriction.h"
#include "OAIVideoContent.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdTechnologyProviders;
class OAICorrection;
class OAIHtmlContent;
class OAINativeContent;
class OAIServingRestriction;
class OAIVideoContent;

class OAICreative : public OAIObject {
public:
    OAICreative();
    OAICreative(QString json);
    ~OAICreative() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getAdChoicesDestinationUrl() const;
    void setAdChoicesDestinationUrl(const QString &ad_choices_destination_url);
    bool is_ad_choices_destination_url_Set() const;
    bool is_ad_choices_destination_url_Valid() const;

    OAIAdTechnologyProviders getAdTechnologyProviders() const;
    void setAdTechnologyProviders(const OAIAdTechnologyProviders &ad_technology_providers);
    bool is_ad_technology_providers_Set() const;
    bool is_ad_technology_providers_Valid() const;

    QString getAdvertiserName() const;
    void setAdvertiserName(const QString &advertiser_name);
    bool is_advertiser_name_Set() const;
    bool is_advertiser_name_Valid() const;

    QString getAgencyId() const;
    void setAgencyId(const QString &agency_id);
    bool is_agency_id_Set() const;
    bool is_agency_id_Valid() const;

    QString getApiUpdateTime() const;
    void setApiUpdateTime(const QString &api_update_time);
    bool is_api_update_time_Set() const;
    bool is_api_update_time_Valid() const;

    QList<QString> getAttributes() const;
    void setAttributes(const QList<QString> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QList<QString> getClickThroughUrls() const;
    void setClickThroughUrls(const QList<QString> &click_through_urls);
    bool is_click_through_urls_Set() const;
    bool is_click_through_urls_Valid() const;

    Q_DECL_DEPRECATED QList<OAICorrection> getCorrections() const;
    Q_DECL_DEPRECATED void setCorrections(const QList<OAICorrection> &corrections);
    Q_DECL_DEPRECATED bool is_corrections_Set() const;
    Q_DECL_DEPRECATED bool is_corrections_Valid() const;

    QString getCreativeId() const;
    void setCreativeId(const QString &creative_id);
    bool is_creative_id_Set() const;
    bool is_creative_id_Valid() const;

    QString getDealsStatus() const;
    void setDealsStatus(const QString &deals_status);
    bool is_deals_status_Set() const;
    bool is_deals_status_Valid() const;

    QList<QString> getDeclaredClickThroughUrls() const;
    void setDeclaredClickThroughUrls(const QList<QString> &declared_click_through_urls);
    bool is_declared_click_through_urls_Set() const;
    bool is_declared_click_through_urls_Valid() const;

    QList<QString> getDetectedAdvertiserIds() const;
    void setDetectedAdvertiserIds(const QList<QString> &detected_advertiser_ids);
    bool is_detected_advertiser_ids_Set() const;
    bool is_detected_advertiser_ids_Valid() const;

    QList<QString> getDetectedDomains() const;
    void setDetectedDomains(const QList<QString> &detected_domains);
    bool is_detected_domains_Set() const;
    bool is_detected_domains_Valid() const;

    QList<QString> getDetectedLanguages() const;
    void setDetectedLanguages(const QList<QString> &detected_languages);
    bool is_detected_languages_Set() const;
    bool is_detected_languages_Valid() const;

    QList<qint32> getDetectedProductCategories() const;
    void setDetectedProductCategories(const QList<qint32> &detected_product_categories);
    bool is_detected_product_categories_Set() const;
    bool is_detected_product_categories_Valid() const;

    QList<qint32> getDetectedSensitiveCategories() const;
    void setDetectedSensitiveCategories(const QList<qint32> &detected_sensitive_categories);
    bool is_detected_sensitive_categories_Set() const;
    bool is_detected_sensitive_categories_Valid() const;

    OAIHtmlContent getHtml() const;
    void setHtml(const OAIHtmlContent &html);
    bool is_html_Set() const;
    bool is_html_Valid() const;

    QList<QString> getImpressionTrackingUrls() const;
    void setImpressionTrackingUrls(const QList<QString> &impression_tracking_urls);
    bool is_impression_tracking_urls_Set() const;
    bool is_impression_tracking_urls_Valid() const;

    OAINativeContent getNative() const;
    void setNative(const OAINativeContent &native);
    bool is_native_Set() const;
    bool is_native_Valid() const;

    QString getOpenAuctionStatus() const;
    void setOpenAuctionStatus(const QString &open_auction_status);
    bool is_open_auction_status_Set() const;
    bool is_open_auction_status_Valid() const;

    QList<QString> getRestrictedCategories() const;
    void setRestrictedCategories(const QList<QString> &restricted_categories);
    bool is_restricted_categories_Set() const;
    bool is_restricted_categories_Valid() const;

    QList<OAIServingRestriction> getServingRestrictions() const;
    void setServingRestrictions(const QList<OAIServingRestriction> &serving_restrictions);
    bool is_serving_restrictions_Set() const;
    bool is_serving_restrictions_Valid() const;

    QList<qint32> getVendorIds() const;
    void setVendorIds(const QList<qint32> &vendor_ids);
    bool is_vendor_ids_Set() const;
    bool is_vendor_ids_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAIVideoContent getVideo() const;
    void setVideo(const OAIVideoContent &video);
    bool is_video_Set() const;
    bool is_video_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_ad_choices_destination_url;
    bool m_ad_choices_destination_url_isSet;
    bool m_ad_choices_destination_url_isValid;

    OAIAdTechnologyProviders m_ad_technology_providers;
    bool m_ad_technology_providers_isSet;
    bool m_ad_technology_providers_isValid;

    QString m_advertiser_name;
    bool m_advertiser_name_isSet;
    bool m_advertiser_name_isValid;

    QString m_agency_id;
    bool m_agency_id_isSet;
    bool m_agency_id_isValid;

    QString m_api_update_time;
    bool m_api_update_time_isSet;
    bool m_api_update_time_isValid;

    QList<QString> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QList<QString> m_click_through_urls;
    bool m_click_through_urls_isSet;
    bool m_click_through_urls_isValid;

    QList<OAICorrection> m_corrections;
    bool m_corrections_isSet;
    bool m_corrections_isValid;

    QString m_creative_id;
    bool m_creative_id_isSet;
    bool m_creative_id_isValid;

    QString m_deals_status;
    bool m_deals_status_isSet;
    bool m_deals_status_isValid;

    QList<QString> m_declared_click_through_urls;
    bool m_declared_click_through_urls_isSet;
    bool m_declared_click_through_urls_isValid;

    QList<QString> m_detected_advertiser_ids;
    bool m_detected_advertiser_ids_isSet;
    bool m_detected_advertiser_ids_isValid;

    QList<QString> m_detected_domains;
    bool m_detected_domains_isSet;
    bool m_detected_domains_isValid;

    QList<QString> m_detected_languages;
    bool m_detected_languages_isSet;
    bool m_detected_languages_isValid;

    QList<qint32> m_detected_product_categories;
    bool m_detected_product_categories_isSet;
    bool m_detected_product_categories_isValid;

    QList<qint32> m_detected_sensitive_categories;
    bool m_detected_sensitive_categories_isSet;
    bool m_detected_sensitive_categories_isValid;

    OAIHtmlContent m_html;
    bool m_html_isSet;
    bool m_html_isValid;

    QList<QString> m_impression_tracking_urls;
    bool m_impression_tracking_urls_isSet;
    bool m_impression_tracking_urls_isValid;

    OAINativeContent m_native;
    bool m_native_isSet;
    bool m_native_isValid;

    QString m_open_auction_status;
    bool m_open_auction_status_isSet;
    bool m_open_auction_status_isValid;

    QList<QString> m_restricted_categories;
    bool m_restricted_categories_isSet;
    bool m_restricted_categories_isValid;

    QList<OAIServingRestriction> m_serving_restrictions;
    bool m_serving_restrictions_isSet;
    bool m_serving_restrictions_isValid;

    QList<qint32> m_vendor_ids;
    bool m_vendor_ids_isSet;
    bool m_vendor_ids_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAIVideoContent m_video;
    bool m_video_isSet;
    bool m_video_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreative)

#endif // OAICreative_H
