/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuyersApi_H
#define OAI_OAIBuyersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFilterSet.h"
#include "OAIListBidMetricsResponse.h"
#include "OAIListBidResponseErrorsResponse.h"
#include "OAIListBidResponsesWithoutBidsResponse.h"
#include "OAIListCreativeStatusBreakdownByCreativeResponse.h"
#include "OAIListCreativeStatusBreakdownByDetailResponse.h"
#include "OAIListFilterSetsResponse.h"
#include "OAIListFilteredBidRequestsResponse.h"
#include "OAIListFilteredBidsResponse.h"
#include "OAIListImpressionMetricsResponse.h"
#include "OAIListLosingBidsResponse.h"
#include "OAIListNonBillableWinningBidsResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuyersApi : public QObject {
    Q_OBJECT

public:
    OAIBuyersApi(const int timeOut = 0);
    ~OAIBuyersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_bidMetrics_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_bidResponseErrors_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  is_transient bool [optional]
    * @param[in]  oai_filter_set OAIFilterSet [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_create(const QString &owner_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_transient = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIFilterSet> &oai_filter_set = ::OpenAPI::OptionalParam<OAIFilterSet>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_filteredBidRequests_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  creative_status_id qint32 [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_list(const QString &filter_set_name, const qint32 &creative_status_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  creative_status_id qint32 [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_filteredBids_details_list(const QString &filter_set_name, const qint32 &creative_status_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_filteredBids_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_impressionMetrics_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_list(const QString &owner_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_losingBids_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_set_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_list(const QString &filter_set_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adexchangebuyer2_buyers_filterSets_bidMetrics_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_createCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_deleteCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_filteredBids_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_losingBids_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignal(OAIListBidMetricsResponse summary);
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignal(OAIListBidResponseErrorsResponse summary);
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignal(OAIListBidResponsesWithoutBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_createSignal(OAIFilterSet summary);
    void adexchangebuyer2_buyers_filterSets_deleteSignal(OAIObject summary);
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignal(OAIListFilteredBidRequestsResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignal(OAIListCreativeStatusBreakdownByCreativeResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignal(OAIListCreativeStatusBreakdownByDetailResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignal(OAIListFilteredBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_getSignal(OAIFilterSet summary);
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignal(OAIListImpressionMetricsResponse summary);
    void adexchangebuyer2_buyers_filterSets_listSignal(OAIListFilterSetsResponse summary);
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignal(OAIListLosingBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignal(OAIListNonBillableWinningBidsResponse summary);


    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIListBidMetricsResponse summary);
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalFull(OAIHttpRequestWorker *worker, OAIListBidResponseErrorsResponse summary);
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalFull(OAIHttpRequestWorker *worker, OAIListBidResponsesWithoutBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_createSignalFull(OAIHttpRequestWorker *worker, OAIFilterSet summary);
    void adexchangebuyer2_buyers_filterSets_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalFull(OAIHttpRequestWorker *worker, OAIListFilteredBidRequestsResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalFull(OAIHttpRequestWorker *worker, OAIListCreativeStatusBreakdownByCreativeResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalFull(OAIHttpRequestWorker *worker, OAIListCreativeStatusBreakdownByDetailResponse summary);
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignalFull(OAIHttpRequestWorker *worker, OAIListFilteredBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_getSignalFull(OAIHttpRequestWorker *worker, OAIFilterSet summary);
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalFull(OAIHttpRequestWorker *worker, OAIListImpressionMetricsResponse summary);
    void adexchangebuyer2_buyers_filterSets_listSignalFull(OAIHttpRequestWorker *worker, OAIListFilterSetsResponse summary);
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignalFull(OAIHttpRequestWorker *worker, OAIListLosingBidsResponse summary);
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalFull(OAIHttpRequestWorker *worker, OAIListNonBillableWinningBidsResponse summary);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalE(OAIListBidMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalError(OAIListBidMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalE(OAIListBidResponseErrorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalError(OAIListBidResponseErrorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalE(OAIListBidResponsesWithoutBidsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalError(OAIListBidResponsesWithoutBidsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_createSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_createSignalE(OAIFilterSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_createSignalError(OAIFilterSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_deleteSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalE(OAIListFilteredBidRequestsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalError(OAIListFilteredBidRequestsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalE(OAIListCreativeStatusBreakdownByCreativeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalError(OAIListCreativeStatusBreakdownByCreativeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalE(OAIListCreativeStatusBreakdownByDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalError(OAIListCreativeStatusBreakdownByDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignalE(OAIListFilteredBidsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignalError(OAIListFilteredBidsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_getSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_getSignalE(OAIFilterSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_getSignalError(OAIFilterSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalE(OAIListImpressionMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalError(OAIListImpressionMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_listSignalE(OAIListFilterSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_listSignalError(OAIListFilterSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_losingBids_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignalE(OAIListLosingBidsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignalError(OAIListLosingBidsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalError() instead")
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalE(OAIListNonBillableWinningBidsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalError(OAIListNonBillableWinningBidsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidResponseErrors_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_bidResponsesWithoutBids_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_createSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_deleteSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBidRequests_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_creatives_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_details_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_filteredBids_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_filteredBids_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_getSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_impressionMetrics_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_losingBids_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_losingBids_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalErrorFull() instead")
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_buyers_filterSets_nonBillableWinningBids_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
