/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptProposalRequest.h"
#include "OAIAddDealAssociationRequest.h"
#include "OAIAddNoteRequest.h"
#include "OAIClient.h"
#include "OAIClientUser.h"
#include "OAIClientUserInvitation.h"
#include "OAICreative.h"
#include "OAIListClientUserInvitationsResponse.h"
#include "OAIListClientUsersResponse.h"
#include "OAIListClientsResponse.h"
#include "OAIListCreativesResponse.h"
#include "OAIListDealAssociationsResponse.h"
#include "OAIListProductsResponse.h"
#include "OAIListProposalsResponse.h"
#include "OAIListPublisherProfilesResponse.h"
#include "OAINote.h"
#include "OAIObject.h"
#include "OAIPauseProposalDealsRequest.h"
#include "OAIPauseProposalRequest.h"
#include "OAIProduct.h"
#include "OAIProposal.h"
#include "OAIPublisherProfile.h"
#include "OAIRemoveDealAssociationRequest.h"
#include "OAIResumeProposalDealsRequest.h"
#include "OAIWatchCreativeRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client OAIClient [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_create(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClient> &oai_client = ::OpenAPI::OptionalParam<OAIClient>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_get(const QString &account_id, const QString &client_account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client_user_invitation OAIClientUserInvitation [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_invitations_create(const QString &account_id, const QString &client_account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClientUserInvitation> &oai_client_user_invitation = ::OpenAPI::OptionalParam<OAIClientUserInvitation>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  invitation_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_invitations_get(const QString &account_id, const QString &client_account_id, const QString &invitation_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_invitations_list(const QString &account_id, const QString &client_account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  partner_client_id QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &partner_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client OAIClient [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_update(const QString &account_id, const QString &client_account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClient> &oai_client = ::OpenAPI::OptionalParam<OAIClient>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_users_get(const QString &account_id, const QString &client_account_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_users_list(const QString &account_id, const QString &client_account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  client_account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_client_user OAIClientUser [optional]
    */
    virtual void adexchangebuyer2_accounts_clients_users_update(const QString &account_id, const QString &client_account_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIClientUser> &oai_client_user = ::OpenAPI::OptionalParam<OAIClientUser>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  duplicate_id_mode QString [optional]
    * @param[in]  oai_creative OAICreative [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_create(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &duplicate_id_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreative> &oai_creative = ::OpenAPI::OptionalParam<OAICreative>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_deal_association_request OAIAddDealAssociationRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_dealAssociations_add(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddDealAssociationRequest> &oai_add_deal_association_request = ::OpenAPI::OptionalParam<OAIAddDealAssociationRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  query QString [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_dealAssociations_list(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_remove_deal_association_request OAIRemoveDealAssociationRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_dealAssociations_remove(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveDealAssociationRequest> &oai_remove_deal_association_request = ::OpenAPI::OptionalParam<OAIRemoveDealAssociationRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_get(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  query QString [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_stopWatching(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_creative OAICreative [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_update(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreative> &oai_creative = ::OpenAPI::OptionalParam<OAICreative>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  creative_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_watch_creative_request OAIWatchCreativeRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_creatives_watch(const QString &account_id, const QString &creative_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIWatchCreativeRequest> &oai_watch_creative_request = ::OpenAPI::OptionalParam<OAIWatchCreativeRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_syntax QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_finalizedProposals_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_syntax = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_pause_proposal_deals_request OAIPauseProposalDealsRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_finalizedProposals_pause(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPauseProposalDealsRequest> &oai_pause_proposal_deals_request = ::OpenAPI::OptionalParam<OAIPauseProposalDealsRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_resume_proposal_deals_request OAIResumeProposalDealsRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_finalizedProposals_resume(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResumeProposalDealsRequest> &oai_resume_proposal_deals_request = ::OpenAPI::OptionalParam<OAIResumeProposalDealsRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_products_get(const QString &account_id, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_products_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_accept_proposal_request OAIAcceptProposalRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_accept(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAcceptProposalRequest> &oai_accept_proposal_request = ::OpenAPI::OptionalParam<OAIAcceptProposalRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_note_request OAIAddNoteRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_addNote(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddNoteRequest> &oai_add_note_request = ::OpenAPI::OptionalParam<OAIAddNoteRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_cancelNegotiation(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_completeSetup(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_proposal OAIProposal [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_create(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProposal> &oai_proposal = ::OpenAPI::OptionalParam<OAIProposal>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_get(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  filter_syntax QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_syntax = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_pause_proposal_request OAIPauseProposalRequest [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_pause(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPauseProposalRequest> &oai_pause_proposal_request = ::OpenAPI::OptionalParam<OAIPauseProposalRequest>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_resume(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  proposal_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_proposal OAIProposal [optional]
    */
    virtual void adexchangebuyer2_accounts_proposals_update(const QString &account_id, const QString &proposal_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProposal> &oai_proposal = ::OpenAPI::OptionalParam<OAIProposal>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  publisher_profile_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void adexchangebuyer2_accounts_publisherProfiles_get(const QString &account_id, const QString &publisher_profile_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void adexchangebuyer2_accounts_publisherProfiles_list(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adexchangebuyer2_accounts_clients_createCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_invitations_createCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_invitations_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_invitations_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_updateCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_users_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_users_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_clients_users_updateCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_createCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_dealAssociations_addCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_dealAssociations_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_stopWatchingCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_updateCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_creatives_watchCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_finalizedProposals_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_finalizedProposals_pauseCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_finalizedProposals_resumeCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_products_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_products_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_acceptCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_addNoteCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_cancelNegotiationCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_completeSetupCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_createCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_listCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_pauseCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_resumeCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_proposals_updateCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_publisherProfiles_getCallback(OAIHttpRequestWorker *worker);
    void adexchangebuyer2_accounts_publisherProfiles_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adexchangebuyer2_accounts_clients_createSignal(OAIClient summary);
    void adexchangebuyer2_accounts_clients_getSignal(OAIClient summary);
    void adexchangebuyer2_accounts_clients_invitations_createSignal(OAIClientUserInvitation summary);
    void adexchangebuyer2_accounts_clients_invitations_getSignal(OAIClientUserInvitation summary);
    void adexchangebuyer2_accounts_clients_invitations_listSignal(OAIListClientUserInvitationsResponse summary);
    void adexchangebuyer2_accounts_clients_listSignal(OAIListClientsResponse summary);
    void adexchangebuyer2_accounts_clients_updateSignal(OAIClient summary);
    void adexchangebuyer2_accounts_clients_users_getSignal(OAIClientUser summary);
    void adexchangebuyer2_accounts_clients_users_listSignal(OAIListClientUsersResponse summary);
    void adexchangebuyer2_accounts_clients_users_updateSignal(OAIClientUser summary);
    void adexchangebuyer2_accounts_creatives_createSignal(OAICreative summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignal(OAIObject summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignal(OAIListDealAssociationsResponse summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignal(OAIObject summary);
    void adexchangebuyer2_accounts_creatives_getSignal(OAICreative summary);
    void adexchangebuyer2_accounts_creatives_listSignal(OAIListCreativesResponse summary);
    void adexchangebuyer2_accounts_creatives_stopWatchingSignal(OAIObject summary);
    void adexchangebuyer2_accounts_creatives_updateSignal(OAICreative summary);
    void adexchangebuyer2_accounts_creatives_watchSignal(OAIObject summary);
    void adexchangebuyer2_accounts_finalizedProposals_listSignal(OAIListProposalsResponse summary);
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_products_getSignal(OAIProduct summary);
    void adexchangebuyer2_accounts_products_listSignal(OAIListProductsResponse summary);
    void adexchangebuyer2_accounts_proposals_acceptSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_addNoteSignal(OAINote summary);
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_completeSetupSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_createSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_getSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_listSignal(OAIListProposalsResponse summary);
    void adexchangebuyer2_accounts_proposals_pauseSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_resumeSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_updateSignal(OAIProposal summary);
    void adexchangebuyer2_accounts_publisherProfiles_getSignal(OAIPublisherProfile summary);
    void adexchangebuyer2_accounts_publisherProfiles_listSignal(OAIListPublisherProfilesResponse summary);


    void adexchangebuyer2_accounts_clients_createSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);
    void adexchangebuyer2_accounts_clients_getSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);
    void adexchangebuyer2_accounts_clients_invitations_createSignalFull(OAIHttpRequestWorker *worker, OAIClientUserInvitation summary);
    void adexchangebuyer2_accounts_clients_invitations_getSignalFull(OAIHttpRequestWorker *worker, OAIClientUserInvitation summary);
    void adexchangebuyer2_accounts_clients_invitations_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientUserInvitationsResponse summary);
    void adexchangebuyer2_accounts_clients_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientsResponse summary);
    void adexchangebuyer2_accounts_clients_updateSignalFull(OAIHttpRequestWorker *worker, OAIClient summary);
    void adexchangebuyer2_accounts_clients_users_getSignalFull(OAIHttpRequestWorker *worker, OAIClientUser summary);
    void adexchangebuyer2_accounts_clients_users_listSignalFull(OAIHttpRequestWorker *worker, OAIListClientUsersResponse summary);
    void adexchangebuyer2_accounts_clients_users_updateSignalFull(OAIHttpRequestWorker *worker, OAIClientUser summary);
    void adexchangebuyer2_accounts_creatives_createSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignalFull(OAIHttpRequestWorker *worker, OAIListDealAssociationsResponse summary);
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void adexchangebuyer2_accounts_creatives_getSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void adexchangebuyer2_accounts_creatives_listSignalFull(OAIHttpRequestWorker *worker, OAIListCreativesResponse summary);
    void adexchangebuyer2_accounts_creatives_stopWatchingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void adexchangebuyer2_accounts_creatives_updateSignalFull(OAIHttpRequestWorker *worker, OAICreative summary);
    void adexchangebuyer2_accounts_creatives_watchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void adexchangebuyer2_accounts_finalizedProposals_listSignalFull(OAIHttpRequestWorker *worker, OAIListProposalsResponse summary);
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_products_getSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void adexchangebuyer2_accounts_products_listSignalFull(OAIHttpRequestWorker *worker, OAIListProductsResponse summary);
    void adexchangebuyer2_accounts_proposals_acceptSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_addNoteSignalFull(OAIHttpRequestWorker *worker, OAINote summary);
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_completeSetupSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_createSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_getSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_listSignalFull(OAIHttpRequestWorker *worker, OAIListProposalsResponse summary);
    void adexchangebuyer2_accounts_proposals_pauseSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_resumeSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_proposals_updateSignalFull(OAIHttpRequestWorker *worker, OAIProposal summary);
    void adexchangebuyer2_accounts_publisherProfiles_getSignalFull(OAIHttpRequestWorker *worker, OAIPublisherProfile summary);
    void adexchangebuyer2_accounts_publisherProfiles_listSignalFull(OAIHttpRequestWorker *worker, OAIListPublisherProfilesResponse summary);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_createSignalError() instead")
    void adexchangebuyer2_accounts_clients_createSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_createSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_getSignalError() instead")
    void adexchangebuyer2_accounts_clients_getSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_getSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_createSignalError() instead")
    void adexchangebuyer2_accounts_clients_invitations_createSignalE(OAIClientUserInvitation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_createSignalError(OAIClientUserInvitation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_getSignalError() instead")
    void adexchangebuyer2_accounts_clients_invitations_getSignalE(OAIClientUserInvitation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_getSignalError(OAIClientUserInvitation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_listSignalError() instead")
    void adexchangebuyer2_accounts_clients_invitations_listSignalE(OAIListClientUserInvitationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_listSignalError(OAIListClientUserInvitationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_listSignalError() instead")
    void adexchangebuyer2_accounts_clients_listSignalE(OAIListClientsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_listSignalError(OAIListClientsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_updateSignalError() instead")
    void adexchangebuyer2_accounts_clients_updateSignalE(OAIClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_updateSignalError(OAIClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_getSignalError() instead")
    void adexchangebuyer2_accounts_clients_users_getSignalE(OAIClientUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_getSignalError(OAIClientUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_listSignalError() instead")
    void adexchangebuyer2_accounts_clients_users_listSignalE(OAIListClientUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_listSignalError(OAIListClientUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_updateSignalError() instead")
    void adexchangebuyer2_accounts_clients_users_updateSignalE(OAIClientUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_updateSignalError(OAIClientUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_createSignalError() instead")
    void adexchangebuyer2_accounts_creatives_createSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_createSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_addSignalError() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_listSignalError() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignalE(OAIListDealAssociationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignalError(OAIListDealAssociationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalError() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_getSignalError() instead")
    void adexchangebuyer2_accounts_creatives_getSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_getSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_listSignalError() instead")
    void adexchangebuyer2_accounts_creatives_listSignalE(OAIListCreativesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_listSignalError(OAIListCreativesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_stopWatchingSignalError() instead")
    void adexchangebuyer2_accounts_creatives_stopWatchingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_stopWatchingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_updateSignalError() instead")
    void adexchangebuyer2_accounts_creatives_updateSignalE(OAICreative summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_updateSignalError(OAICreative summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_watchSignalError() instead")
    void adexchangebuyer2_accounts_creatives_watchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_watchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_listSignalError() instead")
    void adexchangebuyer2_accounts_finalizedProposals_listSignalE(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_listSignalError(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_pauseSignalError() instead")
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_resumeSignalError() instead")
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_products_getSignalError() instead")
    void adexchangebuyer2_accounts_products_getSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_products_getSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_products_listSignalError() instead")
    void adexchangebuyer2_accounts_products_listSignalE(OAIListProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_products_listSignalError(OAIListProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_acceptSignalError() instead")
    void adexchangebuyer2_accounts_proposals_acceptSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_acceptSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_addNoteSignalError() instead")
    void adexchangebuyer2_accounts_proposals_addNoteSignalE(OAINote summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_addNoteSignalError(OAINote summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_cancelNegotiationSignalError() instead")
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_completeSetupSignalError() instead")
    void adexchangebuyer2_accounts_proposals_completeSetupSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_completeSetupSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_createSignalError() instead")
    void adexchangebuyer2_accounts_proposals_createSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_createSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_getSignalError() instead")
    void adexchangebuyer2_accounts_proposals_getSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_getSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_listSignalError() instead")
    void adexchangebuyer2_accounts_proposals_listSignalE(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_listSignalError(OAIListProposalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_pauseSignalError() instead")
    void adexchangebuyer2_accounts_proposals_pauseSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_pauseSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_resumeSignalError() instead")
    void adexchangebuyer2_accounts_proposals_resumeSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_resumeSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_updateSignalError() instead")
    void adexchangebuyer2_accounts_proposals_updateSignalE(OAIProposal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_updateSignalError(OAIProposal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_publisherProfiles_getSignalError() instead")
    void adexchangebuyer2_accounts_publisherProfiles_getSignalE(OAIPublisherProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_publisherProfiles_getSignalError(OAIPublisherProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_publisherProfiles_listSignalError() instead")
    void adexchangebuyer2_accounts_publisherProfiles_listSignalE(OAIListPublisherProfilesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_publisherProfiles_listSignalError(OAIListPublisherProfilesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_createSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_createSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_invitations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_invitations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_invitations_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_invitations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_invitations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_updateSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_users_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_users_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_clients_users_updateSignalErrorFull() instead")
    void adexchangebuyer2_accounts_clients_users_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_clients_users_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_createSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_addSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_addSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_dealAssociations_removeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_stopWatchingSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_stopWatchingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_stopWatchingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_updateSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_creatives_watchSignalErrorFull() instead")
    void adexchangebuyer2_accounts_creatives_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_creatives_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_finalizedProposals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_pauseSignalErrorFull() instead")
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_finalizedProposals_resumeSignalErrorFull() instead")
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_finalizedProposals_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_products_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_products_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_products_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_products_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_products_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_products_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_acceptSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_acceptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_acceptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_addNoteSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_addNoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_addNoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_cancelNegotiationSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_cancelNegotiationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_completeSetupSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_completeSetupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_completeSetupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_createSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_pauseSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_resumeSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_proposals_updateSignalErrorFull() instead")
    void adexchangebuyer2_accounts_proposals_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_proposals_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_publisherProfiles_getSignalErrorFull() instead")
    void adexchangebuyer2_accounts_publisherProfiles_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_publisherProfiles_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adexchangebuyer2_accounts_publisherProfiles_listSignalErrorFull() instead")
    void adexchangebuyer2_accounts_publisherProfiles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adexchangebuyer2_accounts_publisherProfiles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
