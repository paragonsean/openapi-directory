/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImpressionMetricsRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImpressionMetricsRow::OAIImpressionMetricsRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImpressionMetricsRow::OAIImpressionMetricsRow() {
    this->initializeModel();
}

OAIImpressionMetricsRow::~OAIImpressionMetricsRow() {}

void OAIImpressionMetricsRow::initializeModel() {

    m_available_impressions_isSet = false;
    m_available_impressions_isValid = false;

    m_bid_requests_isSet = false;
    m_bid_requests_isValid = false;

    m_inventory_matches_isSet = false;
    m_inventory_matches_isValid = false;

    m_responses_with_bids_isSet = false;
    m_responses_with_bids_isValid = false;

    m_row_dimensions_isSet = false;
    m_row_dimensions_isValid = false;

    m_successful_responses_isSet = false;
    m_successful_responses_isValid = false;
}

void OAIImpressionMetricsRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImpressionMetricsRow::fromJsonObject(QJsonObject json) {

    m_available_impressions_isValid = ::OpenAPI::fromJsonValue(m_available_impressions, json[QString("availableImpressions")]);
    m_available_impressions_isSet = !json[QString("availableImpressions")].isNull() && m_available_impressions_isValid;

    m_bid_requests_isValid = ::OpenAPI::fromJsonValue(m_bid_requests, json[QString("bidRequests")]);
    m_bid_requests_isSet = !json[QString("bidRequests")].isNull() && m_bid_requests_isValid;

    m_inventory_matches_isValid = ::OpenAPI::fromJsonValue(m_inventory_matches, json[QString("inventoryMatches")]);
    m_inventory_matches_isSet = !json[QString("inventoryMatches")].isNull() && m_inventory_matches_isValid;

    m_responses_with_bids_isValid = ::OpenAPI::fromJsonValue(m_responses_with_bids, json[QString("responsesWithBids")]);
    m_responses_with_bids_isSet = !json[QString("responsesWithBids")].isNull() && m_responses_with_bids_isValid;

    m_row_dimensions_isValid = ::OpenAPI::fromJsonValue(m_row_dimensions, json[QString("rowDimensions")]);
    m_row_dimensions_isSet = !json[QString("rowDimensions")].isNull() && m_row_dimensions_isValid;

    m_successful_responses_isValid = ::OpenAPI::fromJsonValue(m_successful_responses, json[QString("successfulResponses")]);
    m_successful_responses_isSet = !json[QString("successfulResponses")].isNull() && m_successful_responses_isValid;
}

QString OAIImpressionMetricsRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImpressionMetricsRow::asJsonObject() const {
    QJsonObject obj;
    if (m_available_impressions.isSet()) {
        obj.insert(QString("availableImpressions"), ::OpenAPI::toJsonValue(m_available_impressions));
    }
    if (m_bid_requests.isSet()) {
        obj.insert(QString("bidRequests"), ::OpenAPI::toJsonValue(m_bid_requests));
    }
    if (m_inventory_matches.isSet()) {
        obj.insert(QString("inventoryMatches"), ::OpenAPI::toJsonValue(m_inventory_matches));
    }
    if (m_responses_with_bids.isSet()) {
        obj.insert(QString("responsesWithBids"), ::OpenAPI::toJsonValue(m_responses_with_bids));
    }
    if (m_row_dimensions.isSet()) {
        obj.insert(QString("rowDimensions"), ::OpenAPI::toJsonValue(m_row_dimensions));
    }
    if (m_successful_responses.isSet()) {
        obj.insert(QString("successfulResponses"), ::OpenAPI::toJsonValue(m_successful_responses));
    }
    return obj;
}

OAIMetricValue OAIImpressionMetricsRow::getAvailableImpressions() const {
    return m_available_impressions;
}
void OAIImpressionMetricsRow::setAvailableImpressions(const OAIMetricValue &available_impressions) {
    m_available_impressions = available_impressions;
    m_available_impressions_isSet = true;
}

bool OAIImpressionMetricsRow::is_available_impressions_Set() const{
    return m_available_impressions_isSet;
}

bool OAIImpressionMetricsRow::is_available_impressions_Valid() const{
    return m_available_impressions_isValid;
}

OAIMetricValue OAIImpressionMetricsRow::getBidRequests() const {
    return m_bid_requests;
}
void OAIImpressionMetricsRow::setBidRequests(const OAIMetricValue &bid_requests) {
    m_bid_requests = bid_requests;
    m_bid_requests_isSet = true;
}

bool OAIImpressionMetricsRow::is_bid_requests_Set() const{
    return m_bid_requests_isSet;
}

bool OAIImpressionMetricsRow::is_bid_requests_Valid() const{
    return m_bid_requests_isValid;
}

OAIMetricValue OAIImpressionMetricsRow::getInventoryMatches() const {
    return m_inventory_matches;
}
void OAIImpressionMetricsRow::setInventoryMatches(const OAIMetricValue &inventory_matches) {
    m_inventory_matches = inventory_matches;
    m_inventory_matches_isSet = true;
}

bool OAIImpressionMetricsRow::is_inventory_matches_Set() const{
    return m_inventory_matches_isSet;
}

bool OAIImpressionMetricsRow::is_inventory_matches_Valid() const{
    return m_inventory_matches_isValid;
}

OAIMetricValue OAIImpressionMetricsRow::getResponsesWithBids() const {
    return m_responses_with_bids;
}
void OAIImpressionMetricsRow::setResponsesWithBids(const OAIMetricValue &responses_with_bids) {
    m_responses_with_bids = responses_with_bids;
    m_responses_with_bids_isSet = true;
}

bool OAIImpressionMetricsRow::is_responses_with_bids_Set() const{
    return m_responses_with_bids_isSet;
}

bool OAIImpressionMetricsRow::is_responses_with_bids_Valid() const{
    return m_responses_with_bids_isValid;
}

OAIRowDimensions OAIImpressionMetricsRow::getRowDimensions() const {
    return m_row_dimensions;
}
void OAIImpressionMetricsRow::setRowDimensions(const OAIRowDimensions &row_dimensions) {
    m_row_dimensions = row_dimensions;
    m_row_dimensions_isSet = true;
}

bool OAIImpressionMetricsRow::is_row_dimensions_Set() const{
    return m_row_dimensions_isSet;
}

bool OAIImpressionMetricsRow::is_row_dimensions_Valid() const{
    return m_row_dimensions_isValid;
}

OAIMetricValue OAIImpressionMetricsRow::getSuccessfulResponses() const {
    return m_successful_responses;
}
void OAIImpressionMetricsRow::setSuccessfulResponses(const OAIMetricValue &successful_responses) {
    m_successful_responses = successful_responses;
    m_successful_responses_isSet = true;
}

bool OAIImpressionMetricsRow::is_successful_responses_Set() const{
    return m_successful_responses_isSet;
}

bool OAIImpressionMetricsRow::is_successful_responses_Valid() const{
    return m_successful_responses_isValid;
}

bool OAIImpressionMetricsRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_impressions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bid_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_matches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses_with_bids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImpressionMetricsRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
