/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClient::OAIClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClient::OAIClient() {
    this->initializeModel();
}

OAIClient::~OAIClient() {}

void OAIClient::initializeModel() {

    m_client_account_id_isSet = false;
    m_client_account_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_partner_client_id_isSet = false;
    m_partner_client_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_visible_to_seller_isSet = false;
    m_visible_to_seller_isValid = false;
}

void OAIClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClient::fromJsonObject(QJsonObject json) {

    m_client_account_id_isValid = ::OpenAPI::fromJsonValue(m_client_account_id, json[QString("clientAccountId")]);
    m_client_account_id_isSet = !json[QString("clientAccountId")].isNull() && m_client_account_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("entityName")]);
    m_entity_name_isSet = !json[QString("entityName")].isNull() && m_entity_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_partner_client_id_isValid = ::OpenAPI::fromJsonValue(m_partner_client_id, json[QString("partnerClientId")]);
    m_partner_client_id_isSet = !json[QString("partnerClientId")].isNull() && m_partner_client_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_visible_to_seller_isValid = ::OpenAPI::fromJsonValue(m_visible_to_seller, json[QString("visibleToSeller")]);
    m_visible_to_seller_isSet = !json[QString("visibleToSeller")].isNull() && m_visible_to_seller_isValid;
}

QString OAIClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClient::asJsonObject() const {
    QJsonObject obj;
    if (m_client_account_id_isSet) {
        obj.insert(QString("clientAccountId"), ::OpenAPI::toJsonValue(m_client_account_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_name_isSet) {
        obj.insert(QString("entityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_partner_client_id_isSet) {
        obj.insert(QString("partnerClientId"), ::OpenAPI::toJsonValue(m_partner_client_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_visible_to_seller_isSet) {
        obj.insert(QString("visibleToSeller"), ::OpenAPI::toJsonValue(m_visible_to_seller));
    }
    return obj;
}

QString OAIClient::getClientAccountId() const {
    return m_client_account_id;
}
void OAIClient::setClientAccountId(const QString &client_account_id) {
    m_client_account_id = client_account_id;
    m_client_account_id_isSet = true;
}

bool OAIClient::is_client_account_id_Set() const{
    return m_client_account_id_isSet;
}

bool OAIClient::is_client_account_id_Valid() const{
    return m_client_account_id_isValid;
}

QString OAIClient::getClientName() const {
    return m_client_name;
}
void OAIClient::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIClient::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIClient::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIClient::getEntityId() const {
    return m_entity_id;
}
void OAIClient::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIClient::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIClient::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIClient::getEntityName() const {
    return m_entity_name;
}
void OAIClient::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAIClient::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAIClient::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

QString OAIClient::getEntityType() const {
    return m_entity_type;
}
void OAIClient::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIClient::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIClient::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIClient::getPartnerClientId() const {
    return m_partner_client_id;
}
void OAIClient::setPartnerClientId(const QString &partner_client_id) {
    m_partner_client_id = partner_client_id;
    m_partner_client_id_isSet = true;
}

bool OAIClient::is_partner_client_id_Set() const{
    return m_partner_client_id_isSet;
}

bool OAIClient::is_partner_client_id_Valid() const{
    return m_partner_client_id_isValid;
}

QString OAIClient::getRole() const {
    return m_role;
}
void OAIClient::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIClient::is_role_Set() const{
    return m_role_isSet;
}

bool OAIClient::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIClient::getStatus() const {
    return m_status;
}
void OAIClient::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClient::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClient::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIClient::isVisibleToSeller() const {
    return m_visible_to_seller;
}
void OAIClient::setVisibleToSeller(const bool &visible_to_seller) {
    m_visible_to_seller = visible_to_seller;
    m_visible_to_seller_isSet = true;
}

bool OAIClient::is_visible_to_seller_Set() const{
    return m_visible_to_seller_isSet;
}

bool OAIClient::is_visible_to_seller_Valid() const{
    return m_visible_to_seller_isValid;
}

bool OAIClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_to_seller_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
