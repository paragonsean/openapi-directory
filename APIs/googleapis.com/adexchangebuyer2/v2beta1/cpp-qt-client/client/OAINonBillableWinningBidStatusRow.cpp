/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINonBillableWinningBidStatusRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINonBillableWinningBidStatusRow::OAINonBillableWinningBidStatusRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINonBillableWinningBidStatusRow::OAINonBillableWinningBidStatusRow() {
    this->initializeModel();
}

OAINonBillableWinningBidStatusRow::~OAINonBillableWinningBidStatusRow() {}

void OAINonBillableWinningBidStatusRow::initializeModel() {

    m_bid_count_isSet = false;
    m_bid_count_isValid = false;

    m_row_dimensions_isSet = false;
    m_row_dimensions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAINonBillableWinningBidStatusRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINonBillableWinningBidStatusRow::fromJsonObject(QJsonObject json) {

    m_bid_count_isValid = ::OpenAPI::fromJsonValue(m_bid_count, json[QString("bidCount")]);
    m_bid_count_isSet = !json[QString("bidCount")].isNull() && m_bid_count_isValid;

    m_row_dimensions_isValid = ::OpenAPI::fromJsonValue(m_row_dimensions, json[QString("rowDimensions")]);
    m_row_dimensions_isSet = !json[QString("rowDimensions")].isNull() && m_row_dimensions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAINonBillableWinningBidStatusRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINonBillableWinningBidStatusRow::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_count.isSet()) {
        obj.insert(QString("bidCount"), ::OpenAPI::toJsonValue(m_bid_count));
    }
    if (m_row_dimensions.isSet()) {
        obj.insert(QString("rowDimensions"), ::OpenAPI::toJsonValue(m_row_dimensions));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIMetricValue OAINonBillableWinningBidStatusRow::getBidCount() const {
    return m_bid_count;
}
void OAINonBillableWinningBidStatusRow::setBidCount(const OAIMetricValue &bid_count) {
    m_bid_count = bid_count;
    m_bid_count_isSet = true;
}

bool OAINonBillableWinningBidStatusRow::is_bid_count_Set() const{
    return m_bid_count_isSet;
}

bool OAINonBillableWinningBidStatusRow::is_bid_count_Valid() const{
    return m_bid_count_isValid;
}

OAIRowDimensions OAINonBillableWinningBidStatusRow::getRowDimensions() const {
    return m_row_dimensions;
}
void OAINonBillableWinningBidStatusRow::setRowDimensions(const OAIRowDimensions &row_dimensions) {
    m_row_dimensions = row_dimensions;
    m_row_dimensions_isSet = true;
}

bool OAINonBillableWinningBidStatusRow::is_row_dimensions_Set() const{
    return m_row_dimensions_isSet;
}

bool OAINonBillableWinningBidStatusRow::is_row_dimensions_Valid() const{
    return m_row_dimensions_isValid;
}

QString OAINonBillableWinningBidStatusRow::getStatus() const {
    return m_status;
}
void OAINonBillableWinningBidStatusRow::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINonBillableWinningBidStatusRow::is_status_Set() const{
    return m_status_isSet;
}

bool OAINonBillableWinningBidStatusRow::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINonBillableWinningBidStatusRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINonBillableWinningBidStatusRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
