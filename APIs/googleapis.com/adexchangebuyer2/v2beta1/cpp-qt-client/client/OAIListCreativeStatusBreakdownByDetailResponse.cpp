/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCreativeStatusBreakdownByDetailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCreativeStatusBreakdownByDetailResponse::OAIListCreativeStatusBreakdownByDetailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCreativeStatusBreakdownByDetailResponse::OAIListCreativeStatusBreakdownByDetailResponse() {
    this->initializeModel();
}

OAIListCreativeStatusBreakdownByDetailResponse::~OAIListCreativeStatusBreakdownByDetailResponse() {}

void OAIListCreativeStatusBreakdownByDetailResponse::initializeModel() {

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_filtered_bid_detail_rows_isSet = false;
    m_filtered_bid_detail_rows_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListCreativeStatusBreakdownByDetailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCreativeStatusBreakdownByDetailResponse::fromJsonObject(QJsonObject json) {

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("detailType")]);
    m_detail_type_isSet = !json[QString("detailType")].isNull() && m_detail_type_isValid;

    m_filtered_bid_detail_rows_isValid = ::OpenAPI::fromJsonValue(m_filtered_bid_detail_rows, json[QString("filteredBidDetailRows")]);
    m_filtered_bid_detail_rows_isSet = !json[QString("filteredBidDetailRows")].isNull() && m_filtered_bid_detail_rows_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListCreativeStatusBreakdownByDetailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCreativeStatusBreakdownByDetailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_type_isSet) {
        obj.insert(QString("detailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_filtered_bid_detail_rows.size() > 0) {
        obj.insert(QString("filteredBidDetailRows"), ::OpenAPI::toJsonValue(m_filtered_bid_detail_rows));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QString OAIListCreativeStatusBreakdownByDetailResponse::getDetailType() const {
    return m_detail_type;
}
void OAIListCreativeStatusBreakdownByDetailResponse::setDetailType(const QString &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QList<OAIFilteredBidDetailRow> OAIListCreativeStatusBreakdownByDetailResponse::getFilteredBidDetailRows() const {
    return m_filtered_bid_detail_rows;
}
void OAIListCreativeStatusBreakdownByDetailResponse::setFilteredBidDetailRows(const QList<OAIFilteredBidDetailRow> &filtered_bid_detail_rows) {
    m_filtered_bid_detail_rows = filtered_bid_detail_rows;
    m_filtered_bid_detail_rows_isSet = true;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_filtered_bid_detail_rows_Set() const{
    return m_filtered_bid_detail_rows_isSet;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_filtered_bid_detail_rows_Valid() const{
    return m_filtered_bid_detail_rows_isValid;
}

QString OAIListCreativeStatusBreakdownByDetailResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListCreativeStatusBreakdownByDetailResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_bid_detail_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCreativeStatusBreakdownByDetailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
