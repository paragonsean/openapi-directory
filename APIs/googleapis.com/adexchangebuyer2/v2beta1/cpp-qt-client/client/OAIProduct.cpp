/**
 * Ad Exchange Buyer API II
 * Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.
 *
 * The version of the OpenAPI document: v2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_available_end_time_isSet = false;
    m_available_end_time_isValid = false;

    m_available_start_time_isSet = false;
    m_available_start_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_contacts_isSet = false;
    m_creator_contacts_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_has_creator_signed_off_isSet = false;
    m_has_creator_signed_off_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_revision_isSet = false;
    m_product_revision_isValid = false;

    m_publisher_profile_id_isSet = false;
    m_publisher_profile_id_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_syndication_product_isSet = false;
    m_syndication_product_isValid = false;

    m_targeting_criterion_isSet = false;
    m_targeting_criterion_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_web_property_code_isSet = false;
    m_web_property_code_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_available_end_time_isValid = ::OpenAPI::fromJsonValue(m_available_end_time, json[QString("availableEndTime")]);
    m_available_end_time_isSet = !json[QString("availableEndTime")].isNull() && m_available_end_time_isValid;

    m_available_start_time_isValid = ::OpenAPI::fromJsonValue(m_available_start_time, json[QString("availableStartTime")]);
    m_available_start_time_isSet = !json[QString("availableStartTime")].isNull() && m_available_start_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_contacts_isValid = ::OpenAPI::fromJsonValue(m_creator_contacts, json[QString("creatorContacts")]);
    m_creator_contacts_isSet = !json[QString("creatorContacts")].isNull() && m_creator_contacts_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_has_creator_signed_off_isValid = ::OpenAPI::fromJsonValue(m_has_creator_signed_off, json[QString("hasCreatorSignedOff")]);
    m_has_creator_signed_off_isSet = !json[QString("hasCreatorSignedOff")].isNull() && m_has_creator_signed_off_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_revision_isValid = ::OpenAPI::fromJsonValue(m_product_revision, json[QString("productRevision")]);
    m_product_revision_isSet = !json[QString("productRevision")].isNull() && m_product_revision_isValid;

    m_publisher_profile_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_profile_id, json[QString("publisherProfileId")]);
    m_publisher_profile_id_isSet = !json[QString("publisherProfileId")].isNull() && m_publisher_profile_id_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_syndication_product_isValid = ::OpenAPI::fromJsonValue(m_syndication_product, json[QString("syndicationProduct")]);
    m_syndication_product_isSet = !json[QString("syndicationProduct")].isNull() && m_syndication_product_isValid;

    m_targeting_criterion_isValid = ::OpenAPI::fromJsonValue(m_targeting_criterion, json[QString("targetingCriterion")]);
    m_targeting_criterion_isSet = !json[QString("targetingCriterion")].isNull() && m_targeting_criterion_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_web_property_code_isValid = ::OpenAPI::fromJsonValue(m_web_property_code, json[QString("webPropertyCode")]);
    m_web_property_code_isSet = !json[QString("webPropertyCode")].isNull() && m_web_property_code_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_available_end_time_isSet) {
        obj.insert(QString("availableEndTime"), ::OpenAPI::toJsonValue(m_available_end_time));
    }
    if (m_available_start_time_isSet) {
        obj.insert(QString("availableStartTime"), ::OpenAPI::toJsonValue(m_available_start_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_contacts.size() > 0) {
        obj.insert(QString("creatorContacts"), ::OpenAPI::toJsonValue(m_creator_contacts));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_has_creator_signed_off_isSet) {
        obj.insert(QString("hasCreatorSignedOff"), ::OpenAPI::toJsonValue(m_has_creator_signed_off));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_revision_isSet) {
        obj.insert(QString("productRevision"), ::OpenAPI::toJsonValue(m_product_revision));
    }
    if (m_publisher_profile_id_isSet) {
        obj.insert(QString("publisherProfileId"), ::OpenAPI::toJsonValue(m_publisher_profile_id));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_syndication_product_isSet) {
        obj.insert(QString("syndicationProduct"), ::OpenAPI::toJsonValue(m_syndication_product));
    }
    if (m_targeting_criterion.size() > 0) {
        obj.insert(QString("targetingCriterion"), ::OpenAPI::toJsonValue(m_targeting_criterion));
    }
    if (m_terms.isSet()) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_web_property_code_isSet) {
        obj.insert(QString("webPropertyCode"), ::OpenAPI::toJsonValue(m_web_property_code));
    }
    return obj;
}

QString OAIProduct::getAvailableEndTime() const {
    return m_available_end_time;
}
void OAIProduct::setAvailableEndTime(const QString &available_end_time) {
    m_available_end_time = available_end_time;
    m_available_end_time_isSet = true;
}

bool OAIProduct::is_available_end_time_Set() const{
    return m_available_end_time_isSet;
}

bool OAIProduct::is_available_end_time_Valid() const{
    return m_available_end_time_isValid;
}

QString OAIProduct::getAvailableStartTime() const {
    return m_available_start_time;
}
void OAIProduct::setAvailableStartTime(const QString &available_start_time) {
    m_available_start_time = available_start_time;
    m_available_start_time_isSet = true;
}

bool OAIProduct::is_available_start_time_Set() const{
    return m_available_start_time_isSet;
}

bool OAIProduct::is_available_start_time_Valid() const{
    return m_available_start_time_isValid;
}

QString OAIProduct::getCreateTime() const {
    return m_create_time;
}
void OAIProduct::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIProduct::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIProduct::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIContactInformation> OAIProduct::getCreatorContacts() const {
    return m_creator_contacts;
}
void OAIProduct::setCreatorContacts(const QList<OAIContactInformation> &creator_contacts) {
    m_creator_contacts = creator_contacts;
    m_creator_contacts_isSet = true;
}

bool OAIProduct::is_creator_contacts_Set() const{
    return m_creator_contacts_isSet;
}

bool OAIProduct::is_creator_contacts_Valid() const{
    return m_creator_contacts_isValid;
}

QString OAIProduct::getDisplayName() const {
    return m_display_name;
}
void OAIProduct::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProduct::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProduct::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIProduct::isHasCreatorSignedOff() const {
    return m_has_creator_signed_off;
}
void OAIProduct::setHasCreatorSignedOff(const bool &has_creator_signed_off) {
    m_has_creator_signed_off = has_creator_signed_off;
    m_has_creator_signed_off_isSet = true;
}

bool OAIProduct::is_has_creator_signed_off_Set() const{
    return m_has_creator_signed_off_isSet;
}

bool OAIProduct::is_has_creator_signed_off_Valid() const{
    return m_has_creator_signed_off_isValid;
}

QString OAIProduct::getProductId() const {
    return m_product_id;
}
void OAIProduct::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProduct::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProduct::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProduct::getProductRevision() const {
    return m_product_revision;
}
void OAIProduct::setProductRevision(const QString &product_revision) {
    m_product_revision = product_revision;
    m_product_revision_isSet = true;
}

bool OAIProduct::is_product_revision_Set() const{
    return m_product_revision_isSet;
}

bool OAIProduct::is_product_revision_Valid() const{
    return m_product_revision_isValid;
}

QString OAIProduct::getPublisherProfileId() const {
    return m_publisher_profile_id;
}
void OAIProduct::setPublisherProfileId(const QString &publisher_profile_id) {
    m_publisher_profile_id = publisher_profile_id;
    m_publisher_profile_id_isSet = true;
}

bool OAIProduct::is_publisher_profile_id_Set() const{
    return m_publisher_profile_id_isSet;
}

bool OAIProduct::is_publisher_profile_id_Valid() const{
    return m_publisher_profile_id_isValid;
}

OAISeller OAIProduct::getSeller() const {
    return m_seller;
}
void OAIProduct::setSeller(const OAISeller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIProduct::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIProduct::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAIProduct::getSyndicationProduct() const {
    return m_syndication_product;
}
void OAIProduct::setSyndicationProduct(const QString &syndication_product) {
    m_syndication_product = syndication_product;
    m_syndication_product_isSet = true;
}

bool OAIProduct::is_syndication_product_Set() const{
    return m_syndication_product_isSet;
}

bool OAIProduct::is_syndication_product_Valid() const{
    return m_syndication_product_isValid;
}

QList<OAITargetingCriteria> OAIProduct::getTargetingCriterion() const {
    return m_targeting_criterion;
}
void OAIProduct::setTargetingCriterion(const QList<OAITargetingCriteria> &targeting_criterion) {
    m_targeting_criterion = targeting_criterion;
    m_targeting_criterion_isSet = true;
}

bool OAIProduct::is_targeting_criterion_Set() const{
    return m_targeting_criterion_isSet;
}

bool OAIProduct::is_targeting_criterion_Valid() const{
    return m_targeting_criterion_isValid;
}

OAIDealTerms OAIProduct::getTerms() const {
    return m_terms;
}
void OAIProduct::setTerms(const OAIDealTerms &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIProduct::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIProduct::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIProduct::getUpdateTime() const {
    return m_update_time;
}
void OAIProduct::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIProduct::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIProduct::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIProduct::getWebPropertyCode() const {
    return m_web_property_code;
}
void OAIProduct::setWebPropertyCode(const QString &web_property_code) {
    m_web_property_code = web_property_code;
    m_web_property_code_isSet = true;
}

bool OAIProduct::is_web_property_code_Set() const{
    return m_web_property_code_isSet;
}

bool OAIProduct::is_web_property_code_Valid() const{
    return m_web_property_code_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_creator_signed_off_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_syndication_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_criterion.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_property_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
