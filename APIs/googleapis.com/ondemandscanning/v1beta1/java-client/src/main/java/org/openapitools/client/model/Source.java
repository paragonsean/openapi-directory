/*
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FileHashes;
import org.openapitools.client.model.SourceContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Source describes the location of the source used for the build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:31.988614-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Source {
  public static final String SERIALIZED_NAME_ADDITIONAL_CONTEXTS = "additionalContexts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONTEXTS)
  private List<SourceContext> additionalContexts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARTIFACT_STORAGE_SOURCE_URI = "artifactStorageSourceUri";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_STORAGE_SOURCE_URI)
  private String artifactStorageSourceUri;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private SourceContext context;

  public static final String SERIALIZED_NAME_FILE_HASHES = "fileHashes";
  @SerializedName(SERIALIZED_NAME_FILE_HASHES)
  private Map<String, FileHashes> fileHashes = new HashMap<>();

  public Source() {
  }

  public Source additionalContexts(List<SourceContext> additionalContexts) {
    this.additionalContexts = additionalContexts;
    return this;
  }

  public Source addAdditionalContextsItem(SourceContext additionalContextsItem) {
    if (this.additionalContexts == null) {
      this.additionalContexts = new ArrayList<>();
    }
    this.additionalContexts.add(additionalContextsItem);
    return this;
  }

  /**
   * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
   * @return additionalContexts
   */
  @javax.annotation.Nullable
  public List<SourceContext> getAdditionalContexts() {
    return additionalContexts;
  }

  public void setAdditionalContexts(List<SourceContext> additionalContexts) {
    this.additionalContexts = additionalContexts;
  }


  public Source artifactStorageSourceUri(String artifactStorageSourceUri) {
    this.artifactStorageSourceUri = artifactStorageSourceUri;
    return this;
  }

  /**
   * If provided, the input binary artifacts for the build came from this location.
   * @return artifactStorageSourceUri
   */
  @javax.annotation.Nullable
  public String getArtifactStorageSourceUri() {
    return artifactStorageSourceUri;
  }

  public void setArtifactStorageSourceUri(String artifactStorageSourceUri) {
    this.artifactStorageSourceUri = artifactStorageSourceUri;
  }


  public Source context(SourceContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public SourceContext getContext() {
    return context;
  }

  public void setContext(SourceContext context) {
    this.context = context;
  }


  public Source fileHashes(Map<String, FileHashes> fileHashes) {
    this.fileHashes = fileHashes;
    return this;
  }

  public Source putFileHashesItem(String key, FileHashes fileHashesItem) {
    if (this.fileHashes == null) {
      this.fileHashes = new HashMap<>();
    }
    this.fileHashes.put(key, fileHashesItem);
    return this;
  }

  /**
   * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
   * @return fileHashes
   */
  @javax.annotation.Nullable
  public Map<String, FileHashes> getFileHashes() {
    return fileHashes;
  }

  public void setFileHashes(Map<String, FileHashes> fileHashes) {
    this.fileHashes = fileHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.additionalContexts, source.additionalContexts) &&
        Objects.equals(this.artifactStorageSourceUri, source.artifactStorageSourceUri) &&
        Objects.equals(this.context, source.context) &&
        Objects.equals(this.fileHashes, source.fileHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalContexts, artifactStorageSourceUri, context, fileHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    additionalContexts: ").append(toIndentedString(additionalContexts)).append("\n");
    sb.append("    artifactStorageSourceUri: ").append(toIndentedString(artifactStorageSourceUri)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    fileHashes: ").append(toIndentedString(fileHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalContexts");
    openapiFields.add("artifactStorageSourceUri");
    openapiFields.add("context");
    openapiFields.add("fileHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Source
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Source.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Source is not found in the empty JSON string", Source.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Source.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Source` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additionalContexts") != null && !jsonObj.get("additionalContexts").isJsonNull()) {
        JsonArray jsonArrayadditionalContexts = jsonObj.getAsJsonArray("additionalContexts");
        if (jsonArrayadditionalContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalContexts` to be an array in the JSON string but got `%s`", jsonObj.get("additionalContexts").toString()));
          }

          // validate the optional field `additionalContexts` (array)
          for (int i = 0; i < jsonArrayadditionalContexts.size(); i++) {
            SourceContext.validateJsonElement(jsonArrayadditionalContexts.get(i));
          };
        }
      }
      if ((jsonObj.get("artifactStorageSourceUri") != null && !jsonObj.get("artifactStorageSourceUri").isJsonNull()) && !jsonObj.get("artifactStorageSourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artifactStorageSourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artifactStorageSourceUri").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        SourceContext.validateJsonElement(jsonObj.get("context"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Source.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Source' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Source> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Source.class));

       return (TypeAdapter<T>) new TypeAdapter<Source>() {
           @Override
           public void write(JsonWriter out, Source value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Source read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Source given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Source
   * @throws IOException if the JSON string is invalid with respect to Source
   */
  public static Source fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Source.class);
  }

  /**
   * Convert an instance of Source to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

