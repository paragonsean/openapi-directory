/*
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.Command;
import org.openapitools.client.model.Source;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:31.988614-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildProvenance {
  public static final String SERIALIZED_NAME_BUILD_OPTIONS = "buildOptions";
  @SerializedName(SERIALIZED_NAME_BUILD_OPTIONS)
  private Map<String, String> buildOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_BUILDER_VERSION = "builderVersion";
  @SerializedName(SERIALIZED_NAME_BUILDER_VERSION)
  private String builderVersion;

  public static final String SERIALIZED_NAME_BUILT_ARTIFACTS = "builtArtifacts";
  @SerializedName(SERIALIZED_NAME_BUILT_ARTIFACTS)
  private List<Artifact> builtArtifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMANDS = "commands";
  @SerializedName(SERIALIZED_NAME_COMMANDS)
  private List<Command> commands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGS_URI = "logsUri";
  @SerializedName(SERIALIZED_NAME_LOGS_URI)
  private String logsUri;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SOURCE_PROVENANCE = "sourceProvenance";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROVENANCE)
  private Source sourceProvenance;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TRIGGER_ID = "triggerId";
  @SerializedName(SERIALIZED_NAME_TRIGGER_ID)
  private String triggerId;

  public BuildProvenance() {
  }

  public BuildProvenance buildOptions(Map<String, String> buildOptions) {
    this.buildOptions = buildOptions;
    return this;
  }

  public BuildProvenance putBuildOptionsItem(String key, String buildOptionsItem) {
    if (this.buildOptions == null) {
      this.buildOptions = new HashMap<>();
    }
    this.buildOptions.put(key, buildOptionsItem);
    return this;
  }

  /**
   * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
   * @return buildOptions
   */
  @javax.annotation.Nullable
  public Map<String, String> getBuildOptions() {
    return buildOptions;
  }

  public void setBuildOptions(Map<String, String> buildOptions) {
    this.buildOptions = buildOptions;
  }


  public BuildProvenance builderVersion(String builderVersion) {
    this.builderVersion = builderVersion;
    return this;
  }

  /**
   * Version string of the builder at the time this build was executed.
   * @return builderVersion
   */
  @javax.annotation.Nullable
  public String getBuilderVersion() {
    return builderVersion;
  }

  public void setBuilderVersion(String builderVersion) {
    this.builderVersion = builderVersion;
  }


  public BuildProvenance builtArtifacts(List<Artifact> builtArtifacts) {
    this.builtArtifacts = builtArtifacts;
    return this;
  }

  public BuildProvenance addBuiltArtifactsItem(Artifact builtArtifactsItem) {
    if (this.builtArtifacts == null) {
      this.builtArtifacts = new ArrayList<>();
    }
    this.builtArtifacts.add(builtArtifactsItem);
    return this;
  }

  /**
   * Output of the build.
   * @return builtArtifacts
   */
  @javax.annotation.Nullable
  public List<Artifact> getBuiltArtifacts() {
    return builtArtifacts;
  }

  public void setBuiltArtifacts(List<Artifact> builtArtifacts) {
    this.builtArtifacts = builtArtifacts;
  }


  public BuildProvenance commands(List<Command> commands) {
    this.commands = commands;
    return this;
  }

  public BuildProvenance addCommandsItem(Command commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<>();
    }
    this.commands.add(commandsItem);
    return this;
  }

  /**
   * Commands requested by the build.
   * @return commands
   */
  @javax.annotation.Nullable
  public List<Command> getCommands() {
    return commands;
  }

  public void setCommands(List<Command> commands) {
    this.commands = commands;
  }


  public BuildProvenance createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Time at which the build was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public BuildProvenance creator(String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * E-mail address of the user who initiated this build. Note that this was the user&#39;s e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
   * @return creator
   */
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public BuildProvenance endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Time at which execution of the build was finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public BuildProvenance id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Required. Unique identifier of the build.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BuildProvenance logsUri(String logsUri) {
    this.logsUri = logsUri;
    return this;
  }

  /**
   * URI where any logs for this provenance were written.
   * @return logsUri
   */
  @javax.annotation.Nullable
  public String getLogsUri() {
    return logsUri;
  }

  public void setLogsUri(String logsUri) {
    this.logsUri = logsUri;
  }


  public BuildProvenance projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * ID of the project.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public BuildProvenance sourceProvenance(Source sourceProvenance) {
    this.sourceProvenance = sourceProvenance;
    return this;
  }

  /**
   * Get sourceProvenance
   * @return sourceProvenance
   */
  @javax.annotation.Nullable
  public Source getSourceProvenance() {
    return sourceProvenance;
  }

  public void setSourceProvenance(Source sourceProvenance) {
    this.sourceProvenance = sourceProvenance;
  }


  public BuildProvenance startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time at which execution of the build was started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public BuildProvenance triggerId(String triggerId) {
    this.triggerId = triggerId;
    return this;
  }

  /**
   * Trigger identifier if the build was triggered automatically; empty if not.
   * @return triggerId
   */
  @javax.annotation.Nullable
  public String getTriggerId() {
    return triggerId;
  }

  public void setTriggerId(String triggerId) {
    this.triggerId = triggerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildProvenance buildProvenance = (BuildProvenance) o;
    return Objects.equals(this.buildOptions, buildProvenance.buildOptions) &&
        Objects.equals(this.builderVersion, buildProvenance.builderVersion) &&
        Objects.equals(this.builtArtifacts, buildProvenance.builtArtifacts) &&
        Objects.equals(this.commands, buildProvenance.commands) &&
        Objects.equals(this.createTime, buildProvenance.createTime) &&
        Objects.equals(this.creator, buildProvenance.creator) &&
        Objects.equals(this.endTime, buildProvenance.endTime) &&
        Objects.equals(this.id, buildProvenance.id) &&
        Objects.equals(this.logsUri, buildProvenance.logsUri) &&
        Objects.equals(this.projectId, buildProvenance.projectId) &&
        Objects.equals(this.sourceProvenance, buildProvenance.sourceProvenance) &&
        Objects.equals(this.startTime, buildProvenance.startTime) &&
        Objects.equals(this.triggerId, buildProvenance.triggerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildOptions, builderVersion, builtArtifacts, commands, createTime, creator, endTime, id, logsUri, projectId, sourceProvenance, startTime, triggerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildProvenance {\n");
    sb.append("    buildOptions: ").append(toIndentedString(buildOptions)).append("\n");
    sb.append("    builderVersion: ").append(toIndentedString(builderVersion)).append("\n");
    sb.append("    builtArtifacts: ").append(toIndentedString(builtArtifacts)).append("\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logsUri: ").append(toIndentedString(logsUri)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    sourceProvenance: ").append(toIndentedString(sourceProvenance)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    triggerId: ").append(toIndentedString(triggerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildOptions");
    openapiFields.add("builderVersion");
    openapiFields.add("builtArtifacts");
    openapiFields.add("commands");
    openapiFields.add("createTime");
    openapiFields.add("creator");
    openapiFields.add("endTime");
    openapiFields.add("id");
    openapiFields.add("logsUri");
    openapiFields.add("projectId");
    openapiFields.add("sourceProvenance");
    openapiFields.add("startTime");
    openapiFields.add("triggerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildProvenance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildProvenance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildProvenance is not found in the empty JSON string", BuildProvenance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildProvenance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildProvenance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("builderVersion") != null && !jsonObj.get("builderVersion").isJsonNull()) && !jsonObj.get("builderVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `builderVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("builderVersion").toString()));
      }
      if (jsonObj.get("builtArtifacts") != null && !jsonObj.get("builtArtifacts").isJsonNull()) {
        JsonArray jsonArraybuiltArtifacts = jsonObj.getAsJsonArray("builtArtifacts");
        if (jsonArraybuiltArtifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("builtArtifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `builtArtifacts` to be an array in the JSON string but got `%s`", jsonObj.get("builtArtifacts").toString()));
          }

          // validate the optional field `builtArtifacts` (array)
          for (int i = 0; i < jsonArraybuiltArtifacts.size(); i++) {
            Artifact.validateJsonElement(jsonArraybuiltArtifacts.get(i));
          };
        }
      }
      if (jsonObj.get("commands") != null && !jsonObj.get("commands").isJsonNull()) {
        JsonArray jsonArraycommands = jsonObj.getAsJsonArray("commands");
        if (jsonArraycommands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commands` to be an array in the JSON string but got `%s`", jsonObj.get("commands").toString()));
          }

          // validate the optional field `commands` (array)
          for (int i = 0; i < jsonArraycommands.size(); i++) {
            Command.validateJsonElement(jsonArraycommands.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logsUri") != null && !jsonObj.get("logsUri").isJsonNull()) && !jsonObj.get("logsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logsUri").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      // validate the optional field `sourceProvenance`
      if (jsonObj.get("sourceProvenance") != null && !jsonObj.get("sourceProvenance").isJsonNull()) {
        Source.validateJsonElement(jsonObj.get("sourceProvenance"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("triggerId") != null && !jsonObj.get("triggerId").isJsonNull()) && !jsonObj.get("triggerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildProvenance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildProvenance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildProvenance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildProvenance.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildProvenance>() {
           @Override
           public void write(JsonWriter out, BuildProvenance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildProvenance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildProvenance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildProvenance
   * @throws IOException if the JSON string is invalid with respect to BuildProvenance
   */
  public static BuildProvenance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildProvenance.class);
  }

  /**
   * Convert an instance of BuildProvenance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

