/*
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SbomReferenceIntotoPredicate;
import org.openapitools.client.model.Subject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:31.988614-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SbomReferenceIntotoPayload {
  public static final String SERIALIZED_NAME_TYPE = "_type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PREDICATE = "predicate";
  @SerializedName(SERIALIZED_NAME_PREDICATE)
  private SbomReferenceIntotoPredicate predicate;

  public static final String SERIALIZED_NAME_PREDICATE_TYPE = "predicateType";
  @SerializedName(SERIALIZED_NAME_PREDICATE_TYPE)
  private String predicateType;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private List<Subject> subject = new ArrayList<>();

  public SbomReferenceIntotoPayload() {
  }

  public SbomReferenceIntotoPayload type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Identifier for the schema of the Statement.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SbomReferenceIntotoPayload predicate(SbomReferenceIntotoPredicate predicate) {
    this.predicate = predicate;
    return this;
  }

  /**
   * Get predicate
   * @return predicate
   */
  @javax.annotation.Nullable
  public SbomReferenceIntotoPredicate getPredicate() {
    return predicate;
  }

  public void setPredicate(SbomReferenceIntotoPredicate predicate) {
    this.predicate = predicate;
  }


  public SbomReferenceIntotoPayload predicateType(String predicateType) {
    this.predicateType = predicateType;
    return this;
  }

  /**
   * URI identifying the type of the Predicate.
   * @return predicateType
   */
  @javax.annotation.Nullable
  public String getPredicateType() {
    return predicateType;
  }

  public void setPredicateType(String predicateType) {
    this.predicateType = predicateType;
  }


  public SbomReferenceIntotoPayload subject(List<Subject> subject) {
    this.subject = subject;
    return this;
  }

  public SbomReferenceIntotoPayload addSubjectItem(Subject subjectItem) {
    if (this.subject == null) {
      this.subject = new ArrayList<>();
    }
    this.subject.add(subjectItem);
    return this;
  }

  /**
   * Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
   * @return subject
   */
  @javax.annotation.Nullable
  public List<Subject> getSubject() {
    return subject;
  }

  public void setSubject(List<Subject> subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SbomReferenceIntotoPayload sbomReferenceIntotoPayload = (SbomReferenceIntotoPayload) o;
    return Objects.equals(this.type, sbomReferenceIntotoPayload.type) &&
        Objects.equals(this.predicate, sbomReferenceIntotoPayload.predicate) &&
        Objects.equals(this.predicateType, sbomReferenceIntotoPayload.predicateType) &&
        Objects.equals(this.subject, sbomReferenceIntotoPayload.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, predicate, predicateType, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SbomReferenceIntotoPayload {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    predicate: ").append(toIndentedString(predicate)).append("\n");
    sb.append("    predicateType: ").append(toIndentedString(predicateType)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_type");
    openapiFields.add("predicate");
    openapiFields.add("predicateType");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SbomReferenceIntotoPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SbomReferenceIntotoPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SbomReferenceIntotoPayload is not found in the empty JSON string", SbomReferenceIntotoPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SbomReferenceIntotoPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SbomReferenceIntotoPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_type") != null && !jsonObj.get("_type").isJsonNull()) && !jsonObj.get("_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_type").toString()));
      }
      // validate the optional field `predicate`
      if (jsonObj.get("predicate") != null && !jsonObj.get("predicate").isJsonNull()) {
        SbomReferenceIntotoPredicate.validateJsonElement(jsonObj.get("predicate"));
      }
      if ((jsonObj.get("predicateType") != null && !jsonObj.get("predicateType").isJsonNull()) && !jsonObj.get("predicateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predicateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predicateType").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        JsonArray jsonArraysubject = jsonObj.getAsJsonArray("subject");
        if (jsonArraysubject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subject").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subject` to be an array in the JSON string but got `%s`", jsonObj.get("subject").toString()));
          }

          // validate the optional field `subject` (array)
          for (int i = 0; i < jsonArraysubject.size(); i++) {
            Subject.validateJsonElement(jsonArraysubject.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SbomReferenceIntotoPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SbomReferenceIntotoPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SbomReferenceIntotoPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SbomReferenceIntotoPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<SbomReferenceIntotoPayload>() {
           @Override
           public void write(JsonWriter out, SbomReferenceIntotoPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SbomReferenceIntotoPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SbomReferenceIntotoPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SbomReferenceIntotoPayload
   * @throws IOException if the JSON string is invalid with respect to SbomReferenceIntotoPayload
   */
  public static SbomReferenceIntotoPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SbomReferenceIntotoPayload.class);
  }

  /**
   * Convert an instance of SbomReferenceIntotoPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

