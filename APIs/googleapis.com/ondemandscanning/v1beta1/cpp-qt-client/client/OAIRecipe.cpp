/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipe::OAIRecipe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipe::OAIRecipe() {
    this->initializeModel();
}

OAIRecipe::~OAIRecipe() {}

void OAIRecipe::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_defined_in_material_isSet = false;
    m_defined_in_material_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRecipe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipe::fromJsonObject(QJsonObject json) {

    if(json["arguments"].isArray()){
        auto arr = json["arguments"].toArray();
        m_arguments_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_arguments_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_arguments_isSet = !jval.isNull() && m_arguments_isValid;
                m_arguments.push_back(item);
            }
        }
    }

    m_defined_in_material_isValid = ::OpenAPI::fromJsonValue(m_defined_in_material, json[QString("definedInMaterial")]);
    m_defined_in_material_isSet = !json[QString("definedInMaterial")].isNull() && m_defined_in_material_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("entryPoint")]);
    m_entry_point_isSet = !json[QString("entryPoint")].isNull() && m_entry_point_isValid;

    if(json["environment"].isArray()){
        auto arr = json["environment"].toArray();
        m_environment_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_environment_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_environment_isSet = !jval.isNull() && m_environment_isValid;
                m_environment.push_back(item);
            }
        }
    }

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRecipe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipe::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        
        obj.insert(QString("arguments"), toJsonValue(m_arguments));
    }
    if (m_defined_in_material_isSet) {
        obj.insert(QString("definedInMaterial"), ::OpenAPI::toJsonValue(m_defined_in_material));
    }
    if (m_entry_point_isSet) {
        obj.insert(QString("entryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_environment.size() > 0) {
        
        obj.insert(QString("environment"), toJsonValue(m_environment));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QMap<QString, QJsonValue>> OAIRecipe::getArguments() const {
    return m_arguments;
}
void OAIRecipe::setArguments(const QList<QMap<QString, QJsonValue>> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIRecipe::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIRecipe::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIRecipe::getDefinedInMaterial() const {
    return m_defined_in_material;
}
void OAIRecipe::setDefinedInMaterial(const QString &defined_in_material) {
    m_defined_in_material = defined_in_material;
    m_defined_in_material_isSet = true;
}

bool OAIRecipe::is_defined_in_material_Set() const{
    return m_defined_in_material_isSet;
}

bool OAIRecipe::is_defined_in_material_Valid() const{
    return m_defined_in_material_isValid;
}

QString OAIRecipe::getEntryPoint() const {
    return m_entry_point;
}
void OAIRecipe::setEntryPoint(const QString &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAIRecipe::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAIRecipe::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QList<QMap<QString, QJsonValue>> OAIRecipe::getEnvironment() const {
    return m_environment;
}
void OAIRecipe::setEnvironment(const QList<QMap<QString, QJsonValue>> &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIRecipe::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIRecipe::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIRecipe::getType() const {
    return m_type;
}
void OAIRecipe::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecipe::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecipe::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRecipe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_defined_in_material_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
