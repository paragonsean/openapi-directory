/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignature::OAISignature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignature::OAISignature() {
    this->initializeModel();
}

OAISignature::~OAISignature() {}

void OAISignature::initializeModel() {

    m_public_key_id_isSet = false;
    m_public_key_id_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAISignature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignature::fromJsonObject(QJsonObject json) {

    m_public_key_id_isValid = ::OpenAPI::fromJsonValue(m_public_key_id, json[QString("publicKeyId")]);
    m_public_key_id_isSet = !json[QString("publicKeyId")].isNull() && m_public_key_id_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAISignature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignature::asJsonObject() const {
    QJsonObject obj;
    if (m_public_key_id_isSet) {
        obj.insert(QString("publicKeyId"), ::OpenAPI::toJsonValue(m_public_key_id));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

QString OAISignature::getPublicKeyId() const {
    return m_public_key_id;
}
void OAISignature::setPublicKeyId(const QString &public_key_id) {
    m_public_key_id = public_key_id;
    m_public_key_id_isSet = true;
}

bool OAISignature::is_public_key_id_Set() const{
    return m_public_key_id_isSet;
}

bool OAISignature::is_public_key_id_Valid() const{
    return m_public_key_id_isValid;
}

QByteArray OAISignature::getSignature() const {
    return m_signature;
}
void OAISignature::setSignature(const QByteArray &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAISignature::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAISignature::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAISignature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_public_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
