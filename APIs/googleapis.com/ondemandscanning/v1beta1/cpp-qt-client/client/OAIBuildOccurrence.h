/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildOccurrence.h
 *
 * Details of a build occurrence.
 */

#ifndef OAIBuildOccurrence_H
#define OAIBuildOccurrence_H

#include <QJsonObject>

#include "OAIBuildProvenance.h"
#include "OAIInTotoProvenance.h"
#include "OAIInTotoSlsaProvenanceV1.h"
#include "OAIInTotoStatement.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInTotoSlsaProvenanceV1;
class OAIInTotoProvenance;
class OAIInTotoStatement;
class OAIBuildProvenance;

class OAIBuildOccurrence : public OAIObject {
public:
    OAIBuildOccurrence();
    OAIBuildOccurrence(QString json);
    ~OAIBuildOccurrence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIInTotoSlsaProvenanceV1 getInTotoSlsaProvenanceV1() const;
    void setInTotoSlsaProvenanceV1(const OAIInTotoSlsaProvenanceV1 &in_toto_slsa_provenance_v1);
    bool is_in_toto_slsa_provenance_v1_Set() const;
    bool is_in_toto_slsa_provenance_v1_Valid() const;

    OAIInTotoProvenance getIntotoProvenance() const;
    void setIntotoProvenance(const OAIInTotoProvenance &intoto_provenance);
    bool is_intoto_provenance_Set() const;
    bool is_intoto_provenance_Valid() const;

    OAIInTotoStatement getIntotoStatement() const;
    void setIntotoStatement(const OAIInTotoStatement &intoto_statement);
    bool is_intoto_statement_Set() const;
    bool is_intoto_statement_Valid() const;

    OAIBuildProvenance getProvenance() const;
    void setProvenance(const OAIBuildProvenance &provenance);
    bool is_provenance_Set() const;
    bool is_provenance_Valid() const;

    QString getProvenanceBytes() const;
    void setProvenanceBytes(const QString &provenance_bytes);
    bool is_provenance_bytes_Set() const;
    bool is_provenance_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIInTotoSlsaProvenanceV1 m_in_toto_slsa_provenance_v1;
    bool m_in_toto_slsa_provenance_v1_isSet;
    bool m_in_toto_slsa_provenance_v1_isValid;

    OAIInTotoProvenance m_intoto_provenance;
    bool m_intoto_provenance_isSet;
    bool m_intoto_provenance_isValid;

    OAIInTotoStatement m_intoto_statement;
    bool m_intoto_statement_isSet;
    bool m_intoto_statement_isValid;

    OAIBuildProvenance m_provenance;
    bool m_provenance_isSet;
    bool m_provenance_isValid;

    QString m_provenance_bytes;
    bool m_provenance_bytes_isSet;
    bool m_provenance_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildOccurrence)

#endif // OAIBuildOccurrence_H
