/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComplianceOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComplianceOccurrence::OAIComplianceOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComplianceOccurrence::OAIComplianceOccurrence() {
    this->initializeModel();
}

OAIComplianceOccurrence::~OAIComplianceOccurrence() {}

void OAIComplianceOccurrence::initializeModel() {

    m_non_compliance_reason_isSet = false;
    m_non_compliance_reason_isValid = false;

    m_non_compliant_files_isSet = false;
    m_non_compliant_files_isValid = false;
}

void OAIComplianceOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComplianceOccurrence::fromJsonObject(QJsonObject json) {

    m_non_compliance_reason_isValid = ::OpenAPI::fromJsonValue(m_non_compliance_reason, json[QString("nonComplianceReason")]);
    m_non_compliance_reason_isSet = !json[QString("nonComplianceReason")].isNull() && m_non_compliance_reason_isValid;

    m_non_compliant_files_isValid = ::OpenAPI::fromJsonValue(m_non_compliant_files, json[QString("nonCompliantFiles")]);
    m_non_compliant_files_isSet = !json[QString("nonCompliantFiles")].isNull() && m_non_compliant_files_isValid;
}

QString OAIComplianceOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComplianceOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_non_compliance_reason_isSet) {
        obj.insert(QString("nonComplianceReason"), ::OpenAPI::toJsonValue(m_non_compliance_reason));
    }
    if (m_non_compliant_files.size() > 0) {
        obj.insert(QString("nonCompliantFiles"), ::OpenAPI::toJsonValue(m_non_compliant_files));
    }
    return obj;
}

QString OAIComplianceOccurrence::getNonComplianceReason() const {
    return m_non_compliance_reason;
}
void OAIComplianceOccurrence::setNonComplianceReason(const QString &non_compliance_reason) {
    m_non_compliance_reason = non_compliance_reason;
    m_non_compliance_reason_isSet = true;
}

bool OAIComplianceOccurrence::is_non_compliance_reason_Set() const{
    return m_non_compliance_reason_isSet;
}

bool OAIComplianceOccurrence::is_non_compliance_reason_Valid() const{
    return m_non_compliance_reason_isValid;
}

QList<OAINonCompliantFile> OAIComplianceOccurrence::getNonCompliantFiles() const {
    return m_non_compliant_files;
}
void OAIComplianceOccurrence::setNonCompliantFiles(const QList<OAINonCompliantFile> &non_compliant_files) {
    m_non_compliant_files = non_compliant_files;
    m_non_compliant_files_isSet = true;
}

bool OAIComplianceOccurrence::is_non_compliant_files_Set() const{
    return m_non_compliant_files_isSet;
}

bool OAIComplianceOccurrence::is_non_compliant_files_Valid() const{
    return m_non_compliant_files_isValid;
}

bool OAIComplianceOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_non_compliance_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_compliant_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComplianceOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
