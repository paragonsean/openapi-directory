/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeDistribution::OAIUpgradeDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeDistribution::OAIUpgradeDistribution() {
    this->initializeModel();
}

OAIUpgradeDistribution::~OAIUpgradeDistribution() {}

void OAIUpgradeDistribution::initializeModel() {

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_cve_isSet = false;
    m_cve_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIUpgradeDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeDistribution::fromJsonObject(QJsonObject json) {

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_cve_isValid = ::OpenAPI::fromJsonValue(m_cve, json[QString("cve")]);
    m_cve_isSet = !json[QString("cve")].isNull() && m_cve_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIUpgradeDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_cve.size() > 0) {
        obj.insert(QString("cve"), ::OpenAPI::toJsonValue(m_cve));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIUpgradeDistribution::getClassification() const {
    return m_classification;
}
void OAIUpgradeDistribution::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIUpgradeDistribution::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIUpgradeDistribution::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIUpgradeDistribution::getCpeUri() const {
    return m_cpe_uri;
}
void OAIUpgradeDistribution::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIUpgradeDistribution::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIUpgradeDistribution::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QList<QString> OAIUpgradeDistribution::getCve() const {
    return m_cve;
}
void OAIUpgradeDistribution::setCve(const QList<QString> &cve) {
    m_cve = cve;
    m_cve_isSet = true;
}

bool OAIUpgradeDistribution::is_cve_Set() const{
    return m_cve_isSet;
}

bool OAIUpgradeDistribution::is_cve_Valid() const{
    return m_cve_isValid;
}

QString OAIUpgradeDistribution::getSeverity() const {
    return m_severity;
}
void OAIUpgradeDistribution::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIUpgradeDistribution::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIUpgradeDistribution::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIUpgradeDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cve.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
