/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_epoch_isSet = false;
    m_epoch_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_inclusive_isSet = false;
    m_inclusive_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_epoch_isValid = ::OpenAPI::fromJsonValue(m_epoch, json[QString("epoch")]);
    m_epoch_isSet = !json[QString("epoch")].isNull() && m_epoch_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_inclusive_isValid = ::OpenAPI::fromJsonValue(m_inclusive, json[QString("inclusive")]);
    m_inclusive_isSet = !json[QString("inclusive")].isNull() && m_inclusive_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_epoch_isSet) {
        obj.insert(QString("epoch"), ::OpenAPI::toJsonValue(m_epoch));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_inclusive_isSet) {
        obj.insert(QString("inclusive"), ::OpenAPI::toJsonValue(m_inclusive));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

qint32 OAIVersion::getEpoch() const {
    return m_epoch;
}
void OAIVersion::setEpoch(const qint32 &epoch) {
    m_epoch = epoch;
    m_epoch_isSet = true;
}

bool OAIVersion::is_epoch_Set() const{
    return m_epoch_isSet;
}

bool OAIVersion::is_epoch_Valid() const{
    return m_epoch_isValid;
}

QString OAIVersion::getFullName() const {
    return m_full_name;
}
void OAIVersion::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIVersion::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIVersion::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIVersion::isInclusive() const {
    return m_inclusive;
}
void OAIVersion::setInclusive(const bool &inclusive) {
    m_inclusive = inclusive;
    m_inclusive_isSet = true;
}

bool OAIVersion::is_inclusive_Set() const{
    return m_inclusive_isSet;
}

bool OAIVersion::is_inclusive_Valid() const{
    return m_inclusive_isValid;
}

QString OAIVersion::getKind() const {
    return m_kind;
}
void OAIVersion::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVersion::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVersion::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIVersion::getName() const {
    return m_name;
}
void OAIVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVersion::getRevision() const {
    return m_revision;
}
void OAIVersion::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIVersion::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIVersion::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_epoch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
