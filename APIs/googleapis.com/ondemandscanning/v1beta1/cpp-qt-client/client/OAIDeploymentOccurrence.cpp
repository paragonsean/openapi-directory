/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentOccurrence::OAIDeploymentOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentOccurrence::OAIDeploymentOccurrence() {
    this->initializeModel();
}

OAIDeploymentOccurrence::~OAIDeploymentOccurrence() {}

void OAIDeploymentOccurrence::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_deploy_time_isSet = false;
    m_deploy_time_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;

    m_undeploy_time_isSet = false;
    m_undeploy_time_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;
}

void OAIDeploymentOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentOccurrence::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_deploy_time_isValid = ::OpenAPI::fromJsonValue(m_deploy_time, json[QString("deployTime")]);
    m_deploy_time_isSet = !json[QString("deployTime")].isNull() && m_deploy_time_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;

    m_undeploy_time_isValid = ::OpenAPI::fromJsonValue(m_undeploy_time, json[QString("undeployTime")]);
    m_undeploy_time_isSet = !json[QString("undeployTime")].isNull() && m_undeploy_time_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;
}

QString OAIDeploymentOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_deploy_time_isSet) {
        obj.insert(QString("deployTime"), ::OpenAPI::toJsonValue(m_deploy_time));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_resource_uri.size() > 0) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    if (m_undeploy_time_isSet) {
        obj.insert(QString("undeployTime"), ::OpenAPI::toJsonValue(m_undeploy_time));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    return obj;
}

QString OAIDeploymentOccurrence::getAddress() const {
    return m_address;
}
void OAIDeploymentOccurrence::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDeploymentOccurrence::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDeploymentOccurrence::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIDeploymentOccurrence::getConfig() const {
    return m_config;
}
void OAIDeploymentOccurrence::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIDeploymentOccurrence::is_config_Set() const{
    return m_config_isSet;
}

bool OAIDeploymentOccurrence::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIDeploymentOccurrence::getDeployTime() const {
    return m_deploy_time;
}
void OAIDeploymentOccurrence::setDeployTime(const QString &deploy_time) {
    m_deploy_time = deploy_time;
    m_deploy_time_isSet = true;
}

bool OAIDeploymentOccurrence::is_deploy_time_Set() const{
    return m_deploy_time_isSet;
}

bool OAIDeploymentOccurrence::is_deploy_time_Valid() const{
    return m_deploy_time_isValid;
}

QString OAIDeploymentOccurrence::getPlatform() const {
    return m_platform;
}
void OAIDeploymentOccurrence::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDeploymentOccurrence::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDeploymentOccurrence::is_platform_Valid() const{
    return m_platform_isValid;
}

QList<QString> OAIDeploymentOccurrence::getResourceUri() const {
    return m_resource_uri;
}
void OAIDeploymentOccurrence::setResourceUri(const QList<QString> &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIDeploymentOccurrence::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIDeploymentOccurrence::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

QString OAIDeploymentOccurrence::getUndeployTime() const {
    return m_undeploy_time;
}
void OAIDeploymentOccurrence::setUndeployTime(const QString &undeploy_time) {
    m_undeploy_time = undeploy_time;
    m_undeploy_time_isSet = true;
}

bool OAIDeploymentOccurrence::is_undeploy_time_Set() const{
    return m_undeploy_time_isSet;
}

bool OAIDeploymentOccurrence::is_undeploy_time_Valid() const{
    return m_undeploy_time_isValid;
}

QString OAIDeploymentOccurrence::getUserEmail() const {
    return m_user_email;
}
void OAIDeploymentOccurrence::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIDeploymentOccurrence::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIDeploymentOccurrence::is_user_email_Valid() const{
    return m_user_email_isValid;
}

bool OAIDeploymentOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_undeploy_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
