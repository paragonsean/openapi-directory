/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInTotoStatement.h
 *
 * Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \&quot;application/vnd.in-toto+json\&quot;.
 */

#ifndef OAIInTotoStatement_H
#define OAIInTotoStatement_H

#include <QJsonObject>

#include "OAIInTotoProvenance.h"
#include "OAISlsaProvenance.h"
#include "OAISlsaProvenanceZeroTwo.h"
#include "OAISubject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInTotoProvenance;
class OAISlsaProvenance;
class OAISlsaProvenanceZeroTwo;
class OAISubject;

class OAIInTotoStatement : public OAIObject {
public:
    OAIInTotoStatement();
    OAIInTotoStatement(QString json);
    ~OAIInTotoStatement() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &_type);
    bool is__type_Set() const;
    bool is__type_Valid() const;

    QString getPredicateType() const;
    void setPredicateType(const QString &predicate_type);
    bool is_predicate_type_Set() const;
    bool is_predicate_type_Valid() const;

    OAIInTotoProvenance getProvenance() const;
    void setProvenance(const OAIInTotoProvenance &provenance);
    bool is_provenance_Set() const;
    bool is_provenance_Valid() const;

    OAISlsaProvenance getSlsaProvenance() const;
    void setSlsaProvenance(const OAISlsaProvenance &slsa_provenance);
    bool is_slsa_provenance_Set() const;
    bool is_slsa_provenance_Valid() const;

    OAISlsaProvenanceZeroTwo getSlsaProvenanceZeroTwo() const;
    void setSlsaProvenanceZeroTwo(const OAISlsaProvenanceZeroTwo &slsa_provenance_zero_two);
    bool is_slsa_provenance_zero_two_Set() const;
    bool is_slsa_provenance_zero_two_Valid() const;

    QList<OAISubject> getSubject() const;
    void setSubject(const QList<OAISubject> &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__type;
    bool m__type_isSet;
    bool m__type_isValid;

    QString m_predicate_type;
    bool m_predicate_type_isSet;
    bool m_predicate_type_isValid;

    OAIInTotoProvenance m_provenance;
    bool m_provenance_isSet;
    bool m_provenance_isValid;

    OAISlsaProvenance m_slsa_provenance;
    bool m_slsa_provenance_isSet;
    bool m_slsa_provenance_isValid;

    OAISlsaProvenanceZeroTwo m_slsa_provenance_zero_two;
    bool m_slsa_provenance_zero_two_isSet;
    bool m_slsa_provenance_zero_two_isValid;

    QList<OAISubject> m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInTotoStatement)

#endif // OAIInTotoStatement_H
