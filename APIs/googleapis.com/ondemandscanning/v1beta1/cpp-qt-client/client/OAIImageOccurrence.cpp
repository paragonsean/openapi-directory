/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageOccurrence::OAIImageOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageOccurrence::OAIImageOccurrence() {
    this->initializeModel();
}

OAIImageOccurrence::~OAIImageOccurrence() {}

void OAIImageOccurrence::initializeModel() {

    m_base_resource_url_isSet = false;
    m_base_resource_url_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_layer_info_isSet = false;
    m_layer_info_isValid = false;
}

void OAIImageOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageOccurrence::fromJsonObject(QJsonObject json) {

    m_base_resource_url_isValid = ::OpenAPI::fromJsonValue(m_base_resource_url, json[QString("baseResourceUrl")]);
    m_base_resource_url_isSet = !json[QString("baseResourceUrl")].isNull() && m_base_resource_url_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_layer_info_isValid = ::OpenAPI::fromJsonValue(m_layer_info, json[QString("layerInfo")]);
    m_layer_info_isSet = !json[QString("layerInfo")].isNull() && m_layer_info_isValid;
}

QString OAIImageOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_base_resource_url_isSet) {
        obj.insert(QString("baseResourceUrl"), ::OpenAPI::toJsonValue(m_base_resource_url));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_fingerprint.isSet()) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_layer_info.size() > 0) {
        obj.insert(QString("layerInfo"), ::OpenAPI::toJsonValue(m_layer_info));
    }
    return obj;
}

QString OAIImageOccurrence::getBaseResourceUrl() const {
    return m_base_resource_url;
}
void OAIImageOccurrence::setBaseResourceUrl(const QString &base_resource_url) {
    m_base_resource_url = base_resource_url;
    m_base_resource_url_isSet = true;
}

bool OAIImageOccurrence::is_base_resource_url_Set() const{
    return m_base_resource_url_isSet;
}

bool OAIImageOccurrence::is_base_resource_url_Valid() const{
    return m_base_resource_url_isValid;
}

qint32 OAIImageOccurrence::getDistance() const {
    return m_distance;
}
void OAIImageOccurrence::setDistance(const qint32 &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIImageOccurrence::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIImageOccurrence::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIFingerprint OAIImageOccurrence::getFingerprint() const {
    return m_fingerprint;
}
void OAIImageOccurrence::setFingerprint(const OAIFingerprint &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIImageOccurrence::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIImageOccurrence::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QList<OAILayer> OAIImageOccurrence::getLayerInfo() const {
    return m_layer_info;
}
void OAIImageOccurrence::setLayerInfo(const QList<OAILayer> &layer_info) {
    m_layer_info = layer_info;
    m_layer_info_isSet = true;
}

bool OAIImageOccurrence::is_layer_info_Set() const{
    return m_layer_info_isSet;
}

bool OAIImageOccurrence::is_layer_info_Valid() const{
    return m_layer_info_isValid;
}

bool OAIImageOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
