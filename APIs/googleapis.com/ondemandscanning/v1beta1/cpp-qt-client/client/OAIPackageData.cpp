/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageData::OAIPackageData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageData::OAIPackageData() {
    this->initializeModel();
}

OAIPackageData::~OAIPackageData() {}

void OAIPackageData::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_binary_source_info_isSet = false;
    m_binary_source_info_isValid = false;

    m_binary_version_isSet = false;
    m_binary_version_isValid = false;

    m_cpe_uri_isSet = false;
    m_cpe_uri_isValid = false;

    m_dependency_chain_isSet = false;
    m_dependency_chain_isValid = false;

    m_file_location_isSet = false;
    m_file_location_isValid = false;

    m_hash_digest_isSet = false;
    m_hash_digest_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_maintainer_isSet = false;
    m_maintainer_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_patched_cve_isSet = false;
    m_patched_cve_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_unused_isSet = false;
    m_unused_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPackageData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageData::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_binary_source_info_isValid = ::OpenAPI::fromJsonValue(m_binary_source_info, json[QString("binarySourceInfo")]);
    m_binary_source_info_isSet = !json[QString("binarySourceInfo")].isNull() && m_binary_source_info_isValid;

    m_binary_version_isValid = ::OpenAPI::fromJsonValue(m_binary_version, json[QString("binaryVersion")]);
    m_binary_version_isSet = !json[QString("binaryVersion")].isNull() && m_binary_version_isValid;

    m_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_cpe_uri, json[QString("cpeUri")]);
    m_cpe_uri_isSet = !json[QString("cpeUri")].isNull() && m_cpe_uri_isValid;

    m_dependency_chain_isValid = ::OpenAPI::fromJsonValue(m_dependency_chain, json[QString("dependencyChain")]);
    m_dependency_chain_isSet = !json[QString("dependencyChain")].isNull() && m_dependency_chain_isValid;

    m_file_location_isValid = ::OpenAPI::fromJsonValue(m_file_location, json[QString("fileLocation")]);
    m_file_location_isSet = !json[QString("fileLocation")].isNull() && m_file_location_isValid;

    m_hash_digest_isValid = ::OpenAPI::fromJsonValue(m_hash_digest, json[QString("hashDigest")]);
    m_hash_digest_isSet = !json[QString("hashDigest")].isNull() && m_hash_digest_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_maintainer_isValid = ::OpenAPI::fromJsonValue(m_maintainer, json[QString("maintainer")]);
    m_maintainer_isSet = !json[QString("maintainer")].isNull() && m_maintainer_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_patched_cve_isValid = ::OpenAPI::fromJsonValue(m_patched_cve, json[QString("patchedCve")]);
    m_patched_cve_isSet = !json[QString("patchedCve")].isNull() && m_patched_cve_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_unused_isValid = ::OpenAPI::fromJsonValue(m_unused, json[QString("unused")]);
    m_unused_isSet = !json[QString("unused")].isNull() && m_unused_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPackageData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageData::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_binary_source_info.size() > 0) {
        obj.insert(QString("binarySourceInfo"), ::OpenAPI::toJsonValue(m_binary_source_info));
    }
    if (m_binary_version.isSet()) {
        obj.insert(QString("binaryVersion"), ::OpenAPI::toJsonValue(m_binary_version));
    }
    if (m_cpe_uri_isSet) {
        obj.insert(QString("cpeUri"), ::OpenAPI::toJsonValue(m_cpe_uri));
    }
    if (m_dependency_chain.size() > 0) {
        obj.insert(QString("dependencyChain"), ::OpenAPI::toJsonValue(m_dependency_chain));
    }
    if (m_file_location.size() > 0) {
        obj.insert(QString("fileLocation"), ::OpenAPI::toJsonValue(m_file_location));
    }
    if (m_hash_digest_isSet) {
        obj.insert(QString("hashDigest"), ::OpenAPI::toJsonValue(m_hash_digest));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_maintainer.isSet()) {
        obj.insert(QString("maintainer"), ::OpenAPI::toJsonValue(m_maintainer));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_patched_cve.size() > 0) {
        obj.insert(QString("patchedCve"), ::OpenAPI::toJsonValue(m_patched_cve));
    }
    if (m_source_version.isSet()) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_unused_isSet) {
        obj.insert(QString("unused"), ::OpenAPI::toJsonValue(m_unused));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPackageData::getArchitecture() const {
    return m_architecture;
}
void OAIPackageData::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIPackageData::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIPackageData::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QList<OAIBinarySourceInfo> OAIPackageData::getBinarySourceInfo() const {
    return m_binary_source_info;
}
void OAIPackageData::setBinarySourceInfo(const QList<OAIBinarySourceInfo> &binary_source_info) {
    m_binary_source_info = binary_source_info;
    m_binary_source_info_isSet = true;
}

bool OAIPackageData::is_binary_source_info_Set() const{
    return m_binary_source_info_isSet;
}

bool OAIPackageData::is_binary_source_info_Valid() const{
    return m_binary_source_info_isValid;
}

OAIPackageVersion OAIPackageData::getBinaryVersion() const {
    return m_binary_version;
}
void OAIPackageData::setBinaryVersion(const OAIPackageVersion &binary_version) {
    m_binary_version = binary_version;
    m_binary_version_isSet = true;
}

bool OAIPackageData::is_binary_version_Set() const{
    return m_binary_version_isSet;
}

bool OAIPackageData::is_binary_version_Valid() const{
    return m_binary_version_isValid;
}

QString OAIPackageData::getCpeUri() const {
    return m_cpe_uri;
}
void OAIPackageData::setCpeUri(const QString &cpe_uri) {
    m_cpe_uri = cpe_uri;
    m_cpe_uri_isSet = true;
}

bool OAIPackageData::is_cpe_uri_Set() const{
    return m_cpe_uri_isSet;
}

bool OAIPackageData::is_cpe_uri_Valid() const{
    return m_cpe_uri_isValid;
}

QList<OAILanguagePackageDependency> OAIPackageData::getDependencyChain() const {
    return m_dependency_chain;
}
void OAIPackageData::setDependencyChain(const QList<OAILanguagePackageDependency> &dependency_chain) {
    m_dependency_chain = dependency_chain;
    m_dependency_chain_isSet = true;
}

bool OAIPackageData::is_dependency_chain_Set() const{
    return m_dependency_chain_isSet;
}

bool OAIPackageData::is_dependency_chain_Valid() const{
    return m_dependency_chain_isValid;
}

QList<OAIFileLocation> OAIPackageData::getFileLocation() const {
    return m_file_location;
}
void OAIPackageData::setFileLocation(const QList<OAIFileLocation> &file_location) {
    m_file_location = file_location;
    m_file_location_isSet = true;
}

bool OAIPackageData::is_file_location_Set() const{
    return m_file_location_isSet;
}

bool OAIPackageData::is_file_location_Valid() const{
    return m_file_location_isValid;
}

QString OAIPackageData::getHashDigest() const {
    return m_hash_digest;
}
void OAIPackageData::setHashDigest(const QString &hash_digest) {
    m_hash_digest = hash_digest;
    m_hash_digest_isSet = true;
}

bool OAIPackageData::is_hash_digest_Set() const{
    return m_hash_digest_isSet;
}

bool OAIPackageData::is_hash_digest_Valid() const{
    return m_hash_digest_isValid;
}

QList<QString> OAIPackageData::getLicenses() const {
    return m_licenses;
}
void OAIPackageData::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIPackageData::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIPackageData::is_licenses_Valid() const{
    return m_licenses_isValid;
}

OAIMaintainer OAIPackageData::getMaintainer() const {
    return m_maintainer;
}
void OAIPackageData::setMaintainer(const OAIMaintainer &maintainer) {
    m_maintainer = maintainer;
    m_maintainer_isSet = true;
}

bool OAIPackageData::is_maintainer_Set() const{
    return m_maintainer_isSet;
}

bool OAIPackageData::is_maintainer_Valid() const{
    return m_maintainer_isValid;
}

QString OAIPackageData::getOs() const {
    return m_os;
}
void OAIPackageData::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIPackageData::is_os_Set() const{
    return m_os_isSet;
}

bool OAIPackageData::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIPackageData::getOsVersion() const {
    return m_os_version;
}
void OAIPackageData::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIPackageData::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIPackageData::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIPackageData::getPackage() const {
    return m_package;
}
void OAIPackageData::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPackageData::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPackageData::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIPackageData::getPackageType() const {
    return m_package_type;
}
void OAIPackageData::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageData::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageData::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QList<QString> OAIPackageData::getPatchedCve() const {
    return m_patched_cve;
}
void OAIPackageData::setPatchedCve(const QList<QString> &patched_cve) {
    m_patched_cve = patched_cve;
    m_patched_cve_isSet = true;
}

bool OAIPackageData::is_patched_cve_Set() const{
    return m_patched_cve_isSet;
}

bool OAIPackageData::is_patched_cve_Valid() const{
    return m_patched_cve_isValid;
}

OAIPackageVersion OAIPackageData::getSourceVersion() const {
    return m_source_version;
}
void OAIPackageData::setSourceVersion(const OAIPackageVersion &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIPackageData::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIPackageData::is_source_version_Valid() const{
    return m_source_version_isValid;
}

QString OAIPackageData::getUnused() const {
    return m_unused;
}
void OAIPackageData::setUnused(const QString &unused) {
    m_unused = unused;
    m_unused_isSet = true;
}

bool OAIPackageData::is_unused_Set() const{
    return m_unused_isSet;
}

bool OAIPackageData::is_unused_Valid() const{
    return m_unused_isValid;
}

QString OAIPackageData::getVersion() const {
    return m_version;
}
void OAIPackageData::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPackageData::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPackageData::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPackageData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_source_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependency_chain.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintainer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patched_cve.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
