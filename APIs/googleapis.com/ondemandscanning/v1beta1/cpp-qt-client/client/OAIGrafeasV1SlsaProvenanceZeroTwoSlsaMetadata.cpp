/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata() {
    this->initializeModel();
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::~OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata() {}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::initializeModel() {

    m_build_finished_on_isSet = false;
    m_build_finished_on_isValid = false;

    m_build_invocation_id_isSet = false;
    m_build_invocation_id_isValid = false;

    m_build_started_on_isSet = false;
    m_build_started_on_isValid = false;

    m_completeness_isSet = false;
    m_completeness_isValid = false;

    m_reproducible_isSet = false;
    m_reproducible_isValid = false;
}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::fromJsonObject(QJsonObject json) {

    m_build_finished_on_isValid = ::OpenAPI::fromJsonValue(m_build_finished_on, json[QString("buildFinishedOn")]);
    m_build_finished_on_isSet = !json[QString("buildFinishedOn")].isNull() && m_build_finished_on_isValid;

    m_build_invocation_id_isValid = ::OpenAPI::fromJsonValue(m_build_invocation_id, json[QString("buildInvocationId")]);
    m_build_invocation_id_isSet = !json[QString("buildInvocationId")].isNull() && m_build_invocation_id_isValid;

    m_build_started_on_isValid = ::OpenAPI::fromJsonValue(m_build_started_on, json[QString("buildStartedOn")]);
    m_build_started_on_isSet = !json[QString("buildStartedOn")].isNull() && m_build_started_on_isValid;

    m_completeness_isValid = ::OpenAPI::fromJsonValue(m_completeness, json[QString("completeness")]);
    m_completeness_isSet = !json[QString("completeness")].isNull() && m_completeness_isValid;

    m_reproducible_isValid = ::OpenAPI::fromJsonValue(m_reproducible, json[QString("reproducible")]);
    m_reproducible_isSet = !json[QString("reproducible")].isNull() && m_reproducible_isValid;
}

QString OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_build_finished_on_isSet) {
        obj.insert(QString("buildFinishedOn"), ::OpenAPI::toJsonValue(m_build_finished_on));
    }
    if (m_build_invocation_id_isSet) {
        obj.insert(QString("buildInvocationId"), ::OpenAPI::toJsonValue(m_build_invocation_id));
    }
    if (m_build_started_on_isSet) {
        obj.insert(QString("buildStartedOn"), ::OpenAPI::toJsonValue(m_build_started_on));
    }
    if (m_completeness.isSet()) {
        obj.insert(QString("completeness"), ::OpenAPI::toJsonValue(m_completeness));
    }
    if (m_reproducible_isSet) {
        obj.insert(QString("reproducible"), ::OpenAPI::toJsonValue(m_reproducible));
    }
    return obj;
}

QString OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::getBuildFinishedOn() const {
    return m_build_finished_on;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::setBuildFinishedOn(const QString &build_finished_on) {
    m_build_finished_on = build_finished_on;
    m_build_finished_on_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_finished_on_Set() const{
    return m_build_finished_on_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_finished_on_Valid() const{
    return m_build_finished_on_isValid;
}

QString OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::getBuildInvocationId() const {
    return m_build_invocation_id;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::setBuildInvocationId(const QString &build_invocation_id) {
    m_build_invocation_id = build_invocation_id;
    m_build_invocation_id_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_invocation_id_Set() const{
    return m_build_invocation_id_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_invocation_id_Valid() const{
    return m_build_invocation_id_isValid;
}

QString OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::getBuildStartedOn() const {
    return m_build_started_on;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::setBuildStartedOn(const QString &build_started_on) {
    m_build_started_on = build_started_on;
    m_build_started_on_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_started_on_Set() const{
    return m_build_started_on_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_build_started_on_Valid() const{
    return m_build_started_on_isValid;
}

OAIGrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::getCompleteness() const {
    return m_completeness;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::setCompleteness(const OAIGrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness &completeness) {
    m_completeness = completeness;
    m_completeness_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_completeness_Set() const{
    return m_completeness_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_completeness_Valid() const{
    return m_completeness_isValid;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::isReproducible() const {
    return m_reproducible;
}
void OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::setReproducible(const bool &reproducible) {
    m_reproducible = reproducible;
    m_reproducible_isSet = true;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_reproducible_Set() const{
    return m_reproducible_isSet;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::is_reproducible_Valid() const{
    return m_reproducible_isValid;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_finished_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_invocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completeness.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reproducible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrafeasV1SlsaProvenanceZeroTwoSlsaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
