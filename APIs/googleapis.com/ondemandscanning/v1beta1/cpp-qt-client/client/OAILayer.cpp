/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayer::OAILayer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayer::OAILayer() {
    this->initializeModel();
}

OAILayer::~OAILayer() {}

void OAILayer::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_directive_isSet = false;
    m_directive_isValid = false;
}

void OAILayer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILayer::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_directive_isValid = ::OpenAPI::fromJsonValue(m_directive, json[QString("directive")]);
    m_directive_isSet = !json[QString("directive")].isNull() && m_directive_isValid;
}

QString OAILayer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILayer::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments_isSet) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_directive_isSet) {
        obj.insert(QString("directive"), ::OpenAPI::toJsonValue(m_directive));
    }
    return obj;
}

QString OAILayer::getArguments() const {
    return m_arguments;
}
void OAILayer::setArguments(const QString &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAILayer::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAILayer::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAILayer::getDirective() const {
    return m_directive;
}
void OAILayer::setDirective(const QString &directive) {
    m_directive = directive;
    m_directive_isSet = true;
}

bool OAILayer::is_directive_Set() const{
    return m_directive_isSet;
}

bool OAILayer::is_directive_Valid() const{
    return m_directive_isValid;
}

bool OAILayer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILayer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
