/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Artifact from './Artifact';
import Command from './Command';
import Source from './Source';

/**
 * The BuildProvenance model module.
 * @module model/BuildProvenance
 * @version v1beta1
 */
class BuildProvenance {
    /**
     * Constructs a new <code>BuildProvenance</code>.
     * Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
     * @alias module:model/BuildProvenance
     */
    constructor() { 
        
        BuildProvenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildProvenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildProvenance} obj Optional instance to populate.
     * @return {module:model/BuildProvenance} The populated <code>BuildProvenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildProvenance();

            if (data.hasOwnProperty('buildOptions')) {
                obj['buildOptions'] = ApiClient.convertToType(data['buildOptions'], {'String': 'String'});
            }
            if (data.hasOwnProperty('builderVersion')) {
                obj['builderVersion'] = ApiClient.convertToType(data['builderVersion'], 'String');
            }
            if (data.hasOwnProperty('builtArtifacts')) {
                obj['builtArtifacts'] = ApiClient.convertToType(data['builtArtifacts'], [Artifact]);
            }
            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], [Command]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('logsUri')) {
                obj['logsUri'] = ApiClient.convertToType(data['logsUri'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('sourceProvenance')) {
                obj['sourceProvenance'] = Source.constructFromObject(data['sourceProvenance']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('triggerId')) {
                obj['triggerId'] = ApiClient.convertToType(data['triggerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildProvenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildProvenance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['builderVersion'] && !(typeof data['builderVersion'] === 'string' || data['builderVersion'] instanceof String)) {
            throw new Error("Expected the field `builderVersion` to be a primitive type in the JSON string but got " + data['builderVersion']);
        }
        if (data['builtArtifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['builtArtifacts'])) {
                throw new Error("Expected the field `builtArtifacts` to be an array in the JSON data but got " + data['builtArtifacts']);
            }
            // validate the optional field `builtArtifacts` (array)
            for (const item of data['builtArtifacts']) {
                Artifact.validateJSON(item);
            };
        }
        if (data['commands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commands'])) {
                throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
            }
            // validate the optional field `commands` (array)
            for (const item of data['commands']) {
                Command.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['logsUri'] && !(typeof data['logsUri'] === 'string' || data['logsUri'] instanceof String)) {
            throw new Error("Expected the field `logsUri` to be a primitive type in the JSON string but got " + data['logsUri']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `sourceProvenance`
        if (data['sourceProvenance']) { // data not null
          Source.validateJSON(data['sourceProvenance']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['triggerId'] && !(typeof data['triggerId'] === 'string' || data['triggerId'] instanceof String)) {
            throw new Error("Expected the field `triggerId` to be a primitive type in the JSON string but got " + data['triggerId']);
        }

        return true;
    }


}



/**
 * Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
 * @member {Object.<String, String>} buildOptions
 */
BuildProvenance.prototype['buildOptions'] = undefined;

/**
 * Version string of the builder at the time this build was executed.
 * @member {String} builderVersion
 */
BuildProvenance.prototype['builderVersion'] = undefined;

/**
 * Output of the build.
 * @member {Array.<module:model/Artifact>} builtArtifacts
 */
BuildProvenance.prototype['builtArtifacts'] = undefined;

/**
 * Commands requested by the build.
 * @member {Array.<module:model/Command>} commands
 */
BuildProvenance.prototype['commands'] = undefined;

/**
 * Time at which the build was created.
 * @member {String} createTime
 */
BuildProvenance.prototype['createTime'] = undefined;

/**
 * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
 * @member {String} creator
 */
BuildProvenance.prototype['creator'] = undefined;

/**
 * Time at which execution of the build was finished.
 * @member {String} endTime
 */
BuildProvenance.prototype['endTime'] = undefined;

/**
 * Required. Unique identifier of the build.
 * @member {String} id
 */
BuildProvenance.prototype['id'] = undefined;

/**
 * URI where any logs for this provenance were written.
 * @member {String} logsUri
 */
BuildProvenance.prototype['logsUri'] = undefined;

/**
 * ID of the project.
 * @member {String} projectId
 */
BuildProvenance.prototype['projectId'] = undefined;

/**
 * @member {module:model/Source} sourceProvenance
 */
BuildProvenance.prototype['sourceProvenance'] = undefined;

/**
 * Time at which execution of the build was started.
 * @member {String} startTime
 */
BuildProvenance.prototype['startTime'] = undefined;

/**
 * Trigger identifier if the build was triggered automatically; empty if not.
 * @member {String} triggerId
 */
BuildProvenance.prototype['triggerId'] = undefined;






export default BuildProvenance;

