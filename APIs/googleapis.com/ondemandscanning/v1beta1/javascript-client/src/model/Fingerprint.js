/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Fingerprint model module.
 * @module model/Fingerprint
 * @version v1beta1
 */
class Fingerprint {
    /**
     * Constructs a new <code>Fingerprint</code>.
     * A set of properties that uniquely identify a given Docker image.
     * @alias module:model/Fingerprint
     */
    constructor() { 
        
        Fingerprint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Fingerprint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fingerprint} obj Optional instance to populate.
     * @return {module:model/Fingerprint} The populated <code>Fingerprint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fingerprint();

            if (data.hasOwnProperty('v1Name')) {
                obj['v1Name'] = ApiClient.convertToType(data['v1Name'], 'String');
            }
            if (data.hasOwnProperty('v2Blob')) {
                obj['v2Blob'] = ApiClient.convertToType(data['v2Blob'], ['String']);
            }
            if (data.hasOwnProperty('v2Name')) {
                obj['v2Name'] = ApiClient.convertToType(data['v2Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Fingerprint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Fingerprint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['v1Name'] && !(typeof data['v1Name'] === 'string' || data['v1Name'] instanceof String)) {
            throw new Error("Expected the field `v1Name` to be a primitive type in the JSON string but got " + data['v1Name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['v2Blob'])) {
            throw new Error("Expected the field `v2Blob` to be an array in the JSON data but got " + data['v2Blob']);
        }
        // ensure the json data is a string
        if (data['v2Name'] && !(typeof data['v2Name'] === 'string' || data['v2Name'] instanceof String)) {
            throw new Error("Expected the field `v2Name` to be a primitive type in the JSON string but got " + data['v2Name']);
        }

        return true;
    }


}



/**
 * Required. The layer ID of the final layer in the Docker image's v1 representation.
 * @member {String} v1Name
 */
Fingerprint.prototype['v1Name'] = undefined;

/**
 * Required. The ordered list of v2 blobs that represent a given image.
 * @member {Array.<String>} v2Blob
 */
Fingerprint.prototype['v2Blob'] = undefined;

/**
 * Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.
 * @member {String} v2Name
 */
Fingerprint.prototype['v2Name'] = undefined;






export default Fingerprint;

