/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceDescriptor from './ResourceDescriptor';

/**
 * The BuildDefinition model module.
 * @module model/BuildDefinition
 * @version v1beta1
 */
class BuildDefinition {
    /**
     * Constructs a new <code>BuildDefinition</code>.
     * @alias module:model/BuildDefinition
     */
    constructor() { 
        
        BuildDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildDefinition} obj Optional instance to populate.
     * @return {module:model/BuildDefinition} The populated <code>BuildDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildDefinition();

            if (data.hasOwnProperty('buildType')) {
                obj['buildType'] = ApiClient.convertToType(data['buildType'], 'String');
            }
            if (data.hasOwnProperty('externalParameters')) {
                obj['externalParameters'] = ApiClient.convertToType(data['externalParameters'], {'String': Object});
            }
            if (data.hasOwnProperty('internalParameters')) {
                obj['internalParameters'] = ApiClient.convertToType(data['internalParameters'], {'String': Object});
            }
            if (data.hasOwnProperty('resolvedDependencies')) {
                obj['resolvedDependencies'] = ApiClient.convertToType(data['resolvedDependencies'], [ResourceDescriptor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildType'] && !(typeof data['buildType'] === 'string' || data['buildType'] instanceof String)) {
            throw new Error("Expected the field `buildType` to be a primitive type in the JSON string but got " + data['buildType']);
        }
        if (data['resolvedDependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resolvedDependencies'])) {
                throw new Error("Expected the field `resolvedDependencies` to be an array in the JSON data but got " + data['resolvedDependencies']);
            }
            // validate the optional field `resolvedDependencies` (array)
            for (const item of data['resolvedDependencies']) {
                ResourceDescriptor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} buildType
 */
BuildDefinition.prototype['buildType'] = undefined;

/**
 * @member {Object.<String, Object>} externalParameters
 */
BuildDefinition.prototype['externalParameters'] = undefined;

/**
 * @member {Object.<String, Object>} internalParameters
 */
BuildDefinition.prototype['internalParameters'] = undefined;

/**
 * @member {Array.<module:model/ResourceDescriptor>} resolvedDependencies
 */
BuildDefinition.prototype['resolvedDependencies'] = undefined;






export default BuildDefinition;

