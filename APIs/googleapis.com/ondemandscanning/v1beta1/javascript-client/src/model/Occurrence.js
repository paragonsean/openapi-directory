/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttestationOccurrence from './AttestationOccurrence';
import BuildOccurrence from './BuildOccurrence';
import ComplianceOccurrence from './ComplianceOccurrence';
import DSSEAttestationOccurrence from './DSSEAttestationOccurrence';
import DeploymentOccurrence from './DeploymentOccurrence';
import DiscoveryOccurrence from './DiscoveryOccurrence';
import Envelope from './Envelope';
import ImageOccurrence from './ImageOccurrence';
import PackageOccurrence from './PackageOccurrence';
import SBOMReferenceOccurrence from './SBOMReferenceOccurrence';
import UpgradeOccurrence from './UpgradeOccurrence';
import VulnerabilityOccurrence from './VulnerabilityOccurrence';

/**
 * The Occurrence model module.
 * @module model/Occurrence
 * @version v1beta1
 */
class Occurrence {
    /**
     * Constructs a new <code>Occurrence</code>.
     * An instance of an analysis type that has been found on a resource.
     * @alias module:model/Occurrence
     */
    constructor() { 
        
        Occurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Occurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Occurrence} obj Optional instance to populate.
     * @return {module:model/Occurrence} The populated <code>Occurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Occurrence();

            if (data.hasOwnProperty('attestation')) {
                obj['attestation'] = AttestationOccurrence.constructFromObject(data['attestation']);
            }
            if (data.hasOwnProperty('build')) {
                obj['build'] = BuildOccurrence.constructFromObject(data['build']);
            }
            if (data.hasOwnProperty('compliance')) {
                obj['compliance'] = ComplianceOccurrence.constructFromObject(data['compliance']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = DeploymentOccurrence.constructFromObject(data['deployment']);
            }
            if (data.hasOwnProperty('discovery')) {
                obj['discovery'] = DiscoveryOccurrence.constructFromObject(data['discovery']);
            }
            if (data.hasOwnProperty('dsseAttestation')) {
                obj['dsseAttestation'] = DSSEAttestationOccurrence.constructFromObject(data['dsseAttestation']);
            }
            if (data.hasOwnProperty('envelope')) {
                obj['envelope'] = Envelope.constructFromObject(data['envelope']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ImageOccurrence.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noteName')) {
                obj['noteName'] = ApiClient.convertToType(data['noteName'], 'String');
            }
            if (data.hasOwnProperty('package')) {
                obj['package'] = PackageOccurrence.constructFromObject(data['package']);
            }
            if (data.hasOwnProperty('remediation')) {
                obj['remediation'] = ApiClient.convertToType(data['remediation'], 'String');
            }
            if (data.hasOwnProperty('resourceUri')) {
                obj['resourceUri'] = ApiClient.convertToType(data['resourceUri'], 'String');
            }
            if (data.hasOwnProperty('sbomReference')) {
                obj['sbomReference'] = SBOMReferenceOccurrence.constructFromObject(data['sbomReference']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upgrade')) {
                obj['upgrade'] = UpgradeOccurrence.constructFromObject(data['upgrade']);
            }
            if (data.hasOwnProperty('vulnerability')) {
                obj['vulnerability'] = VulnerabilityOccurrence.constructFromObject(data['vulnerability']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Occurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Occurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attestation`
        if (data['attestation']) { // data not null
          AttestationOccurrence.validateJSON(data['attestation']);
        }
        // validate the optional field `build`
        if (data['build']) { // data not null
          BuildOccurrence.validateJSON(data['build']);
        }
        // validate the optional field `compliance`
        if (data['compliance']) { // data not null
          ComplianceOccurrence.validateJSON(data['compliance']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `deployment`
        if (data['deployment']) { // data not null
          DeploymentOccurrence.validateJSON(data['deployment']);
        }
        // validate the optional field `discovery`
        if (data['discovery']) { // data not null
          DiscoveryOccurrence.validateJSON(data['discovery']);
        }
        // validate the optional field `dsseAttestation`
        if (data['dsseAttestation']) { // data not null
          DSSEAttestationOccurrence.validateJSON(data['dsseAttestation']);
        }
        // validate the optional field `envelope`
        if (data['envelope']) { // data not null
          Envelope.validateJSON(data['envelope']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          ImageOccurrence.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['noteName'] && !(typeof data['noteName'] === 'string' || data['noteName'] instanceof String)) {
            throw new Error("Expected the field `noteName` to be a primitive type in the JSON string but got " + data['noteName']);
        }
        // validate the optional field `package`
        if (data['package']) { // data not null
          PackageOccurrence.validateJSON(data['package']);
        }
        // ensure the json data is a string
        if (data['remediation'] && !(typeof data['remediation'] === 'string' || data['remediation'] instanceof String)) {
            throw new Error("Expected the field `remediation` to be a primitive type in the JSON string but got " + data['remediation']);
        }
        // ensure the json data is a string
        if (data['resourceUri'] && !(typeof data['resourceUri'] === 'string' || data['resourceUri'] instanceof String)) {
            throw new Error("Expected the field `resourceUri` to be a primitive type in the JSON string but got " + data['resourceUri']);
        }
        // validate the optional field `sbomReference`
        if (data['sbomReference']) { // data not null
          SBOMReferenceOccurrence.validateJSON(data['sbomReference']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `upgrade`
        if (data['upgrade']) { // data not null
          UpgradeOccurrence.validateJSON(data['upgrade']);
        }
        // validate the optional field `vulnerability`
        if (data['vulnerability']) { // data not null
          VulnerabilityOccurrence.validateJSON(data['vulnerability']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttestationOccurrence} attestation
 */
Occurrence.prototype['attestation'] = undefined;

/**
 * @member {module:model/BuildOccurrence} build
 */
Occurrence.prototype['build'] = undefined;

/**
 * @member {module:model/ComplianceOccurrence} compliance
 */
Occurrence.prototype['compliance'] = undefined;

/**
 * Output only. The time this occurrence was created.
 * @member {String} createTime
 */
Occurrence.prototype['createTime'] = undefined;

/**
 * @member {module:model/DeploymentOccurrence} deployment
 */
Occurrence.prototype['deployment'] = undefined;

/**
 * @member {module:model/DiscoveryOccurrence} discovery
 */
Occurrence.prototype['discovery'] = undefined;

/**
 * @member {module:model/DSSEAttestationOccurrence} dsseAttestation
 */
Occurrence.prototype['dsseAttestation'] = undefined;

/**
 * @member {module:model/Envelope} envelope
 */
Occurrence.prototype['envelope'] = undefined;

/**
 * @member {module:model/ImageOccurrence} image
 */
Occurrence.prototype['image'] = undefined;

/**
 * Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
 * @member {module:model/Occurrence.KindEnum} kind
 */
Occurrence.prototype['kind'] = undefined;

/**
 * Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
 * @member {String} name
 */
Occurrence.prototype['name'] = undefined;

/**
 * Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
 * @member {String} noteName
 */
Occurrence.prototype['noteName'] = undefined;

/**
 * @member {module:model/PackageOccurrence} package
 */
Occurrence.prototype['package'] = undefined;

/**
 * A description of actions that can be taken to remedy the note.
 * @member {String} remediation
 */
Occurrence.prototype['remediation'] = undefined;

/**
 * Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
 * @member {String} resourceUri
 */
Occurrence.prototype['resourceUri'] = undefined;

/**
 * @member {module:model/SBOMReferenceOccurrence} sbomReference
 */
Occurrence.prototype['sbomReference'] = undefined;

/**
 * Output only. The time this occurrence was last updated.
 * @member {String} updateTime
 */
Occurrence.prototype['updateTime'] = undefined;

/**
 * @member {module:model/UpgradeOccurrence} upgrade
 */
Occurrence.prototype['upgrade'] = undefined;

/**
 * @member {module:model/VulnerabilityOccurrence} vulnerability
 */
Occurrence.prototype['vulnerability'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Occurrence['KindEnum'] = {

    /**
     * value: "NOTE_KIND_UNSPECIFIED"
     * @const
     */
    "NOTE_KIND_UNSPECIFIED": "NOTE_KIND_UNSPECIFIED",

    /**
     * value: "VULNERABILITY"
     * @const
     */
    "VULNERABILITY": "VULNERABILITY",

    /**
     * value: "BUILD"
     * @const
     */
    "BUILD": "BUILD",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "PACKAGE"
     * @const
     */
    "PACKAGE": "PACKAGE",

    /**
     * value: "DEPLOYMENT"
     * @const
     */
    "DEPLOYMENT": "DEPLOYMENT",

    /**
     * value: "DISCOVERY"
     * @const
     */
    "DISCOVERY": "DISCOVERY",

    /**
     * value: "ATTESTATION"
     * @const
     */
    "ATTESTATION": "ATTESTATION",

    /**
     * value: "UPGRADE"
     * @const
     */
    "UPGRADE": "UPGRADE",

    /**
     * value: "COMPLIANCE"
     * @const
     */
    "COMPLIANCE": "COMPLIANCE",

    /**
     * value: "DSSE_ATTESTATION"
     * @const
     */
    "DSSE_ATTESTATION": "DSSE_ATTESTATION",

    /**
     * value: "VULNERABILITY_ASSESSMENT"
     * @const
     */
    "VULNERABILITY_ASSESSMENT": "VULNERABILITY_ASSESSMENT",

    /**
     * value: "SBOM_REFERENCE"
     * @const
     */
    "SBOM_REFERENCE": "SBOM_REFERENCE"
};



export default Occurrence;

