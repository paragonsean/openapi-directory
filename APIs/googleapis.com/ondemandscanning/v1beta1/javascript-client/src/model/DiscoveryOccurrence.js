/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisCompleted from './AnalysisCompleted';
import SBOMStatus from './SBOMStatus';
import Status from './Status';

/**
 * The DiscoveryOccurrence model module.
 * @module model/DiscoveryOccurrence
 * @version v1beta1
 */
class DiscoveryOccurrence {
    /**
     * Constructs a new <code>DiscoveryOccurrence</code>.
     * Provides information about the analysis status of a discovered resource.
     * @alias module:model/DiscoveryOccurrence
     */
    constructor() { 
        
        DiscoveryOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiscoveryOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiscoveryOccurrence} obj Optional instance to populate.
     * @return {module:model/DiscoveryOccurrence} The populated <code>DiscoveryOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiscoveryOccurrence();

            if (data.hasOwnProperty('analysisCompleted')) {
                obj['analysisCompleted'] = AnalysisCompleted.constructFromObject(data['analysisCompleted']);
            }
            if (data.hasOwnProperty('analysisError')) {
                obj['analysisError'] = ApiClient.convertToType(data['analysisError'], [Status]);
            }
            if (data.hasOwnProperty('analysisStatus')) {
                obj['analysisStatus'] = ApiClient.convertToType(data['analysisStatus'], 'String');
            }
            if (data.hasOwnProperty('analysisStatusError')) {
                obj['analysisStatusError'] = Status.constructFromObject(data['analysisStatusError']);
            }
            if (data.hasOwnProperty('archiveTime')) {
                obj['archiveTime'] = ApiClient.convertToType(data['archiveTime'], 'String');
            }
            if (data.hasOwnProperty('continuousAnalysis')) {
                obj['continuousAnalysis'] = ApiClient.convertToType(data['continuousAnalysis'], 'String');
            }
            if (data.hasOwnProperty('cpe')) {
                obj['cpe'] = ApiClient.convertToType(data['cpe'], 'String');
            }
            if (data.hasOwnProperty('lastScanTime')) {
                obj['lastScanTime'] = ApiClient.convertToType(data['lastScanTime'], 'String');
            }
            if (data.hasOwnProperty('sbomStatus')) {
                obj['sbomStatus'] = SBOMStatus.constructFromObject(data['sbomStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiscoveryOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiscoveryOccurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `analysisCompleted`
        if (data['analysisCompleted']) { // data not null
          AnalysisCompleted.validateJSON(data['analysisCompleted']);
        }
        if (data['analysisError']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['analysisError'])) {
                throw new Error("Expected the field `analysisError` to be an array in the JSON data but got " + data['analysisError']);
            }
            // validate the optional field `analysisError` (array)
            for (const item of data['analysisError']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['analysisStatus'] && !(typeof data['analysisStatus'] === 'string' || data['analysisStatus'] instanceof String)) {
            throw new Error("Expected the field `analysisStatus` to be a primitive type in the JSON string but got " + data['analysisStatus']);
        }
        // validate the optional field `analysisStatusError`
        if (data['analysisStatusError']) { // data not null
          Status.validateJSON(data['analysisStatusError']);
        }
        // ensure the json data is a string
        if (data['archiveTime'] && !(typeof data['archiveTime'] === 'string' || data['archiveTime'] instanceof String)) {
            throw new Error("Expected the field `archiveTime` to be a primitive type in the JSON string but got " + data['archiveTime']);
        }
        // ensure the json data is a string
        if (data['continuousAnalysis'] && !(typeof data['continuousAnalysis'] === 'string' || data['continuousAnalysis'] instanceof String)) {
            throw new Error("Expected the field `continuousAnalysis` to be a primitive type in the JSON string but got " + data['continuousAnalysis']);
        }
        // ensure the json data is a string
        if (data['cpe'] && !(typeof data['cpe'] === 'string' || data['cpe'] instanceof String)) {
            throw new Error("Expected the field `cpe` to be a primitive type in the JSON string but got " + data['cpe']);
        }
        // ensure the json data is a string
        if (data['lastScanTime'] && !(typeof data['lastScanTime'] === 'string' || data['lastScanTime'] instanceof String)) {
            throw new Error("Expected the field `lastScanTime` to be a primitive type in the JSON string but got " + data['lastScanTime']);
        }
        // validate the optional field `sbomStatus`
        if (data['sbomStatus']) { // data not null
          SBOMStatus.validateJSON(data['sbomStatus']);
        }

        return true;
    }


}



/**
 * @member {module:model/AnalysisCompleted} analysisCompleted
 */
DiscoveryOccurrence.prototype['analysisCompleted'] = undefined;

/**
 * Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
 * @member {Array.<module:model/Status>} analysisError
 */
DiscoveryOccurrence.prototype['analysisError'] = undefined;

/**
 * The status of discovery for the resource.
 * @member {module:model/DiscoveryOccurrence.AnalysisStatusEnum} analysisStatus
 */
DiscoveryOccurrence.prototype['analysisStatus'] = undefined;

/**
 * @member {module:model/Status} analysisStatusError
 */
DiscoveryOccurrence.prototype['analysisStatusError'] = undefined;

/**
 * Output only. The time occurrences related to this discovery occurrence were archived.
 * @member {String} archiveTime
 */
DiscoveryOccurrence.prototype['archiveTime'] = undefined;

/**
 * Whether the resource is continuously analyzed.
 * @member {module:model/DiscoveryOccurrence.ContinuousAnalysisEnum} continuousAnalysis
 */
DiscoveryOccurrence.prototype['continuousAnalysis'] = undefined;

/**
 * The CPE of the resource being scanned.
 * @member {String} cpe
 */
DiscoveryOccurrence.prototype['cpe'] = undefined;

/**
 * The last time this resource was scanned.
 * @member {String} lastScanTime
 */
DiscoveryOccurrence.prototype['lastScanTime'] = undefined;

/**
 * @member {module:model/SBOMStatus} sbomStatus
 */
DiscoveryOccurrence.prototype['sbomStatus'] = undefined;





/**
 * Allowed values for the <code>analysisStatus</code> property.
 * @enum {String}
 * @readonly
 */
DiscoveryOccurrence['AnalysisStatusEnum'] = {

    /**
     * value: "ANALYSIS_STATUS_UNSPECIFIED"
     * @const
     */
    "ANALYSIS_STATUS_UNSPECIFIED": "ANALYSIS_STATUS_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "SCANNING"
     * @const
     */
    "SCANNING": "SCANNING",

    /**
     * value: "FINISHED_SUCCESS"
     * @const
     */
    "FINISHED_SUCCESS": "FINISHED_SUCCESS",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "FINISHED_FAILED"
     * @const
     */
    "FINISHED_FAILED": "FINISHED_FAILED",

    /**
     * value: "FINISHED_UNSUPPORTED"
     * @const
     */
    "FINISHED_UNSUPPORTED": "FINISHED_UNSUPPORTED"
};


/**
 * Allowed values for the <code>continuousAnalysis</code> property.
 * @enum {String}
 * @readonly
 */
DiscoveryOccurrence['ContinuousAnalysisEnum'] = {

    /**
     * value: "CONTINUOUS_ANALYSIS_UNSPECIFIED"
     * @const
     */
    "CONTINUOUS_ANALYSIS_UNSPECIFIED": "CONTINUOUS_ANALYSIS_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default DiscoveryOccurrence;

