/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fingerprint from './Fingerprint';
import Layer from './Layer';

/**
 * The ImageOccurrence model module.
 * @module model/ImageOccurrence
 * @version v1beta1
 */
class ImageOccurrence {
    /**
     * Constructs a new <code>ImageOccurrence</code>.
     * Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
     * @alias module:model/ImageOccurrence
     */
    constructor() { 
        
        ImageOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageOccurrence} obj Optional instance to populate.
     * @return {module:model/ImageOccurrence} The populated <code>ImageOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageOccurrence();

            if (data.hasOwnProperty('baseResourceUrl')) {
                obj['baseResourceUrl'] = ApiClient.convertToType(data['baseResourceUrl'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = Fingerprint.constructFromObject(data['fingerprint']);
            }
            if (data.hasOwnProperty('layerInfo')) {
                obj['layerInfo'] = ApiClient.convertToType(data['layerInfo'], [Layer]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageOccurrence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseResourceUrl'] && !(typeof data['baseResourceUrl'] === 'string' || data['baseResourceUrl'] instanceof String)) {
            throw new Error("Expected the field `baseResourceUrl` to be a primitive type in the JSON string but got " + data['baseResourceUrl']);
        }
        // validate the optional field `fingerprint`
        if (data['fingerprint']) { // data not null
          Fingerprint.validateJSON(data['fingerprint']);
        }
        if (data['layerInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layerInfo'])) {
                throw new Error("Expected the field `layerInfo` to be an array in the JSON data but got " + data['layerInfo']);
            }
            // validate the optional field `layerInfo` (array)
            for (const item of data['layerInfo']) {
                Layer.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. This contains the base image URL for the derived image occurrence.
 * @member {String} baseResourceUrl
 */
ImageOccurrence.prototype['baseResourceUrl'] = undefined;

/**
 * Output only. The number of layers by which this image differs from the associated image basis.
 * @member {Number} distance
 */
ImageOccurrence.prototype['distance'] = undefined;

/**
 * @member {module:model/Fingerprint} fingerprint
 */
ImageOccurrence.prototype['fingerprint'] = undefined;

/**
 * This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
 * @member {Array.<module:model/Layer>} layerInfo
 */
ImageOccurrence.prototype['layerInfo'] = undefined;






export default ImageOccurrence;

