/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvelopeSignature from './EnvelopeSignature';
import SbomReferenceIntotoPayload from './SbomReferenceIntotoPayload';

/**
 * The SBOMReferenceOccurrence model module.
 * @module model/SBOMReferenceOccurrence
 * @version v1beta1
 */
class SBOMReferenceOccurrence {
    /**
     * Constructs a new <code>SBOMReferenceOccurrence</code>.
     * The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
     * @alias module:model/SBOMReferenceOccurrence
     */
    constructor() { 
        
        SBOMReferenceOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SBOMReferenceOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SBOMReferenceOccurrence} obj Optional instance to populate.
     * @return {module:model/SBOMReferenceOccurrence} The populated <code>SBOMReferenceOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SBOMReferenceOccurrence();

            if (data.hasOwnProperty('payload')) {
                obj['payload'] = SbomReferenceIntotoPayload.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('payloadType')) {
                obj['payloadType'] = ApiClient.convertToType(data['payloadType'], 'String');
            }
            if (data.hasOwnProperty('signatures')) {
                obj['signatures'] = ApiClient.convertToType(data['signatures'], [EnvelopeSignature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SBOMReferenceOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SBOMReferenceOccurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          SbomReferenceIntotoPayload.validateJSON(data['payload']);
        }
        // ensure the json data is a string
        if (data['payloadType'] && !(typeof data['payloadType'] === 'string' || data['payloadType'] instanceof String)) {
            throw new Error("Expected the field `payloadType` to be a primitive type in the JSON string but got " + data['payloadType']);
        }
        if (data['signatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signatures'])) {
                throw new Error("Expected the field `signatures` to be an array in the JSON data but got " + data['signatures']);
            }
            // validate the optional field `signatures` (array)
            for (const item of data['signatures']) {
                EnvelopeSignature.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/SbomReferenceIntotoPayload} payload
 */
SBOMReferenceOccurrence.prototype['payload'] = undefined;

/**
 * The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
 * @member {String} payloadType
 */
SBOMReferenceOccurrence.prototype['payloadType'] = undefined;

/**
 * The signatures over the payload.
 * @member {Array.<module:model/EnvelopeSignature>} signatures
 */
SBOMReferenceOccurrence.prototype['signatures'] = undefined;






export default SBOMReferenceOccurrence;

