/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GrafeasV1FileLocation from './GrafeasV1FileLocation';
import Version from './Version';

/**
 * The PackageIssue model module.
 * @module model/PackageIssue
 * @version v1beta1
 */
class PackageIssue {
    /**
     * Constructs a new <code>PackageIssue</code>.
     * A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
     * @alias module:model/PackageIssue
     */
    constructor() { 
        
        PackageIssue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageIssue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageIssue} obj Optional instance to populate.
     * @return {module:model/PackageIssue} The populated <code>PackageIssue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageIssue();

            if (data.hasOwnProperty('affectedCpeUri')) {
                obj['affectedCpeUri'] = ApiClient.convertToType(data['affectedCpeUri'], 'String');
            }
            if (data.hasOwnProperty('affectedPackage')) {
                obj['affectedPackage'] = ApiClient.convertToType(data['affectedPackage'], 'String');
            }
            if (data.hasOwnProperty('affectedVersion')) {
                obj['affectedVersion'] = Version.constructFromObject(data['affectedVersion']);
            }
            if (data.hasOwnProperty('effectiveSeverity')) {
                obj['effectiveSeverity'] = ApiClient.convertToType(data['effectiveSeverity'], 'String');
            }
            if (data.hasOwnProperty('fileLocation')) {
                obj['fileLocation'] = ApiClient.convertToType(data['fileLocation'], [GrafeasV1FileLocation]);
            }
            if (data.hasOwnProperty('fixAvailable')) {
                obj['fixAvailable'] = ApiClient.convertToType(data['fixAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('fixedCpeUri')) {
                obj['fixedCpeUri'] = ApiClient.convertToType(data['fixedCpeUri'], 'String');
            }
            if (data.hasOwnProperty('fixedPackage')) {
                obj['fixedPackage'] = ApiClient.convertToType(data['fixedPackage'], 'String');
            }
            if (data.hasOwnProperty('fixedVersion')) {
                obj['fixedVersion'] = Version.constructFromObject(data['fixedVersion']);
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageIssue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageIssue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affectedCpeUri'] && !(typeof data['affectedCpeUri'] === 'string' || data['affectedCpeUri'] instanceof String)) {
            throw new Error("Expected the field `affectedCpeUri` to be a primitive type in the JSON string but got " + data['affectedCpeUri']);
        }
        // ensure the json data is a string
        if (data['affectedPackage'] && !(typeof data['affectedPackage'] === 'string' || data['affectedPackage'] instanceof String)) {
            throw new Error("Expected the field `affectedPackage` to be a primitive type in the JSON string but got " + data['affectedPackage']);
        }
        // validate the optional field `affectedVersion`
        if (data['affectedVersion']) { // data not null
          Version.validateJSON(data['affectedVersion']);
        }
        // ensure the json data is a string
        if (data['effectiveSeverity'] && !(typeof data['effectiveSeverity'] === 'string' || data['effectiveSeverity'] instanceof String)) {
            throw new Error("Expected the field `effectiveSeverity` to be a primitive type in the JSON string but got " + data['effectiveSeverity']);
        }
        if (data['fileLocation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fileLocation'])) {
                throw new Error("Expected the field `fileLocation` to be an array in the JSON data but got " + data['fileLocation']);
            }
            // validate the optional field `fileLocation` (array)
            for (const item of data['fileLocation']) {
                GrafeasV1FileLocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fixedCpeUri'] && !(typeof data['fixedCpeUri'] === 'string' || data['fixedCpeUri'] instanceof String)) {
            throw new Error("Expected the field `fixedCpeUri` to be a primitive type in the JSON string but got " + data['fixedCpeUri']);
        }
        // ensure the json data is a string
        if (data['fixedPackage'] && !(typeof data['fixedPackage'] === 'string' || data['fixedPackage'] instanceof String)) {
            throw new Error("Expected the field `fixedPackage` to be a primitive type in the JSON string but got " + data['fixedPackage']);
        }
        // validate the optional field `fixedVersion`
        if (data['fixedVersion']) { // data not null
          Version.validateJSON(data['fixedVersion']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }

        return true;
    }


}



/**
 * Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
 * @member {String} affectedCpeUri
 */
PackageIssue.prototype['affectedCpeUri'] = undefined;

/**
 * Required. The package this vulnerability was found in.
 * @member {String} affectedPackage
 */
PackageIssue.prototype['affectedPackage'] = undefined;

/**
 * @member {module:model/Version} affectedVersion
 */
PackageIssue.prototype['affectedVersion'] = undefined;

/**
 * Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
 * @member {module:model/PackageIssue.EffectiveSeverityEnum} effectiveSeverity
 */
PackageIssue.prototype['effectiveSeverity'] = undefined;

/**
 * The location at which this package was found.
 * @member {Array.<module:model/GrafeasV1FileLocation>} fileLocation
 */
PackageIssue.prototype['fileLocation'] = undefined;

/**
 * Output only. Whether a fix is available for this package.
 * @member {Boolean} fixAvailable
 */
PackageIssue.prototype['fixAvailable'] = undefined;

/**
 * The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
 * @member {String} fixedCpeUri
 */
PackageIssue.prototype['fixedCpeUri'] = undefined;

/**
 * The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
 * @member {String} fixedPackage
 */
PackageIssue.prototype['fixedPackage'] = undefined;

/**
 * @member {module:model/Version} fixedVersion
 */
PackageIssue.prototype['fixedVersion'] = undefined;

/**
 * The type of package (e.g. OS, MAVEN, GO).
 * @member {String} packageType
 */
PackageIssue.prototype['packageType'] = undefined;





/**
 * Allowed values for the <code>effectiveSeverity</code> property.
 * @enum {String}
 * @readonly
 */
PackageIssue['EffectiveSeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "MINIMAL"
     * @const
     */
    "MINIMAL": "MINIMAL",

    /**
     * value: "LOW"
     * @const
     */
    "LOW": "LOW",

    /**
     * value: "MEDIUM"
     * @const
     */
    "MEDIUM": "MEDIUM",

    /**
     * value: "HIGH"
     * @const
     */
    "HIGH": "HIGH",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL"
};



export default PackageIssue;

