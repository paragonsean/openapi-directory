# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Signature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_key_id: str=None, signature: str=None):
        """Signature - a model defined in OpenAPI

        :param public_key_id: The public_key_id of this Signature.
        :param signature: The signature of this Signature.
        """
        self.openapi_types = {
            'public_key_id': str,
            'signature': str
        }

        self.attribute_map = {
            'public_key_id': 'publicKeyId',
            'signature': 'signature'
        }

        self._public_key_id = public_key_id
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Signature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Signature of this Signature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_key_id(self):
        """Gets the public_key_id of this Signature.

        The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"

        :return: The public_key_id of this Signature.
        :rtype: str
        """
        return self._public_key_id

    @public_key_id.setter
    def public_key_id(self, public_key_id):
        """Sets the public_key_id of this Signature.

        The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"

        :param public_key_id: The public_key_id of this Signature.
        :type public_key_id: str
        """

        self._public_key_id = public_key_id

    @property
    def signature(self):
        """Gets the signature of this Signature.

        The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.

        :return: The signature of this Signature.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Signature.

        The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.

        :param signature: The signature of this Signature.
        :type signature: str
        """

        self._signature = signature
