# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_completed import AnalysisCompleted
from openapi_server.models.sbom_status import SBOMStatus
from openapi_server.models.status import Status
from openapi_server import util


class DiscoveryOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_completed: AnalysisCompleted=None, analysis_error: List[Status]=None, analysis_status: str=None, analysis_status_error: Status=None, archive_time: str=None, continuous_analysis: str=None, cpe: str=None, last_scan_time: str=None, sbom_status: SBOMStatus=None):
        """DiscoveryOccurrence - a model defined in OpenAPI

        :param analysis_completed: The analysis_completed of this DiscoveryOccurrence.
        :param analysis_error: The analysis_error of this DiscoveryOccurrence.
        :param analysis_status: The analysis_status of this DiscoveryOccurrence.
        :param analysis_status_error: The analysis_status_error of this DiscoveryOccurrence.
        :param archive_time: The archive_time of this DiscoveryOccurrence.
        :param continuous_analysis: The continuous_analysis of this DiscoveryOccurrence.
        :param cpe: The cpe of this DiscoveryOccurrence.
        :param last_scan_time: The last_scan_time of this DiscoveryOccurrence.
        :param sbom_status: The sbom_status of this DiscoveryOccurrence.
        """
        self.openapi_types = {
            'analysis_completed': AnalysisCompleted,
            'analysis_error': List[Status],
            'analysis_status': str,
            'analysis_status_error': Status,
            'archive_time': str,
            'continuous_analysis': str,
            'cpe': str,
            'last_scan_time': str,
            'sbom_status': SBOMStatus
        }

        self.attribute_map = {
            'analysis_completed': 'analysisCompleted',
            'analysis_error': 'analysisError',
            'analysis_status': 'analysisStatus',
            'analysis_status_error': 'analysisStatusError',
            'archive_time': 'archiveTime',
            'continuous_analysis': 'continuousAnalysis',
            'cpe': 'cpe',
            'last_scan_time': 'lastScanTime',
            'sbom_status': 'sbomStatus'
        }

        self._analysis_completed = analysis_completed
        self._analysis_error = analysis_error
        self._analysis_status = analysis_status
        self._analysis_status_error = analysis_status_error
        self._archive_time = archive_time
        self._continuous_analysis = continuous_analysis
        self._cpe = cpe
        self._last_scan_time = last_scan_time
        self._sbom_status = sbom_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveryOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveryOccurrence of this DiscoveryOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_completed(self):
        """Gets the analysis_completed of this DiscoveryOccurrence.


        :return: The analysis_completed of this DiscoveryOccurrence.
        :rtype: AnalysisCompleted
        """
        return self._analysis_completed

    @analysis_completed.setter
    def analysis_completed(self, analysis_completed):
        """Sets the analysis_completed of this DiscoveryOccurrence.


        :param analysis_completed: The analysis_completed of this DiscoveryOccurrence.
        :type analysis_completed: AnalysisCompleted
        """

        self._analysis_completed = analysis_completed

    @property
    def analysis_error(self):
        """Gets the analysis_error of this DiscoveryOccurrence.

        Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.

        :return: The analysis_error of this DiscoveryOccurrence.
        :rtype: List[Status]
        """
        return self._analysis_error

    @analysis_error.setter
    def analysis_error(self, analysis_error):
        """Sets the analysis_error of this DiscoveryOccurrence.

        Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.

        :param analysis_error: The analysis_error of this DiscoveryOccurrence.
        :type analysis_error: List[Status]
        """

        self._analysis_error = analysis_error

    @property
    def analysis_status(self):
        """Gets the analysis_status of this DiscoveryOccurrence.

        The status of discovery for the resource.

        :return: The analysis_status of this DiscoveryOccurrence.
        :rtype: str
        """
        return self._analysis_status

    @analysis_status.setter
    def analysis_status(self, analysis_status):
        """Sets the analysis_status of this DiscoveryOccurrence.

        The status of discovery for the resource.

        :param analysis_status: The analysis_status of this DiscoveryOccurrence.
        :type analysis_status: str
        """
        allowed_values = ["ANALYSIS_STATUS_UNSPECIFIED", "PENDING", "SCANNING", "FINISHED_SUCCESS", "COMPLETE", "FINISHED_FAILED", "FINISHED_UNSUPPORTED"]  # noqa: E501
        if analysis_status not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_status` ({0}), must be one of {1}"
                .format(analysis_status, allowed_values)
            )

        self._analysis_status = analysis_status

    @property
    def analysis_status_error(self):
        """Gets the analysis_status_error of this DiscoveryOccurrence.


        :return: The analysis_status_error of this DiscoveryOccurrence.
        :rtype: Status
        """
        return self._analysis_status_error

    @analysis_status_error.setter
    def analysis_status_error(self, analysis_status_error):
        """Sets the analysis_status_error of this DiscoveryOccurrence.


        :param analysis_status_error: The analysis_status_error of this DiscoveryOccurrence.
        :type analysis_status_error: Status
        """

        self._analysis_status_error = analysis_status_error

    @property
    def archive_time(self):
        """Gets the archive_time of this DiscoveryOccurrence.

        Output only. The time occurrences related to this discovery occurrence were archived.

        :return: The archive_time of this DiscoveryOccurrence.
        :rtype: str
        """
        return self._archive_time

    @archive_time.setter
    def archive_time(self, archive_time):
        """Sets the archive_time of this DiscoveryOccurrence.

        Output only. The time occurrences related to this discovery occurrence were archived.

        :param archive_time: The archive_time of this DiscoveryOccurrence.
        :type archive_time: str
        """

        self._archive_time = archive_time

    @property
    def continuous_analysis(self):
        """Gets the continuous_analysis of this DiscoveryOccurrence.

        Whether the resource is continuously analyzed.

        :return: The continuous_analysis of this DiscoveryOccurrence.
        :rtype: str
        """
        return self._continuous_analysis

    @continuous_analysis.setter
    def continuous_analysis(self, continuous_analysis):
        """Sets the continuous_analysis of this DiscoveryOccurrence.

        Whether the resource is continuously analyzed.

        :param continuous_analysis: The continuous_analysis of this DiscoveryOccurrence.
        :type continuous_analysis: str
        """
        allowed_values = ["CONTINUOUS_ANALYSIS_UNSPECIFIED", "ACTIVE", "INACTIVE"]  # noqa: E501
        if continuous_analysis not in allowed_values:
            raise ValueError(
                "Invalid value for `continuous_analysis` ({0}), must be one of {1}"
                .format(continuous_analysis, allowed_values)
            )

        self._continuous_analysis = continuous_analysis

    @property
    def cpe(self):
        """Gets the cpe of this DiscoveryOccurrence.

        The CPE of the resource being scanned.

        :return: The cpe of this DiscoveryOccurrence.
        :rtype: str
        """
        return self._cpe

    @cpe.setter
    def cpe(self, cpe):
        """Sets the cpe of this DiscoveryOccurrence.

        The CPE of the resource being scanned.

        :param cpe: The cpe of this DiscoveryOccurrence.
        :type cpe: str
        """

        self._cpe = cpe

    @property
    def last_scan_time(self):
        """Gets the last_scan_time of this DiscoveryOccurrence.

        The last time this resource was scanned.

        :return: The last_scan_time of this DiscoveryOccurrence.
        :rtype: str
        """
        return self._last_scan_time

    @last_scan_time.setter
    def last_scan_time(self, last_scan_time):
        """Sets the last_scan_time of this DiscoveryOccurrence.

        The last time this resource was scanned.

        :param last_scan_time: The last_scan_time of this DiscoveryOccurrence.
        :type last_scan_time: str
        """

        self._last_scan_time = last_scan_time

    @property
    def sbom_status(self):
        """Gets the sbom_status of this DiscoveryOccurrence.


        :return: The sbom_status of this DiscoveryOccurrence.
        :rtype: SBOMStatus
        """
        return self._sbom_status

    @sbom_status.setter
    def sbom_status(self, sbom_status):
        """Sets the sbom_status of this DiscoveryOccurrence.


        :param sbom_status: The sbom_status of this DiscoveryOccurrence.
        :type sbom_status: SBOMStatus
        """

        self._sbom_status = sbom_status
