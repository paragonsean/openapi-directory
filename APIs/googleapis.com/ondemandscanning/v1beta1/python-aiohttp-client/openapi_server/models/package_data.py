# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.binary_source_info import BinarySourceInfo
from openapi_server.models.file_location import FileLocation
from openapi_server.models.language_package_dependency import LanguagePackageDependency
from openapi_server.models.maintainer import Maintainer
from openapi_server.models.package_version import PackageVersion
from openapi_server import util


class PackageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, binary_source_info: List[BinarySourceInfo]=None, binary_version: PackageVersion=None, cpe_uri: str=None, dependency_chain: List[LanguagePackageDependency]=None, file_location: List[FileLocation]=None, hash_digest: str=None, licenses: List[str]=None, maintainer: Maintainer=None, os: str=None, os_version: str=None, package: str=None, package_type: str=None, patched_cve: List[str]=None, source_version: PackageVersion=None, unused: str=None, version: str=None):
        """PackageData - a model defined in OpenAPI

        :param architecture: The architecture of this PackageData.
        :param binary_source_info: The binary_source_info of this PackageData.
        :param binary_version: The binary_version of this PackageData.
        :param cpe_uri: The cpe_uri of this PackageData.
        :param dependency_chain: The dependency_chain of this PackageData.
        :param file_location: The file_location of this PackageData.
        :param hash_digest: The hash_digest of this PackageData.
        :param licenses: The licenses of this PackageData.
        :param maintainer: The maintainer of this PackageData.
        :param os: The os of this PackageData.
        :param os_version: The os_version of this PackageData.
        :param package: The package of this PackageData.
        :param package_type: The package_type of this PackageData.
        :param patched_cve: The patched_cve of this PackageData.
        :param source_version: The source_version of this PackageData.
        :param unused: The unused of this PackageData.
        :param version: The version of this PackageData.
        """
        self.openapi_types = {
            'architecture': str,
            'binary_source_info': List[BinarySourceInfo],
            'binary_version': PackageVersion,
            'cpe_uri': str,
            'dependency_chain': List[LanguagePackageDependency],
            'file_location': List[FileLocation],
            'hash_digest': str,
            'licenses': List[str],
            'maintainer': Maintainer,
            'os': str,
            'os_version': str,
            'package': str,
            'package_type': str,
            'patched_cve': List[str],
            'source_version': PackageVersion,
            'unused': str,
            'version': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'binary_source_info': 'binarySourceInfo',
            'binary_version': 'binaryVersion',
            'cpe_uri': 'cpeUri',
            'dependency_chain': 'dependencyChain',
            'file_location': 'fileLocation',
            'hash_digest': 'hashDigest',
            'licenses': 'licenses',
            'maintainer': 'maintainer',
            'os': 'os',
            'os_version': 'osVersion',
            'package': 'package',
            'package_type': 'packageType',
            'patched_cve': 'patchedCve',
            'source_version': 'sourceVersion',
            'unused': 'unused',
            'version': 'version'
        }

        self._architecture = architecture
        self._binary_source_info = binary_source_info
        self._binary_version = binary_version
        self._cpe_uri = cpe_uri
        self._dependency_chain = dependency_chain
        self._file_location = file_location
        self._hash_digest = hash_digest
        self._licenses = licenses
        self._maintainer = maintainer
        self._os = os
        self._os_version = os_version
        self._package = package
        self._package_type = package_type
        self._patched_cve = patched_cve
        self._source_version = source_version
        self._unused = unused
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageData of this PackageData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this PackageData.

        The architecture of the package.

        :return: The architecture of this PackageData.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this PackageData.

        The architecture of the package.

        :param architecture: The architecture of this PackageData.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def binary_source_info(self):
        """Gets the binary_source_info of this PackageData.

        A bundle containing the binary and source information.

        :return: The binary_source_info of this PackageData.
        :rtype: List[BinarySourceInfo]
        """
        return self._binary_source_info

    @binary_source_info.setter
    def binary_source_info(self, binary_source_info):
        """Sets the binary_source_info of this PackageData.

        A bundle containing the binary and source information.

        :param binary_source_info: The binary_source_info of this PackageData.
        :type binary_source_info: List[BinarySourceInfo]
        """

        self._binary_source_info = binary_source_info

    @property
    def binary_version(self):
        """Gets the binary_version of this PackageData.


        :return: The binary_version of this PackageData.
        :rtype: PackageVersion
        """
        return self._binary_version

    @binary_version.setter
    def binary_version(self, binary_version):
        """Sets the binary_version of this PackageData.


        :param binary_version: The binary_version of this PackageData.
        :type binary_version: PackageVersion
        """

        self._binary_version = binary_version

    @property
    def cpe_uri(self):
        """Gets the cpe_uri of this PackageData.

        The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.

        :return: The cpe_uri of this PackageData.
        :rtype: str
        """
        return self._cpe_uri

    @cpe_uri.setter
    def cpe_uri(self, cpe_uri):
        """Sets the cpe_uri of this PackageData.

        The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.

        :param cpe_uri: The cpe_uri of this PackageData.
        :type cpe_uri: str
        """

        self._cpe_uri = cpe_uri

    @property
    def dependency_chain(self):
        """Gets the dependency_chain of this PackageData.

        The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.

        :return: The dependency_chain of this PackageData.
        :rtype: List[LanguagePackageDependency]
        """
        return self._dependency_chain

    @dependency_chain.setter
    def dependency_chain(self, dependency_chain):
        """Sets the dependency_chain of this PackageData.

        The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.

        :param dependency_chain: The dependency_chain of this PackageData.
        :type dependency_chain: List[LanguagePackageDependency]
        """

        self._dependency_chain = dependency_chain

    @property
    def file_location(self):
        """Gets the file_location of this PackageData.

        The path to the jar file / go binary file.

        :return: The file_location of this PackageData.
        :rtype: List[FileLocation]
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this PackageData.

        The path to the jar file / go binary file.

        :param file_location: The file_location of this PackageData.
        :type file_location: List[FileLocation]
        """

        self._file_location = file_location

    @property
    def hash_digest(self):
        """Gets the hash_digest of this PackageData.

        HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.

        :return: The hash_digest of this PackageData.
        :rtype: str
        """
        return self._hash_digest

    @hash_digest.setter
    def hash_digest(self, hash_digest):
        """Sets the hash_digest of this PackageData.

        HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.

        :param hash_digest: The hash_digest of this PackageData.
        :type hash_digest: str
        """

        self._hash_digest = hash_digest

    @property
    def licenses(self):
        """Gets the licenses of this PackageData.

        The list of licenses found that are related to a given package. Note that licenses may also be stored on the BinarySourceInfo. If there is no BinarySourceInfo (because there's no concept of source vs binary), then it will be stored here, while if there are BinarySourceInfos, it will be stored there, as one source can have multiple binaries with different licenses.

        :return: The licenses of this PackageData.
        :rtype: List[str]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this PackageData.

        The list of licenses found that are related to a given package. Note that licenses may also be stored on the BinarySourceInfo. If there is no BinarySourceInfo (because there's no concept of source vs binary), then it will be stored here, while if there are BinarySourceInfos, it will be stored there, as one source can have multiple binaries with different licenses.

        :param licenses: The licenses of this PackageData.
        :type licenses: List[str]
        """

        self._licenses = licenses

    @property
    def maintainer(self):
        """Gets the maintainer of this PackageData.


        :return: The maintainer of this PackageData.
        :rtype: Maintainer
        """
        return self._maintainer

    @maintainer.setter
    def maintainer(self, maintainer):
        """Sets the maintainer of this PackageData.


        :param maintainer: The maintainer of this PackageData.
        :type maintainer: Maintainer
        """

        self._maintainer = maintainer

    @property
    def os(self):
        """Gets the os of this PackageData.

        The OS affected by a vulnerability Used to generate the cpe_uri for OS packages

        :return: The os of this PackageData.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this PackageData.

        The OS affected by a vulnerability Used to generate the cpe_uri for OS packages

        :param os: The os of this PackageData.
        :type os: str
        """

        self._os = os

    @property
    def os_version(self):
        """Gets the os_version of this PackageData.

        The version of the OS Used to generate the cpe_uri for OS packages

        :return: The os_version of this PackageData.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this PackageData.

        The version of the OS Used to generate the cpe_uri for OS packages

        :param os_version: The os_version of this PackageData.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def package(self):
        """Gets the package of this PackageData.

        The package being analysed for vulnerabilities

        :return: The package of this PackageData.
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this PackageData.

        The package being analysed for vulnerabilities

        :param package: The package of this PackageData.
        :type package: str
        """

        self._package = package

    @property
    def package_type(self):
        """Gets the package_type of this PackageData.

        The type of package: os, maven, go, etc.

        :return: The package_type of this PackageData.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageData.

        The type of package: os, maven, go, etc.

        :param package_type: The package_type of this PackageData.
        :type package_type: str
        """
        allowed_values = ["PACKAGE_TYPE_UNSPECIFIED", "OS", "MAVEN", "GO", "GO_STDLIB", "PYPI", "NPM", "NUGET", "RUBYGEMS", "RUST", "COMPOSER"]  # noqa: E501
        if package_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_type` ({0}), must be one of {1}"
                .format(package_type, allowed_values)
            )

        self._package_type = package_type

    @property
    def patched_cve(self):
        """Gets the patched_cve of this PackageData.

        CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning

        :return: The patched_cve of this PackageData.
        :rtype: List[str]
        """
        return self._patched_cve

    @patched_cve.setter
    def patched_cve(self, patched_cve):
        """Sets the patched_cve of this PackageData.

        CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning

        :param patched_cve: The patched_cve of this PackageData.
        :type patched_cve: List[str]
        """

        self._patched_cve = patched_cve

    @property
    def source_version(self):
        """Gets the source_version of this PackageData.


        :return: The source_version of this PackageData.
        :rtype: PackageVersion
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this PackageData.


        :param source_version: The source_version of this PackageData.
        :type source_version: PackageVersion
        """

        self._source_version = source_version

    @property
    def unused(self):
        """Gets the unused of this PackageData.


        :return: The unused of this PackageData.
        :rtype: str
        """
        return self._unused

    @unused.setter
    def unused(self, unused):
        """Sets the unused of this PackageData.


        :param unused: The unused of this PackageData.
        :type unused: str
        """

        self._unused = unused

    @property
    def version(self):
        """Gets the version of this PackageData.

        The version of the package being analysed

        :return: The version of this PackageData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackageData.

        The version of the package being analysed

        :param version: The version of this PackageData.
        :type version: str
        """

        self._version = version
