# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, epoch: int=None, full_name: str=None, inclusive: bool=None, kind: str=None, name: str=None, revision: str=None):
        """Version - a model defined in OpenAPI

        :param epoch: The epoch of this Version.
        :param full_name: The full_name of this Version.
        :param inclusive: The inclusive of this Version.
        :param kind: The kind of this Version.
        :param name: The name of this Version.
        :param revision: The revision of this Version.
        """
        self.openapi_types = {
            'epoch': int,
            'full_name': str,
            'inclusive': bool,
            'kind': str,
            'name': str,
            'revision': str
        }

        self.attribute_map = {
            'epoch': 'epoch',
            'full_name': 'fullName',
            'inclusive': 'inclusive',
            'kind': 'kind',
            'name': 'name',
            'revision': 'revision'
        }

        self._epoch = epoch
        self._full_name = full_name
        self._inclusive = inclusive
        self._kind = kind
        self._name = name
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epoch(self):
        """Gets the epoch of this Version.

        Used to correct mistakes in the version numbering scheme.

        :return: The epoch of this Version.
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this Version.

        Used to correct mistakes in the version numbering scheme.

        :param epoch: The epoch of this Version.
        :type epoch: int
        """

        self._epoch = epoch

    @property
    def full_name(self):
        """Gets the full_name of this Version.

        Human readable version string. This string is of the form :- and is only set when kind is NORMAL.

        :return: The full_name of this Version.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Version.

        Human readable version string. This string is of the form :- and is only set when kind is NORMAL.

        :param full_name: The full_name of this Version.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def inclusive(self):
        """Gets the inclusive of this Version.

        Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.

        :return: The inclusive of this Version.
        :rtype: bool
        """
        return self._inclusive

    @inclusive.setter
    def inclusive(self, inclusive):
        """Sets the inclusive of this Version.

        Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.

        :param inclusive: The inclusive of this Version.
        :type inclusive: bool
        """

        self._inclusive = inclusive

    @property
    def kind(self):
        """Gets the kind of this Version.

        Required. Distinguishes between sentinel MIN/MAX versions and normal versions.

        :return: The kind of this Version.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Version.

        Required. Distinguishes between sentinel MIN/MAX versions and normal versions.

        :param kind: The kind of this Version.
        :type kind: str
        """
        allowed_values = ["VERSION_KIND_UNSPECIFIED", "NORMAL", "MINIMUM", "MAXIMUM"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Version.

        Required only when version kind is NORMAL. The main part of the version name.

        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Version.

        Required only when version kind is NORMAL. The main part of the version name.

        :param name: The name of this Version.
        :type name: str
        """

        self._name = name

    @property
    def revision(self):
        """Gets the revision of this Version.

        The iteration of the package build from the above version.

        :return: The revision of this Version.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Version.

        The iteration of the package build from the above version.

        :param revision: The revision of this Version.
        :type revision: str
        """

        self._revision = revision
