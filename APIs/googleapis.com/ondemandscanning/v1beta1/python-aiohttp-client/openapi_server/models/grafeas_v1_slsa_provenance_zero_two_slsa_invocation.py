# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grafeas_v1_slsa_provenance_zero_two_slsa_config_source import GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
from openapi_server import util


class GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_source: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource=None, environment: Dict[str, object]=None, parameters: Dict[str, object]=None):
        """GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation - a model defined in OpenAPI

        :param config_source: The config_source of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :param environment: The environment of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :param parameters: The parameters of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        """
        self.openapi_types = {
            'config_source': GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource,
            'environment': Dict[str, object],
            'parameters': Dict[str, object]
        }

        self.attribute_map = {
            'config_source': 'configSource',
            'environment': 'environment',
            'parameters': 'parameters'
        }

        self._config_source = config_source
        self._environment = environment
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_source(self):
        """Gets the config_source of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :return: The config_source of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :rtype: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
        """
        return self._config_source

    @config_source.setter
    def config_source(self, config_source):
        """Sets the config_source of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :param config_source: The config_source of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :type config_source: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
        """

        self._config_source = config_source

    @property
    def environment(self):
        """Gets the environment of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :return: The environment of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :rtype: Dict[str, object]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :param environment: The environment of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :type environment: Dict[str, object]
        """

        self._environment = environment

    @property
    def parameters(self):
        """Gets the parameters of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :return: The parameters of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :rtype: Dict[str, object]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.


        :param parameters: The parameters of this GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.
        :type parameters: Dict[str, object]
        """

        self._parameters = parameters
