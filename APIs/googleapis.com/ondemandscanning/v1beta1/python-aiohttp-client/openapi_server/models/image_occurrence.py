# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fingerprint import Fingerprint
from openapi_server.models.layer import Layer
from openapi_server import util


class ImageOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_resource_url: str=None, distance: int=None, fingerprint: Fingerprint=None, layer_info: List[Layer]=None):
        """ImageOccurrence - a model defined in OpenAPI

        :param base_resource_url: The base_resource_url of this ImageOccurrence.
        :param distance: The distance of this ImageOccurrence.
        :param fingerprint: The fingerprint of this ImageOccurrence.
        :param layer_info: The layer_info of this ImageOccurrence.
        """
        self.openapi_types = {
            'base_resource_url': str,
            'distance': int,
            'fingerprint': Fingerprint,
            'layer_info': List[Layer]
        }

        self.attribute_map = {
            'base_resource_url': 'baseResourceUrl',
            'distance': 'distance',
            'fingerprint': 'fingerprint',
            'layer_info': 'layerInfo'
        }

        self._base_resource_url = base_resource_url
        self._distance = distance
        self._fingerprint = fingerprint
        self._layer_info = layer_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageOccurrence of this ImageOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_resource_url(self):
        """Gets the base_resource_url of this ImageOccurrence.

        Output only. This contains the base image URL for the derived image occurrence.

        :return: The base_resource_url of this ImageOccurrence.
        :rtype: str
        """
        return self._base_resource_url

    @base_resource_url.setter
    def base_resource_url(self, base_resource_url):
        """Sets the base_resource_url of this ImageOccurrence.

        Output only. This contains the base image URL for the derived image occurrence.

        :param base_resource_url: The base_resource_url of this ImageOccurrence.
        :type base_resource_url: str
        """

        self._base_resource_url = base_resource_url

    @property
    def distance(self):
        """Gets the distance of this ImageOccurrence.

        Output only. The number of layers by which this image differs from the associated image basis.

        :return: The distance of this ImageOccurrence.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ImageOccurrence.

        Output only. The number of layers by which this image differs from the associated image basis.

        :param distance: The distance of this ImageOccurrence.
        :type distance: int
        """

        self._distance = distance

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ImageOccurrence.


        :return: The fingerprint of this ImageOccurrence.
        :rtype: Fingerprint
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ImageOccurrence.


        :param fingerprint: The fingerprint of this ImageOccurrence.
        :type fingerprint: Fingerprint
        """

        self._fingerprint = fingerprint

    @property
    def layer_info(self):
        """Gets the layer_info of this ImageOccurrence.

        This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :return: The layer_info of this ImageOccurrence.
        :rtype: List[Layer]
        """
        return self._layer_info

    @layer_info.setter
    def layer_info(self, layer_info):
        """Sets the layer_info of this ImageOccurrence.

        This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.

        :param layer_info: The layer_info of this ImageOccurrence.
        :type layer_info: List[Layer]
        """

        self._layer_info = layer_info
