# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, object]=None, content: str=None, digest: Dict[str, str]=None, download_location: str=None, media_type: str=None, name: str=None, uri: str=None):
        """ResourceDescriptor - a model defined in OpenAPI

        :param annotations: The annotations of this ResourceDescriptor.
        :param content: The content of this ResourceDescriptor.
        :param digest: The digest of this ResourceDescriptor.
        :param download_location: The download_location of this ResourceDescriptor.
        :param media_type: The media_type of this ResourceDescriptor.
        :param name: The name of this ResourceDescriptor.
        :param uri: The uri of this ResourceDescriptor.
        """
        self.openapi_types = {
            'annotations': Dict[str, object],
            'content': str,
            'digest': Dict[str, str],
            'download_location': str,
            'media_type': str,
            'name': str,
            'uri': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'content': 'content',
            'digest': 'digest',
            'download_location': 'downloadLocation',
            'media_type': 'mediaType',
            'name': 'name',
            'uri': 'uri'
        }

        self._annotations = annotations
        self._content = content
        self._digest = digest
        self._download_location = download_location
        self._media_type = media_type
        self._name = name
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceDescriptor of this ResourceDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this ResourceDescriptor.


        :return: The annotations of this ResourceDescriptor.
        :rtype: Dict[str, object]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ResourceDescriptor.


        :param annotations: The annotations of this ResourceDescriptor.
        :type annotations: Dict[str, object]
        """

        self._annotations = annotations

    @property
    def content(self):
        """Gets the content of this ResourceDescriptor.


        :return: The content of this ResourceDescriptor.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ResourceDescriptor.


        :param content: The content of this ResourceDescriptor.
        :type content: str
        """

        self._content = content

    @property
    def digest(self):
        """Gets the digest of this ResourceDescriptor.


        :return: The digest of this ResourceDescriptor.
        :rtype: Dict[str, str]
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this ResourceDescriptor.


        :param digest: The digest of this ResourceDescriptor.
        :type digest: Dict[str, str]
        """

        self._digest = digest

    @property
    def download_location(self):
        """Gets the download_location of this ResourceDescriptor.


        :return: The download_location of this ResourceDescriptor.
        :rtype: str
        """
        return self._download_location

    @download_location.setter
    def download_location(self, download_location):
        """Sets the download_location of this ResourceDescriptor.


        :param download_location: The download_location of this ResourceDescriptor.
        :type download_location: str
        """

        self._download_location = download_location

    @property
    def media_type(self):
        """Gets the media_type of this ResourceDescriptor.


        :return: The media_type of this ResourceDescriptor.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this ResourceDescriptor.


        :param media_type: The media_type of this ResourceDescriptor.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this ResourceDescriptor.


        :return: The name of this ResourceDescriptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceDescriptor.


        :param name: The name of this ResourceDescriptor.
        :type name: str
        """

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this ResourceDescriptor.


        :return: The uri of this ResourceDescriptor.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ResourceDescriptor.


        :param uri: The uri of this ResourceDescriptor.
        :type uri: str
        """

        self._uri = uri
