# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Jwt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compact_jwt: str=None):
        """Jwt - a model defined in OpenAPI

        :param compact_jwt: The compact_jwt of this Jwt.
        """
        self.openapi_types = {
            'compact_jwt': str
        }

        self.attribute_map = {
            'compact_jwt': 'compactJwt'
        }

        self._compact_jwt = compact_jwt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Jwt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Jwt of this Jwt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compact_jwt(self):
        """Gets the compact_jwt of this Jwt.

        The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1

        :return: The compact_jwt of this Jwt.
        :rtype: str
        """
        return self._compact_jwt

    @compact_jwt.setter
    def compact_jwt(self, compact_jwt):
        """Sets the compact_jwt of this Jwt.

        The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1

        :param compact_jwt: The compact_jwt of this Jwt.
        :type compact_jwt: str
        """

        self._compact_jwt = compact_jwt
