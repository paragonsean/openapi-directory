# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.envelope_signature import EnvelopeSignature
from openapi_server import util


class Envelope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload: str=None, payload_type: str=None, signatures: List[EnvelopeSignature]=None):
        """Envelope - a model defined in OpenAPI

        :param payload: The payload of this Envelope.
        :param payload_type: The payload_type of this Envelope.
        :param signatures: The signatures of this Envelope.
        """
        self.openapi_types = {
            'payload': str,
            'payload_type': str,
            'signatures': List[EnvelopeSignature]
        }

        self.attribute_map = {
            'payload': 'payload',
            'payload_type': 'payloadType',
            'signatures': 'signatures'
        }

        self._payload = payload
        self._payload_type = payload_type
        self._signatures = signatures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Envelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Envelope of this Envelope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self):
        """Gets the payload of this Envelope.


        :return: The payload of this Envelope.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Envelope.


        :param payload: The payload of this Envelope.
        :type payload: str
        """

        self._payload = payload

    @property
    def payload_type(self):
        """Gets the payload_type of this Envelope.


        :return: The payload_type of this Envelope.
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type):
        """Sets the payload_type of this Envelope.


        :param payload_type: The payload_type of this Envelope.
        :type payload_type: str
        """

        self._payload_type = payload_type

    @property
    def signatures(self):
        """Gets the signatures of this Envelope.


        :return: The signatures of this Envelope.
        :rtype: List[EnvelopeSignature]
        """
        return self._signatures

    @signatures.setter
    def signatures(self, signatures):
        """Sets the signatures of this Envelope.


        :param signatures: The signatures of this Envelope.
        :type signatures: List[EnvelopeSignature]
        """

        self._signatures = signatures
