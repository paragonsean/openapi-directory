# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cvss import CVSS
from openapi_server.models.package_issue import PackageIssue
from openapi_server.models.related_url import RelatedUrl
from openapi_server.models.vex_assessment import VexAssessment
from openapi_server import util


class VulnerabilityOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvss_score: float=None, cvss_v2: CVSS=None, cvss_version: str=None, cvssv3: CVSS=None, effective_severity: str=None, extra_details: str=None, fix_available: bool=None, long_description: str=None, package_issue: List[PackageIssue]=None, related_urls: List[RelatedUrl]=None, severity: str=None, short_description: str=None, type: str=None, vex_assessment: VexAssessment=None):
        """VulnerabilityOccurrence - a model defined in OpenAPI

        :param cvss_score: The cvss_score of this VulnerabilityOccurrence.
        :param cvss_v2: The cvss_v2 of this VulnerabilityOccurrence.
        :param cvss_version: The cvss_version of this VulnerabilityOccurrence.
        :param cvssv3: The cvssv3 of this VulnerabilityOccurrence.
        :param effective_severity: The effective_severity of this VulnerabilityOccurrence.
        :param extra_details: The extra_details of this VulnerabilityOccurrence.
        :param fix_available: The fix_available of this VulnerabilityOccurrence.
        :param long_description: The long_description of this VulnerabilityOccurrence.
        :param package_issue: The package_issue of this VulnerabilityOccurrence.
        :param related_urls: The related_urls of this VulnerabilityOccurrence.
        :param severity: The severity of this VulnerabilityOccurrence.
        :param short_description: The short_description of this VulnerabilityOccurrence.
        :param type: The type of this VulnerabilityOccurrence.
        :param vex_assessment: The vex_assessment of this VulnerabilityOccurrence.
        """
        self.openapi_types = {
            'cvss_score': float,
            'cvss_v2': CVSS,
            'cvss_version': str,
            'cvssv3': CVSS,
            'effective_severity': str,
            'extra_details': str,
            'fix_available': bool,
            'long_description': str,
            'package_issue': List[PackageIssue],
            'related_urls': List[RelatedUrl],
            'severity': str,
            'short_description': str,
            'type': str,
            'vex_assessment': VexAssessment
        }

        self.attribute_map = {
            'cvss_score': 'cvssScore',
            'cvss_v2': 'cvssV2',
            'cvss_version': 'cvssVersion',
            'cvssv3': 'cvssv3',
            'effective_severity': 'effectiveSeverity',
            'extra_details': 'extraDetails',
            'fix_available': 'fixAvailable',
            'long_description': 'longDescription',
            'package_issue': 'packageIssue',
            'related_urls': 'relatedUrls',
            'severity': 'severity',
            'short_description': 'shortDescription',
            'type': 'type',
            'vex_assessment': 'vexAssessment'
        }

        self._cvss_score = cvss_score
        self._cvss_v2 = cvss_v2
        self._cvss_version = cvss_version
        self._cvssv3 = cvssv3
        self._effective_severity = effective_severity
        self._extra_details = extra_details
        self._fix_available = fix_available
        self._long_description = long_description
        self._package_issue = package_issue
        self._related_urls = related_urls
        self._severity = severity
        self._short_description = short_description
        self._type = type
        self._vex_assessment = vex_assessment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VulnerabilityOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VulnerabilityOccurrence of this VulnerabilityOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvss_score(self):
        """Gets the cvss_score of this VulnerabilityOccurrence.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.

        :return: The cvss_score of this VulnerabilityOccurrence.
        :rtype: float
        """
        return self._cvss_score

    @cvss_score.setter
    def cvss_score(self, cvss_score):
        """Sets the cvss_score of this VulnerabilityOccurrence.

        Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.

        :param cvss_score: The cvss_score of this VulnerabilityOccurrence.
        :type cvss_score: float
        """

        self._cvss_score = cvss_score

    @property
    def cvss_v2(self):
        """Gets the cvss_v2 of this VulnerabilityOccurrence.


        :return: The cvss_v2 of this VulnerabilityOccurrence.
        :rtype: CVSS
        """
        return self._cvss_v2

    @cvss_v2.setter
    def cvss_v2(self, cvss_v2):
        """Sets the cvss_v2 of this VulnerabilityOccurrence.


        :param cvss_v2: The cvss_v2 of this VulnerabilityOccurrence.
        :type cvss_v2: CVSS
        """

        self._cvss_v2 = cvss_v2

    @property
    def cvss_version(self):
        """Gets the cvss_version of this VulnerabilityOccurrence.

        Output only. CVSS version used to populate cvss_score and severity.

        :return: The cvss_version of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._cvss_version

    @cvss_version.setter
    def cvss_version(self, cvss_version):
        """Sets the cvss_version of this VulnerabilityOccurrence.

        Output only. CVSS version used to populate cvss_score and severity.

        :param cvss_version: The cvss_version of this VulnerabilityOccurrence.
        :type cvss_version: str
        """
        allowed_values = ["CVSS_VERSION_UNSPECIFIED", "CVSS_VERSION_2", "CVSS_VERSION_3"]  # noqa: E501
        if cvss_version not in allowed_values:
            raise ValueError(
                "Invalid value for `cvss_version` ({0}), must be one of {1}"
                .format(cvss_version, allowed_values)
            )

        self._cvss_version = cvss_version

    @property
    def cvssv3(self):
        """Gets the cvssv3 of this VulnerabilityOccurrence.


        :return: The cvssv3 of this VulnerabilityOccurrence.
        :rtype: CVSS
        """
        return self._cvssv3

    @cvssv3.setter
    def cvssv3(self, cvssv3):
        """Sets the cvssv3 of this VulnerabilityOccurrence.


        :param cvssv3: The cvssv3 of this VulnerabilityOccurrence.
        :type cvssv3: CVSS
        """

        self._cvssv3 = cvssv3

    @property
    def effective_severity(self):
        """Gets the effective_severity of this VulnerabilityOccurrence.

        The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.

        :return: The effective_severity of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this VulnerabilityOccurrence.

        The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.

        :param effective_severity: The effective_severity of this VulnerabilityOccurrence.
        :type effective_severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if effective_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_severity` ({0}), must be one of {1}"
                .format(effective_severity, allowed_values)
            )

        self._effective_severity = effective_severity

    @property
    def extra_details(self):
        """Gets the extra_details of this VulnerabilityOccurrence.

        Occurrence-specific extra details about the vulnerability.

        :return: The extra_details of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._extra_details

    @extra_details.setter
    def extra_details(self, extra_details):
        """Sets the extra_details of this VulnerabilityOccurrence.

        Occurrence-specific extra details about the vulnerability.

        :param extra_details: The extra_details of this VulnerabilityOccurrence.
        :type extra_details: str
        """

        self._extra_details = extra_details

    @property
    def fix_available(self):
        """Gets the fix_available of this VulnerabilityOccurrence.

        Output only. Whether at least one of the affected packages has a fix available.

        :return: The fix_available of this VulnerabilityOccurrence.
        :rtype: bool
        """
        return self._fix_available

    @fix_available.setter
    def fix_available(self, fix_available):
        """Sets the fix_available of this VulnerabilityOccurrence.

        Output only. Whether at least one of the affected packages has a fix available.

        :param fix_available: The fix_available of this VulnerabilityOccurrence.
        :type fix_available: bool
        """

        self._fix_available = fix_available

    @property
    def long_description(self):
        """Gets the long_description of this VulnerabilityOccurrence.

        Output only. A detailed description of this vulnerability.

        :return: The long_description of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this VulnerabilityOccurrence.

        Output only. A detailed description of this vulnerability.

        :param long_description: The long_description of this VulnerabilityOccurrence.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def package_issue(self):
        """Gets the package_issue of this VulnerabilityOccurrence.

        Required. The set of affected locations and their fixes (if available) within the associated resource.

        :return: The package_issue of this VulnerabilityOccurrence.
        :rtype: List[PackageIssue]
        """
        return self._package_issue

    @package_issue.setter
    def package_issue(self, package_issue):
        """Sets the package_issue of this VulnerabilityOccurrence.

        Required. The set of affected locations and their fixes (if available) within the associated resource.

        :param package_issue: The package_issue of this VulnerabilityOccurrence.
        :type package_issue: List[PackageIssue]
        """

        self._package_issue = package_issue

    @property
    def related_urls(self):
        """Gets the related_urls of this VulnerabilityOccurrence.

        Output only. URLs related to this vulnerability.

        :return: The related_urls of this VulnerabilityOccurrence.
        :rtype: List[RelatedUrl]
        """
        return self._related_urls

    @related_urls.setter
    def related_urls(self, related_urls):
        """Sets the related_urls of this VulnerabilityOccurrence.

        Output only. URLs related to this vulnerability.

        :param related_urls: The related_urls of this VulnerabilityOccurrence.
        :type related_urls: List[RelatedUrl]
        """

        self._related_urls = related_urls

    @property
    def severity(self):
        """Gets the severity of this VulnerabilityOccurrence.

        Output only. The note provider assigned severity of this vulnerability.

        :return: The severity of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this VulnerabilityOccurrence.

        Output only. The note provider assigned severity of this vulnerability.

        :param severity: The severity of this VulnerabilityOccurrence.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def short_description(self):
        """Gets the short_description of this VulnerabilityOccurrence.

        Output only. A one sentence description of this vulnerability.

        :return: The short_description of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this VulnerabilityOccurrence.

        Output only. A one sentence description of this vulnerability.

        :param short_description: The short_description of this VulnerabilityOccurrence.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def type(self):
        """Gets the type of this VulnerabilityOccurrence.

        The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :return: The type of this VulnerabilityOccurrence.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VulnerabilityOccurrence.

        The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).

        :param type: The type of this VulnerabilityOccurrence.
        :type type: str
        """

        self._type = type

    @property
    def vex_assessment(self):
        """Gets the vex_assessment of this VulnerabilityOccurrence.


        :return: The vex_assessment of this VulnerabilityOccurrence.
        :rtype: VexAssessment
        """
        return self._vex_assessment

    @vex_assessment.setter
    def vex_assessment(self, vex_assessment):
        """Sets the vex_assessment of this VulnerabilityOccurrence.


        :param vex_assessment: The vex_assessment of this VulnerabilityOccurrence.
        :type vex_assessment: VexAssessment
        """

        self._vex_assessment = vex_assessment
