/*
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PackageData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:36.182229-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzePackagesRequestV1 {
  public static final String SERIALIZED_NAME_INCLUDE_OSV_DATA = "includeOsvData";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INCLUDE_OSV_DATA)
  private Boolean includeOsvData;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<PackageData> packages = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_URI = "resourceUri";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URI)
  private String resourceUri;

  public AnalyzePackagesRequestV1() {
  }

  @Deprecated
  public AnalyzePackagesRequestV1 includeOsvData(Boolean includeOsvData) {
    this.includeOsvData = includeOsvData;
    return this;
  }

  /**
   * [DEPRECATED] Whether to include OSV data in the scan. For backwards compatibility reasons, this field can be neither removed nor renamed.
   * @return includeOsvData
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getIncludeOsvData() {
    return includeOsvData;
  }

  @Deprecated
  public void setIncludeOsvData(Boolean includeOsvData) {
    this.includeOsvData = includeOsvData;
  }


  public AnalyzePackagesRequestV1 packages(List<PackageData> packages) {
    this.packages = packages;
    return this;
  }

  public AnalyzePackagesRequestV1 addPackagesItem(PackageData packagesItem) {
    if (this.packages == null) {
      this.packages = new ArrayList<>();
    }
    this.packages.add(packagesItem);
    return this;
  }

  /**
   * The packages to analyze.
   * @return packages
   */
  @javax.annotation.Nullable
  public List<PackageData> getPackages() {
    return packages;
  }

  public void setPackages(List<PackageData> packages) {
    this.packages = packages;
  }


  public AnalyzePackagesRequestV1 resourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
    return this;
  }

  /**
   * Required. The resource URI of the container image being scanned.
   * @return resourceUri
   */
  @javax.annotation.Nullable
  public String getResourceUri() {
    return resourceUri;
  }

  public void setResourceUri(String resourceUri) {
    this.resourceUri = resourceUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzePackagesRequestV1 analyzePackagesRequestV1 = (AnalyzePackagesRequestV1) o;
    return Objects.equals(this.includeOsvData, analyzePackagesRequestV1.includeOsvData) &&
        Objects.equals(this.packages, analyzePackagesRequestV1.packages) &&
        Objects.equals(this.resourceUri, analyzePackagesRequestV1.resourceUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includeOsvData, packages, resourceUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzePackagesRequestV1 {\n");
    sb.append("    includeOsvData: ").append(toIndentedString(includeOsvData)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    resourceUri: ").append(toIndentedString(resourceUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includeOsvData");
    openapiFields.add("packages");
    openapiFields.add("resourceUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzePackagesRequestV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzePackagesRequestV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzePackagesRequestV1 is not found in the empty JSON string", AnalyzePackagesRequestV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzePackagesRequestV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzePackagesRequestV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            PackageData.validateJsonElement(jsonArraypackages.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceUri") != null && !jsonObj.get("resourceUri").isJsonNull()) && !jsonObj.get("resourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzePackagesRequestV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzePackagesRequestV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzePackagesRequestV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzePackagesRequestV1.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzePackagesRequestV1>() {
           @Override
           public void write(JsonWriter out, AnalyzePackagesRequestV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzePackagesRequestV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzePackagesRequestV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzePackagesRequestV1
   * @throws IOException if the JSON string is invalid with respect to AnalyzePackagesRequestV1
   */
  public static AnalyzePackagesRequestV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzePackagesRequestV1.class);
  }

  /**
   * Convert an instance of AnalyzePackagesRequestV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

