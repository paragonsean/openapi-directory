/*
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies the event that kicked off the build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:36.182229-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
  public static final String SERIALIZED_NAME_CONFIG_SOURCE = "configSource";
  @SerializedName(SERIALIZED_NAME_CONFIG_SOURCE)
  private GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource configSource;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private Map<String, Object> environment = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, Object> parameters = new HashMap<>();

  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation() {
  }

  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation configSource(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource configSource) {
    this.configSource = configSource;
    return this;
  }

  /**
   * Get configSource
   * @return configSource
   */
  @javax.annotation.Nullable
  public GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource getConfigSource() {
    return configSource;
  }

  public void setConfigSource(GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource configSource) {
    this.configSource = configSource;
  }


  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation environment(Map<String, Object> environment) {
    this.environment = environment;
    return this;
  }

  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation putEnvironmentItem(String key, Object environmentItem) {
    if (this.environment == null) {
      this.environment = new HashMap<>();
    }
    this.environment.put(key, environmentItem);
    return this;
  }

  /**
   * Get environment
   * @return environment
   */
  @javax.annotation.Nullable
  public Map<String, Object> getEnvironment() {
    return environment;
  }

  public void setEnvironment(Map<String, Object> environment) {
    this.environment = environment;
  }


  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation parameters(Map<String, Object> parameters) {
    this.parameters = parameters;
    return this;
  }

  public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation putParametersItem(String key, Object parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, Object> parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation grafeasV1SlsaProvenanceZeroTwoSlsaInvocation = (GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation) o;
    return Objects.equals(this.configSource, grafeasV1SlsaProvenanceZeroTwoSlsaInvocation.configSource) &&
        Objects.equals(this.environment, grafeasV1SlsaProvenanceZeroTwoSlsaInvocation.environment) &&
        Objects.equals(this.parameters, grafeasV1SlsaProvenanceZeroTwoSlsaInvocation.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configSource, environment, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {\n");
    sb.append("    configSource: ").append(toIndentedString(configSource)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configSource");
    openapiFields.add("environment");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation is not found in the empty JSON string", GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configSource`
      if (jsonObj.get("configSource") != null && !jsonObj.get("configSource").isJsonNull()) {
        GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource.validateJsonElement(jsonObj.get("configSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.class));

       return (TypeAdapter<T>) new TypeAdapter<GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation>() {
           @Override
           public void write(JsonWriter out, GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
   * @throws IOException if the JSON string is invalid with respect to GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
   */
  public static GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation.class);
  }

  /**
   * Convert an instance of GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

