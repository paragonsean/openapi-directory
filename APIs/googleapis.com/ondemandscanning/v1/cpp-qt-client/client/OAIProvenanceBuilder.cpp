/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvenanceBuilder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvenanceBuilder::OAIProvenanceBuilder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvenanceBuilder::OAIProvenanceBuilder() {
    this->initializeModel();
}

OAIProvenanceBuilder::~OAIProvenanceBuilder() {}

void OAIProvenanceBuilder::initializeModel() {

    m_builder_dependencies_isSet = false;
    m_builder_dependencies_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIProvenanceBuilder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvenanceBuilder::fromJsonObject(QJsonObject json) {

    m_builder_dependencies_isValid = ::OpenAPI::fromJsonValue(m_builder_dependencies, json[QString("builderDependencies")]);
    m_builder_dependencies_isSet = !json[QString("builderDependencies")].isNull() && m_builder_dependencies_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIProvenanceBuilder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvenanceBuilder::asJsonObject() const {
    QJsonObject obj;
    if (m_builder_dependencies.size() > 0) {
        obj.insert(QString("builderDependencies"), ::OpenAPI::toJsonValue(m_builder_dependencies));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_version.size() > 0) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIResourceDescriptor> OAIProvenanceBuilder::getBuilderDependencies() const {
    return m_builder_dependencies;
}
void OAIProvenanceBuilder::setBuilderDependencies(const QList<OAIResourceDescriptor> &builder_dependencies) {
    m_builder_dependencies = builder_dependencies;
    m_builder_dependencies_isSet = true;
}

bool OAIProvenanceBuilder::is_builder_dependencies_Set() const{
    return m_builder_dependencies_isSet;
}

bool OAIProvenanceBuilder::is_builder_dependencies_Valid() const{
    return m_builder_dependencies_isValid;
}

QString OAIProvenanceBuilder::getId() const {
    return m_id;
}
void OAIProvenanceBuilder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProvenanceBuilder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProvenanceBuilder::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAIProvenanceBuilder::getVersion() const {
    return m_version;
}
void OAIProvenanceBuilder::setVersion(const QMap<QString, QString> &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIProvenanceBuilder::is_version_Set() const{
    return m_version_isSet;
}

bool OAIProvenanceBuilder::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIProvenanceBuilder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvenanceBuilder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
