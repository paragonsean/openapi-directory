/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlsaProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlsaProvenance::OAISlsaProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlsaProvenance::OAISlsaProvenance() {
    this->initializeModel();
}

OAISlsaProvenance::~OAISlsaProvenance() {}

void OAISlsaProvenance::initializeModel() {

    m_builder_isSet = false;
    m_builder_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recipe_isSet = false;
    m_recipe_isValid = false;
}

void OAISlsaProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlsaProvenance::fromJsonObject(QJsonObject json) {

    m_builder_isValid = ::OpenAPI::fromJsonValue(m_builder, json[QString("builder")]);
    m_builder_isSet = !json[QString("builder")].isNull() && m_builder_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recipe_isValid = ::OpenAPI::fromJsonValue(m_recipe, json[QString("recipe")]);
    m_recipe_isSet = !json[QString("recipe")].isNull() && m_recipe_isValid;
}

QString OAISlsaProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlsaProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_builder.isSet()) {
        obj.insert(QString("builder"), ::OpenAPI::toJsonValue(m_builder));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recipe.isSet()) {
        obj.insert(QString("recipe"), ::OpenAPI::toJsonValue(m_recipe));
    }
    return obj;
}

OAISlsaBuilder OAISlsaProvenance::getBuilder() const {
    return m_builder;
}
void OAISlsaProvenance::setBuilder(const OAISlsaBuilder &builder) {
    m_builder = builder;
    m_builder_isSet = true;
}

bool OAISlsaProvenance::is_builder_Set() const{
    return m_builder_isSet;
}

bool OAISlsaProvenance::is_builder_Valid() const{
    return m_builder_isValid;
}

QList<OAIMaterial> OAISlsaProvenance::getMaterials() const {
    return m_materials;
}
void OAISlsaProvenance::setMaterials(const QList<OAIMaterial> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAISlsaProvenance::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAISlsaProvenance::is_materials_Valid() const{
    return m_materials_isValid;
}

OAISlsaMetadata OAISlsaProvenance::getMetadata() const {
    return m_metadata;
}
void OAISlsaProvenance::setMetadata(const OAISlsaMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISlsaProvenance::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISlsaProvenance::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAISlsaRecipe OAISlsaProvenance::getRecipe() const {
    return m_recipe;
}
void OAISlsaProvenance::setRecipe(const OAISlsaRecipe &recipe) {
    m_recipe = recipe;
    m_recipe_isSet = true;
}

bool OAISlsaProvenance::is_recipe_Set() const{
    return m_recipe_isSet;
}

bool OAISlsaProvenance::is_recipe_Valid() const{
    return m_recipe_isValid;
}

bool OAISlsaProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_builder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipe.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlsaProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
