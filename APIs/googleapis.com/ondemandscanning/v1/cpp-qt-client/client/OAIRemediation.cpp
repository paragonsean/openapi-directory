/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemediation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemediation::OAIRemediation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemediation::OAIRemediation() {
    this->initializeModel();
}

OAIRemediation::~OAIRemediation() {}

void OAIRemediation::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_remediation_type_isSet = false;
    m_remediation_type_isValid = false;

    m_remediation_uri_isSet = false;
    m_remediation_uri_isValid = false;
}

void OAIRemediation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemediation::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_remediation_type_isValid = ::OpenAPI::fromJsonValue(m_remediation_type, json[QString("remediationType")]);
    m_remediation_type_isSet = !json[QString("remediationType")].isNull() && m_remediation_type_isValid;

    m_remediation_uri_isValid = ::OpenAPI::fromJsonValue(m_remediation_uri, json[QString("remediationUri")]);
    m_remediation_uri_isSet = !json[QString("remediationUri")].isNull() && m_remediation_uri_isValid;
}

QString OAIRemediation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemediation::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_remediation_type_isSet) {
        obj.insert(QString("remediationType"), ::OpenAPI::toJsonValue(m_remediation_type));
    }
    if (m_remediation_uri.isSet()) {
        obj.insert(QString("remediationUri"), ::OpenAPI::toJsonValue(m_remediation_uri));
    }
    return obj;
}

QString OAIRemediation::getDetails() const {
    return m_details;
}
void OAIRemediation::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRemediation::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRemediation::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIRemediation::getRemediationType() const {
    return m_remediation_type;
}
void OAIRemediation::setRemediationType(const QString &remediation_type) {
    m_remediation_type = remediation_type;
    m_remediation_type_isSet = true;
}

bool OAIRemediation::is_remediation_type_Set() const{
    return m_remediation_type_isSet;
}

bool OAIRemediation::is_remediation_type_Valid() const{
    return m_remediation_type_isValid;
}

OAIRelatedUrl OAIRemediation::getRemediationUri() const {
    return m_remediation_uri;
}
void OAIRemediation::setRemediationUri(const OAIRelatedUrl &remediation_uri) {
    m_remediation_uri = remediation_uri;
    m_remediation_uri_isSet = true;
}

bool OAIRemediation::is_remediation_uri_Set() const{
    return m_remediation_uri_isSet;
}

bool OAIRemediation::is_remediation_uri_Valid() const{
    return m_remediation_uri_isValid;
}

bool OAIRemediation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemediation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
