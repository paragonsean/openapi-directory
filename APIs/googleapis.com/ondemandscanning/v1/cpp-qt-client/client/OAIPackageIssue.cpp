/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageIssue::OAIPackageIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageIssue::OAIPackageIssue() {
    this->initializeModel();
}

OAIPackageIssue::~OAIPackageIssue() {}

void OAIPackageIssue::initializeModel() {

    m_affected_cpe_uri_isSet = false;
    m_affected_cpe_uri_isValid = false;

    m_affected_package_isSet = false;
    m_affected_package_isValid = false;

    m_affected_version_isSet = false;
    m_affected_version_isValid = false;

    m_effective_severity_isSet = false;
    m_effective_severity_isValid = false;

    m_file_location_isSet = false;
    m_file_location_isValid = false;

    m_fix_available_isSet = false;
    m_fix_available_isValid = false;

    m_fixed_cpe_uri_isSet = false;
    m_fixed_cpe_uri_isValid = false;

    m_fixed_package_isSet = false;
    m_fixed_package_isValid = false;

    m_fixed_version_isSet = false;
    m_fixed_version_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;
}

void OAIPackageIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageIssue::fromJsonObject(QJsonObject json) {

    m_affected_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_affected_cpe_uri, json[QString("affectedCpeUri")]);
    m_affected_cpe_uri_isSet = !json[QString("affectedCpeUri")].isNull() && m_affected_cpe_uri_isValid;

    m_affected_package_isValid = ::OpenAPI::fromJsonValue(m_affected_package, json[QString("affectedPackage")]);
    m_affected_package_isSet = !json[QString("affectedPackage")].isNull() && m_affected_package_isValid;

    m_affected_version_isValid = ::OpenAPI::fromJsonValue(m_affected_version, json[QString("affectedVersion")]);
    m_affected_version_isSet = !json[QString("affectedVersion")].isNull() && m_affected_version_isValid;

    m_effective_severity_isValid = ::OpenAPI::fromJsonValue(m_effective_severity, json[QString("effectiveSeverity")]);
    m_effective_severity_isSet = !json[QString("effectiveSeverity")].isNull() && m_effective_severity_isValid;

    m_file_location_isValid = ::OpenAPI::fromJsonValue(m_file_location, json[QString("fileLocation")]);
    m_file_location_isSet = !json[QString("fileLocation")].isNull() && m_file_location_isValid;

    m_fix_available_isValid = ::OpenAPI::fromJsonValue(m_fix_available, json[QString("fixAvailable")]);
    m_fix_available_isSet = !json[QString("fixAvailable")].isNull() && m_fix_available_isValid;

    m_fixed_cpe_uri_isValid = ::OpenAPI::fromJsonValue(m_fixed_cpe_uri, json[QString("fixedCpeUri")]);
    m_fixed_cpe_uri_isSet = !json[QString("fixedCpeUri")].isNull() && m_fixed_cpe_uri_isValid;

    m_fixed_package_isValid = ::OpenAPI::fromJsonValue(m_fixed_package, json[QString("fixedPackage")]);
    m_fixed_package_isSet = !json[QString("fixedPackage")].isNull() && m_fixed_package_isValid;

    m_fixed_version_isValid = ::OpenAPI::fromJsonValue(m_fixed_version, json[QString("fixedVersion")]);
    m_fixed_version_isSet = !json[QString("fixedVersion")].isNull() && m_fixed_version_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;
}

QString OAIPackageIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_cpe_uri_isSet) {
        obj.insert(QString("affectedCpeUri"), ::OpenAPI::toJsonValue(m_affected_cpe_uri));
    }
    if (m_affected_package_isSet) {
        obj.insert(QString("affectedPackage"), ::OpenAPI::toJsonValue(m_affected_package));
    }
    if (m_affected_version.isSet()) {
        obj.insert(QString("affectedVersion"), ::OpenAPI::toJsonValue(m_affected_version));
    }
    if (m_effective_severity_isSet) {
        obj.insert(QString("effectiveSeverity"), ::OpenAPI::toJsonValue(m_effective_severity));
    }
    if (m_file_location.size() > 0) {
        obj.insert(QString("fileLocation"), ::OpenAPI::toJsonValue(m_file_location));
    }
    if (m_fix_available_isSet) {
        obj.insert(QString("fixAvailable"), ::OpenAPI::toJsonValue(m_fix_available));
    }
    if (m_fixed_cpe_uri_isSet) {
        obj.insert(QString("fixedCpeUri"), ::OpenAPI::toJsonValue(m_fixed_cpe_uri));
    }
    if (m_fixed_package_isSet) {
        obj.insert(QString("fixedPackage"), ::OpenAPI::toJsonValue(m_fixed_package));
    }
    if (m_fixed_version.isSet()) {
        obj.insert(QString("fixedVersion"), ::OpenAPI::toJsonValue(m_fixed_version));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    return obj;
}

QString OAIPackageIssue::getAffectedCpeUri() const {
    return m_affected_cpe_uri;
}
void OAIPackageIssue::setAffectedCpeUri(const QString &affected_cpe_uri) {
    m_affected_cpe_uri = affected_cpe_uri;
    m_affected_cpe_uri_isSet = true;
}

bool OAIPackageIssue::is_affected_cpe_uri_Set() const{
    return m_affected_cpe_uri_isSet;
}

bool OAIPackageIssue::is_affected_cpe_uri_Valid() const{
    return m_affected_cpe_uri_isValid;
}

QString OAIPackageIssue::getAffectedPackage() const {
    return m_affected_package;
}
void OAIPackageIssue::setAffectedPackage(const QString &affected_package) {
    m_affected_package = affected_package;
    m_affected_package_isSet = true;
}

bool OAIPackageIssue::is_affected_package_Set() const{
    return m_affected_package_isSet;
}

bool OAIPackageIssue::is_affected_package_Valid() const{
    return m_affected_package_isValid;
}

OAIVersion OAIPackageIssue::getAffectedVersion() const {
    return m_affected_version;
}
void OAIPackageIssue::setAffectedVersion(const OAIVersion &affected_version) {
    m_affected_version = affected_version;
    m_affected_version_isSet = true;
}

bool OAIPackageIssue::is_affected_version_Set() const{
    return m_affected_version_isSet;
}

bool OAIPackageIssue::is_affected_version_Valid() const{
    return m_affected_version_isValid;
}

QString OAIPackageIssue::getEffectiveSeverity() const {
    return m_effective_severity;
}
void OAIPackageIssue::setEffectiveSeverity(const QString &effective_severity) {
    m_effective_severity = effective_severity;
    m_effective_severity_isSet = true;
}

bool OAIPackageIssue::is_effective_severity_Set() const{
    return m_effective_severity_isSet;
}

bool OAIPackageIssue::is_effective_severity_Valid() const{
    return m_effective_severity_isValid;
}

QList<OAIGrafeasV1FileLocation> OAIPackageIssue::getFileLocation() const {
    return m_file_location;
}
void OAIPackageIssue::setFileLocation(const QList<OAIGrafeasV1FileLocation> &file_location) {
    m_file_location = file_location;
    m_file_location_isSet = true;
}

bool OAIPackageIssue::is_file_location_Set() const{
    return m_file_location_isSet;
}

bool OAIPackageIssue::is_file_location_Valid() const{
    return m_file_location_isValid;
}

bool OAIPackageIssue::isFixAvailable() const {
    return m_fix_available;
}
void OAIPackageIssue::setFixAvailable(const bool &fix_available) {
    m_fix_available = fix_available;
    m_fix_available_isSet = true;
}

bool OAIPackageIssue::is_fix_available_Set() const{
    return m_fix_available_isSet;
}

bool OAIPackageIssue::is_fix_available_Valid() const{
    return m_fix_available_isValid;
}

QString OAIPackageIssue::getFixedCpeUri() const {
    return m_fixed_cpe_uri;
}
void OAIPackageIssue::setFixedCpeUri(const QString &fixed_cpe_uri) {
    m_fixed_cpe_uri = fixed_cpe_uri;
    m_fixed_cpe_uri_isSet = true;
}

bool OAIPackageIssue::is_fixed_cpe_uri_Set() const{
    return m_fixed_cpe_uri_isSet;
}

bool OAIPackageIssue::is_fixed_cpe_uri_Valid() const{
    return m_fixed_cpe_uri_isValid;
}

QString OAIPackageIssue::getFixedPackage() const {
    return m_fixed_package;
}
void OAIPackageIssue::setFixedPackage(const QString &fixed_package) {
    m_fixed_package = fixed_package;
    m_fixed_package_isSet = true;
}

bool OAIPackageIssue::is_fixed_package_Set() const{
    return m_fixed_package_isSet;
}

bool OAIPackageIssue::is_fixed_package_Valid() const{
    return m_fixed_package_isValid;
}

OAIVersion OAIPackageIssue::getFixedVersion() const {
    return m_fixed_version;
}
void OAIPackageIssue::setFixedVersion(const OAIVersion &fixed_version) {
    m_fixed_version = fixed_version;
    m_fixed_version_isSet = true;
}

bool OAIPackageIssue::is_fixed_version_Set() const{
    return m_fixed_version_isSet;
}

bool OAIPackageIssue::is_fixed_version_Valid() const{
    return m_fixed_version_isValid;
}

QString OAIPackageIssue::getPackageType() const {
    return m_package_type;
}
void OAIPackageIssue::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageIssue::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageIssue::is_package_type_Valid() const{
    return m_package_type_isValid;
}

bool OAIPackageIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_location.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_cpe_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
