/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildProvenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildProvenance::OAIBuildProvenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildProvenance::OAIBuildProvenance() {
    this->initializeModel();
}

OAIBuildProvenance::~OAIBuildProvenance() {}

void OAIBuildProvenance::initializeModel() {

    m_build_options_isSet = false;
    m_build_options_isValid = false;

    m_builder_version_isSet = false;
    m_builder_version_isValid = false;

    m_built_artifacts_isSet = false;
    m_built_artifacts_isValid = false;

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logs_uri_isSet = false;
    m_logs_uri_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_source_provenance_isSet = false;
    m_source_provenance_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_trigger_id_isSet = false;
    m_trigger_id_isValid = false;
}

void OAIBuildProvenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildProvenance::fromJsonObject(QJsonObject json) {

    m_build_options_isValid = ::OpenAPI::fromJsonValue(m_build_options, json[QString("buildOptions")]);
    m_build_options_isSet = !json[QString("buildOptions")].isNull() && m_build_options_isValid;

    m_builder_version_isValid = ::OpenAPI::fromJsonValue(m_builder_version, json[QString("builderVersion")]);
    m_builder_version_isSet = !json[QString("builderVersion")].isNull() && m_builder_version_isValid;

    m_built_artifacts_isValid = ::OpenAPI::fromJsonValue(m_built_artifacts, json[QString("builtArtifacts")]);
    m_built_artifacts_isSet = !json[QString("builtArtifacts")].isNull() && m_built_artifacts_isValid;

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logs_uri_isValid = ::OpenAPI::fromJsonValue(m_logs_uri, json[QString("logsUri")]);
    m_logs_uri_isSet = !json[QString("logsUri")].isNull() && m_logs_uri_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_source_provenance_isValid = ::OpenAPI::fromJsonValue(m_source_provenance, json[QString("sourceProvenance")]);
    m_source_provenance_isSet = !json[QString("sourceProvenance")].isNull() && m_source_provenance_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_trigger_id, json[QString("triggerId")]);
    m_trigger_id_isSet = !json[QString("triggerId")].isNull() && m_trigger_id_isValid;
}

QString OAIBuildProvenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildProvenance::asJsonObject() const {
    QJsonObject obj;
    if (m_build_options.size() > 0) {
        obj.insert(QString("buildOptions"), ::OpenAPI::toJsonValue(m_build_options));
    }
    if (m_builder_version_isSet) {
        obj.insert(QString("builderVersion"), ::OpenAPI::toJsonValue(m_builder_version));
    }
    if (m_built_artifacts.size() > 0) {
        obj.insert(QString("builtArtifacts"), ::OpenAPI::toJsonValue(m_built_artifacts));
    }
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logs_uri_isSet) {
        obj.insert(QString("logsUri"), ::OpenAPI::toJsonValue(m_logs_uri));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_source_provenance.isSet()) {
        obj.insert(QString("sourceProvenance"), ::OpenAPI::toJsonValue(m_source_provenance));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_trigger_id_isSet) {
        obj.insert(QString("triggerId"), ::OpenAPI::toJsonValue(m_trigger_id));
    }
    return obj;
}

QMap<QString, QString> OAIBuildProvenance::getBuildOptions() const {
    return m_build_options;
}
void OAIBuildProvenance::setBuildOptions(const QMap<QString, QString> &build_options) {
    m_build_options = build_options;
    m_build_options_isSet = true;
}

bool OAIBuildProvenance::is_build_options_Set() const{
    return m_build_options_isSet;
}

bool OAIBuildProvenance::is_build_options_Valid() const{
    return m_build_options_isValid;
}

QString OAIBuildProvenance::getBuilderVersion() const {
    return m_builder_version;
}
void OAIBuildProvenance::setBuilderVersion(const QString &builder_version) {
    m_builder_version = builder_version;
    m_builder_version_isSet = true;
}

bool OAIBuildProvenance::is_builder_version_Set() const{
    return m_builder_version_isSet;
}

bool OAIBuildProvenance::is_builder_version_Valid() const{
    return m_builder_version_isValid;
}

QList<OAIArtifact> OAIBuildProvenance::getBuiltArtifacts() const {
    return m_built_artifacts;
}
void OAIBuildProvenance::setBuiltArtifacts(const QList<OAIArtifact> &built_artifacts) {
    m_built_artifacts = built_artifacts;
    m_built_artifacts_isSet = true;
}

bool OAIBuildProvenance::is_built_artifacts_Set() const{
    return m_built_artifacts_isSet;
}

bool OAIBuildProvenance::is_built_artifacts_Valid() const{
    return m_built_artifacts_isValid;
}

QList<OAICommand> OAIBuildProvenance::getCommands() const {
    return m_commands;
}
void OAIBuildProvenance::setCommands(const QList<OAICommand> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIBuildProvenance::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIBuildProvenance::is_commands_Valid() const{
    return m_commands_isValid;
}

QString OAIBuildProvenance::getCreateTime() const {
    return m_create_time;
}
void OAIBuildProvenance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBuildProvenance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBuildProvenance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBuildProvenance::getCreator() const {
    return m_creator;
}
void OAIBuildProvenance::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIBuildProvenance::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIBuildProvenance::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIBuildProvenance::getEndTime() const {
    return m_end_time;
}
void OAIBuildProvenance::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBuildProvenance::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBuildProvenance::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIBuildProvenance::getId() const {
    return m_id;
}
void OAIBuildProvenance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuildProvenance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuildProvenance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBuildProvenance::getLogsUri() const {
    return m_logs_uri;
}
void OAIBuildProvenance::setLogsUri(const QString &logs_uri) {
    m_logs_uri = logs_uri;
    m_logs_uri_isSet = true;
}

bool OAIBuildProvenance::is_logs_uri_Set() const{
    return m_logs_uri_isSet;
}

bool OAIBuildProvenance::is_logs_uri_Valid() const{
    return m_logs_uri_isValid;
}

QString OAIBuildProvenance::getProjectId() const {
    return m_project_id;
}
void OAIBuildProvenance::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIBuildProvenance::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIBuildProvenance::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAISource OAIBuildProvenance::getSourceProvenance() const {
    return m_source_provenance;
}
void OAIBuildProvenance::setSourceProvenance(const OAISource &source_provenance) {
    m_source_provenance = source_provenance;
    m_source_provenance_isSet = true;
}

bool OAIBuildProvenance::is_source_provenance_Set() const{
    return m_source_provenance_isSet;
}

bool OAIBuildProvenance::is_source_provenance_Valid() const{
    return m_source_provenance_isValid;
}

QString OAIBuildProvenance::getStartTime() const {
    return m_start_time;
}
void OAIBuildProvenance::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuildProvenance::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuildProvenance::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBuildProvenance::getTriggerId() const {
    return m_trigger_id;
}
void OAIBuildProvenance::setTriggerId(const QString &trigger_id) {
    m_trigger_id = trigger_id;
    m_trigger_id_isSet = true;
}

bool OAIBuildProvenance::is_trigger_id_Set() const{
    return m_trigger_id_isSet;
}

bool OAIBuildProvenance::is_trigger_id_Valid() const{
    return m_trigger_id_isValid;
}

bool OAIBuildProvenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_builder_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_built_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildProvenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
