/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildMetadata::OAIBuildMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildMetadata::OAIBuildMetadata() {
    this->initializeModel();
}

OAIBuildMetadata::~OAIBuildMetadata() {}

void OAIBuildMetadata::initializeModel() {

    m_finished_on_isSet = false;
    m_finished_on_isValid = false;

    m_invocation_id_isSet = false;
    m_invocation_id_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;
}

void OAIBuildMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildMetadata::fromJsonObject(QJsonObject json) {

    m_finished_on_isValid = ::OpenAPI::fromJsonValue(m_finished_on, json[QString("finishedOn")]);
    m_finished_on_isSet = !json[QString("finishedOn")].isNull() && m_finished_on_isValid;

    m_invocation_id_isValid = ::OpenAPI::fromJsonValue(m_invocation_id, json[QString("invocationId")]);
    m_invocation_id_isSet = !json[QString("invocationId")].isNull() && m_invocation_id_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("startedOn")]);
    m_started_on_isSet = !json[QString("startedOn")].isNull() && m_started_on_isValid;
}

QString OAIBuildMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_on_isSet) {
        obj.insert(QString("finishedOn"), ::OpenAPI::toJsonValue(m_finished_on));
    }
    if (m_invocation_id_isSet) {
        obj.insert(QString("invocationId"), ::OpenAPI::toJsonValue(m_invocation_id));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("startedOn"), ::OpenAPI::toJsonValue(m_started_on));
    }
    return obj;
}

QString OAIBuildMetadata::getFinishedOn() const {
    return m_finished_on;
}
void OAIBuildMetadata::setFinishedOn(const QString &finished_on) {
    m_finished_on = finished_on;
    m_finished_on_isSet = true;
}

bool OAIBuildMetadata::is_finished_on_Set() const{
    return m_finished_on_isSet;
}

bool OAIBuildMetadata::is_finished_on_Valid() const{
    return m_finished_on_isValid;
}

QString OAIBuildMetadata::getInvocationId() const {
    return m_invocation_id;
}
void OAIBuildMetadata::setInvocationId(const QString &invocation_id) {
    m_invocation_id = invocation_id;
    m_invocation_id_isSet = true;
}

bool OAIBuildMetadata::is_invocation_id_Set() const{
    return m_invocation_id_isSet;
}

bool OAIBuildMetadata::is_invocation_id_Valid() const{
    return m_invocation_id_isValid;
}

QString OAIBuildMetadata::getStartedOn() const {
    return m_started_on;
}
void OAIBuildMetadata::setStartedOn(const QString &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIBuildMetadata::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIBuildMetadata::is_started_on_Valid() const{
    return m_started_on_isValid;
}

bool OAIBuildMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invocation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
