/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDSSEAttestationOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDSSEAttestationOccurrence::OAIDSSEAttestationOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDSSEAttestationOccurrence::OAIDSSEAttestationOccurrence() {
    this->initializeModel();
}

OAIDSSEAttestationOccurrence::~OAIDSSEAttestationOccurrence() {}

void OAIDSSEAttestationOccurrence::initializeModel() {

    m_envelope_isSet = false;
    m_envelope_isValid = false;

    m_statement_isSet = false;
    m_statement_isValid = false;
}

void OAIDSSEAttestationOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDSSEAttestationOccurrence::fromJsonObject(QJsonObject json) {

    m_envelope_isValid = ::OpenAPI::fromJsonValue(m_envelope, json[QString("envelope")]);
    m_envelope_isSet = !json[QString("envelope")].isNull() && m_envelope_isValid;

    m_statement_isValid = ::OpenAPI::fromJsonValue(m_statement, json[QString("statement")]);
    m_statement_isSet = !json[QString("statement")].isNull() && m_statement_isValid;
}

QString OAIDSSEAttestationOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDSSEAttestationOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_envelope.isSet()) {
        obj.insert(QString("envelope"), ::OpenAPI::toJsonValue(m_envelope));
    }
    if (m_statement.isSet()) {
        obj.insert(QString("statement"), ::OpenAPI::toJsonValue(m_statement));
    }
    return obj;
}

OAIEnvelope OAIDSSEAttestationOccurrence::getEnvelope() const {
    return m_envelope;
}
void OAIDSSEAttestationOccurrence::setEnvelope(const OAIEnvelope &envelope) {
    m_envelope = envelope;
    m_envelope_isSet = true;
}

bool OAIDSSEAttestationOccurrence::is_envelope_Set() const{
    return m_envelope_isSet;
}

bool OAIDSSEAttestationOccurrence::is_envelope_Valid() const{
    return m_envelope_isValid;
}

OAIInTotoStatement OAIDSSEAttestationOccurrence::getStatement() const {
    return m_statement;
}
void OAIDSSEAttestationOccurrence::setStatement(const OAIInTotoStatement &statement) {
    m_statement = statement;
    m_statement_isSet = true;
}

bool OAIDSSEAttestationOccurrence::is_statement_Set() const{
    return m_statement_isSet;
}

bool OAIDSSEAttestationOccurrence::is_statement_Valid() const{
    return m_statement_isValid;
}

bool OAIDSSEAttestationOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_envelope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDSSEAttestationOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
