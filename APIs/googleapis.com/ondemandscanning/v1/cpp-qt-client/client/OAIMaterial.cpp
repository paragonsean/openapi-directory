/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaterial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaterial::OAIMaterial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaterial::OAIMaterial() {
    this->initializeModel();
}

OAIMaterial::~OAIMaterial() {}

void OAIMaterial::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIMaterial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaterial::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIMaterial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaterial::asJsonObject() const {
    QJsonObject obj;
    if (m_digest.size() > 0) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QMap<QString, QString> OAIMaterial::getDigest() const {
    return m_digest;
}
void OAIMaterial::setDigest(const QMap<QString, QString> &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIMaterial::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIMaterial::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIMaterial::getUri() const {
    return m_uri;
}
void OAIMaterial::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIMaterial::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIMaterial::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIMaterial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaterial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
