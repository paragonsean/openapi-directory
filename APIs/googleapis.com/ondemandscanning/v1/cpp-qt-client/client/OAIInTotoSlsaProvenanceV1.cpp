/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInTotoSlsaProvenanceV1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInTotoSlsaProvenanceV1::OAIInTotoSlsaProvenanceV1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInTotoSlsaProvenanceV1::OAIInTotoSlsaProvenanceV1() {
    this->initializeModel();
}

OAIInTotoSlsaProvenanceV1::~OAIInTotoSlsaProvenanceV1() {}

void OAIInTotoSlsaProvenanceV1::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_predicate_isSet = false;
    m_predicate_isValid = false;

    m_predicate_type_isSet = false;
    m_predicate_type_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIInTotoSlsaProvenanceV1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInTotoSlsaProvenanceV1::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_predicate_isValid = ::OpenAPI::fromJsonValue(m_predicate, json[QString("predicate")]);
    m_predicate_isSet = !json[QString("predicate")].isNull() && m_predicate_isValid;

    m_predicate_type_isValid = ::OpenAPI::fromJsonValue(m_predicate_type, json[QString("predicateType")]);
    m_predicate_type_isSet = !json[QString("predicateType")].isNull() && m_predicate_type_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIInTotoSlsaProvenanceV1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInTotoSlsaProvenanceV1::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_predicate.isSet()) {
        obj.insert(QString("predicate"), ::OpenAPI::toJsonValue(m_predicate));
    }
    if (m_predicate_type_isSet) {
        obj.insert(QString("predicateType"), ::OpenAPI::toJsonValue(m_predicate_type));
    }
    if (m_subject.size() > 0) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIInTotoSlsaProvenanceV1::getType() const {
    return m__type;
}
void OAIInTotoSlsaProvenanceV1::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIInTotoSlsaProvenanceV1::is__type_Set() const{
    return m__type_isSet;
}

bool OAIInTotoSlsaProvenanceV1::is__type_Valid() const{
    return m__type_isValid;
}

OAISlsaProvenanceV1 OAIInTotoSlsaProvenanceV1::getPredicate() const {
    return m_predicate;
}
void OAIInTotoSlsaProvenanceV1::setPredicate(const OAISlsaProvenanceV1 &predicate) {
    m_predicate = predicate;
    m_predicate_isSet = true;
}

bool OAIInTotoSlsaProvenanceV1::is_predicate_Set() const{
    return m_predicate_isSet;
}

bool OAIInTotoSlsaProvenanceV1::is_predicate_Valid() const{
    return m_predicate_isValid;
}

QString OAIInTotoSlsaProvenanceV1::getPredicateType() const {
    return m_predicate_type;
}
void OAIInTotoSlsaProvenanceV1::setPredicateType(const QString &predicate_type) {
    m_predicate_type = predicate_type;
    m_predicate_type_isSet = true;
}

bool OAIInTotoSlsaProvenanceV1::is_predicate_type_Set() const{
    return m_predicate_type_isSet;
}

bool OAIInTotoSlsaProvenanceV1::is_predicate_type_Valid() const{
    return m_predicate_type_isValid;
}

QList<OAISubject> OAIInTotoSlsaProvenanceV1::getSubject() const {
    return m_subject;
}
void OAIInTotoSlsaProvenanceV1::setSubject(const QList<OAISubject> &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIInTotoSlsaProvenanceV1::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIInTotoSlsaProvenanceV1::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIInTotoSlsaProvenanceV1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInTotoSlsaProvenanceV1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
