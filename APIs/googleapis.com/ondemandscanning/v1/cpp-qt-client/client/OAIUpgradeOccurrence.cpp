/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeOccurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeOccurrence::OAIUpgradeOccurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeOccurrence::OAIUpgradeOccurrence() {
    this->initializeModel();
}

OAIUpgradeOccurrence::~OAIUpgradeOccurrence() {}

void OAIUpgradeOccurrence::initializeModel() {

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_package_isSet = false;
    m_package_isValid = false;

    m_parsed_version_isSet = false;
    m_parsed_version_isValid = false;

    m_windows_update_isSet = false;
    m_windows_update_isValid = false;
}

void OAIUpgradeOccurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeOccurrence::fromJsonObject(QJsonObject json) {

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_parsed_version_isValid = ::OpenAPI::fromJsonValue(m_parsed_version, json[QString("parsedVersion")]);
    m_parsed_version_isSet = !json[QString("parsedVersion")].isNull() && m_parsed_version_isValid;

    m_windows_update_isValid = ::OpenAPI::fromJsonValue(m_windows_update, json[QString("windowsUpdate")]);
    m_windows_update_isSet = !json[QString("windowsUpdate")].isNull() && m_windows_update_isValid;
}

QString OAIUpgradeOccurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeOccurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_distribution.isSet()) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_parsed_version.isSet()) {
        obj.insert(QString("parsedVersion"), ::OpenAPI::toJsonValue(m_parsed_version));
    }
    if (m_windows_update.isSet()) {
        obj.insert(QString("windowsUpdate"), ::OpenAPI::toJsonValue(m_windows_update));
    }
    return obj;
}

OAIUpgradeDistribution OAIUpgradeOccurrence::getDistribution() const {
    return m_distribution;
}
void OAIUpgradeOccurrence::setDistribution(const OAIUpgradeDistribution &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAIUpgradeOccurrence::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAIUpgradeOccurrence::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAIUpgradeOccurrence::getPackage() const {
    return m_package;
}
void OAIUpgradeOccurrence::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIUpgradeOccurrence::is_package_Set() const{
    return m_package_isSet;
}

bool OAIUpgradeOccurrence::is_package_Valid() const{
    return m_package_isValid;
}

OAIVersion OAIUpgradeOccurrence::getParsedVersion() const {
    return m_parsed_version;
}
void OAIUpgradeOccurrence::setParsedVersion(const OAIVersion &parsed_version) {
    m_parsed_version = parsed_version;
    m_parsed_version_isSet = true;
}

bool OAIUpgradeOccurrence::is_parsed_version_Set() const{
    return m_parsed_version_isSet;
}

bool OAIUpgradeOccurrence::is_parsed_version_Valid() const{
    return m_parsed_version_isValid;
}

OAIWindowsUpdate OAIUpgradeOccurrence::getWindowsUpdate() const {
    return m_windows_update;
}
void OAIUpgradeOccurrence::setWindowsUpdate(const OAIWindowsUpdate &windows_update) {
    m_windows_update = windows_update;
    m_windows_update_isSet = true;
}

bool OAIUpgradeOccurrence::is_windows_update_Set() const{
    return m_windows_update_isSet;
}

bool OAIUpgradeOccurrence::is_windows_update_Valid() const{
    return m_windows_update_isValid;
}

bool OAIUpgradeOccurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsed_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeOccurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
