/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInTotoStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInTotoStatement::OAIInTotoStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInTotoStatement::OAIInTotoStatement() {
    this->initializeModel();
}

OAIInTotoStatement::~OAIInTotoStatement() {}

void OAIInTotoStatement::initializeModel() {

    m__type_isSet = false;
    m__type_isValid = false;

    m_predicate_type_isSet = false;
    m_predicate_type_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_slsa_provenance_isSet = false;
    m_slsa_provenance_isValid = false;

    m_slsa_provenance_zero_two_isSet = false;
    m_slsa_provenance_zero_two_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIInTotoStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInTotoStatement::fromJsonObject(QJsonObject json) {

    m__type_isValid = ::OpenAPI::fromJsonValue(m__type, json[QString("_type")]);
    m__type_isSet = !json[QString("_type")].isNull() && m__type_isValid;

    m_predicate_type_isValid = ::OpenAPI::fromJsonValue(m_predicate_type, json[QString("predicateType")]);
    m_predicate_type_isSet = !json[QString("predicateType")].isNull() && m_predicate_type_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_slsa_provenance_isValid = ::OpenAPI::fromJsonValue(m_slsa_provenance, json[QString("slsaProvenance")]);
    m_slsa_provenance_isSet = !json[QString("slsaProvenance")].isNull() && m_slsa_provenance_isValid;

    m_slsa_provenance_zero_two_isValid = ::OpenAPI::fromJsonValue(m_slsa_provenance_zero_two, json[QString("slsaProvenanceZeroTwo")]);
    m_slsa_provenance_zero_two_isSet = !json[QString("slsaProvenanceZeroTwo")].isNull() && m_slsa_provenance_zero_two_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIInTotoStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInTotoStatement::asJsonObject() const {
    QJsonObject obj;
    if (m__type_isSet) {
        obj.insert(QString("_type"), ::OpenAPI::toJsonValue(m__type));
    }
    if (m_predicate_type_isSet) {
        obj.insert(QString("predicateType"), ::OpenAPI::toJsonValue(m_predicate_type));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_slsa_provenance.isSet()) {
        obj.insert(QString("slsaProvenance"), ::OpenAPI::toJsonValue(m_slsa_provenance));
    }
    if (m_slsa_provenance_zero_two.isSet()) {
        obj.insert(QString("slsaProvenanceZeroTwo"), ::OpenAPI::toJsonValue(m_slsa_provenance_zero_two));
    }
    if (m_subject.size() > 0) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIInTotoStatement::getType() const {
    return m__type;
}
void OAIInTotoStatement::setType(const QString &_type) {
    m__type = _type;
    m__type_isSet = true;
}

bool OAIInTotoStatement::is__type_Set() const{
    return m__type_isSet;
}

bool OAIInTotoStatement::is__type_Valid() const{
    return m__type_isValid;
}

QString OAIInTotoStatement::getPredicateType() const {
    return m_predicate_type;
}
void OAIInTotoStatement::setPredicateType(const QString &predicate_type) {
    m_predicate_type = predicate_type;
    m_predicate_type_isSet = true;
}

bool OAIInTotoStatement::is_predicate_type_Set() const{
    return m_predicate_type_isSet;
}

bool OAIInTotoStatement::is_predicate_type_Valid() const{
    return m_predicate_type_isValid;
}

OAIInTotoProvenance OAIInTotoStatement::getProvenance() const {
    return m_provenance;
}
void OAIInTotoStatement::setProvenance(const OAIInTotoProvenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIInTotoStatement::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIInTotoStatement::is_provenance_Valid() const{
    return m_provenance_isValid;
}

OAISlsaProvenance OAIInTotoStatement::getSlsaProvenance() const {
    return m_slsa_provenance;
}
void OAIInTotoStatement::setSlsaProvenance(const OAISlsaProvenance &slsa_provenance) {
    m_slsa_provenance = slsa_provenance;
    m_slsa_provenance_isSet = true;
}

bool OAIInTotoStatement::is_slsa_provenance_Set() const{
    return m_slsa_provenance_isSet;
}

bool OAIInTotoStatement::is_slsa_provenance_Valid() const{
    return m_slsa_provenance_isValid;
}

OAISlsaProvenanceZeroTwo OAIInTotoStatement::getSlsaProvenanceZeroTwo() const {
    return m_slsa_provenance_zero_two;
}
void OAIInTotoStatement::setSlsaProvenanceZeroTwo(const OAISlsaProvenanceZeroTwo &slsa_provenance_zero_two) {
    m_slsa_provenance_zero_two = slsa_provenance_zero_two;
    m_slsa_provenance_zero_two_isSet = true;
}

bool OAIInTotoStatement::is_slsa_provenance_zero_two_Set() const{
    return m_slsa_provenance_zero_two_isSet;
}

bool OAIInTotoStatement::is_slsa_provenance_zero_two_Valid() const{
    return m_slsa_provenance_zero_two_isValid;
}

QList<OAISubject> OAIInTotoStatement::getSubject() const {
    return m_subject;
}
void OAIInTotoStatement::setSubject(const QList<OAISubject> &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIInTotoStatement::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIInTotoStatement::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIInTotoStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slsa_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slsa_provenance_zero_two.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInTotoStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
