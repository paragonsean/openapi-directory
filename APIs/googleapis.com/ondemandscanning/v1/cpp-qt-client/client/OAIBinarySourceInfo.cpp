/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBinarySourceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBinarySourceInfo::OAIBinarySourceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBinarySourceInfo::OAIBinarySourceInfo() {
    this->initializeModel();
}

OAIBinarySourceInfo::~OAIBinarySourceInfo() {}

void OAIBinarySourceInfo::initializeModel() {

    m_binary_version_isSet = false;
    m_binary_version_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;
}

void OAIBinarySourceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBinarySourceInfo::fromJsonObject(QJsonObject json) {

    m_binary_version_isValid = ::OpenAPI::fromJsonValue(m_binary_version, json[QString("binaryVersion")]);
    m_binary_version_isSet = !json[QString("binaryVersion")].isNull() && m_binary_version_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;
}

QString OAIBinarySourceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBinarySourceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_version.isSet()) {
        obj.insert(QString("binaryVersion"), ::OpenAPI::toJsonValue(m_binary_version));
    }
    if (m_source_version.isSet()) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    return obj;
}

OAIPackageVersion OAIBinarySourceInfo::getBinaryVersion() const {
    return m_binary_version;
}
void OAIBinarySourceInfo::setBinaryVersion(const OAIPackageVersion &binary_version) {
    m_binary_version = binary_version;
    m_binary_version_isSet = true;
}

bool OAIBinarySourceInfo::is_binary_version_Set() const{
    return m_binary_version_isSet;
}

bool OAIBinarySourceInfo::is_binary_version_Valid() const{
    return m_binary_version_isValid;
}

OAIPackageVersion OAIBinarySourceInfo::getSourceVersion() const {
    return m_source_version;
}
void OAIBinarySourceInfo::setSourceVersion(const OAIPackageVersion &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIBinarySourceInfo::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIBinarySourceInfo::is_source_version_Valid() const{
    return m_source_version_isValid;
}

bool OAIBinarySourceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBinarySourceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
