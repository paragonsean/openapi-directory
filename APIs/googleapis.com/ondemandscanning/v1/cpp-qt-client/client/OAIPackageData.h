/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPackageData.h
 *
 * 
 */

#ifndef OAIPackageData_H
#define OAIPackageData_H

#include <QJsonObject>

#include "OAIBinarySourceInfo.h"
#include "OAIFileLocation.h"
#include "OAILanguagePackageDependency.h"
#include "OAIMaintainer.h"
#include "OAIPackageVersion.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBinarySourceInfo;
class OAIPackageVersion;
class OAILanguagePackageDependency;
class OAIFileLocation;
class OAIMaintainer;

class OAIPackageData : public OAIObject {
public:
    OAIPackageData();
    OAIPackageData(QString json);
    ~OAIPackageData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArchitecture() const;
    void setArchitecture(const QString &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    QList<OAIBinarySourceInfo> getBinarySourceInfo() const;
    void setBinarySourceInfo(const QList<OAIBinarySourceInfo> &binary_source_info);
    bool is_binary_source_info_Set() const;
    bool is_binary_source_info_Valid() const;

    OAIPackageVersion getBinaryVersion() const;
    void setBinaryVersion(const OAIPackageVersion &binary_version);
    bool is_binary_version_Set() const;
    bool is_binary_version_Valid() const;

    QString getCpeUri() const;
    void setCpeUri(const QString &cpe_uri);
    bool is_cpe_uri_Set() const;
    bool is_cpe_uri_Valid() const;

    QList<OAILanguagePackageDependency> getDependencyChain() const;
    void setDependencyChain(const QList<OAILanguagePackageDependency> &dependency_chain);
    bool is_dependency_chain_Set() const;
    bool is_dependency_chain_Valid() const;

    QList<OAIFileLocation> getFileLocation() const;
    void setFileLocation(const QList<OAIFileLocation> &file_location);
    bool is_file_location_Set() const;
    bool is_file_location_Valid() const;

    QString getHashDigest() const;
    void setHashDigest(const QString &hash_digest);
    bool is_hash_digest_Set() const;
    bool is_hash_digest_Valid() const;

    QList<QString> getLicenses() const;
    void setLicenses(const QList<QString> &licenses);
    bool is_licenses_Set() const;
    bool is_licenses_Valid() const;

    OAIMaintainer getMaintainer() const;
    void setMaintainer(const OAIMaintainer &maintainer);
    bool is_maintainer_Set() const;
    bool is_maintainer_Valid() const;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    QString getPackage() const;
    void setPackage(const QString &package);
    bool is_package_Set() const;
    bool is_package_Valid() const;

    QString getPackageType() const;
    void setPackageType(const QString &package_type);
    bool is_package_type_Set() const;
    bool is_package_type_Valid() const;

    QList<QString> getPatchedCve() const;
    void setPatchedCve(const QList<QString> &patched_cve);
    bool is_patched_cve_Set() const;
    bool is_patched_cve_Valid() const;

    OAIPackageVersion getSourceVersion() const;
    void setSourceVersion(const OAIPackageVersion &source_version);
    bool is_source_version_Set() const;
    bool is_source_version_Valid() const;

    QString getUnused() const;
    void setUnused(const QString &unused);
    bool is_unused_Set() const;
    bool is_unused_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    QList<OAIBinarySourceInfo> m_binary_source_info;
    bool m_binary_source_info_isSet;
    bool m_binary_source_info_isValid;

    OAIPackageVersion m_binary_version;
    bool m_binary_version_isSet;
    bool m_binary_version_isValid;

    QString m_cpe_uri;
    bool m_cpe_uri_isSet;
    bool m_cpe_uri_isValid;

    QList<OAILanguagePackageDependency> m_dependency_chain;
    bool m_dependency_chain_isSet;
    bool m_dependency_chain_isValid;

    QList<OAIFileLocation> m_file_location;
    bool m_file_location_isSet;
    bool m_file_location_isValid;

    QString m_hash_digest;
    bool m_hash_digest_isSet;
    bool m_hash_digest_isValid;

    QList<QString> m_licenses;
    bool m_licenses_isSet;
    bool m_licenses_isValid;

    OAIMaintainer m_maintainer;
    bool m_maintainer_isSet;
    bool m_maintainer_isValid;

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    QString m_package;
    bool m_package_isSet;
    bool m_package_isValid;

    QString m_package_type;
    bool m_package_type_isSet;
    bool m_package_type_isValid;

    QList<QString> m_patched_cve;
    bool m_patched_cve_isSet;
    bool m_patched_cve_isValid;

    OAIPackageVersion m_source_version;
    bool m_source_version_isSet;
    bool m_source_version_isValid;

    QString m_unused;
    bool m_unused_isSet;
    bool m_unused_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPackageData)

#endif // OAIPackageData_H
