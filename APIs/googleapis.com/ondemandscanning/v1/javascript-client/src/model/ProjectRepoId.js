/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectRepoId model module.
 * @module model/ProjectRepoId
 * @version v1
 */
class ProjectRepoId {
    /**
     * Constructs a new <code>ProjectRepoId</code>.
     * Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
     * @alias module:model/ProjectRepoId
     */
    constructor() { 
        
        ProjectRepoId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectRepoId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectRepoId} obj Optional instance to populate.
     * @return {module:model/ProjectRepoId} The populated <code>ProjectRepoId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectRepoId();

            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('repoName')) {
                obj['repoName'] = ApiClient.convertToType(data['repoName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectRepoId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectRepoId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['repoName'] && !(typeof data['repoName'] === 'string' || data['repoName'] instanceof String)) {
            throw new Error("Expected the field `repoName` to be a primitive type in the JSON string but got " + data['repoName']);
        }

        return true;
    }


}



/**
 * The ID of the project.
 * @member {String} projectId
 */
ProjectRepoId.prototype['projectId'] = undefined;

/**
 * The name of the repo. Leave empty for the default repo.
 * @member {String} repoName
 */
ProjectRepoId.prototype['repoName'] = undefined;






export default ProjectRepoId;

