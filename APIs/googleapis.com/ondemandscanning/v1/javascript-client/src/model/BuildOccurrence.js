/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildProvenance from './BuildProvenance';
import InTotoProvenance from './InTotoProvenance';
import InTotoSlsaProvenanceV1 from './InTotoSlsaProvenanceV1';
import InTotoStatement from './InTotoStatement';

/**
 * The BuildOccurrence model module.
 * @module model/BuildOccurrence
 * @version v1
 */
class BuildOccurrence {
    /**
     * Constructs a new <code>BuildOccurrence</code>.
     * Details of a build occurrence.
     * @alias module:model/BuildOccurrence
     */
    constructor() { 
        
        BuildOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildOccurrence} obj Optional instance to populate.
     * @return {module:model/BuildOccurrence} The populated <code>BuildOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildOccurrence();

            if (data.hasOwnProperty('inTotoSlsaProvenanceV1')) {
                obj['inTotoSlsaProvenanceV1'] = InTotoSlsaProvenanceV1.constructFromObject(data['inTotoSlsaProvenanceV1']);
            }
            if (data.hasOwnProperty('intotoProvenance')) {
                obj['intotoProvenance'] = InTotoProvenance.constructFromObject(data['intotoProvenance']);
            }
            if (data.hasOwnProperty('intotoStatement')) {
                obj['intotoStatement'] = InTotoStatement.constructFromObject(data['intotoStatement']);
            }
            if (data.hasOwnProperty('provenance')) {
                obj['provenance'] = BuildProvenance.constructFromObject(data['provenance']);
            }
            if (data.hasOwnProperty('provenanceBytes')) {
                obj['provenanceBytes'] = ApiClient.convertToType(data['provenanceBytes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildOccurrence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `inTotoSlsaProvenanceV1`
        if (data['inTotoSlsaProvenanceV1']) { // data not null
          InTotoSlsaProvenanceV1.validateJSON(data['inTotoSlsaProvenanceV1']);
        }
        // validate the optional field `intotoProvenance`
        if (data['intotoProvenance']) { // data not null
          InTotoProvenance.validateJSON(data['intotoProvenance']);
        }
        // validate the optional field `intotoStatement`
        if (data['intotoStatement']) { // data not null
          InTotoStatement.validateJSON(data['intotoStatement']);
        }
        // validate the optional field `provenance`
        if (data['provenance']) { // data not null
          BuildProvenance.validateJSON(data['provenance']);
        }
        // ensure the json data is a string
        if (data['provenanceBytes'] && !(typeof data['provenanceBytes'] === 'string' || data['provenanceBytes'] instanceof String)) {
            throw new Error("Expected the field `provenanceBytes` to be a primitive type in the JSON string but got " + data['provenanceBytes']);
        }

        return true;
    }


}



/**
 * @member {module:model/InTotoSlsaProvenanceV1} inTotoSlsaProvenanceV1
 */
BuildOccurrence.prototype['inTotoSlsaProvenanceV1'] = undefined;

/**
 * @member {module:model/InTotoProvenance} intotoProvenance
 */
BuildOccurrence.prototype['intotoProvenance'] = undefined;

/**
 * @member {module:model/InTotoStatement} intotoStatement
 */
BuildOccurrence.prototype['intotoStatement'] = undefined;

/**
 * @member {module:model/BuildProvenance} provenance
 */
BuildOccurrence.prototype['provenance'] = undefined;

/**
 * Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
 * @member {String} provenanceBytes
 */
BuildOccurrence.prototype['provenanceBytes'] = undefined;






export default BuildOccurrence;

