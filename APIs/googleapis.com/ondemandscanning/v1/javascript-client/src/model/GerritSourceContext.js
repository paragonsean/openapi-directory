/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AliasContext from './AliasContext';

/**
 * The GerritSourceContext model module.
 * @module model/GerritSourceContext
 * @version v1
 */
class GerritSourceContext {
    /**
     * Constructs a new <code>GerritSourceContext</code>.
     * A SourceContext referring to a Gerrit project.
     * @alias module:model/GerritSourceContext
     */
    constructor() { 
        
        GerritSourceContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GerritSourceContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GerritSourceContext} obj Optional instance to populate.
     * @return {module:model/GerritSourceContext} The populated <code>GerritSourceContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GerritSourceContext();

            if (data.hasOwnProperty('aliasContext')) {
                obj['aliasContext'] = AliasContext.constructFromObject(data['aliasContext']);
            }
            if (data.hasOwnProperty('gerritProject')) {
                obj['gerritProject'] = ApiClient.convertToType(data['gerritProject'], 'String');
            }
            if (data.hasOwnProperty('hostUri')) {
                obj['hostUri'] = ApiClient.convertToType(data['hostUri'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GerritSourceContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GerritSourceContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aliasContext`
        if (data['aliasContext']) { // data not null
          AliasContext.validateJSON(data['aliasContext']);
        }
        // ensure the json data is a string
        if (data['gerritProject'] && !(typeof data['gerritProject'] === 'string' || data['gerritProject'] instanceof String)) {
            throw new Error("Expected the field `gerritProject` to be a primitive type in the JSON string but got " + data['gerritProject']);
        }
        // ensure the json data is a string
        if (data['hostUri'] && !(typeof data['hostUri'] === 'string' || data['hostUri'] instanceof String)) {
            throw new Error("Expected the field `hostUri` to be a primitive type in the JSON string but got " + data['hostUri']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/AliasContext} aliasContext
 */
GerritSourceContext.prototype['aliasContext'] = undefined;

/**
 * The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.
 * @member {String} gerritProject
 */
GerritSourceContext.prototype['gerritProject'] = undefined;

/**
 * The URI of a running Gerrit instance.
 * @member {String} hostUri
 */
GerritSourceContext.prototype['hostUri'] = undefined;

/**
 * A revision (commit) ID.
 * @member {String} revisionId
 */
GerritSourceContext.prototype['revisionId'] = undefined;






export default GerritSourceContext;

