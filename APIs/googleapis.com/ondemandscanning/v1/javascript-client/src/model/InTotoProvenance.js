/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuilderConfig from './BuilderConfig';
import Metadata from './Metadata';
import Recipe from './Recipe';

/**
 * The InTotoProvenance model module.
 * @module model/InTotoProvenance
 * @version v1
 */
class InTotoProvenance {
    /**
     * Constructs a new <code>InTotoProvenance</code>.
     * @alias module:model/InTotoProvenance
     */
    constructor() { 
        
        InTotoProvenance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InTotoProvenance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InTotoProvenance} obj Optional instance to populate.
     * @return {module:model/InTotoProvenance} The populated <code>InTotoProvenance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InTotoProvenance();

            if (data.hasOwnProperty('builderConfig')) {
                obj['builderConfig'] = BuilderConfig.constructFromObject(data['builderConfig']);
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = ApiClient.convertToType(data['materials'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = Metadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('recipe')) {
                obj['recipe'] = Recipe.constructFromObject(data['recipe']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InTotoProvenance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InTotoProvenance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `builderConfig`
        if (data['builderConfig']) { // data not null
          BuilderConfig.validateJSON(data['builderConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['materials'])) {
            throw new Error("Expected the field `materials` to be an array in the JSON data but got " + data['materials']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Metadata.validateJSON(data['metadata']);
        }
        // validate the optional field `recipe`
        if (data['recipe']) { // data not null
          Recipe.validateJSON(data['recipe']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuilderConfig} builderConfig
 */
InTotoProvenance.prototype['builderConfig'] = undefined;

/**
 * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
 * @member {Array.<String>} materials
 */
InTotoProvenance.prototype['materials'] = undefined;

/**
 * @member {module:model/Metadata} metadata
 */
InTotoProvenance.prototype['metadata'] = undefined;

/**
 * @member {module:model/Recipe} recipe
 */
InTotoProvenance.prototype['recipe'] = undefined;






export default InTotoProvenance;

