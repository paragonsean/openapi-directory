/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Jwt from './Jwt';
import Signature from './Signature';

/**
 * The AttestationOccurrence model module.
 * @module model/AttestationOccurrence
 * @version v1
 */
class AttestationOccurrence {
    /**
     * Constructs a new <code>AttestationOccurrence</code>.
     * Occurrence that represents a single \&quot;attestation\&quot;. The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
     * @alias module:model/AttestationOccurrence
     */
    constructor() { 
        
        AttestationOccurrence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttestationOccurrence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttestationOccurrence} obj Optional instance to populate.
     * @return {module:model/AttestationOccurrence} The populated <code>AttestationOccurrence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttestationOccurrence();

            if (data.hasOwnProperty('jwts')) {
                obj['jwts'] = ApiClient.convertToType(data['jwts'], [Jwt]);
            }
            if (data.hasOwnProperty('serializedPayload')) {
                obj['serializedPayload'] = ApiClient.convertToType(data['serializedPayload'], 'Blob');
            }
            if (data.hasOwnProperty('signatures')) {
                obj['signatures'] = ApiClient.convertToType(data['signatures'], [Signature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttestationOccurrence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttestationOccurrence</code>.
     */
    static validateJSON(data) {
        if (data['jwts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['jwts'])) {
                throw new Error("Expected the field `jwts` to be an array in the JSON data but got " + data['jwts']);
            }
            // validate the optional field `jwts` (array)
            for (const item of data['jwts']) {
                Jwt.validateJSON(item);
            };
        }
        if (data['signatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signatures'])) {
                throw new Error("Expected the field `signatures` to be an array in the JSON data but got " + data['signatures']);
            }
            // validate the optional field `signatures` (array)
            for (const item of data['signatures']) {
                Signature.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
 * @member {Array.<module:model/Jwt>} jwts
 */
AttestationOccurrence.prototype['jwts'] = undefined;

/**
 * Required. The serialized payload that is verified by one or more `signatures`.
 * @member {Blob} serializedPayload
 */
AttestationOccurrence.prototype['serializedPayload'] = undefined;

/**
 * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
 * @member {Array.<module:model/Signature>} signatures
 */
AttestationOccurrence.prototype['signatures'] = undefined;






export default AttestationOccurrence;

