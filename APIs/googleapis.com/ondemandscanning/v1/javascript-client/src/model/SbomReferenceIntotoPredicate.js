/**
 * On-Demand Scanning API
 * A service to scan container images for vulnerabilities.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SbomReferenceIntotoPredicate model module.
 * @module model/SbomReferenceIntotoPredicate
 * @version v1
 */
class SbomReferenceIntotoPredicate {
    /**
     * Constructs a new <code>SbomReferenceIntotoPredicate</code>.
     * A predicate which describes the SBOM being referenced.
     * @alias module:model/SbomReferenceIntotoPredicate
     */
    constructor() { 
        
        SbomReferenceIntotoPredicate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SbomReferenceIntotoPredicate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SbomReferenceIntotoPredicate} obj Optional instance to populate.
     * @return {module:model/SbomReferenceIntotoPredicate} The populated <code>SbomReferenceIntotoPredicate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SbomReferenceIntotoPredicate();

            if (data.hasOwnProperty('digest')) {
                obj['digest'] = ApiClient.convertToType(data['digest'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('referrerId')) {
                obj['referrerId'] = ApiClient.convertToType(data['referrerId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SbomReferenceIntotoPredicate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SbomReferenceIntotoPredicate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['referrerId'] && !(typeof data['referrerId'] === 'string' || data['referrerId'] instanceof String)) {
            throw new Error("Expected the field `referrerId` to be a primitive type in the JSON string but got " + data['referrerId']);
        }

        return true;
    }


}



/**
 * A map of algorithm to digest of the contents of the SBOM.
 * @member {Object.<String, String>} digest
 */
SbomReferenceIntotoPredicate.prototype['digest'] = undefined;

/**
 * The location of the SBOM.
 * @member {String} location
 */
SbomReferenceIntotoPredicate.prototype['location'] = undefined;

/**
 * The mime type of the SBOM.
 * @member {String} mimeType
 */
SbomReferenceIntotoPredicate.prototype['mimeType'] = undefined;

/**
 * The person or system referring this predicate to the consumer.
 * @member {String} referrerId
 */
SbomReferenceIntotoPredicate.prototype['referrerId'] = undefined;






export default SbomReferenceIntotoPredicate;

