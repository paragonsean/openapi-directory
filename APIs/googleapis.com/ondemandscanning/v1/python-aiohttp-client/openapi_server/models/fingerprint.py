# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fingerprint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, v1_name: str=None, v2_blob: List[str]=None, v2_name: str=None):
        """Fingerprint - a model defined in OpenAPI

        :param v1_name: The v1_name of this Fingerprint.
        :param v2_blob: The v2_blob of this Fingerprint.
        :param v2_name: The v2_name of this Fingerprint.
        """
        self.openapi_types = {
            'v1_name': str,
            'v2_blob': List[str],
            'v2_name': str
        }

        self.attribute_map = {
            'v1_name': 'v1Name',
            'v2_blob': 'v2Blob',
            'v2_name': 'v2Name'
        }

        self._v1_name = v1_name
        self._v2_blob = v2_blob
        self._v2_name = v2_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fingerprint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fingerprint of this Fingerprint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def v1_name(self):
        """Gets the v1_name of this Fingerprint.

        Required. The layer ID of the final layer in the Docker image's v1 representation.

        :return: The v1_name of this Fingerprint.
        :rtype: str
        """
        return self._v1_name

    @v1_name.setter
    def v1_name(self, v1_name):
        """Sets the v1_name of this Fingerprint.

        Required. The layer ID of the final layer in the Docker image's v1 representation.

        :param v1_name: The v1_name of this Fingerprint.
        :type v1_name: str
        """

        self._v1_name = v1_name

    @property
    def v2_blob(self):
        """Gets the v2_blob of this Fingerprint.

        Required. The ordered list of v2 blobs that represent a given image.

        :return: The v2_blob of this Fingerprint.
        :rtype: List[str]
        """
        return self._v2_blob

    @v2_blob.setter
    def v2_blob(self, v2_blob):
        """Sets the v2_blob of this Fingerprint.

        Required. The ordered list of v2 blobs that represent a given image.

        :param v2_blob: The v2_blob of this Fingerprint.
        :type v2_blob: List[str]
        """

        self._v2_blob = v2_blob

    @property
    def v2_name(self):
        """Gets the v2_name of this Fingerprint.

        Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.

        :return: The v2_name of this Fingerprint.
        :rtype: str
        """
        return self._v2_name

    @v2_name.setter
    def v2_name(self, v2_name):
        """Sets the v2_name of this Fingerprint.

        Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.

        :param v2_name: The v2_name of this Fingerprint.
        :type v2_name: str
        """

        self._v2_name = v2_name
