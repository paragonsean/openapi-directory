# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, expression: str=None):
        """License - a model defined in OpenAPI

        :param comments: The comments of this License.
        :param expression: The expression of this License.
        """
        self.openapi_types = {
            'comments': str,
            'expression': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'expression': 'expression'
        }

        self._comments = comments
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The License of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this License.

        Comments

        :return: The comments of this License.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this License.

        Comments

        :param comments: The comments of this License.
        :type comments: str
        """

        self._comments = comments

    @property
    def expression(self):
        """Gets the expression of this License.

        Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\".

        :return: The expression of this License.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this License.

        Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\".

        :param expression: The expression of this License.
        :type expression: str
        """

        self._expression = expression
