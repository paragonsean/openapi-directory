# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grafeas_v1_file_location import GrafeasV1FileLocation
from openapi_server.models.version import Version
from openapi_server import util


class PackageIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_cpe_uri: str=None, affected_package: str=None, affected_version: Version=None, effective_severity: str=None, file_location: List[GrafeasV1FileLocation]=None, fix_available: bool=None, fixed_cpe_uri: str=None, fixed_package: str=None, fixed_version: Version=None, package_type: str=None):
        """PackageIssue - a model defined in OpenAPI

        :param affected_cpe_uri: The affected_cpe_uri of this PackageIssue.
        :param affected_package: The affected_package of this PackageIssue.
        :param affected_version: The affected_version of this PackageIssue.
        :param effective_severity: The effective_severity of this PackageIssue.
        :param file_location: The file_location of this PackageIssue.
        :param fix_available: The fix_available of this PackageIssue.
        :param fixed_cpe_uri: The fixed_cpe_uri of this PackageIssue.
        :param fixed_package: The fixed_package of this PackageIssue.
        :param fixed_version: The fixed_version of this PackageIssue.
        :param package_type: The package_type of this PackageIssue.
        """
        self.openapi_types = {
            'affected_cpe_uri': str,
            'affected_package': str,
            'affected_version': Version,
            'effective_severity': str,
            'file_location': List[GrafeasV1FileLocation],
            'fix_available': bool,
            'fixed_cpe_uri': str,
            'fixed_package': str,
            'fixed_version': Version,
            'package_type': str
        }

        self.attribute_map = {
            'affected_cpe_uri': 'affectedCpeUri',
            'affected_package': 'affectedPackage',
            'affected_version': 'affectedVersion',
            'effective_severity': 'effectiveSeverity',
            'file_location': 'fileLocation',
            'fix_available': 'fixAvailable',
            'fixed_cpe_uri': 'fixedCpeUri',
            'fixed_package': 'fixedPackage',
            'fixed_version': 'fixedVersion',
            'package_type': 'packageType'
        }

        self._affected_cpe_uri = affected_cpe_uri
        self._affected_package = affected_package
        self._affected_version = affected_version
        self._effective_severity = effective_severity
        self._file_location = file_location
        self._fix_available = fix_available
        self._fixed_cpe_uri = fixed_cpe_uri
        self._fixed_package = fixed_package
        self._fixed_version = fixed_version
        self._package_type = package_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageIssue of this PackageIssue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_cpe_uri(self):
        """Gets the affected_cpe_uri of this PackageIssue.

        Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.

        :return: The affected_cpe_uri of this PackageIssue.
        :rtype: str
        """
        return self._affected_cpe_uri

    @affected_cpe_uri.setter
    def affected_cpe_uri(self, affected_cpe_uri):
        """Sets the affected_cpe_uri of this PackageIssue.

        Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.

        :param affected_cpe_uri: The affected_cpe_uri of this PackageIssue.
        :type affected_cpe_uri: str
        """

        self._affected_cpe_uri = affected_cpe_uri

    @property
    def affected_package(self):
        """Gets the affected_package of this PackageIssue.

        Required. The package this vulnerability was found in.

        :return: The affected_package of this PackageIssue.
        :rtype: str
        """
        return self._affected_package

    @affected_package.setter
    def affected_package(self, affected_package):
        """Sets the affected_package of this PackageIssue.

        Required. The package this vulnerability was found in.

        :param affected_package: The affected_package of this PackageIssue.
        :type affected_package: str
        """

        self._affected_package = affected_package

    @property
    def affected_version(self):
        """Gets the affected_version of this PackageIssue.


        :return: The affected_version of this PackageIssue.
        :rtype: Version
        """
        return self._affected_version

    @affected_version.setter
    def affected_version(self, affected_version):
        """Sets the affected_version of this PackageIssue.


        :param affected_version: The affected_version of this PackageIssue.
        :type affected_version: Version
        """

        self._affected_version = affected_version

    @property
    def effective_severity(self):
        """Gets the effective_severity of this PackageIssue.

        Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.

        :return: The effective_severity of this PackageIssue.
        :rtype: str
        """
        return self._effective_severity

    @effective_severity.setter
    def effective_severity(self, effective_severity):
        """Sets the effective_severity of this PackageIssue.

        Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.

        :param effective_severity: The effective_severity of this PackageIssue.
        :type effective_severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "MINIMAL", "LOW", "MEDIUM", "HIGH", "CRITICAL"]  # noqa: E501
        if effective_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_severity` ({0}), must be one of {1}"
                .format(effective_severity, allowed_values)
            )

        self._effective_severity = effective_severity

    @property
    def file_location(self):
        """Gets the file_location of this PackageIssue.

        The location at which this package was found.

        :return: The file_location of this PackageIssue.
        :rtype: List[GrafeasV1FileLocation]
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this PackageIssue.

        The location at which this package was found.

        :param file_location: The file_location of this PackageIssue.
        :type file_location: List[GrafeasV1FileLocation]
        """

        self._file_location = file_location

    @property
    def fix_available(self):
        """Gets the fix_available of this PackageIssue.

        Output only. Whether a fix is available for this package.

        :return: The fix_available of this PackageIssue.
        :rtype: bool
        """
        return self._fix_available

    @fix_available.setter
    def fix_available(self, fix_available):
        """Sets the fix_available of this PackageIssue.

        Output only. Whether a fix is available for this package.

        :param fix_available: The fix_available of this PackageIssue.
        :type fix_available: bool
        """

        self._fix_available = fix_available

    @property
    def fixed_cpe_uri(self):
        """Gets the fixed_cpe_uri of this PackageIssue.

        The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.

        :return: The fixed_cpe_uri of this PackageIssue.
        :rtype: str
        """
        return self._fixed_cpe_uri

    @fixed_cpe_uri.setter
    def fixed_cpe_uri(self, fixed_cpe_uri):
        """Sets the fixed_cpe_uri of this PackageIssue.

        The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.

        :param fixed_cpe_uri: The fixed_cpe_uri of this PackageIssue.
        :type fixed_cpe_uri: str
        """

        self._fixed_cpe_uri = fixed_cpe_uri

    @property
    def fixed_package(self):
        """Gets the fixed_package of this PackageIssue.

        The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.

        :return: The fixed_package of this PackageIssue.
        :rtype: str
        """
        return self._fixed_package

    @fixed_package.setter
    def fixed_package(self, fixed_package):
        """Sets the fixed_package of this PackageIssue.

        The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.

        :param fixed_package: The fixed_package of this PackageIssue.
        :type fixed_package: str
        """

        self._fixed_package = fixed_package

    @property
    def fixed_version(self):
        """Gets the fixed_version of this PackageIssue.


        :return: The fixed_version of this PackageIssue.
        :rtype: Version
        """
        return self._fixed_version

    @fixed_version.setter
    def fixed_version(self, fixed_version):
        """Sets the fixed_version of this PackageIssue.


        :param fixed_version: The fixed_version of this PackageIssue.
        :type fixed_version: Version
        """

        self._fixed_version = fixed_version

    @property
    def package_type(self):
        """Gets the package_type of this PackageIssue.

        The type of package (e.g. OS, MAVEN, GO).

        :return: The package_type of this PackageIssue.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageIssue.

        The type of package (e.g. OS, MAVEN, GO).

        :param package_type: The package_type of this PackageIssue.
        :type package_type: str
        """

        self._package_type = package_type
