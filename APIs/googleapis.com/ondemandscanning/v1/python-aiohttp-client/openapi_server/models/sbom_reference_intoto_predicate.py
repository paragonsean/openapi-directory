# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SbomReferenceIntotoPredicate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest: Dict[str, str]=None, location: str=None, mime_type: str=None, referrer_id: str=None):
        """SbomReferenceIntotoPredicate - a model defined in OpenAPI

        :param digest: The digest of this SbomReferenceIntotoPredicate.
        :param location: The location of this SbomReferenceIntotoPredicate.
        :param mime_type: The mime_type of this SbomReferenceIntotoPredicate.
        :param referrer_id: The referrer_id of this SbomReferenceIntotoPredicate.
        """
        self.openapi_types = {
            'digest': Dict[str, str],
            'location': str,
            'mime_type': str,
            'referrer_id': str
        }

        self.attribute_map = {
            'digest': 'digest',
            'location': 'location',
            'mime_type': 'mimeType',
            'referrer_id': 'referrerId'
        }

        self._digest = digest
        self._location = location
        self._mime_type = mime_type
        self._referrer_id = referrer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SbomReferenceIntotoPredicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SbomReferenceIntotoPredicate of this SbomReferenceIntotoPredicate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self):
        """Gets the digest of this SbomReferenceIntotoPredicate.

        A map of algorithm to digest of the contents of the SBOM.

        :return: The digest of this SbomReferenceIntotoPredicate.
        :rtype: Dict[str, str]
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this SbomReferenceIntotoPredicate.

        A map of algorithm to digest of the contents of the SBOM.

        :param digest: The digest of this SbomReferenceIntotoPredicate.
        :type digest: Dict[str, str]
        """

        self._digest = digest

    @property
    def location(self):
        """Gets the location of this SbomReferenceIntotoPredicate.

        The location of the SBOM.

        :return: The location of this SbomReferenceIntotoPredicate.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SbomReferenceIntotoPredicate.

        The location of the SBOM.

        :param location: The location of this SbomReferenceIntotoPredicate.
        :type location: str
        """

        self._location = location

    @property
    def mime_type(self):
        """Gets the mime_type of this SbomReferenceIntotoPredicate.

        The mime type of the SBOM.

        :return: The mime_type of this SbomReferenceIntotoPredicate.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this SbomReferenceIntotoPredicate.

        The mime type of the SBOM.

        :param mime_type: The mime_type of this SbomReferenceIntotoPredicate.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def referrer_id(self):
        """Gets the referrer_id of this SbomReferenceIntotoPredicate.

        The person or system referring this predicate to the consumer.

        :return: The referrer_id of this SbomReferenceIntotoPredicate.
        :rtype: str
        """
        return self._referrer_id

    @referrer_id.setter
    def referrer_id(self, referrer_id):
        """Sets the referrer_id of this SbomReferenceIntotoPredicate.

        The person or system referring this predicate to the consumer.

        :param referrer_id: The referrer_id of this SbomReferenceIntotoPredicate.
        :type referrer_id: str
        """

        self._referrer_id = referrer_id
