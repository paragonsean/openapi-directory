# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.justification import Justification
from openapi_server.models.related_url import RelatedUrl
from openapi_server.models.remediation import Remediation
from openapi_server import util


class VexAssessment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cve: str=None, impacts: List[str]=None, justification: Justification=None, note_name: str=None, related_uris: List[RelatedUrl]=None, remediations: List[Remediation]=None, state: str=None, vulnerability_id: str=None):
        """VexAssessment - a model defined in OpenAPI

        :param cve: The cve of this VexAssessment.
        :param impacts: The impacts of this VexAssessment.
        :param justification: The justification of this VexAssessment.
        :param note_name: The note_name of this VexAssessment.
        :param related_uris: The related_uris of this VexAssessment.
        :param remediations: The remediations of this VexAssessment.
        :param state: The state of this VexAssessment.
        :param vulnerability_id: The vulnerability_id of this VexAssessment.
        """
        self.openapi_types = {
            'cve': str,
            'impacts': List[str],
            'justification': Justification,
            'note_name': str,
            'related_uris': List[RelatedUrl],
            'remediations': List[Remediation],
            'state': str,
            'vulnerability_id': str
        }

        self.attribute_map = {
            'cve': 'cve',
            'impacts': 'impacts',
            'justification': 'justification',
            'note_name': 'noteName',
            'related_uris': 'relatedUris',
            'remediations': 'remediations',
            'state': 'state',
            'vulnerability_id': 'vulnerabilityId'
        }

        self._cve = cve
        self._impacts = impacts
        self._justification = justification
        self._note_name = note_name
        self._related_uris = related_uris
        self._remediations = remediations
        self._state = state
        self._vulnerability_id = vulnerability_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VexAssessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VexAssessment of this VexAssessment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cve(self):
        """Gets the cve of this VexAssessment.

        Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.

        :return: The cve of this VexAssessment.
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this VexAssessment.

        Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.

        :param cve: The cve of this VexAssessment.
        :type cve: str
        """

        self._cve = cve

    @property
    def impacts(self):
        """Gets the impacts of this VexAssessment.

        Contains information about the impact of this vulnerability, this will change with time.

        :return: The impacts of this VexAssessment.
        :rtype: List[str]
        """
        return self._impacts

    @impacts.setter
    def impacts(self, impacts):
        """Sets the impacts of this VexAssessment.

        Contains information about the impact of this vulnerability, this will change with time.

        :param impacts: The impacts of this VexAssessment.
        :type impacts: List[str]
        """

        self._impacts = impacts

    @property
    def justification(self):
        """Gets the justification of this VexAssessment.


        :return: The justification of this VexAssessment.
        :rtype: Justification
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this VexAssessment.


        :param justification: The justification of this VexAssessment.
        :type justification: Justification
        """

        self._justification = justification

    @property
    def note_name(self):
        """Gets the note_name of this VexAssessment.

        The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.

        :return: The note_name of this VexAssessment.
        :rtype: str
        """
        return self._note_name

    @note_name.setter
    def note_name(self, note_name):
        """Sets the note_name of this VexAssessment.

        The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.

        :param note_name: The note_name of this VexAssessment.
        :type note_name: str
        """

        self._note_name = note_name

    @property
    def related_uris(self):
        """Gets the related_uris of this VexAssessment.

        Holds a list of references associated with this vulnerability item and assessment.

        :return: The related_uris of this VexAssessment.
        :rtype: List[RelatedUrl]
        """
        return self._related_uris

    @related_uris.setter
    def related_uris(self, related_uris):
        """Sets the related_uris of this VexAssessment.

        Holds a list of references associated with this vulnerability item and assessment.

        :param related_uris: The related_uris of this VexAssessment.
        :type related_uris: List[RelatedUrl]
        """

        self._related_uris = related_uris

    @property
    def remediations(self):
        """Gets the remediations of this VexAssessment.

        Specifies details on how to handle (and presumably, fix) a vulnerability.

        :return: The remediations of this VexAssessment.
        :rtype: List[Remediation]
        """
        return self._remediations

    @remediations.setter
    def remediations(self, remediations):
        """Sets the remediations of this VexAssessment.

        Specifies details on how to handle (and presumably, fix) a vulnerability.

        :param remediations: The remediations of this VexAssessment.
        :type remediations: List[Remediation]
        """

        self._remediations = remediations

    @property
    def state(self):
        """Gets the state of this VexAssessment.

        Provides the state of this Vulnerability assessment.

        :return: The state of this VexAssessment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VexAssessment.

        Provides the state of this Vulnerability assessment.

        :param state: The state of this VexAssessment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "AFFECTED", "NOT_AFFECTED", "FIXED", "UNDER_INVESTIGATION"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this VexAssessment.

        The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.

        :return: The vulnerability_id of this VexAssessment.
        :rtype: str
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this VexAssessment.

        The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.

        :param vulnerability_id: The vulnerability_id of this VexAssessment.
        :type vulnerability_id: str
        """

        self._vulnerability_id = vulnerability_id
