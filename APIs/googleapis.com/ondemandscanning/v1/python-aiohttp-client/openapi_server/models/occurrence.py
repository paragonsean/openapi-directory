# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attestation_occurrence import AttestationOccurrence
from openapi_server.models.build_occurrence import BuildOccurrence
from openapi_server.models.compliance_occurrence import ComplianceOccurrence
from openapi_server.models.dsse_attestation_occurrence import DSSEAttestationOccurrence
from openapi_server.models.deployment_occurrence import DeploymentOccurrence
from openapi_server.models.discovery_occurrence import DiscoveryOccurrence
from openapi_server.models.envelope import Envelope
from openapi_server.models.image_occurrence import ImageOccurrence
from openapi_server.models.package_occurrence import PackageOccurrence
from openapi_server.models.sbom_reference_occurrence import SBOMReferenceOccurrence
from openapi_server.models.upgrade_occurrence import UpgradeOccurrence
from openapi_server.models.vulnerability_occurrence import VulnerabilityOccurrence
from openapi_server import util


class Occurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attestation: AttestationOccurrence=None, build: BuildOccurrence=None, compliance: ComplianceOccurrence=None, create_time: str=None, deployment: DeploymentOccurrence=None, discovery: DiscoveryOccurrence=None, dsse_attestation: DSSEAttestationOccurrence=None, envelope: Envelope=None, image: ImageOccurrence=None, kind: str=None, name: str=None, note_name: str=None, package: PackageOccurrence=None, remediation: str=None, resource_uri: str=None, sbom_reference: SBOMReferenceOccurrence=None, update_time: str=None, upgrade: UpgradeOccurrence=None, vulnerability: VulnerabilityOccurrence=None):
        """Occurrence - a model defined in OpenAPI

        :param attestation: The attestation of this Occurrence.
        :param build: The build of this Occurrence.
        :param compliance: The compliance of this Occurrence.
        :param create_time: The create_time of this Occurrence.
        :param deployment: The deployment of this Occurrence.
        :param discovery: The discovery of this Occurrence.
        :param dsse_attestation: The dsse_attestation of this Occurrence.
        :param envelope: The envelope of this Occurrence.
        :param image: The image of this Occurrence.
        :param kind: The kind of this Occurrence.
        :param name: The name of this Occurrence.
        :param note_name: The note_name of this Occurrence.
        :param package: The package of this Occurrence.
        :param remediation: The remediation of this Occurrence.
        :param resource_uri: The resource_uri of this Occurrence.
        :param sbom_reference: The sbom_reference of this Occurrence.
        :param update_time: The update_time of this Occurrence.
        :param upgrade: The upgrade of this Occurrence.
        :param vulnerability: The vulnerability of this Occurrence.
        """
        self.openapi_types = {
            'attestation': AttestationOccurrence,
            'build': BuildOccurrence,
            'compliance': ComplianceOccurrence,
            'create_time': str,
            'deployment': DeploymentOccurrence,
            'discovery': DiscoveryOccurrence,
            'dsse_attestation': DSSEAttestationOccurrence,
            'envelope': Envelope,
            'image': ImageOccurrence,
            'kind': str,
            'name': str,
            'note_name': str,
            'package': PackageOccurrence,
            'remediation': str,
            'resource_uri': str,
            'sbom_reference': SBOMReferenceOccurrence,
            'update_time': str,
            'upgrade': UpgradeOccurrence,
            'vulnerability': VulnerabilityOccurrence
        }

        self.attribute_map = {
            'attestation': 'attestation',
            'build': 'build',
            'compliance': 'compliance',
            'create_time': 'createTime',
            'deployment': 'deployment',
            'discovery': 'discovery',
            'dsse_attestation': 'dsseAttestation',
            'envelope': 'envelope',
            'image': 'image',
            'kind': 'kind',
            'name': 'name',
            'note_name': 'noteName',
            'package': 'package',
            'remediation': 'remediation',
            'resource_uri': 'resourceUri',
            'sbom_reference': 'sbomReference',
            'update_time': 'updateTime',
            'upgrade': 'upgrade',
            'vulnerability': 'vulnerability'
        }

        self._attestation = attestation
        self._build = build
        self._compliance = compliance
        self._create_time = create_time
        self._deployment = deployment
        self._discovery = discovery
        self._dsse_attestation = dsse_attestation
        self._envelope = envelope
        self._image = image
        self._kind = kind
        self._name = name
        self._note_name = note_name
        self._package = package
        self._remediation = remediation
        self._resource_uri = resource_uri
        self._sbom_reference = sbom_reference
        self._update_time = update_time
        self._upgrade = upgrade
        self._vulnerability = vulnerability

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Occurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Occurrence of this Occurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attestation(self):
        """Gets the attestation of this Occurrence.


        :return: The attestation of this Occurrence.
        :rtype: AttestationOccurrence
        """
        return self._attestation

    @attestation.setter
    def attestation(self, attestation):
        """Sets the attestation of this Occurrence.


        :param attestation: The attestation of this Occurrence.
        :type attestation: AttestationOccurrence
        """

        self._attestation = attestation

    @property
    def build(self):
        """Gets the build of this Occurrence.


        :return: The build of this Occurrence.
        :rtype: BuildOccurrence
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this Occurrence.


        :param build: The build of this Occurrence.
        :type build: BuildOccurrence
        """

        self._build = build

    @property
    def compliance(self):
        """Gets the compliance of this Occurrence.


        :return: The compliance of this Occurrence.
        :rtype: ComplianceOccurrence
        """
        return self._compliance

    @compliance.setter
    def compliance(self, compliance):
        """Sets the compliance of this Occurrence.


        :param compliance: The compliance of this Occurrence.
        :type compliance: ComplianceOccurrence
        """

        self._compliance = compliance

    @property
    def create_time(self):
        """Gets the create_time of this Occurrence.

        Output only. The time this occurrence was created.

        :return: The create_time of this Occurrence.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Occurrence.

        Output only. The time this occurrence was created.

        :param create_time: The create_time of this Occurrence.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deployment(self):
        """Gets the deployment of this Occurrence.


        :return: The deployment of this Occurrence.
        :rtype: DeploymentOccurrence
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this Occurrence.


        :param deployment: The deployment of this Occurrence.
        :type deployment: DeploymentOccurrence
        """

        self._deployment = deployment

    @property
    def discovery(self):
        """Gets the discovery of this Occurrence.


        :return: The discovery of this Occurrence.
        :rtype: DiscoveryOccurrence
        """
        return self._discovery

    @discovery.setter
    def discovery(self, discovery):
        """Sets the discovery of this Occurrence.


        :param discovery: The discovery of this Occurrence.
        :type discovery: DiscoveryOccurrence
        """

        self._discovery = discovery

    @property
    def dsse_attestation(self):
        """Gets the dsse_attestation of this Occurrence.


        :return: The dsse_attestation of this Occurrence.
        :rtype: DSSEAttestationOccurrence
        """
        return self._dsse_attestation

    @dsse_attestation.setter
    def dsse_attestation(self, dsse_attestation):
        """Sets the dsse_attestation of this Occurrence.


        :param dsse_attestation: The dsse_attestation of this Occurrence.
        :type dsse_attestation: DSSEAttestationOccurrence
        """

        self._dsse_attestation = dsse_attestation

    @property
    def envelope(self):
        """Gets the envelope of this Occurrence.


        :return: The envelope of this Occurrence.
        :rtype: Envelope
        """
        return self._envelope

    @envelope.setter
    def envelope(self, envelope):
        """Sets the envelope of this Occurrence.


        :param envelope: The envelope of this Occurrence.
        :type envelope: Envelope
        """

        self._envelope = envelope

    @property
    def image(self):
        """Gets the image of this Occurrence.


        :return: The image of this Occurrence.
        :rtype: ImageOccurrence
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Occurrence.


        :param image: The image of this Occurrence.
        :type image: ImageOccurrence
        """

        self._image = image

    @property
    def kind(self):
        """Gets the kind of this Occurrence.

        Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.

        :return: The kind of this Occurrence.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Occurrence.

        Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.

        :param kind: The kind of this Occurrence.
        :type kind: str
        """
        allowed_values = ["NOTE_KIND_UNSPECIFIED", "VULNERABILITY", "BUILD", "IMAGE", "PACKAGE", "DEPLOYMENT", "DISCOVERY", "ATTESTATION", "UPGRADE", "COMPLIANCE", "DSSE_ATTESTATION", "VULNERABILITY_ASSESSMENT", "SBOM_REFERENCE"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Occurrence.

        Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.

        :return: The name of this Occurrence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Occurrence.

        Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.

        :param name: The name of this Occurrence.
        :type name: str
        """

        self._name = name

    @property
    def note_name(self):
        """Gets the note_name of this Occurrence.

        Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.

        :return: The note_name of this Occurrence.
        :rtype: str
        """
        return self._note_name

    @note_name.setter
    def note_name(self, note_name):
        """Sets the note_name of this Occurrence.

        Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.

        :param note_name: The note_name of this Occurrence.
        :type note_name: str
        """

        self._note_name = note_name

    @property
    def package(self):
        """Gets the package of this Occurrence.


        :return: The package of this Occurrence.
        :rtype: PackageOccurrence
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this Occurrence.


        :param package: The package of this Occurrence.
        :type package: PackageOccurrence
        """

        self._package = package

    @property
    def remediation(self):
        """Gets the remediation of this Occurrence.

        A description of actions that can be taken to remedy the note.

        :return: The remediation of this Occurrence.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this Occurrence.

        A description of actions that can be taken to remedy the note.

        :param remediation: The remediation of this Occurrence.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Occurrence.

        Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.

        :return: The resource_uri of this Occurrence.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Occurrence.

        Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.

        :param resource_uri: The resource_uri of this Occurrence.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def sbom_reference(self):
        """Gets the sbom_reference of this Occurrence.


        :return: The sbom_reference of this Occurrence.
        :rtype: SBOMReferenceOccurrence
        """
        return self._sbom_reference

    @sbom_reference.setter
    def sbom_reference(self, sbom_reference):
        """Sets the sbom_reference of this Occurrence.


        :param sbom_reference: The sbom_reference of this Occurrence.
        :type sbom_reference: SBOMReferenceOccurrence
        """

        self._sbom_reference = sbom_reference

    @property
    def update_time(self):
        """Gets the update_time of this Occurrence.

        Output only. The time this occurrence was last updated.

        :return: The update_time of this Occurrence.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Occurrence.

        Output only. The time this occurrence was last updated.

        :param update_time: The update_time of this Occurrence.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upgrade(self):
        """Gets the upgrade of this Occurrence.


        :return: The upgrade of this Occurrence.
        :rtype: UpgradeOccurrence
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade):
        """Sets the upgrade of this Occurrence.


        :param upgrade: The upgrade of this Occurrence.
        :type upgrade: UpgradeOccurrence
        """

        self._upgrade = upgrade

    @property
    def vulnerability(self):
        """Gets the vulnerability of this Occurrence.


        :return: The vulnerability of this Occurrence.
        :rtype: VulnerabilityOccurrence
        """
        return self._vulnerability

    @vulnerability.setter
    def vulnerability(self, vulnerability):
        """Sets the vulnerability of this Occurrence.


        :param vulnerability: The vulnerability of this Occurrence.
        :type vulnerability: VulnerabilityOccurrence
        """

        self._vulnerability = vulnerability
