# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SBOMStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, sbom_state: str=None):
        """SBOMStatus - a model defined in OpenAPI

        :param error: The error of this SBOMStatus.
        :param sbom_state: The sbom_state of this SBOMStatus.
        """
        self.openapi_types = {
            'error': str,
            'sbom_state': str
        }

        self.attribute_map = {
            'error': 'error',
            'sbom_state': 'sbomState'
        }

        self._error = error
        self._sbom_state = sbom_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SBOMStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SBOMStatus of this SBOMStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this SBOMStatus.

        If there was an error generating an SBOM, this will indicate what that error was.

        :return: The error of this SBOMStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SBOMStatus.

        If there was an error generating an SBOM, this will indicate what that error was.

        :param error: The error of this SBOMStatus.
        :type error: str
        """

        self._error = error

    @property
    def sbom_state(self):
        """Gets the sbom_state of this SBOMStatus.

        The progress of the SBOM generation.

        :return: The sbom_state of this SBOMStatus.
        :rtype: str
        """
        return self._sbom_state

    @sbom_state.setter
    def sbom_state(self, sbom_state):
        """Sets the sbom_state of this SBOMStatus.

        The progress of the SBOM generation.

        :param sbom_state: The sbom_state of this SBOMStatus.
        :type sbom_state: str
        """
        allowed_values = ["SBOM_STATE_UNSPECIFIED", "PENDING", "COMPLETE"]  # noqa: E501
        if sbom_state not in allowed_values:
            raise ValueError(
                "Invalid value for `sbom_state` ({0}), must be one of {1}"
                .format(sbom_state, allowed_values)
            )

        self._sbom_state = sbom_state
