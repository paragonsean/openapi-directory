# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_hashes import FileHashes
from openapi_server.models.source_context import SourceContext
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_contexts: List[SourceContext]=None, artifact_storage_source_uri: str=None, context: SourceContext=None, file_hashes: Dict[str, FileHashes]=None):
        """Source - a model defined in OpenAPI

        :param additional_contexts: The additional_contexts of this Source.
        :param artifact_storage_source_uri: The artifact_storage_source_uri of this Source.
        :param context: The context of this Source.
        :param file_hashes: The file_hashes of this Source.
        """
        self.openapi_types = {
            'additional_contexts': List[SourceContext],
            'artifact_storage_source_uri': str,
            'context': SourceContext,
            'file_hashes': Dict[str, FileHashes]
        }

        self.attribute_map = {
            'additional_contexts': 'additionalContexts',
            'artifact_storage_source_uri': 'artifactStorageSourceUri',
            'context': 'context',
            'file_hashes': 'fileHashes'
        }

        self._additional_contexts = additional_contexts
        self._artifact_storage_source_uri = artifact_storage_source_uri
        self._context = context
        self._file_hashes = file_hashes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_contexts(self):
        """Gets the additional_contexts of this Source.

        If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.

        :return: The additional_contexts of this Source.
        :rtype: List[SourceContext]
        """
        return self._additional_contexts

    @additional_contexts.setter
    def additional_contexts(self, additional_contexts):
        """Sets the additional_contexts of this Source.

        If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.

        :param additional_contexts: The additional_contexts of this Source.
        :type additional_contexts: List[SourceContext]
        """

        self._additional_contexts = additional_contexts

    @property
    def artifact_storage_source_uri(self):
        """Gets the artifact_storage_source_uri of this Source.

        If provided, the input binary artifacts for the build came from this location.

        :return: The artifact_storage_source_uri of this Source.
        :rtype: str
        """
        return self._artifact_storage_source_uri

    @artifact_storage_source_uri.setter
    def artifact_storage_source_uri(self, artifact_storage_source_uri):
        """Sets the artifact_storage_source_uri of this Source.

        If provided, the input binary artifacts for the build came from this location.

        :param artifact_storage_source_uri: The artifact_storage_source_uri of this Source.
        :type artifact_storage_source_uri: str
        """

        self._artifact_storage_source_uri = artifact_storage_source_uri

    @property
    def context(self):
        """Gets the context of this Source.


        :return: The context of this Source.
        :rtype: SourceContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Source.


        :param context: The context of this Source.
        :type context: SourceContext
        """

        self._context = context

    @property
    def file_hashes(self):
        """Gets the file_hashes of this Source.

        Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.

        :return: The file_hashes of this Source.
        :rtype: Dict[str, FileHashes]
        """
        return self._file_hashes

    @file_hashes.setter
    def file_hashes(self, file_hashes):
        """Sets the file_hashes of this Source.

        Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.

        :param file_hashes: The file_hashes of this Source.
        :type file_hashes: Dict[str, FileHashes]
        """

        self._file_hashes = file_hashes
