# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Completeness(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: bool=None, environment: bool=None, materials: bool=None):
        """Completeness - a model defined in OpenAPI

        :param arguments: The arguments of this Completeness.
        :param environment: The environment of this Completeness.
        :param materials: The materials of this Completeness.
        """
        self.openapi_types = {
            'arguments': bool,
            'environment': bool,
            'materials': bool
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'environment': 'environment',
            'materials': 'materials'
        }

        self._arguments = arguments
        self._environment = environment
        self._materials = materials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Completeness':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Completeness of this Completeness.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this Completeness.

        If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.

        :return: The arguments of this Completeness.
        :rtype: bool
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this Completeness.

        If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.

        :param arguments: The arguments of this Completeness.
        :type arguments: bool
        """

        self._arguments = arguments

    @property
    def environment(self):
        """Gets the environment of this Completeness.

        If true, the builder claims that recipe.environment is claimed to be complete.

        :return: The environment of this Completeness.
        :rtype: bool
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Completeness.

        If true, the builder claims that recipe.environment is claimed to be complete.

        :param environment: The environment of this Completeness.
        :type environment: bool
        """

        self._environment = environment

    @property
    def materials(self):
        """Gets the materials of this Completeness.

        If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".

        :return: The materials of this Completeness.
        :rtype: bool
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this Completeness.

        If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".

        :param materials: The materials of this Completeness.
        :type materials: bool
        """

        self._materials = materials
