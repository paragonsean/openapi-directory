/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlacesV1PlacePlusCode.h
 *
 * Plus code (http://plus.codes) is a location reference with two formats: global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle, and compound code, replacing the prefix with a reference location.
 */

#ifndef OAIGoogleMapsPlacesV1PlacePlusCode_H
#define OAIGoogleMapsPlacesV1PlacePlusCode_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleMapsPlacesV1PlacePlusCode : public OAIObject {
public:
    OAIGoogleMapsPlacesV1PlacePlusCode();
    OAIGoogleMapsPlacesV1PlacePlusCode(QString json);
    ~OAIGoogleMapsPlacesV1PlacePlusCode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompoundCode() const;
    void setCompoundCode(const QString &compound_code);
    bool is_compound_code_Set() const;
    bool is_compound_code_Valid() const;

    QString getGlobalCode() const;
    void setGlobalCode(const QString &global_code);
    bool is_global_code_Set() const;
    bool is_global_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compound_code;
    bool m_compound_code_isSet;
    bool m_compound_code_isValid;

    QString m_global_code;
    bool m_global_code_isSet;
    bool m_global_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlacesV1PlacePlusCode)

#endif // OAIGoogleMapsPlacesV1PlacePlusCode_H
