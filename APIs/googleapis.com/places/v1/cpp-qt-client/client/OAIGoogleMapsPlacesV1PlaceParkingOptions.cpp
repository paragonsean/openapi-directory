/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceParkingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceParkingOptions::OAIGoogleMapsPlacesV1PlaceParkingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceParkingOptions::OAIGoogleMapsPlacesV1PlaceParkingOptions() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceParkingOptions::~OAIGoogleMapsPlacesV1PlaceParkingOptions() {}

void OAIGoogleMapsPlacesV1PlaceParkingOptions::initializeModel() {

    m_free_garage_parking_isSet = false;
    m_free_garage_parking_isValid = false;

    m_free_parking_lot_isSet = false;
    m_free_parking_lot_isValid = false;

    m_free_street_parking_isSet = false;
    m_free_street_parking_isValid = false;

    m_paid_garage_parking_isSet = false;
    m_paid_garage_parking_isValid = false;

    m_paid_parking_lot_isSet = false;
    m_paid_parking_lot_isValid = false;

    m_paid_street_parking_isSet = false;
    m_paid_street_parking_isValid = false;

    m_valet_parking_isSet = false;
    m_valet_parking_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceParkingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceParkingOptions::fromJsonObject(QJsonObject json) {

    m_free_garage_parking_isValid = ::OpenAPI::fromJsonValue(m_free_garage_parking, json[QString("freeGarageParking")]);
    m_free_garage_parking_isSet = !json[QString("freeGarageParking")].isNull() && m_free_garage_parking_isValid;

    m_free_parking_lot_isValid = ::OpenAPI::fromJsonValue(m_free_parking_lot, json[QString("freeParkingLot")]);
    m_free_parking_lot_isSet = !json[QString("freeParkingLot")].isNull() && m_free_parking_lot_isValid;

    m_free_street_parking_isValid = ::OpenAPI::fromJsonValue(m_free_street_parking, json[QString("freeStreetParking")]);
    m_free_street_parking_isSet = !json[QString("freeStreetParking")].isNull() && m_free_street_parking_isValid;

    m_paid_garage_parking_isValid = ::OpenAPI::fromJsonValue(m_paid_garage_parking, json[QString("paidGarageParking")]);
    m_paid_garage_parking_isSet = !json[QString("paidGarageParking")].isNull() && m_paid_garage_parking_isValid;

    m_paid_parking_lot_isValid = ::OpenAPI::fromJsonValue(m_paid_parking_lot, json[QString("paidParkingLot")]);
    m_paid_parking_lot_isSet = !json[QString("paidParkingLot")].isNull() && m_paid_parking_lot_isValid;

    m_paid_street_parking_isValid = ::OpenAPI::fromJsonValue(m_paid_street_parking, json[QString("paidStreetParking")]);
    m_paid_street_parking_isSet = !json[QString("paidStreetParking")].isNull() && m_paid_street_parking_isValid;

    m_valet_parking_isValid = ::OpenAPI::fromJsonValue(m_valet_parking, json[QString("valetParking")]);
    m_valet_parking_isSet = !json[QString("valetParking")].isNull() && m_valet_parking_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceParkingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceParkingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_free_garage_parking_isSet) {
        obj.insert(QString("freeGarageParking"), ::OpenAPI::toJsonValue(m_free_garage_parking));
    }
    if (m_free_parking_lot_isSet) {
        obj.insert(QString("freeParkingLot"), ::OpenAPI::toJsonValue(m_free_parking_lot));
    }
    if (m_free_street_parking_isSet) {
        obj.insert(QString("freeStreetParking"), ::OpenAPI::toJsonValue(m_free_street_parking));
    }
    if (m_paid_garage_parking_isSet) {
        obj.insert(QString("paidGarageParking"), ::OpenAPI::toJsonValue(m_paid_garage_parking));
    }
    if (m_paid_parking_lot_isSet) {
        obj.insert(QString("paidParkingLot"), ::OpenAPI::toJsonValue(m_paid_parking_lot));
    }
    if (m_paid_street_parking_isSet) {
        obj.insert(QString("paidStreetParking"), ::OpenAPI::toJsonValue(m_paid_street_parking));
    }
    if (m_valet_parking_isSet) {
        obj.insert(QString("valetParking"), ::OpenAPI::toJsonValue(m_valet_parking));
    }
    return obj;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isFreeGarageParking() const {
    return m_free_garage_parking;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setFreeGarageParking(const bool &free_garage_parking) {
    m_free_garage_parking = free_garage_parking;
    m_free_garage_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_garage_parking_Set() const{
    return m_free_garage_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_garage_parking_Valid() const{
    return m_free_garage_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isFreeParkingLot() const {
    return m_free_parking_lot;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setFreeParkingLot(const bool &free_parking_lot) {
    m_free_parking_lot = free_parking_lot;
    m_free_parking_lot_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_parking_lot_Set() const{
    return m_free_parking_lot_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_parking_lot_Valid() const{
    return m_free_parking_lot_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isFreeStreetParking() const {
    return m_free_street_parking;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setFreeStreetParking(const bool &free_street_parking) {
    m_free_street_parking = free_street_parking;
    m_free_street_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_street_parking_Set() const{
    return m_free_street_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_free_street_parking_Valid() const{
    return m_free_street_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isPaidGarageParking() const {
    return m_paid_garage_parking;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setPaidGarageParking(const bool &paid_garage_parking) {
    m_paid_garage_parking = paid_garage_parking;
    m_paid_garage_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_garage_parking_Set() const{
    return m_paid_garage_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_garage_parking_Valid() const{
    return m_paid_garage_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isPaidParkingLot() const {
    return m_paid_parking_lot;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setPaidParkingLot(const bool &paid_parking_lot) {
    m_paid_parking_lot = paid_parking_lot;
    m_paid_parking_lot_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_parking_lot_Set() const{
    return m_paid_parking_lot_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_parking_lot_Valid() const{
    return m_paid_parking_lot_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isPaidStreetParking() const {
    return m_paid_street_parking;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setPaidStreetParking(const bool &paid_street_parking) {
    m_paid_street_parking = paid_street_parking;
    m_paid_street_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_street_parking_Set() const{
    return m_paid_street_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_paid_street_parking_Valid() const{
    return m_paid_street_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isValetParking() const {
    return m_valet_parking;
}
void OAIGoogleMapsPlacesV1PlaceParkingOptions::setValetParking(const bool &valet_parking) {
    m_valet_parking = valet_parking;
    m_valet_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_valet_parking_Set() const{
    return m_valet_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::is_valet_parking_Valid() const{
    return m_valet_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_garage_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_parking_lot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_street_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_garage_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_parking_lot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_street_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valet_parking_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceParkingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
