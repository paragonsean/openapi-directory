/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::~OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction() {}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::initializeModel() {

    m_distance_meters_isSet = false;
    m_distance_meters_isValid = false;

    m_place_isSet = false;
    m_place_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_structured_format_isSet = false;
    m_structured_format_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::fromJsonObject(QJsonObject json) {

    m_distance_meters_isValid = ::OpenAPI::fromJsonValue(m_distance_meters, json[QString("distanceMeters")]);
    m_distance_meters_isSet = !json[QString("distanceMeters")].isNull() && m_distance_meters_isValid;

    m_place_isValid = ::OpenAPI::fromJsonValue(m_place, json[QString("place")]);
    m_place_isSet = !json[QString("place")].isNull() && m_place_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_structured_format_isValid = ::OpenAPI::fromJsonValue(m_structured_format, json[QString("structuredFormat")]);
    m_structured_format_isSet = !json[QString("structuredFormat")].isNull() && m_structured_format_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_distance_meters_isSet) {
        obj.insert(QString("distanceMeters"), ::OpenAPI::toJsonValue(m_distance_meters));
    }
    if (m_place_isSet) {
        obj.insert(QString("place"), ::OpenAPI::toJsonValue(m_place));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_structured_format.isSet()) {
        obj.insert(QString("structuredFormat"), ::OpenAPI::toJsonValue(m_structured_format));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

qint32 OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getDistanceMeters() const {
    return m_distance_meters;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setDistanceMeters(const qint32 &distance_meters) {
    m_distance_meters = distance_meters;
    m_distance_meters_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_distance_meters_Set() const{
    return m_distance_meters_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_distance_meters_Valid() const{
    return m_distance_meters_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getPlace() const {
    return m_place;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setPlace(const QString &place) {
    m_place = place;
    m_place_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_place_Set() const{
    return m_place_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_place_Valid() const{
    return m_place_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getPlaceId() const {
    return m_place_id;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_place_id_Valid() const{
    return m_place_id_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getStructuredFormat() const {
    return m_structured_format;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setStructuredFormat(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat &structured_format) {
    m_structured_format = structured_format;
    m_structured_format_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_structured_format_Set() const{
    return m_structured_format_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_structured_format_Valid() const{
    return m_structured_format_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getText() const {
    return m_text;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setText(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_text_Valid() const{
    return m_text_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::getTypes() const {
    return m_types;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distance_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structured_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
