/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1EVChargeOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1EVChargeOptions::OAIGoogleMapsPlacesV1EVChargeOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1EVChargeOptions::OAIGoogleMapsPlacesV1EVChargeOptions() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1EVChargeOptions::~OAIGoogleMapsPlacesV1EVChargeOptions() {}

void OAIGoogleMapsPlacesV1EVChargeOptions::initializeModel() {

    m_connector_aggregation_isSet = false;
    m_connector_aggregation_isValid = false;

    m_connector_count_isSet = false;
    m_connector_count_isValid = false;
}

void OAIGoogleMapsPlacesV1EVChargeOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1EVChargeOptions::fromJsonObject(QJsonObject json) {

    m_connector_aggregation_isValid = ::OpenAPI::fromJsonValue(m_connector_aggregation, json[QString("connectorAggregation")]);
    m_connector_aggregation_isSet = !json[QString("connectorAggregation")].isNull() && m_connector_aggregation_isValid;

    m_connector_count_isValid = ::OpenAPI::fromJsonValue(m_connector_count, json[QString("connectorCount")]);
    m_connector_count_isSet = !json[QString("connectorCount")].isNull() && m_connector_count_isValid;
}

QString OAIGoogleMapsPlacesV1EVChargeOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1EVChargeOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_aggregation.size() > 0) {
        obj.insert(QString("connectorAggregation"), ::OpenAPI::toJsonValue(m_connector_aggregation));
    }
    if (m_connector_count_isSet) {
        obj.insert(QString("connectorCount"), ::OpenAPI::toJsonValue(m_connector_count));
    }
    return obj;
}

QList<OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> OAIGoogleMapsPlacesV1EVChargeOptions::getConnectorAggregation() const {
    return m_connector_aggregation;
}
void OAIGoogleMapsPlacesV1EVChargeOptions::setConnectorAggregation(const QList<OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> &connector_aggregation) {
    m_connector_aggregation = connector_aggregation;
    m_connector_aggregation_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::is_connector_aggregation_Set() const{
    return m_connector_aggregation_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::is_connector_aggregation_Valid() const{
    return m_connector_aggregation_isValid;
}

qint32 OAIGoogleMapsPlacesV1EVChargeOptions::getConnectorCount() const {
    return m_connector_count;
}
void OAIGoogleMapsPlacesV1EVChargeOptions::setConnectorCount(const qint32 &connector_count) {
    m_connector_count = connector_count;
    m_connector_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::is_connector_count_Set() const{
    return m_connector_count_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::is_connector_count_Valid() const{
    return m_connector_count_isValid;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_aggregation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1EVChargeOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
