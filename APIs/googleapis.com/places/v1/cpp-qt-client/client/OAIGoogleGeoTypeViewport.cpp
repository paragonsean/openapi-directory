/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleGeoTypeViewport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleGeoTypeViewport::OAIGoogleGeoTypeViewport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleGeoTypeViewport::OAIGoogleGeoTypeViewport() {
    this->initializeModel();
}

OAIGoogleGeoTypeViewport::~OAIGoogleGeoTypeViewport() {}

void OAIGoogleGeoTypeViewport::initializeModel() {

    m_high_isSet = false;
    m_high_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;
}

void OAIGoogleGeoTypeViewport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleGeoTypeViewport::fromJsonObject(QJsonObject json) {

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;
}

QString OAIGoogleGeoTypeViewport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleGeoTypeViewport::asJsonObject() const {
    QJsonObject obj;
    if (m_high.isSet()) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_low.isSet()) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    return obj;
}

OAIGoogleTypeLatLng OAIGoogleGeoTypeViewport::getHigh() const {
    return m_high;
}
void OAIGoogleGeoTypeViewport::setHigh(const OAIGoogleTypeLatLng &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIGoogleGeoTypeViewport::is_high_Set() const{
    return m_high_isSet;
}

bool OAIGoogleGeoTypeViewport::is_high_Valid() const{
    return m_high_isValid;
}

OAIGoogleTypeLatLng OAIGoogleGeoTypeViewport::getLow() const {
    return m_low;
}
void OAIGoogleGeoTypeViewport::setLow(const OAIGoogleTypeLatLng &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIGoogleGeoTypeViewport::is_low_Set() const{
    return m_low_isSet;
}

bool OAIGoogleGeoTypeViewport::is_low_Valid() const{
    return m_low_isValid;
}

bool OAIGoogleGeoTypeViewport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_low.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleGeoTypeViewport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
