/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlacePlusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlacePlusCode::OAIGoogleMapsPlacesV1PlacePlusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlacePlusCode::OAIGoogleMapsPlacesV1PlacePlusCode() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlacePlusCode::~OAIGoogleMapsPlacesV1PlacePlusCode() {}

void OAIGoogleMapsPlacesV1PlacePlusCode::initializeModel() {

    m_compound_code_isSet = false;
    m_compound_code_isValid = false;

    m_global_code_isSet = false;
    m_global_code_isValid = false;
}

void OAIGoogleMapsPlacesV1PlacePlusCode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlacePlusCode::fromJsonObject(QJsonObject json) {

    m_compound_code_isValid = ::OpenAPI::fromJsonValue(m_compound_code, json[QString("compoundCode")]);
    m_compound_code_isSet = !json[QString("compoundCode")].isNull() && m_compound_code_isValid;

    m_global_code_isValid = ::OpenAPI::fromJsonValue(m_global_code, json[QString("globalCode")]);
    m_global_code_isSet = !json[QString("globalCode")].isNull() && m_global_code_isValid;
}

QString OAIGoogleMapsPlacesV1PlacePlusCode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlacePlusCode::asJsonObject() const {
    QJsonObject obj;
    if (m_compound_code_isSet) {
        obj.insert(QString("compoundCode"), ::OpenAPI::toJsonValue(m_compound_code));
    }
    if (m_global_code_isSet) {
        obj.insert(QString("globalCode"), ::OpenAPI::toJsonValue(m_global_code));
    }
    return obj;
}

QString OAIGoogleMapsPlacesV1PlacePlusCode::getCompoundCode() const {
    return m_compound_code;
}
void OAIGoogleMapsPlacesV1PlacePlusCode::setCompoundCode(const QString &compound_code) {
    m_compound_code = compound_code;
    m_compound_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::is_compound_code_Set() const{
    return m_compound_code_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::is_compound_code_Valid() const{
    return m_compound_code_isValid;
}

QString OAIGoogleMapsPlacesV1PlacePlusCode::getGlobalCode() const {
    return m_global_code;
}
void OAIGoogleMapsPlacesV1PlacePlusCode::setGlobalCode(const QString &global_code) {
    m_global_code = global_code;
    m_global_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::is_global_code_Set() const{
    return m_global_code_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::is_global_code_Valid() const{
    return m_global_code_isValid;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compound_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlacePlusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
