/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlacePaymentOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlacePaymentOptions::OAIGoogleMapsPlacesV1PlacePaymentOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlacePaymentOptions::OAIGoogleMapsPlacesV1PlacePaymentOptions() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlacePaymentOptions::~OAIGoogleMapsPlacesV1PlacePaymentOptions() {}

void OAIGoogleMapsPlacesV1PlacePaymentOptions::initializeModel() {

    m_accepts_cash_only_isSet = false;
    m_accepts_cash_only_isValid = false;

    m_accepts_credit_cards_isSet = false;
    m_accepts_credit_cards_isValid = false;

    m_accepts_debit_cards_isSet = false;
    m_accepts_debit_cards_isValid = false;

    m_accepts_nfc_isSet = false;
    m_accepts_nfc_isValid = false;
}

void OAIGoogleMapsPlacesV1PlacePaymentOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlacePaymentOptions::fromJsonObject(QJsonObject json) {

    m_accepts_cash_only_isValid = ::OpenAPI::fromJsonValue(m_accepts_cash_only, json[QString("acceptsCashOnly")]);
    m_accepts_cash_only_isSet = !json[QString("acceptsCashOnly")].isNull() && m_accepts_cash_only_isValid;

    m_accepts_credit_cards_isValid = ::OpenAPI::fromJsonValue(m_accepts_credit_cards, json[QString("acceptsCreditCards")]);
    m_accepts_credit_cards_isSet = !json[QString("acceptsCreditCards")].isNull() && m_accepts_credit_cards_isValid;

    m_accepts_debit_cards_isValid = ::OpenAPI::fromJsonValue(m_accepts_debit_cards, json[QString("acceptsDebitCards")]);
    m_accepts_debit_cards_isSet = !json[QString("acceptsDebitCards")].isNull() && m_accepts_debit_cards_isValid;

    m_accepts_nfc_isValid = ::OpenAPI::fromJsonValue(m_accepts_nfc, json[QString("acceptsNfc")]);
    m_accepts_nfc_isSet = !json[QString("acceptsNfc")].isNull() && m_accepts_nfc_isValid;
}

QString OAIGoogleMapsPlacesV1PlacePaymentOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlacePaymentOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_accepts_cash_only_isSet) {
        obj.insert(QString("acceptsCashOnly"), ::OpenAPI::toJsonValue(m_accepts_cash_only));
    }
    if (m_accepts_credit_cards_isSet) {
        obj.insert(QString("acceptsCreditCards"), ::OpenAPI::toJsonValue(m_accepts_credit_cards));
    }
    if (m_accepts_debit_cards_isSet) {
        obj.insert(QString("acceptsDebitCards"), ::OpenAPI::toJsonValue(m_accepts_debit_cards));
    }
    if (m_accepts_nfc_isSet) {
        obj.insert(QString("acceptsNfc"), ::OpenAPI::toJsonValue(m_accepts_nfc));
    }
    return obj;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isAcceptsCashOnly() const {
    return m_accepts_cash_only;
}
void OAIGoogleMapsPlacesV1PlacePaymentOptions::setAcceptsCashOnly(const bool &accepts_cash_only) {
    m_accepts_cash_only = accepts_cash_only;
    m_accepts_cash_only_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_cash_only_Set() const{
    return m_accepts_cash_only_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_cash_only_Valid() const{
    return m_accepts_cash_only_isValid;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isAcceptsCreditCards() const {
    return m_accepts_credit_cards;
}
void OAIGoogleMapsPlacesV1PlacePaymentOptions::setAcceptsCreditCards(const bool &accepts_credit_cards) {
    m_accepts_credit_cards = accepts_credit_cards;
    m_accepts_credit_cards_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_credit_cards_Set() const{
    return m_accepts_credit_cards_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_credit_cards_Valid() const{
    return m_accepts_credit_cards_isValid;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isAcceptsDebitCards() const {
    return m_accepts_debit_cards;
}
void OAIGoogleMapsPlacesV1PlacePaymentOptions::setAcceptsDebitCards(const bool &accepts_debit_cards) {
    m_accepts_debit_cards = accepts_debit_cards;
    m_accepts_debit_cards_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_debit_cards_Set() const{
    return m_accepts_debit_cards_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_debit_cards_Valid() const{
    return m_accepts_debit_cards_isValid;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isAcceptsNfc() const {
    return m_accepts_nfc;
}
void OAIGoogleMapsPlacesV1PlacePaymentOptions::setAcceptsNfc(const bool &accepts_nfc) {
    m_accepts_nfc = accepts_nfc;
    m_accepts_nfc_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_nfc_Set() const{
    return m_accepts_nfc_isSet;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::is_accepts_nfc_Valid() const{
    return m_accepts_nfc_isValid;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepts_cash_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_credit_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_debit_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_nfc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlacePaymentOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
