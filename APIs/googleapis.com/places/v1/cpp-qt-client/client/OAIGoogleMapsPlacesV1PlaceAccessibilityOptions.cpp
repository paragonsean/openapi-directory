/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceAccessibilityOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::OAIGoogleMapsPlacesV1PlaceAccessibilityOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::OAIGoogleMapsPlacesV1PlaceAccessibilityOptions() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::~OAIGoogleMapsPlacesV1PlaceAccessibilityOptions() {}

void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::initializeModel() {

    m_wheelchair_accessible_entrance_isSet = false;
    m_wheelchair_accessible_entrance_isValid = false;

    m_wheelchair_accessible_parking_isSet = false;
    m_wheelchair_accessible_parking_isValid = false;

    m_wheelchair_accessible_restroom_isSet = false;
    m_wheelchair_accessible_restroom_isValid = false;

    m_wheelchair_accessible_seating_isSet = false;
    m_wheelchair_accessible_seating_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::fromJsonObject(QJsonObject json) {

    m_wheelchair_accessible_entrance_isValid = ::OpenAPI::fromJsonValue(m_wheelchair_accessible_entrance, json[QString("wheelchairAccessibleEntrance")]);
    m_wheelchair_accessible_entrance_isSet = !json[QString("wheelchairAccessibleEntrance")].isNull() && m_wheelchair_accessible_entrance_isValid;

    m_wheelchair_accessible_parking_isValid = ::OpenAPI::fromJsonValue(m_wheelchair_accessible_parking, json[QString("wheelchairAccessibleParking")]);
    m_wheelchair_accessible_parking_isSet = !json[QString("wheelchairAccessibleParking")].isNull() && m_wheelchair_accessible_parking_isValid;

    m_wheelchair_accessible_restroom_isValid = ::OpenAPI::fromJsonValue(m_wheelchair_accessible_restroom, json[QString("wheelchairAccessibleRestroom")]);
    m_wheelchair_accessible_restroom_isSet = !json[QString("wheelchairAccessibleRestroom")].isNull() && m_wheelchair_accessible_restroom_isValid;

    m_wheelchair_accessible_seating_isValid = ::OpenAPI::fromJsonValue(m_wheelchair_accessible_seating, json[QString("wheelchairAccessibleSeating")]);
    m_wheelchair_accessible_seating_isSet = !json[QString("wheelchairAccessibleSeating")].isNull() && m_wheelchair_accessible_seating_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_wheelchair_accessible_entrance_isSet) {
        obj.insert(QString("wheelchairAccessibleEntrance"), ::OpenAPI::toJsonValue(m_wheelchair_accessible_entrance));
    }
    if (m_wheelchair_accessible_parking_isSet) {
        obj.insert(QString("wheelchairAccessibleParking"), ::OpenAPI::toJsonValue(m_wheelchair_accessible_parking));
    }
    if (m_wheelchair_accessible_restroom_isSet) {
        obj.insert(QString("wheelchairAccessibleRestroom"), ::OpenAPI::toJsonValue(m_wheelchair_accessible_restroom));
    }
    if (m_wheelchair_accessible_seating_isSet) {
        obj.insert(QString("wheelchairAccessibleSeating"), ::OpenAPI::toJsonValue(m_wheelchair_accessible_seating));
    }
    return obj;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isWheelchairAccessibleEntrance() const {
    return m_wheelchair_accessible_entrance;
}
void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::setWheelchairAccessibleEntrance(const bool &wheelchair_accessible_entrance) {
    m_wheelchair_accessible_entrance = wheelchair_accessible_entrance;
    m_wheelchair_accessible_entrance_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_entrance_Set() const{
    return m_wheelchair_accessible_entrance_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_entrance_Valid() const{
    return m_wheelchair_accessible_entrance_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isWheelchairAccessibleParking() const {
    return m_wheelchair_accessible_parking;
}
void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::setWheelchairAccessibleParking(const bool &wheelchair_accessible_parking) {
    m_wheelchair_accessible_parking = wheelchair_accessible_parking;
    m_wheelchair_accessible_parking_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_parking_Set() const{
    return m_wheelchair_accessible_parking_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_parking_Valid() const{
    return m_wheelchair_accessible_parking_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isWheelchairAccessibleRestroom() const {
    return m_wheelchair_accessible_restroom;
}
void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::setWheelchairAccessibleRestroom(const bool &wheelchair_accessible_restroom) {
    m_wheelchair_accessible_restroom = wheelchair_accessible_restroom;
    m_wheelchair_accessible_restroom_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_restroom_Set() const{
    return m_wheelchair_accessible_restroom_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_restroom_Valid() const{
    return m_wheelchair_accessible_restroom_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isWheelchairAccessibleSeating() const {
    return m_wheelchair_accessible_seating;
}
void OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::setWheelchairAccessibleSeating(const bool &wheelchair_accessible_seating) {
    m_wheelchair_accessible_seating = wheelchair_accessible_seating;
    m_wheelchair_accessible_seating_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_seating_Set() const{
    return m_wheelchair_accessible_seating_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::is_wheelchair_accessible_seating_Valid() const{
    return m_wheelchair_accessible_seating_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wheelchair_accessible_entrance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wheelchair_accessible_parking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wheelchair_accessible_restroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wheelchair_accessible_seating_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceAccessibilityOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
