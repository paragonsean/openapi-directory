/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlacesV1SearchNearbyRequest.h
 *
 * Request proto for Search Nearby. 
 */

#ifndef OAIGoogleMapsPlacesV1SearchNearbyRequest_H
#define OAIGoogleMapsPlacesV1SearchNearbyRequest_H

#include <QJsonObject>

#include "OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction;

class OAIGoogleMapsPlacesV1SearchNearbyRequest : public OAIObject {
public:
    OAIGoogleMapsPlacesV1SearchNearbyRequest();
    OAIGoogleMapsPlacesV1SearchNearbyRequest(QString json);
    ~OAIGoogleMapsPlacesV1SearchNearbyRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getExcludedPrimaryTypes() const;
    void setExcludedPrimaryTypes(const QList<QString> &excluded_primary_types);
    bool is_excluded_primary_types_Set() const;
    bool is_excluded_primary_types_Valid() const;

    QList<QString> getExcludedTypes() const;
    void setExcludedTypes(const QList<QString> &excluded_types);
    bool is_excluded_types_Set() const;
    bool is_excluded_types_Valid() const;

    QList<QString> getIncludedPrimaryTypes() const;
    void setIncludedPrimaryTypes(const QList<QString> &included_primary_types);
    bool is_included_primary_types_Set() const;
    bool is_included_primary_types_Valid() const;

    QList<QString> getIncludedTypes() const;
    void setIncludedTypes(const QList<QString> &included_types);
    bool is_included_types_Set() const;
    bool is_included_types_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction getLocationRestriction() const;
    void setLocationRestriction(const OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction &location_restriction);
    bool is_location_restriction_Set() const;
    bool is_location_restriction_Valid() const;

    qint32 getMaxResultCount() const;
    void setMaxResultCount(const qint32 &max_result_count);
    bool is_max_result_count_Set() const;
    bool is_max_result_count_Valid() const;

    QString getRankPreference() const;
    void setRankPreference(const QString &rank_preference);
    bool is_rank_preference_Set() const;
    bool is_rank_preference_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_excluded_primary_types;
    bool m_excluded_primary_types_isSet;
    bool m_excluded_primary_types_isValid;

    QList<QString> m_excluded_types;
    bool m_excluded_types_isSet;
    bool m_excluded_types_isValid;

    QList<QString> m_included_primary_types;
    bool m_included_primary_types_isSet;
    bool m_included_primary_types_isValid;

    QList<QString> m_included_types;
    bool m_included_types_isSet;
    bool m_included_types_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction m_location_restriction;
    bool m_location_restriction_isSet;
    bool m_location_restriction_isValid;

    qint32 m_max_result_count;
    bool m_max_result_count_isSet;
    bool m_max_result_count_isValid;

    QString m_rank_preference;
    bool m_rank_preference_isSet;
    bool m_rank_preference_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlacesV1SearchNearbyRequest)

#endif // OAIGoogleMapsPlacesV1SearchNearbyRequest_H
