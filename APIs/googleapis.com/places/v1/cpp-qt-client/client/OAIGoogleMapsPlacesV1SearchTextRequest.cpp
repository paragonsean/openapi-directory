/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1SearchTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1SearchTextRequest::OAIGoogleMapsPlacesV1SearchTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1SearchTextRequest::OAIGoogleMapsPlacesV1SearchTextRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1SearchTextRequest::~OAIGoogleMapsPlacesV1SearchTextRequest() {}

void OAIGoogleMapsPlacesV1SearchTextRequest::initializeModel() {

    m_included_type_isSet = false;
    m_included_type_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_location_bias_isSet = false;
    m_location_bias_isValid = false;

    m_location_restriction_isSet = false;
    m_location_restriction_isValid = false;

    m_max_result_count_isSet = false;
    m_max_result_count_isValid = false;

    m_min_rating_isSet = false;
    m_min_rating_isValid = false;

    m_open_now_isSet = false;
    m_open_now_isValid = false;

    m_price_levels_isSet = false;
    m_price_levels_isValid = false;

    m_rank_preference_isSet = false;
    m_rank_preference_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_strict_type_filtering_isSet = false;
    m_strict_type_filtering_isValid = false;

    m_text_query_isSet = false;
    m_text_query_isValid = false;
}

void OAIGoogleMapsPlacesV1SearchTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1SearchTextRequest::fromJsonObject(QJsonObject json) {

    m_included_type_isValid = ::OpenAPI::fromJsonValue(m_included_type, json[QString("includedType")]);
    m_included_type_isSet = !json[QString("includedType")].isNull() && m_included_type_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_location_bias_isValid = ::OpenAPI::fromJsonValue(m_location_bias, json[QString("locationBias")]);
    m_location_bias_isSet = !json[QString("locationBias")].isNull() && m_location_bias_isValid;

    m_location_restriction_isValid = ::OpenAPI::fromJsonValue(m_location_restriction, json[QString("locationRestriction")]);
    m_location_restriction_isSet = !json[QString("locationRestriction")].isNull() && m_location_restriction_isValid;

    m_max_result_count_isValid = ::OpenAPI::fromJsonValue(m_max_result_count, json[QString("maxResultCount")]);
    m_max_result_count_isSet = !json[QString("maxResultCount")].isNull() && m_max_result_count_isValid;

    m_min_rating_isValid = ::OpenAPI::fromJsonValue(m_min_rating, json[QString("minRating")]);
    m_min_rating_isSet = !json[QString("minRating")].isNull() && m_min_rating_isValid;

    m_open_now_isValid = ::OpenAPI::fromJsonValue(m_open_now, json[QString("openNow")]);
    m_open_now_isSet = !json[QString("openNow")].isNull() && m_open_now_isValid;

    m_price_levels_isValid = ::OpenAPI::fromJsonValue(m_price_levels, json[QString("priceLevels")]);
    m_price_levels_isSet = !json[QString("priceLevels")].isNull() && m_price_levels_isValid;

    m_rank_preference_isValid = ::OpenAPI::fromJsonValue(m_rank_preference, json[QString("rankPreference")]);
    m_rank_preference_isSet = !json[QString("rankPreference")].isNull() && m_rank_preference_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_strict_type_filtering_isValid = ::OpenAPI::fromJsonValue(m_strict_type_filtering, json[QString("strictTypeFiltering")]);
    m_strict_type_filtering_isSet = !json[QString("strictTypeFiltering")].isNull() && m_strict_type_filtering_isValid;

    m_text_query_isValid = ::OpenAPI::fromJsonValue(m_text_query, json[QString("textQuery")]);
    m_text_query_isSet = !json[QString("textQuery")].isNull() && m_text_query_isValid;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1SearchTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_included_type_isSet) {
        obj.insert(QString("includedType"), ::OpenAPI::toJsonValue(m_included_type));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_location_bias.isSet()) {
        obj.insert(QString("locationBias"), ::OpenAPI::toJsonValue(m_location_bias));
    }
    if (m_location_restriction.isSet()) {
        obj.insert(QString("locationRestriction"), ::OpenAPI::toJsonValue(m_location_restriction));
    }
    if (m_max_result_count_isSet) {
        obj.insert(QString("maxResultCount"), ::OpenAPI::toJsonValue(m_max_result_count));
    }
    if (m_min_rating_isSet) {
        obj.insert(QString("minRating"), ::OpenAPI::toJsonValue(m_min_rating));
    }
    if (m_open_now_isSet) {
        obj.insert(QString("openNow"), ::OpenAPI::toJsonValue(m_open_now));
    }
    if (m_price_levels.size() > 0) {
        obj.insert(QString("priceLevels"), ::OpenAPI::toJsonValue(m_price_levels));
    }
    if (m_rank_preference_isSet) {
        obj.insert(QString("rankPreference"), ::OpenAPI::toJsonValue(m_rank_preference));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_strict_type_filtering_isSet) {
        obj.insert(QString("strictTypeFiltering"), ::OpenAPI::toJsonValue(m_strict_type_filtering));
    }
    if (m_text_query_isSet) {
        obj.insert(QString("textQuery"), ::OpenAPI::toJsonValue(m_text_query));
    }
    return obj;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::getIncludedType() const {
    return m_included_type;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setIncludedType(const QString &included_type) {
    m_included_type = included_type;
    m_included_type_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_included_type_Set() const{
    return m_included_type_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_included_type_Valid() const{
    return m_included_type_isValid;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleMapsPlacesV1SearchTextRequestLocationBias OAIGoogleMapsPlacesV1SearchTextRequest::getLocationBias() const {
    return m_location_bias;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setLocationBias(const OAIGoogleMapsPlacesV1SearchTextRequestLocationBias &location_bias) {
    m_location_bias = location_bias;
    m_location_bias_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_location_bias_Set() const{
    return m_location_bias_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_location_bias_Valid() const{
    return m_location_bias_isValid;
}

OAIGoogleMapsPlacesV1SearchTextRequestLocationRestriction OAIGoogleMapsPlacesV1SearchTextRequest::getLocationRestriction() const {
    return m_location_restriction;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setLocationRestriction(const OAIGoogleMapsPlacesV1SearchTextRequestLocationRestriction &location_restriction) {
    m_location_restriction = location_restriction;
    m_location_restriction_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_location_restriction_Set() const{
    return m_location_restriction_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_location_restriction_Valid() const{
    return m_location_restriction_isValid;
}

qint32 OAIGoogleMapsPlacesV1SearchTextRequest::getMaxResultCount() const {
    return m_max_result_count;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setMaxResultCount(const qint32 &max_result_count) {
    m_max_result_count = max_result_count;
    m_max_result_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_max_result_count_Set() const{
    return m_max_result_count_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_max_result_count_Valid() const{
    return m_max_result_count_isValid;
}

double OAIGoogleMapsPlacesV1SearchTextRequest::getMinRating() const {
    return m_min_rating;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setMinRating(const double &min_rating) {
    m_min_rating = min_rating;
    m_min_rating_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_min_rating_Set() const{
    return m_min_rating_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_min_rating_Valid() const{
    return m_min_rating_isValid;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::isOpenNow() const {
    return m_open_now;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setOpenNow(const bool &open_now) {
    m_open_now = open_now;
    m_open_now_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_open_now_Set() const{
    return m_open_now_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_open_now_Valid() const{
    return m_open_now_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1SearchTextRequest::getPriceLevels() const {
    return m_price_levels;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setPriceLevels(const QList<QString> &price_levels) {
    m_price_levels = price_levels;
    m_price_levels_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_price_levels_Set() const{
    return m_price_levels_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_price_levels_Valid() const{
    return m_price_levels_isValid;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::getRankPreference() const {
    return m_rank_preference;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setRankPreference(const QString &rank_preference) {
    m_rank_preference = rank_preference;
    m_rank_preference_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_rank_preference_Set() const{
    return m_rank_preference_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_rank_preference_Valid() const{
    return m_rank_preference_isValid;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::getRegionCode() const {
    return m_region_code;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::isStrictTypeFiltering() const {
    return m_strict_type_filtering;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setStrictTypeFiltering(const bool &strict_type_filtering) {
    m_strict_type_filtering = strict_type_filtering;
    m_strict_type_filtering_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_strict_type_filtering_Set() const{
    return m_strict_type_filtering_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_strict_type_filtering_Valid() const{
    return m_strict_type_filtering_isValid;
}

QString OAIGoogleMapsPlacesV1SearchTextRequest::getTextQuery() const {
    return m_text_query;
}
void OAIGoogleMapsPlacesV1SearchTextRequest::setTextQuery(const QString &text_query) {
    m_text_query = text_query;
    m_text_query_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_text_query_Set() const{
    return m_text_query_isSet;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::is_text_query_Valid() const{
    return m_text_query_isValid;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_included_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_bias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_type_filtering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1SearchTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
