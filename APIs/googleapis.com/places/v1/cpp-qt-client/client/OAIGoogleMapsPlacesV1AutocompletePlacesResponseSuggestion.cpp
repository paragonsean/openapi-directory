/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::~OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion() {}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::initializeModel() {

    m_place_prediction_isSet = false;
    m_place_prediction_isValid = false;

    m_query_prediction_isSet = false;
    m_query_prediction_isValid = false;
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::fromJsonObject(QJsonObject json) {

    m_place_prediction_isValid = ::OpenAPI::fromJsonValue(m_place_prediction, json[QString("placePrediction")]);
    m_place_prediction_isSet = !json[QString("placePrediction")].isNull() && m_place_prediction_isValid;

    m_query_prediction_isValid = ::OpenAPI::fromJsonValue(m_query_prediction, json[QString("queryPrediction")]);
    m_query_prediction_isSet = !json[QString("queryPrediction")].isNull() && m_query_prediction_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::asJsonObject() const {
    QJsonObject obj;
    if (m_place_prediction.isSet()) {
        obj.insert(QString("placePrediction"), ::OpenAPI::toJsonValue(m_place_prediction));
    }
    if (m_query_prediction.isSet()) {
        obj.insert(QString("queryPrediction"), ::OpenAPI::toJsonValue(m_query_prediction));
    }
    return obj;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::getPlacePrediction() const {
    return m_place_prediction;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::setPlacePrediction(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction &place_prediction) {
    m_place_prediction = place_prediction;
    m_place_prediction_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::is_place_prediction_Set() const{
    return m_place_prediction_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::is_place_prediction_Valid() const{
    return m_place_prediction_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::getQueryPrediction() const {
    return m_query_prediction;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::setQueryPrediction(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionQueryPrediction &query_prediction) {
    m_query_prediction = query_prediction;
    m_query_prediction_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::is_query_prediction_Set() const{
    return m_query_prediction_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::is_query_prediction_Valid() const{
    return m_query_prediction_isValid;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_place_prediction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_prediction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
