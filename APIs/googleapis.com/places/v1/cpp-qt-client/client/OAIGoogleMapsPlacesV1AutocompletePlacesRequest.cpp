/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1AutocompletePlacesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1AutocompletePlacesRequest::OAIGoogleMapsPlacesV1AutocompletePlacesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1AutocompletePlacesRequest::OAIGoogleMapsPlacesV1AutocompletePlacesRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1AutocompletePlacesRequest::~OAIGoogleMapsPlacesV1AutocompletePlacesRequest() {}

void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::initializeModel() {

    m_include_query_predictions_isSet = false;
    m_include_query_predictions_isValid = false;

    m_included_primary_types_isSet = false;
    m_included_primary_types_isValid = false;

    m_included_region_codes_isSet = false;
    m_included_region_codes_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_input_offset_isSet = false;
    m_input_offset_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_location_bias_isSet = false;
    m_location_bias_isValid = false;

    m_location_restriction_isSet = false;
    m_location_restriction_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_session_token_isSet = false;
    m_session_token_isValid = false;
}

void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::fromJsonObject(QJsonObject json) {

    m_include_query_predictions_isValid = ::OpenAPI::fromJsonValue(m_include_query_predictions, json[QString("includeQueryPredictions")]);
    m_include_query_predictions_isSet = !json[QString("includeQueryPredictions")].isNull() && m_include_query_predictions_isValid;

    m_included_primary_types_isValid = ::OpenAPI::fromJsonValue(m_included_primary_types, json[QString("includedPrimaryTypes")]);
    m_included_primary_types_isSet = !json[QString("includedPrimaryTypes")].isNull() && m_included_primary_types_isValid;

    m_included_region_codes_isValid = ::OpenAPI::fromJsonValue(m_included_region_codes, json[QString("includedRegionCodes")]);
    m_included_region_codes_isSet = !json[QString("includedRegionCodes")].isNull() && m_included_region_codes_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_input_offset_isValid = ::OpenAPI::fromJsonValue(m_input_offset, json[QString("inputOffset")]);
    m_input_offset_isSet = !json[QString("inputOffset")].isNull() && m_input_offset_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_location_bias_isValid = ::OpenAPI::fromJsonValue(m_location_bias, json[QString("locationBias")]);
    m_location_bias_isSet = !json[QString("locationBias")].isNull() && m_location_bias_isValid;

    m_location_restriction_isValid = ::OpenAPI::fromJsonValue(m_location_restriction, json[QString("locationRestriction")]);
    m_location_restriction_isSet = !json[QString("locationRestriction")].isNull() && m_location_restriction_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_session_token_isValid = ::OpenAPI::fromJsonValue(m_session_token, json[QString("sessionToken")]);
    m_session_token_isSet = !json[QString("sessionToken")].isNull() && m_session_token_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1AutocompletePlacesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_include_query_predictions_isSet) {
        obj.insert(QString("includeQueryPredictions"), ::OpenAPI::toJsonValue(m_include_query_predictions));
    }
    if (m_included_primary_types.size() > 0) {
        obj.insert(QString("includedPrimaryTypes"), ::OpenAPI::toJsonValue(m_included_primary_types));
    }
    if (m_included_region_codes.size() > 0) {
        obj.insert(QString("includedRegionCodes"), ::OpenAPI::toJsonValue(m_included_region_codes));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_input_offset_isSet) {
        obj.insert(QString("inputOffset"), ::OpenAPI::toJsonValue(m_input_offset));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_location_bias.isSet()) {
        obj.insert(QString("locationBias"), ::OpenAPI::toJsonValue(m_location_bias));
    }
    if (m_location_restriction.isSet()) {
        obj.insert(QString("locationRestriction"), ::OpenAPI::toJsonValue(m_location_restriction));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_session_token_isSet) {
        obj.insert(QString("sessionToken"), ::OpenAPI::toJsonValue(m_session_token));
    }
    return obj;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::isIncludeQueryPredictions() const {
    return m_include_query_predictions;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setIncludeQueryPredictions(const bool &include_query_predictions) {
    m_include_query_predictions = include_query_predictions;
    m_include_query_predictions_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_include_query_predictions_Set() const{
    return m_include_query_predictions_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_include_query_predictions_Valid() const{
    return m_include_query_predictions_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getIncludedPrimaryTypes() const {
    return m_included_primary_types;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setIncludedPrimaryTypes(const QList<QString> &included_primary_types) {
    m_included_primary_types = included_primary_types;
    m_included_primary_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_included_primary_types_Set() const{
    return m_included_primary_types_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_included_primary_types_Valid() const{
    return m_included_primary_types_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getIncludedRegionCodes() const {
    return m_included_region_codes;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setIncludedRegionCodes(const QList<QString> &included_region_codes) {
    m_included_region_codes = included_region_codes;
    m_included_region_codes_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_included_region_codes_Set() const{
    return m_included_region_codes_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_included_region_codes_Valid() const{
    return m_included_region_codes_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getInput() const {
    return m_input;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_input_Set() const{
    return m_input_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_input_Valid() const{
    return m_input_isValid;
}

qint32 OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getInputOffset() const {
    return m_input_offset;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setInputOffset(const qint32 &input_offset) {
    m_input_offset = input_offset;
    m_input_offset_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_input_offset_Set() const{
    return m_input_offset_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_input_offset_Valid() const{
    return m_input_offset_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getLocationBias() const {
    return m_location_bias;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setLocationBias(const OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias &location_bias) {
    m_location_bias = location_bias;
    m_location_bias_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_location_bias_Set() const{
    return m_location_bias_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_location_bias_Valid() const{
    return m_location_bias_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getLocationRestriction() const {
    return m_location_restriction;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setLocationRestriction(const OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction &location_restriction) {
    m_location_restriction = location_restriction;
    m_location_restriction_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_location_restriction_Set() const{
    return m_location_restriction_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_location_restriction_Valid() const{
    return m_location_restriction_isValid;
}

OAIGoogleTypeLatLng OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getOrigin() const {
    return m_origin;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setOrigin(const OAIGoogleTypeLatLng &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getRegionCode() const {
    return m_region_code;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesRequest::getSessionToken() const {
    return m_session_token;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesRequest::setSessionToken(const QString &session_token) {
    m_session_token = session_token;
    m_session_token_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_session_token_Set() const{
    return m_session_token_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::is_session_token_Valid() const{
    return m_session_token_isValid;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_query_predictions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_primary_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_region_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_bias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
