/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlacesV1AutocompletePlacesRequest.h
 *
 * Request proto for AutocompletePlaces.
 */

#ifndef OAIGoogleMapsPlacesV1AutocompletePlacesRequest_H
#define OAIGoogleMapsPlacesV1AutocompletePlacesRequest_H

#include <QJsonObject>

#include "OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias.h"
#include "OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction.h"
#include "OAIGoogleTypeLatLng.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias;
class OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction;
class OAIGoogleTypeLatLng;

class OAIGoogleMapsPlacesV1AutocompletePlacesRequest : public OAIObject {
public:
    OAIGoogleMapsPlacesV1AutocompletePlacesRequest();
    OAIGoogleMapsPlacesV1AutocompletePlacesRequest(QString json);
    ~OAIGoogleMapsPlacesV1AutocompletePlacesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIncludeQueryPredictions() const;
    void setIncludeQueryPredictions(const bool &include_query_predictions);
    bool is_include_query_predictions_Set() const;
    bool is_include_query_predictions_Valid() const;

    QList<QString> getIncludedPrimaryTypes() const;
    void setIncludedPrimaryTypes(const QList<QString> &included_primary_types);
    bool is_included_primary_types_Set() const;
    bool is_included_primary_types_Valid() const;

    QList<QString> getIncludedRegionCodes() const;
    void setIncludedRegionCodes(const QList<QString> &included_region_codes);
    bool is_included_region_codes_Set() const;
    bool is_included_region_codes_Valid() const;

    QString getInput() const;
    void setInput(const QString &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    qint32 getInputOffset() const;
    void setInputOffset(const qint32 &input_offset);
    bool is_input_offset_Set() const;
    bool is_input_offset_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias getLocationBias() const;
    void setLocationBias(const OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias &location_bias);
    bool is_location_bias_Set() const;
    bool is_location_bias_Valid() const;

    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction getLocationRestriction() const;
    void setLocationRestriction(const OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction &location_restriction);
    bool is_location_restriction_Set() const;
    bool is_location_restriction_Valid() const;

    OAIGoogleTypeLatLng getOrigin() const;
    void setOrigin(const OAIGoogleTypeLatLng &origin);
    bool is_origin_Set() const;
    bool is_origin_Valid() const;

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);
    bool is_region_code_Set() const;
    bool is_region_code_Valid() const;

    QString getSessionToken() const;
    void setSessionToken(const QString &session_token);
    bool is_session_token_Set() const;
    bool is_session_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_include_query_predictions;
    bool m_include_query_predictions_isSet;
    bool m_include_query_predictions_isValid;

    QList<QString> m_included_primary_types;
    bool m_included_primary_types_isSet;
    bool m_included_primary_types_isValid;

    QList<QString> m_included_region_codes;
    bool m_included_region_codes_isSet;
    bool m_included_region_codes_isValid;

    QString m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    qint32 m_input_offset;
    bool m_input_offset_isSet;
    bool m_input_offset_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias m_location_bias;
    bool m_location_bias_isSet;
    bool m_location_bias_isValid;

    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationRestriction m_location_restriction;
    bool m_location_restriction_isSet;
    bool m_location_restriction_isValid;

    OAIGoogleTypeLatLng m_origin;
    bool m_origin_isSet;
    bool m_origin_isValid;

    QString m_region_code;
    bool m_region_code_isSet;
    bool m_region_code_isValid;

    QString m_session_token;
    bool m_session_token_isSet;
    bool m_session_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlacesV1AutocompletePlacesRequest)

#endif // OAIGoogleMapsPlacesV1AutocompletePlacesRequest_H
