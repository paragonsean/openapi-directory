/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::~OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation() {}

void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::initializeModel() {

    m_availability_last_update_time_isSet = false;
    m_availability_last_update_time_isValid = false;

    m_available_count_isSet = false;
    m_available_count_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_max_charge_rate_kw_isSet = false;
    m_max_charge_rate_kw_isValid = false;

    m_out_of_service_count_isSet = false;
    m_out_of_service_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::fromJsonObject(QJsonObject json) {

    m_availability_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_availability_last_update_time, json[QString("availabilityLastUpdateTime")]);
    m_availability_last_update_time_isSet = !json[QString("availabilityLastUpdateTime")].isNull() && m_availability_last_update_time_isValid;

    m_available_count_isValid = ::OpenAPI::fromJsonValue(m_available_count, json[QString("availableCount")]);
    m_available_count_isSet = !json[QString("availableCount")].isNull() && m_available_count_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_max_charge_rate_kw_isValid = ::OpenAPI::fromJsonValue(m_max_charge_rate_kw, json[QString("maxChargeRateKw")]);
    m_max_charge_rate_kw_isSet = !json[QString("maxChargeRateKw")].isNull() && m_max_charge_rate_kw_isValid;

    m_out_of_service_count_isValid = ::OpenAPI::fromJsonValue(m_out_of_service_count, json[QString("outOfServiceCount")]);
    m_out_of_service_count_isSet = !json[QString("outOfServiceCount")].isNull() && m_out_of_service_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_last_update_time_isSet) {
        obj.insert(QString("availabilityLastUpdateTime"), ::OpenAPI::toJsonValue(m_availability_last_update_time));
    }
    if (m_available_count_isSet) {
        obj.insert(QString("availableCount"), ::OpenAPI::toJsonValue(m_available_count));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_max_charge_rate_kw_isSet) {
        obj.insert(QString("maxChargeRateKw"), ::OpenAPI::toJsonValue(m_max_charge_rate_kw));
    }
    if (m_out_of_service_count_isSet) {
        obj.insert(QString("outOfServiceCount"), ::OpenAPI::toJsonValue(m_out_of_service_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getAvailabilityLastUpdateTime() const {
    return m_availability_last_update_time;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setAvailabilityLastUpdateTime(const QString &availability_last_update_time) {
    m_availability_last_update_time = availability_last_update_time;
    m_availability_last_update_time_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_availability_last_update_time_Set() const{
    return m_availability_last_update_time_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_availability_last_update_time_Valid() const{
    return m_availability_last_update_time_isValid;
}

qint32 OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getAvailableCount() const {
    return m_available_count;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setAvailableCount(const qint32 &available_count) {
    m_available_count = available_count;
    m_available_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_available_count_Set() const{
    return m_available_count_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_available_count_Valid() const{
    return m_available_count_isValid;
}

qint32 OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getCount() const {
    return m_count;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_count_Set() const{
    return m_count_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_count_Valid() const{
    return m_count_isValid;
}

double OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getMaxChargeRateKw() const {
    return m_max_charge_rate_kw;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setMaxChargeRateKw(const double &max_charge_rate_kw) {
    m_max_charge_rate_kw = max_charge_rate_kw;
    m_max_charge_rate_kw_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_max_charge_rate_kw_Set() const{
    return m_max_charge_rate_kw_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_max_charge_rate_kw_Valid() const{
    return m_max_charge_rate_kw_isValid;
}

qint32 OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getOutOfServiceCount() const {
    return m_out_of_service_count;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setOutOfServiceCount(const qint32 &out_of_service_count) {
    m_out_of_service_count = out_of_service_count;
    m_out_of_service_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_out_of_service_count_Set() const{
    return m_out_of_service_count_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_out_of_service_count_Valid() const{
    return m_out_of_service_count_isValid;
}

QString OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::getType() const {
    return m_type;
}
void OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_charge_rate_kw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_service_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1EVChargeOptionsConnectorAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
