/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1Photo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1Photo::OAIGoogleMapsPlacesV1Photo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1Photo::OAIGoogleMapsPlacesV1Photo() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1Photo::~OAIGoogleMapsPlacesV1Photo() {}

void OAIGoogleMapsPlacesV1Photo::initializeModel() {

    m_author_attributions_isSet = false;
    m_author_attributions_isValid = false;

    m_height_px_isSet = false;
    m_height_px_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_width_px_isSet = false;
    m_width_px_isValid = false;
}

void OAIGoogleMapsPlacesV1Photo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1Photo::fromJsonObject(QJsonObject json) {

    m_author_attributions_isValid = ::OpenAPI::fromJsonValue(m_author_attributions, json[QString("authorAttributions")]);
    m_author_attributions_isSet = !json[QString("authorAttributions")].isNull() && m_author_attributions_isValid;

    m_height_px_isValid = ::OpenAPI::fromJsonValue(m_height_px, json[QString("heightPx")]);
    m_height_px_isSet = !json[QString("heightPx")].isNull() && m_height_px_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_width_px_isValid = ::OpenAPI::fromJsonValue(m_width_px, json[QString("widthPx")]);
    m_width_px_isSet = !json[QString("widthPx")].isNull() && m_width_px_isValid;
}

QString OAIGoogleMapsPlacesV1Photo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1Photo::asJsonObject() const {
    QJsonObject obj;
    if (m_author_attributions.size() > 0) {
        obj.insert(QString("authorAttributions"), ::OpenAPI::toJsonValue(m_author_attributions));
    }
    if (m_height_px_isSet) {
        obj.insert(QString("heightPx"), ::OpenAPI::toJsonValue(m_height_px));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_width_px_isSet) {
        obj.insert(QString("widthPx"), ::OpenAPI::toJsonValue(m_width_px));
    }
    return obj;
}

QList<OAIGoogleMapsPlacesV1AuthorAttribution> OAIGoogleMapsPlacesV1Photo::getAuthorAttributions() const {
    return m_author_attributions;
}
void OAIGoogleMapsPlacesV1Photo::setAuthorAttributions(const QList<OAIGoogleMapsPlacesV1AuthorAttribution> &author_attributions) {
    m_author_attributions = author_attributions;
    m_author_attributions_isSet = true;
}

bool OAIGoogleMapsPlacesV1Photo::is_author_attributions_Set() const{
    return m_author_attributions_isSet;
}

bool OAIGoogleMapsPlacesV1Photo::is_author_attributions_Valid() const{
    return m_author_attributions_isValid;
}

qint32 OAIGoogleMapsPlacesV1Photo::getHeightPx() const {
    return m_height_px;
}
void OAIGoogleMapsPlacesV1Photo::setHeightPx(const qint32 &height_px) {
    m_height_px = height_px;
    m_height_px_isSet = true;
}

bool OAIGoogleMapsPlacesV1Photo::is_height_px_Set() const{
    return m_height_px_isSet;
}

bool OAIGoogleMapsPlacesV1Photo::is_height_px_Valid() const{
    return m_height_px_isValid;
}

QString OAIGoogleMapsPlacesV1Photo::getName() const {
    return m_name;
}
void OAIGoogleMapsPlacesV1Photo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleMapsPlacesV1Photo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleMapsPlacesV1Photo::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIGoogleMapsPlacesV1Photo::getWidthPx() const {
    return m_width_px;
}
void OAIGoogleMapsPlacesV1Photo::setWidthPx(const qint32 &width_px) {
    m_width_px = width_px;
    m_width_px_isSet = true;
}

bool OAIGoogleMapsPlacesV1Photo::is_width_px_Set() const{
    return m_width_px_isSet;
}

bool OAIGoogleMapsPlacesV1Photo::is_width_px_Valid() const{
    return m_width_px_isValid;
}

bool OAIGoogleMapsPlacesV1Photo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_attributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_px_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_px_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1Photo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
