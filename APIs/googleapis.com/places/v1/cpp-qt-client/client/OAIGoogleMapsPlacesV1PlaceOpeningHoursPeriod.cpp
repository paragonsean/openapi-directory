/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::~OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod() {}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::initializeModel() {

    m_close_isSet = false;
    m_close_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::fromJsonObject(QJsonObject json) {

    m_close_isValid = ::OpenAPI::fromJsonValue(m_close, json[QString("close")]);
    m_close_isSet = !json[QString("close")].isNull() && m_close_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_close.isSet()) {
        obj.insert(QString("close"), ::OpenAPI::toJsonValue(m_close));
    }
    if (m_open.isSet()) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    return obj;
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::getClose() const {
    return m_close;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::setClose(const OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint &close) {
    m_close = close;
    m_close_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::is_close_Set() const{
    return m_close_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::is_close_Valid() const{
    return m_close_isValid;
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::getOpen() const {
    return m_open;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::setOpen(const OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::is_open_Set() const{
    return m_open_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::is_open_Valid() const{
    return m_open_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
