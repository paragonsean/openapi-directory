/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias.h
 *
 * The region to search. The results may be biased around the specified region.
 */

#ifndef OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias_H
#define OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias_H

#include <QJsonObject>

#include "OAIGoogleGeoTypeViewport.h"
#include "OAIGoogleMapsPlacesV1Circle.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlacesV1Circle;
class OAIGoogleGeoTypeViewport;

class OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias : public OAIObject {
public:
    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias();
    OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias(QString json);
    ~OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleMapsPlacesV1Circle getCircle() const;
    void setCircle(const OAIGoogleMapsPlacesV1Circle &circle);
    bool is_circle_Set() const;
    bool is_circle_Valid() const;

    OAIGoogleGeoTypeViewport getRectangle() const;
    void setRectangle(const OAIGoogleGeoTypeViewport &rectangle);
    bool is_rectangle_Set() const;
    bool is_rectangle_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleMapsPlacesV1Circle m_circle;
    bool m_circle_isSet;
    bool m_circle_isValid;

    OAIGoogleGeoTypeViewport m_rectangle;
    bool m_rectangle_isSet;
    bool m_rectangle_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias)

#endif // OAIGoogleMapsPlacesV1AutocompletePlacesRequestLocationBias_H
