/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.h
 *
 * Prediction results for a Place Autocomplete prediction.
 */

#ifndef OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction_H
#define OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction_H

#include <QJsonObject>

#include "OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.h"
#include "OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat;
class OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText;

class OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction : public OAIObject {
public:
    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction();
    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction(QString json);
    ~OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDistanceMeters() const;
    void setDistanceMeters(const qint32 &distance_meters);
    bool is_distance_meters_Set() const;
    bool is_distance_meters_Valid() const;

    QString getPlace() const;
    void setPlace(const QString &place);
    bool is_place_Set() const;
    bool is_place_Valid() const;

    QString getPlaceId() const;
    void setPlaceId(const QString &place_id);
    bool is_place_id_Set() const;
    bool is_place_id_Valid() const;

    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat getStructuredFormat() const;
    void setStructuredFormat(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat &structured_format);
    bool is_structured_format_Set() const;
    bool is_structured_format_Valid() const;

    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText getText() const;
    void setText(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QList<QString> getTypes() const;
    void setTypes(const QList<QString> &types);
    bool is_types_Set() const;
    bool is_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_distance_meters;
    bool m_distance_meters_isSet;
    bool m_distance_meters_isValid;

    QString m_place;
    bool m_place_isSet;
    bool m_place_isValid;

    QString m_place_id;
    bool m_place_id_isSet;
    bool m_place_id_isValid;

    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat m_structured_format;
    bool m_structured_format_isSet;
    bool m_structured_format_isValid;

    OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QList<QString> m_types;
    bool m_types_isSet;
    bool m_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction)

#endif // OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction_H
