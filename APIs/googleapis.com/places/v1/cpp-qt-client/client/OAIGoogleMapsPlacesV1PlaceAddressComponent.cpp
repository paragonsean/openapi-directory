/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceAddressComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceAddressComponent::OAIGoogleMapsPlacesV1PlaceAddressComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceAddressComponent::OAIGoogleMapsPlacesV1PlaceAddressComponent() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceAddressComponent::~OAIGoogleMapsPlacesV1PlaceAddressComponent() {}

void OAIGoogleMapsPlacesV1PlaceAddressComponent::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_long_text_isSet = false;
    m_long_text_isValid = false;

    m_short_text_isSet = false;
    m_short_text_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceAddressComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceAddressComponent::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_long_text_isValid = ::OpenAPI::fromJsonValue(m_long_text, json[QString("longText")]);
    m_long_text_isSet = !json[QString("longText")].isNull() && m_long_text_isValid;

    m_short_text_isValid = ::OpenAPI::fromJsonValue(m_short_text, json[QString("shortText")]);
    m_short_text_isSet = !json[QString("shortText")].isNull() && m_short_text_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceAddressComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceAddressComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_long_text_isSet) {
        obj.insert(QString("longText"), ::OpenAPI::toJsonValue(m_long_text));
    }
    if (m_short_text_isSet) {
        obj.insert(QString("shortText"), ::OpenAPI::toJsonValue(m_short_text));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIGoogleMapsPlacesV1PlaceAddressComponent::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsPlacesV1PlaceAddressComponent::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceAddressComponent::getLongText() const {
    return m_long_text;
}
void OAIGoogleMapsPlacesV1PlaceAddressComponent::setLongText(const QString &long_text) {
    m_long_text = long_text;
    m_long_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_long_text_Set() const{
    return m_long_text_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_long_text_Valid() const{
    return m_long_text_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceAddressComponent::getShortText() const {
    return m_short_text;
}
void OAIGoogleMapsPlacesV1PlaceAddressComponent::setShortText(const QString &short_text) {
    m_short_text = short_text;
    m_short_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_short_text_Set() const{
    return m_short_text_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_short_text_Valid() const{
    return m_short_text_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1PlaceAddressComponent::getTypes() const {
    return m_types;
}
void OAIGoogleMapsPlacesV1PlaceAddressComponent::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceAddressComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
