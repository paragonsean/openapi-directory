/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1Place.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1Place::OAIGoogleMapsPlacesV1Place(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1Place::OAIGoogleMapsPlacesV1Place() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1Place::~OAIGoogleMapsPlacesV1Place() {}

void OAIGoogleMapsPlacesV1Place::initializeModel() {

    m_accessibility_options_isSet = false;
    m_accessibility_options_isValid = false;

    m_address_components_isSet = false;
    m_address_components_isValid = false;

    m_adr_format_address_isSet = false;
    m_adr_format_address_isValid = false;

    m_allows_dogs_isSet = false;
    m_allows_dogs_isValid = false;

    m_attributions_isSet = false;
    m_attributions_isValid = false;

    m_business_status_isSet = false;
    m_business_status_isValid = false;

    m_curbside_pickup_isSet = false;
    m_curbside_pickup_isValid = false;

    m_current_opening_hours_isSet = false;
    m_current_opening_hours_isValid = false;

    m_current_secondary_opening_hours_isSet = false;
    m_current_secondary_opening_hours_isValid = false;

    m_delivery_isSet = false;
    m_delivery_isValid = false;

    m_dine_in_isSet = false;
    m_dine_in_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_editorial_summary_isSet = false;
    m_editorial_summary_isValid = false;

    m_ev_charge_options_isSet = false;
    m_ev_charge_options_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_fuel_options_isSet = false;
    m_fuel_options_isValid = false;

    m_good_for_children_isSet = false;
    m_good_for_children_isValid = false;

    m_good_for_groups_isSet = false;
    m_good_for_groups_isValid = false;

    m_good_for_watching_sports_isSet = false;
    m_good_for_watching_sports_isValid = false;

    m_google_maps_uri_isSet = false;
    m_google_maps_uri_isValid = false;

    m_icon_background_color_isSet = false;
    m_icon_background_color_isValid = false;

    m_icon_mask_base_uri_isSet = false;
    m_icon_mask_base_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_international_phone_number_isSet = false;
    m_international_phone_number_isValid = false;

    m_live_music_isSet = false;
    m_live_music_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_menu_for_children_isSet = false;
    m_menu_for_children_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_national_phone_number_isSet = false;
    m_national_phone_number_isValid = false;

    m_outdoor_seating_isSet = false;
    m_outdoor_seating_isValid = false;

    m_parking_options_isSet = false;
    m_parking_options_isValid = false;

    m_payment_options_isSet = false;
    m_payment_options_isValid = false;

    m_photos_isSet = false;
    m_photos_isValid = false;

    m_plus_code_isSet = false;
    m_plus_code_isValid = false;

    m_price_level_isSet = false;
    m_price_level_isValid = false;

    m_primary_type_isSet = false;
    m_primary_type_isValid = false;

    m_primary_type_display_name_isSet = false;
    m_primary_type_display_name_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_regular_opening_hours_isSet = false;
    m_regular_opening_hours_isValid = false;

    m_regular_secondary_opening_hours_isSet = false;
    m_regular_secondary_opening_hours_isValid = false;

    m_reservable_isSet = false;
    m_reservable_isValid = false;

    m_restroom_isSet = false;
    m_restroom_isValid = false;

    m_reviews_isSet = false;
    m_reviews_isValid = false;

    m_serves_beer_isSet = false;
    m_serves_beer_isValid = false;

    m_serves_breakfast_isSet = false;
    m_serves_breakfast_isValid = false;

    m_serves_brunch_isSet = false;
    m_serves_brunch_isValid = false;

    m_serves_cocktails_isSet = false;
    m_serves_cocktails_isValid = false;

    m_serves_coffee_isSet = false;
    m_serves_coffee_isValid = false;

    m_serves_dessert_isSet = false;
    m_serves_dessert_isValid = false;

    m_serves_dinner_isSet = false;
    m_serves_dinner_isValid = false;

    m_serves_lunch_isSet = false;
    m_serves_lunch_isValid = false;

    m_serves_vegetarian_food_isSet = false;
    m_serves_vegetarian_food_isValid = false;

    m_serves_wine_isSet = false;
    m_serves_wine_isValid = false;

    m_short_formatted_address_isSet = false;
    m_short_formatted_address_isValid = false;

    m_sub_destinations_isSet = false;
    m_sub_destinations_isValid = false;

    m_takeout_isSet = false;
    m_takeout_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;

    m_user_rating_count_isSet = false;
    m_user_rating_count_isValid = false;

    m_utc_offset_minutes_isSet = false;
    m_utc_offset_minutes_isValid = false;

    m_viewport_isSet = false;
    m_viewport_isValid = false;

    m_website_uri_isSet = false;
    m_website_uri_isValid = false;
}

void OAIGoogleMapsPlacesV1Place::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1Place::fromJsonObject(QJsonObject json) {

    m_accessibility_options_isValid = ::OpenAPI::fromJsonValue(m_accessibility_options, json[QString("accessibilityOptions")]);
    m_accessibility_options_isSet = !json[QString("accessibilityOptions")].isNull() && m_accessibility_options_isValid;

    m_address_components_isValid = ::OpenAPI::fromJsonValue(m_address_components, json[QString("addressComponents")]);
    m_address_components_isSet = !json[QString("addressComponents")].isNull() && m_address_components_isValid;

    m_adr_format_address_isValid = ::OpenAPI::fromJsonValue(m_adr_format_address, json[QString("adrFormatAddress")]);
    m_adr_format_address_isSet = !json[QString("adrFormatAddress")].isNull() && m_adr_format_address_isValid;

    m_allows_dogs_isValid = ::OpenAPI::fromJsonValue(m_allows_dogs, json[QString("allowsDogs")]);
    m_allows_dogs_isSet = !json[QString("allowsDogs")].isNull() && m_allows_dogs_isValid;

    m_attributions_isValid = ::OpenAPI::fromJsonValue(m_attributions, json[QString("attributions")]);
    m_attributions_isSet = !json[QString("attributions")].isNull() && m_attributions_isValid;

    m_business_status_isValid = ::OpenAPI::fromJsonValue(m_business_status, json[QString("businessStatus")]);
    m_business_status_isSet = !json[QString("businessStatus")].isNull() && m_business_status_isValid;

    m_curbside_pickup_isValid = ::OpenAPI::fromJsonValue(m_curbside_pickup, json[QString("curbsidePickup")]);
    m_curbside_pickup_isSet = !json[QString("curbsidePickup")].isNull() && m_curbside_pickup_isValid;

    m_current_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_current_opening_hours, json[QString("currentOpeningHours")]);
    m_current_opening_hours_isSet = !json[QString("currentOpeningHours")].isNull() && m_current_opening_hours_isValid;

    m_current_secondary_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_current_secondary_opening_hours, json[QString("currentSecondaryOpeningHours")]);
    m_current_secondary_opening_hours_isSet = !json[QString("currentSecondaryOpeningHours")].isNull() && m_current_secondary_opening_hours_isValid;

    m_delivery_isValid = ::OpenAPI::fromJsonValue(m_delivery, json[QString("delivery")]);
    m_delivery_isSet = !json[QString("delivery")].isNull() && m_delivery_isValid;

    m_dine_in_isValid = ::OpenAPI::fromJsonValue(m_dine_in, json[QString("dineIn")]);
    m_dine_in_isSet = !json[QString("dineIn")].isNull() && m_dine_in_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_editorial_summary_isValid = ::OpenAPI::fromJsonValue(m_editorial_summary, json[QString("editorialSummary")]);
    m_editorial_summary_isSet = !json[QString("editorialSummary")].isNull() && m_editorial_summary_isValid;

    m_ev_charge_options_isValid = ::OpenAPI::fromJsonValue(m_ev_charge_options, json[QString("evChargeOptions")]);
    m_ev_charge_options_isSet = !json[QString("evChargeOptions")].isNull() && m_ev_charge_options_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formattedAddress")]);
    m_formatted_address_isSet = !json[QString("formattedAddress")].isNull() && m_formatted_address_isValid;

    m_fuel_options_isValid = ::OpenAPI::fromJsonValue(m_fuel_options, json[QString("fuelOptions")]);
    m_fuel_options_isSet = !json[QString("fuelOptions")].isNull() && m_fuel_options_isValid;

    m_good_for_children_isValid = ::OpenAPI::fromJsonValue(m_good_for_children, json[QString("goodForChildren")]);
    m_good_for_children_isSet = !json[QString("goodForChildren")].isNull() && m_good_for_children_isValid;

    m_good_for_groups_isValid = ::OpenAPI::fromJsonValue(m_good_for_groups, json[QString("goodForGroups")]);
    m_good_for_groups_isSet = !json[QString("goodForGroups")].isNull() && m_good_for_groups_isValid;

    m_good_for_watching_sports_isValid = ::OpenAPI::fromJsonValue(m_good_for_watching_sports, json[QString("goodForWatchingSports")]);
    m_good_for_watching_sports_isSet = !json[QString("goodForWatchingSports")].isNull() && m_good_for_watching_sports_isValid;

    m_google_maps_uri_isValid = ::OpenAPI::fromJsonValue(m_google_maps_uri, json[QString("googleMapsUri")]);
    m_google_maps_uri_isSet = !json[QString("googleMapsUri")].isNull() && m_google_maps_uri_isValid;

    m_icon_background_color_isValid = ::OpenAPI::fromJsonValue(m_icon_background_color, json[QString("iconBackgroundColor")]);
    m_icon_background_color_isSet = !json[QString("iconBackgroundColor")].isNull() && m_icon_background_color_isValid;

    m_icon_mask_base_uri_isValid = ::OpenAPI::fromJsonValue(m_icon_mask_base_uri, json[QString("iconMaskBaseUri")]);
    m_icon_mask_base_uri_isSet = !json[QString("iconMaskBaseUri")].isNull() && m_icon_mask_base_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_international_phone_number_isValid = ::OpenAPI::fromJsonValue(m_international_phone_number, json[QString("internationalPhoneNumber")]);
    m_international_phone_number_isSet = !json[QString("internationalPhoneNumber")].isNull() && m_international_phone_number_isValid;

    m_live_music_isValid = ::OpenAPI::fromJsonValue(m_live_music, json[QString("liveMusic")]);
    m_live_music_isSet = !json[QString("liveMusic")].isNull() && m_live_music_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_menu_for_children_isValid = ::OpenAPI::fromJsonValue(m_menu_for_children, json[QString("menuForChildren")]);
    m_menu_for_children_isSet = !json[QString("menuForChildren")].isNull() && m_menu_for_children_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_national_phone_number_isValid = ::OpenAPI::fromJsonValue(m_national_phone_number, json[QString("nationalPhoneNumber")]);
    m_national_phone_number_isSet = !json[QString("nationalPhoneNumber")].isNull() && m_national_phone_number_isValid;

    m_outdoor_seating_isValid = ::OpenAPI::fromJsonValue(m_outdoor_seating, json[QString("outdoorSeating")]);
    m_outdoor_seating_isSet = !json[QString("outdoorSeating")].isNull() && m_outdoor_seating_isValid;

    m_parking_options_isValid = ::OpenAPI::fromJsonValue(m_parking_options, json[QString("parkingOptions")]);
    m_parking_options_isSet = !json[QString("parkingOptions")].isNull() && m_parking_options_isValid;

    m_payment_options_isValid = ::OpenAPI::fromJsonValue(m_payment_options, json[QString("paymentOptions")]);
    m_payment_options_isSet = !json[QString("paymentOptions")].isNull() && m_payment_options_isValid;

    m_photos_isValid = ::OpenAPI::fromJsonValue(m_photos, json[QString("photos")]);
    m_photos_isSet = !json[QString("photos")].isNull() && m_photos_isValid;

    m_plus_code_isValid = ::OpenAPI::fromJsonValue(m_plus_code, json[QString("plusCode")]);
    m_plus_code_isSet = !json[QString("plusCode")].isNull() && m_plus_code_isValid;

    m_price_level_isValid = ::OpenAPI::fromJsonValue(m_price_level, json[QString("priceLevel")]);
    m_price_level_isSet = !json[QString("priceLevel")].isNull() && m_price_level_isValid;

    m_primary_type_isValid = ::OpenAPI::fromJsonValue(m_primary_type, json[QString("primaryType")]);
    m_primary_type_isSet = !json[QString("primaryType")].isNull() && m_primary_type_isValid;

    m_primary_type_display_name_isValid = ::OpenAPI::fromJsonValue(m_primary_type_display_name, json[QString("primaryTypeDisplayName")]);
    m_primary_type_display_name_isSet = !json[QString("primaryTypeDisplayName")].isNull() && m_primary_type_display_name_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_regular_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_regular_opening_hours, json[QString("regularOpeningHours")]);
    m_regular_opening_hours_isSet = !json[QString("regularOpeningHours")].isNull() && m_regular_opening_hours_isValid;

    m_regular_secondary_opening_hours_isValid = ::OpenAPI::fromJsonValue(m_regular_secondary_opening_hours, json[QString("regularSecondaryOpeningHours")]);
    m_regular_secondary_opening_hours_isSet = !json[QString("regularSecondaryOpeningHours")].isNull() && m_regular_secondary_opening_hours_isValid;

    m_reservable_isValid = ::OpenAPI::fromJsonValue(m_reservable, json[QString("reservable")]);
    m_reservable_isSet = !json[QString("reservable")].isNull() && m_reservable_isValid;

    m_restroom_isValid = ::OpenAPI::fromJsonValue(m_restroom, json[QString("restroom")]);
    m_restroom_isSet = !json[QString("restroom")].isNull() && m_restroom_isValid;

    m_reviews_isValid = ::OpenAPI::fromJsonValue(m_reviews, json[QString("reviews")]);
    m_reviews_isSet = !json[QString("reviews")].isNull() && m_reviews_isValid;

    m_serves_beer_isValid = ::OpenAPI::fromJsonValue(m_serves_beer, json[QString("servesBeer")]);
    m_serves_beer_isSet = !json[QString("servesBeer")].isNull() && m_serves_beer_isValid;

    m_serves_breakfast_isValid = ::OpenAPI::fromJsonValue(m_serves_breakfast, json[QString("servesBreakfast")]);
    m_serves_breakfast_isSet = !json[QString("servesBreakfast")].isNull() && m_serves_breakfast_isValid;

    m_serves_brunch_isValid = ::OpenAPI::fromJsonValue(m_serves_brunch, json[QString("servesBrunch")]);
    m_serves_brunch_isSet = !json[QString("servesBrunch")].isNull() && m_serves_brunch_isValid;

    m_serves_cocktails_isValid = ::OpenAPI::fromJsonValue(m_serves_cocktails, json[QString("servesCocktails")]);
    m_serves_cocktails_isSet = !json[QString("servesCocktails")].isNull() && m_serves_cocktails_isValid;

    m_serves_coffee_isValid = ::OpenAPI::fromJsonValue(m_serves_coffee, json[QString("servesCoffee")]);
    m_serves_coffee_isSet = !json[QString("servesCoffee")].isNull() && m_serves_coffee_isValid;

    m_serves_dessert_isValid = ::OpenAPI::fromJsonValue(m_serves_dessert, json[QString("servesDessert")]);
    m_serves_dessert_isSet = !json[QString("servesDessert")].isNull() && m_serves_dessert_isValid;

    m_serves_dinner_isValid = ::OpenAPI::fromJsonValue(m_serves_dinner, json[QString("servesDinner")]);
    m_serves_dinner_isSet = !json[QString("servesDinner")].isNull() && m_serves_dinner_isValid;

    m_serves_lunch_isValid = ::OpenAPI::fromJsonValue(m_serves_lunch, json[QString("servesLunch")]);
    m_serves_lunch_isSet = !json[QString("servesLunch")].isNull() && m_serves_lunch_isValid;

    m_serves_vegetarian_food_isValid = ::OpenAPI::fromJsonValue(m_serves_vegetarian_food, json[QString("servesVegetarianFood")]);
    m_serves_vegetarian_food_isSet = !json[QString("servesVegetarianFood")].isNull() && m_serves_vegetarian_food_isValid;

    m_serves_wine_isValid = ::OpenAPI::fromJsonValue(m_serves_wine, json[QString("servesWine")]);
    m_serves_wine_isSet = !json[QString("servesWine")].isNull() && m_serves_wine_isValid;

    m_short_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_short_formatted_address, json[QString("shortFormattedAddress")]);
    m_short_formatted_address_isSet = !json[QString("shortFormattedAddress")].isNull() && m_short_formatted_address_isValid;

    m_sub_destinations_isValid = ::OpenAPI::fromJsonValue(m_sub_destinations, json[QString("subDestinations")]);
    m_sub_destinations_isSet = !json[QString("subDestinations")].isNull() && m_sub_destinations_isValid;

    m_takeout_isValid = ::OpenAPI::fromJsonValue(m_takeout, json[QString("takeout")]);
    m_takeout_isSet = !json[QString("takeout")].isNull() && m_takeout_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_user_rating_count_isValid = ::OpenAPI::fromJsonValue(m_user_rating_count, json[QString("userRatingCount")]);
    m_user_rating_count_isSet = !json[QString("userRatingCount")].isNull() && m_user_rating_count_isValid;

    m_utc_offset_minutes_isValid = ::OpenAPI::fromJsonValue(m_utc_offset_minutes, json[QString("utcOffsetMinutes")]);
    m_utc_offset_minutes_isSet = !json[QString("utcOffsetMinutes")].isNull() && m_utc_offset_minutes_isValid;

    m_viewport_isValid = ::OpenAPI::fromJsonValue(m_viewport, json[QString("viewport")]);
    m_viewport_isSet = !json[QString("viewport")].isNull() && m_viewport_isValid;

    m_website_uri_isValid = ::OpenAPI::fromJsonValue(m_website_uri, json[QString("websiteUri")]);
    m_website_uri_isSet = !json[QString("websiteUri")].isNull() && m_website_uri_isValid;
}

QString OAIGoogleMapsPlacesV1Place::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1Place::asJsonObject() const {
    QJsonObject obj;
    if (m_accessibility_options.isSet()) {
        obj.insert(QString("accessibilityOptions"), ::OpenAPI::toJsonValue(m_accessibility_options));
    }
    if (m_address_components.size() > 0) {
        obj.insert(QString("addressComponents"), ::OpenAPI::toJsonValue(m_address_components));
    }
    if (m_adr_format_address_isSet) {
        obj.insert(QString("adrFormatAddress"), ::OpenAPI::toJsonValue(m_adr_format_address));
    }
    if (m_allows_dogs_isSet) {
        obj.insert(QString("allowsDogs"), ::OpenAPI::toJsonValue(m_allows_dogs));
    }
    if (m_attributions.size() > 0) {
        obj.insert(QString("attributions"), ::OpenAPI::toJsonValue(m_attributions));
    }
    if (m_business_status_isSet) {
        obj.insert(QString("businessStatus"), ::OpenAPI::toJsonValue(m_business_status));
    }
    if (m_curbside_pickup_isSet) {
        obj.insert(QString("curbsidePickup"), ::OpenAPI::toJsonValue(m_curbside_pickup));
    }
    if (m_current_opening_hours.isSet()) {
        obj.insert(QString("currentOpeningHours"), ::OpenAPI::toJsonValue(m_current_opening_hours));
    }
    if (m_current_secondary_opening_hours.size() > 0) {
        obj.insert(QString("currentSecondaryOpeningHours"), ::OpenAPI::toJsonValue(m_current_secondary_opening_hours));
    }
    if (m_delivery_isSet) {
        obj.insert(QString("delivery"), ::OpenAPI::toJsonValue(m_delivery));
    }
    if (m_dine_in_isSet) {
        obj.insert(QString("dineIn"), ::OpenAPI::toJsonValue(m_dine_in));
    }
    if (m_display_name.isSet()) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_editorial_summary.isSet()) {
        obj.insert(QString("editorialSummary"), ::OpenAPI::toJsonValue(m_editorial_summary));
    }
    if (m_ev_charge_options.isSet()) {
        obj.insert(QString("evChargeOptions"), ::OpenAPI::toJsonValue(m_ev_charge_options));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formattedAddress"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_fuel_options.isSet()) {
        obj.insert(QString("fuelOptions"), ::OpenAPI::toJsonValue(m_fuel_options));
    }
    if (m_good_for_children_isSet) {
        obj.insert(QString("goodForChildren"), ::OpenAPI::toJsonValue(m_good_for_children));
    }
    if (m_good_for_groups_isSet) {
        obj.insert(QString("goodForGroups"), ::OpenAPI::toJsonValue(m_good_for_groups));
    }
    if (m_good_for_watching_sports_isSet) {
        obj.insert(QString("goodForWatchingSports"), ::OpenAPI::toJsonValue(m_good_for_watching_sports));
    }
    if (m_google_maps_uri_isSet) {
        obj.insert(QString("googleMapsUri"), ::OpenAPI::toJsonValue(m_google_maps_uri));
    }
    if (m_icon_background_color_isSet) {
        obj.insert(QString("iconBackgroundColor"), ::OpenAPI::toJsonValue(m_icon_background_color));
    }
    if (m_icon_mask_base_uri_isSet) {
        obj.insert(QString("iconMaskBaseUri"), ::OpenAPI::toJsonValue(m_icon_mask_base_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_international_phone_number_isSet) {
        obj.insert(QString("internationalPhoneNumber"), ::OpenAPI::toJsonValue(m_international_phone_number));
    }
    if (m_live_music_isSet) {
        obj.insert(QString("liveMusic"), ::OpenAPI::toJsonValue(m_live_music));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_menu_for_children_isSet) {
        obj.insert(QString("menuForChildren"), ::OpenAPI::toJsonValue(m_menu_for_children));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_national_phone_number_isSet) {
        obj.insert(QString("nationalPhoneNumber"), ::OpenAPI::toJsonValue(m_national_phone_number));
    }
    if (m_outdoor_seating_isSet) {
        obj.insert(QString("outdoorSeating"), ::OpenAPI::toJsonValue(m_outdoor_seating));
    }
    if (m_parking_options.isSet()) {
        obj.insert(QString("parkingOptions"), ::OpenAPI::toJsonValue(m_parking_options));
    }
    if (m_payment_options.isSet()) {
        obj.insert(QString("paymentOptions"), ::OpenAPI::toJsonValue(m_payment_options));
    }
    if (m_photos.size() > 0) {
        obj.insert(QString("photos"), ::OpenAPI::toJsonValue(m_photos));
    }
    if (m_plus_code.isSet()) {
        obj.insert(QString("plusCode"), ::OpenAPI::toJsonValue(m_plus_code));
    }
    if (m_price_level_isSet) {
        obj.insert(QString("priceLevel"), ::OpenAPI::toJsonValue(m_price_level));
    }
    if (m_primary_type_isSet) {
        obj.insert(QString("primaryType"), ::OpenAPI::toJsonValue(m_primary_type));
    }
    if (m_primary_type_display_name.isSet()) {
        obj.insert(QString("primaryTypeDisplayName"), ::OpenAPI::toJsonValue(m_primary_type_display_name));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_regular_opening_hours.isSet()) {
        obj.insert(QString("regularOpeningHours"), ::OpenAPI::toJsonValue(m_regular_opening_hours));
    }
    if (m_regular_secondary_opening_hours.size() > 0) {
        obj.insert(QString("regularSecondaryOpeningHours"), ::OpenAPI::toJsonValue(m_regular_secondary_opening_hours));
    }
    if (m_reservable_isSet) {
        obj.insert(QString("reservable"), ::OpenAPI::toJsonValue(m_reservable));
    }
    if (m_restroom_isSet) {
        obj.insert(QString("restroom"), ::OpenAPI::toJsonValue(m_restroom));
    }
    if (m_reviews.size() > 0) {
        obj.insert(QString("reviews"), ::OpenAPI::toJsonValue(m_reviews));
    }
    if (m_serves_beer_isSet) {
        obj.insert(QString("servesBeer"), ::OpenAPI::toJsonValue(m_serves_beer));
    }
    if (m_serves_breakfast_isSet) {
        obj.insert(QString("servesBreakfast"), ::OpenAPI::toJsonValue(m_serves_breakfast));
    }
    if (m_serves_brunch_isSet) {
        obj.insert(QString("servesBrunch"), ::OpenAPI::toJsonValue(m_serves_brunch));
    }
    if (m_serves_cocktails_isSet) {
        obj.insert(QString("servesCocktails"), ::OpenAPI::toJsonValue(m_serves_cocktails));
    }
    if (m_serves_coffee_isSet) {
        obj.insert(QString("servesCoffee"), ::OpenAPI::toJsonValue(m_serves_coffee));
    }
    if (m_serves_dessert_isSet) {
        obj.insert(QString("servesDessert"), ::OpenAPI::toJsonValue(m_serves_dessert));
    }
    if (m_serves_dinner_isSet) {
        obj.insert(QString("servesDinner"), ::OpenAPI::toJsonValue(m_serves_dinner));
    }
    if (m_serves_lunch_isSet) {
        obj.insert(QString("servesLunch"), ::OpenAPI::toJsonValue(m_serves_lunch));
    }
    if (m_serves_vegetarian_food_isSet) {
        obj.insert(QString("servesVegetarianFood"), ::OpenAPI::toJsonValue(m_serves_vegetarian_food));
    }
    if (m_serves_wine_isSet) {
        obj.insert(QString("servesWine"), ::OpenAPI::toJsonValue(m_serves_wine));
    }
    if (m_short_formatted_address_isSet) {
        obj.insert(QString("shortFormattedAddress"), ::OpenAPI::toJsonValue(m_short_formatted_address));
    }
    if (m_sub_destinations.size() > 0) {
        obj.insert(QString("subDestinations"), ::OpenAPI::toJsonValue(m_sub_destinations));
    }
    if (m_takeout_isSet) {
        obj.insert(QString("takeout"), ::OpenAPI::toJsonValue(m_takeout));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_user_rating_count_isSet) {
        obj.insert(QString("userRatingCount"), ::OpenAPI::toJsonValue(m_user_rating_count));
    }
    if (m_utc_offset_minutes_isSet) {
        obj.insert(QString("utcOffsetMinutes"), ::OpenAPI::toJsonValue(m_utc_offset_minutes));
    }
    if (m_viewport.isSet()) {
        obj.insert(QString("viewport"), ::OpenAPI::toJsonValue(m_viewport));
    }
    if (m_website_uri_isSet) {
        obj.insert(QString("websiteUri"), ::OpenAPI::toJsonValue(m_website_uri));
    }
    return obj;
}

OAIGoogleMapsPlacesV1PlaceAccessibilityOptions OAIGoogleMapsPlacesV1Place::getAccessibilityOptions() const {
    return m_accessibility_options;
}
void OAIGoogleMapsPlacesV1Place::setAccessibilityOptions(const OAIGoogleMapsPlacesV1PlaceAccessibilityOptions &accessibility_options) {
    m_accessibility_options = accessibility_options;
    m_accessibility_options_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_accessibility_options_Set() const{
    return m_accessibility_options_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_accessibility_options_Valid() const{
    return m_accessibility_options_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceAddressComponent> OAIGoogleMapsPlacesV1Place::getAddressComponents() const {
    return m_address_components;
}
void OAIGoogleMapsPlacesV1Place::setAddressComponents(const QList<OAIGoogleMapsPlacesV1PlaceAddressComponent> &address_components) {
    m_address_components = address_components;
    m_address_components_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_address_components_Set() const{
    return m_address_components_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_address_components_Valid() const{
    return m_address_components_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getAdrFormatAddress() const {
    return m_adr_format_address;
}
void OAIGoogleMapsPlacesV1Place::setAdrFormatAddress(const QString &adr_format_address) {
    m_adr_format_address = adr_format_address;
    m_adr_format_address_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_adr_format_address_Set() const{
    return m_adr_format_address_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_adr_format_address_Valid() const{
    return m_adr_format_address_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isAllowsDogs() const {
    return m_allows_dogs;
}
void OAIGoogleMapsPlacesV1Place::setAllowsDogs(const bool &allows_dogs) {
    m_allows_dogs = allows_dogs;
    m_allows_dogs_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_allows_dogs_Set() const{
    return m_allows_dogs_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_allows_dogs_Valid() const{
    return m_allows_dogs_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceAttribution> OAIGoogleMapsPlacesV1Place::getAttributions() const {
    return m_attributions;
}
void OAIGoogleMapsPlacesV1Place::setAttributions(const QList<OAIGoogleMapsPlacesV1PlaceAttribution> &attributions) {
    m_attributions = attributions;
    m_attributions_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_attributions_Set() const{
    return m_attributions_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_attributions_Valid() const{
    return m_attributions_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getBusinessStatus() const {
    return m_business_status;
}
void OAIGoogleMapsPlacesV1Place::setBusinessStatus(const QString &business_status) {
    m_business_status = business_status;
    m_business_status_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_business_status_Set() const{
    return m_business_status_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_business_status_Valid() const{
    return m_business_status_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isCurbsidePickup() const {
    return m_curbside_pickup;
}
void OAIGoogleMapsPlacesV1Place::setCurbsidePickup(const bool &curbside_pickup) {
    m_curbside_pickup = curbside_pickup;
    m_curbside_pickup_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_curbside_pickup_Set() const{
    return m_curbside_pickup_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_curbside_pickup_Valid() const{
    return m_curbside_pickup_isValid;
}

OAIGoogleMapsPlacesV1PlaceOpeningHours OAIGoogleMapsPlacesV1Place::getCurrentOpeningHours() const {
    return m_current_opening_hours;
}
void OAIGoogleMapsPlacesV1Place::setCurrentOpeningHours(const OAIGoogleMapsPlacesV1PlaceOpeningHours &current_opening_hours) {
    m_current_opening_hours = current_opening_hours;
    m_current_opening_hours_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_current_opening_hours_Set() const{
    return m_current_opening_hours_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_current_opening_hours_Valid() const{
    return m_current_opening_hours_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceOpeningHours> OAIGoogleMapsPlacesV1Place::getCurrentSecondaryOpeningHours() const {
    return m_current_secondary_opening_hours;
}
void OAIGoogleMapsPlacesV1Place::setCurrentSecondaryOpeningHours(const QList<OAIGoogleMapsPlacesV1PlaceOpeningHours> &current_secondary_opening_hours) {
    m_current_secondary_opening_hours = current_secondary_opening_hours;
    m_current_secondary_opening_hours_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_current_secondary_opening_hours_Set() const{
    return m_current_secondary_opening_hours_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_current_secondary_opening_hours_Valid() const{
    return m_current_secondary_opening_hours_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isDelivery() const {
    return m_delivery;
}
void OAIGoogleMapsPlacesV1Place::setDelivery(const bool &delivery) {
    m_delivery = delivery;
    m_delivery_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_delivery_Set() const{
    return m_delivery_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_delivery_Valid() const{
    return m_delivery_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isDineIn() const {
    return m_dine_in;
}
void OAIGoogleMapsPlacesV1Place::setDineIn(const bool &dine_in) {
    m_dine_in = dine_in;
    m_dine_in_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_dine_in_Set() const{
    return m_dine_in_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_dine_in_Valid() const{
    return m_dine_in_isValid;
}

OAIGoogleTypeLocalizedText OAIGoogleMapsPlacesV1Place::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleMapsPlacesV1Place::setDisplayName(const OAIGoogleTypeLocalizedText &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleTypeLocalizedText OAIGoogleMapsPlacesV1Place::getEditorialSummary() const {
    return m_editorial_summary;
}
void OAIGoogleMapsPlacesV1Place::setEditorialSummary(const OAIGoogleTypeLocalizedText &editorial_summary) {
    m_editorial_summary = editorial_summary;
    m_editorial_summary_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_editorial_summary_Set() const{
    return m_editorial_summary_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_editorial_summary_Valid() const{
    return m_editorial_summary_isValid;
}

OAIGoogleMapsPlacesV1EVChargeOptions OAIGoogleMapsPlacesV1Place::getEvChargeOptions() const {
    return m_ev_charge_options;
}
void OAIGoogleMapsPlacesV1Place::setEvChargeOptions(const OAIGoogleMapsPlacesV1EVChargeOptions &ev_charge_options) {
    m_ev_charge_options = ev_charge_options;
    m_ev_charge_options_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_ev_charge_options_Set() const{
    return m_ev_charge_options_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_ev_charge_options_Valid() const{
    return m_ev_charge_options_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIGoogleMapsPlacesV1Place::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

OAIGoogleMapsPlacesV1FuelOptions OAIGoogleMapsPlacesV1Place::getFuelOptions() const {
    return m_fuel_options;
}
void OAIGoogleMapsPlacesV1Place::setFuelOptions(const OAIGoogleMapsPlacesV1FuelOptions &fuel_options) {
    m_fuel_options = fuel_options;
    m_fuel_options_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_fuel_options_Set() const{
    return m_fuel_options_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_fuel_options_Valid() const{
    return m_fuel_options_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isGoodForChildren() const {
    return m_good_for_children;
}
void OAIGoogleMapsPlacesV1Place::setGoodForChildren(const bool &good_for_children) {
    m_good_for_children = good_for_children;
    m_good_for_children_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_children_Set() const{
    return m_good_for_children_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_children_Valid() const{
    return m_good_for_children_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isGoodForGroups() const {
    return m_good_for_groups;
}
void OAIGoogleMapsPlacesV1Place::setGoodForGroups(const bool &good_for_groups) {
    m_good_for_groups = good_for_groups;
    m_good_for_groups_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_groups_Set() const{
    return m_good_for_groups_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_groups_Valid() const{
    return m_good_for_groups_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isGoodForWatchingSports() const {
    return m_good_for_watching_sports;
}
void OAIGoogleMapsPlacesV1Place::setGoodForWatchingSports(const bool &good_for_watching_sports) {
    m_good_for_watching_sports = good_for_watching_sports;
    m_good_for_watching_sports_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_watching_sports_Set() const{
    return m_good_for_watching_sports_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_good_for_watching_sports_Valid() const{
    return m_good_for_watching_sports_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getGoogleMapsUri() const {
    return m_google_maps_uri;
}
void OAIGoogleMapsPlacesV1Place::setGoogleMapsUri(const QString &google_maps_uri) {
    m_google_maps_uri = google_maps_uri;
    m_google_maps_uri_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_google_maps_uri_Set() const{
    return m_google_maps_uri_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_google_maps_uri_Valid() const{
    return m_google_maps_uri_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getIconBackgroundColor() const {
    return m_icon_background_color;
}
void OAIGoogleMapsPlacesV1Place::setIconBackgroundColor(const QString &icon_background_color) {
    m_icon_background_color = icon_background_color;
    m_icon_background_color_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_icon_background_color_Set() const{
    return m_icon_background_color_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_icon_background_color_Valid() const{
    return m_icon_background_color_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getIconMaskBaseUri() const {
    return m_icon_mask_base_uri;
}
void OAIGoogleMapsPlacesV1Place::setIconMaskBaseUri(const QString &icon_mask_base_uri) {
    m_icon_mask_base_uri = icon_mask_base_uri;
    m_icon_mask_base_uri_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_icon_mask_base_uri_Set() const{
    return m_icon_mask_base_uri_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_icon_mask_base_uri_Valid() const{
    return m_icon_mask_base_uri_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getId() const {
    return m_id;
}
void OAIGoogleMapsPlacesV1Place::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getInternationalPhoneNumber() const {
    return m_international_phone_number;
}
void OAIGoogleMapsPlacesV1Place::setInternationalPhoneNumber(const QString &international_phone_number) {
    m_international_phone_number = international_phone_number;
    m_international_phone_number_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_international_phone_number_Set() const{
    return m_international_phone_number_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_international_phone_number_Valid() const{
    return m_international_phone_number_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isLiveMusic() const {
    return m_live_music;
}
void OAIGoogleMapsPlacesV1Place::setLiveMusic(const bool &live_music) {
    m_live_music = live_music;
    m_live_music_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_live_music_Set() const{
    return m_live_music_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_live_music_Valid() const{
    return m_live_music_isValid;
}

OAIGoogleTypeLatLng OAIGoogleMapsPlacesV1Place::getLocation() const {
    return m_location;
}
void OAIGoogleMapsPlacesV1Place::setLocation(const OAIGoogleTypeLatLng &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isMenuForChildren() const {
    return m_menu_for_children;
}
void OAIGoogleMapsPlacesV1Place::setMenuForChildren(const bool &menu_for_children) {
    m_menu_for_children = menu_for_children;
    m_menu_for_children_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_menu_for_children_Set() const{
    return m_menu_for_children_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_menu_for_children_Valid() const{
    return m_menu_for_children_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getName() const {
    return m_name;
}
void OAIGoogleMapsPlacesV1Place::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getNationalPhoneNumber() const {
    return m_national_phone_number;
}
void OAIGoogleMapsPlacesV1Place::setNationalPhoneNumber(const QString &national_phone_number) {
    m_national_phone_number = national_phone_number;
    m_national_phone_number_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_national_phone_number_Set() const{
    return m_national_phone_number_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_national_phone_number_Valid() const{
    return m_national_phone_number_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isOutdoorSeating() const {
    return m_outdoor_seating;
}
void OAIGoogleMapsPlacesV1Place::setOutdoorSeating(const bool &outdoor_seating) {
    m_outdoor_seating = outdoor_seating;
    m_outdoor_seating_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_outdoor_seating_Set() const{
    return m_outdoor_seating_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_outdoor_seating_Valid() const{
    return m_outdoor_seating_isValid;
}

OAIGoogleMapsPlacesV1PlaceParkingOptions OAIGoogleMapsPlacesV1Place::getParkingOptions() const {
    return m_parking_options;
}
void OAIGoogleMapsPlacesV1Place::setParkingOptions(const OAIGoogleMapsPlacesV1PlaceParkingOptions &parking_options) {
    m_parking_options = parking_options;
    m_parking_options_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_parking_options_Set() const{
    return m_parking_options_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_parking_options_Valid() const{
    return m_parking_options_isValid;
}

OAIGoogleMapsPlacesV1PlacePaymentOptions OAIGoogleMapsPlacesV1Place::getPaymentOptions() const {
    return m_payment_options;
}
void OAIGoogleMapsPlacesV1Place::setPaymentOptions(const OAIGoogleMapsPlacesV1PlacePaymentOptions &payment_options) {
    m_payment_options = payment_options;
    m_payment_options_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_payment_options_Set() const{
    return m_payment_options_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_payment_options_Valid() const{
    return m_payment_options_isValid;
}

QList<OAIGoogleMapsPlacesV1Photo> OAIGoogleMapsPlacesV1Place::getPhotos() const {
    return m_photos;
}
void OAIGoogleMapsPlacesV1Place::setPhotos(const QList<OAIGoogleMapsPlacesV1Photo> &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_photos_Valid() const{
    return m_photos_isValid;
}

OAIGoogleMapsPlacesV1PlacePlusCode OAIGoogleMapsPlacesV1Place::getPlusCode() const {
    return m_plus_code;
}
void OAIGoogleMapsPlacesV1Place::setPlusCode(const OAIGoogleMapsPlacesV1PlacePlusCode &plus_code) {
    m_plus_code = plus_code;
    m_plus_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_plus_code_Set() const{
    return m_plus_code_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_plus_code_Valid() const{
    return m_plus_code_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getPriceLevel() const {
    return m_price_level;
}
void OAIGoogleMapsPlacesV1Place::setPriceLevel(const QString &price_level) {
    m_price_level = price_level;
    m_price_level_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_price_level_Set() const{
    return m_price_level_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_price_level_Valid() const{
    return m_price_level_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getPrimaryType() const {
    return m_primary_type;
}
void OAIGoogleMapsPlacesV1Place::setPrimaryType(const QString &primary_type) {
    m_primary_type = primary_type;
    m_primary_type_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_primary_type_Set() const{
    return m_primary_type_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_primary_type_Valid() const{
    return m_primary_type_isValid;
}

OAIGoogleTypeLocalizedText OAIGoogleMapsPlacesV1Place::getPrimaryTypeDisplayName() const {
    return m_primary_type_display_name;
}
void OAIGoogleMapsPlacesV1Place::setPrimaryTypeDisplayName(const OAIGoogleTypeLocalizedText &primary_type_display_name) {
    m_primary_type_display_name = primary_type_display_name;
    m_primary_type_display_name_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_primary_type_display_name_Set() const{
    return m_primary_type_display_name_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_primary_type_display_name_Valid() const{
    return m_primary_type_display_name_isValid;
}

double OAIGoogleMapsPlacesV1Place::getRating() const {
    return m_rating;
}
void OAIGoogleMapsPlacesV1Place::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIGoogleMapsPlacesV1PlaceOpeningHours OAIGoogleMapsPlacesV1Place::getRegularOpeningHours() const {
    return m_regular_opening_hours;
}
void OAIGoogleMapsPlacesV1Place::setRegularOpeningHours(const OAIGoogleMapsPlacesV1PlaceOpeningHours &regular_opening_hours) {
    m_regular_opening_hours = regular_opening_hours;
    m_regular_opening_hours_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_regular_opening_hours_Set() const{
    return m_regular_opening_hours_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_regular_opening_hours_Valid() const{
    return m_regular_opening_hours_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceOpeningHours> OAIGoogleMapsPlacesV1Place::getRegularSecondaryOpeningHours() const {
    return m_regular_secondary_opening_hours;
}
void OAIGoogleMapsPlacesV1Place::setRegularSecondaryOpeningHours(const QList<OAIGoogleMapsPlacesV1PlaceOpeningHours> &regular_secondary_opening_hours) {
    m_regular_secondary_opening_hours = regular_secondary_opening_hours;
    m_regular_secondary_opening_hours_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_regular_secondary_opening_hours_Set() const{
    return m_regular_secondary_opening_hours_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_regular_secondary_opening_hours_Valid() const{
    return m_regular_secondary_opening_hours_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isReservable() const {
    return m_reservable;
}
void OAIGoogleMapsPlacesV1Place::setReservable(const bool &reservable) {
    m_reservable = reservable;
    m_reservable_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_reservable_Set() const{
    return m_reservable_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_reservable_Valid() const{
    return m_reservable_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isRestroom() const {
    return m_restroom;
}
void OAIGoogleMapsPlacesV1Place::setRestroom(const bool &restroom) {
    m_restroom = restroom;
    m_restroom_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_restroom_Set() const{
    return m_restroom_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_restroom_Valid() const{
    return m_restroom_isValid;
}

QList<OAIGoogleMapsPlacesV1Review> OAIGoogleMapsPlacesV1Place::getReviews() const {
    return m_reviews;
}
void OAIGoogleMapsPlacesV1Place::setReviews(const QList<OAIGoogleMapsPlacesV1Review> &reviews) {
    m_reviews = reviews;
    m_reviews_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_reviews_Set() const{
    return m_reviews_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_reviews_Valid() const{
    return m_reviews_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesBeer() const {
    return m_serves_beer;
}
void OAIGoogleMapsPlacesV1Place::setServesBeer(const bool &serves_beer) {
    m_serves_beer = serves_beer;
    m_serves_beer_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_beer_Set() const{
    return m_serves_beer_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_beer_Valid() const{
    return m_serves_beer_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesBreakfast() const {
    return m_serves_breakfast;
}
void OAIGoogleMapsPlacesV1Place::setServesBreakfast(const bool &serves_breakfast) {
    m_serves_breakfast = serves_breakfast;
    m_serves_breakfast_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_breakfast_Set() const{
    return m_serves_breakfast_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_breakfast_Valid() const{
    return m_serves_breakfast_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesBrunch() const {
    return m_serves_brunch;
}
void OAIGoogleMapsPlacesV1Place::setServesBrunch(const bool &serves_brunch) {
    m_serves_brunch = serves_brunch;
    m_serves_brunch_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_brunch_Set() const{
    return m_serves_brunch_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_brunch_Valid() const{
    return m_serves_brunch_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesCocktails() const {
    return m_serves_cocktails;
}
void OAIGoogleMapsPlacesV1Place::setServesCocktails(const bool &serves_cocktails) {
    m_serves_cocktails = serves_cocktails;
    m_serves_cocktails_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_cocktails_Set() const{
    return m_serves_cocktails_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_cocktails_Valid() const{
    return m_serves_cocktails_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesCoffee() const {
    return m_serves_coffee;
}
void OAIGoogleMapsPlacesV1Place::setServesCoffee(const bool &serves_coffee) {
    m_serves_coffee = serves_coffee;
    m_serves_coffee_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_coffee_Set() const{
    return m_serves_coffee_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_coffee_Valid() const{
    return m_serves_coffee_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesDessert() const {
    return m_serves_dessert;
}
void OAIGoogleMapsPlacesV1Place::setServesDessert(const bool &serves_dessert) {
    m_serves_dessert = serves_dessert;
    m_serves_dessert_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_dessert_Set() const{
    return m_serves_dessert_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_dessert_Valid() const{
    return m_serves_dessert_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesDinner() const {
    return m_serves_dinner;
}
void OAIGoogleMapsPlacesV1Place::setServesDinner(const bool &serves_dinner) {
    m_serves_dinner = serves_dinner;
    m_serves_dinner_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_dinner_Set() const{
    return m_serves_dinner_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_dinner_Valid() const{
    return m_serves_dinner_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesLunch() const {
    return m_serves_lunch;
}
void OAIGoogleMapsPlacesV1Place::setServesLunch(const bool &serves_lunch) {
    m_serves_lunch = serves_lunch;
    m_serves_lunch_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_lunch_Set() const{
    return m_serves_lunch_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_lunch_Valid() const{
    return m_serves_lunch_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesVegetarianFood() const {
    return m_serves_vegetarian_food;
}
void OAIGoogleMapsPlacesV1Place::setServesVegetarianFood(const bool &serves_vegetarian_food) {
    m_serves_vegetarian_food = serves_vegetarian_food;
    m_serves_vegetarian_food_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_vegetarian_food_Set() const{
    return m_serves_vegetarian_food_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_vegetarian_food_Valid() const{
    return m_serves_vegetarian_food_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isServesWine() const {
    return m_serves_wine;
}
void OAIGoogleMapsPlacesV1Place::setServesWine(const bool &serves_wine) {
    m_serves_wine = serves_wine;
    m_serves_wine_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_wine_Set() const{
    return m_serves_wine_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_serves_wine_Valid() const{
    return m_serves_wine_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getShortFormattedAddress() const {
    return m_short_formatted_address;
}
void OAIGoogleMapsPlacesV1Place::setShortFormattedAddress(const QString &short_formatted_address) {
    m_short_formatted_address = short_formatted_address;
    m_short_formatted_address_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_short_formatted_address_Set() const{
    return m_short_formatted_address_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_short_formatted_address_Valid() const{
    return m_short_formatted_address_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceSubDestination> OAIGoogleMapsPlacesV1Place::getSubDestinations() const {
    return m_sub_destinations;
}
void OAIGoogleMapsPlacesV1Place::setSubDestinations(const QList<OAIGoogleMapsPlacesV1PlaceSubDestination> &sub_destinations) {
    m_sub_destinations = sub_destinations;
    m_sub_destinations_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_sub_destinations_Set() const{
    return m_sub_destinations_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_sub_destinations_Valid() const{
    return m_sub_destinations_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isTakeout() const {
    return m_takeout;
}
void OAIGoogleMapsPlacesV1Place::setTakeout(const bool &takeout) {
    m_takeout = takeout;
    m_takeout_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_takeout_Set() const{
    return m_takeout_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_takeout_Valid() const{
    return m_takeout_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1Place::getTypes() const {
    return m_types;
}
void OAIGoogleMapsPlacesV1Place::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_types_Set() const{
    return m_types_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_types_Valid() const{
    return m_types_isValid;
}

qint32 OAIGoogleMapsPlacesV1Place::getUserRatingCount() const {
    return m_user_rating_count;
}
void OAIGoogleMapsPlacesV1Place::setUserRatingCount(const qint32 &user_rating_count) {
    m_user_rating_count = user_rating_count;
    m_user_rating_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_user_rating_count_Set() const{
    return m_user_rating_count_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_user_rating_count_Valid() const{
    return m_user_rating_count_isValid;
}

qint32 OAIGoogleMapsPlacesV1Place::getUtcOffsetMinutes() const {
    return m_utc_offset_minutes;
}
void OAIGoogleMapsPlacesV1Place::setUtcOffsetMinutes(const qint32 &utc_offset_minutes) {
    m_utc_offset_minutes = utc_offset_minutes;
    m_utc_offset_minutes_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_utc_offset_minutes_Set() const{
    return m_utc_offset_minutes_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_utc_offset_minutes_Valid() const{
    return m_utc_offset_minutes_isValid;
}

OAIGoogleGeoTypeViewport OAIGoogleMapsPlacesV1Place::getViewport() const {
    return m_viewport;
}
void OAIGoogleMapsPlacesV1Place::setViewport(const OAIGoogleGeoTypeViewport &viewport) {
    m_viewport = viewport;
    m_viewport_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_viewport_Set() const{
    return m_viewport_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_viewport_Valid() const{
    return m_viewport_isValid;
}

QString OAIGoogleMapsPlacesV1Place::getWebsiteUri() const {
    return m_website_uri;
}
void OAIGoogleMapsPlacesV1Place::setWebsiteUri(const QString &website_uri) {
    m_website_uri = website_uri;
    m_website_uri_isSet = true;
}

bool OAIGoogleMapsPlacesV1Place::is_website_uri_Set() const{
    return m_website_uri_isSet;
}

bool OAIGoogleMapsPlacesV1Place::is_website_uri_Valid() const{
    return m_website_uri_isValid;
}

bool OAIGoogleMapsPlacesV1Place::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessibility_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adr_format_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allows_dogs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_curbside_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_opening_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_secondary_opening_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dine_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ev_charge_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_for_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_for_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_good_for_watching_sports_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_maps_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_mask_base_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_music_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_for_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_national_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdoor_seating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parking_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_plus_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_type_display_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_opening_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regular_secondary_opening_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restroom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_beer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_breakfast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_brunch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_cocktails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_coffee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_dessert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_dinner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_lunch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_vegetarian_food_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serves_wine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_takeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_rating_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_offset_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1Place::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
