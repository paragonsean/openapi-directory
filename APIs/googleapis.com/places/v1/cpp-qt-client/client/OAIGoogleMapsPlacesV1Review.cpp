/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1Review.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1Review::OAIGoogleMapsPlacesV1Review(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1Review::OAIGoogleMapsPlacesV1Review() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1Review::~OAIGoogleMapsPlacesV1Review() {}

void OAIGoogleMapsPlacesV1Review::initializeModel() {

    m_author_attribution_isSet = false;
    m_author_attribution_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_text_isSet = false;
    m_original_text_isValid = false;

    m_publish_time_isSet = false;
    m_publish_time_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_relative_publish_time_description_isSet = false;
    m_relative_publish_time_description_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIGoogleMapsPlacesV1Review::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1Review::fromJsonObject(QJsonObject json) {

    m_author_attribution_isValid = ::OpenAPI::fromJsonValue(m_author_attribution, json[QString("authorAttribution")]);
    m_author_attribution_isSet = !json[QString("authorAttribution")].isNull() && m_author_attribution_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_text_isValid = ::OpenAPI::fromJsonValue(m_original_text, json[QString("originalText")]);
    m_original_text_isSet = !json[QString("originalText")].isNull() && m_original_text_isValid;

    m_publish_time_isValid = ::OpenAPI::fromJsonValue(m_publish_time, json[QString("publishTime")]);
    m_publish_time_isSet = !json[QString("publishTime")].isNull() && m_publish_time_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_relative_publish_time_description_isValid = ::OpenAPI::fromJsonValue(m_relative_publish_time_description, json[QString("relativePublishTimeDescription")]);
    m_relative_publish_time_description_isSet = !json[QString("relativePublishTimeDescription")].isNull() && m_relative_publish_time_description_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIGoogleMapsPlacesV1Review::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1Review::asJsonObject() const {
    QJsonObject obj;
    if (m_author_attribution.isSet()) {
        obj.insert(QString("authorAttribution"), ::OpenAPI::toJsonValue(m_author_attribution));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_text.isSet()) {
        obj.insert(QString("originalText"), ::OpenAPI::toJsonValue(m_original_text));
    }
    if (m_publish_time_isSet) {
        obj.insert(QString("publishTime"), ::OpenAPI::toJsonValue(m_publish_time));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_relative_publish_time_description_isSet) {
        obj.insert(QString("relativePublishTimeDescription"), ::OpenAPI::toJsonValue(m_relative_publish_time_description));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIGoogleMapsPlacesV1AuthorAttribution OAIGoogleMapsPlacesV1Review::getAuthorAttribution() const {
    return m_author_attribution;
}
void OAIGoogleMapsPlacesV1Review::setAuthorAttribution(const OAIGoogleMapsPlacesV1AuthorAttribution &author_attribution) {
    m_author_attribution = author_attribution;
    m_author_attribution_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_author_attribution_Set() const{
    return m_author_attribution_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_author_attribution_Valid() const{
    return m_author_attribution_isValid;
}

QString OAIGoogleMapsPlacesV1Review::getName() const {
    return m_name;
}
void OAIGoogleMapsPlacesV1Review::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleTypeLocalizedText OAIGoogleMapsPlacesV1Review::getOriginalText() const {
    return m_original_text;
}
void OAIGoogleMapsPlacesV1Review::setOriginalText(const OAIGoogleTypeLocalizedText &original_text) {
    m_original_text = original_text;
    m_original_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_original_text_Set() const{
    return m_original_text_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_original_text_Valid() const{
    return m_original_text_isValid;
}

QString OAIGoogleMapsPlacesV1Review::getPublishTime() const {
    return m_publish_time;
}
void OAIGoogleMapsPlacesV1Review::setPublishTime(const QString &publish_time) {
    m_publish_time = publish_time;
    m_publish_time_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_publish_time_Set() const{
    return m_publish_time_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_publish_time_Valid() const{
    return m_publish_time_isValid;
}

double OAIGoogleMapsPlacesV1Review::getRating() const {
    return m_rating;
}
void OAIGoogleMapsPlacesV1Review::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIGoogleMapsPlacesV1Review::getRelativePublishTimeDescription() const {
    return m_relative_publish_time_description;
}
void OAIGoogleMapsPlacesV1Review::setRelativePublishTimeDescription(const QString &relative_publish_time_description) {
    m_relative_publish_time_description = relative_publish_time_description;
    m_relative_publish_time_description_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_relative_publish_time_description_Set() const{
    return m_relative_publish_time_description_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_relative_publish_time_description_Valid() const{
    return m_relative_publish_time_description_isValid;
}

OAIGoogleTypeLocalizedText OAIGoogleMapsPlacesV1Review::getText() const {
    return m_text;
}
void OAIGoogleMapsPlacesV1Review::setText(const OAIGoogleTypeLocalizedText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1Review::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleMapsPlacesV1Review::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIGoogleMapsPlacesV1Review::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_attribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_publish_time_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1Review::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
