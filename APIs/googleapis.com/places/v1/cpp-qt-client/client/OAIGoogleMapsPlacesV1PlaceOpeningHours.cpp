/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceOpeningHours.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceOpeningHours::OAIGoogleMapsPlacesV1PlaceOpeningHours(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceOpeningHours::OAIGoogleMapsPlacesV1PlaceOpeningHours() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceOpeningHours::~OAIGoogleMapsPlacesV1PlaceOpeningHours() {}

void OAIGoogleMapsPlacesV1PlaceOpeningHours::initializeModel() {

    m_open_now_isSet = false;
    m_open_now_isValid = false;

    m_periods_isSet = false;
    m_periods_isValid = false;

    m_secondary_hours_type_isSet = false;
    m_secondary_hours_type_isValid = false;

    m_special_days_isSet = false;
    m_special_days_isValid = false;

    m_weekday_descriptions_isSet = false;
    m_weekday_descriptions_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceOpeningHours::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceOpeningHours::fromJsonObject(QJsonObject json) {

    m_open_now_isValid = ::OpenAPI::fromJsonValue(m_open_now, json[QString("openNow")]);
    m_open_now_isSet = !json[QString("openNow")].isNull() && m_open_now_isValid;

    m_periods_isValid = ::OpenAPI::fromJsonValue(m_periods, json[QString("periods")]);
    m_periods_isSet = !json[QString("periods")].isNull() && m_periods_isValid;

    m_secondary_hours_type_isValid = ::OpenAPI::fromJsonValue(m_secondary_hours_type, json[QString("secondaryHoursType")]);
    m_secondary_hours_type_isSet = !json[QString("secondaryHoursType")].isNull() && m_secondary_hours_type_isValid;

    m_special_days_isValid = ::OpenAPI::fromJsonValue(m_special_days, json[QString("specialDays")]);
    m_special_days_isSet = !json[QString("specialDays")].isNull() && m_special_days_isValid;

    m_weekday_descriptions_isValid = ::OpenAPI::fromJsonValue(m_weekday_descriptions, json[QString("weekdayDescriptions")]);
    m_weekday_descriptions_isSet = !json[QString("weekdayDescriptions")].isNull() && m_weekday_descriptions_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceOpeningHours::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceOpeningHours::asJsonObject() const {
    QJsonObject obj;
    if (m_open_now_isSet) {
        obj.insert(QString("openNow"), ::OpenAPI::toJsonValue(m_open_now));
    }
    if (m_periods.size() > 0) {
        obj.insert(QString("periods"), ::OpenAPI::toJsonValue(m_periods));
    }
    if (m_secondary_hours_type_isSet) {
        obj.insert(QString("secondaryHoursType"), ::OpenAPI::toJsonValue(m_secondary_hours_type));
    }
    if (m_special_days.size() > 0) {
        obj.insert(QString("specialDays"), ::OpenAPI::toJsonValue(m_special_days));
    }
    if (m_weekday_descriptions.size() > 0) {
        obj.insert(QString("weekdayDescriptions"), ::OpenAPI::toJsonValue(m_weekday_descriptions));
    }
    return obj;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::isOpenNow() const {
    return m_open_now;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHours::setOpenNow(const bool &open_now) {
    m_open_now = open_now;
    m_open_now_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_open_now_Set() const{
    return m_open_now_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_open_now_Valid() const{
    return m_open_now_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod> OAIGoogleMapsPlacesV1PlaceOpeningHours::getPeriods() const {
    return m_periods;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHours::setPeriods(const QList<OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriod> &periods) {
    m_periods = periods;
    m_periods_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_periods_Set() const{
    return m_periods_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_periods_Valid() const{
    return m_periods_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceOpeningHours::getSecondaryHoursType() const {
    return m_secondary_hours_type;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHours::setSecondaryHoursType(const QString &secondary_hours_type) {
    m_secondary_hours_type = secondary_hours_type;
    m_secondary_hours_type_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_secondary_hours_type_Set() const{
    return m_secondary_hours_type_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_secondary_hours_type_Valid() const{
    return m_secondary_hours_type_isValid;
}

QList<OAIGoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> OAIGoogleMapsPlacesV1PlaceOpeningHours::getSpecialDays() const {
    return m_special_days;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHours::setSpecialDays(const QList<OAIGoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> &special_days) {
    m_special_days = special_days;
    m_special_days_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_special_days_Set() const{
    return m_special_days_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_special_days_Valid() const{
    return m_special_days_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1PlaceOpeningHours::getWeekdayDescriptions() const {
    return m_weekday_descriptions;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHours::setWeekdayDescriptions(const QList<QString> &weekday_descriptions) {
    m_weekday_descriptions = weekday_descriptions;
    m_weekday_descriptions_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_weekday_descriptions_Set() const{
    return m_weekday_descriptions_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::is_weekday_descriptions_Valid() const{
    return m_weekday_descriptions_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_open_now_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_hours_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekday_descriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHours::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
