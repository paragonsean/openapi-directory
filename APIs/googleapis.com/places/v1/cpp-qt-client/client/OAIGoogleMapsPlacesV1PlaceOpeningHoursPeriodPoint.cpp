/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::~OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint() {}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;

    m_minute_isSet = false;
    m_minute_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;
}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("hour")]);
    m_hour_isSet = !json[QString("hour")].isNull() && m_hour_isValid;

    m_minute_isValid = ::OpenAPI::fromJsonValue(m_minute, json[QString("minute")]);
    m_minute_isSet = !json[QString("minute")].isNull() && m_minute_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;
}

QString OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_hour_isSet) {
        obj.insert(QString("hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    if (m_minute_isSet) {
        obj.insert(QString("minute"), ::OpenAPI::toJsonValue(m_minute));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    return obj;
}

OAIGoogleTypeDate OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::getDate() const {
    return m_date;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::setDate(const OAIGoogleTypeDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::getDay() const {
    return m_day;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_day_Set() const{
    return m_day_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_day_Valid() const{
    return m_day_isValid;
}

qint32 OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::getHour() const {
    return m_hour;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::setHour(const qint32 &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_hour_Valid() const{
    return m_hour_isValid;
}

qint32 OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::getMinute() const {
    return m_minute;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::setMinute(const qint32 &minute) {
    m_minute = minute;
    m_minute_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_minute_Set() const{
    return m_minute_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_minute_Valid() const{
    return m_minute_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::isTruncated() const {
    return m_truncated;
}
void OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::is_truncated_Valid() const{
    return m_truncated_isValid;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
