/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1SearchNearbyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1SearchNearbyRequest::OAIGoogleMapsPlacesV1SearchNearbyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1SearchNearbyRequest::OAIGoogleMapsPlacesV1SearchNearbyRequest() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1SearchNearbyRequest::~OAIGoogleMapsPlacesV1SearchNearbyRequest() {}

void OAIGoogleMapsPlacesV1SearchNearbyRequest::initializeModel() {

    m_excluded_primary_types_isSet = false;
    m_excluded_primary_types_isValid = false;

    m_excluded_types_isSet = false;
    m_excluded_types_isValid = false;

    m_included_primary_types_isSet = false;
    m_included_primary_types_isValid = false;

    m_included_types_isSet = false;
    m_included_types_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_location_restriction_isSet = false;
    m_location_restriction_isValid = false;

    m_max_result_count_isSet = false;
    m_max_result_count_isValid = false;

    m_rank_preference_isSet = false;
    m_rank_preference_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;
}

void OAIGoogleMapsPlacesV1SearchNearbyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1SearchNearbyRequest::fromJsonObject(QJsonObject json) {

    m_excluded_primary_types_isValid = ::OpenAPI::fromJsonValue(m_excluded_primary_types, json[QString("excludedPrimaryTypes")]);
    m_excluded_primary_types_isSet = !json[QString("excludedPrimaryTypes")].isNull() && m_excluded_primary_types_isValid;

    m_excluded_types_isValid = ::OpenAPI::fromJsonValue(m_excluded_types, json[QString("excludedTypes")]);
    m_excluded_types_isSet = !json[QString("excludedTypes")].isNull() && m_excluded_types_isValid;

    m_included_primary_types_isValid = ::OpenAPI::fromJsonValue(m_included_primary_types, json[QString("includedPrimaryTypes")]);
    m_included_primary_types_isSet = !json[QString("includedPrimaryTypes")].isNull() && m_included_primary_types_isValid;

    m_included_types_isValid = ::OpenAPI::fromJsonValue(m_included_types, json[QString("includedTypes")]);
    m_included_types_isSet = !json[QString("includedTypes")].isNull() && m_included_types_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_location_restriction_isValid = ::OpenAPI::fromJsonValue(m_location_restriction, json[QString("locationRestriction")]);
    m_location_restriction_isSet = !json[QString("locationRestriction")].isNull() && m_location_restriction_isValid;

    m_max_result_count_isValid = ::OpenAPI::fromJsonValue(m_max_result_count, json[QString("maxResultCount")]);
    m_max_result_count_isSet = !json[QString("maxResultCount")].isNull() && m_max_result_count_isValid;

    m_rank_preference_isValid = ::OpenAPI::fromJsonValue(m_rank_preference, json[QString("rankPreference")]);
    m_rank_preference_isSet = !json[QString("rankPreference")].isNull() && m_rank_preference_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;
}

QString OAIGoogleMapsPlacesV1SearchNearbyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1SearchNearbyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_primary_types.size() > 0) {
        obj.insert(QString("excludedPrimaryTypes"), ::OpenAPI::toJsonValue(m_excluded_primary_types));
    }
    if (m_excluded_types.size() > 0) {
        obj.insert(QString("excludedTypes"), ::OpenAPI::toJsonValue(m_excluded_types));
    }
    if (m_included_primary_types.size() > 0) {
        obj.insert(QString("includedPrimaryTypes"), ::OpenAPI::toJsonValue(m_included_primary_types));
    }
    if (m_included_types.size() > 0) {
        obj.insert(QString("includedTypes"), ::OpenAPI::toJsonValue(m_included_types));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_location_restriction.isSet()) {
        obj.insert(QString("locationRestriction"), ::OpenAPI::toJsonValue(m_location_restriction));
    }
    if (m_max_result_count_isSet) {
        obj.insert(QString("maxResultCount"), ::OpenAPI::toJsonValue(m_max_result_count));
    }
    if (m_rank_preference_isSet) {
        obj.insert(QString("rankPreference"), ::OpenAPI::toJsonValue(m_rank_preference));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    return obj;
}

QList<QString> OAIGoogleMapsPlacesV1SearchNearbyRequest::getExcludedPrimaryTypes() const {
    return m_excluded_primary_types;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setExcludedPrimaryTypes(const QList<QString> &excluded_primary_types) {
    m_excluded_primary_types = excluded_primary_types;
    m_excluded_primary_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_excluded_primary_types_Set() const{
    return m_excluded_primary_types_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_excluded_primary_types_Valid() const{
    return m_excluded_primary_types_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1SearchNearbyRequest::getExcludedTypes() const {
    return m_excluded_types;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setExcludedTypes(const QList<QString> &excluded_types) {
    m_excluded_types = excluded_types;
    m_excluded_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_excluded_types_Set() const{
    return m_excluded_types_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_excluded_types_Valid() const{
    return m_excluded_types_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1SearchNearbyRequest::getIncludedPrimaryTypes() const {
    return m_included_primary_types;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setIncludedPrimaryTypes(const QList<QString> &included_primary_types) {
    m_included_primary_types = included_primary_types;
    m_included_primary_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_included_primary_types_Set() const{
    return m_included_primary_types_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_included_primary_types_Valid() const{
    return m_included_primary_types_isValid;
}

QList<QString> OAIGoogleMapsPlacesV1SearchNearbyRequest::getIncludedTypes() const {
    return m_included_types;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setIncludedTypes(const QList<QString> &included_types) {
    m_included_types = included_types;
    m_included_types_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_included_types_Set() const{
    return m_included_types_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_included_types_Valid() const{
    return m_included_types_isValid;
}

QString OAIGoogleMapsPlacesV1SearchNearbyRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction OAIGoogleMapsPlacesV1SearchNearbyRequest::getLocationRestriction() const {
    return m_location_restriction;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setLocationRestriction(const OAIGoogleMapsPlacesV1SearchNearbyRequestLocationRestriction &location_restriction) {
    m_location_restriction = location_restriction;
    m_location_restriction_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_location_restriction_Set() const{
    return m_location_restriction_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_location_restriction_Valid() const{
    return m_location_restriction_isValid;
}

qint32 OAIGoogleMapsPlacesV1SearchNearbyRequest::getMaxResultCount() const {
    return m_max_result_count;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setMaxResultCount(const qint32 &max_result_count) {
    m_max_result_count = max_result_count;
    m_max_result_count_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_max_result_count_Set() const{
    return m_max_result_count_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_max_result_count_Valid() const{
    return m_max_result_count_isValid;
}

QString OAIGoogleMapsPlacesV1SearchNearbyRequest::getRankPreference() const {
    return m_rank_preference;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setRankPreference(const QString &rank_preference) {
    m_rank_preference = rank_preference;
    m_rank_preference_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_rank_preference_Set() const{
    return m_rank_preference_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_rank_preference_Valid() const{
    return m_rank_preference_isValid;
}

QString OAIGoogleMapsPlacesV1SearchNearbyRequest::getRegionCode() const {
    return m_region_code;
}
void OAIGoogleMapsPlacesV1SearchNearbyRequest::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_primary_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_primary_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_result_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1SearchNearbyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
