/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat() {
    this->initializeModel();
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::~OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat() {}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::initializeModel() {

    m_main_text_isSet = false;
    m_main_text_isValid = false;

    m_secondary_text_isSet = false;
    m_secondary_text_isValid = false;
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::fromJsonObject(QJsonObject json) {

    m_main_text_isValid = ::OpenAPI::fromJsonValue(m_main_text, json[QString("mainText")]);
    m_main_text_isSet = !json[QString("mainText")].isNull() && m_main_text_isValid;

    m_secondary_text_isValid = ::OpenAPI::fromJsonValue(m_secondary_text, json[QString("secondaryText")]);
    m_secondary_text_isSet = !json[QString("secondaryText")].isNull() && m_secondary_text_isValid;
}

QString OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_main_text.isSet()) {
        obj.insert(QString("mainText"), ::OpenAPI::toJsonValue(m_main_text));
    }
    if (m_secondary_text.isSet()) {
        obj.insert(QString("secondaryText"), ::OpenAPI::toJsonValue(m_secondary_text));
    }
    return obj;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::getMainText() const {
    return m_main_text;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::setMainText(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText &main_text) {
    m_main_text = main_text;
    m_main_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::is_main_text_Set() const{
    return m_main_text_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::is_main_text_Valid() const{
    return m_main_text_isValid;
}

OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::getSecondaryText() const {
    return m_secondary_text;
}
void OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::setSecondaryText(const OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText &secondary_text) {
    m_secondary_text = secondary_text;
    m_secondary_text_isSet = true;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::is_secondary_text_Set() const{
    return m_secondary_text_isSet;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::is_secondary_text_Valid() const{
    return m_secondary_text_isValid;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_main_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_text.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
