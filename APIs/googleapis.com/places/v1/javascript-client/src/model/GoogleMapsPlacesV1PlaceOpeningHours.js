/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleMapsPlacesV1PlaceOpeningHoursPeriod from './GoogleMapsPlacesV1PlaceOpeningHoursPeriod';
import GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay from './GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay';

/**
 * The GoogleMapsPlacesV1PlaceOpeningHours model module.
 * @module model/GoogleMapsPlacesV1PlaceOpeningHours
 * @version v1
 */
class GoogleMapsPlacesV1PlaceOpeningHours {
    /**
     * Constructs a new <code>GoogleMapsPlacesV1PlaceOpeningHours</code>.
     * Information about business hour of the place.
     * @alias module:model/GoogleMapsPlacesV1PlaceOpeningHours
     */
    constructor() { 
        
        GoogleMapsPlacesV1PlaceOpeningHours.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlacesV1PlaceOpeningHours</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlacesV1PlaceOpeningHours} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlacesV1PlaceOpeningHours} The populated <code>GoogleMapsPlacesV1PlaceOpeningHours</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlacesV1PlaceOpeningHours();

            if (data.hasOwnProperty('openNow')) {
                obj['openNow'] = ApiClient.convertToType(data['openNow'], 'Boolean');
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], [GoogleMapsPlacesV1PlaceOpeningHoursPeriod]);
            }
            if (data.hasOwnProperty('secondaryHoursType')) {
                obj['secondaryHoursType'] = ApiClient.convertToType(data['secondaryHoursType'], 'String');
            }
            if (data.hasOwnProperty('specialDays')) {
                obj['specialDays'] = ApiClient.convertToType(data['specialDays'], [GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay]);
            }
            if (data.hasOwnProperty('weekdayDescriptions')) {
                obj['weekdayDescriptions'] = ApiClient.convertToType(data['weekdayDescriptions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlacesV1PlaceOpeningHours</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlacesV1PlaceOpeningHours</code>.
     */
    static validateJSON(data) {
        if (data['periods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['periods'])) {
                throw new Error("Expected the field `periods` to be an array in the JSON data but got " + data['periods']);
            }
            // validate the optional field `periods` (array)
            for (const item of data['periods']) {
                GoogleMapsPlacesV1PlaceOpeningHoursPeriod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['secondaryHoursType'] && !(typeof data['secondaryHoursType'] === 'string' || data['secondaryHoursType'] instanceof String)) {
            throw new Error("Expected the field `secondaryHoursType` to be a primitive type in the JSON string but got " + data['secondaryHoursType']);
        }
        if (data['specialDays']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specialDays'])) {
                throw new Error("Expected the field `specialDays` to be an array in the JSON data but got " + data['specialDays']);
            }
            // validate the optional field `specialDays` (array)
            for (const item of data['specialDays']) {
                GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['weekdayDescriptions'])) {
            throw new Error("Expected the field `weekdayDescriptions` to be an array in the JSON data but got " + data['weekdayDescriptions']);
        }

        return true;
    }


}



/**
 * Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.
 * @member {Boolean} openNow
 */
GoogleMapsPlacesV1PlaceOpeningHours.prototype['openNow'] = undefined;

/**
 * The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceOpeningHoursPeriod>} periods
 */
GoogleMapsPlacesV1PlaceOpeningHours.prototype['periods'] = undefined;

/**
 * A type string used to identify the type of secondary hours.
 * @member {module:model/GoogleMapsPlacesV1PlaceOpeningHours.SecondaryHoursTypeEnum} secondaryHoursType
 */
GoogleMapsPlacesV1PlaceOpeningHours.prototype['secondaryHoursType'] = undefined;

/**
 * Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay>} specialDays
 */
GoogleMapsPlacesV1PlaceOpeningHours.prototype['specialDays'] = undefined;

/**
 * Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: \"Sun: 18:00â€“06:00\"
 * @member {Array.<String>} weekdayDescriptions
 */
GoogleMapsPlacesV1PlaceOpeningHours.prototype['weekdayDescriptions'] = undefined;





/**
 * Allowed values for the <code>secondaryHoursType</code> property.
 * @enum {String}
 * @readonly
 */
GoogleMapsPlacesV1PlaceOpeningHours['SecondaryHoursTypeEnum'] = {

    /**
     * value: "SECONDARY_HOURS_TYPE_UNSPECIFIED"
     * @const
     */
    "SECONDARY_HOURS_TYPE_UNSPECIFIED": "SECONDARY_HOURS_TYPE_UNSPECIFIED",

    /**
     * value: "DRIVE_THROUGH"
     * @const
     */
    "DRIVE_THROUGH": "DRIVE_THROUGH",

    /**
     * value: "HAPPY_HOUR"
     * @const
     */
    "HAPPY_HOUR": "HAPPY_HOUR",

    /**
     * value: "DELIVERY"
     * @const
     */
    "DELIVERY": "DELIVERY",

    /**
     * value: "TAKEOUT"
     * @const
     */
    "TAKEOUT": "TAKEOUT",

    /**
     * value: "KITCHEN"
     * @const
     */
    "KITCHEN": "KITCHEN",

    /**
     * value: "BREAKFAST"
     * @const
     */
    "BREAKFAST": "BREAKFAST",

    /**
     * value: "LUNCH"
     * @const
     */
    "LUNCH": "LUNCH",

    /**
     * value: "DINNER"
     * @const
     */
    "DINNER": "DINNER",

    /**
     * value: "BRUNCH"
     * @const
     */
    "BRUNCH": "BRUNCH",

    /**
     * value: "PICKUP"
     * @const
     */
    "PICKUP": "PICKUP",

    /**
     * value: "ACCESS"
     * @const
     */
    "ACCESS": "ACCESS",

    /**
     * value: "SENIOR_HOURS"
     * @const
     */
    "SENIOR_HOURS": "SENIOR_HOURS",

    /**
     * value: "ONLINE_SERVICE_HOURS"
     * @const
     */
    "ONLINE_SERVICE_HOURS": "ONLINE_SERVICE_HOURS"
};



export default GoogleMapsPlacesV1PlaceOpeningHours;

