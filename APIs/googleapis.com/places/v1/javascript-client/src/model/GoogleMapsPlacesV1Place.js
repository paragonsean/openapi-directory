/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleGeoTypeViewport from './GoogleGeoTypeViewport';
import GoogleMapsPlacesV1EVChargeOptions from './GoogleMapsPlacesV1EVChargeOptions';
import GoogleMapsPlacesV1FuelOptions from './GoogleMapsPlacesV1FuelOptions';
import GoogleMapsPlacesV1Photo from './GoogleMapsPlacesV1Photo';
import GoogleMapsPlacesV1PlaceAccessibilityOptions from './GoogleMapsPlacesV1PlaceAccessibilityOptions';
import GoogleMapsPlacesV1PlaceAddressComponent from './GoogleMapsPlacesV1PlaceAddressComponent';
import GoogleMapsPlacesV1PlaceAttribution from './GoogleMapsPlacesV1PlaceAttribution';
import GoogleMapsPlacesV1PlaceOpeningHours from './GoogleMapsPlacesV1PlaceOpeningHours';
import GoogleMapsPlacesV1PlaceParkingOptions from './GoogleMapsPlacesV1PlaceParkingOptions';
import GoogleMapsPlacesV1PlacePaymentOptions from './GoogleMapsPlacesV1PlacePaymentOptions';
import GoogleMapsPlacesV1PlacePlusCode from './GoogleMapsPlacesV1PlacePlusCode';
import GoogleMapsPlacesV1PlaceSubDestination from './GoogleMapsPlacesV1PlaceSubDestination';
import GoogleMapsPlacesV1Review from './GoogleMapsPlacesV1Review';
import GoogleTypeLatLng from './GoogleTypeLatLng';
import GoogleTypeLocalizedText from './GoogleTypeLocalizedText';

/**
 * The GoogleMapsPlacesV1Place model module.
 * @module model/GoogleMapsPlacesV1Place
 * @version v1
 */
class GoogleMapsPlacesV1Place {
    /**
     * Constructs a new <code>GoogleMapsPlacesV1Place</code>.
     * All the information representing a Place.
     * @alias module:model/GoogleMapsPlacesV1Place
     */
    constructor() { 
        
        GoogleMapsPlacesV1Place.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlacesV1Place</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlacesV1Place} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlacesV1Place} The populated <code>GoogleMapsPlacesV1Place</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlacesV1Place();

            if (data.hasOwnProperty('accessibilityOptions')) {
                obj['accessibilityOptions'] = GoogleMapsPlacesV1PlaceAccessibilityOptions.constructFromObject(data['accessibilityOptions']);
            }
            if (data.hasOwnProperty('addressComponents')) {
                obj['addressComponents'] = ApiClient.convertToType(data['addressComponents'], [GoogleMapsPlacesV1PlaceAddressComponent]);
            }
            if (data.hasOwnProperty('adrFormatAddress')) {
                obj['adrFormatAddress'] = ApiClient.convertToType(data['adrFormatAddress'], 'String');
            }
            if (data.hasOwnProperty('allowsDogs')) {
                obj['allowsDogs'] = ApiClient.convertToType(data['allowsDogs'], 'Boolean');
            }
            if (data.hasOwnProperty('attributions')) {
                obj['attributions'] = ApiClient.convertToType(data['attributions'], [GoogleMapsPlacesV1PlaceAttribution]);
            }
            if (data.hasOwnProperty('businessStatus')) {
                obj['businessStatus'] = ApiClient.convertToType(data['businessStatus'], 'String');
            }
            if (data.hasOwnProperty('curbsidePickup')) {
                obj['curbsidePickup'] = ApiClient.convertToType(data['curbsidePickup'], 'Boolean');
            }
            if (data.hasOwnProperty('currentOpeningHours')) {
                obj['currentOpeningHours'] = GoogleMapsPlacesV1PlaceOpeningHours.constructFromObject(data['currentOpeningHours']);
            }
            if (data.hasOwnProperty('currentSecondaryOpeningHours')) {
                obj['currentSecondaryOpeningHours'] = ApiClient.convertToType(data['currentSecondaryOpeningHours'], [GoogleMapsPlacesV1PlaceOpeningHours]);
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = ApiClient.convertToType(data['delivery'], 'Boolean');
            }
            if (data.hasOwnProperty('dineIn')) {
                obj['dineIn'] = ApiClient.convertToType(data['dineIn'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = GoogleTypeLocalizedText.constructFromObject(data['displayName']);
            }
            if (data.hasOwnProperty('editorialSummary')) {
                obj['editorialSummary'] = GoogleTypeLocalizedText.constructFromObject(data['editorialSummary']);
            }
            if (data.hasOwnProperty('evChargeOptions')) {
                obj['evChargeOptions'] = GoogleMapsPlacesV1EVChargeOptions.constructFromObject(data['evChargeOptions']);
            }
            if (data.hasOwnProperty('formattedAddress')) {
                obj['formattedAddress'] = ApiClient.convertToType(data['formattedAddress'], 'String');
            }
            if (data.hasOwnProperty('fuelOptions')) {
                obj['fuelOptions'] = GoogleMapsPlacesV1FuelOptions.constructFromObject(data['fuelOptions']);
            }
            if (data.hasOwnProperty('goodForChildren')) {
                obj['goodForChildren'] = ApiClient.convertToType(data['goodForChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('goodForGroups')) {
                obj['goodForGroups'] = ApiClient.convertToType(data['goodForGroups'], 'Boolean');
            }
            if (data.hasOwnProperty('goodForWatchingSports')) {
                obj['goodForWatchingSports'] = ApiClient.convertToType(data['goodForWatchingSports'], 'Boolean');
            }
            if (data.hasOwnProperty('googleMapsUri')) {
                obj['googleMapsUri'] = ApiClient.convertToType(data['googleMapsUri'], 'String');
            }
            if (data.hasOwnProperty('iconBackgroundColor')) {
                obj['iconBackgroundColor'] = ApiClient.convertToType(data['iconBackgroundColor'], 'String');
            }
            if (data.hasOwnProperty('iconMaskBaseUri')) {
                obj['iconMaskBaseUri'] = ApiClient.convertToType(data['iconMaskBaseUri'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internationalPhoneNumber')) {
                obj['internationalPhoneNumber'] = ApiClient.convertToType(data['internationalPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('liveMusic')) {
                obj['liveMusic'] = ApiClient.convertToType(data['liveMusic'], 'Boolean');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = GoogleTypeLatLng.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('menuForChildren')) {
                obj['menuForChildren'] = ApiClient.convertToType(data['menuForChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nationalPhoneNumber')) {
                obj['nationalPhoneNumber'] = ApiClient.convertToType(data['nationalPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('outdoorSeating')) {
                obj['outdoorSeating'] = ApiClient.convertToType(data['outdoorSeating'], 'Boolean');
            }
            if (data.hasOwnProperty('parkingOptions')) {
                obj['parkingOptions'] = GoogleMapsPlacesV1PlaceParkingOptions.constructFromObject(data['parkingOptions']);
            }
            if (data.hasOwnProperty('paymentOptions')) {
                obj['paymentOptions'] = GoogleMapsPlacesV1PlacePaymentOptions.constructFromObject(data['paymentOptions']);
            }
            if (data.hasOwnProperty('photos')) {
                obj['photos'] = ApiClient.convertToType(data['photos'], [GoogleMapsPlacesV1Photo]);
            }
            if (data.hasOwnProperty('plusCode')) {
                obj['plusCode'] = GoogleMapsPlacesV1PlacePlusCode.constructFromObject(data['plusCode']);
            }
            if (data.hasOwnProperty('priceLevel')) {
                obj['priceLevel'] = ApiClient.convertToType(data['priceLevel'], 'String');
            }
            if (data.hasOwnProperty('primaryType')) {
                obj['primaryType'] = ApiClient.convertToType(data['primaryType'], 'String');
            }
            if (data.hasOwnProperty('primaryTypeDisplayName')) {
                obj['primaryTypeDisplayName'] = GoogleTypeLocalizedText.constructFromObject(data['primaryTypeDisplayName']);
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('regularOpeningHours')) {
                obj['regularOpeningHours'] = GoogleMapsPlacesV1PlaceOpeningHours.constructFromObject(data['regularOpeningHours']);
            }
            if (data.hasOwnProperty('regularSecondaryOpeningHours')) {
                obj['regularSecondaryOpeningHours'] = ApiClient.convertToType(data['regularSecondaryOpeningHours'], [GoogleMapsPlacesV1PlaceOpeningHours]);
            }
            if (data.hasOwnProperty('reservable')) {
                obj['reservable'] = ApiClient.convertToType(data['reservable'], 'Boolean');
            }
            if (data.hasOwnProperty('restroom')) {
                obj['restroom'] = ApiClient.convertToType(data['restroom'], 'Boolean');
            }
            if (data.hasOwnProperty('reviews')) {
                obj['reviews'] = ApiClient.convertToType(data['reviews'], [GoogleMapsPlacesV1Review]);
            }
            if (data.hasOwnProperty('servesBeer')) {
                obj['servesBeer'] = ApiClient.convertToType(data['servesBeer'], 'Boolean');
            }
            if (data.hasOwnProperty('servesBreakfast')) {
                obj['servesBreakfast'] = ApiClient.convertToType(data['servesBreakfast'], 'Boolean');
            }
            if (data.hasOwnProperty('servesBrunch')) {
                obj['servesBrunch'] = ApiClient.convertToType(data['servesBrunch'], 'Boolean');
            }
            if (data.hasOwnProperty('servesCocktails')) {
                obj['servesCocktails'] = ApiClient.convertToType(data['servesCocktails'], 'Boolean');
            }
            if (data.hasOwnProperty('servesCoffee')) {
                obj['servesCoffee'] = ApiClient.convertToType(data['servesCoffee'], 'Boolean');
            }
            if (data.hasOwnProperty('servesDessert')) {
                obj['servesDessert'] = ApiClient.convertToType(data['servesDessert'], 'Boolean');
            }
            if (data.hasOwnProperty('servesDinner')) {
                obj['servesDinner'] = ApiClient.convertToType(data['servesDinner'], 'Boolean');
            }
            if (data.hasOwnProperty('servesLunch')) {
                obj['servesLunch'] = ApiClient.convertToType(data['servesLunch'], 'Boolean');
            }
            if (data.hasOwnProperty('servesVegetarianFood')) {
                obj['servesVegetarianFood'] = ApiClient.convertToType(data['servesVegetarianFood'], 'Boolean');
            }
            if (data.hasOwnProperty('servesWine')) {
                obj['servesWine'] = ApiClient.convertToType(data['servesWine'], 'Boolean');
            }
            if (data.hasOwnProperty('shortFormattedAddress')) {
                obj['shortFormattedAddress'] = ApiClient.convertToType(data['shortFormattedAddress'], 'String');
            }
            if (data.hasOwnProperty('subDestinations')) {
                obj['subDestinations'] = ApiClient.convertToType(data['subDestinations'], [GoogleMapsPlacesV1PlaceSubDestination]);
            }
            if (data.hasOwnProperty('takeout')) {
                obj['takeout'] = ApiClient.convertToType(data['takeout'], 'Boolean');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
            if (data.hasOwnProperty('userRatingCount')) {
                obj['userRatingCount'] = ApiClient.convertToType(data['userRatingCount'], 'Number');
            }
            if (data.hasOwnProperty('utcOffsetMinutes')) {
                obj['utcOffsetMinutes'] = ApiClient.convertToType(data['utcOffsetMinutes'], 'Number');
            }
            if (data.hasOwnProperty('viewport')) {
                obj['viewport'] = GoogleGeoTypeViewport.constructFromObject(data['viewport']);
            }
            if (data.hasOwnProperty('websiteUri')) {
                obj['websiteUri'] = ApiClient.convertToType(data['websiteUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlacesV1Place</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlacesV1Place</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessibilityOptions`
        if (data['accessibilityOptions']) { // data not null
          GoogleMapsPlacesV1PlaceAccessibilityOptions.validateJSON(data['accessibilityOptions']);
        }
        if (data['addressComponents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addressComponents'])) {
                throw new Error("Expected the field `addressComponents` to be an array in the JSON data but got " + data['addressComponents']);
            }
            // validate the optional field `addressComponents` (array)
            for (const item of data['addressComponents']) {
                GoogleMapsPlacesV1PlaceAddressComponent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['adrFormatAddress'] && !(typeof data['adrFormatAddress'] === 'string' || data['adrFormatAddress'] instanceof String)) {
            throw new Error("Expected the field `adrFormatAddress` to be a primitive type in the JSON string but got " + data['adrFormatAddress']);
        }
        if (data['attributions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributions'])) {
                throw new Error("Expected the field `attributions` to be an array in the JSON data but got " + data['attributions']);
            }
            // validate the optional field `attributions` (array)
            for (const item of data['attributions']) {
                GoogleMapsPlacesV1PlaceAttribution.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['businessStatus'] && !(typeof data['businessStatus'] === 'string' || data['businessStatus'] instanceof String)) {
            throw new Error("Expected the field `businessStatus` to be a primitive type in the JSON string but got " + data['businessStatus']);
        }
        // validate the optional field `currentOpeningHours`
        if (data['currentOpeningHours']) { // data not null
          GoogleMapsPlacesV1PlaceOpeningHours.validateJSON(data['currentOpeningHours']);
        }
        if (data['currentSecondaryOpeningHours']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['currentSecondaryOpeningHours'])) {
                throw new Error("Expected the field `currentSecondaryOpeningHours` to be an array in the JSON data but got " + data['currentSecondaryOpeningHours']);
            }
            // validate the optional field `currentSecondaryOpeningHours` (array)
            for (const item of data['currentSecondaryOpeningHours']) {
                GoogleMapsPlacesV1PlaceOpeningHours.validateJSON(item);
            };
        }
        // validate the optional field `displayName`
        if (data['displayName']) { // data not null
          GoogleTypeLocalizedText.validateJSON(data['displayName']);
        }
        // validate the optional field `editorialSummary`
        if (data['editorialSummary']) { // data not null
          GoogleTypeLocalizedText.validateJSON(data['editorialSummary']);
        }
        // validate the optional field `evChargeOptions`
        if (data['evChargeOptions']) { // data not null
          GoogleMapsPlacesV1EVChargeOptions.validateJSON(data['evChargeOptions']);
        }
        // ensure the json data is a string
        if (data['formattedAddress'] && !(typeof data['formattedAddress'] === 'string' || data['formattedAddress'] instanceof String)) {
            throw new Error("Expected the field `formattedAddress` to be a primitive type in the JSON string but got " + data['formattedAddress']);
        }
        // validate the optional field `fuelOptions`
        if (data['fuelOptions']) { // data not null
          GoogleMapsPlacesV1FuelOptions.validateJSON(data['fuelOptions']);
        }
        // ensure the json data is a string
        if (data['googleMapsUri'] && !(typeof data['googleMapsUri'] === 'string' || data['googleMapsUri'] instanceof String)) {
            throw new Error("Expected the field `googleMapsUri` to be a primitive type in the JSON string but got " + data['googleMapsUri']);
        }
        // ensure the json data is a string
        if (data['iconBackgroundColor'] && !(typeof data['iconBackgroundColor'] === 'string' || data['iconBackgroundColor'] instanceof String)) {
            throw new Error("Expected the field `iconBackgroundColor` to be a primitive type in the JSON string but got " + data['iconBackgroundColor']);
        }
        // ensure the json data is a string
        if (data['iconMaskBaseUri'] && !(typeof data['iconMaskBaseUri'] === 'string' || data['iconMaskBaseUri'] instanceof String)) {
            throw new Error("Expected the field `iconMaskBaseUri` to be a primitive type in the JSON string but got " + data['iconMaskBaseUri']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['internationalPhoneNumber'] && !(typeof data['internationalPhoneNumber'] === 'string' || data['internationalPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `internationalPhoneNumber` to be a primitive type in the JSON string but got " + data['internationalPhoneNumber']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          GoogleTypeLatLng.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nationalPhoneNumber'] && !(typeof data['nationalPhoneNumber'] === 'string' || data['nationalPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `nationalPhoneNumber` to be a primitive type in the JSON string but got " + data['nationalPhoneNumber']);
        }
        // validate the optional field `parkingOptions`
        if (data['parkingOptions']) { // data not null
          GoogleMapsPlacesV1PlaceParkingOptions.validateJSON(data['parkingOptions']);
        }
        // validate the optional field `paymentOptions`
        if (data['paymentOptions']) { // data not null
          GoogleMapsPlacesV1PlacePaymentOptions.validateJSON(data['paymentOptions']);
        }
        if (data['photos']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['photos'])) {
                throw new Error("Expected the field `photos` to be an array in the JSON data but got " + data['photos']);
            }
            // validate the optional field `photos` (array)
            for (const item of data['photos']) {
                GoogleMapsPlacesV1Photo.validateJSON(item);
            };
        }
        // validate the optional field `plusCode`
        if (data['plusCode']) { // data not null
          GoogleMapsPlacesV1PlacePlusCode.validateJSON(data['plusCode']);
        }
        // ensure the json data is a string
        if (data['priceLevel'] && !(typeof data['priceLevel'] === 'string' || data['priceLevel'] instanceof String)) {
            throw new Error("Expected the field `priceLevel` to be a primitive type in the JSON string but got " + data['priceLevel']);
        }
        // ensure the json data is a string
        if (data['primaryType'] && !(typeof data['primaryType'] === 'string' || data['primaryType'] instanceof String)) {
            throw new Error("Expected the field `primaryType` to be a primitive type in the JSON string but got " + data['primaryType']);
        }
        // validate the optional field `primaryTypeDisplayName`
        if (data['primaryTypeDisplayName']) { // data not null
          GoogleTypeLocalizedText.validateJSON(data['primaryTypeDisplayName']);
        }
        // validate the optional field `regularOpeningHours`
        if (data['regularOpeningHours']) { // data not null
          GoogleMapsPlacesV1PlaceOpeningHours.validateJSON(data['regularOpeningHours']);
        }
        if (data['regularSecondaryOpeningHours']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regularSecondaryOpeningHours'])) {
                throw new Error("Expected the field `regularSecondaryOpeningHours` to be an array in the JSON data but got " + data['regularSecondaryOpeningHours']);
            }
            // validate the optional field `regularSecondaryOpeningHours` (array)
            for (const item of data['regularSecondaryOpeningHours']) {
                GoogleMapsPlacesV1PlaceOpeningHours.validateJSON(item);
            };
        }
        if (data['reviews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reviews'])) {
                throw new Error("Expected the field `reviews` to be an array in the JSON data but got " + data['reviews']);
            }
            // validate the optional field `reviews` (array)
            for (const item of data['reviews']) {
                GoogleMapsPlacesV1Review.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shortFormattedAddress'] && !(typeof data['shortFormattedAddress'] === 'string' || data['shortFormattedAddress'] instanceof String)) {
            throw new Error("Expected the field `shortFormattedAddress` to be a primitive type in the JSON string but got " + data['shortFormattedAddress']);
        }
        if (data['subDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subDestinations'])) {
                throw new Error("Expected the field `subDestinations` to be an array in the JSON data but got " + data['subDestinations']);
            }
            // validate the optional field `subDestinations` (array)
            for (const item of data['subDestinations']) {
                GoogleMapsPlacesV1PlaceSubDestination.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }
        // validate the optional field `viewport`
        if (data['viewport']) { // data not null
          GoogleGeoTypeViewport.validateJSON(data['viewport']);
        }
        // ensure the json data is a string
        if (data['websiteUri'] && !(typeof data['websiteUri'] === 'string' || data['websiteUri'] instanceof String)) {
            throw new Error("Expected the field `websiteUri` to be a primitive type in the JSON string but got " + data['websiteUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleMapsPlacesV1PlaceAccessibilityOptions} accessibilityOptions
 */
GoogleMapsPlacesV1Place.prototype['accessibilityOptions'] = undefined;

/**
 * Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceAddressComponent>} addressComponents
 */
GoogleMapsPlacesV1Place.prototype['addressComponents'] = undefined;

/**
 * The place's address in adr microformat: http://microformats.org/wiki/adr.
 * @member {String} adrFormatAddress
 */
GoogleMapsPlacesV1Place.prototype['adrFormatAddress'] = undefined;

/**
 * Place allows dogs.
 * @member {Boolean} allowsDogs
 */
GoogleMapsPlacesV1Place.prototype['allowsDogs'] = undefined;

/**
 * A set of data provider that must be shown with this result.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceAttribution>} attributions
 */
GoogleMapsPlacesV1Place.prototype['attributions'] = undefined;

/**
 * The business status for the place.
 * @member {module:model/GoogleMapsPlacesV1Place.BusinessStatusEnum} businessStatus
 */
GoogleMapsPlacesV1Place.prototype['businessStatus'] = undefined;

/**
 * Specifies if the business supports curbside pickup.
 * @member {Boolean} curbsidePickup
 */
GoogleMapsPlacesV1Place.prototype['curbsidePickup'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1PlaceOpeningHours} currentOpeningHours
 */
GoogleMapsPlacesV1Place.prototype['currentOpeningHours'] = undefined;

/**
 * Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceOpeningHours>} currentSecondaryOpeningHours
 */
GoogleMapsPlacesV1Place.prototype['currentSecondaryOpeningHours'] = undefined;

/**
 * Specifies if the business supports delivery.
 * @member {Boolean} delivery
 */
GoogleMapsPlacesV1Place.prototype['delivery'] = undefined;

/**
 * Specifies if the business supports indoor or outdoor seating options.
 * @member {Boolean} dineIn
 */
GoogleMapsPlacesV1Place.prototype['dineIn'] = undefined;

/**
 * @member {module:model/GoogleTypeLocalizedText} displayName
 */
GoogleMapsPlacesV1Place.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleTypeLocalizedText} editorialSummary
 */
GoogleMapsPlacesV1Place.prototype['editorialSummary'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1EVChargeOptions} evChargeOptions
 */
GoogleMapsPlacesV1Place.prototype['evChargeOptions'] = undefined;

/**
 * A full, human-readable address for this place.
 * @member {String} formattedAddress
 */
GoogleMapsPlacesV1Place.prototype['formattedAddress'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1FuelOptions} fuelOptions
 */
GoogleMapsPlacesV1Place.prototype['fuelOptions'] = undefined;

/**
 * Place is good for children.
 * @member {Boolean} goodForChildren
 */
GoogleMapsPlacesV1Place.prototype['goodForChildren'] = undefined;

/**
 * Place accommodates groups.
 * @member {Boolean} goodForGroups
 */
GoogleMapsPlacesV1Place.prototype['goodForGroups'] = undefined;

/**
 * Place is suitable for watching sports.
 * @member {Boolean} goodForWatchingSports
 */
GoogleMapsPlacesV1Place.prototype['goodForWatchingSports'] = undefined;

/**
 * A URL providing more information about this place.
 * @member {String} googleMapsUri
 */
GoogleMapsPlacesV1Place.prototype['googleMapsUri'] = undefined;

/**
 * Background color for icon_mask in hex format, e.g. #909CE1.
 * @member {String} iconBackgroundColor
 */
GoogleMapsPlacesV1Place.prototype['iconBackgroundColor'] = undefined;

/**
 * A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, \".svg\" or \".png\").
 * @member {String} iconMaskBaseUri
 */
GoogleMapsPlacesV1Place.prototype['iconMaskBaseUri'] = undefined;

/**
 * The unique identifier of a place.
 * @member {String} id
 */
GoogleMapsPlacesV1Place.prototype['id'] = undefined;

/**
 * A human-readable phone number for the place, in international format.
 * @member {String} internationalPhoneNumber
 */
GoogleMapsPlacesV1Place.prototype['internationalPhoneNumber'] = undefined;

/**
 * Place provides live music.
 * @member {Boolean} liveMusic
 */
GoogleMapsPlacesV1Place.prototype['liveMusic'] = undefined;

/**
 * @member {module:model/GoogleTypeLatLng} location
 */
GoogleMapsPlacesV1Place.prototype['location'] = undefined;

/**
 * Place has a children's menu.
 * @member {Boolean} menuForChildren
 */
GoogleMapsPlacesV1Place.prototype['menuForChildren'] = undefined;

/**
 * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
 * @member {String} name
 */
GoogleMapsPlacesV1Place.prototype['name'] = undefined;

/**
 * A human-readable phone number for the place, in national format.
 * @member {String} nationalPhoneNumber
 */
GoogleMapsPlacesV1Place.prototype['nationalPhoneNumber'] = undefined;

/**
 * Place provides outdoor seating.
 * @member {Boolean} outdoorSeating
 */
GoogleMapsPlacesV1Place.prototype['outdoorSeating'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1PlaceParkingOptions} parkingOptions
 */
GoogleMapsPlacesV1Place.prototype['parkingOptions'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1PlacePaymentOptions} paymentOptions
 */
GoogleMapsPlacesV1Place.prototype['paymentOptions'] = undefined;

/**
 * Information (including references) about photos of this place. A maximum of 10 photos can be returned.
 * @member {Array.<module:model/GoogleMapsPlacesV1Photo>} photos
 */
GoogleMapsPlacesV1Place.prototype['photos'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1PlacePlusCode} plusCode
 */
GoogleMapsPlacesV1Place.prototype['plusCode'] = undefined;

/**
 * Price level of the place.
 * @member {module:model/GoogleMapsPlacesV1Place.PriceLevelEnum} priceLevel
 */
GoogleMapsPlacesV1Place.prototype['priceLevel'] = undefined;

/**
 * The primary type of the given result. This type must one of the Places API supported types. For example, \"restaurant\", \"cafe\", \"airport\", etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
 * @member {String} primaryType
 */
GoogleMapsPlacesV1Place.prototype['primaryType'] = undefined;

/**
 * @member {module:model/GoogleTypeLocalizedText} primaryTypeDisplayName
 */
GoogleMapsPlacesV1Place.prototype['primaryTypeDisplayName'] = undefined;

/**
 * A rating between 1.0 and 5.0, based on user reviews of this place.
 * @member {Number} rating
 */
GoogleMapsPlacesV1Place.prototype['rating'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1PlaceOpeningHours} regularOpeningHours
 */
GoogleMapsPlacesV1Place.prototype['regularOpeningHours'] = undefined;

/**
 * Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceOpeningHours>} regularSecondaryOpeningHours
 */
GoogleMapsPlacesV1Place.prototype['regularSecondaryOpeningHours'] = undefined;

/**
 * Specifies if the place supports reservations.
 * @member {Boolean} reservable
 */
GoogleMapsPlacesV1Place.prototype['reservable'] = undefined;

/**
 * Place has restroom.
 * @member {Boolean} restroom
 */
GoogleMapsPlacesV1Place.prototype['restroom'] = undefined;

/**
 * List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.
 * @member {Array.<module:model/GoogleMapsPlacesV1Review>} reviews
 */
GoogleMapsPlacesV1Place.prototype['reviews'] = undefined;

/**
 * Specifies if the place serves beer.
 * @member {Boolean} servesBeer
 */
GoogleMapsPlacesV1Place.prototype['servesBeer'] = undefined;

/**
 * Specifies if the place serves breakfast.
 * @member {Boolean} servesBreakfast
 */
GoogleMapsPlacesV1Place.prototype['servesBreakfast'] = undefined;

/**
 * Specifies if the place serves brunch.
 * @member {Boolean} servesBrunch
 */
GoogleMapsPlacesV1Place.prototype['servesBrunch'] = undefined;

/**
 * Place serves cocktails.
 * @member {Boolean} servesCocktails
 */
GoogleMapsPlacesV1Place.prototype['servesCocktails'] = undefined;

/**
 * Place serves coffee.
 * @member {Boolean} servesCoffee
 */
GoogleMapsPlacesV1Place.prototype['servesCoffee'] = undefined;

/**
 * Place serves dessert.
 * @member {Boolean} servesDessert
 */
GoogleMapsPlacesV1Place.prototype['servesDessert'] = undefined;

/**
 * Specifies if the place serves dinner.
 * @member {Boolean} servesDinner
 */
GoogleMapsPlacesV1Place.prototype['servesDinner'] = undefined;

/**
 * Specifies if the place serves lunch.
 * @member {Boolean} servesLunch
 */
GoogleMapsPlacesV1Place.prototype['servesLunch'] = undefined;

/**
 * Specifies if the place serves vegetarian food.
 * @member {Boolean} servesVegetarianFood
 */
GoogleMapsPlacesV1Place.prototype['servesVegetarianFood'] = undefined;

/**
 * Specifies if the place serves wine.
 * @member {Boolean} servesWine
 */
GoogleMapsPlacesV1Place.prototype['servesWine'] = undefined;

/**
 * A short, human-readable address for this place.
 * @member {String} shortFormattedAddress
 */
GoogleMapsPlacesV1Place.prototype['shortFormattedAddress'] = undefined;

/**
 * A list of sub destinations related to the place.
 * @member {Array.<module:model/GoogleMapsPlacesV1PlaceSubDestination>} subDestinations
 */
GoogleMapsPlacesV1Place.prototype['subDestinations'] = undefined;

/**
 * Specifies if the business supports takeout.
 * @member {Boolean} takeout
 */
GoogleMapsPlacesV1Place.prototype['takeout'] = undefined;

/**
 * A set of type tags for this result. For example, \"political\" and \"locality\". For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
 * @member {Array.<String>} types
 */
GoogleMapsPlacesV1Place.prototype['types'] = undefined;

/**
 * The total number of reviews (with or without text) for this place.
 * @member {Number} userRatingCount
 */
GoogleMapsPlacesV1Place.prototype['userRatingCount'] = undefined;

/**
 * Number of minutes this place's timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.
 * @member {Number} utcOffsetMinutes
 */
GoogleMapsPlacesV1Place.prototype['utcOffsetMinutes'] = undefined;

/**
 * @member {module:model/GoogleGeoTypeViewport} viewport
 */
GoogleMapsPlacesV1Place.prototype['viewport'] = undefined;

/**
 * The authoritative website for this place, e.g. a business' homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.
 * @member {String} websiteUri
 */
GoogleMapsPlacesV1Place.prototype['websiteUri'] = undefined;





/**
 * Allowed values for the <code>businessStatus</code> property.
 * @enum {String}
 * @readonly
 */
GoogleMapsPlacesV1Place['BusinessStatusEnum'] = {

    /**
     * value: "BUSINESS_STATUS_UNSPECIFIED"
     * @const
     */
    "BUSINESS_STATUS_UNSPECIFIED": "BUSINESS_STATUS_UNSPECIFIED",

    /**
     * value: "OPERATIONAL"
     * @const
     */
    "OPERATIONAL": "OPERATIONAL",

    /**
     * value: "CLOSED_TEMPORARILY"
     * @const
     */
    "CLOSED_TEMPORARILY": "CLOSED_TEMPORARILY",

    /**
     * value: "CLOSED_PERMANENTLY"
     * @const
     */
    "CLOSED_PERMANENTLY": "CLOSED_PERMANENTLY"
};


/**
 * Allowed values for the <code>priceLevel</code> property.
 * @enum {String}
 * @readonly
 */
GoogleMapsPlacesV1Place['PriceLevelEnum'] = {

    /**
     * value: "PRICE_LEVEL_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PRICE_LEVEL_UNSPECIFIED",

    /**
     * value: "PRICE_LEVEL_FREE"
     * @const
     */
    "FREE": "PRICE_LEVEL_FREE",

    /**
     * value: "PRICE_LEVEL_INEXPENSIVE"
     * @const
     */
    "INEXPENSIVE": "PRICE_LEVEL_INEXPENSIVE",

    /**
     * value: "PRICE_LEVEL_MODERATE"
     * @const
     */
    "MODERATE": "PRICE_LEVEL_MODERATE",

    /**
     * value: "PRICE_LEVEL_EXPENSIVE"
     * @const
     */
    "EXPENSIVE": "PRICE_LEVEL_EXPENSIVE",

    /**
     * value: "PRICE_LEVEL_VERY_EXPENSIVE"
     * @const
     */
    "VERY_EXPENSIVE": "PRICE_LEVEL_VERY_EXPENSIVE"
};



export default GoogleMapsPlacesV1Place;

