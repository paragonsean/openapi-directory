/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleMapsPlacesV1AuthorAttribution from './GoogleMapsPlacesV1AuthorAttribution';

/**
 * The GoogleMapsPlacesV1Photo model module.
 * @module model/GoogleMapsPlacesV1Photo
 * @version v1
 */
class GoogleMapsPlacesV1Photo {
    /**
     * Constructs a new <code>GoogleMapsPlacesV1Photo</code>.
     * Information about a photo of a place.
     * @alias module:model/GoogleMapsPlacesV1Photo
     */
    constructor() { 
        
        GoogleMapsPlacesV1Photo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlacesV1Photo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlacesV1Photo} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlacesV1Photo} The populated <code>GoogleMapsPlacesV1Photo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlacesV1Photo();

            if (data.hasOwnProperty('authorAttributions')) {
                obj['authorAttributions'] = ApiClient.convertToType(data['authorAttributions'], [GoogleMapsPlacesV1AuthorAttribution]);
            }
            if (data.hasOwnProperty('heightPx')) {
                obj['heightPx'] = ApiClient.convertToType(data['heightPx'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('widthPx')) {
                obj['widthPx'] = ApiClient.convertToType(data['widthPx'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlacesV1Photo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlacesV1Photo</code>.
     */
    static validateJSON(data) {
        if (data['authorAttributions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorAttributions'])) {
                throw new Error("Expected the field `authorAttributions` to be an array in the JSON data but got " + data['authorAttributions']);
            }
            // validate the optional field `authorAttributions` (array)
            for (const item of data['authorAttributions']) {
                GoogleMapsPlacesV1AuthorAttribution.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * This photo's authors.
 * @member {Array.<module:model/GoogleMapsPlacesV1AuthorAttribution>} authorAttributions
 */
GoogleMapsPlacesV1Photo.prototype['authorAttributions'] = undefined;

/**
 * The maximum available height, in pixels.
 * @member {Number} heightPx
 */
GoogleMapsPlacesV1Photo.prototype['heightPx'] = undefined;

/**
 * Identifier. A reference representing this place photo which may be used to look up this place photo again (also called the API \"resource\" name: `places/{place_id}/photos/{photo}`).
 * @member {String} name
 */
GoogleMapsPlacesV1Photo.prototype['name'] = undefined;

/**
 * The maximum available width, in pixels.
 * @member {Number} widthPx
 */
GoogleMapsPlacesV1Photo.prototype['widthPx'] = undefined;






export default GoogleMapsPlacesV1Photo;

