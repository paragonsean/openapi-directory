/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText from './GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText';
import GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat from './GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat';

/**
 * The GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction model module.
 * @module model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction
 * @version v1
 */
class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction {
    /**
     * Constructs a new <code>GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction</code>.
     * Prediction results for a Place Autocomplete prediction.
     * @alias module:model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction
     */
    constructor() { 
        
        GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction} The populated <code>GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction();

            if (data.hasOwnProperty('distanceMeters')) {
                obj['distanceMeters'] = ApiClient.convertToType(data['distanceMeters'], 'Number');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = ApiClient.convertToType(data['place'], 'String');
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('structuredFormat')) {
                obj['structuredFormat'] = GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.constructFromObject(data['structuredFormat']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['place'] && !(typeof data['place'] === 'string' || data['place'] instanceof String)) {
            throw new Error("Expected the field `place` to be a primitive type in the JSON string but got " + data['place']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        // validate the optional field `structuredFormat`
        if (data['structuredFormat']) { // data not null
          GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.validateJSON(data['structuredFormat']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.validateJSON(data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * The length of the geodesic in meters from `origin` if `origin` is specified. Certain predictions such as routes may not populate this field.
 * @member {Number} distanceMeters
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['distanceMeters'] = undefined;

/**
 * The resource name of the suggested Place. This name can be used in other APIs that accept Place names.
 * @member {String} place
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['place'] = undefined;

/**
 * The unique identifier of the suggested Place. This identifier can be used in other APIs that accept Place IDs.
 * @member {String} placeId
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['placeId'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat} structuredFormat
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['structuredFormat'] = undefined;

/**
 * @member {module:model/GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText} text
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['text'] = undefined;

/**
 * List of types that apply to this Place from Table A or Table B in https://developers.google.com/maps/documentation/places/web-service/place-types. A type is a categorization of a Place. Places with shared types will share similar characteristics.
 * @member {Array.<String>} types
 */
GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.prototype['types'] = undefined;






export default GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction;

