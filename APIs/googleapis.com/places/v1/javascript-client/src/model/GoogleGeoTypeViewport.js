/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleTypeLatLng from './GoogleTypeLatLng';

/**
 * The GoogleGeoTypeViewport model module.
 * @module model/GoogleGeoTypeViewport
 * @version v1
 */
class GoogleGeoTypeViewport {
    /**
     * Constructs a new <code>GoogleGeoTypeViewport</code>.
     * A latitude-longitude viewport, represented as two diagonally opposite &#x60;low&#x60; and &#x60;high&#x60; points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If &#x60;low&#x60; &#x3D; &#x60;high&#x60;, the viewport consists of that single point. - If &#x60;low.longitude&#x60; &gt; &#x60;high.longitude&#x60;, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If &#x60;low.longitude&#x60; &#x3D; -180 degrees and &#x60;high.longitude&#x60; &#x3D; 180 degrees, the viewport includes all longitudes. - If &#x60;low.longitude&#x60; &#x3D; 180 degrees and &#x60;high.longitude&#x60; &#x3D; -180 degrees, the longitude range is empty. - If &#x60;low.latitude&#x60; &gt; &#x60;high.latitude&#x60;, the latitude range is empty. Both &#x60;low&#x60; and &#x60;high&#x60; must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { \&quot;low\&quot;: { \&quot;latitude\&quot;: 40.477398, \&quot;longitude\&quot;: -74.259087 }, \&quot;high\&quot;: { \&quot;latitude\&quot;: 40.91618, \&quot;longitude\&quot;: -73.70018 } }
     * @alias module:model/GoogleGeoTypeViewport
     */
    constructor() { 
        
        GoogleGeoTypeViewport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleGeoTypeViewport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleGeoTypeViewport} obj Optional instance to populate.
     * @return {module:model/GoogleGeoTypeViewport} The populated <code>GoogleGeoTypeViewport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleGeoTypeViewport();

            if (data.hasOwnProperty('high')) {
                obj['high'] = GoogleTypeLatLng.constructFromObject(data['high']);
            }
            if (data.hasOwnProperty('low')) {
                obj['low'] = GoogleTypeLatLng.constructFromObject(data['low']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleGeoTypeViewport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleGeoTypeViewport</code>.
     */
    static validateJSON(data) {
        // validate the optional field `high`
        if (data['high']) { // data not null
          GoogleTypeLatLng.validateJSON(data['high']);
        }
        // validate the optional field `low`
        if (data['low']) { // data not null
          GoogleTypeLatLng.validateJSON(data['low']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleTypeLatLng} high
 */
GoogleGeoTypeViewport.prototype['high'] = undefined;

/**
 * @member {module:model/GoogleTypeLatLng} low
 */
GoogleGeoTypeViewport.prototype['low'] = undefined;






export default GoogleGeoTypeViewport;

