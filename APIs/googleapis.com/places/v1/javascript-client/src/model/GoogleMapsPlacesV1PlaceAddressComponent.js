/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleMapsPlacesV1PlaceAddressComponent model module.
 * @module model/GoogleMapsPlacesV1PlaceAddressComponent
 * @version v1
 */
class GoogleMapsPlacesV1PlaceAddressComponent {
    /**
     * Constructs a new <code>GoogleMapsPlacesV1PlaceAddressComponent</code>.
     * The structured components that form the formatted address, if this information is available.
     * @alias module:model/GoogleMapsPlacesV1PlaceAddressComponent
     */
    constructor() { 
        
        GoogleMapsPlacesV1PlaceAddressComponent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleMapsPlacesV1PlaceAddressComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleMapsPlacesV1PlaceAddressComponent} obj Optional instance to populate.
     * @return {module:model/GoogleMapsPlacesV1PlaceAddressComponent} The populated <code>GoogleMapsPlacesV1PlaceAddressComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleMapsPlacesV1PlaceAddressComponent();

            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('longText')) {
                obj['longText'] = ApiClient.convertToType(data['longText'], 'String');
            }
            if (data.hasOwnProperty('shortText')) {
                obj['shortText'] = ApiClient.convertToType(data['shortText'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleMapsPlacesV1PlaceAddressComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleMapsPlacesV1PlaceAddressComponent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['longText'] && !(typeof data['longText'] === 'string' || data['longText'] instanceof String)) {
            throw new Error("Expected the field `longText` to be a primitive type in the JSON string but got " + data['longText']);
        }
        // ensure the json data is a string
        if (data['shortText'] && !(typeof data['shortText'] === 'string' || data['shortText'] instanceof String)) {
            throw new Error("Expected the field `shortText` to be a primitive type in the JSON string but got " + data['shortText']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * The language used to format this components, in CLDR notation.
 * @member {String} languageCode
 */
GoogleMapsPlacesV1PlaceAddressComponent.prototype['languageCode'] = undefined;

/**
 * The full text description or name of the address component. For example, an address component for the country Australia may have a long_name of \"Australia\".
 * @member {String} longText
 */
GoogleMapsPlacesV1PlaceAddressComponent.prototype['longText'] = undefined;

/**
 * An abbreviated textual name for the address component, if available. For example, an address component for the country of Australia may have a short_name of \"AU\".
 * @member {String} shortText
 */
GoogleMapsPlacesV1PlaceAddressComponent.prototype['shortText'] = undefined;

/**
 * An array indicating the type(s) of the address component.
 * @member {Array.<String>} types
 */
GoogleMapsPlacesV1PlaceAddressComponent.prototype['types'] = undefined;






export default GoogleMapsPlacesV1PlaceAddressComponent;

