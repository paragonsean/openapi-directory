/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PlacesApiNew);
  }
}(this, function(expect, PlacesApiNew) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleMapsPlacesV1Place', function() {
    it('should create an instance of GoogleMapsPlacesV1Place', function() {
      // uncomment below and update the code to test GoogleMapsPlacesV1Place
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be.a(PlacesApiNew.GoogleMapsPlacesV1Place);
    });

    it('should have the property accessibilityOptions (base name: "accessibilityOptions")', function() {
      // uncomment below and update the code to test the property accessibilityOptions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property addressComponents (base name: "addressComponents")', function() {
      // uncomment below and update the code to test the property addressComponents
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property adrFormatAddress (base name: "adrFormatAddress")', function() {
      // uncomment below and update the code to test the property adrFormatAddress
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property allowsDogs (base name: "allowsDogs")', function() {
      // uncomment below and update the code to test the property allowsDogs
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property attributions (base name: "attributions")', function() {
      // uncomment below and update the code to test the property attributions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property businessStatus (base name: "businessStatus")', function() {
      // uncomment below and update the code to test the property businessStatus
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property curbsidePickup (base name: "curbsidePickup")', function() {
      // uncomment below and update the code to test the property curbsidePickup
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property currentOpeningHours (base name: "currentOpeningHours")', function() {
      // uncomment below and update the code to test the property currentOpeningHours
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property currentSecondaryOpeningHours (base name: "currentSecondaryOpeningHours")', function() {
      // uncomment below and update the code to test the property currentSecondaryOpeningHours
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property delivery (base name: "delivery")', function() {
      // uncomment below and update the code to test the property delivery
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property dineIn (base name: "dineIn")', function() {
      // uncomment below and update the code to test the property dineIn
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property editorialSummary (base name: "editorialSummary")', function() {
      // uncomment below and update the code to test the property editorialSummary
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property evChargeOptions (base name: "evChargeOptions")', function() {
      // uncomment below and update the code to test the property evChargeOptions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property formattedAddress (base name: "formattedAddress")', function() {
      // uncomment below and update the code to test the property formattedAddress
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property fuelOptions (base name: "fuelOptions")', function() {
      // uncomment below and update the code to test the property fuelOptions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property goodForChildren (base name: "goodForChildren")', function() {
      // uncomment below and update the code to test the property goodForChildren
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property goodForGroups (base name: "goodForGroups")', function() {
      // uncomment below and update the code to test the property goodForGroups
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property goodForWatchingSports (base name: "goodForWatchingSports")', function() {
      // uncomment below and update the code to test the property goodForWatchingSports
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property googleMapsUri (base name: "googleMapsUri")', function() {
      // uncomment below and update the code to test the property googleMapsUri
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property iconBackgroundColor (base name: "iconBackgroundColor")', function() {
      // uncomment below and update the code to test the property iconBackgroundColor
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property iconMaskBaseUri (base name: "iconMaskBaseUri")', function() {
      // uncomment below and update the code to test the property iconMaskBaseUri
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property internationalPhoneNumber (base name: "internationalPhoneNumber")', function() {
      // uncomment below and update the code to test the property internationalPhoneNumber
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property liveMusic (base name: "liveMusic")', function() {
      // uncomment below and update the code to test the property liveMusic
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property menuForChildren (base name: "menuForChildren")', function() {
      // uncomment below and update the code to test the property menuForChildren
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property nationalPhoneNumber (base name: "nationalPhoneNumber")', function() {
      // uncomment below and update the code to test the property nationalPhoneNumber
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property outdoorSeating (base name: "outdoorSeating")', function() {
      // uncomment below and update the code to test the property outdoorSeating
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property parkingOptions (base name: "parkingOptions")', function() {
      // uncomment below and update the code to test the property parkingOptions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property paymentOptions (base name: "paymentOptions")', function() {
      // uncomment below and update the code to test the property paymentOptions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property photos (base name: "photos")', function() {
      // uncomment below and update the code to test the property photos
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property plusCode (base name: "plusCode")', function() {
      // uncomment below and update the code to test the property plusCode
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property priceLevel (base name: "priceLevel")', function() {
      // uncomment below and update the code to test the property priceLevel
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property primaryType (base name: "primaryType")', function() {
      // uncomment below and update the code to test the property primaryType
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property primaryTypeDisplayName (base name: "primaryTypeDisplayName")', function() {
      // uncomment below and update the code to test the property primaryTypeDisplayName
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property regularOpeningHours (base name: "regularOpeningHours")', function() {
      // uncomment below and update the code to test the property regularOpeningHours
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property regularSecondaryOpeningHours (base name: "regularSecondaryOpeningHours")', function() {
      // uncomment below and update the code to test the property regularSecondaryOpeningHours
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property reservable (base name: "reservable")', function() {
      // uncomment below and update the code to test the property reservable
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property restroom (base name: "restroom")', function() {
      // uncomment below and update the code to test the property restroom
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property reviews (base name: "reviews")', function() {
      // uncomment below and update the code to test the property reviews
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesBeer (base name: "servesBeer")', function() {
      // uncomment below and update the code to test the property servesBeer
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesBreakfast (base name: "servesBreakfast")', function() {
      // uncomment below and update the code to test the property servesBreakfast
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesBrunch (base name: "servesBrunch")', function() {
      // uncomment below and update the code to test the property servesBrunch
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesCocktails (base name: "servesCocktails")', function() {
      // uncomment below and update the code to test the property servesCocktails
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesCoffee (base name: "servesCoffee")', function() {
      // uncomment below and update the code to test the property servesCoffee
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesDessert (base name: "servesDessert")', function() {
      // uncomment below and update the code to test the property servesDessert
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesDinner (base name: "servesDinner")', function() {
      // uncomment below and update the code to test the property servesDinner
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesLunch (base name: "servesLunch")', function() {
      // uncomment below and update the code to test the property servesLunch
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesVegetarianFood (base name: "servesVegetarianFood")', function() {
      // uncomment below and update the code to test the property servesVegetarianFood
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property servesWine (base name: "servesWine")', function() {
      // uncomment below and update the code to test the property servesWine
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property shortFormattedAddress (base name: "shortFormattedAddress")', function() {
      // uncomment below and update the code to test the property shortFormattedAddress
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property subDestinations (base name: "subDestinations")', function() {
      // uncomment below and update the code to test the property subDestinations
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property takeout (base name: "takeout")', function() {
      // uncomment below and update the code to test the property takeout
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property types (base name: "types")', function() {
      // uncomment below and update the code to test the property types
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property userRatingCount (base name: "userRatingCount")', function() {
      // uncomment below and update the code to test the property userRatingCount
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property utcOffsetMinutes (base name: "utcOffsetMinutes")', function() {
      // uncomment below and update the code to test the property utcOffsetMinutes
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property viewport (base name: "viewport")', function() {
      // uncomment below and update the code to test the property viewport
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

    it('should have the property websiteUri (base name: "websiteUri")', function() {
      // uncomment below and update the code to test the property websiteUri
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1Place();
      //expect(instance).to.be();
    });

  });

}));
