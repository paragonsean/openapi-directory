/**
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PlacesApiNew);
  }
}(this, function(expect, PlacesApiNew) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GoogleMapsPlacesV1AutocompletePlacesRequest', function() {
    it('should create an instance of GoogleMapsPlacesV1AutocompletePlacesRequest', function() {
      // uncomment below and update the code to test GoogleMapsPlacesV1AutocompletePlacesRequest
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be.a(PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest);
    });

    it('should have the property includeQueryPredictions (base name: "includeQueryPredictions")', function() {
      // uncomment below and update the code to test the property includeQueryPredictions
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property includedPrimaryTypes (base name: "includedPrimaryTypes")', function() {
      // uncomment below and update the code to test the property includedPrimaryTypes
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property includedRegionCodes (base name: "includedRegionCodes")', function() {
      // uncomment below and update the code to test the property includedRegionCodes
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property input (base name: "input")', function() {
      // uncomment below and update the code to test the property input
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property inputOffset (base name: "inputOffset")', function() {
      // uncomment below and update the code to test the property inputOffset
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property languageCode (base name: "languageCode")', function() {
      // uncomment below and update the code to test the property languageCode
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property locationBias (base name: "locationBias")', function() {
      // uncomment below and update the code to test the property locationBias
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property locationRestriction (base name: "locationRestriction")', function() {
      // uncomment below and update the code to test the property locationRestriction
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property regionCode (base name: "regionCode")', function() {
      // uncomment below and update the code to test the property regionCode
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

    it('should have the property sessionToken (base name: "sessionToken")', function() {
      // uncomment below and update the code to test the property sessionToken
      //var instance = new PlacesApiNew.GoogleMapsPlacesV1AutocompletePlacesRequest();
      //expect(instance).to.be();
    });

  });

}));
