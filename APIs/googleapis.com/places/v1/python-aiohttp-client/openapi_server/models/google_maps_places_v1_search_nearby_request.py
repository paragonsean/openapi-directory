# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_places_v1_search_nearby_request_location_restriction import GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction
from openapi_server import util


class GoogleMapsPlacesV1SearchNearbyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, excluded_primary_types: List[str]=None, excluded_types: List[str]=None, included_primary_types: List[str]=None, included_types: List[str]=None, language_code: str=None, location_restriction: GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction=None, max_result_count: int=None, rank_preference: str=None, region_code: str=None):
        """GoogleMapsPlacesV1SearchNearbyRequest - a model defined in OpenAPI

        :param excluded_primary_types: The excluded_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param excluded_types: The excluded_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param included_primary_types: The included_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param included_types: The included_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param language_code: The language_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param location_restriction: The location_restriction of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param max_result_count: The max_result_count of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param rank_preference: The rank_preference of this GoogleMapsPlacesV1SearchNearbyRequest.
        :param region_code: The region_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        """
        self.openapi_types = {
            'excluded_primary_types': List[str],
            'excluded_types': List[str],
            'included_primary_types': List[str],
            'included_types': List[str],
            'language_code': str,
            'location_restriction': GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction,
            'max_result_count': int,
            'rank_preference': str,
            'region_code': str
        }

        self.attribute_map = {
            'excluded_primary_types': 'excludedPrimaryTypes',
            'excluded_types': 'excludedTypes',
            'included_primary_types': 'includedPrimaryTypes',
            'included_types': 'includedTypes',
            'language_code': 'languageCode',
            'location_restriction': 'locationRestriction',
            'max_result_count': 'maxResultCount',
            'rank_preference': 'rankPreference',
            'region_code': 'regionCode'
        }

        self._excluded_primary_types = excluded_primary_types
        self._excluded_types = excluded_types
        self._included_primary_types = included_primary_types
        self._included_types = included_types
        self._language_code = language_code
        self._location_restriction = location_restriction
        self._max_result_count = max_result_count
        self._rank_preference = rank_preference
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1SearchNearbyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1SearchNearbyRequest of this GoogleMapsPlacesV1SearchNearbyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def excluded_primary_types(self):
        """Gets the excluded_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Excluded primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :return: The excluded_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: List[str]
        """
        return self._excluded_primary_types

    @excluded_primary_types.setter
    def excluded_primary_types(self, excluded_primary_types):
        """Sets the excluded_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Excluded primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :param excluded_primary_types: The excluded_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type excluded_primary_types: List[str]
        """

        self._excluded_primary_types = excluded_primary_types

    @property
    def excluded_types(self):
        """Gets the excluded_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Excluded Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If the client provides both included_types (e.g. restaurant) and excluded_types (e.g. cafe), then the response should include places that are restaurant but not cafe. The response includes places that match at least one of the included_types and none of the excluded_types. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :return: The excluded_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: List[str]
        """
        return self._excluded_types

    @excluded_types.setter
    def excluded_types(self, excluded_types):
        """Sets the excluded_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Excluded Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If the client provides both included_types (e.g. restaurant) and excluded_types (e.g. cafe), then the response should include places that are restaurant but not cafe. The response includes places that match at least one of the included_types and none of the excluded_types. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :param excluded_types: The excluded_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type excluded_types: List[str]
        """

        self._excluded_types = excluded_types

    @property
    def included_primary_types(self):
        """Gets the included_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Included primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. A place can only have a single primary type from the supported types table associated with it. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :return: The included_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: List[str]
        """
        return self._included_primary_types

    @included_primary_types.setter
    def included_primary_types(self, included_primary_types):
        """Sets the included_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Included primary Place type (e.g. \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. A place can only have a single primary type from the supported types table associated with it. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting primary types, i.e. a type appears in both included_primary_types and excluded_primary_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :param included_primary_types: The included_primary_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type included_primary_types: List[str]
        """

        self._included_primary_types = included_primary_types

    @property
    def included_types(self):
        """Gets the included_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Included Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :return: The included_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: List[str]
        """
        return self._included_types

    @included_types.setter
    def included_types(self, included_types):
        """Sets the included_types of this GoogleMapsPlacesV1SearchNearbyRequest.

        Included Place type (eg, \"restaurant\" or \"gas_station\") from https://developers.google.com/maps/documentation/places/web-service/place-types. Up to 50 types from [Table A](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) may be specified. If there are any conflicting types, i.e. a type appears in both included_types and excluded_types, an INVALID_ARGUMENT error is returned. If a Place type is specified with multiple type restrictions, only places that satisfy all of the restrictions are returned. For example, if we have {included_types = [\"restaurant\"], excluded_primary_types = [\"restaurant\"]}, the returned places provide \"restaurant\" related services but do not operate primarily as \"restaurants\".

        :param included_types: The included_types of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type included_types: List[str]
        """

        self._included_types = included_types

    @property
    def language_code(self):
        """Gets the language_code of this GoogleMapsPlacesV1SearchNearbyRequest.

        Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.

        :return: The language_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleMapsPlacesV1SearchNearbyRequest.

        Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.

        :param language_code: The language_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def location_restriction(self):
        """Gets the location_restriction of this GoogleMapsPlacesV1SearchNearbyRequest.


        :return: The location_restriction of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction
        """
        return self._location_restriction

    @location_restriction.setter
    def location_restriction(self, location_restriction):
        """Sets the location_restriction of this GoogleMapsPlacesV1SearchNearbyRequest.


        :param location_restriction: The location_restriction of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type location_restriction: GoogleMapsPlacesV1SearchNearbyRequestLocationRestriction
        """

        self._location_restriction = location_restriction

    @property
    def max_result_count(self):
        """Gets the max_result_count of this GoogleMapsPlacesV1SearchNearbyRequest.

        Maximum number of results to return. It must be between 1 and 20 (default), inclusively. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.

        :return: The max_result_count of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: int
        """
        return self._max_result_count

    @max_result_count.setter
    def max_result_count(self, max_result_count):
        """Sets the max_result_count of this GoogleMapsPlacesV1SearchNearbyRequest.

        Maximum number of results to return. It must be between 1 and 20 (default), inclusively. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.

        :param max_result_count: The max_result_count of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type max_result_count: int
        """

        self._max_result_count = max_result_count

    @property
    def rank_preference(self):
        """Gets the rank_preference of this GoogleMapsPlacesV1SearchNearbyRequest.

        How results will be ranked in the response.

        :return: The rank_preference of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: str
        """
        return self._rank_preference

    @rank_preference.setter
    def rank_preference(self, rank_preference):
        """Sets the rank_preference of this GoogleMapsPlacesV1SearchNearbyRequest.

        How results will be ranked in the response.

        :param rank_preference: The rank_preference of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type rank_preference: str
        """
        allowed_values = ["RANK_PREFERENCE_UNSPECIFIED", "DISTANCE", "POPULARITY"]  # noqa: E501
        if rank_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `rank_preference` ({0}), must be one of {1}"
                .format(rank_preference, allowed_values)
            )

        self._rank_preference = rank_preference

    @property
    def region_code(self):
        """Gets the region_code of this GoogleMapsPlacesV1SearchNearbyRequest.

        The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.

        :return: The region_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this GoogleMapsPlacesV1SearchNearbyRequest.

        The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.

        :param region_code: The region_code of this GoogleMapsPlacesV1SearchNearbyRequest.
        :type region_code: str
        """

        self._region_code = region_code
