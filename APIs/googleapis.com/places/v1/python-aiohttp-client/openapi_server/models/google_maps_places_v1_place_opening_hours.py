# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_places_v1_place_opening_hours_period import GoogleMapsPlacesV1PlaceOpeningHoursPeriod
from openapi_server.models.google_maps_places_v1_place_opening_hours_special_day import GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay
from openapi_server import util


class GoogleMapsPlacesV1PlaceOpeningHours(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, open_now: bool=None, periods: List[GoogleMapsPlacesV1PlaceOpeningHoursPeriod]=None, secondary_hours_type: str=None, special_days: List[GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay]=None, weekday_descriptions: List[str]=None):
        """GoogleMapsPlacesV1PlaceOpeningHours - a model defined in OpenAPI

        :param open_now: The open_now of this GoogleMapsPlacesV1PlaceOpeningHours.
        :param periods: The periods of this GoogleMapsPlacesV1PlaceOpeningHours.
        :param secondary_hours_type: The secondary_hours_type of this GoogleMapsPlacesV1PlaceOpeningHours.
        :param special_days: The special_days of this GoogleMapsPlacesV1PlaceOpeningHours.
        :param weekday_descriptions: The weekday_descriptions of this GoogleMapsPlacesV1PlaceOpeningHours.
        """
        self.openapi_types = {
            'open_now': bool,
            'periods': List[GoogleMapsPlacesV1PlaceOpeningHoursPeriod],
            'secondary_hours_type': str,
            'special_days': List[GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay],
            'weekday_descriptions': List[str]
        }

        self.attribute_map = {
            'open_now': 'openNow',
            'periods': 'periods',
            'secondary_hours_type': 'secondaryHoursType',
            'special_days': 'specialDays',
            'weekday_descriptions': 'weekdayDescriptions'
        }

        self._open_now = open_now
        self._periods = periods
        self._secondary_hours_type = secondary_hours_type
        self._special_days = special_days
        self._weekday_descriptions = weekday_descriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1PlaceOpeningHours':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1PlaceOpeningHours of this GoogleMapsPlacesV1PlaceOpeningHours.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def open_now(self):
        """Gets the open_now of this GoogleMapsPlacesV1PlaceOpeningHours.

        Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.

        :return: The open_now of this GoogleMapsPlacesV1PlaceOpeningHours.
        :rtype: bool
        """
        return self._open_now

    @open_now.setter
    def open_now(self, open_now):
        """Sets the open_now of this GoogleMapsPlacesV1PlaceOpeningHours.

        Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.

        :param open_now: The open_now of this GoogleMapsPlacesV1PlaceOpeningHours.
        :type open_now: bool
        """

        self._open_now = open_now

    @property
    def periods(self):
        """Gets the periods of this GoogleMapsPlacesV1PlaceOpeningHours.

        The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.

        :return: The periods of this GoogleMapsPlacesV1PlaceOpeningHours.
        :rtype: List[GoogleMapsPlacesV1PlaceOpeningHoursPeriod]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this GoogleMapsPlacesV1PlaceOpeningHours.

        The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.

        :param periods: The periods of this GoogleMapsPlacesV1PlaceOpeningHours.
        :type periods: List[GoogleMapsPlacesV1PlaceOpeningHoursPeriod]
        """

        self._periods = periods

    @property
    def secondary_hours_type(self):
        """Gets the secondary_hours_type of this GoogleMapsPlacesV1PlaceOpeningHours.

        A type string used to identify the type of secondary hours.

        :return: The secondary_hours_type of this GoogleMapsPlacesV1PlaceOpeningHours.
        :rtype: str
        """
        return self._secondary_hours_type

    @secondary_hours_type.setter
    def secondary_hours_type(self, secondary_hours_type):
        """Sets the secondary_hours_type of this GoogleMapsPlacesV1PlaceOpeningHours.

        A type string used to identify the type of secondary hours.

        :param secondary_hours_type: The secondary_hours_type of this GoogleMapsPlacesV1PlaceOpeningHours.
        :type secondary_hours_type: str
        """
        allowed_values = ["SECONDARY_HOURS_TYPE_UNSPECIFIED", "DRIVE_THROUGH", "HAPPY_HOUR", "DELIVERY", "TAKEOUT", "KITCHEN", "BREAKFAST", "LUNCH", "DINNER", "BRUNCH", "PICKUP", "ACCESS", "SENIOR_HOURS", "ONLINE_SERVICE_HOURS"]  # noqa: E501
        if secondary_hours_type not in allowed_values:
            raise ValueError(
                "Invalid value for `secondary_hours_type` ({0}), must be one of {1}"
                .format(secondary_hours_type, allowed_values)
            )

        self._secondary_hours_type = secondary_hours_type

    @property
    def special_days(self):
        """Gets the special_days of this GoogleMapsPlacesV1PlaceOpeningHours.

        Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.

        :return: The special_days of this GoogleMapsPlacesV1PlaceOpeningHours.
        :rtype: List[GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay]
        """
        return self._special_days

    @special_days.setter
    def special_days(self, special_days):
        """Sets the special_days of this GoogleMapsPlacesV1PlaceOpeningHours.

        Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.

        :param special_days: The special_days of this GoogleMapsPlacesV1PlaceOpeningHours.
        :type special_days: List[GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay]
        """

        self._special_days = special_days

    @property
    def weekday_descriptions(self):
        """Gets the weekday_descriptions of this GoogleMapsPlacesV1PlaceOpeningHours.

        Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: \"Sun: 18:00–06:00\"

        :return: The weekday_descriptions of this GoogleMapsPlacesV1PlaceOpeningHours.
        :rtype: List[str]
        """
        return self._weekday_descriptions

    @weekday_descriptions.setter
    def weekday_descriptions(self, weekday_descriptions):
        """Sets the weekday_descriptions of this GoogleMapsPlacesV1PlaceOpeningHours.

        Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: \"Sun: 18:00–06:00\"

        :param weekday_descriptions: The weekday_descriptions of this GoogleMapsPlacesV1PlaceOpeningHours.
        :type weekday_descriptions: List[str]
        """

        self._weekday_descriptions = weekday_descriptions
