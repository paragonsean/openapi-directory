# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_last_update_time: str=None, available_count: int=None, count: int=None, max_charge_rate_kw: float=None, out_of_service_count: int=None, type: str=None):
        """GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation - a model defined in OpenAPI

        :param availability_last_update_time: The availability_last_update_time of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :param available_count: The available_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :param count: The count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :param max_charge_rate_kw: The max_charge_rate_kw of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :param out_of_service_count: The out_of_service_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :param type: The type of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        """
        self.openapi_types = {
            'availability_last_update_time': str,
            'available_count': int,
            'count': int,
            'max_charge_rate_kw': float,
            'out_of_service_count': int,
            'type': str
        }

        self.attribute_map = {
            'availability_last_update_time': 'availabilityLastUpdateTime',
            'available_count': 'availableCount',
            'count': 'count',
            'max_charge_rate_kw': 'maxChargeRateKw',
            'out_of_service_count': 'outOfServiceCount',
            'type': 'type'
        }

        self._availability_last_update_time = availability_last_update_time
        self._available_count = available_count
        self._count = count
        self._max_charge_rate_kw = max_charge_rate_kw
        self._out_of_service_count = out_of_service_count
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_last_update_time(self):
        """Gets the availability_last_update_time of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The timestamp when the connector availability information in this aggregation was last updated.

        :return: The availability_last_update_time of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: str
        """
        return self._availability_last_update_time

    @availability_last_update_time.setter
    def availability_last_update_time(self, availability_last_update_time):
        """Sets the availability_last_update_time of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The timestamp when the connector availability information in this aggregation was last updated.

        :param availability_last_update_time: The availability_last_update_time of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type availability_last_update_time: str
        """

        self._availability_last_update_time = availability_last_update_time

    @property
    def available_count(self):
        """Gets the available_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation that are currently available.

        :return: The available_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: int
        """
        return self._available_count

    @available_count.setter
    def available_count(self, available_count):
        """Sets the available_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation that are currently available.

        :param available_count: The available_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type available_count: int
        """

        self._available_count = available_count

    @property
    def count(self):
        """Gets the count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation.

        :return: The count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation.

        :param count: The count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type count: int
        """

        self._count = count

    @property
    def max_charge_rate_kw(self):
        """Gets the max_charge_rate_kw of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The static max charging rate in kw of each connector in the aggregation.

        :return: The max_charge_rate_kw of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: float
        """
        return self._max_charge_rate_kw

    @max_charge_rate_kw.setter
    def max_charge_rate_kw(self, max_charge_rate_kw):
        """Sets the max_charge_rate_kw of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The static max charging rate in kw of each connector in the aggregation.

        :param max_charge_rate_kw: The max_charge_rate_kw of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type max_charge_rate_kw: float
        """

        self._max_charge_rate_kw = max_charge_rate_kw

    @property
    def out_of_service_count(self):
        """Gets the out_of_service_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation that are currently out of service.

        :return: The out_of_service_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: int
        """
        return self._out_of_service_count

    @out_of_service_count.setter
    def out_of_service_count(self, out_of_service_count):
        """Sets the out_of_service_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        Number of connectors in this aggregation that are currently out of service.

        :param out_of_service_count: The out_of_service_count of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type out_of_service_count: int
        """

        self._out_of_service_count = out_of_service_count

    @property
    def type(self):
        """Gets the type of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The connector type of this aggregation.

        :return: The type of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.

        The connector type of this aggregation.

        :param type: The type of this GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.
        :type type: str
        """
        allowed_values = ["EV_CONNECTOR_TYPE_UNSPECIFIED", "EV_CONNECTOR_TYPE_OTHER", "EV_CONNECTOR_TYPE_J1772", "EV_CONNECTOR_TYPE_TYPE_2", "EV_CONNECTOR_TYPE_CHADEMO", "EV_CONNECTOR_TYPE_CCS_COMBO_1", "EV_CONNECTOR_TYPE_CCS_COMBO_2", "EV_CONNECTOR_TYPE_TESLA", "EV_CONNECTOR_TYPE_UNSPECIFIED_GB_T", "EV_CONNECTOR_TYPE_UNSPECIFIED_WALL_OUTLET"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
