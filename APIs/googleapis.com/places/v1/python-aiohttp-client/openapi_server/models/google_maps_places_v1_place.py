# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_geo_type_viewport import GoogleGeoTypeViewport
from openapi_server.models.google_maps_places_v1_ev_charge_options import GoogleMapsPlacesV1EVChargeOptions
from openapi_server.models.google_maps_places_v1_fuel_options import GoogleMapsPlacesV1FuelOptions
from openapi_server.models.google_maps_places_v1_photo import GoogleMapsPlacesV1Photo
from openapi_server.models.google_maps_places_v1_place_accessibility_options import GoogleMapsPlacesV1PlaceAccessibilityOptions
from openapi_server.models.google_maps_places_v1_place_address_component import GoogleMapsPlacesV1PlaceAddressComponent
from openapi_server.models.google_maps_places_v1_place_attribution import GoogleMapsPlacesV1PlaceAttribution
from openapi_server.models.google_maps_places_v1_place_opening_hours import GoogleMapsPlacesV1PlaceOpeningHours
from openapi_server.models.google_maps_places_v1_place_parking_options import GoogleMapsPlacesV1PlaceParkingOptions
from openapi_server.models.google_maps_places_v1_place_payment_options import GoogleMapsPlacesV1PlacePaymentOptions
from openapi_server.models.google_maps_places_v1_place_plus_code import GoogleMapsPlacesV1PlacePlusCode
from openapi_server.models.google_maps_places_v1_place_sub_destination import GoogleMapsPlacesV1PlaceSubDestination
from openapi_server.models.google_maps_places_v1_review import GoogleMapsPlacesV1Review
from openapi_server.models.google_type_lat_lng import GoogleTypeLatLng
from openapi_server.models.google_type_localized_text import GoogleTypeLocalizedText
from openapi_server import util


class GoogleMapsPlacesV1Place(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessibility_options: GoogleMapsPlacesV1PlaceAccessibilityOptions=None, address_components: List[GoogleMapsPlacesV1PlaceAddressComponent]=None, adr_format_address: str=None, allows_dogs: bool=None, attributions: List[GoogleMapsPlacesV1PlaceAttribution]=None, business_status: str=None, curbside_pickup: bool=None, current_opening_hours: GoogleMapsPlacesV1PlaceOpeningHours=None, current_secondary_opening_hours: List[GoogleMapsPlacesV1PlaceOpeningHours]=None, delivery: bool=None, dine_in: bool=None, display_name: GoogleTypeLocalizedText=None, editorial_summary: GoogleTypeLocalizedText=None, ev_charge_options: GoogleMapsPlacesV1EVChargeOptions=None, formatted_address: str=None, fuel_options: GoogleMapsPlacesV1FuelOptions=None, good_for_children: bool=None, good_for_groups: bool=None, good_for_watching_sports: bool=None, google_maps_uri: str=None, icon_background_color: str=None, icon_mask_base_uri: str=None, id: str=None, international_phone_number: str=None, live_music: bool=None, location: GoogleTypeLatLng=None, menu_for_children: bool=None, name: str=None, national_phone_number: str=None, outdoor_seating: bool=None, parking_options: GoogleMapsPlacesV1PlaceParkingOptions=None, payment_options: GoogleMapsPlacesV1PlacePaymentOptions=None, photos: List[GoogleMapsPlacesV1Photo]=None, plus_code: GoogleMapsPlacesV1PlacePlusCode=None, price_level: str=None, primary_type: str=None, primary_type_display_name: GoogleTypeLocalizedText=None, rating: float=None, regular_opening_hours: GoogleMapsPlacesV1PlaceOpeningHours=None, regular_secondary_opening_hours: List[GoogleMapsPlacesV1PlaceOpeningHours]=None, reservable: bool=None, restroom: bool=None, reviews: List[GoogleMapsPlacesV1Review]=None, serves_beer: bool=None, serves_breakfast: bool=None, serves_brunch: bool=None, serves_cocktails: bool=None, serves_coffee: bool=None, serves_dessert: bool=None, serves_dinner: bool=None, serves_lunch: bool=None, serves_vegetarian_food: bool=None, serves_wine: bool=None, short_formatted_address: str=None, sub_destinations: List[GoogleMapsPlacesV1PlaceSubDestination]=None, takeout: bool=None, types: List[str]=None, user_rating_count: int=None, utc_offset_minutes: int=None, viewport: GoogleGeoTypeViewport=None, website_uri: str=None):
        """GoogleMapsPlacesV1Place - a model defined in OpenAPI

        :param accessibility_options: The accessibility_options of this GoogleMapsPlacesV1Place.
        :param address_components: The address_components of this GoogleMapsPlacesV1Place.
        :param adr_format_address: The adr_format_address of this GoogleMapsPlacesV1Place.
        :param allows_dogs: The allows_dogs of this GoogleMapsPlacesV1Place.
        :param attributions: The attributions of this GoogleMapsPlacesV1Place.
        :param business_status: The business_status of this GoogleMapsPlacesV1Place.
        :param curbside_pickup: The curbside_pickup of this GoogleMapsPlacesV1Place.
        :param current_opening_hours: The current_opening_hours of this GoogleMapsPlacesV1Place.
        :param current_secondary_opening_hours: The current_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :param delivery: The delivery of this GoogleMapsPlacesV1Place.
        :param dine_in: The dine_in of this GoogleMapsPlacesV1Place.
        :param display_name: The display_name of this GoogleMapsPlacesV1Place.
        :param editorial_summary: The editorial_summary of this GoogleMapsPlacesV1Place.
        :param ev_charge_options: The ev_charge_options of this GoogleMapsPlacesV1Place.
        :param formatted_address: The formatted_address of this GoogleMapsPlacesV1Place.
        :param fuel_options: The fuel_options of this GoogleMapsPlacesV1Place.
        :param good_for_children: The good_for_children of this GoogleMapsPlacesV1Place.
        :param good_for_groups: The good_for_groups of this GoogleMapsPlacesV1Place.
        :param good_for_watching_sports: The good_for_watching_sports of this GoogleMapsPlacesV1Place.
        :param google_maps_uri: The google_maps_uri of this GoogleMapsPlacesV1Place.
        :param icon_background_color: The icon_background_color of this GoogleMapsPlacesV1Place.
        :param icon_mask_base_uri: The icon_mask_base_uri of this GoogleMapsPlacesV1Place.
        :param id: The id of this GoogleMapsPlacesV1Place.
        :param international_phone_number: The international_phone_number of this GoogleMapsPlacesV1Place.
        :param live_music: The live_music of this GoogleMapsPlacesV1Place.
        :param location: The location of this GoogleMapsPlacesV1Place.
        :param menu_for_children: The menu_for_children of this GoogleMapsPlacesV1Place.
        :param name: The name of this GoogleMapsPlacesV1Place.
        :param national_phone_number: The national_phone_number of this GoogleMapsPlacesV1Place.
        :param outdoor_seating: The outdoor_seating of this GoogleMapsPlacesV1Place.
        :param parking_options: The parking_options of this GoogleMapsPlacesV1Place.
        :param payment_options: The payment_options of this GoogleMapsPlacesV1Place.
        :param photos: The photos of this GoogleMapsPlacesV1Place.
        :param plus_code: The plus_code of this GoogleMapsPlacesV1Place.
        :param price_level: The price_level of this GoogleMapsPlacesV1Place.
        :param primary_type: The primary_type of this GoogleMapsPlacesV1Place.
        :param primary_type_display_name: The primary_type_display_name of this GoogleMapsPlacesV1Place.
        :param rating: The rating of this GoogleMapsPlacesV1Place.
        :param regular_opening_hours: The regular_opening_hours of this GoogleMapsPlacesV1Place.
        :param regular_secondary_opening_hours: The regular_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :param reservable: The reservable of this GoogleMapsPlacesV1Place.
        :param restroom: The restroom of this GoogleMapsPlacesV1Place.
        :param reviews: The reviews of this GoogleMapsPlacesV1Place.
        :param serves_beer: The serves_beer of this GoogleMapsPlacesV1Place.
        :param serves_breakfast: The serves_breakfast of this GoogleMapsPlacesV1Place.
        :param serves_brunch: The serves_brunch of this GoogleMapsPlacesV1Place.
        :param serves_cocktails: The serves_cocktails of this GoogleMapsPlacesV1Place.
        :param serves_coffee: The serves_coffee of this GoogleMapsPlacesV1Place.
        :param serves_dessert: The serves_dessert of this GoogleMapsPlacesV1Place.
        :param serves_dinner: The serves_dinner of this GoogleMapsPlacesV1Place.
        :param serves_lunch: The serves_lunch of this GoogleMapsPlacesV1Place.
        :param serves_vegetarian_food: The serves_vegetarian_food of this GoogleMapsPlacesV1Place.
        :param serves_wine: The serves_wine of this GoogleMapsPlacesV1Place.
        :param short_formatted_address: The short_formatted_address of this GoogleMapsPlacesV1Place.
        :param sub_destinations: The sub_destinations of this GoogleMapsPlacesV1Place.
        :param takeout: The takeout of this GoogleMapsPlacesV1Place.
        :param types: The types of this GoogleMapsPlacesV1Place.
        :param user_rating_count: The user_rating_count of this GoogleMapsPlacesV1Place.
        :param utc_offset_minutes: The utc_offset_minutes of this GoogleMapsPlacesV1Place.
        :param viewport: The viewport of this GoogleMapsPlacesV1Place.
        :param website_uri: The website_uri of this GoogleMapsPlacesV1Place.
        """
        self.openapi_types = {
            'accessibility_options': GoogleMapsPlacesV1PlaceAccessibilityOptions,
            'address_components': List[GoogleMapsPlacesV1PlaceAddressComponent],
            'adr_format_address': str,
            'allows_dogs': bool,
            'attributions': List[GoogleMapsPlacesV1PlaceAttribution],
            'business_status': str,
            'curbside_pickup': bool,
            'current_opening_hours': GoogleMapsPlacesV1PlaceOpeningHours,
            'current_secondary_opening_hours': List[GoogleMapsPlacesV1PlaceOpeningHours],
            'delivery': bool,
            'dine_in': bool,
            'display_name': GoogleTypeLocalizedText,
            'editorial_summary': GoogleTypeLocalizedText,
            'ev_charge_options': GoogleMapsPlacesV1EVChargeOptions,
            'formatted_address': str,
            'fuel_options': GoogleMapsPlacesV1FuelOptions,
            'good_for_children': bool,
            'good_for_groups': bool,
            'good_for_watching_sports': bool,
            'google_maps_uri': str,
            'icon_background_color': str,
            'icon_mask_base_uri': str,
            'id': str,
            'international_phone_number': str,
            'live_music': bool,
            'location': GoogleTypeLatLng,
            'menu_for_children': bool,
            'name': str,
            'national_phone_number': str,
            'outdoor_seating': bool,
            'parking_options': GoogleMapsPlacesV1PlaceParkingOptions,
            'payment_options': GoogleMapsPlacesV1PlacePaymentOptions,
            'photos': List[GoogleMapsPlacesV1Photo],
            'plus_code': GoogleMapsPlacesV1PlacePlusCode,
            'price_level': str,
            'primary_type': str,
            'primary_type_display_name': GoogleTypeLocalizedText,
            'rating': float,
            'regular_opening_hours': GoogleMapsPlacesV1PlaceOpeningHours,
            'regular_secondary_opening_hours': List[GoogleMapsPlacesV1PlaceOpeningHours],
            'reservable': bool,
            'restroom': bool,
            'reviews': List[GoogleMapsPlacesV1Review],
            'serves_beer': bool,
            'serves_breakfast': bool,
            'serves_brunch': bool,
            'serves_cocktails': bool,
            'serves_coffee': bool,
            'serves_dessert': bool,
            'serves_dinner': bool,
            'serves_lunch': bool,
            'serves_vegetarian_food': bool,
            'serves_wine': bool,
            'short_formatted_address': str,
            'sub_destinations': List[GoogleMapsPlacesV1PlaceSubDestination],
            'takeout': bool,
            'types': List[str],
            'user_rating_count': int,
            'utc_offset_minutes': int,
            'viewport': GoogleGeoTypeViewport,
            'website_uri': str
        }

        self.attribute_map = {
            'accessibility_options': 'accessibilityOptions',
            'address_components': 'addressComponents',
            'adr_format_address': 'adrFormatAddress',
            'allows_dogs': 'allowsDogs',
            'attributions': 'attributions',
            'business_status': 'businessStatus',
            'curbside_pickup': 'curbsidePickup',
            'current_opening_hours': 'currentOpeningHours',
            'current_secondary_opening_hours': 'currentSecondaryOpeningHours',
            'delivery': 'delivery',
            'dine_in': 'dineIn',
            'display_name': 'displayName',
            'editorial_summary': 'editorialSummary',
            'ev_charge_options': 'evChargeOptions',
            'formatted_address': 'formattedAddress',
            'fuel_options': 'fuelOptions',
            'good_for_children': 'goodForChildren',
            'good_for_groups': 'goodForGroups',
            'good_for_watching_sports': 'goodForWatchingSports',
            'google_maps_uri': 'googleMapsUri',
            'icon_background_color': 'iconBackgroundColor',
            'icon_mask_base_uri': 'iconMaskBaseUri',
            'id': 'id',
            'international_phone_number': 'internationalPhoneNumber',
            'live_music': 'liveMusic',
            'location': 'location',
            'menu_for_children': 'menuForChildren',
            'name': 'name',
            'national_phone_number': 'nationalPhoneNumber',
            'outdoor_seating': 'outdoorSeating',
            'parking_options': 'parkingOptions',
            'payment_options': 'paymentOptions',
            'photos': 'photos',
            'plus_code': 'plusCode',
            'price_level': 'priceLevel',
            'primary_type': 'primaryType',
            'primary_type_display_name': 'primaryTypeDisplayName',
            'rating': 'rating',
            'regular_opening_hours': 'regularOpeningHours',
            'regular_secondary_opening_hours': 'regularSecondaryOpeningHours',
            'reservable': 'reservable',
            'restroom': 'restroom',
            'reviews': 'reviews',
            'serves_beer': 'servesBeer',
            'serves_breakfast': 'servesBreakfast',
            'serves_brunch': 'servesBrunch',
            'serves_cocktails': 'servesCocktails',
            'serves_coffee': 'servesCoffee',
            'serves_dessert': 'servesDessert',
            'serves_dinner': 'servesDinner',
            'serves_lunch': 'servesLunch',
            'serves_vegetarian_food': 'servesVegetarianFood',
            'serves_wine': 'servesWine',
            'short_formatted_address': 'shortFormattedAddress',
            'sub_destinations': 'subDestinations',
            'takeout': 'takeout',
            'types': 'types',
            'user_rating_count': 'userRatingCount',
            'utc_offset_minutes': 'utcOffsetMinutes',
            'viewport': 'viewport',
            'website_uri': 'websiteUri'
        }

        self._accessibility_options = accessibility_options
        self._address_components = address_components
        self._adr_format_address = adr_format_address
        self._allows_dogs = allows_dogs
        self._attributions = attributions
        self._business_status = business_status
        self._curbside_pickup = curbside_pickup
        self._current_opening_hours = current_opening_hours
        self._current_secondary_opening_hours = current_secondary_opening_hours
        self._delivery = delivery
        self._dine_in = dine_in
        self._display_name = display_name
        self._editorial_summary = editorial_summary
        self._ev_charge_options = ev_charge_options
        self._formatted_address = formatted_address
        self._fuel_options = fuel_options
        self._good_for_children = good_for_children
        self._good_for_groups = good_for_groups
        self._good_for_watching_sports = good_for_watching_sports
        self._google_maps_uri = google_maps_uri
        self._icon_background_color = icon_background_color
        self._icon_mask_base_uri = icon_mask_base_uri
        self._id = id
        self._international_phone_number = international_phone_number
        self._live_music = live_music
        self._location = location
        self._menu_for_children = menu_for_children
        self._name = name
        self._national_phone_number = national_phone_number
        self._outdoor_seating = outdoor_seating
        self._parking_options = parking_options
        self._payment_options = payment_options
        self._photos = photos
        self._plus_code = plus_code
        self._price_level = price_level
        self._primary_type = primary_type
        self._primary_type_display_name = primary_type_display_name
        self._rating = rating
        self._regular_opening_hours = regular_opening_hours
        self._regular_secondary_opening_hours = regular_secondary_opening_hours
        self._reservable = reservable
        self._restroom = restroom
        self._reviews = reviews
        self._serves_beer = serves_beer
        self._serves_breakfast = serves_breakfast
        self._serves_brunch = serves_brunch
        self._serves_cocktails = serves_cocktails
        self._serves_coffee = serves_coffee
        self._serves_dessert = serves_dessert
        self._serves_dinner = serves_dinner
        self._serves_lunch = serves_lunch
        self._serves_vegetarian_food = serves_vegetarian_food
        self._serves_wine = serves_wine
        self._short_formatted_address = short_formatted_address
        self._sub_destinations = sub_destinations
        self._takeout = takeout
        self._types = types
        self._user_rating_count = user_rating_count
        self._utc_offset_minutes = utc_offset_minutes
        self._viewport = viewport
        self._website_uri = website_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1Place':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1Place of this GoogleMapsPlacesV1Place.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessibility_options(self):
        """Gets the accessibility_options of this GoogleMapsPlacesV1Place.


        :return: The accessibility_options of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlaceAccessibilityOptions
        """
        return self._accessibility_options

    @accessibility_options.setter
    def accessibility_options(self, accessibility_options):
        """Sets the accessibility_options of this GoogleMapsPlacesV1Place.


        :param accessibility_options: The accessibility_options of this GoogleMapsPlacesV1Place.
        :type accessibility_options: GoogleMapsPlacesV1PlaceAccessibilityOptions
        """

        self._accessibility_options = accessibility_options

    @property
    def address_components(self):
        """Gets the address_components of this GoogleMapsPlacesV1Place.

        Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.

        :return: The address_components of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1PlaceAddressComponent]
        """
        return self._address_components

    @address_components.setter
    def address_components(self, address_components):
        """Sets the address_components of this GoogleMapsPlacesV1Place.

        Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.

        :param address_components: The address_components of this GoogleMapsPlacesV1Place.
        :type address_components: List[GoogleMapsPlacesV1PlaceAddressComponent]
        """

        self._address_components = address_components

    @property
    def adr_format_address(self):
        """Gets the adr_format_address of this GoogleMapsPlacesV1Place.

        The place's address in adr microformat: http://microformats.org/wiki/adr.

        :return: The adr_format_address of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._adr_format_address

    @adr_format_address.setter
    def adr_format_address(self, adr_format_address):
        """Sets the adr_format_address of this GoogleMapsPlacesV1Place.

        The place's address in adr microformat: http://microformats.org/wiki/adr.

        :param adr_format_address: The adr_format_address of this GoogleMapsPlacesV1Place.
        :type adr_format_address: str
        """

        self._adr_format_address = adr_format_address

    @property
    def allows_dogs(self):
        """Gets the allows_dogs of this GoogleMapsPlacesV1Place.

        Place allows dogs.

        :return: The allows_dogs of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._allows_dogs

    @allows_dogs.setter
    def allows_dogs(self, allows_dogs):
        """Sets the allows_dogs of this GoogleMapsPlacesV1Place.

        Place allows dogs.

        :param allows_dogs: The allows_dogs of this GoogleMapsPlacesV1Place.
        :type allows_dogs: bool
        """

        self._allows_dogs = allows_dogs

    @property
    def attributions(self):
        """Gets the attributions of this GoogleMapsPlacesV1Place.

        A set of data provider that must be shown with this result.

        :return: The attributions of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1PlaceAttribution]
        """
        return self._attributions

    @attributions.setter
    def attributions(self, attributions):
        """Sets the attributions of this GoogleMapsPlacesV1Place.

        A set of data provider that must be shown with this result.

        :param attributions: The attributions of this GoogleMapsPlacesV1Place.
        :type attributions: List[GoogleMapsPlacesV1PlaceAttribution]
        """

        self._attributions = attributions

    @property
    def business_status(self):
        """Gets the business_status of this GoogleMapsPlacesV1Place.

        The business status for the place.

        :return: The business_status of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._business_status

    @business_status.setter
    def business_status(self, business_status):
        """Sets the business_status of this GoogleMapsPlacesV1Place.

        The business status for the place.

        :param business_status: The business_status of this GoogleMapsPlacesV1Place.
        :type business_status: str
        """
        allowed_values = ["BUSINESS_STATUS_UNSPECIFIED", "OPERATIONAL", "CLOSED_TEMPORARILY", "CLOSED_PERMANENTLY"]  # noqa: E501
        if business_status not in allowed_values:
            raise ValueError(
                "Invalid value for `business_status` ({0}), must be one of {1}"
                .format(business_status, allowed_values)
            )

        self._business_status = business_status

    @property
    def curbside_pickup(self):
        """Gets the curbside_pickup of this GoogleMapsPlacesV1Place.

        Specifies if the business supports curbside pickup.

        :return: The curbside_pickup of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._curbside_pickup

    @curbside_pickup.setter
    def curbside_pickup(self, curbside_pickup):
        """Sets the curbside_pickup of this GoogleMapsPlacesV1Place.

        Specifies if the business supports curbside pickup.

        :param curbside_pickup: The curbside_pickup of this GoogleMapsPlacesV1Place.
        :type curbside_pickup: bool
        """

        self._curbside_pickup = curbside_pickup

    @property
    def current_opening_hours(self):
        """Gets the current_opening_hours of this GoogleMapsPlacesV1Place.


        :return: The current_opening_hours of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlaceOpeningHours
        """
        return self._current_opening_hours

    @current_opening_hours.setter
    def current_opening_hours(self, current_opening_hours):
        """Sets the current_opening_hours of this GoogleMapsPlacesV1Place.


        :param current_opening_hours: The current_opening_hours of this GoogleMapsPlacesV1Place.
        :type current_opening_hours: GoogleMapsPlacesV1PlaceOpeningHours
        """

        self._current_opening_hours = current_opening_hours

    @property
    def current_secondary_opening_hours(self):
        """Gets the current_secondary_opening_hours of this GoogleMapsPlacesV1Place.

        Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.

        :return: The current_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1PlaceOpeningHours]
        """
        return self._current_secondary_opening_hours

    @current_secondary_opening_hours.setter
    def current_secondary_opening_hours(self, current_secondary_opening_hours):
        """Sets the current_secondary_opening_hours of this GoogleMapsPlacesV1Place.

        Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.

        :param current_secondary_opening_hours: The current_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :type current_secondary_opening_hours: List[GoogleMapsPlacesV1PlaceOpeningHours]
        """

        self._current_secondary_opening_hours = current_secondary_opening_hours

    @property
    def delivery(self):
        """Gets the delivery of this GoogleMapsPlacesV1Place.

        Specifies if the business supports delivery.

        :return: The delivery of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this GoogleMapsPlacesV1Place.

        Specifies if the business supports delivery.

        :param delivery: The delivery of this GoogleMapsPlacesV1Place.
        :type delivery: bool
        """

        self._delivery = delivery

    @property
    def dine_in(self):
        """Gets the dine_in of this GoogleMapsPlacesV1Place.

        Specifies if the business supports indoor or outdoor seating options.

        :return: The dine_in of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._dine_in

    @dine_in.setter
    def dine_in(self, dine_in):
        """Sets the dine_in of this GoogleMapsPlacesV1Place.

        Specifies if the business supports indoor or outdoor seating options.

        :param dine_in: The dine_in of this GoogleMapsPlacesV1Place.
        :type dine_in: bool
        """

        self._dine_in = dine_in

    @property
    def display_name(self):
        """Gets the display_name of this GoogleMapsPlacesV1Place.


        :return: The display_name of this GoogleMapsPlacesV1Place.
        :rtype: GoogleTypeLocalizedText
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleMapsPlacesV1Place.


        :param display_name: The display_name of this GoogleMapsPlacesV1Place.
        :type display_name: GoogleTypeLocalizedText
        """

        self._display_name = display_name

    @property
    def editorial_summary(self):
        """Gets the editorial_summary of this GoogleMapsPlacesV1Place.


        :return: The editorial_summary of this GoogleMapsPlacesV1Place.
        :rtype: GoogleTypeLocalizedText
        """
        return self._editorial_summary

    @editorial_summary.setter
    def editorial_summary(self, editorial_summary):
        """Sets the editorial_summary of this GoogleMapsPlacesV1Place.


        :param editorial_summary: The editorial_summary of this GoogleMapsPlacesV1Place.
        :type editorial_summary: GoogleTypeLocalizedText
        """

        self._editorial_summary = editorial_summary

    @property
    def ev_charge_options(self):
        """Gets the ev_charge_options of this GoogleMapsPlacesV1Place.


        :return: The ev_charge_options of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1EVChargeOptions
        """
        return self._ev_charge_options

    @ev_charge_options.setter
    def ev_charge_options(self, ev_charge_options):
        """Sets the ev_charge_options of this GoogleMapsPlacesV1Place.


        :param ev_charge_options: The ev_charge_options of this GoogleMapsPlacesV1Place.
        :type ev_charge_options: GoogleMapsPlacesV1EVChargeOptions
        """

        self._ev_charge_options = ev_charge_options

    @property
    def formatted_address(self):
        """Gets the formatted_address of this GoogleMapsPlacesV1Place.

        A full, human-readable address for this place.

        :return: The formatted_address of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this GoogleMapsPlacesV1Place.

        A full, human-readable address for this place.

        :param formatted_address: The formatted_address of this GoogleMapsPlacesV1Place.
        :type formatted_address: str
        """

        self._formatted_address = formatted_address

    @property
    def fuel_options(self):
        """Gets the fuel_options of this GoogleMapsPlacesV1Place.


        :return: The fuel_options of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1FuelOptions
        """
        return self._fuel_options

    @fuel_options.setter
    def fuel_options(self, fuel_options):
        """Sets the fuel_options of this GoogleMapsPlacesV1Place.


        :param fuel_options: The fuel_options of this GoogleMapsPlacesV1Place.
        :type fuel_options: GoogleMapsPlacesV1FuelOptions
        """

        self._fuel_options = fuel_options

    @property
    def good_for_children(self):
        """Gets the good_for_children of this GoogleMapsPlacesV1Place.

        Place is good for children.

        :return: The good_for_children of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._good_for_children

    @good_for_children.setter
    def good_for_children(self, good_for_children):
        """Sets the good_for_children of this GoogleMapsPlacesV1Place.

        Place is good for children.

        :param good_for_children: The good_for_children of this GoogleMapsPlacesV1Place.
        :type good_for_children: bool
        """

        self._good_for_children = good_for_children

    @property
    def good_for_groups(self):
        """Gets the good_for_groups of this GoogleMapsPlacesV1Place.

        Place accommodates groups.

        :return: The good_for_groups of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._good_for_groups

    @good_for_groups.setter
    def good_for_groups(self, good_for_groups):
        """Sets the good_for_groups of this GoogleMapsPlacesV1Place.

        Place accommodates groups.

        :param good_for_groups: The good_for_groups of this GoogleMapsPlacesV1Place.
        :type good_for_groups: bool
        """

        self._good_for_groups = good_for_groups

    @property
    def good_for_watching_sports(self):
        """Gets the good_for_watching_sports of this GoogleMapsPlacesV1Place.

        Place is suitable for watching sports.

        :return: The good_for_watching_sports of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._good_for_watching_sports

    @good_for_watching_sports.setter
    def good_for_watching_sports(self, good_for_watching_sports):
        """Sets the good_for_watching_sports of this GoogleMapsPlacesV1Place.

        Place is suitable for watching sports.

        :param good_for_watching_sports: The good_for_watching_sports of this GoogleMapsPlacesV1Place.
        :type good_for_watching_sports: bool
        """

        self._good_for_watching_sports = good_for_watching_sports

    @property
    def google_maps_uri(self):
        """Gets the google_maps_uri of this GoogleMapsPlacesV1Place.

        A URL providing more information about this place.

        :return: The google_maps_uri of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._google_maps_uri

    @google_maps_uri.setter
    def google_maps_uri(self, google_maps_uri):
        """Sets the google_maps_uri of this GoogleMapsPlacesV1Place.

        A URL providing more information about this place.

        :param google_maps_uri: The google_maps_uri of this GoogleMapsPlacesV1Place.
        :type google_maps_uri: str
        """

        self._google_maps_uri = google_maps_uri

    @property
    def icon_background_color(self):
        """Gets the icon_background_color of this GoogleMapsPlacesV1Place.

        Background color for icon_mask in hex format, e.g. #909CE1.

        :return: The icon_background_color of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._icon_background_color

    @icon_background_color.setter
    def icon_background_color(self, icon_background_color):
        """Sets the icon_background_color of this GoogleMapsPlacesV1Place.

        Background color for icon_mask in hex format, e.g. #909CE1.

        :param icon_background_color: The icon_background_color of this GoogleMapsPlacesV1Place.
        :type icon_background_color: str
        """

        self._icon_background_color = icon_background_color

    @property
    def icon_mask_base_uri(self):
        """Gets the icon_mask_base_uri of this GoogleMapsPlacesV1Place.

        A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, \".svg\" or \".png\").

        :return: The icon_mask_base_uri of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._icon_mask_base_uri

    @icon_mask_base_uri.setter
    def icon_mask_base_uri(self, icon_mask_base_uri):
        """Sets the icon_mask_base_uri of this GoogleMapsPlacesV1Place.

        A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, \".svg\" or \".png\").

        :param icon_mask_base_uri: The icon_mask_base_uri of this GoogleMapsPlacesV1Place.
        :type icon_mask_base_uri: str
        """

        self._icon_mask_base_uri = icon_mask_base_uri

    @property
    def id(self):
        """Gets the id of this GoogleMapsPlacesV1Place.

        The unique identifier of a place.

        :return: The id of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleMapsPlacesV1Place.

        The unique identifier of a place.

        :param id: The id of this GoogleMapsPlacesV1Place.
        :type id: str
        """

        self._id = id

    @property
    def international_phone_number(self):
        """Gets the international_phone_number of this GoogleMapsPlacesV1Place.

        A human-readable phone number for the place, in international format.

        :return: The international_phone_number of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._international_phone_number

    @international_phone_number.setter
    def international_phone_number(self, international_phone_number):
        """Sets the international_phone_number of this GoogleMapsPlacesV1Place.

        A human-readable phone number for the place, in international format.

        :param international_phone_number: The international_phone_number of this GoogleMapsPlacesV1Place.
        :type international_phone_number: str
        """

        self._international_phone_number = international_phone_number

    @property
    def live_music(self):
        """Gets the live_music of this GoogleMapsPlacesV1Place.

        Place provides live music.

        :return: The live_music of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._live_music

    @live_music.setter
    def live_music(self, live_music):
        """Sets the live_music of this GoogleMapsPlacesV1Place.

        Place provides live music.

        :param live_music: The live_music of this GoogleMapsPlacesV1Place.
        :type live_music: bool
        """

        self._live_music = live_music

    @property
    def location(self):
        """Gets the location of this GoogleMapsPlacesV1Place.


        :return: The location of this GoogleMapsPlacesV1Place.
        :rtype: GoogleTypeLatLng
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this GoogleMapsPlacesV1Place.


        :param location: The location of this GoogleMapsPlacesV1Place.
        :type location: GoogleTypeLatLng
        """

        self._location = location

    @property
    def menu_for_children(self):
        """Gets the menu_for_children of this GoogleMapsPlacesV1Place.

        Place has a children's menu.

        :return: The menu_for_children of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._menu_for_children

    @menu_for_children.setter
    def menu_for_children(self, menu_for_children):
        """Sets the menu_for_children of this GoogleMapsPlacesV1Place.

        Place has a children's menu.

        :param menu_for_children: The menu_for_children of this GoogleMapsPlacesV1Place.
        :type menu_for_children: bool
        """

        self._menu_for_children = menu_for_children

    @property
    def name(self):
        """Gets the name of this GoogleMapsPlacesV1Place.

        This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.

        :return: The name of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleMapsPlacesV1Place.

        This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.

        :param name: The name of this GoogleMapsPlacesV1Place.
        :type name: str
        """

        self._name = name

    @property
    def national_phone_number(self):
        """Gets the national_phone_number of this GoogleMapsPlacesV1Place.

        A human-readable phone number for the place, in national format.

        :return: The national_phone_number of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._national_phone_number

    @national_phone_number.setter
    def national_phone_number(self, national_phone_number):
        """Sets the national_phone_number of this GoogleMapsPlacesV1Place.

        A human-readable phone number for the place, in national format.

        :param national_phone_number: The national_phone_number of this GoogleMapsPlacesV1Place.
        :type national_phone_number: str
        """

        self._national_phone_number = national_phone_number

    @property
    def outdoor_seating(self):
        """Gets the outdoor_seating of this GoogleMapsPlacesV1Place.

        Place provides outdoor seating.

        :return: The outdoor_seating of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._outdoor_seating

    @outdoor_seating.setter
    def outdoor_seating(self, outdoor_seating):
        """Sets the outdoor_seating of this GoogleMapsPlacesV1Place.

        Place provides outdoor seating.

        :param outdoor_seating: The outdoor_seating of this GoogleMapsPlacesV1Place.
        :type outdoor_seating: bool
        """

        self._outdoor_seating = outdoor_seating

    @property
    def parking_options(self):
        """Gets the parking_options of this GoogleMapsPlacesV1Place.


        :return: The parking_options of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlaceParkingOptions
        """
        return self._parking_options

    @parking_options.setter
    def parking_options(self, parking_options):
        """Sets the parking_options of this GoogleMapsPlacesV1Place.


        :param parking_options: The parking_options of this GoogleMapsPlacesV1Place.
        :type parking_options: GoogleMapsPlacesV1PlaceParkingOptions
        """

        self._parking_options = parking_options

    @property
    def payment_options(self):
        """Gets the payment_options of this GoogleMapsPlacesV1Place.


        :return: The payment_options of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlacePaymentOptions
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this GoogleMapsPlacesV1Place.


        :param payment_options: The payment_options of this GoogleMapsPlacesV1Place.
        :type payment_options: GoogleMapsPlacesV1PlacePaymentOptions
        """

        self._payment_options = payment_options

    @property
    def photos(self):
        """Gets the photos of this GoogleMapsPlacesV1Place.

        Information (including references) about photos of this place. A maximum of 10 photos can be returned.

        :return: The photos of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1Photo]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this GoogleMapsPlacesV1Place.

        Information (including references) about photos of this place. A maximum of 10 photos can be returned.

        :param photos: The photos of this GoogleMapsPlacesV1Place.
        :type photos: List[GoogleMapsPlacesV1Photo]
        """

        self._photos = photos

    @property
    def plus_code(self):
        """Gets the plus_code of this GoogleMapsPlacesV1Place.


        :return: The plus_code of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlacePlusCode
        """
        return self._plus_code

    @plus_code.setter
    def plus_code(self, plus_code):
        """Sets the plus_code of this GoogleMapsPlacesV1Place.


        :param plus_code: The plus_code of this GoogleMapsPlacesV1Place.
        :type plus_code: GoogleMapsPlacesV1PlacePlusCode
        """

        self._plus_code = plus_code

    @property
    def price_level(self):
        """Gets the price_level of this GoogleMapsPlacesV1Place.

        Price level of the place.

        :return: The price_level of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._price_level

    @price_level.setter
    def price_level(self, price_level):
        """Sets the price_level of this GoogleMapsPlacesV1Place.

        Price level of the place.

        :param price_level: The price_level of this GoogleMapsPlacesV1Place.
        :type price_level: str
        """
        allowed_values = ["PRICE_LEVEL_UNSPECIFIED", "PRICE_LEVEL_FREE", "PRICE_LEVEL_INEXPENSIVE", "PRICE_LEVEL_MODERATE", "PRICE_LEVEL_EXPENSIVE", "PRICE_LEVEL_VERY_EXPENSIVE"]  # noqa: E501
        if price_level not in allowed_values:
            raise ValueError(
                "Invalid value for `price_level` ({0}), must be one of {1}"
                .format(price_level, allowed_values)
            )

        self._price_level = price_level

    @property
    def primary_type(self):
        """Gets the primary_type of this GoogleMapsPlacesV1Place.

        The primary type of the given result. This type must one of the Places API supported types. For example, \"restaurant\", \"cafe\", \"airport\", etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types

        :return: The primary_type of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._primary_type

    @primary_type.setter
    def primary_type(self, primary_type):
        """Sets the primary_type of this GoogleMapsPlacesV1Place.

        The primary type of the given result. This type must one of the Places API supported types. For example, \"restaurant\", \"cafe\", \"airport\", etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types

        :param primary_type: The primary_type of this GoogleMapsPlacesV1Place.
        :type primary_type: str
        """

        self._primary_type = primary_type

    @property
    def primary_type_display_name(self):
        """Gets the primary_type_display_name of this GoogleMapsPlacesV1Place.


        :return: The primary_type_display_name of this GoogleMapsPlacesV1Place.
        :rtype: GoogleTypeLocalizedText
        """
        return self._primary_type_display_name

    @primary_type_display_name.setter
    def primary_type_display_name(self, primary_type_display_name):
        """Sets the primary_type_display_name of this GoogleMapsPlacesV1Place.


        :param primary_type_display_name: The primary_type_display_name of this GoogleMapsPlacesV1Place.
        :type primary_type_display_name: GoogleTypeLocalizedText
        """

        self._primary_type_display_name = primary_type_display_name

    @property
    def rating(self):
        """Gets the rating of this GoogleMapsPlacesV1Place.

        A rating between 1.0 and 5.0, based on user reviews of this place.

        :return: The rating of this GoogleMapsPlacesV1Place.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this GoogleMapsPlacesV1Place.

        A rating between 1.0 and 5.0, based on user reviews of this place.

        :param rating: The rating of this GoogleMapsPlacesV1Place.
        :type rating: float
        """

        self._rating = rating

    @property
    def regular_opening_hours(self):
        """Gets the regular_opening_hours of this GoogleMapsPlacesV1Place.


        :return: The regular_opening_hours of this GoogleMapsPlacesV1Place.
        :rtype: GoogleMapsPlacesV1PlaceOpeningHours
        """
        return self._regular_opening_hours

    @regular_opening_hours.setter
    def regular_opening_hours(self, regular_opening_hours):
        """Sets the regular_opening_hours of this GoogleMapsPlacesV1Place.


        :param regular_opening_hours: The regular_opening_hours of this GoogleMapsPlacesV1Place.
        :type regular_opening_hours: GoogleMapsPlacesV1PlaceOpeningHours
        """

        self._regular_opening_hours = regular_opening_hours

    @property
    def regular_secondary_opening_hours(self):
        """Gets the regular_secondary_opening_hours of this GoogleMapsPlacesV1Place.

        Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.

        :return: The regular_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1PlaceOpeningHours]
        """
        return self._regular_secondary_opening_hours

    @regular_secondary_opening_hours.setter
    def regular_secondary_opening_hours(self, regular_secondary_opening_hours):
        """Sets the regular_secondary_opening_hours of this GoogleMapsPlacesV1Place.

        Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business's main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.

        :param regular_secondary_opening_hours: The regular_secondary_opening_hours of this GoogleMapsPlacesV1Place.
        :type regular_secondary_opening_hours: List[GoogleMapsPlacesV1PlaceOpeningHours]
        """

        self._regular_secondary_opening_hours = regular_secondary_opening_hours

    @property
    def reservable(self):
        """Gets the reservable of this GoogleMapsPlacesV1Place.

        Specifies if the place supports reservations.

        :return: The reservable of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._reservable

    @reservable.setter
    def reservable(self, reservable):
        """Sets the reservable of this GoogleMapsPlacesV1Place.

        Specifies if the place supports reservations.

        :param reservable: The reservable of this GoogleMapsPlacesV1Place.
        :type reservable: bool
        """

        self._reservable = reservable

    @property
    def restroom(self):
        """Gets the restroom of this GoogleMapsPlacesV1Place.

        Place has restroom.

        :return: The restroom of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._restroom

    @restroom.setter
    def restroom(self, restroom):
        """Sets the restroom of this GoogleMapsPlacesV1Place.

        Place has restroom.

        :param restroom: The restroom of this GoogleMapsPlacesV1Place.
        :type restroom: bool
        """

        self._restroom = restroom

    @property
    def reviews(self):
        """Gets the reviews of this GoogleMapsPlacesV1Place.

        List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.

        :return: The reviews of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1Review]
        """
        return self._reviews

    @reviews.setter
    def reviews(self, reviews):
        """Sets the reviews of this GoogleMapsPlacesV1Place.

        List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.

        :param reviews: The reviews of this GoogleMapsPlacesV1Place.
        :type reviews: List[GoogleMapsPlacesV1Review]
        """

        self._reviews = reviews

    @property
    def serves_beer(self):
        """Gets the serves_beer of this GoogleMapsPlacesV1Place.

        Specifies if the place serves beer.

        :return: The serves_beer of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_beer

    @serves_beer.setter
    def serves_beer(self, serves_beer):
        """Sets the serves_beer of this GoogleMapsPlacesV1Place.

        Specifies if the place serves beer.

        :param serves_beer: The serves_beer of this GoogleMapsPlacesV1Place.
        :type serves_beer: bool
        """

        self._serves_beer = serves_beer

    @property
    def serves_breakfast(self):
        """Gets the serves_breakfast of this GoogleMapsPlacesV1Place.

        Specifies if the place serves breakfast.

        :return: The serves_breakfast of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_breakfast

    @serves_breakfast.setter
    def serves_breakfast(self, serves_breakfast):
        """Sets the serves_breakfast of this GoogleMapsPlacesV1Place.

        Specifies if the place serves breakfast.

        :param serves_breakfast: The serves_breakfast of this GoogleMapsPlacesV1Place.
        :type serves_breakfast: bool
        """

        self._serves_breakfast = serves_breakfast

    @property
    def serves_brunch(self):
        """Gets the serves_brunch of this GoogleMapsPlacesV1Place.

        Specifies if the place serves brunch.

        :return: The serves_brunch of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_brunch

    @serves_brunch.setter
    def serves_brunch(self, serves_brunch):
        """Sets the serves_brunch of this GoogleMapsPlacesV1Place.

        Specifies if the place serves brunch.

        :param serves_brunch: The serves_brunch of this GoogleMapsPlacesV1Place.
        :type serves_brunch: bool
        """

        self._serves_brunch = serves_brunch

    @property
    def serves_cocktails(self):
        """Gets the serves_cocktails of this GoogleMapsPlacesV1Place.

        Place serves cocktails.

        :return: The serves_cocktails of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_cocktails

    @serves_cocktails.setter
    def serves_cocktails(self, serves_cocktails):
        """Sets the serves_cocktails of this GoogleMapsPlacesV1Place.

        Place serves cocktails.

        :param serves_cocktails: The serves_cocktails of this GoogleMapsPlacesV1Place.
        :type serves_cocktails: bool
        """

        self._serves_cocktails = serves_cocktails

    @property
    def serves_coffee(self):
        """Gets the serves_coffee of this GoogleMapsPlacesV1Place.

        Place serves coffee.

        :return: The serves_coffee of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_coffee

    @serves_coffee.setter
    def serves_coffee(self, serves_coffee):
        """Sets the serves_coffee of this GoogleMapsPlacesV1Place.

        Place serves coffee.

        :param serves_coffee: The serves_coffee of this GoogleMapsPlacesV1Place.
        :type serves_coffee: bool
        """

        self._serves_coffee = serves_coffee

    @property
    def serves_dessert(self):
        """Gets the serves_dessert of this GoogleMapsPlacesV1Place.

        Place serves dessert.

        :return: The serves_dessert of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_dessert

    @serves_dessert.setter
    def serves_dessert(self, serves_dessert):
        """Sets the serves_dessert of this GoogleMapsPlacesV1Place.

        Place serves dessert.

        :param serves_dessert: The serves_dessert of this GoogleMapsPlacesV1Place.
        :type serves_dessert: bool
        """

        self._serves_dessert = serves_dessert

    @property
    def serves_dinner(self):
        """Gets the serves_dinner of this GoogleMapsPlacesV1Place.

        Specifies if the place serves dinner.

        :return: The serves_dinner of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_dinner

    @serves_dinner.setter
    def serves_dinner(self, serves_dinner):
        """Sets the serves_dinner of this GoogleMapsPlacesV1Place.

        Specifies if the place serves dinner.

        :param serves_dinner: The serves_dinner of this GoogleMapsPlacesV1Place.
        :type serves_dinner: bool
        """

        self._serves_dinner = serves_dinner

    @property
    def serves_lunch(self):
        """Gets the serves_lunch of this GoogleMapsPlacesV1Place.

        Specifies if the place serves lunch.

        :return: The serves_lunch of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_lunch

    @serves_lunch.setter
    def serves_lunch(self, serves_lunch):
        """Sets the serves_lunch of this GoogleMapsPlacesV1Place.

        Specifies if the place serves lunch.

        :param serves_lunch: The serves_lunch of this GoogleMapsPlacesV1Place.
        :type serves_lunch: bool
        """

        self._serves_lunch = serves_lunch

    @property
    def serves_vegetarian_food(self):
        """Gets the serves_vegetarian_food of this GoogleMapsPlacesV1Place.

        Specifies if the place serves vegetarian food.

        :return: The serves_vegetarian_food of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_vegetarian_food

    @serves_vegetarian_food.setter
    def serves_vegetarian_food(self, serves_vegetarian_food):
        """Sets the serves_vegetarian_food of this GoogleMapsPlacesV1Place.

        Specifies if the place serves vegetarian food.

        :param serves_vegetarian_food: The serves_vegetarian_food of this GoogleMapsPlacesV1Place.
        :type serves_vegetarian_food: bool
        """

        self._serves_vegetarian_food = serves_vegetarian_food

    @property
    def serves_wine(self):
        """Gets the serves_wine of this GoogleMapsPlacesV1Place.

        Specifies if the place serves wine.

        :return: The serves_wine of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._serves_wine

    @serves_wine.setter
    def serves_wine(self, serves_wine):
        """Sets the serves_wine of this GoogleMapsPlacesV1Place.

        Specifies if the place serves wine.

        :param serves_wine: The serves_wine of this GoogleMapsPlacesV1Place.
        :type serves_wine: bool
        """

        self._serves_wine = serves_wine

    @property
    def short_formatted_address(self):
        """Gets the short_formatted_address of this GoogleMapsPlacesV1Place.

        A short, human-readable address for this place.

        :return: The short_formatted_address of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._short_formatted_address

    @short_formatted_address.setter
    def short_formatted_address(self, short_formatted_address):
        """Sets the short_formatted_address of this GoogleMapsPlacesV1Place.

        A short, human-readable address for this place.

        :param short_formatted_address: The short_formatted_address of this GoogleMapsPlacesV1Place.
        :type short_formatted_address: str
        """

        self._short_formatted_address = short_formatted_address

    @property
    def sub_destinations(self):
        """Gets the sub_destinations of this GoogleMapsPlacesV1Place.

        A list of sub destinations related to the place.

        :return: The sub_destinations of this GoogleMapsPlacesV1Place.
        :rtype: List[GoogleMapsPlacesV1PlaceSubDestination]
        """
        return self._sub_destinations

    @sub_destinations.setter
    def sub_destinations(self, sub_destinations):
        """Sets the sub_destinations of this GoogleMapsPlacesV1Place.

        A list of sub destinations related to the place.

        :param sub_destinations: The sub_destinations of this GoogleMapsPlacesV1Place.
        :type sub_destinations: List[GoogleMapsPlacesV1PlaceSubDestination]
        """

        self._sub_destinations = sub_destinations

    @property
    def takeout(self):
        """Gets the takeout of this GoogleMapsPlacesV1Place.

        Specifies if the business supports takeout.

        :return: The takeout of this GoogleMapsPlacesV1Place.
        :rtype: bool
        """
        return self._takeout

    @takeout.setter
    def takeout(self, takeout):
        """Sets the takeout of this GoogleMapsPlacesV1Place.

        Specifies if the business supports takeout.

        :param takeout: The takeout of this GoogleMapsPlacesV1Place.
        :type takeout: bool
        """

        self._takeout = takeout

    @property
    def types(self):
        """Gets the types of this GoogleMapsPlacesV1Place.

        A set of type tags for this result. For example, \"political\" and \"locality\". For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types

        :return: The types of this GoogleMapsPlacesV1Place.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this GoogleMapsPlacesV1Place.

        A set of type tags for this result. For example, \"political\" and \"locality\". For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types

        :param types: The types of this GoogleMapsPlacesV1Place.
        :type types: List[str]
        """

        self._types = types

    @property
    def user_rating_count(self):
        """Gets the user_rating_count of this GoogleMapsPlacesV1Place.

        The total number of reviews (with or without text) for this place.

        :return: The user_rating_count of this GoogleMapsPlacesV1Place.
        :rtype: int
        """
        return self._user_rating_count

    @user_rating_count.setter
    def user_rating_count(self, user_rating_count):
        """Sets the user_rating_count of this GoogleMapsPlacesV1Place.

        The total number of reviews (with or without text) for this place.

        :param user_rating_count: The user_rating_count of this GoogleMapsPlacesV1Place.
        :type user_rating_count: int
        """

        self._user_rating_count = user_rating_count

    @property
    def utc_offset_minutes(self):
        """Gets the utc_offset_minutes of this GoogleMapsPlacesV1Place.

        Number of minutes this place's timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.

        :return: The utc_offset_minutes of this GoogleMapsPlacesV1Place.
        :rtype: int
        """
        return self._utc_offset_minutes

    @utc_offset_minutes.setter
    def utc_offset_minutes(self, utc_offset_minutes):
        """Sets the utc_offset_minutes of this GoogleMapsPlacesV1Place.

        Number of minutes this place's timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.

        :param utc_offset_minutes: The utc_offset_minutes of this GoogleMapsPlacesV1Place.
        :type utc_offset_minutes: int
        """

        self._utc_offset_minutes = utc_offset_minutes

    @property
    def viewport(self):
        """Gets the viewport of this GoogleMapsPlacesV1Place.


        :return: The viewport of this GoogleMapsPlacesV1Place.
        :rtype: GoogleGeoTypeViewport
        """
        return self._viewport

    @viewport.setter
    def viewport(self, viewport):
        """Sets the viewport of this GoogleMapsPlacesV1Place.


        :param viewport: The viewport of this GoogleMapsPlacesV1Place.
        :type viewport: GoogleGeoTypeViewport
        """

        self._viewport = viewport

    @property
    def website_uri(self):
        """Gets the website_uri of this GoogleMapsPlacesV1Place.

        The authoritative website for this place, e.g. a business' homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.

        :return: The website_uri of this GoogleMapsPlacesV1Place.
        :rtype: str
        """
        return self._website_uri

    @website_uri.setter
    def website_uri(self, website_uri):
        """Sets the website_uri of this GoogleMapsPlacesV1Place.

        The authoritative website for this place, e.g. a business' homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.

        :param website_uri: The website_uri of this GoogleMapsPlacesV1Place.
        :type website_uri: str
        """

        self._website_uri = website_uri
