# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_maps_places_v1_search_text_request_location_bias import GoogleMapsPlacesV1SearchTextRequestLocationBias
from openapi_server.models.google_maps_places_v1_search_text_request_location_restriction import GoogleMapsPlacesV1SearchTextRequestLocationRestriction
from openapi_server import util


class GoogleMapsPlacesV1SearchTextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, included_type: str=None, language_code: str=None, location_bias: GoogleMapsPlacesV1SearchTextRequestLocationBias=None, location_restriction: GoogleMapsPlacesV1SearchTextRequestLocationRestriction=None, max_result_count: int=None, min_rating: float=None, open_now: bool=None, price_levels: List[str]=None, rank_preference: str=None, region_code: str=None, strict_type_filtering: bool=None, text_query: str=None):
        """GoogleMapsPlacesV1SearchTextRequest - a model defined in OpenAPI

        :param included_type: The included_type of this GoogleMapsPlacesV1SearchTextRequest.
        :param language_code: The language_code of this GoogleMapsPlacesV1SearchTextRequest.
        :param location_bias: The location_bias of this GoogleMapsPlacesV1SearchTextRequest.
        :param location_restriction: The location_restriction of this GoogleMapsPlacesV1SearchTextRequest.
        :param max_result_count: The max_result_count of this GoogleMapsPlacesV1SearchTextRequest.
        :param min_rating: The min_rating of this GoogleMapsPlacesV1SearchTextRequest.
        :param open_now: The open_now of this GoogleMapsPlacesV1SearchTextRequest.
        :param price_levels: The price_levels of this GoogleMapsPlacesV1SearchTextRequest.
        :param rank_preference: The rank_preference of this GoogleMapsPlacesV1SearchTextRequest.
        :param region_code: The region_code of this GoogleMapsPlacesV1SearchTextRequest.
        :param strict_type_filtering: The strict_type_filtering of this GoogleMapsPlacesV1SearchTextRequest.
        :param text_query: The text_query of this GoogleMapsPlacesV1SearchTextRequest.
        """
        self.openapi_types = {
            'included_type': str,
            'language_code': str,
            'location_bias': GoogleMapsPlacesV1SearchTextRequestLocationBias,
            'location_restriction': GoogleMapsPlacesV1SearchTextRequestLocationRestriction,
            'max_result_count': int,
            'min_rating': float,
            'open_now': bool,
            'price_levels': List[str],
            'rank_preference': str,
            'region_code': str,
            'strict_type_filtering': bool,
            'text_query': str
        }

        self.attribute_map = {
            'included_type': 'includedType',
            'language_code': 'languageCode',
            'location_bias': 'locationBias',
            'location_restriction': 'locationRestriction',
            'max_result_count': 'maxResultCount',
            'min_rating': 'minRating',
            'open_now': 'openNow',
            'price_levels': 'priceLevels',
            'rank_preference': 'rankPreference',
            'region_code': 'regionCode',
            'strict_type_filtering': 'strictTypeFiltering',
            'text_query': 'textQuery'
        }

        self._included_type = included_type
        self._language_code = language_code
        self._location_bias = location_bias
        self._location_restriction = location_restriction
        self._max_result_count = max_result_count
        self._min_rating = min_rating
        self._open_now = open_now
        self._price_levels = price_levels
        self._rank_preference = rank_preference
        self._region_code = region_code
        self._strict_type_filtering = strict_type_filtering
        self._text_query = text_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1SearchTextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1SearchTextRequest of this GoogleMapsPlacesV1SearchTextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def included_type(self):
        """Gets the included_type of this GoogleMapsPlacesV1SearchTextRequest.

        The requested place type. Full list of types supported: https://developers.google.com/maps/documentation/places/web-service/place-types. Only support one included type.

        :return: The included_type of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: str
        """
        return self._included_type

    @included_type.setter
    def included_type(self, included_type):
        """Sets the included_type of this GoogleMapsPlacesV1SearchTextRequest.

        The requested place type. Full list of types supported: https://developers.google.com/maps/documentation/places/web-service/place-types. Only support one included type.

        :param included_type: The included_type of this GoogleMapsPlacesV1SearchTextRequest.
        :type included_type: str
        """

        self._included_type = included_type

    @property
    def language_code(self):
        """Gets the language_code of this GoogleMapsPlacesV1SearchTextRequest.

        Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.

        :return: The language_code of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleMapsPlacesV1SearchTextRequest.

        Place details will be displayed with the preferred language if available. If the language code is unspecified or unrecognized, place details of any language may be returned, with a preference for English if such details exist. Current list of supported languages: https://developers.google.com/maps/faq#languagesupport.

        :param language_code: The language_code of this GoogleMapsPlacesV1SearchTextRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def location_bias(self):
        """Gets the location_bias of this GoogleMapsPlacesV1SearchTextRequest.


        :return: The location_bias of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: GoogleMapsPlacesV1SearchTextRequestLocationBias
        """
        return self._location_bias

    @location_bias.setter
    def location_bias(self, location_bias):
        """Sets the location_bias of this GoogleMapsPlacesV1SearchTextRequest.


        :param location_bias: The location_bias of this GoogleMapsPlacesV1SearchTextRequest.
        :type location_bias: GoogleMapsPlacesV1SearchTextRequestLocationBias
        """

        self._location_bias = location_bias

    @property
    def location_restriction(self):
        """Gets the location_restriction of this GoogleMapsPlacesV1SearchTextRequest.


        :return: The location_restriction of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: GoogleMapsPlacesV1SearchTextRequestLocationRestriction
        """
        return self._location_restriction

    @location_restriction.setter
    def location_restriction(self, location_restriction):
        """Sets the location_restriction of this GoogleMapsPlacesV1SearchTextRequest.


        :param location_restriction: The location_restriction of this GoogleMapsPlacesV1SearchTextRequest.
        :type location_restriction: GoogleMapsPlacesV1SearchTextRequestLocationRestriction
        """

        self._location_restriction = location_restriction

    @property
    def max_result_count(self):
        """Gets the max_result_count of this GoogleMapsPlacesV1SearchTextRequest.

        Maximum number of results to return. It must be between 1 and 20, inclusively. The default is 20. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.

        :return: The max_result_count of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: int
        """
        return self._max_result_count

    @max_result_count.setter
    def max_result_count(self, max_result_count):
        """Sets the max_result_count of this GoogleMapsPlacesV1SearchTextRequest.

        Maximum number of results to return. It must be between 1 and 20, inclusively. The default is 20. If the number is unset, it falls back to the upper limit. If the number is set to negative or exceeds the upper limit, an INVALID_ARGUMENT error is returned.

        :param max_result_count: The max_result_count of this GoogleMapsPlacesV1SearchTextRequest.
        :type max_result_count: int
        """

        self._max_result_count = max_result_count

    @property
    def min_rating(self):
        """Gets the min_rating of this GoogleMapsPlacesV1SearchTextRequest.

        Filter out results whose average user rating is strictly less than this limit. A valid value must be a float between 0 and 5 (inclusively) at a 0.5 cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. The input rating will round up to the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all results with a less than 1.0 rating.

        :return: The min_rating of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: float
        """
        return self._min_rating

    @min_rating.setter
    def min_rating(self, min_rating):
        """Sets the min_rating of this GoogleMapsPlacesV1SearchTextRequest.

        Filter out results whose average user rating is strictly less than this limit. A valid value must be a float between 0 and 5 (inclusively) at a 0.5 cadence i.e. [0, 0.5, 1.0, ... , 5.0] inclusively. The input rating will round up to the nearest 0.5(ceiling). For instance, a rating of 0.6 will eliminate all results with a less than 1.0 rating.

        :param min_rating: The min_rating of this GoogleMapsPlacesV1SearchTextRequest.
        :type min_rating: float
        """

        self._min_rating = min_rating

    @property
    def open_now(self):
        """Gets the open_now of this GoogleMapsPlacesV1SearchTextRequest.

        Used to restrict the search to places that are currently open. The default is false.

        :return: The open_now of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: bool
        """
        return self._open_now

    @open_now.setter
    def open_now(self, open_now):
        """Sets the open_now of this GoogleMapsPlacesV1SearchTextRequest.

        Used to restrict the search to places that are currently open. The default is false.

        :param open_now: The open_now of this GoogleMapsPlacesV1SearchTextRequest.
        :type open_now: bool
        """

        self._open_now = open_now

    @property
    def price_levels(self):
        """Gets the price_levels of this GoogleMapsPlacesV1SearchTextRequest.

        Used to restrict the search to places that are marked as certain price levels. Users can choose any combinations of price levels. Default to select all price levels.

        :return: The price_levels of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: List[str]
        """
        return self._price_levels

    @price_levels.setter
    def price_levels(self, price_levels):
        """Sets the price_levels of this GoogleMapsPlacesV1SearchTextRequest.

        Used to restrict the search to places that are marked as certain price levels. Users can choose any combinations of price levels. Default to select all price levels.

        :param price_levels: The price_levels of this GoogleMapsPlacesV1SearchTextRequest.
        :type price_levels: List[str]
        """
        allowed_values = ["PRICE_LEVEL_UNSPECIFIED", "PRICE_LEVEL_FREE", "PRICE_LEVEL_INEXPENSIVE", "PRICE_LEVEL_MODERATE", "PRICE_LEVEL_EXPENSIVE", "PRICE_LEVEL_VERY_EXPENSIVE"]  # noqa: E501
        if not set(price_levels).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `price_levels` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(price_levels) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._price_levels = price_levels

    @property
    def rank_preference(self):
        """Gets the rank_preference of this GoogleMapsPlacesV1SearchTextRequest.

        How results will be ranked in the response.

        :return: The rank_preference of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: str
        """
        return self._rank_preference

    @rank_preference.setter
    def rank_preference(self, rank_preference):
        """Sets the rank_preference of this GoogleMapsPlacesV1SearchTextRequest.

        How results will be ranked in the response.

        :param rank_preference: The rank_preference of this GoogleMapsPlacesV1SearchTextRequest.
        :type rank_preference: str
        """
        allowed_values = ["RANK_PREFERENCE_UNSPECIFIED", "DISTANCE", "RELEVANCE"]  # noqa: E501
        if rank_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `rank_preference` ({0}), must be one of {1}"
                .format(rank_preference, allowed_values)
            )

        self._rank_preference = rank_preference

    @property
    def region_code(self):
        """Gets the region_code of this GoogleMapsPlacesV1SearchTextRequest.

        The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.

        :return: The region_code of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this GoogleMapsPlacesV1SearchTextRequest.

        The Unicode country/region code (CLDR) of the location where the request is coming from. This parameter is used to display the place details, like region-specific place name, if available. The parameter can affect results based on applicable law. For more information, see https://www.unicode.org/cldr/charts/latest/supplemental/territory_language_information.html. Note that 3-digit region codes are not currently supported.

        :param region_code: The region_code of this GoogleMapsPlacesV1SearchTextRequest.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def strict_type_filtering(self):
        """Gets the strict_type_filtering of this GoogleMapsPlacesV1SearchTextRequest.

        Used to set strict type filtering for included_type. If set to true, only results of the same type will be returned. Default to false.

        :return: The strict_type_filtering of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: bool
        """
        return self._strict_type_filtering

    @strict_type_filtering.setter
    def strict_type_filtering(self, strict_type_filtering):
        """Sets the strict_type_filtering of this GoogleMapsPlacesV1SearchTextRequest.

        Used to set strict type filtering for included_type. If set to true, only results of the same type will be returned. Default to false.

        :param strict_type_filtering: The strict_type_filtering of this GoogleMapsPlacesV1SearchTextRequest.
        :type strict_type_filtering: bool
        """

        self._strict_type_filtering = strict_type_filtering

    @property
    def text_query(self):
        """Gets the text_query of this GoogleMapsPlacesV1SearchTextRequest.

        Required. The text query for textual search.

        :return: The text_query of this GoogleMapsPlacesV1SearchTextRequest.
        :rtype: str
        """
        return self._text_query

    @text_query.setter
    def text_query(self, text_query):
        """Sets the text_query of this GoogleMapsPlacesV1SearchTextRequest.

        Required. The text query for textual search.

        :param text_query: The text_query of this GoogleMapsPlacesV1SearchTextRequest.
        :type text_query: str
        """

        self._text_query = text_query
