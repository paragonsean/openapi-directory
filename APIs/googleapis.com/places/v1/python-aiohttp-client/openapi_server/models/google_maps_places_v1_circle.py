# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_type_lat_lng import GoogleTypeLatLng
from openapi_server import util


class GoogleMapsPlacesV1Circle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, center: GoogleTypeLatLng=None, radius: float=None):
        """GoogleMapsPlacesV1Circle - a model defined in OpenAPI

        :param center: The center of this GoogleMapsPlacesV1Circle.
        :param radius: The radius of this GoogleMapsPlacesV1Circle.
        """
        self.openapi_types = {
            'center': GoogleTypeLatLng,
            'radius': float
        }

        self.attribute_map = {
            'center': 'center',
            'radius': 'radius'
        }

        self._center = center
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1Circle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1Circle of this GoogleMapsPlacesV1Circle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center(self):
        """Gets the center of this GoogleMapsPlacesV1Circle.


        :return: The center of this GoogleMapsPlacesV1Circle.
        :rtype: GoogleTypeLatLng
        """
        return self._center

    @center.setter
    def center(self, center):
        """Sets the center of this GoogleMapsPlacesV1Circle.


        :param center: The center of this GoogleMapsPlacesV1Circle.
        :type center: GoogleTypeLatLng
        """

        self._center = center

    @property
    def radius(self):
        """Gets the radius of this GoogleMapsPlacesV1Circle.

        Required. Radius measured in meters. The radius must be within [0.0, 50000.0].

        :return: The radius of this GoogleMapsPlacesV1Circle.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this GoogleMapsPlacesV1Circle.

        Required. Radius measured in meters. The radius must be within [0.0, 50000.0].

        :param radius: The radius of this GoogleMapsPlacesV1Circle.
        :type radius: float
        """

        self._radius = radius
