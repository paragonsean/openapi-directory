# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleMapsPlacesV1PlacePlusCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compound_code: str=None, global_code: str=None):
        """GoogleMapsPlacesV1PlacePlusCode - a model defined in OpenAPI

        :param compound_code: The compound_code of this GoogleMapsPlacesV1PlacePlusCode.
        :param global_code: The global_code of this GoogleMapsPlacesV1PlacePlusCode.
        """
        self.openapi_types = {
            'compound_code': str,
            'global_code': str
        }

        self.attribute_map = {
            'compound_code': 'compoundCode',
            'global_code': 'globalCode'
        }

        self._compound_code = compound_code
        self._global_code = global_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleMapsPlacesV1PlacePlusCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleMapsPlacesV1PlacePlusCode of this GoogleMapsPlacesV1PlacePlusCode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compound_code(self):
        """Gets the compound_code of this GoogleMapsPlacesV1PlacePlusCode.

        Place's compound code, such as \"33GV+HQ, Ramberg, Norway\", containing the suffix of the global code and replacing the prefix with a formatted name of a reference entity.

        :return: The compound_code of this GoogleMapsPlacesV1PlacePlusCode.
        :rtype: str
        """
        return self._compound_code

    @compound_code.setter
    def compound_code(self, compound_code):
        """Sets the compound_code of this GoogleMapsPlacesV1PlacePlusCode.

        Place's compound code, such as \"33GV+HQ, Ramberg, Norway\", containing the suffix of the global code and replacing the prefix with a formatted name of a reference entity.

        :param compound_code: The compound_code of this GoogleMapsPlacesV1PlacePlusCode.
        :type compound_code: str
        """

        self._compound_code = compound_code

    @property
    def global_code(self):
        """Gets the global_code of this GoogleMapsPlacesV1PlacePlusCode.

        Place's global (full) code, such as \"9FWM33GV+HQ\", representing an 1/8000 by 1/8000 degree area (~14 by 14 meters).

        :return: The global_code of this GoogleMapsPlacesV1PlacePlusCode.
        :rtype: str
        """
        return self._global_code

    @global_code.setter
    def global_code(self, global_code):
        """Sets the global_code of this GoogleMapsPlacesV1PlacePlusCode.

        Place's global (full) code, such as \"9FWM33GV+HQ\", representing an 1/8000 by 1/8000 degree area (~14 by 14 meters).

        :param global_code: The global_code of this GoogleMapsPlacesV1PlacePlusCode.
        :type global_code: str
        """

        self._global_code = global_code
