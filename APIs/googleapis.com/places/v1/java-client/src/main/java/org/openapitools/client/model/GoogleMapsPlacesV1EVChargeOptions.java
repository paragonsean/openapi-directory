/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the EV Charge Station hosted in Place. Terminology follows https://afdc.energy.gov/fuels/electricity_infrastructure.html One port could charge one car at a time. One port has one or more connectors. One station has one or more ports.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1EVChargeOptions {
  public static final String SERIALIZED_NAME_CONNECTOR_AGGREGATION = "connectorAggregation";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_AGGREGATION)
  private List<GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> connectorAggregation = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTOR_COUNT = "connectorCount";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_COUNT)
  private Integer connectorCount;

  public GoogleMapsPlacesV1EVChargeOptions() {
  }

  public GoogleMapsPlacesV1EVChargeOptions connectorAggregation(List<GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> connectorAggregation) {
    this.connectorAggregation = connectorAggregation;
    return this;
  }

  public GoogleMapsPlacesV1EVChargeOptions addConnectorAggregationItem(GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation connectorAggregationItem) {
    if (this.connectorAggregation == null) {
      this.connectorAggregation = new ArrayList<>();
    }
    this.connectorAggregation.add(connectorAggregationItem);
    return this;
  }

  /**
   * A list of EV charging connector aggregations that contain connectors of the same type and same charge rate.
   * @return connectorAggregation
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> getConnectorAggregation() {
    return connectorAggregation;
  }

  public void setConnectorAggregation(List<GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation> connectorAggregation) {
    this.connectorAggregation = connectorAggregation;
  }


  public GoogleMapsPlacesV1EVChargeOptions connectorCount(Integer connectorCount) {
    this.connectorCount = connectorCount;
    return this;
  }

  /**
   * Number of connectors at this station. However, because some ports can have multiple connectors but only be able to charge one car at a time (e.g.) the number of connectors may be greater than the total number of cars which can charge simultaneously.
   * @return connectorCount
   */
  @javax.annotation.Nullable
  public Integer getConnectorCount() {
    return connectorCount;
  }

  public void setConnectorCount(Integer connectorCount) {
    this.connectorCount = connectorCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1EVChargeOptions googleMapsPlacesV1EVChargeOptions = (GoogleMapsPlacesV1EVChargeOptions) o;
    return Objects.equals(this.connectorAggregation, googleMapsPlacesV1EVChargeOptions.connectorAggregation) &&
        Objects.equals(this.connectorCount, googleMapsPlacesV1EVChargeOptions.connectorCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorAggregation, connectorCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1EVChargeOptions {\n");
    sb.append("    connectorAggregation: ").append(toIndentedString(connectorAggregation)).append("\n");
    sb.append("    connectorCount: ").append(toIndentedString(connectorCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorAggregation");
    openapiFields.add("connectorCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1EVChargeOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1EVChargeOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1EVChargeOptions is not found in the empty JSON string", GoogleMapsPlacesV1EVChargeOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1EVChargeOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1EVChargeOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connectorAggregation") != null && !jsonObj.get("connectorAggregation").isJsonNull()) {
        JsonArray jsonArrayconnectorAggregation = jsonObj.getAsJsonArray("connectorAggregation");
        if (jsonArrayconnectorAggregation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectorAggregation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectorAggregation` to be an array in the JSON string but got `%s`", jsonObj.get("connectorAggregation").toString()));
          }

          // validate the optional field `connectorAggregation` (array)
          for (int i = 0; i < jsonArrayconnectorAggregation.size(); i++) {
            GoogleMapsPlacesV1EVChargeOptionsConnectorAggregation.validateJsonElement(jsonArrayconnectorAggregation.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1EVChargeOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1EVChargeOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1EVChargeOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1EVChargeOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1EVChargeOptions>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1EVChargeOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1EVChargeOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1EVChargeOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1EVChargeOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1EVChargeOptions
   */
  public static GoogleMapsPlacesV1EVChargeOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1EVChargeOptions.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1EVChargeOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

