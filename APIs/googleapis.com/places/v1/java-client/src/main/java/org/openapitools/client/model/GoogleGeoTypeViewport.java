/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeLatLng;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A latitude-longitude viewport, represented as two diagonally opposite &#x60;low&#x60; and &#x60;high&#x60; points. A viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to 180 degrees inclusive. Various cases include: - If &#x60;low&#x60; &#x3D; &#x60;high&#x60;, the viewport consists of that single point. - If &#x60;low.longitude&#x60; &gt; &#x60;high.longitude&#x60;, the longitude range is inverted (the viewport crosses the 180 degree longitude line). - If &#x60;low.longitude&#x60; &#x3D; -180 degrees and &#x60;high.longitude&#x60; &#x3D; 180 degrees, the viewport includes all longitudes. - If &#x60;low.longitude&#x60; &#x3D; 180 degrees and &#x60;high.longitude&#x60; &#x3D; -180 degrees, the longitude range is empty. - If &#x60;low.latitude&#x60; &gt; &#x60;high.latitude&#x60;, the latitude range is empty. Both &#x60;low&#x60; and &#x60;high&#x60; must be populated, and the represented box cannot be empty (as specified by the definitions above). An empty viewport will result in an error. For example, this viewport fully encloses New York City: { \&quot;low\&quot;: { \&quot;latitude\&quot;: 40.477398, \&quot;longitude\&quot;: -74.259087 }, \&quot;high\&quot;: { \&quot;latitude\&quot;: 40.91618, \&quot;longitude\&quot;: -73.70018 } }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleGeoTypeViewport {
  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private GoogleTypeLatLng high;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private GoogleTypeLatLng low;

  public GoogleGeoTypeViewport() {
  }

  public GoogleGeoTypeViewport high(GoogleTypeLatLng high) {
    this.high = high;
    return this;
  }

  /**
   * Get high
   * @return high
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getHigh() {
    return high;
  }

  public void setHigh(GoogleTypeLatLng high) {
    this.high = high;
  }


  public GoogleGeoTypeViewport low(GoogleTypeLatLng low) {
    this.low = low;
    return this;
  }

  /**
   * Get low
   * @return low
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getLow() {
    return low;
  }

  public void setLow(GoogleTypeLatLng low) {
    this.low = low;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleGeoTypeViewport googleGeoTypeViewport = (GoogleGeoTypeViewport) o;
    return Objects.equals(this.high, googleGeoTypeViewport.high) &&
        Objects.equals(this.low, googleGeoTypeViewport.low);
  }

  @Override
  public int hashCode() {
    return Objects.hash(high, low);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleGeoTypeViewport {\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("high");
    openapiFields.add("low");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleGeoTypeViewport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleGeoTypeViewport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleGeoTypeViewport is not found in the empty JSON string", GoogleGeoTypeViewport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleGeoTypeViewport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleGeoTypeViewport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `high`
      if (jsonObj.get("high") != null && !jsonObj.get("high").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("high"));
      }
      // validate the optional field `low`
      if (jsonObj.get("low") != null && !jsonObj.get("low").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("low"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleGeoTypeViewport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleGeoTypeViewport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleGeoTypeViewport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleGeoTypeViewport.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleGeoTypeViewport>() {
           @Override
           public void write(JsonWriter out, GoogleGeoTypeViewport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleGeoTypeViewport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleGeoTypeViewport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleGeoTypeViewport
   * @throws IOException if the JSON string is invalid with respect to GoogleGeoTypeViewport
   */
  public static GoogleGeoTypeViewport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleGeoTypeViewport.class);
  }

  /**
   * Convert an instance of GoogleGeoTypeViewport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

