/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText;
import org.openapitools.client.model.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Prediction results for a Place Autocomplete prediction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction {
  public static final String SERIALIZED_NAME_DISTANCE_METERS = "distanceMeters";
  @SerializedName(SERIALIZED_NAME_DISTANCE_METERS)
  private Integer distanceMeters;

  public static final String SERIALIZED_NAME_PLACE = "place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  private String place;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_STRUCTURED_FORMAT = "structuredFormat";
  @SerializedName(SERIALIZED_NAME_STRUCTURED_FORMAT)
  private GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat structuredFormat;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText text;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction() {
  }

  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction distanceMeters(Integer distanceMeters) {
    this.distanceMeters = distanceMeters;
    return this;
  }

  /**
   * The length of the geodesic in meters from &#x60;origin&#x60; if &#x60;origin&#x60; is specified. Certain predictions such as routes may not populate this field.
   * @return distanceMeters
   */
  @javax.annotation.Nullable
  public Integer getDistanceMeters() {
    return distanceMeters;
  }

  public void setDistanceMeters(Integer distanceMeters) {
    this.distanceMeters = distanceMeters;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction place(String place) {
    this.place = place;
    return this;
  }

  /**
   * The resource name of the suggested Place. This name can be used in other APIs that accept Place names.
   * @return place
   */
  @javax.annotation.Nullable
  public String getPlace() {
    return place;
  }

  public void setPlace(String place) {
    this.place = place;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * The unique identifier of the suggested Place. This identifier can be used in other APIs that accept Place IDs.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction structuredFormat(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat structuredFormat) {
    this.structuredFormat = structuredFormat;
    return this;
  }

  /**
   * Get structuredFormat
   * @return structuredFormat
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat getStructuredFormat() {
    return structuredFormat;
  }

  public void setStructuredFormat(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat structuredFormat) {
    this.structuredFormat = structuredFormat;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction text(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText getText() {
    return text;
  }

  public void setText(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText text) {
    this.text = text;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction types(List<String> types) {
    this.types = types;
    return this;
  }

  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * List of types that apply to this Place from Table A or Table B in https://developers.google.com/maps/documentation/places/web-service/place-types. A type is a categorization of a Place. Places with shared types will share similar characteristics.
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction = (GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction) o;
    return Objects.equals(this.distanceMeters, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.distanceMeters) &&
        Objects.equals(this.place, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.place) &&
        Objects.equals(this.placeId, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.placeId) &&
        Objects.equals(this.structuredFormat, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.structuredFormat) &&
        Objects.equals(this.text, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.text) &&
        Objects.equals(this.types, googleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distanceMeters, place, placeId, structuredFormat, text, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction {\n");
    sb.append("    distanceMeters: ").append(toIndentedString(distanceMeters)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    structuredFormat: ").append(toIndentedString(structuredFormat)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distanceMeters");
    openapiFields.add("place");
    openapiFields.add("placeId");
    openapiFields.add("structuredFormat");
    openapiFields.add("text");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction is not found in the empty JSON string", GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("place") != null && !jsonObj.get("place").isJsonNull()) && !jsonObj.get("place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("place").toString()));
      }
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      // validate the optional field `structuredFormat`
      if (jsonObj.get("structuredFormat") != null && !jsonObj.get("structuredFormat").isJsonNull()) {
        GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.validateJsonElement(jsonObj.get("structuredFormat"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.validateJsonElement(jsonObj.get("text"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction
   */
  public static GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionPlacePrediction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

