/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceOpeningHoursPeriod;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about business hour of the place.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1PlaceOpeningHours {
  public static final String SERIALIZED_NAME_OPEN_NOW = "openNow";
  @SerializedName(SERIALIZED_NAME_OPEN_NOW)
  private Boolean openNow;

  public static final String SERIALIZED_NAME_PERIODS = "periods";
  @SerializedName(SERIALIZED_NAME_PERIODS)
  private List<GoogleMapsPlacesV1PlaceOpeningHoursPeriod> periods = new ArrayList<>();

  /**
   * A type string used to identify the type of secondary hours.
   */
  @JsonAdapter(SecondaryHoursTypeEnum.Adapter.class)
  public enum SecondaryHoursTypeEnum {
    SECONDARY_HOURS_TYPE_UNSPECIFIED("SECONDARY_HOURS_TYPE_UNSPECIFIED"),
    
    DRIVE_THROUGH("DRIVE_THROUGH"),
    
    HAPPY_HOUR("HAPPY_HOUR"),
    
    DELIVERY("DELIVERY"),
    
    TAKEOUT("TAKEOUT"),
    
    KITCHEN("KITCHEN"),
    
    BREAKFAST("BREAKFAST"),
    
    LUNCH("LUNCH"),
    
    DINNER("DINNER"),
    
    BRUNCH("BRUNCH"),
    
    PICKUP("PICKUP"),
    
    ACCESS("ACCESS"),
    
    SENIOR_HOURS("SENIOR_HOURS"),
    
    ONLINE_SERVICE_HOURS("ONLINE_SERVICE_HOURS");

    private String value;

    SecondaryHoursTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecondaryHoursTypeEnum fromValue(String value) {
      for (SecondaryHoursTypeEnum b : SecondaryHoursTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecondaryHoursTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecondaryHoursTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecondaryHoursTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecondaryHoursTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecondaryHoursTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECONDARY_HOURS_TYPE = "secondaryHoursType";
  @SerializedName(SERIALIZED_NAME_SECONDARY_HOURS_TYPE)
  private SecondaryHoursTypeEnum secondaryHoursType;

  public static final String SERIALIZED_NAME_SPECIAL_DAYS = "specialDays";
  @SerializedName(SERIALIZED_NAME_SPECIAL_DAYS)
  private List<GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> specialDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEEKDAY_DESCRIPTIONS = "weekdayDescriptions";
  @SerializedName(SERIALIZED_NAME_WEEKDAY_DESCRIPTIONS)
  private List<String> weekdayDescriptions = new ArrayList<>();

  public GoogleMapsPlacesV1PlaceOpeningHours() {
  }

  public GoogleMapsPlacesV1PlaceOpeningHours openNow(Boolean openNow) {
    this.openNow = openNow;
    return this;
  }

  /**
   * Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.
   * @return openNow
   */
  @javax.annotation.Nullable
  public Boolean getOpenNow() {
    return openNow;
  }

  public void setOpenNow(Boolean openNow) {
    this.openNow = openNow;
  }


  public GoogleMapsPlacesV1PlaceOpeningHours periods(List<GoogleMapsPlacesV1PlaceOpeningHoursPeriod> periods) {
    this.periods = periods;
    return this;
  }

  public GoogleMapsPlacesV1PlaceOpeningHours addPeriodsItem(GoogleMapsPlacesV1PlaceOpeningHoursPeriod periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

  /**
   * The periods that this place is open during the week. The periods are in chronological order, starting with Sunday in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.
   * @return periods
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceOpeningHoursPeriod> getPeriods() {
    return periods;
  }

  public void setPeriods(List<GoogleMapsPlacesV1PlaceOpeningHoursPeriod> periods) {
    this.periods = periods;
  }


  public GoogleMapsPlacesV1PlaceOpeningHours secondaryHoursType(SecondaryHoursTypeEnum secondaryHoursType) {
    this.secondaryHoursType = secondaryHoursType;
    return this;
  }

  /**
   * A type string used to identify the type of secondary hours.
   * @return secondaryHoursType
   */
  @javax.annotation.Nullable
  public SecondaryHoursTypeEnum getSecondaryHoursType() {
    return secondaryHoursType;
  }

  public void setSecondaryHoursType(SecondaryHoursTypeEnum secondaryHoursType) {
    this.secondaryHoursType = secondaryHoursType;
  }


  public GoogleMapsPlacesV1PlaceOpeningHours specialDays(List<GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> specialDays) {
    this.specialDays = specialDays;
    return this;
  }

  public GoogleMapsPlacesV1PlaceOpeningHours addSpecialDaysItem(GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay specialDaysItem) {
    if (this.specialDays == null) {
      this.specialDays = new ArrayList<>();
    }
    this.specialDays.add(specialDaysItem);
    return this;
  }

  /**
   * Structured information for special days that fall within the period that the returned opening hours cover. Special days are days that could impact the business hours of a place, e.g. Christmas day. Set for current_opening_hours and current_secondary_opening_hours if there are exceptional hours.
   * @return specialDays
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> getSpecialDays() {
    return specialDays;
  }

  public void setSpecialDays(List<GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay> specialDays) {
    this.specialDays = specialDays;
  }


  public GoogleMapsPlacesV1PlaceOpeningHours weekdayDescriptions(List<String> weekdayDescriptions) {
    this.weekdayDescriptions = weekdayDescriptions;
    return this;
  }

  public GoogleMapsPlacesV1PlaceOpeningHours addWeekdayDescriptionsItem(String weekdayDescriptionsItem) {
    if (this.weekdayDescriptions == null) {
      this.weekdayDescriptions = new ArrayList<>();
    }
    this.weekdayDescriptions.add(weekdayDescriptionsItem);
    return this;
  }

  /**
   * Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: \&quot;Sun: 18:00â€“06:00\&quot;
   * @return weekdayDescriptions
   */
  @javax.annotation.Nullable
  public List<String> getWeekdayDescriptions() {
    return weekdayDescriptions;
  }

  public void setWeekdayDescriptions(List<String> weekdayDescriptions) {
    this.weekdayDescriptions = weekdayDescriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1PlaceOpeningHours googleMapsPlacesV1PlaceOpeningHours = (GoogleMapsPlacesV1PlaceOpeningHours) o;
    return Objects.equals(this.openNow, googleMapsPlacesV1PlaceOpeningHours.openNow) &&
        Objects.equals(this.periods, googleMapsPlacesV1PlaceOpeningHours.periods) &&
        Objects.equals(this.secondaryHoursType, googleMapsPlacesV1PlaceOpeningHours.secondaryHoursType) &&
        Objects.equals(this.specialDays, googleMapsPlacesV1PlaceOpeningHours.specialDays) &&
        Objects.equals(this.weekdayDescriptions, googleMapsPlacesV1PlaceOpeningHours.weekdayDescriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openNow, periods, secondaryHoursType, specialDays, weekdayDescriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1PlaceOpeningHours {\n");
    sb.append("    openNow: ").append(toIndentedString(openNow)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    secondaryHoursType: ").append(toIndentedString(secondaryHoursType)).append("\n");
    sb.append("    specialDays: ").append(toIndentedString(specialDays)).append("\n");
    sb.append("    weekdayDescriptions: ").append(toIndentedString(weekdayDescriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("openNow");
    openapiFields.add("periods");
    openapiFields.add("secondaryHoursType");
    openapiFields.add("specialDays");
    openapiFields.add("weekdayDescriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1PlaceOpeningHours
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1PlaceOpeningHours.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1PlaceOpeningHours is not found in the empty JSON string", GoogleMapsPlacesV1PlaceOpeningHours.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1PlaceOpeningHours.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1PlaceOpeningHours` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("periods") != null && !jsonObj.get("periods").isJsonNull()) {
        JsonArray jsonArrayperiods = jsonObj.getAsJsonArray("periods");
        if (jsonArrayperiods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("periods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `periods` to be an array in the JSON string but got `%s`", jsonObj.get("periods").toString()));
          }

          // validate the optional field `periods` (array)
          for (int i = 0; i < jsonArrayperiods.size(); i++) {
            GoogleMapsPlacesV1PlaceOpeningHoursPeriod.validateJsonElement(jsonArrayperiods.get(i));
          };
        }
      }
      if ((jsonObj.get("secondaryHoursType") != null && !jsonObj.get("secondaryHoursType").isJsonNull()) && !jsonObj.get("secondaryHoursType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryHoursType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryHoursType").toString()));
      }
      // validate the optional field `secondaryHoursType`
      if (jsonObj.get("secondaryHoursType") != null && !jsonObj.get("secondaryHoursType").isJsonNull()) {
        SecondaryHoursTypeEnum.validateJsonElement(jsonObj.get("secondaryHoursType"));
      }
      if (jsonObj.get("specialDays") != null && !jsonObj.get("specialDays").isJsonNull()) {
        JsonArray jsonArrayspecialDays = jsonObj.getAsJsonArray("specialDays");
        if (jsonArrayspecialDays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specialDays").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specialDays` to be an array in the JSON string but got `%s`", jsonObj.get("specialDays").toString()));
          }

          // validate the optional field `specialDays` (array)
          for (int i = 0; i < jsonArrayspecialDays.size(); i++) {
            GoogleMapsPlacesV1PlaceOpeningHoursSpecialDay.validateJsonElement(jsonArrayspecialDays.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("weekdayDescriptions") != null && !jsonObj.get("weekdayDescriptions").isJsonNull() && !jsonObj.get("weekdayDescriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekdayDescriptions` to be an array in the JSON string but got `%s`", jsonObj.get("weekdayDescriptions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1PlaceOpeningHours.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1PlaceOpeningHours' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1PlaceOpeningHours> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1PlaceOpeningHours.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1PlaceOpeningHours>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1PlaceOpeningHours value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1PlaceOpeningHours read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1PlaceOpeningHours given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1PlaceOpeningHours
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1PlaceOpeningHours
   */
  public static GoogleMapsPlacesV1PlaceOpeningHours fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1PlaceOpeningHours.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1PlaceOpeningHours to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

