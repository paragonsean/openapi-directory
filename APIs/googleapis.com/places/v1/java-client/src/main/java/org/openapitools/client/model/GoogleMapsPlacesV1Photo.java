/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleMapsPlacesV1AuthorAttribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a photo of a place.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1Photo {
  public static final String SERIALIZED_NAME_AUTHOR_ATTRIBUTIONS = "authorAttributions";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ATTRIBUTIONS)
  private List<GoogleMapsPlacesV1AuthorAttribution> authorAttributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEIGHT_PX = "heightPx";
  @SerializedName(SERIALIZED_NAME_HEIGHT_PX)
  private Integer heightPx;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_WIDTH_PX = "widthPx";
  @SerializedName(SERIALIZED_NAME_WIDTH_PX)
  private Integer widthPx;

  public GoogleMapsPlacesV1Photo() {
  }

  public GoogleMapsPlacesV1Photo authorAttributions(List<GoogleMapsPlacesV1AuthorAttribution> authorAttributions) {
    this.authorAttributions = authorAttributions;
    return this;
  }

  public GoogleMapsPlacesV1Photo addAuthorAttributionsItem(GoogleMapsPlacesV1AuthorAttribution authorAttributionsItem) {
    if (this.authorAttributions == null) {
      this.authorAttributions = new ArrayList<>();
    }
    this.authorAttributions.add(authorAttributionsItem);
    return this;
  }

  /**
   * This photo&#39;s authors.
   * @return authorAttributions
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1AuthorAttribution> getAuthorAttributions() {
    return authorAttributions;
  }

  public void setAuthorAttributions(List<GoogleMapsPlacesV1AuthorAttribution> authorAttributions) {
    this.authorAttributions = authorAttributions;
  }


  public GoogleMapsPlacesV1Photo heightPx(Integer heightPx) {
    this.heightPx = heightPx;
    return this;
  }

  /**
   * The maximum available height, in pixels.
   * @return heightPx
   */
  @javax.annotation.Nullable
  public Integer getHeightPx() {
    return heightPx;
  }

  public void setHeightPx(Integer heightPx) {
    this.heightPx = heightPx;
  }


  public GoogleMapsPlacesV1Photo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Identifier. A reference representing this place photo which may be used to look up this place photo again (also called the API \&quot;resource\&quot; name: &#x60;places/{place_id}/photos/{photo}&#x60;).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleMapsPlacesV1Photo widthPx(Integer widthPx) {
    this.widthPx = widthPx;
    return this;
  }

  /**
   * The maximum available width, in pixels.
   * @return widthPx
   */
  @javax.annotation.Nullable
  public Integer getWidthPx() {
    return widthPx;
  }

  public void setWidthPx(Integer widthPx) {
    this.widthPx = widthPx;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1Photo googleMapsPlacesV1Photo = (GoogleMapsPlacesV1Photo) o;
    return Objects.equals(this.authorAttributions, googleMapsPlacesV1Photo.authorAttributions) &&
        Objects.equals(this.heightPx, googleMapsPlacesV1Photo.heightPx) &&
        Objects.equals(this.name, googleMapsPlacesV1Photo.name) &&
        Objects.equals(this.widthPx, googleMapsPlacesV1Photo.widthPx);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorAttributions, heightPx, name, widthPx);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1Photo {\n");
    sb.append("    authorAttributions: ").append(toIndentedString(authorAttributions)).append("\n");
    sb.append("    heightPx: ").append(toIndentedString(heightPx)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    widthPx: ").append(toIndentedString(widthPx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorAttributions");
    openapiFields.add("heightPx");
    openapiFields.add("name");
    openapiFields.add("widthPx");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1Photo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1Photo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1Photo is not found in the empty JSON string", GoogleMapsPlacesV1Photo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1Photo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1Photo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorAttributions") != null && !jsonObj.get("authorAttributions").isJsonNull()) {
        JsonArray jsonArrayauthorAttributions = jsonObj.getAsJsonArray("authorAttributions");
        if (jsonArrayauthorAttributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorAttributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorAttributions` to be an array in the JSON string but got `%s`", jsonObj.get("authorAttributions").toString()));
          }

          // validate the optional field `authorAttributions` (array)
          for (int i = 0; i < jsonArrayauthorAttributions.size(); i++) {
            GoogleMapsPlacesV1AuthorAttribution.validateJsonElement(jsonArrayauthorAttributions.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1Photo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1Photo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1Photo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1Photo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1Photo>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1Photo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1Photo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1Photo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1Photo
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1Photo
   */
  public static GoogleMapsPlacesV1Photo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1Photo.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1Photo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

