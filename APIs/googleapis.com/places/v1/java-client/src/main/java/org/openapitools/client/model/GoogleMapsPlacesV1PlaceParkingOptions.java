/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about parking options for the place. A parking lot could support more than one option at the same time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1PlaceParkingOptions {
  public static final String SERIALIZED_NAME_FREE_GARAGE_PARKING = "freeGarageParking";
  @SerializedName(SERIALIZED_NAME_FREE_GARAGE_PARKING)
  private Boolean freeGarageParking;

  public static final String SERIALIZED_NAME_FREE_PARKING_LOT = "freeParkingLot";
  @SerializedName(SERIALIZED_NAME_FREE_PARKING_LOT)
  private Boolean freeParkingLot;

  public static final String SERIALIZED_NAME_FREE_STREET_PARKING = "freeStreetParking";
  @SerializedName(SERIALIZED_NAME_FREE_STREET_PARKING)
  private Boolean freeStreetParking;

  public static final String SERIALIZED_NAME_PAID_GARAGE_PARKING = "paidGarageParking";
  @SerializedName(SERIALIZED_NAME_PAID_GARAGE_PARKING)
  private Boolean paidGarageParking;

  public static final String SERIALIZED_NAME_PAID_PARKING_LOT = "paidParkingLot";
  @SerializedName(SERIALIZED_NAME_PAID_PARKING_LOT)
  private Boolean paidParkingLot;

  public static final String SERIALIZED_NAME_PAID_STREET_PARKING = "paidStreetParking";
  @SerializedName(SERIALIZED_NAME_PAID_STREET_PARKING)
  private Boolean paidStreetParking;

  public static final String SERIALIZED_NAME_VALET_PARKING = "valetParking";
  @SerializedName(SERIALIZED_NAME_VALET_PARKING)
  private Boolean valetParking;

  public GoogleMapsPlacesV1PlaceParkingOptions() {
  }

  public GoogleMapsPlacesV1PlaceParkingOptions freeGarageParking(Boolean freeGarageParking) {
    this.freeGarageParking = freeGarageParking;
    return this;
  }

  /**
   * Place offers free garage parking.
   * @return freeGarageParking
   */
  @javax.annotation.Nullable
  public Boolean getFreeGarageParking() {
    return freeGarageParking;
  }

  public void setFreeGarageParking(Boolean freeGarageParking) {
    this.freeGarageParking = freeGarageParking;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions freeParkingLot(Boolean freeParkingLot) {
    this.freeParkingLot = freeParkingLot;
    return this;
  }

  /**
   * Place offers free parking lots.
   * @return freeParkingLot
   */
  @javax.annotation.Nullable
  public Boolean getFreeParkingLot() {
    return freeParkingLot;
  }

  public void setFreeParkingLot(Boolean freeParkingLot) {
    this.freeParkingLot = freeParkingLot;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions freeStreetParking(Boolean freeStreetParking) {
    this.freeStreetParking = freeStreetParking;
    return this;
  }

  /**
   * Place offers free street parking.
   * @return freeStreetParking
   */
  @javax.annotation.Nullable
  public Boolean getFreeStreetParking() {
    return freeStreetParking;
  }

  public void setFreeStreetParking(Boolean freeStreetParking) {
    this.freeStreetParking = freeStreetParking;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions paidGarageParking(Boolean paidGarageParking) {
    this.paidGarageParking = paidGarageParking;
    return this;
  }

  /**
   * Place offers paid garage parking.
   * @return paidGarageParking
   */
  @javax.annotation.Nullable
  public Boolean getPaidGarageParking() {
    return paidGarageParking;
  }

  public void setPaidGarageParking(Boolean paidGarageParking) {
    this.paidGarageParking = paidGarageParking;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions paidParkingLot(Boolean paidParkingLot) {
    this.paidParkingLot = paidParkingLot;
    return this;
  }

  /**
   * Place offers paid parking lots.
   * @return paidParkingLot
   */
  @javax.annotation.Nullable
  public Boolean getPaidParkingLot() {
    return paidParkingLot;
  }

  public void setPaidParkingLot(Boolean paidParkingLot) {
    this.paidParkingLot = paidParkingLot;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions paidStreetParking(Boolean paidStreetParking) {
    this.paidStreetParking = paidStreetParking;
    return this;
  }

  /**
   * Place offers paid street parking.
   * @return paidStreetParking
   */
  @javax.annotation.Nullable
  public Boolean getPaidStreetParking() {
    return paidStreetParking;
  }

  public void setPaidStreetParking(Boolean paidStreetParking) {
    this.paidStreetParking = paidStreetParking;
  }


  public GoogleMapsPlacesV1PlaceParkingOptions valetParking(Boolean valetParking) {
    this.valetParking = valetParking;
    return this;
  }

  /**
   * Place offers valet parking.
   * @return valetParking
   */
  @javax.annotation.Nullable
  public Boolean getValetParking() {
    return valetParking;
  }

  public void setValetParking(Boolean valetParking) {
    this.valetParking = valetParking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1PlaceParkingOptions googleMapsPlacesV1PlaceParkingOptions = (GoogleMapsPlacesV1PlaceParkingOptions) o;
    return Objects.equals(this.freeGarageParking, googleMapsPlacesV1PlaceParkingOptions.freeGarageParking) &&
        Objects.equals(this.freeParkingLot, googleMapsPlacesV1PlaceParkingOptions.freeParkingLot) &&
        Objects.equals(this.freeStreetParking, googleMapsPlacesV1PlaceParkingOptions.freeStreetParking) &&
        Objects.equals(this.paidGarageParking, googleMapsPlacesV1PlaceParkingOptions.paidGarageParking) &&
        Objects.equals(this.paidParkingLot, googleMapsPlacesV1PlaceParkingOptions.paidParkingLot) &&
        Objects.equals(this.paidStreetParking, googleMapsPlacesV1PlaceParkingOptions.paidStreetParking) &&
        Objects.equals(this.valetParking, googleMapsPlacesV1PlaceParkingOptions.valetParking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freeGarageParking, freeParkingLot, freeStreetParking, paidGarageParking, paidParkingLot, paidStreetParking, valetParking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1PlaceParkingOptions {\n");
    sb.append("    freeGarageParking: ").append(toIndentedString(freeGarageParking)).append("\n");
    sb.append("    freeParkingLot: ").append(toIndentedString(freeParkingLot)).append("\n");
    sb.append("    freeStreetParking: ").append(toIndentedString(freeStreetParking)).append("\n");
    sb.append("    paidGarageParking: ").append(toIndentedString(paidGarageParking)).append("\n");
    sb.append("    paidParkingLot: ").append(toIndentedString(paidParkingLot)).append("\n");
    sb.append("    paidStreetParking: ").append(toIndentedString(paidStreetParking)).append("\n");
    sb.append("    valetParking: ").append(toIndentedString(valetParking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("freeGarageParking");
    openapiFields.add("freeParkingLot");
    openapiFields.add("freeStreetParking");
    openapiFields.add("paidGarageParking");
    openapiFields.add("paidParkingLot");
    openapiFields.add("paidStreetParking");
    openapiFields.add("valetParking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1PlaceParkingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1PlaceParkingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1PlaceParkingOptions is not found in the empty JSON string", GoogleMapsPlacesV1PlaceParkingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1PlaceParkingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1PlaceParkingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1PlaceParkingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1PlaceParkingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1PlaceParkingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1PlaceParkingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1PlaceParkingOptions>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1PlaceParkingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1PlaceParkingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1PlaceParkingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1PlaceParkingOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1PlaceParkingOptions
   */
  public static GoogleMapsPlacesV1PlaceParkingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1PlaceParkingOptions.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1PlaceParkingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

