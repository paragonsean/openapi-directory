/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleMapsPlacesV1AuthorAttribution;
import org.openapitools.client.model.GoogleTypeLocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a review of a place.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1Review {
  public static final String SERIALIZED_NAME_AUTHOR_ATTRIBUTION = "authorAttribution";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ATTRIBUTION)
  private GoogleMapsPlacesV1AuthorAttribution authorAttribution;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_TEXT = "originalText";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TEXT)
  private GoogleTypeLocalizedText originalText;

  public static final String SERIALIZED_NAME_PUBLISH_TIME = "publishTime";
  @SerializedName(SERIALIZED_NAME_PUBLISH_TIME)
  private String publishTime;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Double rating;

  public static final String SERIALIZED_NAME_RELATIVE_PUBLISH_TIME_DESCRIPTION = "relativePublishTimeDescription";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PUBLISH_TIME_DESCRIPTION)
  private String relativePublishTimeDescription;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private GoogleTypeLocalizedText text;

  public GoogleMapsPlacesV1Review() {
  }

  public GoogleMapsPlacesV1Review authorAttribution(GoogleMapsPlacesV1AuthorAttribution authorAttribution) {
    this.authorAttribution = authorAttribution;
    return this;
  }

  /**
   * Get authorAttribution
   * @return authorAttribution
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1AuthorAttribution getAuthorAttribution() {
    return authorAttribution;
  }

  public void setAuthorAttribution(GoogleMapsPlacesV1AuthorAttribution authorAttribution) {
    this.authorAttribution = authorAttribution;
  }


  public GoogleMapsPlacesV1Review name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A reference representing this place review which may be used to look up this place review again (also called the API \&quot;resource\&quot; name: &#x60;places/{place_id}/reviews/{review}&#x60;).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleMapsPlacesV1Review originalText(GoogleTypeLocalizedText originalText) {
    this.originalText = originalText;
    return this;
  }

  /**
   * Get originalText
   * @return originalText
   */
  @javax.annotation.Nullable
  public GoogleTypeLocalizedText getOriginalText() {
    return originalText;
  }

  public void setOriginalText(GoogleTypeLocalizedText originalText) {
    this.originalText = originalText;
  }


  public GoogleMapsPlacesV1Review publishTime(String publishTime) {
    this.publishTime = publishTime;
    return this;
  }

  /**
   * Timestamp for the review.
   * @return publishTime
   */
  @javax.annotation.Nullable
  public String getPublishTime() {
    return publishTime;
  }

  public void setPublishTime(String publishTime) {
    this.publishTime = publishTime;
  }


  public GoogleMapsPlacesV1Review rating(Double rating) {
    this.rating = rating;
    return this;
  }

  /**
   * A number between 1.0 and 5.0, also called the number of stars.
   * @return rating
   */
  @javax.annotation.Nullable
  public Double getRating() {
    return rating;
  }

  public void setRating(Double rating) {
    this.rating = rating;
  }


  public GoogleMapsPlacesV1Review relativePublishTimeDescription(String relativePublishTimeDescription) {
    this.relativePublishTimeDescription = relativePublishTimeDescription;
    return this;
  }

  /**
   * A string of formatted recent time, expressing the review time relative to the current time in a form appropriate for the language and country.
   * @return relativePublishTimeDescription
   */
  @javax.annotation.Nullable
  public String getRelativePublishTimeDescription() {
    return relativePublishTimeDescription;
  }

  public void setRelativePublishTimeDescription(String relativePublishTimeDescription) {
    this.relativePublishTimeDescription = relativePublishTimeDescription;
  }


  public GoogleMapsPlacesV1Review text(GoogleTypeLocalizedText text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public GoogleTypeLocalizedText getText() {
    return text;
  }

  public void setText(GoogleTypeLocalizedText text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1Review googleMapsPlacesV1Review = (GoogleMapsPlacesV1Review) o;
    return Objects.equals(this.authorAttribution, googleMapsPlacesV1Review.authorAttribution) &&
        Objects.equals(this.name, googleMapsPlacesV1Review.name) &&
        Objects.equals(this.originalText, googleMapsPlacesV1Review.originalText) &&
        Objects.equals(this.publishTime, googleMapsPlacesV1Review.publishTime) &&
        Objects.equals(this.rating, googleMapsPlacesV1Review.rating) &&
        Objects.equals(this.relativePublishTimeDescription, googleMapsPlacesV1Review.relativePublishTimeDescription) &&
        Objects.equals(this.text, googleMapsPlacesV1Review.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorAttribution, name, originalText, publishTime, rating, relativePublishTimeDescription, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1Review {\n");
    sb.append("    authorAttribution: ").append(toIndentedString(authorAttribution)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalText: ").append(toIndentedString(originalText)).append("\n");
    sb.append("    publishTime: ").append(toIndentedString(publishTime)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    relativePublishTimeDescription: ").append(toIndentedString(relativePublishTimeDescription)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorAttribution");
    openapiFields.add("name");
    openapiFields.add("originalText");
    openapiFields.add("publishTime");
    openapiFields.add("rating");
    openapiFields.add("relativePublishTimeDescription");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1Review
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1Review.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1Review is not found in the empty JSON string", GoogleMapsPlacesV1Review.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1Review.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1Review` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorAttribution`
      if (jsonObj.get("authorAttribution") != null && !jsonObj.get("authorAttribution").isJsonNull()) {
        GoogleMapsPlacesV1AuthorAttribution.validateJsonElement(jsonObj.get("authorAttribution"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `originalText`
      if (jsonObj.get("originalText") != null && !jsonObj.get("originalText").isJsonNull()) {
        GoogleTypeLocalizedText.validateJsonElement(jsonObj.get("originalText"));
      }
      if ((jsonObj.get("publishTime") != null && !jsonObj.get("publishTime").isJsonNull()) && !jsonObj.get("publishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishTime").toString()));
      }
      if ((jsonObj.get("relativePublishTimeDescription") != null && !jsonObj.get("relativePublishTimeDescription").isJsonNull()) && !jsonObj.get("relativePublishTimeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePublishTimeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePublishTimeDescription").toString()));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        GoogleTypeLocalizedText.validateJsonElement(jsonObj.get("text"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1Review.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1Review' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1Review> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1Review.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1Review>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1Review value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1Review read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1Review given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1Review
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1Review
   */
  public static GoogleMapsPlacesV1Review fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1Review.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1Review to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

