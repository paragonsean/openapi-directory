/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Plus code (http://plus.codes) is a location reference with two formats: global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle, and compound code, replacing the prefix with a reference location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1PlacePlusCode {
  public static final String SERIALIZED_NAME_COMPOUND_CODE = "compoundCode";
  @SerializedName(SERIALIZED_NAME_COMPOUND_CODE)
  private String compoundCode;

  public static final String SERIALIZED_NAME_GLOBAL_CODE = "globalCode";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CODE)
  private String globalCode;

  public GoogleMapsPlacesV1PlacePlusCode() {
  }

  public GoogleMapsPlacesV1PlacePlusCode compoundCode(String compoundCode) {
    this.compoundCode = compoundCode;
    return this;
  }

  /**
   * Place&#39;s compound code, such as \&quot;33GV+HQ, Ramberg, Norway\&quot;, containing the suffix of the global code and replacing the prefix with a formatted name of a reference entity.
   * @return compoundCode
   */
  @javax.annotation.Nullable
  public String getCompoundCode() {
    return compoundCode;
  }

  public void setCompoundCode(String compoundCode) {
    this.compoundCode = compoundCode;
  }


  public GoogleMapsPlacesV1PlacePlusCode globalCode(String globalCode) {
    this.globalCode = globalCode;
    return this;
  }

  /**
   * Place&#39;s global (full) code, such as \&quot;9FWM33GV+HQ\&quot;, representing an 1/8000 by 1/8000 degree area (~14 by 14 meters).
   * @return globalCode
   */
  @javax.annotation.Nullable
  public String getGlobalCode() {
    return globalCode;
  }

  public void setGlobalCode(String globalCode) {
    this.globalCode = globalCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1PlacePlusCode googleMapsPlacesV1PlacePlusCode = (GoogleMapsPlacesV1PlacePlusCode) o;
    return Objects.equals(this.compoundCode, googleMapsPlacesV1PlacePlusCode.compoundCode) &&
        Objects.equals(this.globalCode, googleMapsPlacesV1PlacePlusCode.globalCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compoundCode, globalCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1PlacePlusCode {\n");
    sb.append("    compoundCode: ").append(toIndentedString(compoundCode)).append("\n");
    sb.append("    globalCode: ").append(toIndentedString(globalCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compoundCode");
    openapiFields.add("globalCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1PlacePlusCode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1PlacePlusCode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1PlacePlusCode is not found in the empty JSON string", GoogleMapsPlacesV1PlacePlusCode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1PlacePlusCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1PlacePlusCode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compoundCode") != null && !jsonObj.get("compoundCode").isJsonNull()) && !jsonObj.get("compoundCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compoundCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compoundCode").toString()));
      }
      if ((jsonObj.get("globalCode") != null && !jsonObj.get("globalCode").isJsonNull()) && !jsonObj.get("globalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("globalCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1PlacePlusCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1PlacePlusCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1PlacePlusCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1PlacePlusCode.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1PlacePlusCode>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1PlacePlusCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1PlacePlusCode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1PlacePlusCode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1PlacePlusCode
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1PlacePlusCode
   */
  public static GoogleMapsPlacesV1PlacePlusCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1PlacePlusCode.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1PlacePlusCode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

