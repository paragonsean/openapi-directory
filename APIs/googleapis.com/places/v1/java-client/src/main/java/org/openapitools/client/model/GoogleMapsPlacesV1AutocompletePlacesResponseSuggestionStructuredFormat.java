/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a breakdown of a Place or query prediction into main text and secondary text. For Place predictions, the main text contains the specific name of the Place. For query predictions, the main text contains the query. The secondary text contains additional disambiguating features (such as a city or region) to further identify the Place or refine the query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat {
  public static final String SERIALIZED_NAME_MAIN_TEXT = "mainText";
  @SerializedName(SERIALIZED_NAME_MAIN_TEXT)
  private GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText mainText;

  public static final String SERIALIZED_NAME_SECONDARY_TEXT = "secondaryText";
  @SerializedName(SERIALIZED_NAME_SECONDARY_TEXT)
  private GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText secondaryText;

  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat() {
  }

  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat mainText(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText mainText) {
    this.mainText = mainText;
    return this;
  }

  /**
   * Get mainText
   * @return mainText
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText getMainText() {
    return mainText;
  }

  public void setMainText(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText mainText) {
    this.mainText = mainText;
  }


  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat secondaryText(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText secondaryText) {
    this.secondaryText = secondaryText;
    return this;
  }

  /**
   * Get secondaryText
   * @return secondaryText
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText getSecondaryText() {
    return secondaryText;
  }

  public void setSecondaryText(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText secondaryText) {
    this.secondaryText = secondaryText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat googleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat = (GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat) o;
    return Objects.equals(this.mainText, googleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.mainText) &&
        Objects.equals(this.secondaryText, googleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.secondaryText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mainText, secondaryText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat {\n");
    sb.append("    mainText: ").append(toIndentedString(mainText)).append("\n");
    sb.append("    secondaryText: ").append(toIndentedString(secondaryText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mainText");
    openapiFields.add("secondaryText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat is not found in the empty JSON string", GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mainText`
      if (jsonObj.get("mainText") != null && !jsonObj.get("mainText").isJsonNull()) {
        GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.validateJsonElement(jsonObj.get("mainText"));
      }
      // validate the optional field `secondaryText`
      if (jsonObj.get("secondaryText") != null && !jsonObj.get("secondaryText").isJsonNull()) {
        GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionFormattableText.validateJsonElement(jsonObj.get("secondaryText"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat
   */
  public static GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1AutocompletePlacesResponseSuggestionStructuredFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

