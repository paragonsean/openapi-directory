/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Status changing points.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private GoogleTypeDate date;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private Integer day;

  public static final String SERIALIZED_NAME_HOUR = "hour";
  @SerializedName(SERIALIZED_NAME_HOUR)
  private Integer hour;

  public static final String SERIALIZED_NAME_MINUTE = "minute";
  @SerializedName(SERIALIZED_NAME_MINUTE)
  private Integer minute;

  public static final String SERIALIZED_NAME_TRUNCATED = "truncated";
  @SerializedName(SERIALIZED_NAME_TRUNCATED)
  private Boolean truncated;

  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint() {
  }

  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint date(GoogleTypeDate date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public GoogleTypeDate getDate() {
    return date;
  }

  public void setDate(GoogleTypeDate date) {
    this.date = date;
  }


  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint day(Integer day) {
    this.day = day;
    return this;
  }

  /**
   * A day of the week, as an integer in the range 0-6. 0 is Sunday, 1 is Monday, etc.
   * @return day
   */
  @javax.annotation.Nullable
  public Integer getDay() {
    return day;
  }

  public void setDay(Integer day) {
    this.day = day;
  }


  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint hour(Integer hour) {
    this.hour = hour;
    return this;
  }

  /**
   * The hour in 2 digits. Ranges from 00 to 23.
   * @return hour
   */
  @javax.annotation.Nullable
  public Integer getHour() {
    return hour;
  }

  public void setHour(Integer hour) {
    this.hour = hour;
  }


  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint minute(Integer minute) {
    this.minute = minute;
    return this;
  }

  /**
   * The minute in 2 digits. Ranges from 00 to 59.
   * @return minute
   */
  @javax.annotation.Nullable
  public Integer getMinute() {
    return minute;
  }

  public void setMinute(Integer minute) {
    this.minute = minute;
  }


  public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint truncated(Boolean truncated) {
    this.truncated = truncated;
    return this;
  }

  /**
   * Whether or not this endpoint was truncated. Truncation occurs when the real hours are outside the times we are willing to return hours between, so we truncate the hours back to these boundaries. This ensures that at most 24 * 7 hours from midnight of the day of the request are returned.
   * @return truncated
   */
  @javax.annotation.Nullable
  public Boolean getTruncated() {
    return truncated;
  }

  public void setTruncated(Boolean truncated) {
    this.truncated = truncated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint googleMapsPlacesV1PlaceOpeningHoursPeriodPoint = (GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint) o;
    return Objects.equals(this.date, googleMapsPlacesV1PlaceOpeningHoursPeriodPoint.date) &&
        Objects.equals(this.day, googleMapsPlacesV1PlaceOpeningHoursPeriodPoint.day) &&
        Objects.equals(this.hour, googleMapsPlacesV1PlaceOpeningHoursPeriodPoint.hour) &&
        Objects.equals(this.minute, googleMapsPlacesV1PlaceOpeningHoursPeriodPoint.minute) &&
        Objects.equals(this.truncated, googleMapsPlacesV1PlaceOpeningHoursPeriodPoint.truncated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, day, hour, minute, truncated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    minute: ").append(toIndentedString(minute)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("day");
    openapiFields.add("hour");
    openapiFields.add("minute");
    openapiFields.add("truncated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint is not found in the empty JSON string", GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        GoogleTypeDate.validateJsonElement(jsonObj.get("date"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint
   */
  public static GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1PlaceOpeningHoursPeriodPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

