/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleGeoTypeViewport;
import org.openapitools.client.model.GoogleMapsPlacesV1EVChargeOptions;
import org.openapitools.client.model.GoogleMapsPlacesV1FuelOptions;
import org.openapitools.client.model.GoogleMapsPlacesV1Photo;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceAccessibilityOptions;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceAddressComponent;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceAttribution;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceOpeningHours;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceParkingOptions;
import org.openapitools.client.model.GoogleMapsPlacesV1PlacePaymentOptions;
import org.openapitools.client.model.GoogleMapsPlacesV1PlacePlusCode;
import org.openapitools.client.model.GoogleMapsPlacesV1PlaceSubDestination;
import org.openapitools.client.model.GoogleMapsPlacesV1Review;
import org.openapitools.client.model.GoogleTypeLatLng;
import org.openapitools.client.model.GoogleTypeLocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All the information representing a Place.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1Place {
  public static final String SERIALIZED_NAME_ACCESSIBILITY_OPTIONS = "accessibilityOptions";
  @SerializedName(SERIALIZED_NAME_ACCESSIBILITY_OPTIONS)
  private GoogleMapsPlacesV1PlaceAccessibilityOptions accessibilityOptions;

  public static final String SERIALIZED_NAME_ADDRESS_COMPONENTS = "addressComponents";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COMPONENTS)
  private List<GoogleMapsPlacesV1PlaceAddressComponent> addressComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADR_FORMAT_ADDRESS = "adrFormatAddress";
  @SerializedName(SERIALIZED_NAME_ADR_FORMAT_ADDRESS)
  private String adrFormatAddress;

  public static final String SERIALIZED_NAME_ALLOWS_DOGS = "allowsDogs";
  @SerializedName(SERIALIZED_NAME_ALLOWS_DOGS)
  private Boolean allowsDogs;

  public static final String SERIALIZED_NAME_ATTRIBUTIONS = "attributions";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTIONS)
  private List<GoogleMapsPlacesV1PlaceAttribution> attributions = new ArrayList<>();

  /**
   * The business status for the place.
   */
  @JsonAdapter(BusinessStatusEnum.Adapter.class)
  public enum BusinessStatusEnum {
    BUSINESS_STATUS_UNSPECIFIED("BUSINESS_STATUS_UNSPECIFIED"),
    
    OPERATIONAL("OPERATIONAL"),
    
    CLOSED_TEMPORARILY("CLOSED_TEMPORARILY"),
    
    CLOSED_PERMANENTLY("CLOSED_PERMANENTLY");

    private String value;

    BusinessStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessStatusEnum fromValue(String value) {
      for (BusinessStatusEnum b : BusinessStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BusinessStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_STATUS = "businessStatus";
  @SerializedName(SERIALIZED_NAME_BUSINESS_STATUS)
  private BusinessStatusEnum businessStatus;

  public static final String SERIALIZED_NAME_CURBSIDE_PICKUP = "curbsidePickup";
  @SerializedName(SERIALIZED_NAME_CURBSIDE_PICKUP)
  private Boolean curbsidePickup;

  public static final String SERIALIZED_NAME_CURRENT_OPENING_HOURS = "currentOpeningHours";
  @SerializedName(SERIALIZED_NAME_CURRENT_OPENING_HOURS)
  private GoogleMapsPlacesV1PlaceOpeningHours currentOpeningHours;

  public static final String SERIALIZED_NAME_CURRENT_SECONDARY_OPENING_HOURS = "currentSecondaryOpeningHours";
  @SerializedName(SERIALIZED_NAME_CURRENT_SECONDARY_OPENING_HOURS)
  private List<GoogleMapsPlacesV1PlaceOpeningHours> currentSecondaryOpeningHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private Boolean delivery;

  public static final String SERIALIZED_NAME_DINE_IN = "dineIn";
  @SerializedName(SERIALIZED_NAME_DINE_IN)
  private Boolean dineIn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private GoogleTypeLocalizedText displayName;

  public static final String SERIALIZED_NAME_EDITORIAL_SUMMARY = "editorialSummary";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_SUMMARY)
  private GoogleTypeLocalizedText editorialSummary;

  public static final String SERIALIZED_NAME_EV_CHARGE_OPTIONS = "evChargeOptions";
  @SerializedName(SERIALIZED_NAME_EV_CHARGE_OPTIONS)
  private GoogleMapsPlacesV1EVChargeOptions evChargeOptions;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formattedAddress";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_FUEL_OPTIONS = "fuelOptions";
  @SerializedName(SERIALIZED_NAME_FUEL_OPTIONS)
  private GoogleMapsPlacesV1FuelOptions fuelOptions;

  public static final String SERIALIZED_NAME_GOOD_FOR_CHILDREN = "goodForChildren";
  @SerializedName(SERIALIZED_NAME_GOOD_FOR_CHILDREN)
  private Boolean goodForChildren;

  public static final String SERIALIZED_NAME_GOOD_FOR_GROUPS = "goodForGroups";
  @SerializedName(SERIALIZED_NAME_GOOD_FOR_GROUPS)
  private Boolean goodForGroups;

  public static final String SERIALIZED_NAME_GOOD_FOR_WATCHING_SPORTS = "goodForWatchingSports";
  @SerializedName(SERIALIZED_NAME_GOOD_FOR_WATCHING_SPORTS)
  private Boolean goodForWatchingSports;

  public static final String SERIALIZED_NAME_GOOGLE_MAPS_URI = "googleMapsUri";
  @SerializedName(SERIALIZED_NAME_GOOGLE_MAPS_URI)
  private String googleMapsUri;

  public static final String SERIALIZED_NAME_ICON_BACKGROUND_COLOR = "iconBackgroundColor";
  @SerializedName(SERIALIZED_NAME_ICON_BACKGROUND_COLOR)
  private String iconBackgroundColor;

  public static final String SERIALIZED_NAME_ICON_MASK_BASE_URI = "iconMaskBaseUri";
  @SerializedName(SERIALIZED_NAME_ICON_MASK_BASE_URI)
  private String iconMaskBaseUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNATIONAL_PHONE_NUMBER = "internationalPhoneNumber";
  @SerializedName(SERIALIZED_NAME_INTERNATIONAL_PHONE_NUMBER)
  private String internationalPhoneNumber;

  public static final String SERIALIZED_NAME_LIVE_MUSIC = "liveMusic";
  @SerializedName(SERIALIZED_NAME_LIVE_MUSIC)
  private Boolean liveMusic;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GoogleTypeLatLng location;

  public static final String SERIALIZED_NAME_MENU_FOR_CHILDREN = "menuForChildren";
  @SerializedName(SERIALIZED_NAME_MENU_FOR_CHILDREN)
  private Boolean menuForChildren;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIONAL_PHONE_NUMBER = "nationalPhoneNumber";
  @SerializedName(SERIALIZED_NAME_NATIONAL_PHONE_NUMBER)
  private String nationalPhoneNumber;

  public static final String SERIALIZED_NAME_OUTDOOR_SEATING = "outdoorSeating";
  @SerializedName(SERIALIZED_NAME_OUTDOOR_SEATING)
  private Boolean outdoorSeating;

  public static final String SERIALIZED_NAME_PARKING_OPTIONS = "parkingOptions";
  @SerializedName(SERIALIZED_NAME_PARKING_OPTIONS)
  private GoogleMapsPlacesV1PlaceParkingOptions parkingOptions;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private GoogleMapsPlacesV1PlacePaymentOptions paymentOptions;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<GoogleMapsPlacesV1Photo> photos = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUS_CODE = "plusCode";
  @SerializedName(SERIALIZED_NAME_PLUS_CODE)
  private GoogleMapsPlacesV1PlacePlusCode plusCode;

  /**
   * Price level of the place.
   */
  @JsonAdapter(PriceLevelEnum.Adapter.class)
  public enum PriceLevelEnum {
    UNSPECIFIED("PRICE_LEVEL_UNSPECIFIED"),
    
    FREE("PRICE_LEVEL_FREE"),
    
    INEXPENSIVE("PRICE_LEVEL_INEXPENSIVE"),
    
    MODERATE("PRICE_LEVEL_MODERATE"),
    
    EXPENSIVE("PRICE_LEVEL_EXPENSIVE"),
    
    VERY_EXPENSIVE("PRICE_LEVEL_VERY_EXPENSIVE");

    private String value;

    PriceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceLevelEnum fromValue(String value) {
      for (PriceLevelEnum b : PriceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICE_LEVEL = "priceLevel";
  @SerializedName(SERIALIZED_NAME_PRICE_LEVEL)
  private PriceLevelEnum priceLevel;

  public static final String SERIALIZED_NAME_PRIMARY_TYPE = "primaryType";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TYPE)
  private String primaryType;

  public static final String SERIALIZED_NAME_PRIMARY_TYPE_DISPLAY_NAME = "primaryTypeDisplayName";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TYPE_DISPLAY_NAME)
  private GoogleTypeLocalizedText primaryTypeDisplayName;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private Double rating;

  public static final String SERIALIZED_NAME_REGULAR_OPENING_HOURS = "regularOpeningHours";
  @SerializedName(SERIALIZED_NAME_REGULAR_OPENING_HOURS)
  private GoogleMapsPlacesV1PlaceOpeningHours regularOpeningHours;

  public static final String SERIALIZED_NAME_REGULAR_SECONDARY_OPENING_HOURS = "regularSecondaryOpeningHours";
  @SerializedName(SERIALIZED_NAME_REGULAR_SECONDARY_OPENING_HOURS)
  private List<GoogleMapsPlacesV1PlaceOpeningHours> regularSecondaryOpeningHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVABLE = "reservable";
  @SerializedName(SERIALIZED_NAME_RESERVABLE)
  private Boolean reservable;

  public static final String SERIALIZED_NAME_RESTROOM = "restroom";
  @SerializedName(SERIALIZED_NAME_RESTROOM)
  private Boolean restroom;

  public static final String SERIALIZED_NAME_REVIEWS = "reviews";
  @SerializedName(SERIALIZED_NAME_REVIEWS)
  private List<GoogleMapsPlacesV1Review> reviews = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVES_BEER = "servesBeer";
  @SerializedName(SERIALIZED_NAME_SERVES_BEER)
  private Boolean servesBeer;

  public static final String SERIALIZED_NAME_SERVES_BREAKFAST = "servesBreakfast";
  @SerializedName(SERIALIZED_NAME_SERVES_BREAKFAST)
  private Boolean servesBreakfast;

  public static final String SERIALIZED_NAME_SERVES_BRUNCH = "servesBrunch";
  @SerializedName(SERIALIZED_NAME_SERVES_BRUNCH)
  private Boolean servesBrunch;

  public static final String SERIALIZED_NAME_SERVES_COCKTAILS = "servesCocktails";
  @SerializedName(SERIALIZED_NAME_SERVES_COCKTAILS)
  private Boolean servesCocktails;

  public static final String SERIALIZED_NAME_SERVES_COFFEE = "servesCoffee";
  @SerializedName(SERIALIZED_NAME_SERVES_COFFEE)
  private Boolean servesCoffee;

  public static final String SERIALIZED_NAME_SERVES_DESSERT = "servesDessert";
  @SerializedName(SERIALIZED_NAME_SERVES_DESSERT)
  private Boolean servesDessert;

  public static final String SERIALIZED_NAME_SERVES_DINNER = "servesDinner";
  @SerializedName(SERIALIZED_NAME_SERVES_DINNER)
  private Boolean servesDinner;

  public static final String SERIALIZED_NAME_SERVES_LUNCH = "servesLunch";
  @SerializedName(SERIALIZED_NAME_SERVES_LUNCH)
  private Boolean servesLunch;

  public static final String SERIALIZED_NAME_SERVES_VEGETARIAN_FOOD = "servesVegetarianFood";
  @SerializedName(SERIALIZED_NAME_SERVES_VEGETARIAN_FOOD)
  private Boolean servesVegetarianFood;

  public static final String SERIALIZED_NAME_SERVES_WINE = "servesWine";
  @SerializedName(SERIALIZED_NAME_SERVES_WINE)
  private Boolean servesWine;

  public static final String SERIALIZED_NAME_SHORT_FORMATTED_ADDRESS = "shortFormattedAddress";
  @SerializedName(SERIALIZED_NAME_SHORT_FORMATTED_ADDRESS)
  private String shortFormattedAddress;

  public static final String SERIALIZED_NAME_SUB_DESTINATIONS = "subDestinations";
  @SerializedName(SERIALIZED_NAME_SUB_DESTINATIONS)
  private List<GoogleMapsPlacesV1PlaceSubDestination> subDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAKEOUT = "takeout";
  @SerializedName(SERIALIZED_NAME_TAKEOUT)
  private Boolean takeout;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_RATING_COUNT = "userRatingCount";
  @SerializedName(SERIALIZED_NAME_USER_RATING_COUNT)
  private Integer userRatingCount;

  public static final String SERIALIZED_NAME_UTC_OFFSET_MINUTES = "utcOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_UTC_OFFSET_MINUTES)
  private Integer utcOffsetMinutes;

  public static final String SERIALIZED_NAME_VIEWPORT = "viewport";
  @SerializedName(SERIALIZED_NAME_VIEWPORT)
  private GoogleGeoTypeViewport viewport;

  public static final String SERIALIZED_NAME_WEBSITE_URI = "websiteUri";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URI)
  private String websiteUri;

  public GoogleMapsPlacesV1Place() {
  }

  public GoogleMapsPlacesV1Place accessibilityOptions(GoogleMapsPlacesV1PlaceAccessibilityOptions accessibilityOptions) {
    this.accessibilityOptions = accessibilityOptions;
    return this;
  }

  /**
   * Get accessibilityOptions
   * @return accessibilityOptions
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlaceAccessibilityOptions getAccessibilityOptions() {
    return accessibilityOptions;
  }

  public void setAccessibilityOptions(GoogleMapsPlacesV1PlaceAccessibilityOptions accessibilityOptions) {
    this.accessibilityOptions = accessibilityOptions;
  }


  public GoogleMapsPlacesV1Place addressComponents(List<GoogleMapsPlacesV1PlaceAddressComponent> addressComponents) {
    this.addressComponents = addressComponents;
    return this;
  }

  public GoogleMapsPlacesV1Place addAddressComponentsItem(GoogleMapsPlacesV1PlaceAddressComponent addressComponentsItem) {
    if (this.addressComponents == null) {
      this.addressComponents = new ArrayList<>();
    }
    this.addressComponents.add(addressComponentsItem);
    return this;
  }

  /**
   * Repeated components for each locality level. Note the following facts about the address_components[] array: - The array of address components may contain more components than the formatted_address. - The array does not necessarily include all the political entities that contain an address, apart from those included in the formatted_address. To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request. - The format of the response is not guaranteed to remain the same between requests. In particular, the number of address_components varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response.
   * @return addressComponents
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceAddressComponent> getAddressComponents() {
    return addressComponents;
  }

  public void setAddressComponents(List<GoogleMapsPlacesV1PlaceAddressComponent> addressComponents) {
    this.addressComponents = addressComponents;
  }


  public GoogleMapsPlacesV1Place adrFormatAddress(String adrFormatAddress) {
    this.adrFormatAddress = adrFormatAddress;
    return this;
  }

  /**
   * The place&#39;s address in adr microformat: http://microformats.org/wiki/adr.
   * @return adrFormatAddress
   */
  @javax.annotation.Nullable
  public String getAdrFormatAddress() {
    return adrFormatAddress;
  }

  public void setAdrFormatAddress(String adrFormatAddress) {
    this.adrFormatAddress = adrFormatAddress;
  }


  public GoogleMapsPlacesV1Place allowsDogs(Boolean allowsDogs) {
    this.allowsDogs = allowsDogs;
    return this;
  }

  /**
   * Place allows dogs.
   * @return allowsDogs
   */
  @javax.annotation.Nullable
  public Boolean getAllowsDogs() {
    return allowsDogs;
  }

  public void setAllowsDogs(Boolean allowsDogs) {
    this.allowsDogs = allowsDogs;
  }


  public GoogleMapsPlacesV1Place attributions(List<GoogleMapsPlacesV1PlaceAttribution> attributions) {
    this.attributions = attributions;
    return this;
  }

  public GoogleMapsPlacesV1Place addAttributionsItem(GoogleMapsPlacesV1PlaceAttribution attributionsItem) {
    if (this.attributions == null) {
      this.attributions = new ArrayList<>();
    }
    this.attributions.add(attributionsItem);
    return this;
  }

  /**
   * A set of data provider that must be shown with this result.
   * @return attributions
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceAttribution> getAttributions() {
    return attributions;
  }

  public void setAttributions(List<GoogleMapsPlacesV1PlaceAttribution> attributions) {
    this.attributions = attributions;
  }


  public GoogleMapsPlacesV1Place businessStatus(BusinessStatusEnum businessStatus) {
    this.businessStatus = businessStatus;
    return this;
  }

  /**
   * The business status for the place.
   * @return businessStatus
   */
  @javax.annotation.Nullable
  public BusinessStatusEnum getBusinessStatus() {
    return businessStatus;
  }

  public void setBusinessStatus(BusinessStatusEnum businessStatus) {
    this.businessStatus = businessStatus;
  }


  public GoogleMapsPlacesV1Place curbsidePickup(Boolean curbsidePickup) {
    this.curbsidePickup = curbsidePickup;
    return this;
  }

  /**
   * Specifies if the business supports curbside pickup.
   * @return curbsidePickup
   */
  @javax.annotation.Nullable
  public Boolean getCurbsidePickup() {
    return curbsidePickup;
  }

  public void setCurbsidePickup(Boolean curbsidePickup) {
    this.curbsidePickup = curbsidePickup;
  }


  public GoogleMapsPlacesV1Place currentOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours currentOpeningHours) {
    this.currentOpeningHours = currentOpeningHours;
    return this;
  }

  /**
   * Get currentOpeningHours
   * @return currentOpeningHours
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlaceOpeningHours getCurrentOpeningHours() {
    return currentOpeningHours;
  }

  public void setCurrentOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours currentOpeningHours) {
    this.currentOpeningHours = currentOpeningHours;
  }


  public GoogleMapsPlacesV1Place currentSecondaryOpeningHours(List<GoogleMapsPlacesV1PlaceOpeningHours> currentSecondaryOpeningHours) {
    this.currentSecondaryOpeningHours = currentSecondaryOpeningHours;
    return this;
  }

  public GoogleMapsPlacesV1Place addCurrentSecondaryOpeningHoursItem(GoogleMapsPlacesV1PlaceOpeningHours currentSecondaryOpeningHoursItem) {
    if (this.currentSecondaryOpeningHours == null) {
      this.currentSecondaryOpeningHours = new ArrayList<>();
    }
    this.currentSecondaryOpeningHours.add(currentSecondaryOpeningHoursItem);
    return this;
  }

  /**
   * Contains an array of entries for the next seven days including information about secondary hours of a business. Secondary hours are different from a business&#39;s main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the special_days subfield of all hours, set for dates that have exceptional hours.
   * @return currentSecondaryOpeningHours
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceOpeningHours> getCurrentSecondaryOpeningHours() {
    return currentSecondaryOpeningHours;
  }

  public void setCurrentSecondaryOpeningHours(List<GoogleMapsPlacesV1PlaceOpeningHours> currentSecondaryOpeningHours) {
    this.currentSecondaryOpeningHours = currentSecondaryOpeningHours;
  }


  public GoogleMapsPlacesV1Place delivery(Boolean delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Specifies if the business supports delivery.
   * @return delivery
   */
  @javax.annotation.Nullable
  public Boolean getDelivery() {
    return delivery;
  }

  public void setDelivery(Boolean delivery) {
    this.delivery = delivery;
  }


  public GoogleMapsPlacesV1Place dineIn(Boolean dineIn) {
    this.dineIn = dineIn;
    return this;
  }

  /**
   * Specifies if the business supports indoor or outdoor seating options.
   * @return dineIn
   */
  @javax.annotation.Nullable
  public Boolean getDineIn() {
    return dineIn;
  }

  public void setDineIn(Boolean dineIn) {
    this.dineIn = dineIn;
  }


  public GoogleMapsPlacesV1Place displayName(GoogleTypeLocalizedText displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public GoogleTypeLocalizedText getDisplayName() {
    return displayName;
  }

  public void setDisplayName(GoogleTypeLocalizedText displayName) {
    this.displayName = displayName;
  }


  public GoogleMapsPlacesV1Place editorialSummary(GoogleTypeLocalizedText editorialSummary) {
    this.editorialSummary = editorialSummary;
    return this;
  }

  /**
   * Get editorialSummary
   * @return editorialSummary
   */
  @javax.annotation.Nullable
  public GoogleTypeLocalizedText getEditorialSummary() {
    return editorialSummary;
  }

  public void setEditorialSummary(GoogleTypeLocalizedText editorialSummary) {
    this.editorialSummary = editorialSummary;
  }


  public GoogleMapsPlacesV1Place evChargeOptions(GoogleMapsPlacesV1EVChargeOptions evChargeOptions) {
    this.evChargeOptions = evChargeOptions;
    return this;
  }

  /**
   * Get evChargeOptions
   * @return evChargeOptions
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1EVChargeOptions getEvChargeOptions() {
    return evChargeOptions;
  }

  public void setEvChargeOptions(GoogleMapsPlacesV1EVChargeOptions evChargeOptions) {
    this.evChargeOptions = evChargeOptions;
  }


  public GoogleMapsPlacesV1Place formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * A full, human-readable address for this place.
   * @return formattedAddress
   */
  @javax.annotation.Nullable
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public GoogleMapsPlacesV1Place fuelOptions(GoogleMapsPlacesV1FuelOptions fuelOptions) {
    this.fuelOptions = fuelOptions;
    return this;
  }

  /**
   * Get fuelOptions
   * @return fuelOptions
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1FuelOptions getFuelOptions() {
    return fuelOptions;
  }

  public void setFuelOptions(GoogleMapsPlacesV1FuelOptions fuelOptions) {
    this.fuelOptions = fuelOptions;
  }


  public GoogleMapsPlacesV1Place goodForChildren(Boolean goodForChildren) {
    this.goodForChildren = goodForChildren;
    return this;
  }

  /**
   * Place is good for children.
   * @return goodForChildren
   */
  @javax.annotation.Nullable
  public Boolean getGoodForChildren() {
    return goodForChildren;
  }

  public void setGoodForChildren(Boolean goodForChildren) {
    this.goodForChildren = goodForChildren;
  }


  public GoogleMapsPlacesV1Place goodForGroups(Boolean goodForGroups) {
    this.goodForGroups = goodForGroups;
    return this;
  }

  /**
   * Place accommodates groups.
   * @return goodForGroups
   */
  @javax.annotation.Nullable
  public Boolean getGoodForGroups() {
    return goodForGroups;
  }

  public void setGoodForGroups(Boolean goodForGroups) {
    this.goodForGroups = goodForGroups;
  }


  public GoogleMapsPlacesV1Place goodForWatchingSports(Boolean goodForWatchingSports) {
    this.goodForWatchingSports = goodForWatchingSports;
    return this;
  }

  /**
   * Place is suitable for watching sports.
   * @return goodForWatchingSports
   */
  @javax.annotation.Nullable
  public Boolean getGoodForWatchingSports() {
    return goodForWatchingSports;
  }

  public void setGoodForWatchingSports(Boolean goodForWatchingSports) {
    this.goodForWatchingSports = goodForWatchingSports;
  }


  public GoogleMapsPlacesV1Place googleMapsUri(String googleMapsUri) {
    this.googleMapsUri = googleMapsUri;
    return this;
  }

  /**
   * A URL providing more information about this place.
   * @return googleMapsUri
   */
  @javax.annotation.Nullable
  public String getGoogleMapsUri() {
    return googleMapsUri;
  }

  public void setGoogleMapsUri(String googleMapsUri) {
    this.googleMapsUri = googleMapsUri;
  }


  public GoogleMapsPlacesV1Place iconBackgroundColor(String iconBackgroundColor) {
    this.iconBackgroundColor = iconBackgroundColor;
    return this;
  }

  /**
   * Background color for icon_mask in hex format, e.g. #909CE1.
   * @return iconBackgroundColor
   */
  @javax.annotation.Nullable
  public String getIconBackgroundColor() {
    return iconBackgroundColor;
  }

  public void setIconBackgroundColor(String iconBackgroundColor) {
    this.iconBackgroundColor = iconBackgroundColor;
  }


  public GoogleMapsPlacesV1Place iconMaskBaseUri(String iconMaskBaseUri) {
    this.iconMaskBaseUri = iconMaskBaseUri;
    return this;
  }

  /**
   * A truncated URL to an icon mask. User can access different icon type by appending type suffix to the end (eg, \&quot;.svg\&quot; or \&quot;.png\&quot;).
   * @return iconMaskBaseUri
   */
  @javax.annotation.Nullable
  public String getIconMaskBaseUri() {
    return iconMaskBaseUri;
  }

  public void setIconMaskBaseUri(String iconMaskBaseUri) {
    this.iconMaskBaseUri = iconMaskBaseUri;
  }


  public GoogleMapsPlacesV1Place id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of a place.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleMapsPlacesV1Place internationalPhoneNumber(String internationalPhoneNumber) {
    this.internationalPhoneNumber = internationalPhoneNumber;
    return this;
  }

  /**
   * A human-readable phone number for the place, in international format.
   * @return internationalPhoneNumber
   */
  @javax.annotation.Nullable
  public String getInternationalPhoneNumber() {
    return internationalPhoneNumber;
  }

  public void setInternationalPhoneNumber(String internationalPhoneNumber) {
    this.internationalPhoneNumber = internationalPhoneNumber;
  }


  public GoogleMapsPlacesV1Place liveMusic(Boolean liveMusic) {
    this.liveMusic = liveMusic;
    return this;
  }

  /**
   * Place provides live music.
   * @return liveMusic
   */
  @javax.annotation.Nullable
  public Boolean getLiveMusic() {
    return liveMusic;
  }

  public void setLiveMusic(Boolean liveMusic) {
    this.liveMusic = liveMusic;
  }


  public GoogleMapsPlacesV1Place location(GoogleTypeLatLng location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GoogleTypeLatLng getLocation() {
    return location;
  }

  public void setLocation(GoogleTypeLatLng location) {
    this.location = location;
  }


  public GoogleMapsPlacesV1Place menuForChildren(Boolean menuForChildren) {
    this.menuForChildren = menuForChildren;
    return this;
  }

  /**
   * Place has a children&#39;s menu.
   * @return menuForChildren
   */
  @javax.annotation.Nullable
  public Boolean getMenuForChildren() {
    return menuForChildren;
  }

  public void setMenuForChildren(Boolean menuForChildren) {
    this.menuForChildren = menuForChildren;
  }


  public GoogleMapsPlacesV1Place name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This Place&#39;s resource name, in &#x60;places/{place_id}&#x60; format. Can be used to look up the Place.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleMapsPlacesV1Place nationalPhoneNumber(String nationalPhoneNumber) {
    this.nationalPhoneNumber = nationalPhoneNumber;
    return this;
  }

  /**
   * A human-readable phone number for the place, in national format.
   * @return nationalPhoneNumber
   */
  @javax.annotation.Nullable
  public String getNationalPhoneNumber() {
    return nationalPhoneNumber;
  }

  public void setNationalPhoneNumber(String nationalPhoneNumber) {
    this.nationalPhoneNumber = nationalPhoneNumber;
  }


  public GoogleMapsPlacesV1Place outdoorSeating(Boolean outdoorSeating) {
    this.outdoorSeating = outdoorSeating;
    return this;
  }

  /**
   * Place provides outdoor seating.
   * @return outdoorSeating
   */
  @javax.annotation.Nullable
  public Boolean getOutdoorSeating() {
    return outdoorSeating;
  }

  public void setOutdoorSeating(Boolean outdoorSeating) {
    this.outdoorSeating = outdoorSeating;
  }


  public GoogleMapsPlacesV1Place parkingOptions(GoogleMapsPlacesV1PlaceParkingOptions parkingOptions) {
    this.parkingOptions = parkingOptions;
    return this;
  }

  /**
   * Get parkingOptions
   * @return parkingOptions
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlaceParkingOptions getParkingOptions() {
    return parkingOptions;
  }

  public void setParkingOptions(GoogleMapsPlacesV1PlaceParkingOptions parkingOptions) {
    this.parkingOptions = parkingOptions;
  }


  public GoogleMapsPlacesV1Place paymentOptions(GoogleMapsPlacesV1PlacePaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  /**
   * Get paymentOptions
   * @return paymentOptions
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlacePaymentOptions getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(GoogleMapsPlacesV1PlacePaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public GoogleMapsPlacesV1Place photos(List<GoogleMapsPlacesV1Photo> photos) {
    this.photos = photos;
    return this;
  }

  public GoogleMapsPlacesV1Place addPhotosItem(GoogleMapsPlacesV1Photo photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * Information (including references) about photos of this place. A maximum of 10 photos can be returned.
   * @return photos
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1Photo> getPhotos() {
    return photos;
  }

  public void setPhotos(List<GoogleMapsPlacesV1Photo> photos) {
    this.photos = photos;
  }


  public GoogleMapsPlacesV1Place plusCode(GoogleMapsPlacesV1PlacePlusCode plusCode) {
    this.plusCode = plusCode;
    return this;
  }

  /**
   * Get plusCode
   * @return plusCode
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlacePlusCode getPlusCode() {
    return plusCode;
  }

  public void setPlusCode(GoogleMapsPlacesV1PlacePlusCode plusCode) {
    this.plusCode = plusCode;
  }


  public GoogleMapsPlacesV1Place priceLevel(PriceLevelEnum priceLevel) {
    this.priceLevel = priceLevel;
    return this;
  }

  /**
   * Price level of the place.
   * @return priceLevel
   */
  @javax.annotation.Nullable
  public PriceLevelEnum getPriceLevel() {
    return priceLevel;
  }

  public void setPriceLevel(PriceLevelEnum priceLevel) {
    this.priceLevel = priceLevel;
  }


  public GoogleMapsPlacesV1Place primaryType(String primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  /**
   * The primary type of the given result. This type must one of the Places API supported types. For example, \&quot;restaurant\&quot;, \&quot;cafe\&quot;, \&quot;airport\&quot;, etc. A place can only have a single primary type. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
   * @return primaryType
   */
  @javax.annotation.Nullable
  public String getPrimaryType() {
    return primaryType;
  }

  public void setPrimaryType(String primaryType) {
    this.primaryType = primaryType;
  }


  public GoogleMapsPlacesV1Place primaryTypeDisplayName(GoogleTypeLocalizedText primaryTypeDisplayName) {
    this.primaryTypeDisplayName = primaryTypeDisplayName;
    return this;
  }

  /**
   * Get primaryTypeDisplayName
   * @return primaryTypeDisplayName
   */
  @javax.annotation.Nullable
  public GoogleTypeLocalizedText getPrimaryTypeDisplayName() {
    return primaryTypeDisplayName;
  }

  public void setPrimaryTypeDisplayName(GoogleTypeLocalizedText primaryTypeDisplayName) {
    this.primaryTypeDisplayName = primaryTypeDisplayName;
  }


  public GoogleMapsPlacesV1Place rating(Double rating) {
    this.rating = rating;
    return this;
  }

  /**
   * A rating between 1.0 and 5.0, based on user reviews of this place.
   * @return rating
   */
  @javax.annotation.Nullable
  public Double getRating() {
    return rating;
  }

  public void setRating(Double rating) {
    this.rating = rating;
  }


  public GoogleMapsPlacesV1Place regularOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours regularOpeningHours) {
    this.regularOpeningHours = regularOpeningHours;
    return this;
  }

  /**
   * Get regularOpeningHours
   * @return regularOpeningHours
   */
  @javax.annotation.Nullable
  public GoogleMapsPlacesV1PlaceOpeningHours getRegularOpeningHours() {
    return regularOpeningHours;
  }

  public void setRegularOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours regularOpeningHours) {
    this.regularOpeningHours = regularOpeningHours;
  }


  public GoogleMapsPlacesV1Place regularSecondaryOpeningHours(List<GoogleMapsPlacesV1PlaceOpeningHours> regularSecondaryOpeningHours) {
    this.regularSecondaryOpeningHours = regularSecondaryOpeningHours;
    return this;
  }

  public GoogleMapsPlacesV1Place addRegularSecondaryOpeningHoursItem(GoogleMapsPlacesV1PlaceOpeningHours regularSecondaryOpeningHoursItem) {
    if (this.regularSecondaryOpeningHours == null) {
      this.regularSecondaryOpeningHours = new ArrayList<>();
    }
    this.regularSecondaryOpeningHours.add(regularSecondaryOpeningHoursItem);
    return this;
  }

  /**
   * Contains an array of entries for information about regular secondary hours of a business. Secondary hours are different from a business&#39;s main hours. For example, a restaurant can specify drive through hours or delivery hours as its secondary hours. This field populates the type subfield, which draws from a predefined list of opening hours types (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
   * @return regularSecondaryOpeningHours
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceOpeningHours> getRegularSecondaryOpeningHours() {
    return regularSecondaryOpeningHours;
  }

  public void setRegularSecondaryOpeningHours(List<GoogleMapsPlacesV1PlaceOpeningHours> regularSecondaryOpeningHours) {
    this.regularSecondaryOpeningHours = regularSecondaryOpeningHours;
  }


  public GoogleMapsPlacesV1Place reservable(Boolean reservable) {
    this.reservable = reservable;
    return this;
  }

  /**
   * Specifies if the place supports reservations.
   * @return reservable
   */
  @javax.annotation.Nullable
  public Boolean getReservable() {
    return reservable;
  }

  public void setReservable(Boolean reservable) {
    this.reservable = reservable;
  }


  public GoogleMapsPlacesV1Place restroom(Boolean restroom) {
    this.restroom = restroom;
    return this;
  }

  /**
   * Place has restroom.
   * @return restroom
   */
  @javax.annotation.Nullable
  public Boolean getRestroom() {
    return restroom;
  }

  public void setRestroom(Boolean restroom) {
    this.restroom = restroom;
  }


  public GoogleMapsPlacesV1Place reviews(List<GoogleMapsPlacesV1Review> reviews) {
    this.reviews = reviews;
    return this;
  }

  public GoogleMapsPlacesV1Place addReviewsItem(GoogleMapsPlacesV1Review reviewsItem) {
    if (this.reviews == null) {
      this.reviews = new ArrayList<>();
    }
    this.reviews.add(reviewsItem);
    return this;
  }

  /**
   * List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.
   * @return reviews
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1Review> getReviews() {
    return reviews;
  }

  public void setReviews(List<GoogleMapsPlacesV1Review> reviews) {
    this.reviews = reviews;
  }


  public GoogleMapsPlacesV1Place servesBeer(Boolean servesBeer) {
    this.servesBeer = servesBeer;
    return this;
  }

  /**
   * Specifies if the place serves beer.
   * @return servesBeer
   */
  @javax.annotation.Nullable
  public Boolean getServesBeer() {
    return servesBeer;
  }

  public void setServesBeer(Boolean servesBeer) {
    this.servesBeer = servesBeer;
  }


  public GoogleMapsPlacesV1Place servesBreakfast(Boolean servesBreakfast) {
    this.servesBreakfast = servesBreakfast;
    return this;
  }

  /**
   * Specifies if the place serves breakfast.
   * @return servesBreakfast
   */
  @javax.annotation.Nullable
  public Boolean getServesBreakfast() {
    return servesBreakfast;
  }

  public void setServesBreakfast(Boolean servesBreakfast) {
    this.servesBreakfast = servesBreakfast;
  }


  public GoogleMapsPlacesV1Place servesBrunch(Boolean servesBrunch) {
    this.servesBrunch = servesBrunch;
    return this;
  }

  /**
   * Specifies if the place serves brunch.
   * @return servesBrunch
   */
  @javax.annotation.Nullable
  public Boolean getServesBrunch() {
    return servesBrunch;
  }

  public void setServesBrunch(Boolean servesBrunch) {
    this.servesBrunch = servesBrunch;
  }


  public GoogleMapsPlacesV1Place servesCocktails(Boolean servesCocktails) {
    this.servesCocktails = servesCocktails;
    return this;
  }

  /**
   * Place serves cocktails.
   * @return servesCocktails
   */
  @javax.annotation.Nullable
  public Boolean getServesCocktails() {
    return servesCocktails;
  }

  public void setServesCocktails(Boolean servesCocktails) {
    this.servesCocktails = servesCocktails;
  }


  public GoogleMapsPlacesV1Place servesCoffee(Boolean servesCoffee) {
    this.servesCoffee = servesCoffee;
    return this;
  }

  /**
   * Place serves coffee.
   * @return servesCoffee
   */
  @javax.annotation.Nullable
  public Boolean getServesCoffee() {
    return servesCoffee;
  }

  public void setServesCoffee(Boolean servesCoffee) {
    this.servesCoffee = servesCoffee;
  }


  public GoogleMapsPlacesV1Place servesDessert(Boolean servesDessert) {
    this.servesDessert = servesDessert;
    return this;
  }

  /**
   * Place serves dessert.
   * @return servesDessert
   */
  @javax.annotation.Nullable
  public Boolean getServesDessert() {
    return servesDessert;
  }

  public void setServesDessert(Boolean servesDessert) {
    this.servesDessert = servesDessert;
  }


  public GoogleMapsPlacesV1Place servesDinner(Boolean servesDinner) {
    this.servesDinner = servesDinner;
    return this;
  }

  /**
   * Specifies if the place serves dinner.
   * @return servesDinner
   */
  @javax.annotation.Nullable
  public Boolean getServesDinner() {
    return servesDinner;
  }

  public void setServesDinner(Boolean servesDinner) {
    this.servesDinner = servesDinner;
  }


  public GoogleMapsPlacesV1Place servesLunch(Boolean servesLunch) {
    this.servesLunch = servesLunch;
    return this;
  }

  /**
   * Specifies if the place serves lunch.
   * @return servesLunch
   */
  @javax.annotation.Nullable
  public Boolean getServesLunch() {
    return servesLunch;
  }

  public void setServesLunch(Boolean servesLunch) {
    this.servesLunch = servesLunch;
  }


  public GoogleMapsPlacesV1Place servesVegetarianFood(Boolean servesVegetarianFood) {
    this.servesVegetarianFood = servesVegetarianFood;
    return this;
  }

  /**
   * Specifies if the place serves vegetarian food.
   * @return servesVegetarianFood
   */
  @javax.annotation.Nullable
  public Boolean getServesVegetarianFood() {
    return servesVegetarianFood;
  }

  public void setServesVegetarianFood(Boolean servesVegetarianFood) {
    this.servesVegetarianFood = servesVegetarianFood;
  }


  public GoogleMapsPlacesV1Place servesWine(Boolean servesWine) {
    this.servesWine = servesWine;
    return this;
  }

  /**
   * Specifies if the place serves wine.
   * @return servesWine
   */
  @javax.annotation.Nullable
  public Boolean getServesWine() {
    return servesWine;
  }

  public void setServesWine(Boolean servesWine) {
    this.servesWine = servesWine;
  }


  public GoogleMapsPlacesV1Place shortFormattedAddress(String shortFormattedAddress) {
    this.shortFormattedAddress = shortFormattedAddress;
    return this;
  }

  /**
   * A short, human-readable address for this place.
   * @return shortFormattedAddress
   */
  @javax.annotation.Nullable
  public String getShortFormattedAddress() {
    return shortFormattedAddress;
  }

  public void setShortFormattedAddress(String shortFormattedAddress) {
    this.shortFormattedAddress = shortFormattedAddress;
  }


  public GoogleMapsPlacesV1Place subDestinations(List<GoogleMapsPlacesV1PlaceSubDestination> subDestinations) {
    this.subDestinations = subDestinations;
    return this;
  }

  public GoogleMapsPlacesV1Place addSubDestinationsItem(GoogleMapsPlacesV1PlaceSubDestination subDestinationsItem) {
    if (this.subDestinations == null) {
      this.subDestinations = new ArrayList<>();
    }
    this.subDestinations.add(subDestinationsItem);
    return this;
  }

  /**
   * A list of sub destinations related to the place.
   * @return subDestinations
   */
  @javax.annotation.Nullable
  public List<GoogleMapsPlacesV1PlaceSubDestination> getSubDestinations() {
    return subDestinations;
  }

  public void setSubDestinations(List<GoogleMapsPlacesV1PlaceSubDestination> subDestinations) {
    this.subDestinations = subDestinations;
  }


  public GoogleMapsPlacesV1Place takeout(Boolean takeout) {
    this.takeout = takeout;
    return this;
  }

  /**
   * Specifies if the business supports takeout.
   * @return takeout
   */
  @javax.annotation.Nullable
  public Boolean getTakeout() {
    return takeout;
  }

  public void setTakeout(Boolean takeout) {
    this.takeout = takeout;
  }


  public GoogleMapsPlacesV1Place types(List<String> types) {
    this.types = types;
    return this;
  }

  public GoogleMapsPlacesV1Place addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * A set of type tags for this result. For example, \&quot;political\&quot; and \&quot;locality\&quot;. For the complete list of possible values, see Table A and Table B at https://developers.google.com/maps/documentation/places/web-service/place-types
   * @return types
   */
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }


  public GoogleMapsPlacesV1Place userRatingCount(Integer userRatingCount) {
    this.userRatingCount = userRatingCount;
    return this;
  }

  /**
   * The total number of reviews (with or without text) for this place.
   * @return userRatingCount
   */
  @javax.annotation.Nullable
  public Integer getUserRatingCount() {
    return userRatingCount;
  }

  public void setUserRatingCount(Integer userRatingCount) {
    this.userRatingCount = userRatingCount;
  }


  public GoogleMapsPlacesV1Place utcOffsetMinutes(Integer utcOffsetMinutes) {
    this.utcOffsetMinutes = utcOffsetMinutes;
    return this;
  }

  /**
   * Number of minutes this place&#39;s timezone is currently offset from UTC. This is expressed in minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15 minutes.
   * @return utcOffsetMinutes
   */
  @javax.annotation.Nullable
  public Integer getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }

  public void setUtcOffsetMinutes(Integer utcOffsetMinutes) {
    this.utcOffsetMinutes = utcOffsetMinutes;
  }


  public GoogleMapsPlacesV1Place viewport(GoogleGeoTypeViewport viewport) {
    this.viewport = viewport;
    return this;
  }

  /**
   * Get viewport
   * @return viewport
   */
  @javax.annotation.Nullable
  public GoogleGeoTypeViewport getViewport() {
    return viewport;
  }

  public void setViewport(GoogleGeoTypeViewport viewport) {
    this.viewport = viewport;
  }


  public GoogleMapsPlacesV1Place websiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
    return this;
  }

  /**
   * The authoritative website for this place, e.g. a business&#39; homepage. Note that for places that are part of a chain (e.g. an IKEA store), this will usually be the website for the individual store, not the overall chain.
   * @return websiteUri
   */
  @javax.annotation.Nullable
  public String getWebsiteUri() {
    return websiteUri;
  }

  public void setWebsiteUri(String websiteUri) {
    this.websiteUri = websiteUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1Place googleMapsPlacesV1Place = (GoogleMapsPlacesV1Place) o;
    return Objects.equals(this.accessibilityOptions, googleMapsPlacesV1Place.accessibilityOptions) &&
        Objects.equals(this.addressComponents, googleMapsPlacesV1Place.addressComponents) &&
        Objects.equals(this.adrFormatAddress, googleMapsPlacesV1Place.adrFormatAddress) &&
        Objects.equals(this.allowsDogs, googleMapsPlacesV1Place.allowsDogs) &&
        Objects.equals(this.attributions, googleMapsPlacesV1Place.attributions) &&
        Objects.equals(this.businessStatus, googleMapsPlacesV1Place.businessStatus) &&
        Objects.equals(this.curbsidePickup, googleMapsPlacesV1Place.curbsidePickup) &&
        Objects.equals(this.currentOpeningHours, googleMapsPlacesV1Place.currentOpeningHours) &&
        Objects.equals(this.currentSecondaryOpeningHours, googleMapsPlacesV1Place.currentSecondaryOpeningHours) &&
        Objects.equals(this.delivery, googleMapsPlacesV1Place.delivery) &&
        Objects.equals(this.dineIn, googleMapsPlacesV1Place.dineIn) &&
        Objects.equals(this.displayName, googleMapsPlacesV1Place.displayName) &&
        Objects.equals(this.editorialSummary, googleMapsPlacesV1Place.editorialSummary) &&
        Objects.equals(this.evChargeOptions, googleMapsPlacesV1Place.evChargeOptions) &&
        Objects.equals(this.formattedAddress, googleMapsPlacesV1Place.formattedAddress) &&
        Objects.equals(this.fuelOptions, googleMapsPlacesV1Place.fuelOptions) &&
        Objects.equals(this.goodForChildren, googleMapsPlacesV1Place.goodForChildren) &&
        Objects.equals(this.goodForGroups, googleMapsPlacesV1Place.goodForGroups) &&
        Objects.equals(this.goodForWatchingSports, googleMapsPlacesV1Place.goodForWatchingSports) &&
        Objects.equals(this.googleMapsUri, googleMapsPlacesV1Place.googleMapsUri) &&
        Objects.equals(this.iconBackgroundColor, googleMapsPlacesV1Place.iconBackgroundColor) &&
        Objects.equals(this.iconMaskBaseUri, googleMapsPlacesV1Place.iconMaskBaseUri) &&
        Objects.equals(this.id, googleMapsPlacesV1Place.id) &&
        Objects.equals(this.internationalPhoneNumber, googleMapsPlacesV1Place.internationalPhoneNumber) &&
        Objects.equals(this.liveMusic, googleMapsPlacesV1Place.liveMusic) &&
        Objects.equals(this.location, googleMapsPlacesV1Place.location) &&
        Objects.equals(this.menuForChildren, googleMapsPlacesV1Place.menuForChildren) &&
        Objects.equals(this.name, googleMapsPlacesV1Place.name) &&
        Objects.equals(this.nationalPhoneNumber, googleMapsPlacesV1Place.nationalPhoneNumber) &&
        Objects.equals(this.outdoorSeating, googleMapsPlacesV1Place.outdoorSeating) &&
        Objects.equals(this.parkingOptions, googleMapsPlacesV1Place.parkingOptions) &&
        Objects.equals(this.paymentOptions, googleMapsPlacesV1Place.paymentOptions) &&
        Objects.equals(this.photos, googleMapsPlacesV1Place.photos) &&
        Objects.equals(this.plusCode, googleMapsPlacesV1Place.plusCode) &&
        Objects.equals(this.priceLevel, googleMapsPlacesV1Place.priceLevel) &&
        Objects.equals(this.primaryType, googleMapsPlacesV1Place.primaryType) &&
        Objects.equals(this.primaryTypeDisplayName, googleMapsPlacesV1Place.primaryTypeDisplayName) &&
        Objects.equals(this.rating, googleMapsPlacesV1Place.rating) &&
        Objects.equals(this.regularOpeningHours, googleMapsPlacesV1Place.regularOpeningHours) &&
        Objects.equals(this.regularSecondaryOpeningHours, googleMapsPlacesV1Place.regularSecondaryOpeningHours) &&
        Objects.equals(this.reservable, googleMapsPlacesV1Place.reservable) &&
        Objects.equals(this.restroom, googleMapsPlacesV1Place.restroom) &&
        Objects.equals(this.reviews, googleMapsPlacesV1Place.reviews) &&
        Objects.equals(this.servesBeer, googleMapsPlacesV1Place.servesBeer) &&
        Objects.equals(this.servesBreakfast, googleMapsPlacesV1Place.servesBreakfast) &&
        Objects.equals(this.servesBrunch, googleMapsPlacesV1Place.servesBrunch) &&
        Objects.equals(this.servesCocktails, googleMapsPlacesV1Place.servesCocktails) &&
        Objects.equals(this.servesCoffee, googleMapsPlacesV1Place.servesCoffee) &&
        Objects.equals(this.servesDessert, googleMapsPlacesV1Place.servesDessert) &&
        Objects.equals(this.servesDinner, googleMapsPlacesV1Place.servesDinner) &&
        Objects.equals(this.servesLunch, googleMapsPlacesV1Place.servesLunch) &&
        Objects.equals(this.servesVegetarianFood, googleMapsPlacesV1Place.servesVegetarianFood) &&
        Objects.equals(this.servesWine, googleMapsPlacesV1Place.servesWine) &&
        Objects.equals(this.shortFormattedAddress, googleMapsPlacesV1Place.shortFormattedAddress) &&
        Objects.equals(this.subDestinations, googleMapsPlacesV1Place.subDestinations) &&
        Objects.equals(this.takeout, googleMapsPlacesV1Place.takeout) &&
        Objects.equals(this.types, googleMapsPlacesV1Place.types) &&
        Objects.equals(this.userRatingCount, googleMapsPlacesV1Place.userRatingCount) &&
        Objects.equals(this.utcOffsetMinutes, googleMapsPlacesV1Place.utcOffsetMinutes) &&
        Objects.equals(this.viewport, googleMapsPlacesV1Place.viewport) &&
        Objects.equals(this.websiteUri, googleMapsPlacesV1Place.websiteUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessibilityOptions, addressComponents, adrFormatAddress, allowsDogs, attributions, businessStatus, curbsidePickup, currentOpeningHours, currentSecondaryOpeningHours, delivery, dineIn, displayName, editorialSummary, evChargeOptions, formattedAddress, fuelOptions, goodForChildren, goodForGroups, goodForWatchingSports, googleMapsUri, iconBackgroundColor, iconMaskBaseUri, id, internationalPhoneNumber, liveMusic, location, menuForChildren, name, nationalPhoneNumber, outdoorSeating, parkingOptions, paymentOptions, photos, plusCode, priceLevel, primaryType, primaryTypeDisplayName, rating, regularOpeningHours, regularSecondaryOpeningHours, reservable, restroom, reviews, servesBeer, servesBreakfast, servesBrunch, servesCocktails, servesCoffee, servesDessert, servesDinner, servesLunch, servesVegetarianFood, servesWine, shortFormattedAddress, subDestinations, takeout, types, userRatingCount, utcOffsetMinutes, viewport, websiteUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1Place {\n");
    sb.append("    accessibilityOptions: ").append(toIndentedString(accessibilityOptions)).append("\n");
    sb.append("    addressComponents: ").append(toIndentedString(addressComponents)).append("\n");
    sb.append("    adrFormatAddress: ").append(toIndentedString(adrFormatAddress)).append("\n");
    sb.append("    allowsDogs: ").append(toIndentedString(allowsDogs)).append("\n");
    sb.append("    attributions: ").append(toIndentedString(attributions)).append("\n");
    sb.append("    businessStatus: ").append(toIndentedString(businessStatus)).append("\n");
    sb.append("    curbsidePickup: ").append(toIndentedString(curbsidePickup)).append("\n");
    sb.append("    currentOpeningHours: ").append(toIndentedString(currentOpeningHours)).append("\n");
    sb.append("    currentSecondaryOpeningHours: ").append(toIndentedString(currentSecondaryOpeningHours)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    dineIn: ").append(toIndentedString(dineIn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    editorialSummary: ").append(toIndentedString(editorialSummary)).append("\n");
    sb.append("    evChargeOptions: ").append(toIndentedString(evChargeOptions)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    fuelOptions: ").append(toIndentedString(fuelOptions)).append("\n");
    sb.append("    goodForChildren: ").append(toIndentedString(goodForChildren)).append("\n");
    sb.append("    goodForGroups: ").append(toIndentedString(goodForGroups)).append("\n");
    sb.append("    goodForWatchingSports: ").append(toIndentedString(goodForWatchingSports)).append("\n");
    sb.append("    googleMapsUri: ").append(toIndentedString(googleMapsUri)).append("\n");
    sb.append("    iconBackgroundColor: ").append(toIndentedString(iconBackgroundColor)).append("\n");
    sb.append("    iconMaskBaseUri: ").append(toIndentedString(iconMaskBaseUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internationalPhoneNumber: ").append(toIndentedString(internationalPhoneNumber)).append("\n");
    sb.append("    liveMusic: ").append(toIndentedString(liveMusic)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    menuForChildren: ").append(toIndentedString(menuForChildren)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nationalPhoneNumber: ").append(toIndentedString(nationalPhoneNumber)).append("\n");
    sb.append("    outdoorSeating: ").append(toIndentedString(outdoorSeating)).append("\n");
    sb.append("    parkingOptions: ").append(toIndentedString(parkingOptions)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    plusCode: ").append(toIndentedString(plusCode)).append("\n");
    sb.append("    priceLevel: ").append(toIndentedString(priceLevel)).append("\n");
    sb.append("    primaryType: ").append(toIndentedString(primaryType)).append("\n");
    sb.append("    primaryTypeDisplayName: ").append(toIndentedString(primaryTypeDisplayName)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    regularOpeningHours: ").append(toIndentedString(regularOpeningHours)).append("\n");
    sb.append("    regularSecondaryOpeningHours: ").append(toIndentedString(regularSecondaryOpeningHours)).append("\n");
    sb.append("    reservable: ").append(toIndentedString(reservable)).append("\n");
    sb.append("    restroom: ").append(toIndentedString(restroom)).append("\n");
    sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
    sb.append("    servesBeer: ").append(toIndentedString(servesBeer)).append("\n");
    sb.append("    servesBreakfast: ").append(toIndentedString(servesBreakfast)).append("\n");
    sb.append("    servesBrunch: ").append(toIndentedString(servesBrunch)).append("\n");
    sb.append("    servesCocktails: ").append(toIndentedString(servesCocktails)).append("\n");
    sb.append("    servesCoffee: ").append(toIndentedString(servesCoffee)).append("\n");
    sb.append("    servesDessert: ").append(toIndentedString(servesDessert)).append("\n");
    sb.append("    servesDinner: ").append(toIndentedString(servesDinner)).append("\n");
    sb.append("    servesLunch: ").append(toIndentedString(servesLunch)).append("\n");
    sb.append("    servesVegetarianFood: ").append(toIndentedString(servesVegetarianFood)).append("\n");
    sb.append("    servesWine: ").append(toIndentedString(servesWine)).append("\n");
    sb.append("    shortFormattedAddress: ").append(toIndentedString(shortFormattedAddress)).append("\n");
    sb.append("    subDestinations: ").append(toIndentedString(subDestinations)).append("\n");
    sb.append("    takeout: ").append(toIndentedString(takeout)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    userRatingCount: ").append(toIndentedString(userRatingCount)).append("\n");
    sb.append("    utcOffsetMinutes: ").append(toIndentedString(utcOffsetMinutes)).append("\n");
    sb.append("    viewport: ").append(toIndentedString(viewport)).append("\n");
    sb.append("    websiteUri: ").append(toIndentedString(websiteUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessibilityOptions");
    openapiFields.add("addressComponents");
    openapiFields.add("adrFormatAddress");
    openapiFields.add("allowsDogs");
    openapiFields.add("attributions");
    openapiFields.add("businessStatus");
    openapiFields.add("curbsidePickup");
    openapiFields.add("currentOpeningHours");
    openapiFields.add("currentSecondaryOpeningHours");
    openapiFields.add("delivery");
    openapiFields.add("dineIn");
    openapiFields.add("displayName");
    openapiFields.add("editorialSummary");
    openapiFields.add("evChargeOptions");
    openapiFields.add("formattedAddress");
    openapiFields.add("fuelOptions");
    openapiFields.add("goodForChildren");
    openapiFields.add("goodForGroups");
    openapiFields.add("goodForWatchingSports");
    openapiFields.add("googleMapsUri");
    openapiFields.add("iconBackgroundColor");
    openapiFields.add("iconMaskBaseUri");
    openapiFields.add("id");
    openapiFields.add("internationalPhoneNumber");
    openapiFields.add("liveMusic");
    openapiFields.add("location");
    openapiFields.add("menuForChildren");
    openapiFields.add("name");
    openapiFields.add("nationalPhoneNumber");
    openapiFields.add("outdoorSeating");
    openapiFields.add("parkingOptions");
    openapiFields.add("paymentOptions");
    openapiFields.add("photos");
    openapiFields.add("plusCode");
    openapiFields.add("priceLevel");
    openapiFields.add("primaryType");
    openapiFields.add("primaryTypeDisplayName");
    openapiFields.add("rating");
    openapiFields.add("regularOpeningHours");
    openapiFields.add("regularSecondaryOpeningHours");
    openapiFields.add("reservable");
    openapiFields.add("restroom");
    openapiFields.add("reviews");
    openapiFields.add("servesBeer");
    openapiFields.add("servesBreakfast");
    openapiFields.add("servesBrunch");
    openapiFields.add("servesCocktails");
    openapiFields.add("servesCoffee");
    openapiFields.add("servesDessert");
    openapiFields.add("servesDinner");
    openapiFields.add("servesLunch");
    openapiFields.add("servesVegetarianFood");
    openapiFields.add("servesWine");
    openapiFields.add("shortFormattedAddress");
    openapiFields.add("subDestinations");
    openapiFields.add("takeout");
    openapiFields.add("types");
    openapiFields.add("userRatingCount");
    openapiFields.add("utcOffsetMinutes");
    openapiFields.add("viewport");
    openapiFields.add("websiteUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1Place
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1Place.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1Place is not found in the empty JSON string", GoogleMapsPlacesV1Place.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1Place.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1Place` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessibilityOptions`
      if (jsonObj.get("accessibilityOptions") != null && !jsonObj.get("accessibilityOptions").isJsonNull()) {
        GoogleMapsPlacesV1PlaceAccessibilityOptions.validateJsonElement(jsonObj.get("accessibilityOptions"));
      }
      if (jsonObj.get("addressComponents") != null && !jsonObj.get("addressComponents").isJsonNull()) {
        JsonArray jsonArrayaddressComponents = jsonObj.getAsJsonArray("addressComponents");
        if (jsonArrayaddressComponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addressComponents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addressComponents` to be an array in the JSON string but got `%s`", jsonObj.get("addressComponents").toString()));
          }

          // validate the optional field `addressComponents` (array)
          for (int i = 0; i < jsonArrayaddressComponents.size(); i++) {
            GoogleMapsPlacesV1PlaceAddressComponent.validateJsonElement(jsonArrayaddressComponents.get(i));
          };
        }
      }
      if ((jsonObj.get("adrFormatAddress") != null && !jsonObj.get("adrFormatAddress").isJsonNull()) && !jsonObj.get("adrFormatAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adrFormatAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adrFormatAddress").toString()));
      }
      if (jsonObj.get("attributions") != null && !jsonObj.get("attributions").isJsonNull()) {
        JsonArray jsonArrayattributions = jsonObj.getAsJsonArray("attributions");
        if (jsonArrayattributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributions` to be an array in the JSON string but got `%s`", jsonObj.get("attributions").toString()));
          }

          // validate the optional field `attributions` (array)
          for (int i = 0; i < jsonArrayattributions.size(); i++) {
            GoogleMapsPlacesV1PlaceAttribution.validateJsonElement(jsonArrayattributions.get(i));
          };
        }
      }
      if ((jsonObj.get("businessStatus") != null && !jsonObj.get("businessStatus").isJsonNull()) && !jsonObj.get("businessStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessStatus").toString()));
      }
      // validate the optional field `businessStatus`
      if (jsonObj.get("businessStatus") != null && !jsonObj.get("businessStatus").isJsonNull()) {
        BusinessStatusEnum.validateJsonElement(jsonObj.get("businessStatus"));
      }
      // validate the optional field `currentOpeningHours`
      if (jsonObj.get("currentOpeningHours") != null && !jsonObj.get("currentOpeningHours").isJsonNull()) {
        GoogleMapsPlacesV1PlaceOpeningHours.validateJsonElement(jsonObj.get("currentOpeningHours"));
      }
      if (jsonObj.get("currentSecondaryOpeningHours") != null && !jsonObj.get("currentSecondaryOpeningHours").isJsonNull()) {
        JsonArray jsonArraycurrentSecondaryOpeningHours = jsonObj.getAsJsonArray("currentSecondaryOpeningHours");
        if (jsonArraycurrentSecondaryOpeningHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currentSecondaryOpeningHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currentSecondaryOpeningHours` to be an array in the JSON string but got `%s`", jsonObj.get("currentSecondaryOpeningHours").toString()));
          }

          // validate the optional field `currentSecondaryOpeningHours` (array)
          for (int i = 0; i < jsonArraycurrentSecondaryOpeningHours.size(); i++) {
            GoogleMapsPlacesV1PlaceOpeningHours.validateJsonElement(jsonArraycurrentSecondaryOpeningHours.get(i));
          };
        }
      }
      // validate the optional field `displayName`
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) {
        GoogleTypeLocalizedText.validateJsonElement(jsonObj.get("displayName"));
      }
      // validate the optional field `editorialSummary`
      if (jsonObj.get("editorialSummary") != null && !jsonObj.get("editorialSummary").isJsonNull()) {
        GoogleTypeLocalizedText.validateJsonElement(jsonObj.get("editorialSummary"));
      }
      // validate the optional field `evChargeOptions`
      if (jsonObj.get("evChargeOptions") != null && !jsonObj.get("evChargeOptions").isJsonNull()) {
        GoogleMapsPlacesV1EVChargeOptions.validateJsonElement(jsonObj.get("evChargeOptions"));
      }
      if ((jsonObj.get("formattedAddress") != null && !jsonObj.get("formattedAddress").isJsonNull()) && !jsonObj.get("formattedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedAddress").toString()));
      }
      // validate the optional field `fuelOptions`
      if (jsonObj.get("fuelOptions") != null && !jsonObj.get("fuelOptions").isJsonNull()) {
        GoogleMapsPlacesV1FuelOptions.validateJsonElement(jsonObj.get("fuelOptions"));
      }
      if ((jsonObj.get("googleMapsUri") != null && !jsonObj.get("googleMapsUri").isJsonNull()) && !jsonObj.get("googleMapsUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleMapsUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleMapsUri").toString()));
      }
      if ((jsonObj.get("iconBackgroundColor") != null && !jsonObj.get("iconBackgroundColor").isJsonNull()) && !jsonObj.get("iconBackgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconBackgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconBackgroundColor").toString()));
      }
      if ((jsonObj.get("iconMaskBaseUri") != null && !jsonObj.get("iconMaskBaseUri").isJsonNull()) && !jsonObj.get("iconMaskBaseUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconMaskBaseUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconMaskBaseUri").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internationalPhoneNumber") != null && !jsonObj.get("internationalPhoneNumber").isJsonNull()) && !jsonObj.get("internationalPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internationalPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internationalPhoneNumber").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GoogleTypeLatLng.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nationalPhoneNumber") != null && !jsonObj.get("nationalPhoneNumber").isJsonNull()) && !jsonObj.get("nationalPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalPhoneNumber").toString()));
      }
      // validate the optional field `parkingOptions`
      if (jsonObj.get("parkingOptions") != null && !jsonObj.get("parkingOptions").isJsonNull()) {
        GoogleMapsPlacesV1PlaceParkingOptions.validateJsonElement(jsonObj.get("parkingOptions"));
      }
      // validate the optional field `paymentOptions`
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull()) {
        GoogleMapsPlacesV1PlacePaymentOptions.validateJsonElement(jsonObj.get("paymentOptions"));
      }
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) {
        JsonArray jsonArrayphotos = jsonObj.getAsJsonArray("photos");
        if (jsonArrayphotos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("photos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
          }

          // validate the optional field `photos` (array)
          for (int i = 0; i < jsonArrayphotos.size(); i++) {
            GoogleMapsPlacesV1Photo.validateJsonElement(jsonArrayphotos.get(i));
          };
        }
      }
      // validate the optional field `plusCode`
      if (jsonObj.get("plusCode") != null && !jsonObj.get("plusCode").isJsonNull()) {
        GoogleMapsPlacesV1PlacePlusCode.validateJsonElement(jsonObj.get("plusCode"));
      }
      if ((jsonObj.get("priceLevel") != null && !jsonObj.get("priceLevel").isJsonNull()) && !jsonObj.get("priceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceLevel").toString()));
      }
      // validate the optional field `priceLevel`
      if (jsonObj.get("priceLevel") != null && !jsonObj.get("priceLevel").isJsonNull()) {
        PriceLevelEnum.validateJsonElement(jsonObj.get("priceLevel"));
      }
      if ((jsonObj.get("primaryType") != null && !jsonObj.get("primaryType").isJsonNull()) && !jsonObj.get("primaryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryType").toString()));
      }
      // validate the optional field `primaryTypeDisplayName`
      if (jsonObj.get("primaryTypeDisplayName") != null && !jsonObj.get("primaryTypeDisplayName").isJsonNull()) {
        GoogleTypeLocalizedText.validateJsonElement(jsonObj.get("primaryTypeDisplayName"));
      }
      // validate the optional field `regularOpeningHours`
      if (jsonObj.get("regularOpeningHours") != null && !jsonObj.get("regularOpeningHours").isJsonNull()) {
        GoogleMapsPlacesV1PlaceOpeningHours.validateJsonElement(jsonObj.get("regularOpeningHours"));
      }
      if (jsonObj.get("regularSecondaryOpeningHours") != null && !jsonObj.get("regularSecondaryOpeningHours").isJsonNull()) {
        JsonArray jsonArrayregularSecondaryOpeningHours = jsonObj.getAsJsonArray("regularSecondaryOpeningHours");
        if (jsonArrayregularSecondaryOpeningHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regularSecondaryOpeningHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regularSecondaryOpeningHours` to be an array in the JSON string but got `%s`", jsonObj.get("regularSecondaryOpeningHours").toString()));
          }

          // validate the optional field `regularSecondaryOpeningHours` (array)
          for (int i = 0; i < jsonArrayregularSecondaryOpeningHours.size(); i++) {
            GoogleMapsPlacesV1PlaceOpeningHours.validateJsonElement(jsonArrayregularSecondaryOpeningHours.get(i));
          };
        }
      }
      if (jsonObj.get("reviews") != null && !jsonObj.get("reviews").isJsonNull()) {
        JsonArray jsonArrayreviews = jsonObj.getAsJsonArray("reviews");
        if (jsonArrayreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviews` to be an array in the JSON string but got `%s`", jsonObj.get("reviews").toString()));
          }

          // validate the optional field `reviews` (array)
          for (int i = 0; i < jsonArrayreviews.size(); i++) {
            GoogleMapsPlacesV1Review.validateJsonElement(jsonArrayreviews.get(i));
          };
        }
      }
      if ((jsonObj.get("shortFormattedAddress") != null && !jsonObj.get("shortFormattedAddress").isJsonNull()) && !jsonObj.get("shortFormattedAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortFormattedAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortFormattedAddress").toString()));
      }
      if (jsonObj.get("subDestinations") != null && !jsonObj.get("subDestinations").isJsonNull()) {
        JsonArray jsonArraysubDestinations = jsonObj.getAsJsonArray("subDestinations");
        if (jsonArraysubDestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subDestinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("subDestinations").toString()));
          }

          // validate the optional field `subDestinations` (array)
          for (int i = 0; i < jsonArraysubDestinations.size(); i++) {
            GoogleMapsPlacesV1PlaceSubDestination.validateJsonElement(jsonArraysubDestinations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      // validate the optional field `viewport`
      if (jsonObj.get("viewport") != null && !jsonObj.get("viewport").isJsonNull()) {
        GoogleGeoTypeViewport.validateJsonElement(jsonObj.get("viewport"));
      }
      if ((jsonObj.get("websiteUri") != null && !jsonObj.get("websiteUri").isJsonNull()) && !jsonObj.get("websiteUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1Place.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1Place' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1Place> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1Place.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1Place>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1Place value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1Place read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1Place given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1Place
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1Place
   */
  public static GoogleMapsPlacesV1Place fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1Place.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1Place to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

