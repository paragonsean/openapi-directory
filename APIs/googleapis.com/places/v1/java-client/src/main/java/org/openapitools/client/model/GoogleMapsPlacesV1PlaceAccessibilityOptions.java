/*
 * Places API (New)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the accessibility options a place offers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:29.736799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleMapsPlacesV1PlaceAccessibilityOptions {
  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_ENTRANCE = "wheelchairAccessibleEntrance";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_ENTRANCE)
  private Boolean wheelchairAccessibleEntrance;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_PARKING = "wheelchairAccessibleParking";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_PARKING)
  private Boolean wheelchairAccessibleParking;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_RESTROOM = "wheelchairAccessibleRestroom";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_RESTROOM)
  private Boolean wheelchairAccessibleRestroom;

  public static final String SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_SEATING = "wheelchairAccessibleSeating";
  @SerializedName(SERIALIZED_NAME_WHEELCHAIR_ACCESSIBLE_SEATING)
  private Boolean wheelchairAccessibleSeating;

  public GoogleMapsPlacesV1PlaceAccessibilityOptions() {
  }

  public GoogleMapsPlacesV1PlaceAccessibilityOptions wheelchairAccessibleEntrance(Boolean wheelchairAccessibleEntrance) {
    this.wheelchairAccessibleEntrance = wheelchairAccessibleEntrance;
    return this;
  }

  /**
   * Places has wheelchair accessible entrance.
   * @return wheelchairAccessibleEntrance
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessibleEntrance() {
    return wheelchairAccessibleEntrance;
  }

  public void setWheelchairAccessibleEntrance(Boolean wheelchairAccessibleEntrance) {
    this.wheelchairAccessibleEntrance = wheelchairAccessibleEntrance;
  }


  public GoogleMapsPlacesV1PlaceAccessibilityOptions wheelchairAccessibleParking(Boolean wheelchairAccessibleParking) {
    this.wheelchairAccessibleParking = wheelchairAccessibleParking;
    return this;
  }

  /**
   * Place offers wheelchair accessible parking.
   * @return wheelchairAccessibleParking
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessibleParking() {
    return wheelchairAccessibleParking;
  }

  public void setWheelchairAccessibleParking(Boolean wheelchairAccessibleParking) {
    this.wheelchairAccessibleParking = wheelchairAccessibleParking;
  }


  public GoogleMapsPlacesV1PlaceAccessibilityOptions wheelchairAccessibleRestroom(Boolean wheelchairAccessibleRestroom) {
    this.wheelchairAccessibleRestroom = wheelchairAccessibleRestroom;
    return this;
  }

  /**
   * Place has wheelchair accessible restroom.
   * @return wheelchairAccessibleRestroom
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessibleRestroom() {
    return wheelchairAccessibleRestroom;
  }

  public void setWheelchairAccessibleRestroom(Boolean wheelchairAccessibleRestroom) {
    this.wheelchairAccessibleRestroom = wheelchairAccessibleRestroom;
  }


  public GoogleMapsPlacesV1PlaceAccessibilityOptions wheelchairAccessibleSeating(Boolean wheelchairAccessibleSeating) {
    this.wheelchairAccessibleSeating = wheelchairAccessibleSeating;
    return this;
  }

  /**
   * Place has wheelchair accessible seating.
   * @return wheelchairAccessibleSeating
   */
  @javax.annotation.Nullable
  public Boolean getWheelchairAccessibleSeating() {
    return wheelchairAccessibleSeating;
  }

  public void setWheelchairAccessibleSeating(Boolean wheelchairAccessibleSeating) {
    this.wheelchairAccessibleSeating = wheelchairAccessibleSeating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleMapsPlacesV1PlaceAccessibilityOptions googleMapsPlacesV1PlaceAccessibilityOptions = (GoogleMapsPlacesV1PlaceAccessibilityOptions) o;
    return Objects.equals(this.wheelchairAccessibleEntrance, googleMapsPlacesV1PlaceAccessibilityOptions.wheelchairAccessibleEntrance) &&
        Objects.equals(this.wheelchairAccessibleParking, googleMapsPlacesV1PlaceAccessibilityOptions.wheelchairAccessibleParking) &&
        Objects.equals(this.wheelchairAccessibleRestroom, googleMapsPlacesV1PlaceAccessibilityOptions.wheelchairAccessibleRestroom) &&
        Objects.equals(this.wheelchairAccessibleSeating, googleMapsPlacesV1PlaceAccessibilityOptions.wheelchairAccessibleSeating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wheelchairAccessibleEntrance, wheelchairAccessibleParking, wheelchairAccessibleRestroom, wheelchairAccessibleSeating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleMapsPlacesV1PlaceAccessibilityOptions {\n");
    sb.append("    wheelchairAccessibleEntrance: ").append(toIndentedString(wheelchairAccessibleEntrance)).append("\n");
    sb.append("    wheelchairAccessibleParking: ").append(toIndentedString(wheelchairAccessibleParking)).append("\n");
    sb.append("    wheelchairAccessibleRestroom: ").append(toIndentedString(wheelchairAccessibleRestroom)).append("\n");
    sb.append("    wheelchairAccessibleSeating: ").append(toIndentedString(wheelchairAccessibleSeating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("wheelchairAccessibleEntrance");
    openapiFields.add("wheelchairAccessibleParking");
    openapiFields.add("wheelchairAccessibleRestroom");
    openapiFields.add("wheelchairAccessibleSeating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleMapsPlacesV1PlaceAccessibilityOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleMapsPlacesV1PlaceAccessibilityOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleMapsPlacesV1PlaceAccessibilityOptions is not found in the empty JSON string", GoogleMapsPlacesV1PlaceAccessibilityOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleMapsPlacesV1PlaceAccessibilityOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleMapsPlacesV1PlaceAccessibilityOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleMapsPlacesV1PlaceAccessibilityOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleMapsPlacesV1PlaceAccessibilityOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleMapsPlacesV1PlaceAccessibilityOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleMapsPlacesV1PlaceAccessibilityOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleMapsPlacesV1PlaceAccessibilityOptions>() {
           @Override
           public void write(JsonWriter out, GoogleMapsPlacesV1PlaceAccessibilityOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleMapsPlacesV1PlaceAccessibilityOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleMapsPlacesV1PlaceAccessibilityOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleMapsPlacesV1PlaceAccessibilityOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleMapsPlacesV1PlaceAccessibilityOptions
   */
  public static GoogleMapsPlacesV1PlaceAccessibilityOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleMapsPlacesV1PlaceAccessibilityOptions.class);
  }

  /**
   * Convert an instance of GoogleMapsPlacesV1PlaceAccessibilityOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

