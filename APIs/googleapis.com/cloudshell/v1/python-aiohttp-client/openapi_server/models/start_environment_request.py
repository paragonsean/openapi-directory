# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartEnvironmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, public_keys: List[str]=None):
        """StartEnvironmentRequest - a model defined in OpenAPI

        :param access_token: The access_token of this StartEnvironmentRequest.
        :param public_keys: The public_keys of this StartEnvironmentRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'public_keys': List[str]
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'public_keys': 'publicKeys'
        }

        self._access_token = access_token
        self._public_keys = public_keys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartEnvironmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartEnvironmentRequest of this StartEnvironmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this StartEnvironmentRequest.

        The initial access token passed to the environment. If this is present and valid, the environment will be pre-authenticated with gcloud so that the user can run gcloud commands in Cloud Shell without having to log in. This code can be updated later by calling AuthorizeEnvironment.

        :return: The access_token of this StartEnvironmentRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this StartEnvironmentRequest.

        The initial access token passed to the environment. If this is present and valid, the environment will be pre-authenticated with gcloud so that the user can run gcloud commands in Cloud Shell without having to log in. This code can be updated later by calling AuthorizeEnvironment.

        :param access_token: The access_token of this StartEnvironmentRequest.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def public_keys(self):
        """Gets the public_keys of this StartEnvironmentRequest.

        Public keys that should be added to the environment before it is started.

        :return: The public_keys of this StartEnvironmentRequest.
        :rtype: List[str]
        """
        return self._public_keys

    @public_keys.setter
    def public_keys(self, public_keys):
        """Sets the public_keys of this StartEnvironmentRequest.

        Public keys that should be added to the environment before it is started.

        :param public_keys: The public_keys of this StartEnvironmentRequest.
        :type public_keys: List[str]
        """

        self._public_keys = public_keys
