# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, docker_image: str=None, id: str=None, name: str=None, public_keys: List[str]=None, ssh_host: str=None, ssh_port: int=None, ssh_username: str=None, state: str=None, web_host: str=None):
        """Environment - a model defined in OpenAPI

        :param docker_image: The docker_image of this Environment.
        :param id: The id of this Environment.
        :param name: The name of this Environment.
        :param public_keys: The public_keys of this Environment.
        :param ssh_host: The ssh_host of this Environment.
        :param ssh_port: The ssh_port of this Environment.
        :param ssh_username: The ssh_username of this Environment.
        :param state: The state of this Environment.
        :param web_host: The web_host of this Environment.
        """
        self.openapi_types = {
            'docker_image': str,
            'id': str,
            'name': str,
            'public_keys': List[str],
            'ssh_host': str,
            'ssh_port': int,
            'ssh_username': str,
            'state': str,
            'web_host': str
        }

        self.attribute_map = {
            'docker_image': 'dockerImage',
            'id': 'id',
            'name': 'name',
            'public_keys': 'publicKeys',
            'ssh_host': 'sshHost',
            'ssh_port': 'sshPort',
            'ssh_username': 'sshUsername',
            'state': 'state',
            'web_host': 'webHost'
        }

        self._docker_image = docker_image
        self._id = id
        self._name = name
        self._public_keys = public_keys
        self._ssh_host = ssh_host
        self._ssh_port = ssh_port
        self._ssh_username = ssh_username
        self._state = state
        self._web_host = web_host

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def docker_image(self):
        """Gets the docker_image of this Environment.

        Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".

        :return: The docker_image of this Environment.
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this Environment.

        Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".

        :param docker_image: The docker_image of this Environment.
        :type docker_image: str
        """

        self._docker_image = docker_image

    @property
    def id(self):
        """Gets the id of this Environment.

        Output only. The environment's identifier, unique among the user's environments.

        :return: The id of this Environment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Environment.

        Output only. The environment's identifier, unique among the user's environments.

        :param id: The id of this Environment.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Environment.

        Immutable. Full name of this resource, in the format `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the email address of the user to whom this environment belongs, and `{environment_id}` is the identifier of this environment. For example, `users/someone@example.com/environments/default`.

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        Immutable. Full name of this resource, in the format `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the email address of the user to whom this environment belongs, and `{environment_id}` is the identifier of this environment. For example, `users/someone@example.com/environments/default`.

        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def public_keys(self):
        """Gets the public_keys of this Environment.

        Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.

        :return: The public_keys of this Environment.
        :rtype: List[str]
        """
        return self._public_keys

    @public_keys.setter
    def public_keys(self, public_keys):
        """Sets the public_keys of this Environment.

        Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.

        :param public_keys: The public_keys of this Environment.
        :type public_keys: List[str]
        """

        self._public_keys = public_keys

    @property
    def ssh_host(self):
        """Gets the ssh_host of this Environment.

        Output only. Host to which clients can connect to initiate SSH sessions with the environment.

        :return: The ssh_host of this Environment.
        :rtype: str
        """
        return self._ssh_host

    @ssh_host.setter
    def ssh_host(self, ssh_host):
        """Sets the ssh_host of this Environment.

        Output only. Host to which clients can connect to initiate SSH sessions with the environment.

        :param ssh_host: The ssh_host of this Environment.
        :type ssh_host: str
        """

        self._ssh_host = ssh_host

    @property
    def ssh_port(self):
        """Gets the ssh_port of this Environment.

        Output only. Port to which clients can connect to initiate SSH sessions with the environment.

        :return: The ssh_port of this Environment.
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this Environment.

        Output only. Port to which clients can connect to initiate SSH sessions with the environment.

        :param ssh_port: The ssh_port of this Environment.
        :type ssh_port: int
        """

        self._ssh_port = ssh_port

    @property
    def ssh_username(self):
        """Gets the ssh_username of this Environment.

        Output only. Username that clients should use when initiating SSH sessions with the environment.

        :return: The ssh_username of this Environment.
        :rtype: str
        """
        return self._ssh_username

    @ssh_username.setter
    def ssh_username(self, ssh_username):
        """Sets the ssh_username of this Environment.

        Output only. Username that clients should use when initiating SSH sessions with the environment.

        :param ssh_username: The ssh_username of this Environment.
        :type ssh_username: str
        """

        self._ssh_username = ssh_username

    @property
    def state(self):
        """Gets the state of this Environment.

        Output only. Current execution state of this environment.

        :return: The state of this Environment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Environment.

        Output only. Current execution state of this environment.

        :param state: The state of this Environment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "SUSPENDED", "PENDING", "RUNNING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def web_host(self):
        """Gets the web_host of this Environment.

        Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.

        :return: The web_host of this Environment.
        :rtype: str
        """
        return self._web_host

    @web_host.setter
    def web_host(self, web_host):
        """Sets the web_host of this Environment.

        Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.

        :param web_host: The web_host of this Environment.
        :type web_host: str
        """

        self._web_host = web_host
