/*
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user&#39;s data that will remain across sessions. Each user has at least an environment with the ID \&quot;default\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:11.323104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Environment {
  public static final String SERIALIZED_NAME_DOCKER_IMAGE = "dockerImage";
  @SerializedName(SERIALIZED_NAME_DOCKER_IMAGE)
  private String dockerImage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLIC_KEYS = "publicKeys";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEYS)
  private List<String> publicKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_SSH_HOST = "sshHost";
  @SerializedName(SERIALIZED_NAME_SSH_HOST)
  private String sshHost;

  public static final String SERIALIZED_NAME_SSH_PORT = "sshPort";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Integer sshPort;

  public static final String SERIALIZED_NAME_SSH_USERNAME = "sshUsername";
  @SerializedName(SERIALIZED_NAME_SSH_USERNAME)
  private String sshUsername;

  /**
   * Output only. Current execution state of this environment.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    SUSPENDED("SUSPENDED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_WEB_HOST = "webHost";
  @SerializedName(SERIALIZED_NAME_WEB_HOST)
  private String webHost;

  public Environment() {
  }

  public Environment(
     String id, 
     List<String> publicKeys, 
     String sshHost, 
     Integer sshPort, 
     String sshUsername, 
     StateEnum state, 
     String webHost
  ) {
    this();
    this.id = id;
    this.publicKeys = publicKeys;
    this.sshHost = sshHost;
    this.sshPort = sshPort;
    this.sshUsername = sshUsername;
    this.state = state;
    this.webHost = webHost;
  }

  public Environment dockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
    return this;
  }

  /**
   * Required. Immutable. Full path to the Docker image used to run this environment, e.g. \&quot;gcr.io/dev-con/cloud-devshell:latest\&quot;.
   * @return dockerImage
   */
  @javax.annotation.Nullable
  public String getDockerImage() {
    return dockerImage;
  }

  public void setDockerImage(String dockerImage) {
    this.dockerImage = dockerImage;
  }


  /**
   * Output only. The environment&#39;s identifier, unique among the user&#39;s environments.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Environment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. Full name of this resource, in the format &#x60;users/{owner_email}/environments/{environment_id}&#x60;. &#x60;{owner_email}&#x60; is the email address of the user to whom this environment belongs, and &#x60;{environment_id}&#x60; is the identifier of this environment. For example, &#x60;users/someone@example.com/environments/default&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.
   * @return publicKeys
   */
  @javax.annotation.Nullable
  public List<String> getPublicKeys() {
    return publicKeys;
  }



  /**
   * Output only. Host to which clients can connect to initiate SSH sessions with the environment.
   * @return sshHost
   */
  @javax.annotation.Nullable
  public String getSshHost() {
    return sshHost;
  }



  /**
   * Output only. Port to which clients can connect to initiate SSH sessions with the environment.
   * @return sshPort
   */
  @javax.annotation.Nullable
  public Integer getSshPort() {
    return sshPort;
  }



  /**
   * Output only. Username that clients should use when initiating SSH sessions with the environment.
   * @return sshUsername
   */
  @javax.annotation.Nullable
  public String getSshUsername() {
    return sshUsername;
  }



  /**
   * Output only. Current execution state of this environment.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.
   * @return webHost
   */
  @javax.annotation.Nullable
  public String getWebHost() {
    return webHost;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Environment environment = (Environment) o;
    return Objects.equals(this.dockerImage, environment.dockerImage) &&
        Objects.equals(this.id, environment.id) &&
        Objects.equals(this.name, environment.name) &&
        Objects.equals(this.publicKeys, environment.publicKeys) &&
        Objects.equals(this.sshHost, environment.sshHost) &&
        Objects.equals(this.sshPort, environment.sshPort) &&
        Objects.equals(this.sshUsername, environment.sshUsername) &&
        Objects.equals(this.state, environment.state) &&
        Objects.equals(this.webHost, environment.webHost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerImage, id, name, publicKeys, sshHost, sshPort, sshUsername, state, webHost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Environment {\n");
    sb.append("    dockerImage: ").append(toIndentedString(dockerImage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publicKeys: ").append(toIndentedString(publicKeys)).append("\n");
    sb.append("    sshHost: ").append(toIndentedString(sshHost)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    sshUsername: ").append(toIndentedString(sshUsername)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    webHost: ").append(toIndentedString(webHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dockerImage");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("publicKeys");
    openapiFields.add("sshHost");
    openapiFields.add("sshPort");
    openapiFields.add("sshUsername");
    openapiFields.add("state");
    openapiFields.add("webHost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Environment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Environment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Environment is not found in the empty JSON string", Environment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Environment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Environment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dockerImage") != null && !jsonObj.get("dockerImage").isJsonNull()) && !jsonObj.get("dockerImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockerImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockerImage").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("publicKeys") != null && !jsonObj.get("publicKeys").isJsonNull() && !jsonObj.get("publicKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeys` to be an array in the JSON string but got `%s`", jsonObj.get("publicKeys").toString()));
      }
      if ((jsonObj.get("sshHost") != null && !jsonObj.get("sshHost").isJsonNull()) && !jsonObj.get("sshHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshHost").toString()));
      }
      if ((jsonObj.get("sshUsername") != null && !jsonObj.get("sshUsername").isJsonNull()) && !jsonObj.get("sshUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshUsername").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("webHost") != null && !jsonObj.get("webHost").isJsonNull()) && !jsonObj.get("webHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webHost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Environment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Environment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Environment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Environment.class));

       return (TypeAdapter<T>) new TypeAdapter<Environment>() {
           @Override
           public void write(JsonWriter out, Environment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Environment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Environment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Environment
   * @throws IOException if the JSON string is invalid with respect to Environment
   */
  public static Environment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Environment.class);
  }

  /**
   * Convert an instance of Environment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

