/*
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddPublicKeyRequest;
import org.openapitools.client.model.AuthorizeEnvironmentRequest;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.RemovePublicKeyRequest;
import org.openapitools.client.model.StartEnvironmentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Adds a public SSH key to an environment, allowing clients with the corresponding private key to connect to that environment via SSH. If a key with the same content already exists, this will error with ALREADY_EXISTS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudshellUsersEnvironmentsAddPublicKeyTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddPublicKeyRequest addPublicKeyRequest = null;
        Operation response = api.cloudshellUsersEnvironmentsAddPublicKey(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addPublicKeyRequest);
        // TODO: test validations
    }

    /**
     * Sends OAuth credentials to a running environment on behalf of a user. When this completes, the environment will be authorized to run various Google Cloud command line tools without requiring the user to manually authenticate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudshellUsersEnvironmentsAuthorizeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AuthorizeEnvironmentRequest authorizeEnvironmentRequest = null;
        Operation response = api.cloudshellUsersEnvironmentsAuthorize(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, authorizeEnvironmentRequest);
        // TODO: test validations
    }

    /**
     * Gets an environment. Returns NOT_FOUND if the environment does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudshellUsersEnvironmentsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        Environment response = api.cloudshellUsersEnvironmentsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes a public SSH key from an environment. Clients will no longer be able to connect to the environment using the corresponding private key. If a key with the same content is not present, this will error with NOT_FOUND.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudshellUsersEnvironmentsRemovePublicKeyTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemovePublicKeyRequest removePublicKeyRequest = null;
        Operation response = api.cloudshellUsersEnvironmentsRemovePublicKey(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removePublicKeyRequest);
        // TODO: test validations
    }

    /**
     * Starts an existing environment, allowing clients to connect to it. The returned operation will contain an instance of StartEnvironmentMetadata in its metadata field. Users can wait for the environment to start by polling this operation via GetOperation. Once the environment has finished starting and is ready to accept connections, the operation will contain a StartEnvironmentResponse in its response field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudshellUsersEnvironmentsStartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StartEnvironmentRequest startEnvironmentRequest = null;
        Operation response = api.cloudshellUsersEnvironmentsStart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, startEnvironmentRequest);
        // TODO: test validations
    }

}
