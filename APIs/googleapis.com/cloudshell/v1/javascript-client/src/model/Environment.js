/**
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Environment model module.
 * @module model/Environment
 * @version v1
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user&#39;s data that will remain across sessions. Each user has at least an environment with the ID \&quot;default\&quot;.
     * @alias module:model/Environment
     */
    constructor() { 
        
        Environment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('dockerImage')) {
                obj['dockerImage'] = ApiClient.convertToType(data['dockerImage'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('publicKeys')) {
                obj['publicKeys'] = ApiClient.convertToType(data['publicKeys'], ['String']);
            }
            if (data.hasOwnProperty('sshHost')) {
                obj['sshHost'] = ApiClient.convertToType(data['sshHost'], 'String');
            }
            if (data.hasOwnProperty('sshPort')) {
                obj['sshPort'] = ApiClient.convertToType(data['sshPort'], 'Number');
            }
            if (data.hasOwnProperty('sshUsername')) {
                obj['sshUsername'] = ApiClient.convertToType(data['sshUsername'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('webHost')) {
                obj['webHost'] = ApiClient.convertToType(data['webHost'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dockerImage'] && !(typeof data['dockerImage'] === 'string' || data['dockerImage'] instanceof String)) {
            throw new Error("Expected the field `dockerImage` to be a primitive type in the JSON string but got " + data['dockerImage']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publicKeys'])) {
            throw new Error("Expected the field `publicKeys` to be an array in the JSON data but got " + data['publicKeys']);
        }
        // ensure the json data is a string
        if (data['sshHost'] && !(typeof data['sshHost'] === 'string' || data['sshHost'] instanceof String)) {
            throw new Error("Expected the field `sshHost` to be a primitive type in the JSON string but got " + data['sshHost']);
        }
        // ensure the json data is a string
        if (data['sshUsername'] && !(typeof data['sshUsername'] === 'string' || data['sshUsername'] instanceof String)) {
            throw new Error("Expected the field `sshUsername` to be a primitive type in the JSON string but got " + data['sshUsername']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['webHost'] && !(typeof data['webHost'] === 'string' || data['webHost'] instanceof String)) {
            throw new Error("Expected the field `webHost` to be a primitive type in the JSON string but got " + data['webHost']);
        }

        return true;
    }


}



/**
 * Required. Immutable. Full path to the Docker image used to run this environment, e.g. \"gcr.io/dev-con/cloud-devshell:latest\".
 * @member {String} dockerImage
 */
Environment.prototype['dockerImage'] = undefined;

/**
 * Output only. The environment's identifier, unique among the user's environments.
 * @member {String} id
 */
Environment.prototype['id'] = undefined;

/**
 * Immutable. Full name of this resource, in the format `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the email address of the user to whom this environment belongs, and `{environment_id}` is the identifier of this environment. For example, `users/someone@example.com/environments/default`.
 * @member {String} name
 */
Environment.prototype['name'] = undefined;

/**
 * Output only. Public keys associated with the environment. Clients can connect to this environment via SSH only if they possess a private key corresponding to at least one of these public keys. Keys can be added to or removed from the environment using the AddPublicKey and RemovePublicKey methods.
 * @member {Array.<String>} publicKeys
 */
Environment.prototype['publicKeys'] = undefined;

/**
 * Output only. Host to which clients can connect to initiate SSH sessions with the environment.
 * @member {String} sshHost
 */
Environment.prototype['sshHost'] = undefined;

/**
 * Output only. Port to which clients can connect to initiate SSH sessions with the environment.
 * @member {Number} sshPort
 */
Environment.prototype['sshPort'] = undefined;

/**
 * Output only. Username that clients should use when initiating SSH sessions with the environment.
 * @member {String} sshUsername
 */
Environment.prototype['sshUsername'] = undefined;

/**
 * Output only. Current execution state of this environment.
 * @member {module:model/Environment.StateEnum} state
 */
Environment.prototype['state'] = undefined;

/**
 * Output only. Host to which clients can connect to initiate HTTPS or WSS connections with the environment.
 * @member {String} webHost
 */
Environment.prototype['webHost'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Environment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default Environment;

