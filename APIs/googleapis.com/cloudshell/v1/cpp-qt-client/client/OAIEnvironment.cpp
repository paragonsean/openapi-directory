/**
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_docker_image_isSet = false;
    m_docker_image_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_public_keys_isSet = false;
    m_public_keys_isValid = false;

    m_ssh_host_isSet = false;
    m_ssh_host_isValid = false;

    m_ssh_port_isSet = false;
    m_ssh_port_isValid = false;

    m_ssh_username_isSet = false;
    m_ssh_username_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_web_host_isSet = false;
    m_web_host_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_docker_image_isValid = ::OpenAPI::fromJsonValue(m_docker_image, json[QString("dockerImage")]);
    m_docker_image_isSet = !json[QString("dockerImage")].isNull() && m_docker_image_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_public_keys_isValid = ::OpenAPI::fromJsonValue(m_public_keys, json[QString("publicKeys")]);
    m_public_keys_isSet = !json[QString("publicKeys")].isNull() && m_public_keys_isValid;

    m_ssh_host_isValid = ::OpenAPI::fromJsonValue(m_ssh_host, json[QString("sshHost")]);
    m_ssh_host_isSet = !json[QString("sshHost")].isNull() && m_ssh_host_isValid;

    m_ssh_port_isValid = ::OpenAPI::fromJsonValue(m_ssh_port, json[QString("sshPort")]);
    m_ssh_port_isSet = !json[QString("sshPort")].isNull() && m_ssh_port_isValid;

    m_ssh_username_isValid = ::OpenAPI::fromJsonValue(m_ssh_username, json[QString("sshUsername")]);
    m_ssh_username_isSet = !json[QString("sshUsername")].isNull() && m_ssh_username_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_web_host_isValid = ::OpenAPI::fromJsonValue(m_web_host, json[QString("webHost")]);
    m_web_host_isSet = !json[QString("webHost")].isNull() && m_web_host_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_docker_image_isSet) {
        obj.insert(QString("dockerImage"), ::OpenAPI::toJsonValue(m_docker_image));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_public_keys.size() > 0) {
        obj.insert(QString("publicKeys"), ::OpenAPI::toJsonValue(m_public_keys));
    }
    if (m_ssh_host_isSet) {
        obj.insert(QString("sshHost"), ::OpenAPI::toJsonValue(m_ssh_host));
    }
    if (m_ssh_port_isSet) {
        obj.insert(QString("sshPort"), ::OpenAPI::toJsonValue(m_ssh_port));
    }
    if (m_ssh_username_isSet) {
        obj.insert(QString("sshUsername"), ::OpenAPI::toJsonValue(m_ssh_username));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_web_host_isSet) {
        obj.insert(QString("webHost"), ::OpenAPI::toJsonValue(m_web_host));
    }
    return obj;
}

QString OAIEnvironment::getDockerImage() const {
    return m_docker_image;
}
void OAIEnvironment::setDockerImage(const QString &docker_image) {
    m_docker_image = docker_image;
    m_docker_image_isSet = true;
}

bool OAIEnvironment::is_docker_image_Set() const{
    return m_docker_image_isSet;
}

bool OAIEnvironment::is_docker_image_Valid() const{
    return m_docker_image_isValid;
}

QString OAIEnvironment::getId() const {
    return m_id;
}
void OAIEnvironment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnvironment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnvironment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnvironment::getName() const {
    return m_name;
}
void OAIEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIEnvironment::getPublicKeys() const {
    return m_public_keys;
}
void OAIEnvironment::setPublicKeys(const QList<QString> &public_keys) {
    m_public_keys = public_keys;
    m_public_keys_isSet = true;
}

bool OAIEnvironment::is_public_keys_Set() const{
    return m_public_keys_isSet;
}

bool OAIEnvironment::is_public_keys_Valid() const{
    return m_public_keys_isValid;
}

QString OAIEnvironment::getSshHost() const {
    return m_ssh_host;
}
void OAIEnvironment::setSshHost(const QString &ssh_host) {
    m_ssh_host = ssh_host;
    m_ssh_host_isSet = true;
}

bool OAIEnvironment::is_ssh_host_Set() const{
    return m_ssh_host_isSet;
}

bool OAIEnvironment::is_ssh_host_Valid() const{
    return m_ssh_host_isValid;
}

qint32 OAIEnvironment::getSshPort() const {
    return m_ssh_port;
}
void OAIEnvironment::setSshPort(const qint32 &ssh_port) {
    m_ssh_port = ssh_port;
    m_ssh_port_isSet = true;
}

bool OAIEnvironment::is_ssh_port_Set() const{
    return m_ssh_port_isSet;
}

bool OAIEnvironment::is_ssh_port_Valid() const{
    return m_ssh_port_isValid;
}

QString OAIEnvironment::getSshUsername() const {
    return m_ssh_username;
}
void OAIEnvironment::setSshUsername(const QString &ssh_username) {
    m_ssh_username = ssh_username;
    m_ssh_username_isSet = true;
}

bool OAIEnvironment::is_ssh_username_Set() const{
    return m_ssh_username_isSet;
}

bool OAIEnvironment::is_ssh_username_Valid() const{
    return m_ssh_username_isValid;
}

QString OAIEnvironment::getState() const {
    return m_state;
}
void OAIEnvironment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEnvironment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEnvironment::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIEnvironment::getWebHost() const {
    return m_web_host;
}
void OAIEnvironment::setWebHost(const QString &web_host) {
    m_web_host = web_host;
    m_web_host_isSet = true;
}

bool OAIEnvironment::is_web_host_Set() const{
    return m_web_host_isSet;
}

bool OAIEnvironment::is_web_host_Valid() const{
    return m_web_host_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docker_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_host_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
