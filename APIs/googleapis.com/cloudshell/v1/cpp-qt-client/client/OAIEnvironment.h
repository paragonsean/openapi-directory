/**
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEnvironment.h
 *
 * A Cloud Shell environment, which is defined as the combination of a Docker image specifying what is installed on the environment and a home directory containing the user&#39;s data that will remain across sessions. Each user has at least an environment with the ID \&quot;default\&quot;.
 */

#ifndef OAIEnvironment_H
#define OAIEnvironment_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEnvironment : public OAIObject {
public:
    OAIEnvironment();
    OAIEnvironment(QString json);
    ~OAIEnvironment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDockerImage() const;
    void setDockerImage(const QString &docker_image);
    bool is_docker_image_Set() const;
    bool is_docker_image_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getPublicKeys() const;
    void setPublicKeys(const QList<QString> &public_keys);
    bool is_public_keys_Set() const;
    bool is_public_keys_Valid() const;

    QString getSshHost() const;
    void setSshHost(const QString &ssh_host);
    bool is_ssh_host_Set() const;
    bool is_ssh_host_Valid() const;

    qint32 getSshPort() const;
    void setSshPort(const qint32 &ssh_port);
    bool is_ssh_port_Set() const;
    bool is_ssh_port_Valid() const;

    QString getSshUsername() const;
    void setSshUsername(const QString &ssh_username);
    bool is_ssh_username_Set() const;
    bool is_ssh_username_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getWebHost() const;
    void setWebHost(const QString &web_host);
    bool is_web_host_Set() const;
    bool is_web_host_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_docker_image;
    bool m_docker_image_isSet;
    bool m_docker_image_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_public_keys;
    bool m_public_keys_isSet;
    bool m_public_keys_isValid;

    QString m_ssh_host;
    bool m_ssh_host_isSet;
    bool m_ssh_host_isValid;

    qint32 m_ssh_port;
    bool m_ssh_port_isSet;
    bool m_ssh_port_isValid;

    QString m_ssh_username;
    bool m_ssh_username_isSet;
    bool m_ssh_username_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_web_host;
    bool m_web_host_isSet;
    bool m_web_host_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEnvironment)

#endif // OAIEnvironment_H
