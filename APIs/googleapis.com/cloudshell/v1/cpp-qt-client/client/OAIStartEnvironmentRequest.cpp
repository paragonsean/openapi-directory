/**
 * Cloud Shell API
 * Allows users to start, configure, and connect to interactive shell sessions running in the cloud. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartEnvironmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartEnvironmentRequest::OAIStartEnvironmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartEnvironmentRequest::OAIStartEnvironmentRequest() {
    this->initializeModel();
}

OAIStartEnvironmentRequest::~OAIStartEnvironmentRequest() {}

void OAIStartEnvironmentRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_public_keys_isSet = false;
    m_public_keys_isValid = false;
}

void OAIStartEnvironmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartEnvironmentRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_public_keys_isValid = ::OpenAPI::fromJsonValue(m_public_keys, json[QString("publicKeys")]);
    m_public_keys_isSet = !json[QString("publicKeys")].isNull() && m_public_keys_isValid;
}

QString OAIStartEnvironmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartEnvironmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_public_keys.size() > 0) {
        obj.insert(QString("publicKeys"), ::OpenAPI::toJsonValue(m_public_keys));
    }
    return obj;
}

QString OAIStartEnvironmentRequest::getAccessToken() const {
    return m_access_token;
}
void OAIStartEnvironmentRequest::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIStartEnvironmentRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIStartEnvironmentRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QList<QString> OAIStartEnvironmentRequest::getPublicKeys() const {
    return m_public_keys;
}
void OAIStartEnvironmentRequest::setPublicKeys(const QList<QString> &public_keys) {
    m_public_keys = public_keys;
    m_public_keys_isSet = true;
}

bool OAIStartEnvironmentRequest::is_public_keys_Set() const{
    return m_public_keys_isSet;
}

bool OAIStartEnvironmentRequest::is_public_keys_Valid() const{
    return m_public_keys_isValid;
}

bool OAIStartEnvironmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartEnvironmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
