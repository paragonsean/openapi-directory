/*
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListReportsResponse;
import org.openapitools.client.model.Report;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    /**
     * Creates a job and returns it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        Job job = null;
        Job response = api.youtubereportingJobsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner, job);
        // TODO: test validations
    }

    /**
     * Deletes a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsDeleteTest() throws ApiException {
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        Object response = api.youtubereportingJobsDelete(jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Gets a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsGetTest() throws ApiException {
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        Job response = api.youtubereportingJobsGet(jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Lists jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeSystemManaged = null;
        String onBehalfOfContentOwner = null;
        Integer pageSize = null;
        String pageToken = null;
        ListJobsResponse response = api.youtubereportingJobsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeSystemManaged, onBehalfOfContentOwner, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the metadata of a specific report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsReportsGetTest() throws ApiException {
        String jobId = null;
        String reportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String onBehalfOfContentOwner = null;
        Report response = api.youtubereportingJobsReportsGet(jobId, reportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, onBehalfOfContentOwner);
        // TODO: test validations
    }

    /**
     * Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void youtubereportingJobsReportsListTest() throws ApiException {
        String jobId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String createdAfter = null;
        String onBehalfOfContentOwner = null;
        Integer pageSize = null;
        String pageToken = null;
        String startTimeAtOrAfter = null;
        String startTimeBefore = null;
        ListReportsResponse response = api.youtubereportingJobsReportsList(jobId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createdAfter, onBehalfOfContentOwner, pageSize, pageToken, startTimeAtOrAfter, startTimeBefore);
        // TODO: test validations
    }

}
