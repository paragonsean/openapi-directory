/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.YouTubeReportingApi);
  }
}(this, function(expect, YouTubeReportingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new YouTubeReportingApi.GdataCompositeMedia();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GdataCompositeMedia', function() {
    it('should create an instance of GdataCompositeMedia', function() {
      // uncomment below and update the code to test GdataCompositeMedia
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be.a(YouTubeReportingApi.GdataCompositeMedia);
    });

    it('should have the property blobRef (base name: "blobRef")', function() {
      // uncomment below and update the code to test the property blobRef
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property blobstore2Info (base name: "blobstore2Info")', function() {
      // uncomment below and update the code to test the property blobstore2Info
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property cosmoBinaryReference (base name: "cosmoBinaryReference")', function() {
      // uncomment below and update the code to test the property cosmoBinaryReference
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property crc32cHash (base name: "crc32cHash")', function() {
      // uncomment below and update the code to test the property crc32cHash
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property inline (base name: "inline")', function() {
      // uncomment below and update the code to test the property inline
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property md5Hash (base name: "md5Hash")', function() {
      // uncomment below and update the code to test the property md5Hash
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property objectId (base name: "objectId")', function() {
      // uncomment below and update the code to test the property objectId
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property referenceType (base name: "referenceType")', function() {
      // uncomment below and update the code to test the property referenceType
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

    it('should have the property sha1Hash (base name: "sha1Hash")', function() {
      // uncomment below and update the code to test the property sha1Hash
      //var instance = new YouTubeReportingApi.GdataCompositeMedia();
      //expect(instance).to.be();
    });

  });

}));
