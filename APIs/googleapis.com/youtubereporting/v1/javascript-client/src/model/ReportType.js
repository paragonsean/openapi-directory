/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportType model module.
 * @module model/ReportType
 * @version v1
 */
class ReportType {
    /**
     * Constructs a new <code>ReportType</code>.
     * A report type.
     * @alias module:model/ReportType
     */
    constructor() { 
        
        ReportType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportType} obj Optional instance to populate.
     * @return {module:model/ReportType} The populated <code>ReportType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportType();

            if (data.hasOwnProperty('deprecateTime')) {
                obj['deprecateTime'] = ApiClient.convertToType(data['deprecateTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('systemManaged')) {
                obj['systemManaged'] = ApiClient.convertToType(data['systemManaged'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deprecateTime'] && !(typeof data['deprecateTime'] === 'string' || data['deprecateTime'] instanceof String)) {
            throw new Error("Expected the field `deprecateTime` to be a primitive type in the JSON string but got " + data['deprecateTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The date/time when this report type was/will be deprecated.
 * @member {String} deprecateTime
 */
ReportType.prototype['deprecateTime'] = undefined;

/**
 * The ID of the report type (max. 100 characters).
 * @member {String} id
 */
ReportType.prototype['id'] = undefined;

/**
 * The name of the report type (max. 100 characters).
 * @member {String} name
 */
ReportType.prototype['name'] = undefined;

/**
 * True if this a system-managed report type; otherwise false. Reporting jobs for system-managed report types are created automatically and can thus not be used in the `CreateJob` method.
 * @member {Boolean} systemManaged
 */
ReportType.prototype['systemManaged'] = undefined;






export default ReportType;

