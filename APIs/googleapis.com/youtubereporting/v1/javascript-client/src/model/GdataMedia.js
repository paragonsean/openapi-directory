/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GdataBlobstore2Info from './GdataBlobstore2Info';
import GdataCompositeMedia from './GdataCompositeMedia';
import GdataContentTypeInfo from './GdataContentTypeInfo';
import GdataDiffChecksumsResponse from './GdataDiffChecksumsResponse';
import GdataDiffDownloadResponse from './GdataDiffDownloadResponse';
import GdataDiffUploadRequest from './GdataDiffUploadRequest';
import GdataDiffUploadResponse from './GdataDiffUploadResponse';
import GdataDiffVersionResponse from './GdataDiffVersionResponse';
import GdataDownloadParameters from './GdataDownloadParameters';
import GdataObjectId from './GdataObjectId';

/**
 * The GdataMedia model module.
 * @module model/GdataMedia
 * @version v1
 */
class GdataMedia {
    /**
     * Constructs a new <code>GdataMedia</code>.
     * gdata
     * @alias module:model/GdataMedia
     */
    constructor() { 
        
        GdataMedia.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GdataMedia</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GdataMedia} obj Optional instance to populate.
     * @return {module:model/GdataMedia} The populated <code>GdataMedia</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GdataMedia();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('bigstoreObjectRef')) {
                obj['bigstoreObjectRef'] = ApiClient.convertToType(data['bigstoreObjectRef'], 'Blob');
            }
            if (data.hasOwnProperty('blobRef')) {
                obj['blobRef'] = ApiClient.convertToType(data['blobRef'], 'Blob');
            }
            if (data.hasOwnProperty('blobstore2Info')) {
                obj['blobstore2Info'] = GdataBlobstore2Info.constructFromObject(data['blobstore2Info']);
            }
            if (data.hasOwnProperty('compositeMedia')) {
                obj['compositeMedia'] = ApiClient.convertToType(data['compositeMedia'], [GdataCompositeMedia]);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('contentTypeInfo')) {
                obj['contentTypeInfo'] = GdataContentTypeInfo.constructFromObject(data['contentTypeInfo']);
            }
            if (data.hasOwnProperty('cosmoBinaryReference')) {
                obj['cosmoBinaryReference'] = ApiClient.convertToType(data['cosmoBinaryReference'], 'Blob');
            }
            if (data.hasOwnProperty('crc32cHash')) {
                obj['crc32cHash'] = ApiClient.convertToType(data['crc32cHash'], 'Number');
            }
            if (data.hasOwnProperty('diffChecksumsResponse')) {
                obj['diffChecksumsResponse'] = GdataDiffChecksumsResponse.constructFromObject(data['diffChecksumsResponse']);
            }
            if (data.hasOwnProperty('diffDownloadResponse')) {
                obj['diffDownloadResponse'] = GdataDiffDownloadResponse.constructFromObject(data['diffDownloadResponse']);
            }
            if (data.hasOwnProperty('diffUploadRequest')) {
                obj['diffUploadRequest'] = GdataDiffUploadRequest.constructFromObject(data['diffUploadRequest']);
            }
            if (data.hasOwnProperty('diffUploadResponse')) {
                obj['diffUploadResponse'] = GdataDiffUploadResponse.constructFromObject(data['diffUploadResponse']);
            }
            if (data.hasOwnProperty('diffVersionResponse')) {
                obj['diffVersionResponse'] = GdataDiffVersionResponse.constructFromObject(data['diffVersionResponse']);
            }
            if (data.hasOwnProperty('downloadParameters')) {
                obj['downloadParameters'] = GdataDownloadParameters.constructFromObject(data['downloadParameters']);
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('hashVerified')) {
                obj['hashVerified'] = ApiClient.convertToType(data['hashVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('inline')) {
                obj['inline'] = ApiClient.convertToType(data['inline'], 'Blob');
            }
            if (data.hasOwnProperty('isPotentialRetry')) {
                obj['isPotentialRetry'] = ApiClient.convertToType(data['isPotentialRetry'], 'Boolean');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'String');
            }
            if (data.hasOwnProperty('md5Hash')) {
                obj['md5Hash'] = ApiClient.convertToType(data['md5Hash'], 'Blob');
            }
            if (data.hasOwnProperty('mediaId')) {
                obj['mediaId'] = ApiClient.convertToType(data['mediaId'], 'Blob');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = GdataObjectId.constructFromObject(data['objectId']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('referenceType')) {
                obj['referenceType'] = ApiClient.convertToType(data['referenceType'], 'String');
            }
            if (data.hasOwnProperty('sha1Hash')) {
                obj['sha1Hash'] = ApiClient.convertToType(data['sha1Hash'], 'Blob');
            }
            if (data.hasOwnProperty('sha256Hash')) {
                obj['sha256Hash'] = ApiClient.convertToType(data['sha256Hash'], 'Blob');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GdataMedia</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GdataMedia</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // validate the optional field `blobstore2Info`
        if (data['blobstore2Info']) { // data not null
          GdataBlobstore2Info.validateJSON(data['blobstore2Info']);
        }
        if (data['compositeMedia']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['compositeMedia'])) {
                throw new Error("Expected the field `compositeMedia` to be an array in the JSON data but got " + data['compositeMedia']);
            }
            // validate the optional field `compositeMedia` (array)
            for (const item of data['compositeMedia']) {
                GdataCompositeMedia.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // validate the optional field `contentTypeInfo`
        if (data['contentTypeInfo']) { // data not null
          GdataContentTypeInfo.validateJSON(data['contentTypeInfo']);
        }
        // validate the optional field `diffChecksumsResponse`
        if (data['diffChecksumsResponse']) { // data not null
          GdataDiffChecksumsResponse.validateJSON(data['diffChecksumsResponse']);
        }
        // validate the optional field `diffDownloadResponse`
        if (data['diffDownloadResponse']) { // data not null
          GdataDiffDownloadResponse.validateJSON(data['diffDownloadResponse']);
        }
        // validate the optional field `diffUploadRequest`
        if (data['diffUploadRequest']) { // data not null
          GdataDiffUploadRequest.validateJSON(data['diffUploadRequest']);
        }
        // validate the optional field `diffUploadResponse`
        if (data['diffUploadResponse']) { // data not null
          GdataDiffUploadResponse.validateJSON(data['diffUploadResponse']);
        }
        // validate the optional field `diffVersionResponse`
        if (data['diffVersionResponse']) { // data not null
          GdataDiffVersionResponse.validateJSON(data['diffVersionResponse']);
        }
        // validate the optional field `downloadParameters`
        if (data['downloadParameters']) { // data not null
          GdataDownloadParameters.validateJSON(data['downloadParameters']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['length'] && !(typeof data['length'] === 'string' || data['length'] instanceof String)) {
            throw new Error("Expected the field `length` to be a primitive type in the JSON string but got " + data['length']);
        }
        // validate the optional field `objectId`
        if (data['objectId']) { // data not null
          GdataObjectId.validateJSON(data['objectId']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['referenceType'] && !(typeof data['referenceType'] === 'string' || data['referenceType'] instanceof String)) {
            throw new Error("Expected the field `referenceType` to be a primitive type in the JSON string but got " + data['referenceType']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}



/**
 * gdata
 * @member {String} algorithm
 */
GdataMedia.prototype['algorithm'] = undefined;

/**
 * gdata
 * @member {Blob} bigstoreObjectRef
 */
GdataMedia.prototype['bigstoreObjectRef'] = undefined;

/**
 * gdata
 * @member {Blob} blobRef
 */
GdataMedia.prototype['blobRef'] = undefined;

/**
 * @member {module:model/GdataBlobstore2Info} blobstore2Info
 */
GdataMedia.prototype['blobstore2Info'] = undefined;

/**
 * gdata
 * @member {Array.<module:model/GdataCompositeMedia>} compositeMedia
 */
GdataMedia.prototype['compositeMedia'] = undefined;

/**
 * gdata
 * @member {String} contentType
 */
GdataMedia.prototype['contentType'] = undefined;

/**
 * @member {module:model/GdataContentTypeInfo} contentTypeInfo
 */
GdataMedia.prototype['contentTypeInfo'] = undefined;

/**
 * gdata
 * @member {Blob} cosmoBinaryReference
 */
GdataMedia.prototype['cosmoBinaryReference'] = undefined;

/**
 * gdata
 * @member {Number} crc32cHash
 */
GdataMedia.prototype['crc32cHash'] = undefined;

/**
 * @member {module:model/GdataDiffChecksumsResponse} diffChecksumsResponse
 */
GdataMedia.prototype['diffChecksumsResponse'] = undefined;

/**
 * @member {module:model/GdataDiffDownloadResponse} diffDownloadResponse
 */
GdataMedia.prototype['diffDownloadResponse'] = undefined;

/**
 * @member {module:model/GdataDiffUploadRequest} diffUploadRequest
 */
GdataMedia.prototype['diffUploadRequest'] = undefined;

/**
 * @member {module:model/GdataDiffUploadResponse} diffUploadResponse
 */
GdataMedia.prototype['diffUploadResponse'] = undefined;

/**
 * @member {module:model/GdataDiffVersionResponse} diffVersionResponse
 */
GdataMedia.prototype['diffVersionResponse'] = undefined;

/**
 * @member {module:model/GdataDownloadParameters} downloadParameters
 */
GdataMedia.prototype['downloadParameters'] = undefined;

/**
 * gdata
 * @member {String} filename
 */
GdataMedia.prototype['filename'] = undefined;

/**
 * gdata
 * @member {String} hash
 */
GdataMedia.prototype['hash'] = undefined;

/**
 * gdata
 * @member {Boolean} hashVerified
 */
GdataMedia.prototype['hashVerified'] = undefined;

/**
 * gdata
 * @member {Blob} inline
 */
GdataMedia.prototype['inline'] = undefined;

/**
 * gdata
 * @member {Boolean} isPotentialRetry
 */
GdataMedia.prototype['isPotentialRetry'] = undefined;

/**
 * gdata
 * @member {String} length
 */
GdataMedia.prototype['length'] = undefined;

/**
 * gdata
 * @member {Blob} md5Hash
 */
GdataMedia.prototype['md5Hash'] = undefined;

/**
 * gdata
 * @member {Blob} mediaId
 */
GdataMedia.prototype['mediaId'] = undefined;

/**
 * @member {module:model/GdataObjectId} objectId
 */
GdataMedia.prototype['objectId'] = undefined;

/**
 * gdata
 * @member {String} path
 */
GdataMedia.prototype['path'] = undefined;

/**
 * gdata
 * @member {module:model/GdataMedia.ReferenceTypeEnum} referenceType
 */
GdataMedia.prototype['referenceType'] = undefined;

/**
 * gdata
 * @member {Blob} sha1Hash
 */
GdataMedia.prototype['sha1Hash'] = undefined;

/**
 * gdata
 * @member {Blob} sha256Hash
 */
GdataMedia.prototype['sha256Hash'] = undefined;

/**
 * gdata
 * @member {String} timestamp
 */
GdataMedia.prototype['timestamp'] = undefined;

/**
 * gdata
 * @member {String} token
 */
GdataMedia.prototype['token'] = undefined;





/**
 * Allowed values for the <code>referenceType</code> property.
 * @enum {String}
 * @readonly
 */
GdataMedia['ReferenceTypeEnum'] = {

    /**
     * value: "PATH"
     * @const
     */
    "PATH": "PATH",

    /**
     * value: "BLOB_REF"
     * @const
     */
    "BLOB_REF": "BLOB_REF",

    /**
     * value: "INLINE"
     * @const
     */
    "INLINE": "INLINE",

    /**
     * value: "GET_MEDIA"
     * @const
     */
    "GET_MEDIA": "GET_MEDIA",

    /**
     * value: "COMPOSITE_MEDIA"
     * @const
     */
    "COMPOSITE_MEDIA": "COMPOSITE_MEDIA",

    /**
     * value: "BIGSTORE_REF"
     * @const
     */
    "BIGSTORE_REF": "BIGSTORE_REF",

    /**
     * value: "DIFF_VERSION_RESPONSE"
     * @const
     */
    "DIFF_VERSION_RESPONSE": "DIFF_VERSION_RESPONSE",

    /**
     * value: "DIFF_CHECKSUMS_RESPONSE"
     * @const
     */
    "DIFF_CHECKSUMS_RESPONSE": "DIFF_CHECKSUMS_RESPONSE",

    /**
     * value: "DIFF_DOWNLOAD_RESPONSE"
     * @const
     */
    "DIFF_DOWNLOAD_RESPONSE": "DIFF_DOWNLOAD_RESPONSE",

    /**
     * value: "DIFF_UPLOAD_REQUEST"
     * @const
     */
    "DIFF_UPLOAD_REQUEST": "DIFF_UPLOAD_REQUEST",

    /**
     * value: "DIFF_UPLOAD_RESPONSE"
     * @const
     */
    "DIFF_UPLOAD_RESPONSE": "DIFF_UPLOAD_RESPONSE",

    /**
     * value: "COSMO_BINARY_REFERENCE"
     * @const
     */
    "COSMO_BINARY_REFERENCE": "COSMO_BINARY_REFERENCE",

    /**
     * value: "ARBITRARY_BYTES"
     * @const
     */
    "ARBITRARY_BYTES": "ARBITRARY_BYTES"
};



export default GdataMedia;

