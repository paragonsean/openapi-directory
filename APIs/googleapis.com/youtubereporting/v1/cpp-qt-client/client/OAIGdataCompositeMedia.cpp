/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdataCompositeMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdataCompositeMedia::OAIGdataCompositeMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdataCompositeMedia::OAIGdataCompositeMedia() {
    this->initializeModel();
}

OAIGdataCompositeMedia::~OAIGdataCompositeMedia() {}

void OAIGdataCompositeMedia::initializeModel() {

    m_blob_ref_isSet = false;
    m_blob_ref_isValid = false;

    m_blobstore2_info_isSet = false;
    m_blobstore2_info_isValid = false;

    m_cosmo_binary_reference_isSet = false;
    m_cosmo_binary_reference_isValid = false;

    m_crc32c_hash_isSet = false;
    m_crc32c_hash_isValid = false;

    m_r_inline_isSet = false;
    m_r_inline_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_md5_hash_isSet = false;
    m_md5_hash_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_reference_type_isSet = false;
    m_reference_type_isValid = false;

    m_sha1_hash_isSet = false;
    m_sha1_hash_isValid = false;
}

void OAIGdataCompositeMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdataCompositeMedia::fromJsonObject(QJsonObject json) {

    m_blob_ref_isValid = ::OpenAPI::fromJsonValue(m_blob_ref, json[QString("blobRef")]);
    m_blob_ref_isSet = !json[QString("blobRef")].isNull() && m_blob_ref_isValid;

    m_blobstore2_info_isValid = ::OpenAPI::fromJsonValue(m_blobstore2_info, json[QString("blobstore2Info")]);
    m_blobstore2_info_isSet = !json[QString("blobstore2Info")].isNull() && m_blobstore2_info_isValid;

    m_cosmo_binary_reference_isValid = ::OpenAPI::fromJsonValue(m_cosmo_binary_reference, json[QString("cosmoBinaryReference")]);
    m_cosmo_binary_reference_isSet = !json[QString("cosmoBinaryReference")].isNull() && m_cosmo_binary_reference_isValid;

    m_crc32c_hash_isValid = ::OpenAPI::fromJsonValue(m_crc32c_hash, json[QString("crc32cHash")]);
    m_crc32c_hash_isSet = !json[QString("crc32cHash")].isNull() && m_crc32c_hash_isValid;

    m_r_inline_isValid = ::OpenAPI::fromJsonValue(m_r_inline, json[QString("inline")]);
    m_r_inline_isSet = !json[QString("inline")].isNull() && m_r_inline_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_md5_hash_isValid = ::OpenAPI::fromJsonValue(m_md5_hash, json[QString("md5Hash")]);
    m_md5_hash_isSet = !json[QString("md5Hash")].isNull() && m_md5_hash_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_reference_type_isValid = ::OpenAPI::fromJsonValue(m_reference_type, json[QString("referenceType")]);
    m_reference_type_isSet = !json[QString("referenceType")].isNull() && m_reference_type_isValid;

    m_sha1_hash_isValid = ::OpenAPI::fromJsonValue(m_sha1_hash, json[QString("sha1Hash")]);
    m_sha1_hash_isSet = !json[QString("sha1Hash")].isNull() && m_sha1_hash_isValid;
}

QString OAIGdataCompositeMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdataCompositeMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_ref_isSet) {
        obj.insert(QString("blobRef"), ::OpenAPI::toJsonValue(m_blob_ref));
    }
    if (m_blobstore2_info.isSet()) {
        obj.insert(QString("blobstore2Info"), ::OpenAPI::toJsonValue(m_blobstore2_info));
    }
    if (m_cosmo_binary_reference_isSet) {
        obj.insert(QString("cosmoBinaryReference"), ::OpenAPI::toJsonValue(m_cosmo_binary_reference));
    }
    if (m_crc32c_hash_isSet) {
        obj.insert(QString("crc32cHash"), ::OpenAPI::toJsonValue(m_crc32c_hash));
    }
    if (m_r_inline_isSet) {
        obj.insert(QString("inline"), ::OpenAPI::toJsonValue(m_r_inline));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_md5_hash_isSet) {
        obj.insert(QString("md5Hash"), ::OpenAPI::toJsonValue(m_md5_hash));
    }
    if (m_object_id.isSet()) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_reference_type_isSet) {
        obj.insert(QString("referenceType"), ::OpenAPI::toJsonValue(m_reference_type));
    }
    if (m_sha1_hash_isSet) {
        obj.insert(QString("sha1Hash"), ::OpenAPI::toJsonValue(m_sha1_hash));
    }
    return obj;
}

QByteArray OAIGdataCompositeMedia::getBlobRef() const {
    return m_blob_ref;
}
void OAIGdataCompositeMedia::setBlobRef(const QByteArray &blob_ref) {
    m_blob_ref = blob_ref;
    m_blob_ref_isSet = true;
}

bool OAIGdataCompositeMedia::is_blob_ref_Set() const{
    return m_blob_ref_isSet;
}

bool OAIGdataCompositeMedia::is_blob_ref_Valid() const{
    return m_blob_ref_isValid;
}

OAIGdataBlobstore2Info OAIGdataCompositeMedia::getBlobstore2Info() const {
    return m_blobstore2_info;
}
void OAIGdataCompositeMedia::setBlobstore2Info(const OAIGdataBlobstore2Info &blobstore2_info) {
    m_blobstore2_info = blobstore2_info;
    m_blobstore2_info_isSet = true;
}

bool OAIGdataCompositeMedia::is_blobstore2_info_Set() const{
    return m_blobstore2_info_isSet;
}

bool OAIGdataCompositeMedia::is_blobstore2_info_Valid() const{
    return m_blobstore2_info_isValid;
}

QByteArray OAIGdataCompositeMedia::getCosmoBinaryReference() const {
    return m_cosmo_binary_reference;
}
void OAIGdataCompositeMedia::setCosmoBinaryReference(const QByteArray &cosmo_binary_reference) {
    m_cosmo_binary_reference = cosmo_binary_reference;
    m_cosmo_binary_reference_isSet = true;
}

bool OAIGdataCompositeMedia::is_cosmo_binary_reference_Set() const{
    return m_cosmo_binary_reference_isSet;
}

bool OAIGdataCompositeMedia::is_cosmo_binary_reference_Valid() const{
    return m_cosmo_binary_reference_isValid;
}

qint32 OAIGdataCompositeMedia::getCrc32cHash() const {
    return m_crc32c_hash;
}
void OAIGdataCompositeMedia::setCrc32cHash(const qint32 &crc32c_hash) {
    m_crc32c_hash = crc32c_hash;
    m_crc32c_hash_isSet = true;
}

bool OAIGdataCompositeMedia::is_crc32c_hash_Set() const{
    return m_crc32c_hash_isSet;
}

bool OAIGdataCompositeMedia::is_crc32c_hash_Valid() const{
    return m_crc32c_hash_isValid;
}

QByteArray OAIGdataCompositeMedia::getRInline() const {
    return m_r_inline;
}
void OAIGdataCompositeMedia::setRInline(const QByteArray &r_inline) {
    m_r_inline = r_inline;
    m_r_inline_isSet = true;
}

bool OAIGdataCompositeMedia::is_r_inline_Set() const{
    return m_r_inline_isSet;
}

bool OAIGdataCompositeMedia::is_r_inline_Valid() const{
    return m_r_inline_isValid;
}

QString OAIGdataCompositeMedia::getLength() const {
    return m_length;
}
void OAIGdataCompositeMedia::setLength(const QString &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGdataCompositeMedia::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGdataCompositeMedia::is_length_Valid() const{
    return m_length_isValid;
}

QByteArray OAIGdataCompositeMedia::getMd5Hash() const {
    return m_md5_hash;
}
void OAIGdataCompositeMedia::setMd5Hash(const QByteArray &md5_hash) {
    m_md5_hash = md5_hash;
    m_md5_hash_isSet = true;
}

bool OAIGdataCompositeMedia::is_md5_hash_Set() const{
    return m_md5_hash_isSet;
}

bool OAIGdataCompositeMedia::is_md5_hash_Valid() const{
    return m_md5_hash_isValid;
}

OAIGdataObjectId OAIGdataCompositeMedia::getObjectId() const {
    return m_object_id;
}
void OAIGdataCompositeMedia::setObjectId(const OAIGdataObjectId &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIGdataCompositeMedia::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIGdataCompositeMedia::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIGdataCompositeMedia::getPath() const {
    return m_path;
}
void OAIGdataCompositeMedia::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGdataCompositeMedia::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGdataCompositeMedia::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGdataCompositeMedia::getReferenceType() const {
    return m_reference_type;
}
void OAIGdataCompositeMedia::setReferenceType(const QString &reference_type) {
    m_reference_type = reference_type;
    m_reference_type_isSet = true;
}

bool OAIGdataCompositeMedia::is_reference_type_Set() const{
    return m_reference_type_isSet;
}

bool OAIGdataCompositeMedia::is_reference_type_Valid() const{
    return m_reference_type_isValid;
}

QByteArray OAIGdataCompositeMedia::getSha1Hash() const {
    return m_sha1_hash;
}
void OAIGdataCompositeMedia::setSha1Hash(const QByteArray &sha1_hash) {
    m_sha1_hash = sha1_hash;
    m_sha1_hash_isSet = true;
}

bool OAIGdataCompositeMedia::is_sha1_hash_Set() const{
    return m_sha1_hash_isSet;
}

bool OAIGdataCompositeMedia::is_sha1_hash_Valid() const{
    return m_sha1_hash_isValid;
}

bool OAIGdataCompositeMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobstore2_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cosmo_binary_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crc32c_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_inline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha1_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdataCompositeMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
