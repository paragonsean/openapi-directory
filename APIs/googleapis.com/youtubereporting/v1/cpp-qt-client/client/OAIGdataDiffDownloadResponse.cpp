/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdataDiffDownloadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdataDiffDownloadResponse::OAIGdataDiffDownloadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdataDiffDownloadResponse::OAIGdataDiffDownloadResponse() {
    this->initializeModel();
}

OAIGdataDiffDownloadResponse::~OAIGdataDiffDownloadResponse() {}

void OAIGdataDiffDownloadResponse::initializeModel() {

    m_object_location_isSet = false;
    m_object_location_isValid = false;
}

void OAIGdataDiffDownloadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdataDiffDownloadResponse::fromJsonObject(QJsonObject json) {

    m_object_location_isValid = ::OpenAPI::fromJsonValue(m_object_location, json[QString("objectLocation")]);
    m_object_location_isSet = !json[QString("objectLocation")].isNull() && m_object_location_isValid;
}

QString OAIGdataDiffDownloadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdataDiffDownloadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_object_location.isSet()) {
        obj.insert(QString("objectLocation"), ::OpenAPI::toJsonValue(m_object_location));
    }
    return obj;
}

OAIGdataCompositeMedia OAIGdataDiffDownloadResponse::getObjectLocation() const {
    return m_object_location;
}
void OAIGdataDiffDownloadResponse::setObjectLocation(const OAIGdataCompositeMedia &object_location) {
    m_object_location = object_location;
    m_object_location_isSet = true;
}

bool OAIGdataDiffDownloadResponse::is_object_location_Set() const{
    return m_object_location_isSet;
}

bool OAIGdataDiffDownloadResponse::is_object_location_Valid() const{
    return m_object_location_isValid;
}

bool OAIGdataDiffDownloadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdataDiffDownloadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
