/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdataDiffChecksumsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdataDiffChecksumsResponse::OAIGdataDiffChecksumsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdataDiffChecksumsResponse::OAIGdataDiffChecksumsResponse() {
    this->initializeModel();
}

OAIGdataDiffChecksumsResponse::~OAIGdataDiffChecksumsResponse() {}

void OAIGdataDiffChecksumsResponse::initializeModel() {

    m_checksums_location_isSet = false;
    m_checksums_location_isValid = false;

    m_chunk_size_bytes_isSet = false;
    m_chunk_size_bytes_isValid = false;

    m_object_location_isSet = false;
    m_object_location_isValid = false;

    m_object_size_bytes_isSet = false;
    m_object_size_bytes_isValid = false;

    m_object_version_isSet = false;
    m_object_version_isValid = false;
}

void OAIGdataDiffChecksumsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdataDiffChecksumsResponse::fromJsonObject(QJsonObject json) {

    m_checksums_location_isValid = ::OpenAPI::fromJsonValue(m_checksums_location, json[QString("checksumsLocation")]);
    m_checksums_location_isSet = !json[QString("checksumsLocation")].isNull() && m_checksums_location_isValid;

    m_chunk_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_chunk_size_bytes, json[QString("chunkSizeBytes")]);
    m_chunk_size_bytes_isSet = !json[QString("chunkSizeBytes")].isNull() && m_chunk_size_bytes_isValid;

    m_object_location_isValid = ::OpenAPI::fromJsonValue(m_object_location, json[QString("objectLocation")]);
    m_object_location_isSet = !json[QString("objectLocation")].isNull() && m_object_location_isValid;

    m_object_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_object_size_bytes, json[QString("objectSizeBytes")]);
    m_object_size_bytes_isSet = !json[QString("objectSizeBytes")].isNull() && m_object_size_bytes_isValid;

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("objectVersion")]);
    m_object_version_isSet = !json[QString("objectVersion")].isNull() && m_object_version_isValid;
}

QString OAIGdataDiffChecksumsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdataDiffChecksumsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_checksums_location.isSet()) {
        obj.insert(QString("checksumsLocation"), ::OpenAPI::toJsonValue(m_checksums_location));
    }
    if (m_chunk_size_bytes_isSet) {
        obj.insert(QString("chunkSizeBytes"), ::OpenAPI::toJsonValue(m_chunk_size_bytes));
    }
    if (m_object_location.isSet()) {
        obj.insert(QString("objectLocation"), ::OpenAPI::toJsonValue(m_object_location));
    }
    if (m_object_size_bytes_isSet) {
        obj.insert(QString("objectSizeBytes"), ::OpenAPI::toJsonValue(m_object_size_bytes));
    }
    if (m_object_version_isSet) {
        obj.insert(QString("objectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    return obj;
}

OAIGdataCompositeMedia OAIGdataDiffChecksumsResponse::getChecksumsLocation() const {
    return m_checksums_location;
}
void OAIGdataDiffChecksumsResponse::setChecksumsLocation(const OAIGdataCompositeMedia &checksums_location) {
    m_checksums_location = checksums_location;
    m_checksums_location_isSet = true;
}

bool OAIGdataDiffChecksumsResponse::is_checksums_location_Set() const{
    return m_checksums_location_isSet;
}

bool OAIGdataDiffChecksumsResponse::is_checksums_location_Valid() const{
    return m_checksums_location_isValid;
}

QString OAIGdataDiffChecksumsResponse::getChunkSizeBytes() const {
    return m_chunk_size_bytes;
}
void OAIGdataDiffChecksumsResponse::setChunkSizeBytes(const QString &chunk_size_bytes) {
    m_chunk_size_bytes = chunk_size_bytes;
    m_chunk_size_bytes_isSet = true;
}

bool OAIGdataDiffChecksumsResponse::is_chunk_size_bytes_Set() const{
    return m_chunk_size_bytes_isSet;
}

bool OAIGdataDiffChecksumsResponse::is_chunk_size_bytes_Valid() const{
    return m_chunk_size_bytes_isValid;
}

OAIGdataCompositeMedia OAIGdataDiffChecksumsResponse::getObjectLocation() const {
    return m_object_location;
}
void OAIGdataDiffChecksumsResponse::setObjectLocation(const OAIGdataCompositeMedia &object_location) {
    m_object_location = object_location;
    m_object_location_isSet = true;
}

bool OAIGdataDiffChecksumsResponse::is_object_location_Set() const{
    return m_object_location_isSet;
}

bool OAIGdataDiffChecksumsResponse::is_object_location_Valid() const{
    return m_object_location_isValid;
}

QString OAIGdataDiffChecksumsResponse::getObjectSizeBytes() const {
    return m_object_size_bytes;
}
void OAIGdataDiffChecksumsResponse::setObjectSizeBytes(const QString &object_size_bytes) {
    m_object_size_bytes = object_size_bytes;
    m_object_size_bytes_isSet = true;
}

bool OAIGdataDiffChecksumsResponse::is_object_size_bytes_Set() const{
    return m_object_size_bytes_isSet;
}

bool OAIGdataDiffChecksumsResponse::is_object_size_bytes_Valid() const{
    return m_object_size_bytes_isValid;
}

QString OAIGdataDiffChecksumsResponse::getObjectVersion() const {
    return m_object_version;
}
void OAIGdataDiffChecksumsResponse::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAIGdataDiffChecksumsResponse::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAIGdataDiffChecksumsResponse::is_object_version_Valid() const{
    return m_object_version_isValid;
}

bool OAIGdataDiffChecksumsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksums_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunk_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdataDiffChecksumsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
