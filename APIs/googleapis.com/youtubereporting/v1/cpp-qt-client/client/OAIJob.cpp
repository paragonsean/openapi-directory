/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_report_type_id_isSet = false;
    m_report_type_id_isValid = false;

    m_system_managed_isSet = false;
    m_system_managed_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_report_type_id_isValid = ::OpenAPI::fromJsonValue(m_report_type_id, json[QString("reportTypeId")]);
    m_report_type_id_isSet = !json[QString("reportTypeId")].isNull() && m_report_type_id_isValid;

    m_system_managed_isValid = ::OpenAPI::fromJsonValue(m_system_managed, json[QString("systemManaged")]);
    m_system_managed_isSet = !json[QString("systemManaged")].isNull() && m_system_managed_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_report_type_id_isSet) {
        obj.insert(QString("reportTypeId"), ::OpenAPI::toJsonValue(m_report_type_id));
    }
    if (m_system_managed_isSet) {
        obj.insert(QString("systemManaged"), ::OpenAPI::toJsonValue(m_system_managed));
    }
    return obj;
}

QString OAIJob::getCreateTime() const {
    return m_create_time;
}
void OAIJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIJob::getExpireTime() const {
    return m_expire_time;
}
void OAIJob::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIJob::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIJob::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIJob::getId() const {
    return m_id;
}
void OAIJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJob::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJob::getName() const {
    return m_name;
}
void OAIJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJob::getReportTypeId() const {
    return m_report_type_id;
}
void OAIJob::setReportTypeId(const QString &report_type_id) {
    m_report_type_id = report_type_id;
    m_report_type_id_isSet = true;
}

bool OAIJob::is_report_type_id_Set() const{
    return m_report_type_id_isSet;
}

bool OAIJob::is_report_type_id_Valid() const{
    return m_report_type_id_isValid;
}

bool OAIJob::isSystemManaged() const {
    return m_system_managed;
}
void OAIJob::setSystemManaged(const bool &system_managed) {
    m_system_managed = system_managed;
    m_system_managed_isSet = true;
}

bool OAIJob::is_system_managed_Set() const{
    return m_system_managed_isSet;
}

bool OAIJob::is_system_managed_Valid() const{
    return m_system_managed_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_managed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
