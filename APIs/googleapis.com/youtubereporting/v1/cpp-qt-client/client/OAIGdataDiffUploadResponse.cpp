/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdataDiffUploadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdataDiffUploadResponse::OAIGdataDiffUploadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdataDiffUploadResponse::OAIGdataDiffUploadResponse() {
    this->initializeModel();
}

OAIGdataDiffUploadResponse::~OAIGdataDiffUploadResponse() {}

void OAIGdataDiffUploadResponse::initializeModel() {

    m_object_version_isSet = false;
    m_object_version_isValid = false;

    m_original_object_isSet = false;
    m_original_object_isValid = false;
}

void OAIGdataDiffUploadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdataDiffUploadResponse::fromJsonObject(QJsonObject json) {

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("objectVersion")]);
    m_object_version_isSet = !json[QString("objectVersion")].isNull() && m_object_version_isValid;

    m_original_object_isValid = ::OpenAPI::fromJsonValue(m_original_object, json[QString("originalObject")]);
    m_original_object_isSet = !json[QString("originalObject")].isNull() && m_original_object_isValid;
}

QString OAIGdataDiffUploadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdataDiffUploadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_object_version_isSet) {
        obj.insert(QString("objectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    if (m_original_object.isSet()) {
        obj.insert(QString("originalObject"), ::OpenAPI::toJsonValue(m_original_object));
    }
    return obj;
}

QString OAIGdataDiffUploadResponse::getObjectVersion() const {
    return m_object_version;
}
void OAIGdataDiffUploadResponse::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAIGdataDiffUploadResponse::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAIGdataDiffUploadResponse::is_object_version_Valid() const{
    return m_object_version_isValid;
}

OAIGdataCompositeMedia OAIGdataDiffUploadResponse::getOriginalObject() const {
    return m_original_object;
}
void OAIGdataDiffUploadResponse::setOriginalObject(const OAIGdataCompositeMedia &original_object) {
    m_original_object = original_object;
    m_original_object_isSet = true;
}

bool OAIGdataDiffUploadResponse::is_original_object_Set() const{
    return m_original_object_isSet;
}

bool OAIGdataDiffUploadResponse::is_original_object_Valid() const{
    return m_original_object_isValid;
}

bool OAIGdataDiffUploadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdataDiffUploadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
