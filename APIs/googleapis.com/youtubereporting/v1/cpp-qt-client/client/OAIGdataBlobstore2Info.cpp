/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGdataBlobstore2Info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGdataBlobstore2Info::OAIGdataBlobstore2Info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGdataBlobstore2Info::OAIGdataBlobstore2Info() {
    this->initializeModel();
}

OAIGdataBlobstore2Info::~OAIGdataBlobstore2Info() {}

void OAIGdataBlobstore2Info::initializeModel() {

    m_blob_generation_isSet = false;
    m_blob_generation_isValid = false;

    m_blob_id_isSet = false;
    m_blob_id_isValid = false;

    m_download_read_handle_isSet = false;
    m_download_read_handle_isValid = false;

    m_read_token_isSet = false;
    m_read_token_isValid = false;

    m_upload_metadata_container_isSet = false;
    m_upload_metadata_container_isValid = false;
}

void OAIGdataBlobstore2Info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGdataBlobstore2Info::fromJsonObject(QJsonObject json) {

    m_blob_generation_isValid = ::OpenAPI::fromJsonValue(m_blob_generation, json[QString("blobGeneration")]);
    m_blob_generation_isSet = !json[QString("blobGeneration")].isNull() && m_blob_generation_isValid;

    m_blob_id_isValid = ::OpenAPI::fromJsonValue(m_blob_id, json[QString("blobId")]);
    m_blob_id_isSet = !json[QString("blobId")].isNull() && m_blob_id_isValid;

    m_download_read_handle_isValid = ::OpenAPI::fromJsonValue(m_download_read_handle, json[QString("downloadReadHandle")]);
    m_download_read_handle_isSet = !json[QString("downloadReadHandle")].isNull() && m_download_read_handle_isValid;

    m_read_token_isValid = ::OpenAPI::fromJsonValue(m_read_token, json[QString("readToken")]);
    m_read_token_isSet = !json[QString("readToken")].isNull() && m_read_token_isValid;

    m_upload_metadata_container_isValid = ::OpenAPI::fromJsonValue(m_upload_metadata_container, json[QString("uploadMetadataContainer")]);
    m_upload_metadata_container_isSet = !json[QString("uploadMetadataContainer")].isNull() && m_upload_metadata_container_isValid;
}

QString OAIGdataBlobstore2Info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGdataBlobstore2Info::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_generation_isSet) {
        obj.insert(QString("blobGeneration"), ::OpenAPI::toJsonValue(m_blob_generation));
    }
    if (m_blob_id_isSet) {
        obj.insert(QString("blobId"), ::OpenAPI::toJsonValue(m_blob_id));
    }
    if (m_download_read_handle_isSet) {
        obj.insert(QString("downloadReadHandle"), ::OpenAPI::toJsonValue(m_download_read_handle));
    }
    if (m_read_token_isSet) {
        obj.insert(QString("readToken"), ::OpenAPI::toJsonValue(m_read_token));
    }
    if (m_upload_metadata_container_isSet) {
        obj.insert(QString("uploadMetadataContainer"), ::OpenAPI::toJsonValue(m_upload_metadata_container));
    }
    return obj;
}

QString OAIGdataBlobstore2Info::getBlobGeneration() const {
    return m_blob_generation;
}
void OAIGdataBlobstore2Info::setBlobGeneration(const QString &blob_generation) {
    m_blob_generation = blob_generation;
    m_blob_generation_isSet = true;
}

bool OAIGdataBlobstore2Info::is_blob_generation_Set() const{
    return m_blob_generation_isSet;
}

bool OAIGdataBlobstore2Info::is_blob_generation_Valid() const{
    return m_blob_generation_isValid;
}

QString OAIGdataBlobstore2Info::getBlobId() const {
    return m_blob_id;
}
void OAIGdataBlobstore2Info::setBlobId(const QString &blob_id) {
    m_blob_id = blob_id;
    m_blob_id_isSet = true;
}

bool OAIGdataBlobstore2Info::is_blob_id_Set() const{
    return m_blob_id_isSet;
}

bool OAIGdataBlobstore2Info::is_blob_id_Valid() const{
    return m_blob_id_isValid;
}

QByteArray OAIGdataBlobstore2Info::getDownloadReadHandle() const {
    return m_download_read_handle;
}
void OAIGdataBlobstore2Info::setDownloadReadHandle(const QByteArray &download_read_handle) {
    m_download_read_handle = download_read_handle;
    m_download_read_handle_isSet = true;
}

bool OAIGdataBlobstore2Info::is_download_read_handle_Set() const{
    return m_download_read_handle_isSet;
}

bool OAIGdataBlobstore2Info::is_download_read_handle_Valid() const{
    return m_download_read_handle_isValid;
}

QString OAIGdataBlobstore2Info::getReadToken() const {
    return m_read_token;
}
void OAIGdataBlobstore2Info::setReadToken(const QString &read_token) {
    m_read_token = read_token;
    m_read_token_isSet = true;
}

bool OAIGdataBlobstore2Info::is_read_token_Set() const{
    return m_read_token_isSet;
}

bool OAIGdataBlobstore2Info::is_read_token_Valid() const{
    return m_read_token_isValid;
}

QByteArray OAIGdataBlobstore2Info::getUploadMetadataContainer() const {
    return m_upload_metadata_container;
}
void OAIGdataBlobstore2Info::setUploadMetadataContainer(const QByteArray &upload_metadata_container) {
    m_upload_metadata_container = upload_metadata_container;
    m_upload_metadata_container_isSet = true;
}

bool OAIGdataBlobstore2Info::is_upload_metadata_container_Set() const{
    return m_upload_metadata_container_isSet;
}

bool OAIGdataBlobstore2Info::is_upload_metadata_container_Valid() const{
    return m_upload_metadata_container_isValid;
}

bool OAIGdataBlobstore2Info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_read_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_metadata_container_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGdataBlobstore2Info::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
