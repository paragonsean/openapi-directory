/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_expire_time_isSet = false;
    m_job_expire_time_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_expire_time_isValid = ::OpenAPI::fromJsonValue(m_job_expire_time, json[QString("jobExpireTime")]);
    m_job_expire_time_isSet = !json[QString("jobExpireTime")].isNull() && m_job_expire_time_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_expire_time_isSet) {
        obj.insert(QString("jobExpireTime"), ::OpenAPI::toJsonValue(m_job_expire_time));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIReport::getCreateTime() const {
    return m_create_time;
}
void OAIReport::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIReport::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIReport::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIReport::getDownloadUrl() const {
    return m_download_url;
}
void OAIReport::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIReport::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIReport::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIReport::getEndTime() const {
    return m_end_time;
}
void OAIReport::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIReport::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIReport::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIReport::getId() const {
    return m_id;
}
void OAIReport::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReport::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReport::getJobExpireTime() const {
    return m_job_expire_time;
}
void OAIReport::setJobExpireTime(const QString &job_expire_time) {
    m_job_expire_time = job_expire_time;
    m_job_expire_time_isSet = true;
}

bool OAIReport::is_job_expire_time_Set() const{
    return m_job_expire_time_isSet;
}

bool OAIReport::is_job_expire_time_Valid() const{
    return m_job_expire_time_isValid;
}

QString OAIReport::getJobId() const {
    return m_job_id;
}
void OAIReport::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIReport::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIReport::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIReport::getStartTime() const {
    return m_start_time;
}
void OAIReport::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReport::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReport::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
