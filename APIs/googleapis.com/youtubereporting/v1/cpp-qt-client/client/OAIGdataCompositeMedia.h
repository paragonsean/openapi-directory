/**
 * YouTube Reporting API
 * Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGdataCompositeMedia.h
 *
 * gdata
 */

#ifndef OAIGdataCompositeMedia_H
#define OAIGdataCompositeMedia_H

#include <QJsonObject>

#include "OAIGdataBlobstore2Info.h"
#include "OAIGdataObjectId.h"
#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGdataBlobstore2Info;
class OAIGdataObjectId;

class OAIGdataCompositeMedia : public OAIObject {
public:
    OAIGdataCompositeMedia();
    OAIGdataCompositeMedia(QString json);
    ~OAIGdataCompositeMedia() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED QByteArray getBlobRef() const;
    Q_DECL_DEPRECATED void setBlobRef(const QByteArray &blob_ref);
    Q_DECL_DEPRECATED bool is_blob_ref_Set() const;
    Q_DECL_DEPRECATED bool is_blob_ref_Valid() const;

    OAIGdataBlobstore2Info getBlobstore2Info() const;
    void setBlobstore2Info(const OAIGdataBlobstore2Info &blobstore2_info);
    bool is_blobstore2_info_Set() const;
    bool is_blobstore2_info_Valid() const;

    QByteArray getCosmoBinaryReference() const;
    void setCosmoBinaryReference(const QByteArray &cosmo_binary_reference);
    bool is_cosmo_binary_reference_Set() const;
    bool is_cosmo_binary_reference_Valid() const;

    qint32 getCrc32cHash() const;
    void setCrc32cHash(const qint32 &crc32c_hash);
    bool is_crc32c_hash_Set() const;
    bool is_crc32c_hash_Valid() const;

    QByteArray getRInline() const;
    void setRInline(const QByteArray &r_inline);
    bool is_r_inline_Set() const;
    bool is_r_inline_Valid() const;

    QString getLength() const;
    void setLength(const QString &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    QByteArray getMd5Hash() const;
    void setMd5Hash(const QByteArray &md5_hash);
    bool is_md5_hash_Set() const;
    bool is_md5_hash_Valid() const;

    OAIGdataObjectId getObjectId() const;
    void setObjectId(const OAIGdataObjectId &object_id);
    bool is_object_id_Set() const;
    bool is_object_id_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getReferenceType() const;
    void setReferenceType(const QString &reference_type);
    bool is_reference_type_Set() const;
    bool is_reference_type_Valid() const;

    QByteArray getSha1Hash() const;
    void setSha1Hash(const QByteArray &sha1_hash);
    bool is_sha1_hash_Set() const;
    bool is_sha1_hash_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_blob_ref;
    bool m_blob_ref_isSet;
    bool m_blob_ref_isValid;

    OAIGdataBlobstore2Info m_blobstore2_info;
    bool m_blobstore2_info_isSet;
    bool m_blobstore2_info_isValid;

    QByteArray m_cosmo_binary_reference;
    bool m_cosmo_binary_reference_isSet;
    bool m_cosmo_binary_reference_isValid;

    qint32 m_crc32c_hash;
    bool m_crc32c_hash_isSet;
    bool m_crc32c_hash_isValid;

    QByteArray m_r_inline;
    bool m_r_inline_isSet;
    bool m_r_inline_isValid;

    QString m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    QByteArray m_md5_hash;
    bool m_md5_hash_isSet;
    bool m_md5_hash_isValid;

    OAIGdataObjectId m_object_id;
    bool m_object_id_isSet;
    bool m_object_id_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_reference_type;
    bool m_reference_type_isSet;
    bool m_reference_type_isValid;

    QByteArray m_sha1_hash;
    bool m_sha1_hash_isSet;
    bool m_sha1_hash_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGdataCompositeMedia)

#endif // OAIGdataCompositeMedia_H
