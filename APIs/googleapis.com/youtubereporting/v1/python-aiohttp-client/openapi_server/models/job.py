# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, expire_time: str=None, id: str=None, name: str=None, report_type_id: str=None, system_managed: bool=None):
        """Job - a model defined in OpenAPI

        :param create_time: The create_time of this Job.
        :param expire_time: The expire_time of this Job.
        :param id: The id of this Job.
        :param name: The name of this Job.
        :param report_type_id: The report_type_id of this Job.
        :param system_managed: The system_managed of this Job.
        """
        self.openapi_types = {
            'create_time': str,
            'expire_time': str,
            'id': str,
            'name': str,
            'report_type_id': str,
            'system_managed': bool
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'expire_time': 'expireTime',
            'id': 'id',
            'name': 'name',
            'report_type_id': 'reportTypeId',
            'system_managed': 'systemManaged'
        }

        self._create_time = create_time
        self._expire_time = expire_time
        self._id = id
        self._name = name
        self._report_type_id = report_type_id
        self._system_managed = system_managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Job.

        The creation date/time of the job.

        :return: The create_time of this Job.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Job.

        The creation date/time of the job.

        :param create_time: The create_time of this Job.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def expire_time(self):
        """Gets the expire_time of this Job.

        The date/time when this job will expire/expired. After a job expired, no new reports are generated.

        :return: The expire_time of this Job.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Job.

        The date/time when this job will expire/expired. After a job expired, no new reports are generated.

        :param expire_time: The expire_time of this Job.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def id(self):
        """Gets the id of this Job.

        The server-generated ID of the job (max. 40 characters).

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The server-generated ID of the job (max. 40 characters).

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Job.

        The name of the job (max. 100 characters).

        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The name of the job (max. 100 characters).

        :param name: The name of this Job.
        :type name: str
        """

        self._name = name

    @property
    def report_type_id(self):
        """Gets the report_type_id of this Job.

        The type of reports this job creates. Corresponds to the ID of a ReportType.

        :return: The report_type_id of this Job.
        :rtype: str
        """
        return self._report_type_id

    @report_type_id.setter
    def report_type_id(self, report_type_id):
        """Sets the report_type_id of this Job.

        The type of reports this job creates. Corresponds to the ID of a ReportType.

        :param report_type_id: The report_type_id of this Job.
        :type report_type_id: str
        """

        self._report_type_id = report_type_id

    @property
    def system_managed(self):
        """Gets the system_managed of this Job.

        True if this a system-managed job that cannot be modified by the user; otherwise false.

        :return: The system_managed of this Job.
        :rtype: bool
        """
        return self._system_managed

    @system_managed.setter
    def system_managed(self, system_managed):
        """Sets the system_managed of this Job.

        True if this a system-managed job that cannot be modified by the user; otherwise false.

        :param system_managed: The system_managed of this Job.
        :type system_managed: bool
        """

        self._system_managed = system_managed
