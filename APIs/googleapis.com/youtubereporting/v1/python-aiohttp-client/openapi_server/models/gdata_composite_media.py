# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gdata_blobstore2_info import GdataBlobstore2Info
from openapi_server.models.gdata_object_id import GdataObjectId
from openapi_server import util


class GdataCompositeMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_ref: str=None, blobstore2_info: GdataBlobstore2Info=None, cosmo_binary_reference: str=None, crc32c_hash: int=None, inline: str=None, length: str=None, md5_hash: str=None, object_id: GdataObjectId=None, path: str=None, reference_type: str=None, sha1_hash: str=None):
        """GdataCompositeMedia - a model defined in OpenAPI

        :param blob_ref: The blob_ref of this GdataCompositeMedia.
        :param blobstore2_info: The blobstore2_info of this GdataCompositeMedia.
        :param cosmo_binary_reference: The cosmo_binary_reference of this GdataCompositeMedia.
        :param crc32c_hash: The crc32c_hash of this GdataCompositeMedia.
        :param inline: The inline of this GdataCompositeMedia.
        :param length: The length of this GdataCompositeMedia.
        :param md5_hash: The md5_hash of this GdataCompositeMedia.
        :param object_id: The object_id of this GdataCompositeMedia.
        :param path: The path of this GdataCompositeMedia.
        :param reference_type: The reference_type of this GdataCompositeMedia.
        :param sha1_hash: The sha1_hash of this GdataCompositeMedia.
        """
        self.openapi_types = {
            'blob_ref': str,
            'blobstore2_info': GdataBlobstore2Info,
            'cosmo_binary_reference': str,
            'crc32c_hash': int,
            'inline': str,
            'length': str,
            'md5_hash': str,
            'object_id': GdataObjectId,
            'path': str,
            'reference_type': str,
            'sha1_hash': str
        }

        self.attribute_map = {
            'blob_ref': 'blobRef',
            'blobstore2_info': 'blobstore2Info',
            'cosmo_binary_reference': 'cosmoBinaryReference',
            'crc32c_hash': 'crc32cHash',
            'inline': 'inline',
            'length': 'length',
            'md5_hash': 'md5Hash',
            'object_id': 'objectId',
            'path': 'path',
            'reference_type': 'referenceType',
            'sha1_hash': 'sha1Hash'
        }

        self._blob_ref = blob_ref
        self._blobstore2_info = blobstore2_info
        self._cosmo_binary_reference = cosmo_binary_reference
        self._crc32c_hash = crc32c_hash
        self._inline = inline
        self._length = length
        self._md5_hash = md5_hash
        self._object_id = object_id
        self._path = path
        self._reference_type = reference_type
        self._sha1_hash = sha1_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GdataCompositeMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GdataCompositeMedia of this GdataCompositeMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_ref(self):
        """Gets the blob_ref of this GdataCompositeMedia.

        gdata

        :return: The blob_ref of this GdataCompositeMedia.
        :rtype: str
        """
        return self._blob_ref

    @blob_ref.setter
    def blob_ref(self, blob_ref):
        """Sets the blob_ref of this GdataCompositeMedia.

        gdata

        :param blob_ref: The blob_ref of this GdataCompositeMedia.
        :type blob_ref: str
        """

        self._blob_ref = blob_ref

    @property
    def blobstore2_info(self):
        """Gets the blobstore2_info of this GdataCompositeMedia.


        :return: The blobstore2_info of this GdataCompositeMedia.
        :rtype: GdataBlobstore2Info
        """
        return self._blobstore2_info

    @blobstore2_info.setter
    def blobstore2_info(self, blobstore2_info):
        """Sets the blobstore2_info of this GdataCompositeMedia.


        :param blobstore2_info: The blobstore2_info of this GdataCompositeMedia.
        :type blobstore2_info: GdataBlobstore2Info
        """

        self._blobstore2_info = blobstore2_info

    @property
    def cosmo_binary_reference(self):
        """Gets the cosmo_binary_reference of this GdataCompositeMedia.

        gdata

        :return: The cosmo_binary_reference of this GdataCompositeMedia.
        :rtype: str
        """
        return self._cosmo_binary_reference

    @cosmo_binary_reference.setter
    def cosmo_binary_reference(self, cosmo_binary_reference):
        """Sets the cosmo_binary_reference of this GdataCompositeMedia.

        gdata

        :param cosmo_binary_reference: The cosmo_binary_reference of this GdataCompositeMedia.
        :type cosmo_binary_reference: str
        """

        self._cosmo_binary_reference = cosmo_binary_reference

    @property
    def crc32c_hash(self):
        """Gets the crc32c_hash of this GdataCompositeMedia.

        gdata

        :return: The crc32c_hash of this GdataCompositeMedia.
        :rtype: int
        """
        return self._crc32c_hash

    @crc32c_hash.setter
    def crc32c_hash(self, crc32c_hash):
        """Sets the crc32c_hash of this GdataCompositeMedia.

        gdata

        :param crc32c_hash: The crc32c_hash of this GdataCompositeMedia.
        :type crc32c_hash: int
        """

        self._crc32c_hash = crc32c_hash

    @property
    def inline(self):
        """Gets the inline of this GdataCompositeMedia.

        gdata

        :return: The inline of this GdataCompositeMedia.
        :rtype: str
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """Sets the inline of this GdataCompositeMedia.

        gdata

        :param inline: The inline of this GdataCompositeMedia.
        :type inline: str
        """

        self._inline = inline

    @property
    def length(self):
        """Gets the length of this GdataCompositeMedia.

        gdata

        :return: The length of this GdataCompositeMedia.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this GdataCompositeMedia.

        gdata

        :param length: The length of this GdataCompositeMedia.
        :type length: str
        """

        self._length = length

    @property
    def md5_hash(self):
        """Gets the md5_hash of this GdataCompositeMedia.

        gdata

        :return: The md5_hash of this GdataCompositeMedia.
        :rtype: str
        """
        return self._md5_hash

    @md5_hash.setter
    def md5_hash(self, md5_hash):
        """Sets the md5_hash of this GdataCompositeMedia.

        gdata

        :param md5_hash: The md5_hash of this GdataCompositeMedia.
        :type md5_hash: str
        """

        self._md5_hash = md5_hash

    @property
    def object_id(self):
        """Gets the object_id of this GdataCompositeMedia.


        :return: The object_id of this GdataCompositeMedia.
        :rtype: GdataObjectId
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this GdataCompositeMedia.


        :param object_id: The object_id of this GdataCompositeMedia.
        :type object_id: GdataObjectId
        """

        self._object_id = object_id

    @property
    def path(self):
        """Gets the path of this GdataCompositeMedia.

        gdata

        :return: The path of this GdataCompositeMedia.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GdataCompositeMedia.

        gdata

        :param path: The path of this GdataCompositeMedia.
        :type path: str
        """

        self._path = path

    @property
    def reference_type(self):
        """Gets the reference_type of this GdataCompositeMedia.

        gdata

        :return: The reference_type of this GdataCompositeMedia.
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this GdataCompositeMedia.

        gdata

        :param reference_type: The reference_type of this GdataCompositeMedia.
        :type reference_type: str
        """
        allowed_values = ["PATH", "BLOB_REF", "INLINE", "BIGSTORE_REF", "COSMO_BINARY_REFERENCE"]  # noqa: E501
        if reference_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_type` ({0}), must be one of {1}"
                .format(reference_type, allowed_values)
            )

        self._reference_type = reference_type

    @property
    def sha1_hash(self):
        """Gets the sha1_hash of this GdataCompositeMedia.

        gdata

        :return: The sha1_hash of this GdataCompositeMedia.
        :rtype: str
        """
        return self._sha1_hash

    @sha1_hash.setter
    def sha1_hash(self, sha1_hash):
        """Sets the sha1_hash of this GdataCompositeMedia.

        gdata

        :param sha1_hash: The sha1_hash of this GdataCompositeMedia.
        :type sha1_hash: str
        """

        self._sha1_hash = sha1_hash
