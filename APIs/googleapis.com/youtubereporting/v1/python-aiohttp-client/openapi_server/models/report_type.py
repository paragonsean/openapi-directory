# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecate_time: str=None, id: str=None, name: str=None, system_managed: bool=None):
        """ReportType - a model defined in OpenAPI

        :param deprecate_time: The deprecate_time of this ReportType.
        :param id: The id of this ReportType.
        :param name: The name of this ReportType.
        :param system_managed: The system_managed of this ReportType.
        """
        self.openapi_types = {
            'deprecate_time': str,
            'id': str,
            'name': str,
            'system_managed': bool
        }

        self.attribute_map = {
            'deprecate_time': 'deprecateTime',
            'id': 'id',
            'name': 'name',
            'system_managed': 'systemManaged'
        }

        self._deprecate_time = deprecate_time
        self._id = id
        self._name = name
        self._system_managed = system_managed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportType of this ReportType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecate_time(self):
        """Gets the deprecate_time of this ReportType.

        The date/time when this report type was/will be deprecated.

        :return: The deprecate_time of this ReportType.
        :rtype: str
        """
        return self._deprecate_time

    @deprecate_time.setter
    def deprecate_time(self, deprecate_time):
        """Sets the deprecate_time of this ReportType.

        The date/time when this report type was/will be deprecated.

        :param deprecate_time: The deprecate_time of this ReportType.
        :type deprecate_time: str
        """

        self._deprecate_time = deprecate_time

    @property
    def id(self):
        """Gets the id of this ReportType.

        The ID of the report type (max. 100 characters).

        :return: The id of this ReportType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportType.

        The ID of the report type (max. 100 characters).

        :param id: The id of this ReportType.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReportType.

        The name of the report type (max. 100 characters).

        :return: The name of this ReportType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportType.

        The name of the report type (max. 100 characters).

        :param name: The name of this ReportType.
        :type name: str
        """

        self._name = name

    @property
    def system_managed(self):
        """Gets the system_managed of this ReportType.

        True if this a system-managed report type; otherwise false. Reporting jobs for system-managed report types are created automatically and can thus not be used in the `CreateJob` method.

        :return: The system_managed of this ReportType.
        :rtype: bool
        """
        return self._system_managed

    @system_managed.setter
    def system_managed(self, system_managed):
        """Sets the system_managed of this ReportType.

        True if this a system-managed report type; otherwise false. Reporting jobs for system-managed report types are created automatically and can thus not be used in the `CreateJob` method.

        :param system_managed: The system_managed of this ReportType.
        :type system_managed: bool
        """

        self._system_managed = system_managed
