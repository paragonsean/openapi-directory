# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gdata_blobstore2_info import GdataBlobstore2Info
from openapi_server.models.gdata_composite_media import GdataCompositeMedia
from openapi_server.models.gdata_content_type_info import GdataContentTypeInfo
from openapi_server.models.gdata_diff_checksums_response import GdataDiffChecksumsResponse
from openapi_server.models.gdata_diff_download_response import GdataDiffDownloadResponse
from openapi_server.models.gdata_diff_upload_request import GdataDiffUploadRequest
from openapi_server.models.gdata_diff_upload_response import GdataDiffUploadResponse
from openapi_server.models.gdata_diff_version_response import GdataDiffVersionResponse
from openapi_server.models.gdata_download_parameters import GdataDownloadParameters
from openapi_server.models.gdata_object_id import GdataObjectId
from openapi_server import util


class GdataMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, bigstore_object_ref: str=None, blob_ref: str=None, blobstore2_info: GdataBlobstore2Info=None, composite_media: List[GdataCompositeMedia]=None, content_type: str=None, content_type_info: GdataContentTypeInfo=None, cosmo_binary_reference: str=None, crc32c_hash: int=None, diff_checksums_response: GdataDiffChecksumsResponse=None, diff_download_response: GdataDiffDownloadResponse=None, diff_upload_request: GdataDiffUploadRequest=None, diff_upload_response: GdataDiffUploadResponse=None, diff_version_response: GdataDiffVersionResponse=None, download_parameters: GdataDownloadParameters=None, filename: str=None, hash: str=None, hash_verified: bool=None, inline: str=None, is_potential_retry: bool=None, length: str=None, md5_hash: str=None, media_id: str=None, object_id: GdataObjectId=None, path: str=None, reference_type: str=None, sha1_hash: str=None, sha256_hash: str=None, timestamp: str=None, token: str=None):
        """GdataMedia - a model defined in OpenAPI

        :param algorithm: The algorithm of this GdataMedia.
        :param bigstore_object_ref: The bigstore_object_ref of this GdataMedia.
        :param blob_ref: The blob_ref of this GdataMedia.
        :param blobstore2_info: The blobstore2_info of this GdataMedia.
        :param composite_media: The composite_media of this GdataMedia.
        :param content_type: The content_type of this GdataMedia.
        :param content_type_info: The content_type_info of this GdataMedia.
        :param cosmo_binary_reference: The cosmo_binary_reference of this GdataMedia.
        :param crc32c_hash: The crc32c_hash of this GdataMedia.
        :param diff_checksums_response: The diff_checksums_response of this GdataMedia.
        :param diff_download_response: The diff_download_response of this GdataMedia.
        :param diff_upload_request: The diff_upload_request of this GdataMedia.
        :param diff_upload_response: The diff_upload_response of this GdataMedia.
        :param diff_version_response: The diff_version_response of this GdataMedia.
        :param download_parameters: The download_parameters of this GdataMedia.
        :param filename: The filename of this GdataMedia.
        :param hash: The hash of this GdataMedia.
        :param hash_verified: The hash_verified of this GdataMedia.
        :param inline: The inline of this GdataMedia.
        :param is_potential_retry: The is_potential_retry of this GdataMedia.
        :param length: The length of this GdataMedia.
        :param md5_hash: The md5_hash of this GdataMedia.
        :param media_id: The media_id of this GdataMedia.
        :param object_id: The object_id of this GdataMedia.
        :param path: The path of this GdataMedia.
        :param reference_type: The reference_type of this GdataMedia.
        :param sha1_hash: The sha1_hash of this GdataMedia.
        :param sha256_hash: The sha256_hash of this GdataMedia.
        :param timestamp: The timestamp of this GdataMedia.
        :param token: The token of this GdataMedia.
        """
        self.openapi_types = {
            'algorithm': str,
            'bigstore_object_ref': str,
            'blob_ref': str,
            'blobstore2_info': GdataBlobstore2Info,
            'composite_media': List[GdataCompositeMedia],
            'content_type': str,
            'content_type_info': GdataContentTypeInfo,
            'cosmo_binary_reference': str,
            'crc32c_hash': int,
            'diff_checksums_response': GdataDiffChecksumsResponse,
            'diff_download_response': GdataDiffDownloadResponse,
            'diff_upload_request': GdataDiffUploadRequest,
            'diff_upload_response': GdataDiffUploadResponse,
            'diff_version_response': GdataDiffVersionResponse,
            'download_parameters': GdataDownloadParameters,
            'filename': str,
            'hash': str,
            'hash_verified': bool,
            'inline': str,
            'is_potential_retry': bool,
            'length': str,
            'md5_hash': str,
            'media_id': str,
            'object_id': GdataObjectId,
            'path': str,
            'reference_type': str,
            'sha1_hash': str,
            'sha256_hash': str,
            'timestamp': str,
            'token': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'bigstore_object_ref': 'bigstoreObjectRef',
            'blob_ref': 'blobRef',
            'blobstore2_info': 'blobstore2Info',
            'composite_media': 'compositeMedia',
            'content_type': 'contentType',
            'content_type_info': 'contentTypeInfo',
            'cosmo_binary_reference': 'cosmoBinaryReference',
            'crc32c_hash': 'crc32cHash',
            'diff_checksums_response': 'diffChecksumsResponse',
            'diff_download_response': 'diffDownloadResponse',
            'diff_upload_request': 'diffUploadRequest',
            'diff_upload_response': 'diffUploadResponse',
            'diff_version_response': 'diffVersionResponse',
            'download_parameters': 'downloadParameters',
            'filename': 'filename',
            'hash': 'hash',
            'hash_verified': 'hashVerified',
            'inline': 'inline',
            'is_potential_retry': 'isPotentialRetry',
            'length': 'length',
            'md5_hash': 'md5Hash',
            'media_id': 'mediaId',
            'object_id': 'objectId',
            'path': 'path',
            'reference_type': 'referenceType',
            'sha1_hash': 'sha1Hash',
            'sha256_hash': 'sha256Hash',
            'timestamp': 'timestamp',
            'token': 'token'
        }

        self._algorithm = algorithm
        self._bigstore_object_ref = bigstore_object_ref
        self._blob_ref = blob_ref
        self._blobstore2_info = blobstore2_info
        self._composite_media = composite_media
        self._content_type = content_type
        self._content_type_info = content_type_info
        self._cosmo_binary_reference = cosmo_binary_reference
        self._crc32c_hash = crc32c_hash
        self._diff_checksums_response = diff_checksums_response
        self._diff_download_response = diff_download_response
        self._diff_upload_request = diff_upload_request
        self._diff_upload_response = diff_upload_response
        self._diff_version_response = diff_version_response
        self._download_parameters = download_parameters
        self._filename = filename
        self._hash = hash
        self._hash_verified = hash_verified
        self._inline = inline
        self._is_potential_retry = is_potential_retry
        self._length = length
        self._md5_hash = md5_hash
        self._media_id = media_id
        self._object_id = object_id
        self._path = path
        self._reference_type = reference_type
        self._sha1_hash = sha1_hash
        self._sha256_hash = sha256_hash
        self._timestamp = timestamp
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GdataMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GdataMedia of this GdataMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this GdataMedia.

        gdata

        :return: The algorithm of this GdataMedia.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this GdataMedia.

        gdata

        :param algorithm: The algorithm of this GdataMedia.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def bigstore_object_ref(self):
        """Gets the bigstore_object_ref of this GdataMedia.

        gdata

        :return: The bigstore_object_ref of this GdataMedia.
        :rtype: str
        """
        return self._bigstore_object_ref

    @bigstore_object_ref.setter
    def bigstore_object_ref(self, bigstore_object_ref):
        """Sets the bigstore_object_ref of this GdataMedia.

        gdata

        :param bigstore_object_ref: The bigstore_object_ref of this GdataMedia.
        :type bigstore_object_ref: str
        """

        self._bigstore_object_ref = bigstore_object_ref

    @property
    def blob_ref(self):
        """Gets the blob_ref of this GdataMedia.

        gdata

        :return: The blob_ref of this GdataMedia.
        :rtype: str
        """
        return self._blob_ref

    @blob_ref.setter
    def blob_ref(self, blob_ref):
        """Sets the blob_ref of this GdataMedia.

        gdata

        :param blob_ref: The blob_ref of this GdataMedia.
        :type blob_ref: str
        """

        self._blob_ref = blob_ref

    @property
    def blobstore2_info(self):
        """Gets the blobstore2_info of this GdataMedia.


        :return: The blobstore2_info of this GdataMedia.
        :rtype: GdataBlobstore2Info
        """
        return self._blobstore2_info

    @blobstore2_info.setter
    def blobstore2_info(self, blobstore2_info):
        """Sets the blobstore2_info of this GdataMedia.


        :param blobstore2_info: The blobstore2_info of this GdataMedia.
        :type blobstore2_info: GdataBlobstore2Info
        """

        self._blobstore2_info = blobstore2_info

    @property
    def composite_media(self):
        """Gets the composite_media of this GdataMedia.

        gdata

        :return: The composite_media of this GdataMedia.
        :rtype: List[GdataCompositeMedia]
        """
        return self._composite_media

    @composite_media.setter
    def composite_media(self, composite_media):
        """Sets the composite_media of this GdataMedia.

        gdata

        :param composite_media: The composite_media of this GdataMedia.
        :type composite_media: List[GdataCompositeMedia]
        """

        self._composite_media = composite_media

    @property
    def content_type(self):
        """Gets the content_type of this GdataMedia.

        gdata

        :return: The content_type of this GdataMedia.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this GdataMedia.

        gdata

        :param content_type: The content_type of this GdataMedia.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def content_type_info(self):
        """Gets the content_type_info of this GdataMedia.


        :return: The content_type_info of this GdataMedia.
        :rtype: GdataContentTypeInfo
        """
        return self._content_type_info

    @content_type_info.setter
    def content_type_info(self, content_type_info):
        """Sets the content_type_info of this GdataMedia.


        :param content_type_info: The content_type_info of this GdataMedia.
        :type content_type_info: GdataContentTypeInfo
        """

        self._content_type_info = content_type_info

    @property
    def cosmo_binary_reference(self):
        """Gets the cosmo_binary_reference of this GdataMedia.

        gdata

        :return: The cosmo_binary_reference of this GdataMedia.
        :rtype: str
        """
        return self._cosmo_binary_reference

    @cosmo_binary_reference.setter
    def cosmo_binary_reference(self, cosmo_binary_reference):
        """Sets the cosmo_binary_reference of this GdataMedia.

        gdata

        :param cosmo_binary_reference: The cosmo_binary_reference of this GdataMedia.
        :type cosmo_binary_reference: str
        """

        self._cosmo_binary_reference = cosmo_binary_reference

    @property
    def crc32c_hash(self):
        """Gets the crc32c_hash of this GdataMedia.

        gdata

        :return: The crc32c_hash of this GdataMedia.
        :rtype: int
        """
        return self._crc32c_hash

    @crc32c_hash.setter
    def crc32c_hash(self, crc32c_hash):
        """Sets the crc32c_hash of this GdataMedia.

        gdata

        :param crc32c_hash: The crc32c_hash of this GdataMedia.
        :type crc32c_hash: int
        """

        self._crc32c_hash = crc32c_hash

    @property
    def diff_checksums_response(self):
        """Gets the diff_checksums_response of this GdataMedia.


        :return: The diff_checksums_response of this GdataMedia.
        :rtype: GdataDiffChecksumsResponse
        """
        return self._diff_checksums_response

    @diff_checksums_response.setter
    def diff_checksums_response(self, diff_checksums_response):
        """Sets the diff_checksums_response of this GdataMedia.


        :param diff_checksums_response: The diff_checksums_response of this GdataMedia.
        :type diff_checksums_response: GdataDiffChecksumsResponse
        """

        self._diff_checksums_response = diff_checksums_response

    @property
    def diff_download_response(self):
        """Gets the diff_download_response of this GdataMedia.


        :return: The diff_download_response of this GdataMedia.
        :rtype: GdataDiffDownloadResponse
        """
        return self._diff_download_response

    @diff_download_response.setter
    def diff_download_response(self, diff_download_response):
        """Sets the diff_download_response of this GdataMedia.


        :param diff_download_response: The diff_download_response of this GdataMedia.
        :type diff_download_response: GdataDiffDownloadResponse
        """

        self._diff_download_response = diff_download_response

    @property
    def diff_upload_request(self):
        """Gets the diff_upload_request of this GdataMedia.


        :return: The diff_upload_request of this GdataMedia.
        :rtype: GdataDiffUploadRequest
        """
        return self._diff_upload_request

    @diff_upload_request.setter
    def diff_upload_request(self, diff_upload_request):
        """Sets the diff_upload_request of this GdataMedia.


        :param diff_upload_request: The diff_upload_request of this GdataMedia.
        :type diff_upload_request: GdataDiffUploadRequest
        """

        self._diff_upload_request = diff_upload_request

    @property
    def diff_upload_response(self):
        """Gets the diff_upload_response of this GdataMedia.


        :return: The diff_upload_response of this GdataMedia.
        :rtype: GdataDiffUploadResponse
        """
        return self._diff_upload_response

    @diff_upload_response.setter
    def diff_upload_response(self, diff_upload_response):
        """Sets the diff_upload_response of this GdataMedia.


        :param diff_upload_response: The diff_upload_response of this GdataMedia.
        :type diff_upload_response: GdataDiffUploadResponse
        """

        self._diff_upload_response = diff_upload_response

    @property
    def diff_version_response(self):
        """Gets the diff_version_response of this GdataMedia.


        :return: The diff_version_response of this GdataMedia.
        :rtype: GdataDiffVersionResponse
        """
        return self._diff_version_response

    @diff_version_response.setter
    def diff_version_response(self, diff_version_response):
        """Sets the diff_version_response of this GdataMedia.


        :param diff_version_response: The diff_version_response of this GdataMedia.
        :type diff_version_response: GdataDiffVersionResponse
        """

        self._diff_version_response = diff_version_response

    @property
    def download_parameters(self):
        """Gets the download_parameters of this GdataMedia.


        :return: The download_parameters of this GdataMedia.
        :rtype: GdataDownloadParameters
        """
        return self._download_parameters

    @download_parameters.setter
    def download_parameters(self, download_parameters):
        """Sets the download_parameters of this GdataMedia.


        :param download_parameters: The download_parameters of this GdataMedia.
        :type download_parameters: GdataDownloadParameters
        """

        self._download_parameters = download_parameters

    @property
    def filename(self):
        """Gets the filename of this GdataMedia.

        gdata

        :return: The filename of this GdataMedia.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this GdataMedia.

        gdata

        :param filename: The filename of this GdataMedia.
        :type filename: str
        """

        self._filename = filename

    @property
    def hash(self):
        """Gets the hash of this GdataMedia.

        gdata

        :return: The hash of this GdataMedia.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GdataMedia.

        gdata

        :param hash: The hash of this GdataMedia.
        :type hash: str
        """

        self._hash = hash

    @property
    def hash_verified(self):
        """Gets the hash_verified of this GdataMedia.

        gdata

        :return: The hash_verified of this GdataMedia.
        :rtype: bool
        """
        return self._hash_verified

    @hash_verified.setter
    def hash_verified(self, hash_verified):
        """Sets the hash_verified of this GdataMedia.

        gdata

        :param hash_verified: The hash_verified of this GdataMedia.
        :type hash_verified: bool
        """

        self._hash_verified = hash_verified

    @property
    def inline(self):
        """Gets the inline of this GdataMedia.

        gdata

        :return: The inline of this GdataMedia.
        :rtype: str
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """Sets the inline of this GdataMedia.

        gdata

        :param inline: The inline of this GdataMedia.
        :type inline: str
        """

        self._inline = inline

    @property
    def is_potential_retry(self):
        """Gets the is_potential_retry of this GdataMedia.

        gdata

        :return: The is_potential_retry of this GdataMedia.
        :rtype: bool
        """
        return self._is_potential_retry

    @is_potential_retry.setter
    def is_potential_retry(self, is_potential_retry):
        """Sets the is_potential_retry of this GdataMedia.

        gdata

        :param is_potential_retry: The is_potential_retry of this GdataMedia.
        :type is_potential_retry: bool
        """

        self._is_potential_retry = is_potential_retry

    @property
    def length(self):
        """Gets the length of this GdataMedia.

        gdata

        :return: The length of this GdataMedia.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this GdataMedia.

        gdata

        :param length: The length of this GdataMedia.
        :type length: str
        """

        self._length = length

    @property
    def md5_hash(self):
        """Gets the md5_hash of this GdataMedia.

        gdata

        :return: The md5_hash of this GdataMedia.
        :rtype: str
        """
        return self._md5_hash

    @md5_hash.setter
    def md5_hash(self, md5_hash):
        """Sets the md5_hash of this GdataMedia.

        gdata

        :param md5_hash: The md5_hash of this GdataMedia.
        :type md5_hash: str
        """

        self._md5_hash = md5_hash

    @property
    def media_id(self):
        """Gets the media_id of this GdataMedia.

        gdata

        :return: The media_id of this GdataMedia.
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this GdataMedia.

        gdata

        :param media_id: The media_id of this GdataMedia.
        :type media_id: str
        """

        self._media_id = media_id

    @property
    def object_id(self):
        """Gets the object_id of this GdataMedia.


        :return: The object_id of this GdataMedia.
        :rtype: GdataObjectId
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this GdataMedia.


        :param object_id: The object_id of this GdataMedia.
        :type object_id: GdataObjectId
        """

        self._object_id = object_id

    @property
    def path(self):
        """Gets the path of this GdataMedia.

        gdata

        :return: The path of this GdataMedia.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GdataMedia.

        gdata

        :param path: The path of this GdataMedia.
        :type path: str
        """

        self._path = path

    @property
    def reference_type(self):
        """Gets the reference_type of this GdataMedia.

        gdata

        :return: The reference_type of this GdataMedia.
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this GdataMedia.

        gdata

        :param reference_type: The reference_type of this GdataMedia.
        :type reference_type: str
        """
        allowed_values = ["PATH", "BLOB_REF", "INLINE", "GET_MEDIA", "COMPOSITE_MEDIA", "BIGSTORE_REF", "DIFF_VERSION_RESPONSE", "DIFF_CHECKSUMS_RESPONSE", "DIFF_DOWNLOAD_RESPONSE", "DIFF_UPLOAD_REQUEST", "DIFF_UPLOAD_RESPONSE", "COSMO_BINARY_REFERENCE", "ARBITRARY_BYTES"]  # noqa: E501
        if reference_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reference_type` ({0}), must be one of {1}"
                .format(reference_type, allowed_values)
            )

        self._reference_type = reference_type

    @property
    def sha1_hash(self):
        """Gets the sha1_hash of this GdataMedia.

        gdata

        :return: The sha1_hash of this GdataMedia.
        :rtype: str
        """
        return self._sha1_hash

    @sha1_hash.setter
    def sha1_hash(self, sha1_hash):
        """Sets the sha1_hash of this GdataMedia.

        gdata

        :param sha1_hash: The sha1_hash of this GdataMedia.
        :type sha1_hash: str
        """

        self._sha1_hash = sha1_hash

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this GdataMedia.

        gdata

        :return: The sha256_hash of this GdataMedia.
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this GdataMedia.

        gdata

        :param sha256_hash: The sha256_hash of this GdataMedia.
        :type sha256_hash: str
        """

        self._sha256_hash = sha256_hash

    @property
    def timestamp(self):
        """Gets the timestamp of this GdataMedia.

        gdata

        :return: The timestamp of this GdataMedia.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GdataMedia.

        gdata

        :param timestamp: The timestamp of this GdataMedia.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def token(self):
        """Gets the token of this GdataMedia.

        gdata

        :return: The token of this GdataMedia.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GdataMedia.

        gdata

        :param token: The token of this GdataMedia.
        :type token: str
        """

        self._token = token
