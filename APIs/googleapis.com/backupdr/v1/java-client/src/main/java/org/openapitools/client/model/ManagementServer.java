/*
 * Backup and DR Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ManagementURI;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.WorkforceIdentityBasedManagementURI;
import org.openapitools.client.model.WorkforceIdentityBasedOAuth2ClientID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ManagementServer describes a single BackupDR ManagementServer instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:22.117255-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagementServer {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MANAGEMENT_URI = "managementUri";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_URI)
  private ManagementURI managementUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkConfig> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_OAUTH2_CLIENT_ID = "oauth2ClientId";
  @SerializedName(SERIALIZED_NAME_OAUTH2_CLIENT_ID)
  private String oauth2ClientId;

  /**
   * Output only. The ManagementServer state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INSTANCE_STATE_UNSPECIFIED("INSTANCE_STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING"),
    
    REPAIRING("REPAIRING"),
    
    MAINTENANCE("MAINTENANCE"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Optional. The type of the ManagementServer resource.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INSTANCE_TYPE_UNSPECIFIED("INSTANCE_TYPE_UNSPECIFIED"),
    
    BACKUP_RESTORE("BACKUP_RESTORE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_WORKFORCE_IDENTITY_BASED_MANAGEMENT_URI = "workforceIdentityBasedManagementUri";
  @SerializedName(SERIALIZED_NAME_WORKFORCE_IDENTITY_BASED_MANAGEMENT_URI)
  private WorkforceIdentityBasedManagementURI workforceIdentityBasedManagementUri;

  public static final String SERIALIZED_NAME_WORKFORCE_IDENTITY_BASED_OAUTH2_CLIENT_ID = "workforceIdentityBasedOauth2ClientId";
  @SerializedName(SERIALIZED_NAME_WORKFORCE_IDENTITY_BASED_OAUTH2_CLIENT_ID)
  private WorkforceIdentityBasedOAuth2ClientID workforceIdentityBasedOauth2ClientId;

  public ManagementServer() {
  }

  public ManagementServer(
     String createTime, 
     String name, 
     String oauth2ClientId, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.name = name;
    this.oauth2ClientId = oauth2ClientId;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the instance was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ManagementServer description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. The description of the ManagementServer instance (2048 characters or less).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ManagementServer etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ManagementServer labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ManagementServer putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go&#x3D; If set to true, the MS is created in migration ready mode.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ManagementServer managementUri(ManagementURI managementUri) {
    this.managementUri = managementUri;
    return this;
  }

  /**
   * Get managementUri
   * @return managementUri
   */
  @javax.annotation.Nullable
  public ManagementURI getManagementUri() {
    return managementUri;
  }

  public void setManagementUri(ManagementURI managementUri) {
    this.managementUri = managementUri;
  }


  /**
   * Output only. Identifier. The resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ManagementServer networks(List<NetworkConfig> networks) {
    this.networks = networks;
    return this;
  }

  public ManagementServer addNetworksItem(NetworkConfig networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * Required. VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<NetworkConfig> getNetworks() {
    return networks;
  }

  public void setNetworks(List<NetworkConfig> networks) {
    this.networks = networks;
  }


  /**
   * Output only. The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).
   * @return oauth2ClientId
   */
  @javax.annotation.Nullable
  public String getOauth2ClientId() {
    return oauth2ClientId;
  }



  /**
   * Output only. The ManagementServer state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public ManagementServer type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Optional. The type of the ManagementServer resource.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * Output only. The time when the instance was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public ManagementServer workforceIdentityBasedManagementUri(WorkforceIdentityBasedManagementURI workforceIdentityBasedManagementUri) {
    this.workforceIdentityBasedManagementUri = workforceIdentityBasedManagementUri;
    return this;
  }

  /**
   * Get workforceIdentityBasedManagementUri
   * @return workforceIdentityBasedManagementUri
   */
  @javax.annotation.Nullable
  public WorkforceIdentityBasedManagementURI getWorkforceIdentityBasedManagementUri() {
    return workforceIdentityBasedManagementUri;
  }

  public void setWorkforceIdentityBasedManagementUri(WorkforceIdentityBasedManagementURI workforceIdentityBasedManagementUri) {
    this.workforceIdentityBasedManagementUri = workforceIdentityBasedManagementUri;
  }


  public ManagementServer workforceIdentityBasedOauth2ClientId(WorkforceIdentityBasedOAuth2ClientID workforceIdentityBasedOauth2ClientId) {
    this.workforceIdentityBasedOauth2ClientId = workforceIdentityBasedOauth2ClientId;
    return this;
  }

  /**
   * Get workforceIdentityBasedOauth2ClientId
   * @return workforceIdentityBasedOauth2ClientId
   */
  @javax.annotation.Nullable
  public WorkforceIdentityBasedOAuth2ClientID getWorkforceIdentityBasedOauth2ClientId() {
    return workforceIdentityBasedOauth2ClientId;
  }

  public void setWorkforceIdentityBasedOauth2ClientId(WorkforceIdentityBasedOAuth2ClientID workforceIdentityBasedOauth2ClientId) {
    this.workforceIdentityBasedOauth2ClientId = workforceIdentityBasedOauth2ClientId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagementServer managementServer = (ManagementServer) o;
    return Objects.equals(this.createTime, managementServer.createTime) &&
        Objects.equals(this.description, managementServer.description) &&
        Objects.equals(this.etag, managementServer.etag) &&
        Objects.equals(this.labels, managementServer.labels) &&
        Objects.equals(this.managementUri, managementServer.managementUri) &&
        Objects.equals(this.name, managementServer.name) &&
        Objects.equals(this.networks, managementServer.networks) &&
        Objects.equals(this.oauth2ClientId, managementServer.oauth2ClientId) &&
        Objects.equals(this.state, managementServer.state) &&
        Objects.equals(this.type, managementServer.type) &&
        Objects.equals(this.updateTime, managementServer.updateTime) &&
        Objects.equals(this.workforceIdentityBasedManagementUri, managementServer.workforceIdentityBasedManagementUri) &&
        Objects.equals(this.workforceIdentityBasedOauth2ClientId, managementServer.workforceIdentityBasedOauth2ClientId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, etag, labels, managementUri, name, networks, oauth2ClientId, state, type, updateTime, workforceIdentityBasedManagementUri, workforceIdentityBasedOauth2ClientId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagementServer {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    managementUri: ").append(toIndentedString(managementUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    oauth2ClientId: ").append(toIndentedString(oauth2ClientId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    workforceIdentityBasedManagementUri: ").append(toIndentedString(workforceIdentityBasedManagementUri)).append("\n");
    sb.append("    workforceIdentityBasedOauth2ClientId: ").append(toIndentedString(workforceIdentityBasedOauth2ClientId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("labels");
    openapiFields.add("managementUri");
    openapiFields.add("name");
    openapiFields.add("networks");
    openapiFields.add("oauth2ClientId");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("updateTime");
    openapiFields.add("workforceIdentityBasedManagementUri");
    openapiFields.add("workforceIdentityBasedOauth2ClientId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagementServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagementServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagementServer is not found in the empty JSON string", ManagementServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagementServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagementServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `managementUri`
      if (jsonObj.get("managementUri") != null && !jsonObj.get("managementUri").isJsonNull()) {
        ManagementURI.validateJsonElement(jsonObj.get("managementUri"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            NetworkConfig.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("oauth2ClientId") != null && !jsonObj.get("oauth2ClientId").isJsonNull()) && !jsonObj.get("oauth2ClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauth2ClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauth2ClientId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `workforceIdentityBasedManagementUri`
      if (jsonObj.get("workforceIdentityBasedManagementUri") != null && !jsonObj.get("workforceIdentityBasedManagementUri").isJsonNull()) {
        WorkforceIdentityBasedManagementURI.validateJsonElement(jsonObj.get("workforceIdentityBasedManagementUri"));
      }
      // validate the optional field `workforceIdentityBasedOauth2ClientId`
      if (jsonObj.get("workforceIdentityBasedOauth2ClientId") != null && !jsonObj.get("workforceIdentityBasedOauth2ClientId").isJsonNull()) {
        WorkforceIdentityBasedOAuth2ClientID.validateJsonElement(jsonObj.get("workforceIdentityBasedOauth2ClientId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagementServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagementServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagementServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagementServer.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagementServer>() {
           @Override
           public void write(JsonWriter out, ManagementServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagementServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagementServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagementServer
   * @throws IOException if the JSON string is invalid with respect to ManagementServer
   */
  public static ManagementServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagementServer.class);
  }

  /**
   * Convert an instance of ManagementServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

