# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network: str=None, peering_mode: str=None):
        """NetworkConfig - a model defined in OpenAPI

        :param network: The network of this NetworkConfig.
        :param peering_mode: The peering_mode of this NetworkConfig.
        """
        self.openapi_types = {
            'network': str,
            'peering_mode': str
        }

        self.attribute_map = {
            'network': 'network',
            'peering_mode': 'peeringMode'
        }

        self._network = network
        self._peering_mode = peering_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfig of this NetworkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network(self):
        """Gets the network of this NetworkConfig.

        Optional. The resource name of the Google Compute Engine VPC network to which the ManagementServer instance is connected.

        :return: The network of this NetworkConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkConfig.

        Optional. The resource name of the Google Compute Engine VPC network to which the ManagementServer instance is connected.

        :param network: The network of this NetworkConfig.
        :type network: str
        """

        self._network = network

    @property
    def peering_mode(self):
        """Gets the peering_mode of this NetworkConfig.

        Optional. The network connect mode of the ManagementServer instance. For this version, only PRIVATE_SERVICE_ACCESS is supported.

        :return: The peering_mode of this NetworkConfig.
        :rtype: str
        """
        return self._peering_mode

    @peering_mode.setter
    def peering_mode(self, peering_mode):
        """Sets the peering_mode of this NetworkConfig.

        Optional. The network connect mode of the ManagementServer instance. For this version, only PRIVATE_SERVICE_ACCESS is supported.

        :param peering_mode: The peering_mode of this NetworkConfig.
        :type peering_mode: str
        """
        allowed_values = ["PEERING_MODE_UNSPECIFIED", "PRIVATE_SERVICE_ACCESS"]  # noqa: E501
        if peering_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `peering_mode` ({0}), must be one of {1}"
                .format(peering_mode, allowed_values)
            )

        self._peering_mode = peering_mode
