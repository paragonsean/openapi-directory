# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.management_uri import ManagementURI
from openapi_server.models.network_config import NetworkConfig
from openapi_server.models.workforce_identity_based_management_uri import WorkforceIdentityBasedManagementURI
from openapi_server.models.workforce_identity_based_o_auth2_client_id import WorkforceIdentityBasedOAuth2ClientID
from openapi_server import util


class ManagementServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, labels: Dict[str, str]=None, management_uri: ManagementURI=None, name: str=None, networks: List[NetworkConfig]=None, oauth2_client_id: str=None, state: str=None, type: str=None, update_time: str=None, workforce_identity_based_management_uri: WorkforceIdentityBasedManagementURI=None, workforce_identity_based_oauth2_client_id: WorkforceIdentityBasedOAuth2ClientID=None):
        """ManagementServer - a model defined in OpenAPI

        :param create_time: The create_time of this ManagementServer.
        :param description: The description of this ManagementServer.
        :param etag: The etag of this ManagementServer.
        :param labels: The labels of this ManagementServer.
        :param management_uri: The management_uri of this ManagementServer.
        :param name: The name of this ManagementServer.
        :param networks: The networks of this ManagementServer.
        :param oauth2_client_id: The oauth2_client_id of this ManagementServer.
        :param state: The state of this ManagementServer.
        :param type: The type of this ManagementServer.
        :param update_time: The update_time of this ManagementServer.
        :param workforce_identity_based_management_uri: The workforce_identity_based_management_uri of this ManagementServer.
        :param workforce_identity_based_oauth2_client_id: The workforce_identity_based_oauth2_client_id of this ManagementServer.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'labels': Dict[str, str],
            'management_uri': ManagementURI,
            'name': str,
            'networks': List[NetworkConfig],
            'oauth2_client_id': str,
            'state': str,
            'type': str,
            'update_time': str,
            'workforce_identity_based_management_uri': WorkforceIdentityBasedManagementURI,
            'workforce_identity_based_oauth2_client_id': WorkforceIdentityBasedOAuth2ClientID
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'labels': 'labels',
            'management_uri': 'managementUri',
            'name': 'name',
            'networks': 'networks',
            'oauth2_client_id': 'oauth2ClientId',
            'state': 'state',
            'type': 'type',
            'update_time': 'updateTime',
            'workforce_identity_based_management_uri': 'workforceIdentityBasedManagementUri',
            'workforce_identity_based_oauth2_client_id': 'workforceIdentityBasedOauth2ClientId'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._labels = labels
        self._management_uri = management_uri
        self._name = name
        self._networks = networks
        self._oauth2_client_id = oauth2_client_id
        self._state = state
        self._type = type
        self._update_time = update_time
        self._workforce_identity_based_management_uri = workforce_identity_based_management_uri
        self._workforce_identity_based_oauth2_client_id = workforce_identity_based_oauth2_client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementServer of this ManagementServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ManagementServer.

        Output only. The time when the instance was created.

        :return: The create_time of this ManagementServer.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ManagementServer.

        Output only. The time when the instance was created.

        :param create_time: The create_time of this ManagementServer.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ManagementServer.

        Optional. The description of the ManagementServer instance (2048 characters or less).

        :return: The description of this ManagementServer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManagementServer.

        Optional. The description of the ManagementServer instance (2048 characters or less).

        :param description: The description of this ManagementServer.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this ManagementServer.

        Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.

        :return: The etag of this ManagementServer.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ManagementServer.

        Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.

        :param etag: The etag of this ManagementServer.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this ManagementServer.

        Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.

        :return: The labels of this ManagementServer.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ManagementServer.

        Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.

        :param labels: The labels of this ManagementServer.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def management_uri(self):
        """Gets the management_uri of this ManagementServer.


        :return: The management_uri of this ManagementServer.
        :rtype: ManagementURI
        """
        return self._management_uri

    @management_uri.setter
    def management_uri(self, management_uri):
        """Sets the management_uri of this ManagementServer.


        :param management_uri: The management_uri of this ManagementServer.
        :type management_uri: ManagementURI
        """

        self._management_uri = management_uri

    @property
    def name(self):
        """Gets the name of this ManagementServer.

        Output only. Identifier. The resource name.

        :return: The name of this ManagementServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagementServer.

        Output only. Identifier. The resource name.

        :param name: The name of this ManagementServer.
        :type name: str
        """

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this ManagementServer.

        Required. VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.

        :return: The networks of this ManagementServer.
        :rtype: List[NetworkConfig]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ManagementServer.

        Required. VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.

        :param networks: The networks of this ManagementServer.
        :type networks: List[NetworkConfig]
        """

        self._networks = networks

    @property
    def oauth2_client_id(self):
        """Gets the oauth2_client_id of this ManagementServer.

        Output only. The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).

        :return: The oauth2_client_id of this ManagementServer.
        :rtype: str
        """
        return self._oauth2_client_id

    @oauth2_client_id.setter
    def oauth2_client_id(self, oauth2_client_id):
        """Sets the oauth2_client_id of this ManagementServer.

        Output only. The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).

        :param oauth2_client_id: The oauth2_client_id of this ManagementServer.
        :type oauth2_client_id: str
        """

        self._oauth2_client_id = oauth2_client_id

    @property
    def state(self):
        """Gets the state of this ManagementServer.

        Output only. The ManagementServer state.

        :return: The state of this ManagementServer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ManagementServer.

        Output only. The ManagementServer state.

        :param state: The state of this ManagementServer.
        :type state: str
        """
        allowed_values = ["INSTANCE_STATE_UNSPECIFIED", "CREATING", "READY", "UPDATING", "DELETING", "REPAIRING", "MAINTENANCE", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this ManagementServer.

        Optional. The type of the ManagementServer resource.

        :return: The type of this ManagementServer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ManagementServer.

        Optional. The type of the ManagementServer resource.

        :param type: The type of this ManagementServer.
        :type type: str
        """
        allowed_values = ["INSTANCE_TYPE_UNSPECIFIED", "BACKUP_RESTORE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this ManagementServer.

        Output only. The time when the instance was updated.

        :return: The update_time of this ManagementServer.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ManagementServer.

        Output only. The time when the instance was updated.

        :param update_time: The update_time of this ManagementServer.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def workforce_identity_based_management_uri(self):
        """Gets the workforce_identity_based_management_uri of this ManagementServer.


        :return: The workforce_identity_based_management_uri of this ManagementServer.
        :rtype: WorkforceIdentityBasedManagementURI
        """
        return self._workforce_identity_based_management_uri

    @workforce_identity_based_management_uri.setter
    def workforce_identity_based_management_uri(self, workforce_identity_based_management_uri):
        """Sets the workforce_identity_based_management_uri of this ManagementServer.


        :param workforce_identity_based_management_uri: The workforce_identity_based_management_uri of this ManagementServer.
        :type workforce_identity_based_management_uri: WorkforceIdentityBasedManagementURI
        """

        self._workforce_identity_based_management_uri = workforce_identity_based_management_uri

    @property
    def workforce_identity_based_oauth2_client_id(self):
        """Gets the workforce_identity_based_oauth2_client_id of this ManagementServer.


        :return: The workforce_identity_based_oauth2_client_id of this ManagementServer.
        :rtype: WorkforceIdentityBasedOAuth2ClientID
        """
        return self._workforce_identity_based_oauth2_client_id

    @workforce_identity_based_oauth2_client_id.setter
    def workforce_identity_based_oauth2_client_id(self, workforce_identity_based_oauth2_client_id):
        """Sets the workforce_identity_based_oauth2_client_id of this ManagementServer.


        :param workforce_identity_based_oauth2_client_id: The workforce_identity_based_oauth2_client_id of this ManagementServer.
        :type workforce_identity_based_oauth2_client_id: WorkforceIdentityBasedOAuth2ClientID
        """

        self._workforce_identity_based_oauth2_client_id = workforce_identity_based_oauth2_client_id
