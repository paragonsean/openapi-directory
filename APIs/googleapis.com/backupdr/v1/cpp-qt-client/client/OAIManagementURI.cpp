/**
 * Backup and DR Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementURI.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementURI::OAIManagementURI(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementURI::OAIManagementURI() {
    this->initializeModel();
}

OAIManagementURI::~OAIManagementURI() {}

void OAIManagementURI::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_web_ui_isSet = false;
    m_web_ui_isValid = false;
}

void OAIManagementURI::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementURI::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_web_ui_isValid = ::OpenAPI::fromJsonValue(m_web_ui, json[QString("webUi")]);
    m_web_ui_isSet = !json[QString("webUi")].isNull() && m_web_ui_isValid;
}

QString OAIManagementURI::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementURI::asJsonObject() const {
    QJsonObject obj;
    if (m_api_isSet) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_web_ui_isSet) {
        obj.insert(QString("webUi"), ::OpenAPI::toJsonValue(m_web_ui));
    }
    return obj;
}

QString OAIManagementURI::getApi() const {
    return m_api;
}
void OAIManagementURI::setApi(const QString &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIManagementURI::is_api_Set() const{
    return m_api_isSet;
}

bool OAIManagementURI::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIManagementURI::getWebUi() const {
    return m_web_ui;
}
void OAIManagementURI::setWebUi(const QString &web_ui) {
    m_web_ui = web_ui;
    m_web_ui_isSet = true;
}

bool OAIManagementURI::is_web_ui_Set() const{
    return m_web_ui_isSet;
}

bool OAIManagementURI::is_web_ui_Valid() const{
    return m_web_ui_isValid;
}

bool OAIManagementURI::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_ui_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementURI::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
