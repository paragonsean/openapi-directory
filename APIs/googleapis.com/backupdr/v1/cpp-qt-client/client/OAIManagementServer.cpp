/**
 * Backup and DR Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementServer::OAIManagementServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementServer::OAIManagementServer() {
    this->initializeModel();
}

OAIManagementServer::~OAIManagementServer() {}

void OAIManagementServer::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_management_uri_isSet = false;
    m_management_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_oauth2_client_id_isSet = false;
    m_oauth2_client_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_workforce_identity_based_management_uri_isSet = false;
    m_workforce_identity_based_management_uri_isValid = false;

    m_workforce_identity_based_oauth2_client_id_isSet = false;
    m_workforce_identity_based_oauth2_client_id_isValid = false;
}

void OAIManagementServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementServer::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_management_uri_isValid = ::OpenAPI::fromJsonValue(m_management_uri, json[QString("managementUri")]);
    m_management_uri_isSet = !json[QString("managementUri")].isNull() && m_management_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_oauth2_client_id_isValid = ::OpenAPI::fromJsonValue(m_oauth2_client_id, json[QString("oauth2ClientId")]);
    m_oauth2_client_id_isSet = !json[QString("oauth2ClientId")].isNull() && m_oauth2_client_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_workforce_identity_based_management_uri_isValid = ::OpenAPI::fromJsonValue(m_workforce_identity_based_management_uri, json[QString("workforceIdentityBasedManagementUri")]);
    m_workforce_identity_based_management_uri_isSet = !json[QString("workforceIdentityBasedManagementUri")].isNull() && m_workforce_identity_based_management_uri_isValid;

    m_workforce_identity_based_oauth2_client_id_isValid = ::OpenAPI::fromJsonValue(m_workforce_identity_based_oauth2_client_id, json[QString("workforceIdentityBasedOauth2ClientId")]);
    m_workforce_identity_based_oauth2_client_id_isSet = !json[QString("workforceIdentityBasedOauth2ClientId")].isNull() && m_workforce_identity_based_oauth2_client_id_isValid;
}

QString OAIManagementServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementServer::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_management_uri.isSet()) {
        obj.insert(QString("managementUri"), ::OpenAPI::toJsonValue(m_management_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_oauth2_client_id_isSet) {
        obj.insert(QString("oauth2ClientId"), ::OpenAPI::toJsonValue(m_oauth2_client_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_workforce_identity_based_management_uri.isSet()) {
        obj.insert(QString("workforceIdentityBasedManagementUri"), ::OpenAPI::toJsonValue(m_workforce_identity_based_management_uri));
    }
    if (m_workforce_identity_based_oauth2_client_id.isSet()) {
        obj.insert(QString("workforceIdentityBasedOauth2ClientId"), ::OpenAPI::toJsonValue(m_workforce_identity_based_oauth2_client_id));
    }
    return obj;
}

QString OAIManagementServer::getCreateTime() const {
    return m_create_time;
}
void OAIManagementServer::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIManagementServer::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIManagementServer::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIManagementServer::getDescription() const {
    return m_description;
}
void OAIManagementServer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIManagementServer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIManagementServer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIManagementServer::getEtag() const {
    return m_etag;
}
void OAIManagementServer::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIManagementServer::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIManagementServer::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIManagementServer::getLabels() const {
    return m_labels;
}
void OAIManagementServer::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIManagementServer::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIManagementServer::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIManagementURI OAIManagementServer::getManagementUri() const {
    return m_management_uri;
}
void OAIManagementServer::setManagementUri(const OAIManagementURI &management_uri) {
    m_management_uri = management_uri;
    m_management_uri_isSet = true;
}

bool OAIManagementServer::is_management_uri_Set() const{
    return m_management_uri_isSet;
}

bool OAIManagementServer::is_management_uri_Valid() const{
    return m_management_uri_isValid;
}

QString OAIManagementServer::getName() const {
    return m_name;
}
void OAIManagementServer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagementServer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagementServer::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINetworkConfig> OAIManagementServer::getNetworks() const {
    return m_networks;
}
void OAIManagementServer::setNetworks(const QList<OAINetworkConfig> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIManagementServer::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIManagementServer::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIManagementServer::getOauth2ClientId() const {
    return m_oauth2_client_id;
}
void OAIManagementServer::setOauth2ClientId(const QString &oauth2_client_id) {
    m_oauth2_client_id = oauth2_client_id;
    m_oauth2_client_id_isSet = true;
}

bool OAIManagementServer::is_oauth2_client_id_Set() const{
    return m_oauth2_client_id_isSet;
}

bool OAIManagementServer::is_oauth2_client_id_Valid() const{
    return m_oauth2_client_id_isValid;
}

QString OAIManagementServer::getState() const {
    return m_state;
}
void OAIManagementServer::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIManagementServer::is_state_Set() const{
    return m_state_isSet;
}

bool OAIManagementServer::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIManagementServer::getType() const {
    return m_type;
}
void OAIManagementServer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIManagementServer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIManagementServer::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIManagementServer::getUpdateTime() const {
    return m_update_time;
}
void OAIManagementServer::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIManagementServer::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIManagementServer::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIWorkforceIdentityBasedManagementURI OAIManagementServer::getWorkforceIdentityBasedManagementUri() const {
    return m_workforce_identity_based_management_uri;
}
void OAIManagementServer::setWorkforceIdentityBasedManagementUri(const OAIWorkforceIdentityBasedManagementURI &workforce_identity_based_management_uri) {
    m_workforce_identity_based_management_uri = workforce_identity_based_management_uri;
    m_workforce_identity_based_management_uri_isSet = true;
}

bool OAIManagementServer::is_workforce_identity_based_management_uri_Set() const{
    return m_workforce_identity_based_management_uri_isSet;
}

bool OAIManagementServer::is_workforce_identity_based_management_uri_Valid() const{
    return m_workforce_identity_based_management_uri_isValid;
}

OAIWorkforceIdentityBasedOAuth2ClientID OAIManagementServer::getWorkforceIdentityBasedOauth2ClientId() const {
    return m_workforce_identity_based_oauth2_client_id;
}
void OAIManagementServer::setWorkforceIdentityBasedOauth2ClientId(const OAIWorkforceIdentityBasedOAuth2ClientID &workforce_identity_based_oauth2_client_id) {
    m_workforce_identity_based_oauth2_client_id = workforce_identity_based_oauth2_client_id;
    m_workforce_identity_based_oauth2_client_id_isSet = true;
}

bool OAIManagementServer::is_workforce_identity_based_oauth2_client_id_Set() const{
    return m_workforce_identity_based_oauth2_client_id_isSet;
}

bool OAIManagementServer::is_workforce_identity_based_oauth2_client_id_Valid() const{
    return m_workforce_identity_based_oauth2_client_id_isValid;
}

bool OAIManagementServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth2_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_identity_based_management_uri.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workforce_identity_based_oauth2_client_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
