/**
 * Backup and DR Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkforceIdentityBasedOAuth2ClientID.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkforceIdentityBasedOAuth2ClientID::OAIWorkforceIdentityBasedOAuth2ClientID(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkforceIdentityBasedOAuth2ClientID::OAIWorkforceIdentityBasedOAuth2ClientID() {
    this->initializeModel();
}

OAIWorkforceIdentityBasedOAuth2ClientID::~OAIWorkforceIdentityBasedOAuth2ClientID() {}

void OAIWorkforceIdentityBasedOAuth2ClientID::initializeModel() {

    m_first_party_oauth2_client_id_isSet = false;
    m_first_party_oauth2_client_id_isValid = false;

    m_third_party_oauth2_client_id_isSet = false;
    m_third_party_oauth2_client_id_isValid = false;
}

void OAIWorkforceIdentityBasedOAuth2ClientID::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkforceIdentityBasedOAuth2ClientID::fromJsonObject(QJsonObject json) {

    m_first_party_oauth2_client_id_isValid = ::OpenAPI::fromJsonValue(m_first_party_oauth2_client_id, json[QString("firstPartyOauth2ClientId")]);
    m_first_party_oauth2_client_id_isSet = !json[QString("firstPartyOauth2ClientId")].isNull() && m_first_party_oauth2_client_id_isValid;

    m_third_party_oauth2_client_id_isValid = ::OpenAPI::fromJsonValue(m_third_party_oauth2_client_id, json[QString("thirdPartyOauth2ClientId")]);
    m_third_party_oauth2_client_id_isSet = !json[QString("thirdPartyOauth2ClientId")].isNull() && m_third_party_oauth2_client_id_isValid;
}

QString OAIWorkforceIdentityBasedOAuth2ClientID::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkforceIdentityBasedOAuth2ClientID::asJsonObject() const {
    QJsonObject obj;
    if (m_first_party_oauth2_client_id_isSet) {
        obj.insert(QString("firstPartyOauth2ClientId"), ::OpenAPI::toJsonValue(m_first_party_oauth2_client_id));
    }
    if (m_third_party_oauth2_client_id_isSet) {
        obj.insert(QString("thirdPartyOauth2ClientId"), ::OpenAPI::toJsonValue(m_third_party_oauth2_client_id));
    }
    return obj;
}

QString OAIWorkforceIdentityBasedOAuth2ClientID::getFirstPartyOauth2ClientId() const {
    return m_first_party_oauth2_client_id;
}
void OAIWorkforceIdentityBasedOAuth2ClientID::setFirstPartyOauth2ClientId(const QString &first_party_oauth2_client_id) {
    m_first_party_oauth2_client_id = first_party_oauth2_client_id;
    m_first_party_oauth2_client_id_isSet = true;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::is_first_party_oauth2_client_id_Set() const{
    return m_first_party_oauth2_client_id_isSet;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::is_first_party_oauth2_client_id_Valid() const{
    return m_first_party_oauth2_client_id_isValid;
}

QString OAIWorkforceIdentityBasedOAuth2ClientID::getThirdPartyOauth2ClientId() const {
    return m_third_party_oauth2_client_id;
}
void OAIWorkforceIdentityBasedOAuth2ClientID::setThirdPartyOauth2ClientId(const QString &third_party_oauth2_client_id) {
    m_third_party_oauth2_client_id = third_party_oauth2_client_id;
    m_third_party_oauth2_client_id_isSet = true;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::is_third_party_oauth2_client_id_Set() const{
    return m_third_party_oauth2_client_id_isSet;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::is_third_party_oauth2_client_id_Valid() const{
    return m_third_party_oauth2_client_id_isValid;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_party_oauth2_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_oauth2_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkforceIdentityBasedOAuth2ClientID::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
