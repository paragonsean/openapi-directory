/**
 * Backup and DR Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkConfig model module.
 * @module model/NetworkConfig
 * @version v1
 */
class NetworkConfig {
    /**
     * Constructs a new <code>NetworkConfig</code>.
     * Network configuration for ManagementServer instance.
     * @alias module:model/NetworkConfig
     */
    constructor() { 
        
        NetworkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfig} obj Optional instance to populate.
     * @return {module:model/NetworkConfig} The populated <code>NetworkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfig();

            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('peeringMode')) {
                obj['peeringMode'] = ApiClient.convertToType(data['peeringMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['peeringMode'] && !(typeof data['peeringMode'] === 'string' || data['peeringMode'] instanceof String)) {
            throw new Error("Expected the field `peeringMode` to be a primitive type in the JSON string but got " + data['peeringMode']);
        }

        return true;
    }


}



/**
 * Optional. The resource name of the Google Compute Engine VPC network to which the ManagementServer instance is connected.
 * @member {String} network
 */
NetworkConfig.prototype['network'] = undefined;

/**
 * Optional. The network connect mode of the ManagementServer instance. For this version, only PRIVATE_SERVICE_ACCESS is supported.
 * @member {module:model/NetworkConfig.PeeringModeEnum} peeringMode
 */
NetworkConfig.prototype['peeringMode'] = undefined;





/**
 * Allowed values for the <code>peeringMode</code> property.
 * @enum {String}
 * @readonly
 */
NetworkConfig['PeeringModeEnum'] = {

    /**
     * value: "PEERING_MODE_UNSPECIFIED"
     * @const
     */
    "PEERING_MODE_UNSPECIFIED": "PEERING_MODE_UNSPECIFIED",

    /**
     * value: "PRIVATE_SERVICE_ACCESS"
     * @const
     */
    "PRIVATE_SERVICE_ACCESS": "PRIVATE_SERVICE_ACCESS"
};



export default NetworkConfig;

