/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1Icon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1Icon::OAIGoogleAppsCardV1Icon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1Icon::OAIGoogleAppsCardV1Icon() {
    this->initializeModel();
}

OAIGoogleAppsCardV1Icon::~OAIGoogleAppsCardV1Icon() {}

void OAIGoogleAppsCardV1Icon::initializeModel() {

    m_alt_text_isSet = false;
    m_alt_text_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_known_icon_isSet = false;
    m_known_icon_isValid = false;
}

void OAIGoogleAppsCardV1Icon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1Icon::fromJsonObject(QJsonObject json) {

    m_alt_text_isValid = ::OpenAPI::fromJsonValue(m_alt_text, json[QString("altText")]);
    m_alt_text_isSet = !json[QString("altText")].isNull() && m_alt_text_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_known_icon_isValid = ::OpenAPI::fromJsonValue(m_known_icon, json[QString("knownIcon")]);
    m_known_icon_isSet = !json[QString("knownIcon")].isNull() && m_known_icon_isValid;
}

QString OAIGoogleAppsCardV1Icon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1Icon::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_text_isSet) {
        obj.insert(QString("altText"), ::OpenAPI::toJsonValue(m_alt_text));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_known_icon_isSet) {
        obj.insert(QString("knownIcon"), ::OpenAPI::toJsonValue(m_known_icon));
    }
    return obj;
}

QString OAIGoogleAppsCardV1Icon::getAltText() const {
    return m_alt_text;
}
void OAIGoogleAppsCardV1Icon::setAltText(const QString &alt_text) {
    m_alt_text = alt_text;
    m_alt_text_isSet = true;
}

bool OAIGoogleAppsCardV1Icon::is_alt_text_Set() const{
    return m_alt_text_isSet;
}

bool OAIGoogleAppsCardV1Icon::is_alt_text_Valid() const{
    return m_alt_text_isValid;
}

QString OAIGoogleAppsCardV1Icon::getIconUrl() const {
    return m_icon_url;
}
void OAIGoogleAppsCardV1Icon::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIGoogleAppsCardV1Icon::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIGoogleAppsCardV1Icon::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIGoogleAppsCardV1Icon::getImageType() const {
    return m_image_type;
}
void OAIGoogleAppsCardV1Icon::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIGoogleAppsCardV1Icon::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGoogleAppsCardV1Icon::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QString OAIGoogleAppsCardV1Icon::getKnownIcon() const {
    return m_known_icon;
}
void OAIGoogleAppsCardV1Icon::setKnownIcon(const QString &known_icon) {
    m_known_icon = known_icon;
    m_known_icon_isSet = true;
}

bool OAIGoogleAppsCardV1Icon::is_known_icon_Set() const{
    return m_known_icon_isSet;
}

bool OAIGoogleAppsCardV1Icon::is_known_icon_Valid() const{
    return m_known_icon_isValid;
}

bool OAIGoogleAppsCardV1Icon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_known_icon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1Icon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
