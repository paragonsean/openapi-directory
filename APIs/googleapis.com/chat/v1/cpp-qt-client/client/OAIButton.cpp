/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIButton.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIButton::OAIButton(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIButton::OAIButton() {
    this->initializeModel();
}

OAIButton::~OAIButton() {}

void OAIButton::initializeModel() {

    m_image_button_isSet = false;
    m_image_button_isValid = false;

    m_text_button_isSet = false;
    m_text_button_isValid = false;
}

void OAIButton::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIButton::fromJsonObject(QJsonObject json) {

    m_image_button_isValid = ::OpenAPI::fromJsonValue(m_image_button, json[QString("imageButton")]);
    m_image_button_isSet = !json[QString("imageButton")].isNull() && m_image_button_isValid;

    m_text_button_isValid = ::OpenAPI::fromJsonValue(m_text_button, json[QString("textButton")]);
    m_text_button_isSet = !json[QString("textButton")].isNull() && m_text_button_isValid;
}

QString OAIButton::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIButton::asJsonObject() const {
    QJsonObject obj;
    if (m_image_button.isSet()) {
        obj.insert(QString("imageButton"), ::OpenAPI::toJsonValue(m_image_button));
    }
    if (m_text_button.isSet()) {
        obj.insert(QString("textButton"), ::OpenAPI::toJsonValue(m_text_button));
    }
    return obj;
}

OAIImageButton OAIButton::getImageButton() const {
    return m_image_button;
}
void OAIButton::setImageButton(const OAIImageButton &image_button) {
    m_image_button = image_button;
    m_image_button_isSet = true;
}

bool OAIButton::is_image_button_Set() const{
    return m_image_button_isSet;
}

bool OAIButton::is_image_button_Valid() const{
    return m_image_button_isValid;
}

OAITextButton OAIButton::getTextButton() const {
    return m_text_button;
}
void OAIButton::setTextButton(const OAITextButton &text_button) {
    m_text_button = text_button;
    m_text_button_isSet = true;
}

bool OAIButton::is_text_button_Set() const{
    return m_text_button_isSet;
}

bool OAIButton::is_text_button_Valid() const{
    return m_text_button_isValid;
}

bool OAIButton::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_button.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_button.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIButton::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
