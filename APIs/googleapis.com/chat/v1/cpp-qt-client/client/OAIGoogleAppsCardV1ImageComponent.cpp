/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1ImageComponent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1ImageComponent::OAIGoogleAppsCardV1ImageComponent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1ImageComponent::OAIGoogleAppsCardV1ImageComponent() {
    this->initializeModel();
}

OAIGoogleAppsCardV1ImageComponent::~OAIGoogleAppsCardV1ImageComponent() {}

void OAIGoogleAppsCardV1ImageComponent::initializeModel() {

    m_alt_text_isSet = false;
    m_alt_text_isValid = false;

    m_border_style_isSet = false;
    m_border_style_isValid = false;

    m_crop_style_isSet = false;
    m_crop_style_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;
}

void OAIGoogleAppsCardV1ImageComponent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1ImageComponent::fromJsonObject(QJsonObject json) {

    m_alt_text_isValid = ::OpenAPI::fromJsonValue(m_alt_text, json[QString("altText")]);
    m_alt_text_isSet = !json[QString("altText")].isNull() && m_alt_text_isValid;

    m_border_style_isValid = ::OpenAPI::fromJsonValue(m_border_style, json[QString("borderStyle")]);
    m_border_style_isSet = !json[QString("borderStyle")].isNull() && m_border_style_isValid;

    m_crop_style_isValid = ::OpenAPI::fromJsonValue(m_crop_style, json[QString("cropStyle")]);
    m_crop_style_isSet = !json[QString("cropStyle")].isNull() && m_crop_style_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageUri")]);
    m_image_uri_isSet = !json[QString("imageUri")].isNull() && m_image_uri_isValid;
}

QString OAIGoogleAppsCardV1ImageComponent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1ImageComponent::asJsonObject() const {
    QJsonObject obj;
    if (m_alt_text_isSet) {
        obj.insert(QString("altText"), ::OpenAPI::toJsonValue(m_alt_text));
    }
    if (m_border_style.isSet()) {
        obj.insert(QString("borderStyle"), ::OpenAPI::toJsonValue(m_border_style));
    }
    if (m_crop_style.isSet()) {
        obj.insert(QString("cropStyle"), ::OpenAPI::toJsonValue(m_crop_style));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageUri"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    return obj;
}

QString OAIGoogleAppsCardV1ImageComponent::getAltText() const {
    return m_alt_text;
}
void OAIGoogleAppsCardV1ImageComponent::setAltText(const QString &alt_text) {
    m_alt_text = alt_text;
    m_alt_text_isSet = true;
}

bool OAIGoogleAppsCardV1ImageComponent::is_alt_text_Set() const{
    return m_alt_text_isSet;
}

bool OAIGoogleAppsCardV1ImageComponent::is_alt_text_Valid() const{
    return m_alt_text_isValid;
}

OAIGoogleAppsCardV1BorderStyle OAIGoogleAppsCardV1ImageComponent::getBorderStyle() const {
    return m_border_style;
}
void OAIGoogleAppsCardV1ImageComponent::setBorderStyle(const OAIGoogleAppsCardV1BorderStyle &border_style) {
    m_border_style = border_style;
    m_border_style_isSet = true;
}

bool OAIGoogleAppsCardV1ImageComponent::is_border_style_Set() const{
    return m_border_style_isSet;
}

bool OAIGoogleAppsCardV1ImageComponent::is_border_style_Valid() const{
    return m_border_style_isValid;
}

OAIGoogleAppsCardV1ImageCropStyle OAIGoogleAppsCardV1ImageComponent::getCropStyle() const {
    return m_crop_style;
}
void OAIGoogleAppsCardV1ImageComponent::setCropStyle(const OAIGoogleAppsCardV1ImageCropStyle &crop_style) {
    m_crop_style = crop_style;
    m_crop_style_isSet = true;
}

bool OAIGoogleAppsCardV1ImageComponent::is_crop_style_Set() const{
    return m_crop_style_isSet;
}

bool OAIGoogleAppsCardV1ImageComponent::is_crop_style_Valid() const{
    return m_crop_style_isValid;
}

QString OAIGoogleAppsCardV1ImageComponent::getImageUri() const {
    return m_image_uri;
}
void OAIGoogleAppsCardV1ImageComponent::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIGoogleAppsCardV1ImageComponent::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIGoogleAppsCardV1ImageComponent::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

bool OAIGoogleAppsCardV1ImageComponent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alt_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1ImageComponent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
