/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnnotation.h
 *
 * Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: &#x60;&#x60;&#x60; Hello @FooBot how are you!\&quot; &#x60;&#x60;&#x60; The corresponding annotations metadata: &#x60;&#x60;&#x60; \&quot;annotations\&quot;:[{ \&quot;type\&quot;:\&quot;USER_MENTION\&quot;, \&quot;startIndex\&quot;:6, \&quot;length\&quot;:7, \&quot;userMention\&quot;: { \&quot;user\&quot;: { \&quot;name\&quot;:\&quot;users/{user}\&quot;, \&quot;displayName\&quot;:\&quot;FooBot\&quot;, \&quot;avatarUrl\&quot;:\&quot;https://goo.gl/aeDtrS\&quot;, \&quot;type\&quot;:\&quot;BOT\&quot; }, \&quot;type\&quot;:\&quot;MENTION\&quot; } }] &#x60;&#x60;&#x60;
 */

#ifndef OAIAnnotation_H
#define OAIAnnotation_H

#include <QJsonObject>

#include "OAISlashCommandMetadata.h"
#include "OAIUserMentionMetadata.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISlashCommandMetadata;
class OAIUserMentionMetadata;

class OAIAnnotation : public OAIObject {
public:
    OAIAnnotation();
    OAIAnnotation(QString json);
    ~OAIAnnotation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    OAISlashCommandMetadata getSlashCommand() const;
    void setSlashCommand(const OAISlashCommandMetadata &slash_command);
    bool is_slash_command_Set() const;
    bool is_slash_command_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIUserMentionMetadata getUserMention() const;
    void setUserMention(const OAIUserMentionMetadata &user_mention);
    bool is_user_mention_Set() const;
    bool is_user_mention_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    OAISlashCommandMetadata m_slash_command;
    bool m_slash_command_isSet;
    bool m_slash_command_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIUserMentionMetadata m_user_mention;
    bool m_user_mention_isSet;
    bool m_user_mention_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnnotation)

#endif // OAIAnnotation_H
