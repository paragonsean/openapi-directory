/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1CardFixedFooter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1CardFixedFooter::OAIGoogleAppsCardV1CardFixedFooter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1CardFixedFooter::OAIGoogleAppsCardV1CardFixedFooter() {
    this->initializeModel();
}

OAIGoogleAppsCardV1CardFixedFooter::~OAIGoogleAppsCardV1CardFixedFooter() {}

void OAIGoogleAppsCardV1CardFixedFooter::initializeModel() {

    m_primary_button_isSet = false;
    m_primary_button_isValid = false;

    m_secondary_button_isSet = false;
    m_secondary_button_isValid = false;
}

void OAIGoogleAppsCardV1CardFixedFooter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1CardFixedFooter::fromJsonObject(QJsonObject json) {

    m_primary_button_isValid = ::OpenAPI::fromJsonValue(m_primary_button, json[QString("primaryButton")]);
    m_primary_button_isSet = !json[QString("primaryButton")].isNull() && m_primary_button_isValid;

    m_secondary_button_isValid = ::OpenAPI::fromJsonValue(m_secondary_button, json[QString("secondaryButton")]);
    m_secondary_button_isSet = !json[QString("secondaryButton")].isNull() && m_secondary_button_isValid;
}

QString OAIGoogleAppsCardV1CardFixedFooter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1CardFixedFooter::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_button.isSet()) {
        obj.insert(QString("primaryButton"), ::OpenAPI::toJsonValue(m_primary_button));
    }
    if (m_secondary_button.isSet()) {
        obj.insert(QString("secondaryButton"), ::OpenAPI::toJsonValue(m_secondary_button));
    }
    return obj;
}

OAIGoogleAppsCardV1Button OAIGoogleAppsCardV1CardFixedFooter::getPrimaryButton() const {
    return m_primary_button;
}
void OAIGoogleAppsCardV1CardFixedFooter::setPrimaryButton(const OAIGoogleAppsCardV1Button &primary_button) {
    m_primary_button = primary_button;
    m_primary_button_isSet = true;
}

bool OAIGoogleAppsCardV1CardFixedFooter::is_primary_button_Set() const{
    return m_primary_button_isSet;
}

bool OAIGoogleAppsCardV1CardFixedFooter::is_primary_button_Valid() const{
    return m_primary_button_isValid;
}

OAIGoogleAppsCardV1Button OAIGoogleAppsCardV1CardFixedFooter::getSecondaryButton() const {
    return m_secondary_button;
}
void OAIGoogleAppsCardV1CardFixedFooter::setSecondaryButton(const OAIGoogleAppsCardV1Button &secondary_button) {
    m_secondary_button = secondary_button;
    m_secondary_button_isSet = true;
}

bool OAIGoogleAppsCardV1CardFixedFooter::is_secondary_button_Set() const{
    return m_secondary_button_isSet;
}

bool OAIGoogleAppsCardV1CardFixedFooter::is_secondary_button_Valid() const{
    return m_secondary_button_isValid;
}

bool OAIGoogleAppsCardV1CardFixedFooter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_button.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_button.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1CardFixedFooter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
