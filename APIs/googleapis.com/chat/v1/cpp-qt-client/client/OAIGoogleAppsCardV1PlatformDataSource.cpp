/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1PlatformDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1PlatformDataSource::OAIGoogleAppsCardV1PlatformDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1PlatformDataSource::OAIGoogleAppsCardV1PlatformDataSource() {
    this->initializeModel();
}

OAIGoogleAppsCardV1PlatformDataSource::~OAIGoogleAppsCardV1PlatformDataSource() {}

void OAIGoogleAppsCardV1PlatformDataSource::initializeModel() {

    m_common_data_source_isSet = false;
    m_common_data_source_isValid = false;

    m_host_app_data_source_isSet = false;
    m_host_app_data_source_isValid = false;
}

void OAIGoogleAppsCardV1PlatformDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1PlatformDataSource::fromJsonObject(QJsonObject json) {

    m_common_data_source_isValid = ::OpenAPI::fromJsonValue(m_common_data_source, json[QString("commonDataSource")]);
    m_common_data_source_isSet = !json[QString("commonDataSource")].isNull() && m_common_data_source_isValid;

    m_host_app_data_source_isValid = ::OpenAPI::fromJsonValue(m_host_app_data_source, json[QString("hostAppDataSource")]);
    m_host_app_data_source_isSet = !json[QString("hostAppDataSource")].isNull() && m_host_app_data_source_isValid;
}

QString OAIGoogleAppsCardV1PlatformDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1PlatformDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_common_data_source_isSet) {
        obj.insert(QString("commonDataSource"), ::OpenAPI::toJsonValue(m_common_data_source));
    }
    if (m_host_app_data_source.isSet()) {
        obj.insert(QString("hostAppDataSource"), ::OpenAPI::toJsonValue(m_host_app_data_source));
    }
    return obj;
}

QString OAIGoogleAppsCardV1PlatformDataSource::getCommonDataSource() const {
    return m_common_data_source;
}
void OAIGoogleAppsCardV1PlatformDataSource::setCommonDataSource(const QString &common_data_source) {
    m_common_data_source = common_data_source;
    m_common_data_source_isSet = true;
}

bool OAIGoogleAppsCardV1PlatformDataSource::is_common_data_source_Set() const{
    return m_common_data_source_isSet;
}

bool OAIGoogleAppsCardV1PlatformDataSource::is_common_data_source_Valid() const{
    return m_common_data_source_isValid;
}

OAIHostAppDataSourceMarkup OAIGoogleAppsCardV1PlatformDataSource::getHostAppDataSource() const {
    return m_host_app_data_source;
}
void OAIGoogleAppsCardV1PlatformDataSource::setHostAppDataSource(const OAIHostAppDataSourceMarkup &host_app_data_source) {
    m_host_app_data_source = host_app_data_source;
    m_host_app_data_source_isSet = true;
}

bool OAIGoogleAppsCardV1PlatformDataSource::is_host_app_data_source_Set() const{
    return m_host_app_data_source_isSet;
}

bool OAIGoogleAppsCardV1PlatformDataSource::is_host_app_data_source_Valid() const{
    return m_host_app_data_source_isValid;
}

bool OAIGoogleAppsCardV1PlatformDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_app_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1PlatformDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
