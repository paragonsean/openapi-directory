/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1BorderStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1BorderStyle::OAIGoogleAppsCardV1BorderStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1BorderStyle::OAIGoogleAppsCardV1BorderStyle() {
    this->initializeModel();
}

OAIGoogleAppsCardV1BorderStyle::~OAIGoogleAppsCardV1BorderStyle() {}

void OAIGoogleAppsCardV1BorderStyle::initializeModel() {

    m_corner_radius_isSet = false;
    m_corner_radius_isValid = false;

    m_stroke_color_isSet = false;
    m_stroke_color_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleAppsCardV1BorderStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1BorderStyle::fromJsonObject(QJsonObject json) {

    m_corner_radius_isValid = ::OpenAPI::fromJsonValue(m_corner_radius, json[QString("cornerRadius")]);
    m_corner_radius_isSet = !json[QString("cornerRadius")].isNull() && m_corner_radius_isValid;

    m_stroke_color_isValid = ::OpenAPI::fromJsonValue(m_stroke_color, json[QString("strokeColor")]);
    m_stroke_color_isSet = !json[QString("strokeColor")].isNull() && m_stroke_color_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleAppsCardV1BorderStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1BorderStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_corner_radius_isSet) {
        obj.insert(QString("cornerRadius"), ::OpenAPI::toJsonValue(m_corner_radius));
    }
    if (m_stroke_color.isSet()) {
        obj.insert(QString("strokeColor"), ::OpenAPI::toJsonValue(m_stroke_color));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGoogleAppsCardV1BorderStyle::getCornerRadius() const {
    return m_corner_radius;
}
void OAIGoogleAppsCardV1BorderStyle::setCornerRadius(const qint32 &corner_radius) {
    m_corner_radius = corner_radius;
    m_corner_radius_isSet = true;
}

bool OAIGoogleAppsCardV1BorderStyle::is_corner_radius_Set() const{
    return m_corner_radius_isSet;
}

bool OAIGoogleAppsCardV1BorderStyle::is_corner_radius_Valid() const{
    return m_corner_radius_isValid;
}

OAIColor OAIGoogleAppsCardV1BorderStyle::getStrokeColor() const {
    return m_stroke_color;
}
void OAIGoogleAppsCardV1BorderStyle::setStrokeColor(const OAIColor &stroke_color) {
    m_stroke_color = stroke_color;
    m_stroke_color_isSet = true;
}

bool OAIGoogleAppsCardV1BorderStyle::is_stroke_color_Set() const{
    return m_stroke_color_isSet;
}

bool OAIGoogleAppsCardV1BorderStyle::is_stroke_color_Valid() const{
    return m_stroke_color_isValid;
}

QString OAIGoogleAppsCardV1BorderStyle::getType() const {
    return m_type;
}
void OAIGoogleAppsCardV1BorderStyle::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleAppsCardV1BorderStyle::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleAppsCardV1BorderStyle::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleAppsCardV1BorderStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corner_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stroke_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1BorderStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
