/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1OpenLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1OpenLink::OAIGoogleAppsCardV1OpenLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1OpenLink::OAIGoogleAppsCardV1OpenLink() {
    this->initializeModel();
}

OAIGoogleAppsCardV1OpenLink::~OAIGoogleAppsCardV1OpenLink() {}

void OAIGoogleAppsCardV1OpenLink::initializeModel() {

    m_on_close_isSet = false;
    m_on_close_isValid = false;

    m_open_as_isSet = false;
    m_open_as_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGoogleAppsCardV1OpenLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1OpenLink::fromJsonObject(QJsonObject json) {

    m_on_close_isValid = ::OpenAPI::fromJsonValue(m_on_close, json[QString("onClose")]);
    m_on_close_isSet = !json[QString("onClose")].isNull() && m_on_close_isValid;

    m_open_as_isValid = ::OpenAPI::fromJsonValue(m_open_as, json[QString("openAs")]);
    m_open_as_isSet = !json[QString("openAs")].isNull() && m_open_as_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGoogleAppsCardV1OpenLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1OpenLink::asJsonObject() const {
    QJsonObject obj;
    if (m_on_close_isSet) {
        obj.insert(QString("onClose"), ::OpenAPI::toJsonValue(m_on_close));
    }
    if (m_open_as_isSet) {
        obj.insert(QString("openAs"), ::OpenAPI::toJsonValue(m_open_as));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIGoogleAppsCardV1OpenLink::getOnClose() const {
    return m_on_close;
}
void OAIGoogleAppsCardV1OpenLink::setOnClose(const QString &on_close) {
    m_on_close = on_close;
    m_on_close_isSet = true;
}

bool OAIGoogleAppsCardV1OpenLink::is_on_close_Set() const{
    return m_on_close_isSet;
}

bool OAIGoogleAppsCardV1OpenLink::is_on_close_Valid() const{
    return m_on_close_isValid;
}

QString OAIGoogleAppsCardV1OpenLink::getOpenAs() const {
    return m_open_as;
}
void OAIGoogleAppsCardV1OpenLink::setOpenAs(const QString &open_as) {
    m_open_as = open_as;
    m_open_as_isSet = true;
}

bool OAIGoogleAppsCardV1OpenLink::is_open_as_Set() const{
    return m_open_as_isSet;
}

bool OAIGoogleAppsCardV1OpenLink::is_open_as_Valid() const{
    return m_open_as_isValid;
}

QString OAIGoogleAppsCardV1OpenLink::getUrl() const {
    return m_url;
}
void OAIGoogleAppsCardV1OpenLink::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGoogleAppsCardV1OpenLink::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGoogleAppsCardV1OpenLink::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGoogleAppsCardV1OpenLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_as_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1OpenLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
