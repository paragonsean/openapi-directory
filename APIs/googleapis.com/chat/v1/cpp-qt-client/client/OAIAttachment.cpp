/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachment::OAIAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachment::OAIAttachment() {
    this->initializeModel();
}

OAIAttachment::~OAIAttachment() {}

void OAIAttachment::initializeModel() {

    m_attachment_data_ref_isSet = false;
    m_attachment_data_ref_isValid = false;

    m_content_name_isSet = false;
    m_content_name_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;

    m_drive_data_ref_isSet = false;
    m_drive_data_ref_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_thumbnail_uri_isSet = false;
    m_thumbnail_uri_isValid = false;
}

void OAIAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachment::fromJsonObject(QJsonObject json) {

    m_attachment_data_ref_isValid = ::OpenAPI::fromJsonValue(m_attachment_data_ref, json[QString("attachmentDataRef")]);
    m_attachment_data_ref_isSet = !json[QString("attachmentDataRef")].isNull() && m_attachment_data_ref_isValid;

    m_content_name_isValid = ::OpenAPI::fromJsonValue(m_content_name, json[QString("contentName")]);
    m_content_name_isSet = !json[QString("contentName")].isNull() && m_content_name_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("downloadUri")]);
    m_download_uri_isSet = !json[QString("downloadUri")].isNull() && m_download_uri_isValid;

    m_drive_data_ref_isValid = ::OpenAPI::fromJsonValue(m_drive_data_ref, json[QString("driveDataRef")]);
    m_drive_data_ref_isSet = !json[QString("driveDataRef")].isNull() && m_drive_data_ref_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_thumbnail_uri_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_uri, json[QString("thumbnailUri")]);
    m_thumbnail_uri_isSet = !json[QString("thumbnailUri")].isNull() && m_thumbnail_uri_isValid;
}

QString OAIAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_data_ref.isSet()) {
        obj.insert(QString("attachmentDataRef"), ::OpenAPI::toJsonValue(m_attachment_data_ref));
    }
    if (m_content_name_isSet) {
        obj.insert(QString("contentName"), ::OpenAPI::toJsonValue(m_content_name));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_download_uri_isSet) {
        obj.insert(QString("downloadUri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    if (m_drive_data_ref.isSet()) {
        obj.insert(QString("driveDataRef"), ::OpenAPI::toJsonValue(m_drive_data_ref));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_thumbnail_uri_isSet) {
        obj.insert(QString("thumbnailUri"), ::OpenAPI::toJsonValue(m_thumbnail_uri));
    }
    return obj;
}

OAIAttachmentDataRef OAIAttachment::getAttachmentDataRef() const {
    return m_attachment_data_ref;
}
void OAIAttachment::setAttachmentDataRef(const OAIAttachmentDataRef &attachment_data_ref) {
    m_attachment_data_ref = attachment_data_ref;
    m_attachment_data_ref_isSet = true;
}

bool OAIAttachment::is_attachment_data_ref_Set() const{
    return m_attachment_data_ref_isSet;
}

bool OAIAttachment::is_attachment_data_ref_Valid() const{
    return m_attachment_data_ref_isValid;
}

QString OAIAttachment::getContentName() const {
    return m_content_name;
}
void OAIAttachment::setContentName(const QString &content_name) {
    m_content_name = content_name;
    m_content_name_isSet = true;
}

bool OAIAttachment::is_content_name_Set() const{
    return m_content_name_isSet;
}

bool OAIAttachment::is_content_name_Valid() const{
    return m_content_name_isValid;
}

QString OAIAttachment::getContentType() const {
    return m_content_type;
}
void OAIAttachment::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAttachment::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAttachment::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIAttachment::getDownloadUri() const {
    return m_download_uri;
}
void OAIAttachment::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIAttachment::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIAttachment::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

OAIDriveDataRef OAIAttachment::getDriveDataRef() const {
    return m_drive_data_ref;
}
void OAIAttachment::setDriveDataRef(const OAIDriveDataRef &drive_data_ref) {
    m_drive_data_ref = drive_data_ref;
    m_drive_data_ref_isSet = true;
}

bool OAIAttachment::is_drive_data_ref_Set() const{
    return m_drive_data_ref_isSet;
}

bool OAIAttachment::is_drive_data_ref_Valid() const{
    return m_drive_data_ref_isValid;
}

QString OAIAttachment::getName() const {
    return m_name;
}
void OAIAttachment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAttachment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttachment::getSource() const {
    return m_source;
}
void OAIAttachment::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAttachment::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAttachment::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIAttachment::getThumbnailUri() const {
    return m_thumbnail_uri;
}
void OAIAttachment::setThumbnailUri(const QString &thumbnail_uri) {
    m_thumbnail_uri = thumbnail_uri;
    m_thumbnail_uri_isSet = true;
}

bool OAIAttachment::is_thumbnail_uri_Set() const{
    return m_thumbnail_uri_isSet;
}

bool OAIAttachment::is_thumbnail_uri_Valid() const{
    return m_thumbnail_uri_isValid;
}

bool OAIAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_data_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_data_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
