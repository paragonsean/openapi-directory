/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDialogAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDialogAction::OAIDialogAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDialogAction::OAIDialogAction() {
    this->initializeModel();
}

OAIDialogAction::~OAIDialogAction() {}

void OAIDialogAction::initializeModel() {

    m_action_status_isSet = false;
    m_action_status_isValid = false;

    m_dialog_isSet = false;
    m_dialog_isValid = false;
}

void OAIDialogAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDialogAction::fromJsonObject(QJsonObject json) {

    m_action_status_isValid = ::OpenAPI::fromJsonValue(m_action_status, json[QString("actionStatus")]);
    m_action_status_isSet = !json[QString("actionStatus")].isNull() && m_action_status_isValid;

    m_dialog_isValid = ::OpenAPI::fromJsonValue(m_dialog, json[QString("dialog")]);
    m_dialog_isSet = !json[QString("dialog")].isNull() && m_dialog_isValid;
}

QString OAIDialogAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDialogAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_status.isSet()) {
        obj.insert(QString("actionStatus"), ::OpenAPI::toJsonValue(m_action_status));
    }
    if (m_dialog.isSet()) {
        obj.insert(QString("dialog"), ::OpenAPI::toJsonValue(m_dialog));
    }
    return obj;
}

OAIActionStatus OAIDialogAction::getActionStatus() const {
    return m_action_status;
}
void OAIDialogAction::setActionStatus(const OAIActionStatus &action_status) {
    m_action_status = action_status;
    m_action_status_isSet = true;
}

bool OAIDialogAction::is_action_status_Set() const{
    return m_action_status_isSet;
}

bool OAIDialogAction::is_action_status_Valid() const{
    return m_action_status_isValid;
}

OAIDialog OAIDialogAction::getDialog() const {
    return m_dialog;
}
void OAIDialogAction::setDialog(const OAIDialog &dialog) {
    m_dialog = dialog;
    m_dialog_isSet = true;
}

bool OAIDialogAction::is_dialog_Set() const{
    return m_dialog_isSet;
}

bool OAIDialogAction::is_dialog_Valid() const{
    return m_dialog_isValid;
}

bool OAIDialogAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDialogAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
