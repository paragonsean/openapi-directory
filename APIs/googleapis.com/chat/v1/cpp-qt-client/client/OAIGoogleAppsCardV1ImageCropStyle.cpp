/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1ImageCropStyle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1ImageCropStyle::OAIGoogleAppsCardV1ImageCropStyle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1ImageCropStyle::OAIGoogleAppsCardV1ImageCropStyle() {
    this->initializeModel();
}

OAIGoogleAppsCardV1ImageCropStyle::~OAIGoogleAppsCardV1ImageCropStyle() {}

void OAIGoogleAppsCardV1ImageCropStyle::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleAppsCardV1ImageCropStyle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1ImageCropStyle::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("aspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleAppsCardV1ImageCropStyle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1ImageCropStyle::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIGoogleAppsCardV1ImageCropStyle::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIGoogleAppsCardV1ImageCropStyle::setAspectRatio(const double &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIGoogleAppsCardV1ImageCropStyle::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIGoogleAppsCardV1ImageCropStyle::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QString OAIGoogleAppsCardV1ImageCropStyle::getType() const {
    return m_type;
}
void OAIGoogleAppsCardV1ImageCropStyle::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleAppsCardV1ImageCropStyle::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleAppsCardV1ImageCropStyle::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleAppsCardV1ImageCropStyle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1ImageCropStyle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
