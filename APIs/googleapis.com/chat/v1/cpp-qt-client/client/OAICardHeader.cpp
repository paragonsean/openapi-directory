/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardHeader::OAICardHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardHeader::OAICardHeader() {
    this->initializeModel();
}

OAICardHeader::~OAICardHeader() {}

void OAICardHeader::initializeModel() {

    m_image_style_isSet = false;
    m_image_style_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAICardHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardHeader::fromJsonObject(QJsonObject json) {

    m_image_style_isValid = ::OpenAPI::fromJsonValue(m_image_style, json[QString("imageStyle")]);
    m_image_style_isSet = !json[QString("imageStyle")].isNull() && m_image_style_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAICardHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_image_style_isSet) {
        obj.insert(QString("imageStyle"), ::OpenAPI::toJsonValue(m_image_style));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAICardHeader::getImageStyle() const {
    return m_image_style;
}
void OAICardHeader::setImageStyle(const QString &image_style) {
    m_image_style = image_style;
    m_image_style_isSet = true;
}

bool OAICardHeader::is_image_style_Set() const{
    return m_image_style_isSet;
}

bool OAICardHeader::is_image_style_Valid() const{
    return m_image_style_isValid;
}

QString OAICardHeader::getImageUrl() const {
    return m_image_url;
}
void OAICardHeader::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAICardHeader::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAICardHeader::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAICardHeader::getSubtitle() const {
    return m_subtitle;
}
void OAICardHeader::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAICardHeader::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAICardHeader::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAICardHeader::getTitle() const {
    return m_title;
}
void OAICardHeader::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICardHeader::is_title_Set() const{
    return m_title_isSet;
}

bool OAICardHeader::is_title_Valid() const{
    return m_title_isValid;
}

bool OAICardHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
