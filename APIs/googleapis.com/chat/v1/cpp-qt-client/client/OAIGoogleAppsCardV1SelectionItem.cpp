/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1SelectionItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1SelectionItem::OAIGoogleAppsCardV1SelectionItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1SelectionItem::OAIGoogleAppsCardV1SelectionItem() {
    this->initializeModel();
}

OAIGoogleAppsCardV1SelectionItem::~OAIGoogleAppsCardV1SelectionItem() {}

void OAIGoogleAppsCardV1SelectionItem::initializeModel() {

    m_bottom_text_isSet = false;
    m_bottom_text_isValid = false;

    m_selected_isSet = false;
    m_selected_isValid = false;

    m_start_icon_uri_isSet = false;
    m_start_icon_uri_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleAppsCardV1SelectionItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1SelectionItem::fromJsonObject(QJsonObject json) {

    m_bottom_text_isValid = ::OpenAPI::fromJsonValue(m_bottom_text, json[QString("bottomText")]);
    m_bottom_text_isSet = !json[QString("bottomText")].isNull() && m_bottom_text_isValid;

    m_selected_isValid = ::OpenAPI::fromJsonValue(m_selected, json[QString("selected")]);
    m_selected_isSet = !json[QString("selected")].isNull() && m_selected_isValid;

    m_start_icon_uri_isValid = ::OpenAPI::fromJsonValue(m_start_icon_uri, json[QString("startIconUri")]);
    m_start_icon_uri_isSet = !json[QString("startIconUri")].isNull() && m_start_icon_uri_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleAppsCardV1SelectionItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1SelectionItem::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_text_isSet) {
        obj.insert(QString("bottomText"), ::OpenAPI::toJsonValue(m_bottom_text));
    }
    if (m_selected_isSet) {
        obj.insert(QString("selected"), ::OpenAPI::toJsonValue(m_selected));
    }
    if (m_start_icon_uri_isSet) {
        obj.insert(QString("startIconUri"), ::OpenAPI::toJsonValue(m_start_icon_uri));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIGoogleAppsCardV1SelectionItem::getBottomText() const {
    return m_bottom_text;
}
void OAIGoogleAppsCardV1SelectionItem::setBottomText(const QString &bottom_text) {
    m_bottom_text = bottom_text;
    m_bottom_text_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionItem::is_bottom_text_Set() const{
    return m_bottom_text_isSet;
}

bool OAIGoogleAppsCardV1SelectionItem::is_bottom_text_Valid() const{
    return m_bottom_text_isValid;
}

bool OAIGoogleAppsCardV1SelectionItem::isSelected() const {
    return m_selected;
}
void OAIGoogleAppsCardV1SelectionItem::setSelected(const bool &selected) {
    m_selected = selected;
    m_selected_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionItem::is_selected_Set() const{
    return m_selected_isSet;
}

bool OAIGoogleAppsCardV1SelectionItem::is_selected_Valid() const{
    return m_selected_isValid;
}

QString OAIGoogleAppsCardV1SelectionItem::getStartIconUri() const {
    return m_start_icon_uri;
}
void OAIGoogleAppsCardV1SelectionItem::setStartIconUri(const QString &start_icon_uri) {
    m_start_icon_uri = start_icon_uri;
    m_start_icon_uri_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionItem::is_start_icon_uri_Set() const{
    return m_start_icon_uri_isSet;
}

bool OAIGoogleAppsCardV1SelectionItem::is_start_icon_uri_Valid() const{
    return m_start_icon_uri_isValid;
}

QString OAIGoogleAppsCardV1SelectionItem::getText() const {
    return m_text;
}
void OAIGoogleAppsCardV1SelectionItem::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionItem::is_text_Set() const{
    return m_text_isSet;
}

bool OAIGoogleAppsCardV1SelectionItem::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIGoogleAppsCardV1SelectionItem::getValue() const {
    return m_value;
}
void OAIGoogleAppsCardV1SelectionItem::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionItem::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleAppsCardV1SelectionItem::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleAppsCardV1SelectionItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_icon_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1SelectionItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
