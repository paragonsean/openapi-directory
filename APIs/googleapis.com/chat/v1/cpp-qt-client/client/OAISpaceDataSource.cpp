/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceDataSource::OAISpaceDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceDataSource::OAISpaceDataSource() {
    this->initializeModel();
}

OAISpaceDataSource::~OAISpaceDataSource() {}

void OAISpaceDataSource::initializeModel() {

    m_default_to_current_space_isSet = false;
    m_default_to_current_space_isValid = false;
}

void OAISpaceDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceDataSource::fromJsonObject(QJsonObject json) {

    m_default_to_current_space_isValid = ::OpenAPI::fromJsonValue(m_default_to_current_space, json[QString("defaultToCurrentSpace")]);
    m_default_to_current_space_isSet = !json[QString("defaultToCurrentSpace")].isNull() && m_default_to_current_space_isValid;
}

QString OAISpaceDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_default_to_current_space_isSet) {
        obj.insert(QString("defaultToCurrentSpace"), ::OpenAPI::toJsonValue(m_default_to_current_space));
    }
    return obj;
}

bool OAISpaceDataSource::isDefaultToCurrentSpace() const {
    return m_default_to_current_space;
}
void OAISpaceDataSource::setDefaultToCurrentSpace(const bool &default_to_current_space) {
    m_default_to_current_space = default_to_current_space;
    m_default_to_current_space_isSet = true;
}

bool OAISpaceDataSource::is_default_to_current_space_Set() const{
    return m_default_to_current_space_isSet;
}

bool OAISpaceDataSource::is_default_to_current_space_Valid() const{
    return m_default_to_current_space_isValid;
}

bool OAISpaceDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_to_current_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
