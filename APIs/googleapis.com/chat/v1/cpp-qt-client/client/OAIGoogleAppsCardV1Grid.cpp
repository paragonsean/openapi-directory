/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1Grid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1Grid::OAIGoogleAppsCardV1Grid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1Grid::OAIGoogleAppsCardV1Grid() {
    this->initializeModel();
}

OAIGoogleAppsCardV1Grid::~OAIGoogleAppsCardV1Grid() {}

void OAIGoogleAppsCardV1Grid::initializeModel() {

    m_border_style_isSet = false;
    m_border_style_isValid = false;

    m_column_count_isSet = false;
    m_column_count_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_on_click_isSet = false;
    m_on_click_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGoogleAppsCardV1Grid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1Grid::fromJsonObject(QJsonObject json) {

    m_border_style_isValid = ::OpenAPI::fromJsonValue(m_border_style, json[QString("borderStyle")]);
    m_border_style_isSet = !json[QString("borderStyle")].isNull() && m_border_style_isValid;

    m_column_count_isValid = ::OpenAPI::fromJsonValue(m_column_count, json[QString("columnCount")]);
    m_column_count_isSet = !json[QString("columnCount")].isNull() && m_column_count_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_on_click_isValid = ::OpenAPI::fromJsonValue(m_on_click, json[QString("onClick")]);
    m_on_click_isSet = !json[QString("onClick")].isNull() && m_on_click_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGoogleAppsCardV1Grid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1Grid::asJsonObject() const {
    QJsonObject obj;
    if (m_border_style.isSet()) {
        obj.insert(QString("borderStyle"), ::OpenAPI::toJsonValue(m_border_style));
    }
    if (m_column_count_isSet) {
        obj.insert(QString("columnCount"), ::OpenAPI::toJsonValue(m_column_count));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_on_click.isSet()) {
        obj.insert(QString("onClick"), ::OpenAPI::toJsonValue(m_on_click));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIGoogleAppsCardV1BorderStyle OAIGoogleAppsCardV1Grid::getBorderStyle() const {
    return m_border_style;
}
void OAIGoogleAppsCardV1Grid::setBorderStyle(const OAIGoogleAppsCardV1BorderStyle &border_style) {
    m_border_style = border_style;
    m_border_style_isSet = true;
}

bool OAIGoogleAppsCardV1Grid::is_border_style_Set() const{
    return m_border_style_isSet;
}

bool OAIGoogleAppsCardV1Grid::is_border_style_Valid() const{
    return m_border_style_isValid;
}

qint32 OAIGoogleAppsCardV1Grid::getColumnCount() const {
    return m_column_count;
}
void OAIGoogleAppsCardV1Grid::setColumnCount(const qint32 &column_count) {
    m_column_count = column_count;
    m_column_count_isSet = true;
}

bool OAIGoogleAppsCardV1Grid::is_column_count_Set() const{
    return m_column_count_isSet;
}

bool OAIGoogleAppsCardV1Grid::is_column_count_Valid() const{
    return m_column_count_isValid;
}

QList<OAIGoogleAppsCardV1GridItem> OAIGoogleAppsCardV1Grid::getItems() const {
    return m_items;
}
void OAIGoogleAppsCardV1Grid::setItems(const QList<OAIGoogleAppsCardV1GridItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGoogleAppsCardV1Grid::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGoogleAppsCardV1Grid::is_items_Valid() const{
    return m_items_isValid;
}

OAIGoogleAppsCardV1OnClick OAIGoogleAppsCardV1Grid::getOnClick() const {
    return m_on_click;
}
void OAIGoogleAppsCardV1Grid::setOnClick(const OAIGoogleAppsCardV1OnClick &on_click) {
    m_on_click = on_click;
    m_on_click_isSet = true;
}

bool OAIGoogleAppsCardV1Grid::is_on_click_Set() const{
    return m_on_click_isSet;
}

bool OAIGoogleAppsCardV1Grid::is_on_click_Valid() const{
    return m_on_click_isValid;
}

QString OAIGoogleAppsCardV1Grid::getTitle() const {
    return m_title;
}
void OAIGoogleAppsCardV1Grid::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleAppsCardV1Grid::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleAppsCardV1Grid::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGoogleAppsCardV1Grid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_border_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_click.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1Grid::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
