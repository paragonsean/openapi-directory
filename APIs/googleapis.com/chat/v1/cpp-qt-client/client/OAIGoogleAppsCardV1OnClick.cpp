/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1OnClick.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1OnClick::OAIGoogleAppsCardV1OnClick(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1OnClick::OAIGoogleAppsCardV1OnClick() {
    this->initializeModel();
}

OAIGoogleAppsCardV1OnClick::~OAIGoogleAppsCardV1OnClick() {}

void OAIGoogleAppsCardV1OnClick::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_open_dynamic_link_action_isSet = false;
    m_open_dynamic_link_action_isValid = false;

    m_open_link_isSet = false;
    m_open_link_isValid = false;
}

void OAIGoogleAppsCardV1OnClick::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1OnClick::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_open_dynamic_link_action_isValid = ::OpenAPI::fromJsonValue(m_open_dynamic_link_action, json[QString("openDynamicLinkAction")]);
    m_open_dynamic_link_action_isSet = !json[QString("openDynamicLinkAction")].isNull() && m_open_dynamic_link_action_isValid;

    m_open_link_isValid = ::OpenAPI::fromJsonValue(m_open_link, json[QString("openLink")]);
    m_open_link_isSet = !json[QString("openLink")].isNull() && m_open_link_isValid;
}

QString OAIGoogleAppsCardV1OnClick::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1OnClick::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_open_dynamic_link_action.isSet()) {
        obj.insert(QString("openDynamicLinkAction"), ::OpenAPI::toJsonValue(m_open_dynamic_link_action));
    }
    if (m_open_link.isSet()) {
        obj.insert(QString("openLink"), ::OpenAPI::toJsonValue(m_open_link));
    }
    return obj;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1OnClick::getAction() const {
    return m_action;
}
void OAIGoogleAppsCardV1OnClick::setAction(const OAIGoogleAppsCardV1Action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIGoogleAppsCardV1OnClick::is_action_Set() const{
    return m_action_isSet;
}

bool OAIGoogleAppsCardV1OnClick::is_action_Valid() const{
    return m_action_isValid;
}

OAIGoogleAppsCardV1Card OAIGoogleAppsCardV1OnClick::getCard() const {
    return m_card;
}
void OAIGoogleAppsCardV1OnClick::setCard(const OAIGoogleAppsCardV1Card &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIGoogleAppsCardV1OnClick::is_card_Set() const{
    return m_card_isSet;
}

bool OAIGoogleAppsCardV1OnClick::is_card_Valid() const{
    return m_card_isValid;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1OnClick::getOpenDynamicLinkAction() const {
    return m_open_dynamic_link_action;
}
void OAIGoogleAppsCardV1OnClick::setOpenDynamicLinkAction(const OAIGoogleAppsCardV1Action &open_dynamic_link_action) {
    m_open_dynamic_link_action = open_dynamic_link_action;
    m_open_dynamic_link_action_isSet = true;
}

bool OAIGoogleAppsCardV1OnClick::is_open_dynamic_link_action_Set() const{
    return m_open_dynamic_link_action_isSet;
}

bool OAIGoogleAppsCardV1OnClick::is_open_dynamic_link_action_Valid() const{
    return m_open_dynamic_link_action_isValid;
}

OAIGoogleAppsCardV1OpenLink OAIGoogleAppsCardV1OnClick::getOpenLink() const {
    return m_open_link;
}
void OAIGoogleAppsCardV1OnClick::setOpenLink(const OAIGoogleAppsCardV1OpenLink &open_link) {
    m_open_link = open_link;
    m_open_link_isSet = true;
}

bool OAIGoogleAppsCardV1OnClick::is_open_link_Set() const{
    return m_open_link_isSet;
}

bool OAIGoogleAppsCardV1OnClick::is_open_link_Valid() const{
    return m_open_link_isValid;
}

bool OAIGoogleAppsCardV1OnClick::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_dynamic_link_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1OnClick::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
