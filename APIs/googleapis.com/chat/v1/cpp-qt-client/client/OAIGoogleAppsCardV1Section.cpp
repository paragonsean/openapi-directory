/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1Section.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1Section::OAIGoogleAppsCardV1Section(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1Section::OAIGoogleAppsCardV1Section() {
    this->initializeModel();
}

OAIGoogleAppsCardV1Section::~OAIGoogleAppsCardV1Section() {}

void OAIGoogleAppsCardV1Section::initializeModel() {

    m_collapsible_isSet = false;
    m_collapsible_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_uncollapsible_widgets_count_isSet = false;
    m_uncollapsible_widgets_count_isValid = false;

    m_widgets_isSet = false;
    m_widgets_isValid = false;
}

void OAIGoogleAppsCardV1Section::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1Section::fromJsonObject(QJsonObject json) {

    m_collapsible_isValid = ::OpenAPI::fromJsonValue(m_collapsible, json[QString("collapsible")]);
    m_collapsible_isSet = !json[QString("collapsible")].isNull() && m_collapsible_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_uncollapsible_widgets_count_isValid = ::OpenAPI::fromJsonValue(m_uncollapsible_widgets_count, json[QString("uncollapsibleWidgetsCount")]);
    m_uncollapsible_widgets_count_isSet = !json[QString("uncollapsibleWidgetsCount")].isNull() && m_uncollapsible_widgets_count_isValid;

    m_widgets_isValid = ::OpenAPI::fromJsonValue(m_widgets, json[QString("widgets")]);
    m_widgets_isSet = !json[QString("widgets")].isNull() && m_widgets_isValid;
}

QString OAIGoogleAppsCardV1Section::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1Section::asJsonObject() const {
    QJsonObject obj;
    if (m_collapsible_isSet) {
        obj.insert(QString("collapsible"), ::OpenAPI::toJsonValue(m_collapsible));
    }
    if (m_header_isSet) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_uncollapsible_widgets_count_isSet) {
        obj.insert(QString("uncollapsibleWidgetsCount"), ::OpenAPI::toJsonValue(m_uncollapsible_widgets_count));
    }
    if (m_widgets.size() > 0) {
        obj.insert(QString("widgets"), ::OpenAPI::toJsonValue(m_widgets));
    }
    return obj;
}

bool OAIGoogleAppsCardV1Section::isCollapsible() const {
    return m_collapsible;
}
void OAIGoogleAppsCardV1Section::setCollapsible(const bool &collapsible) {
    m_collapsible = collapsible;
    m_collapsible_isSet = true;
}

bool OAIGoogleAppsCardV1Section::is_collapsible_Set() const{
    return m_collapsible_isSet;
}

bool OAIGoogleAppsCardV1Section::is_collapsible_Valid() const{
    return m_collapsible_isValid;
}

QString OAIGoogleAppsCardV1Section::getHeader() const {
    return m_header;
}
void OAIGoogleAppsCardV1Section::setHeader(const QString &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIGoogleAppsCardV1Section::is_header_Set() const{
    return m_header_isSet;
}

bool OAIGoogleAppsCardV1Section::is_header_Valid() const{
    return m_header_isValid;
}

qint32 OAIGoogleAppsCardV1Section::getUncollapsibleWidgetsCount() const {
    return m_uncollapsible_widgets_count;
}
void OAIGoogleAppsCardV1Section::setUncollapsibleWidgetsCount(const qint32 &uncollapsible_widgets_count) {
    m_uncollapsible_widgets_count = uncollapsible_widgets_count;
    m_uncollapsible_widgets_count_isSet = true;
}

bool OAIGoogleAppsCardV1Section::is_uncollapsible_widgets_count_Set() const{
    return m_uncollapsible_widgets_count_isSet;
}

bool OAIGoogleAppsCardV1Section::is_uncollapsible_widgets_count_Valid() const{
    return m_uncollapsible_widgets_count_isValid;
}

QList<OAIGoogleAppsCardV1Widget> OAIGoogleAppsCardV1Section::getWidgets() const {
    return m_widgets;
}
void OAIGoogleAppsCardV1Section::setWidgets(const QList<OAIGoogleAppsCardV1Widget> &widgets) {
    m_widgets = widgets;
    m_widgets_isSet = true;
}

bool OAIGoogleAppsCardV1Section::is_widgets_Set() const{
    return m_widgets_isSet;
}

bool OAIGoogleAppsCardV1Section::is_widgets_Valid() const{
    return m_widgets_isValid;
}

bool OAIGoogleAppsCardV1Section::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collapsible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncollapsible_widgets_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_widgets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1Section::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
