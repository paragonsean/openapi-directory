/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommonEventObject.h
 *
 * Represents information about the user&#39;s client, such as locale, host app, and platform. For Chat apps, &#x60;CommonEventObject&#x60; includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
 */

#ifndef OAICommonEventObject_H
#define OAICommonEventObject_H

#include <QJsonObject>

#include "OAIInputs.h"
#include "OAITimeZone.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputs;
class OAITimeZone;

class OAICommonEventObject : public OAIObject {
public:
    OAICommonEventObject();
    OAICommonEventObject(QString json);
    ~OAICommonEventObject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIInputs> getFormInputs() const;
    void setFormInputs(const QMap<QString, OAIInputs> &form_inputs);
    bool is_form_inputs_Set() const;
    bool is_form_inputs_Valid() const;

    QString getHostApp() const;
    void setHostApp(const QString &host_app);
    bool is_host_app_Set() const;
    bool is_host_app_Valid() const;

    QString getInvokedFunction() const;
    void setInvokedFunction(const QString &invoked_function);
    bool is_invoked_function_Set() const;
    bool is_invoked_function_Valid() const;

    QMap<QString, QString> getParameters() const;
    void setParameters(const QMap<QString, QString> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    OAITimeZone getTimeZone() const;
    void setTimeZone(const OAITimeZone &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getUserLocale() const;
    void setUserLocale(const QString &user_locale);
    bool is_user_locale_Set() const;
    bool is_user_locale_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIInputs> m_form_inputs;
    bool m_form_inputs_isSet;
    bool m_form_inputs_isValid;

    QString m_host_app;
    bool m_host_app_isSet;
    bool m_host_app_isValid;

    QString m_invoked_function;
    bool m_invoked_function_isSet;
    bool m_invoked_function_isValid;

    QMap<QString, QString> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    OAITimeZone m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_user_locale;
    bool m_user_locale_isSet;
    bool m_user_locale_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommonEventObject)

#endif // OAICommonEventObject_H
