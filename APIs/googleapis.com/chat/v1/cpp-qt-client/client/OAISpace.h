/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpace.h
 *
 * A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
 */

#ifndef OAISpace_H
#define OAISpace_H

#include <QJsonObject>

#include "OAISpaceDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISpaceDetails;

class OAISpace : public OAIObject {
public:
    OAISpace();
    OAISpace(QString json);
    ~OAISpace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAdminInstalled() const;
    void setAdminInstalled(const bool &admin_installed);
    bool is_admin_installed_Set() const;
    bool is_admin_installed_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isExternalUserAllowed() const;
    void setExternalUserAllowed(const bool &external_user_allowed);
    bool is_external_user_allowed_Set() const;
    bool is_external_user_allowed_Valid() const;

    bool isImportMode() const;
    void setImportMode(const bool &import_mode);
    bool is_import_mode_Set() const;
    bool is_import_mode_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isSingleUserBotDm() const;
    void setSingleUserBotDm(const bool &single_user_bot_dm);
    bool is_single_user_bot_dm_Set() const;
    bool is_single_user_bot_dm_Valid() const;

    OAISpaceDetails getSpaceDetails() const;
    void setSpaceDetails(const OAISpaceDetails &space_details);
    bool is_space_details_Set() const;
    bool is_space_details_Valid() const;

    QString getSpaceHistoryState() const;
    void setSpaceHistoryState(const QString &space_history_state);
    bool is_space_history_state_Set() const;
    bool is_space_history_state_Valid() const;

    QString getSpaceThreadingState() const;
    void setSpaceThreadingState(const QString &space_threading_state);
    bool is_space_threading_state_Set() const;
    bool is_space_threading_state_Valid() const;

    QString getSpaceType() const;
    void setSpaceType(const QString &space_type);
    bool is_space_type_Set() const;
    bool is_space_type_Valid() const;

    Q_DECL_DEPRECATED bool isThreaded() const;
    Q_DECL_DEPRECATED void setThreaded(const bool &threaded);
    Q_DECL_DEPRECATED bool is_threaded_Set() const;
    Q_DECL_DEPRECATED bool is_threaded_Valid() const;

    Q_DECL_DEPRECATED QString getType() const;
    Q_DECL_DEPRECATED void setType(const QString &type);
    Q_DECL_DEPRECATED bool is_type_Set() const;
    Q_DECL_DEPRECATED bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_admin_installed;
    bool m_admin_installed_isSet;
    bool m_admin_installed_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_external_user_allowed;
    bool m_external_user_allowed_isSet;
    bool m_external_user_allowed_isValid;

    bool m_import_mode;
    bool m_import_mode_isSet;
    bool m_import_mode_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_single_user_bot_dm;
    bool m_single_user_bot_dm_isSet;
    bool m_single_user_bot_dm_isValid;

    OAISpaceDetails m_space_details;
    bool m_space_details_isSet;
    bool m_space_details_isValid;

    QString m_space_history_state;
    bool m_space_history_state_isSet;
    bool m_space_history_state_isValid;

    QString m_space_threading_state;
    bool m_space_threading_state_isSet;
    bool m_space_threading_state_isValid;

    QString m_space_type;
    bool m_space_type_isSet;
    bool m_space_type_isValid;

    bool m_threaded;
    bool m_threaded_isSet;
    bool m_threaded_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpace)

#endif // OAISpace_H
