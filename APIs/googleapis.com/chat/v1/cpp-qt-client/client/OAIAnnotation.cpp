/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotation::OAIAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotation::OAIAnnotation() {
    this->initializeModel();
}

OAIAnnotation::~OAIAnnotation() {}

void OAIAnnotation::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_slash_command_isSet = false;
    m_slash_command_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_mention_isSet = false;
    m_user_mention_isValid = false;
}

void OAIAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotation::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_slash_command_isValid = ::OpenAPI::fromJsonValue(m_slash_command, json[QString("slashCommand")]);
    m_slash_command_isSet = !json[QString("slashCommand")].isNull() && m_slash_command_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_mention_isValid = ::OpenAPI::fromJsonValue(m_user_mention, json[QString("userMention")]);
    m_user_mention_isSet = !json[QString("userMention")].isNull() && m_user_mention_isValid;
}

QString OAIAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_slash_command.isSet()) {
        obj.insert(QString("slashCommand"), ::OpenAPI::toJsonValue(m_slash_command));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_mention.isSet()) {
        obj.insert(QString("userMention"), ::OpenAPI::toJsonValue(m_user_mention));
    }
    return obj;
}

qint32 OAIAnnotation::getLength() const {
    return m_length;
}
void OAIAnnotation::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIAnnotation::is_length_Set() const{
    return m_length_isSet;
}

bool OAIAnnotation::is_length_Valid() const{
    return m_length_isValid;
}

OAISlashCommandMetadata OAIAnnotation::getSlashCommand() const {
    return m_slash_command;
}
void OAIAnnotation::setSlashCommand(const OAISlashCommandMetadata &slash_command) {
    m_slash_command = slash_command;
    m_slash_command_isSet = true;
}

bool OAIAnnotation::is_slash_command_Set() const{
    return m_slash_command_isSet;
}

bool OAIAnnotation::is_slash_command_Valid() const{
    return m_slash_command_isValid;
}

qint32 OAIAnnotation::getStartIndex() const {
    return m_start_index;
}
void OAIAnnotation::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIAnnotation::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIAnnotation::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QString OAIAnnotation::getType() const {
    return m_type;
}
void OAIAnnotation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnnotation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnnotation::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserMentionMetadata OAIAnnotation::getUserMention() const {
    return m_user_mention;
}
void OAIAnnotation::setUserMention(const OAIUserMentionMetadata &user_mention) {
    m_user_mention = user_mention;
    m_user_mention_isSet = true;
}

bool OAIAnnotation::is_user_mention_Set() const{
    return m_user_mention_isSet;
}

bool OAIAnnotation::is_user_mention_Valid() const{
    return m_user_mention_isValid;
}

bool OAIAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slash_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mention.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
