/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyValue::OAIKeyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyValue::OAIKeyValue() {
    this->initializeModel();
}

OAIKeyValue::~OAIKeyValue() {}

void OAIKeyValue::initializeModel() {

    m_bottom_label_isSet = false;
    m_bottom_label_isValid = false;

    m_button_isSet = false;
    m_button_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_multiline_isSet = false;
    m_content_multiline_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_on_click_isSet = false;
    m_on_click_isValid = false;

    m_top_label_isSet = false;
    m_top_label_isValid = false;
}

void OAIKeyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyValue::fromJsonObject(QJsonObject json) {

    m_bottom_label_isValid = ::OpenAPI::fromJsonValue(m_bottom_label, json[QString("bottomLabel")]);
    m_bottom_label_isSet = !json[QString("bottomLabel")].isNull() && m_bottom_label_isValid;

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_multiline_isValid = ::OpenAPI::fromJsonValue(m_content_multiline, json[QString("contentMultiline")]);
    m_content_multiline_isSet = !json[QString("contentMultiline")].isNull() && m_content_multiline_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_on_click_isValid = ::OpenAPI::fromJsonValue(m_on_click, json[QString("onClick")]);
    m_on_click_isSet = !json[QString("onClick")].isNull() && m_on_click_isValid;

    m_top_label_isValid = ::OpenAPI::fromJsonValue(m_top_label, json[QString("topLabel")]);
    m_top_label_isSet = !json[QString("topLabel")].isNull() && m_top_label_isValid;
}

QString OAIKeyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bottom_label_isSet) {
        obj.insert(QString("bottomLabel"), ::OpenAPI::toJsonValue(m_bottom_label));
    }
    if (m_button.isSet()) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_multiline_isSet) {
        obj.insert(QString("contentMultiline"), ::OpenAPI::toJsonValue(m_content_multiline));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_on_click.isSet()) {
        obj.insert(QString("onClick"), ::OpenAPI::toJsonValue(m_on_click));
    }
    if (m_top_label_isSet) {
        obj.insert(QString("topLabel"), ::OpenAPI::toJsonValue(m_top_label));
    }
    return obj;
}

QString OAIKeyValue::getBottomLabel() const {
    return m_bottom_label;
}
void OAIKeyValue::setBottomLabel(const QString &bottom_label) {
    m_bottom_label = bottom_label;
    m_bottom_label_isSet = true;
}

bool OAIKeyValue::is_bottom_label_Set() const{
    return m_bottom_label_isSet;
}

bool OAIKeyValue::is_bottom_label_Valid() const{
    return m_bottom_label_isValid;
}

OAIButton OAIKeyValue::getButton() const {
    return m_button;
}
void OAIKeyValue::setButton(const OAIButton &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAIKeyValue::is_button_Set() const{
    return m_button_isSet;
}

bool OAIKeyValue::is_button_Valid() const{
    return m_button_isValid;
}

QString OAIKeyValue::getContent() const {
    return m_content;
}
void OAIKeyValue::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIKeyValue::is_content_Set() const{
    return m_content_isSet;
}

bool OAIKeyValue::is_content_Valid() const{
    return m_content_isValid;
}

bool OAIKeyValue::isContentMultiline() const {
    return m_content_multiline;
}
void OAIKeyValue::setContentMultiline(const bool &content_multiline) {
    m_content_multiline = content_multiline;
    m_content_multiline_isSet = true;
}

bool OAIKeyValue::is_content_multiline_Set() const{
    return m_content_multiline_isSet;
}

bool OAIKeyValue::is_content_multiline_Valid() const{
    return m_content_multiline_isValid;
}

QString OAIKeyValue::getIcon() const {
    return m_icon;
}
void OAIKeyValue::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIKeyValue::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIKeyValue::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIKeyValue::getIconUrl() const {
    return m_icon_url;
}
void OAIKeyValue::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIKeyValue::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIKeyValue::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

OAIOnClick OAIKeyValue::getOnClick() const {
    return m_on_click;
}
void OAIKeyValue::setOnClick(const OAIOnClick &on_click) {
    m_on_click = on_click;
    m_on_click_isSet = true;
}

bool OAIKeyValue::is_on_click_Set() const{
    return m_on_click_isSet;
}

bool OAIKeyValue::is_on_click_Valid() const{
    return m_on_click_isValid;
}

QString OAIKeyValue::getTopLabel() const {
    return m_top_label;
}
void OAIKeyValue::setTopLabel(const QString &top_label) {
    m_top_label = top_label;
    m_top_label_isSet = true;
}

bool OAIKeyValue::is_top_label_Set() const{
    return m_top_label_isSet;
}

bool OAIKeyValue::is_top_label_Valid() const{
    return m_top_label_isValid;
}

bool OAIKeyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bottom_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_multiline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_click.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
