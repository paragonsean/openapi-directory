/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputs::OAIInputs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputs::OAIInputs() {
    this->initializeModel();
}

OAIInputs::~OAIInputs() {}

void OAIInputs::initializeModel() {

    m_date_input_isSet = false;
    m_date_input_isValid = false;

    m_date_time_input_isSet = false;
    m_date_time_input_isValid = false;

    m_string_inputs_isSet = false;
    m_string_inputs_isValid = false;

    m_time_input_isSet = false;
    m_time_input_isValid = false;
}

void OAIInputs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputs::fromJsonObject(QJsonObject json) {

    m_date_input_isValid = ::OpenAPI::fromJsonValue(m_date_input, json[QString("dateInput")]);
    m_date_input_isSet = !json[QString("dateInput")].isNull() && m_date_input_isValid;

    m_date_time_input_isValid = ::OpenAPI::fromJsonValue(m_date_time_input, json[QString("dateTimeInput")]);
    m_date_time_input_isSet = !json[QString("dateTimeInput")].isNull() && m_date_time_input_isValid;

    m_string_inputs_isValid = ::OpenAPI::fromJsonValue(m_string_inputs, json[QString("stringInputs")]);
    m_string_inputs_isSet = !json[QString("stringInputs")].isNull() && m_string_inputs_isValid;

    m_time_input_isValid = ::OpenAPI::fromJsonValue(m_time_input, json[QString("timeInput")]);
    m_time_input_isSet = !json[QString("timeInput")].isNull() && m_time_input_isValid;
}

QString OAIInputs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputs::asJsonObject() const {
    QJsonObject obj;
    if (m_date_input.isSet()) {
        obj.insert(QString("dateInput"), ::OpenAPI::toJsonValue(m_date_input));
    }
    if (m_date_time_input.isSet()) {
        obj.insert(QString("dateTimeInput"), ::OpenAPI::toJsonValue(m_date_time_input));
    }
    if (m_string_inputs.isSet()) {
        obj.insert(QString("stringInputs"), ::OpenAPI::toJsonValue(m_string_inputs));
    }
    if (m_time_input.isSet()) {
        obj.insert(QString("timeInput"), ::OpenAPI::toJsonValue(m_time_input));
    }
    return obj;
}

OAIDateInput OAIInputs::getDateInput() const {
    return m_date_input;
}
void OAIInputs::setDateInput(const OAIDateInput &date_input) {
    m_date_input = date_input;
    m_date_input_isSet = true;
}

bool OAIInputs::is_date_input_Set() const{
    return m_date_input_isSet;
}

bool OAIInputs::is_date_input_Valid() const{
    return m_date_input_isValid;
}

OAIDateTimeInput OAIInputs::getDateTimeInput() const {
    return m_date_time_input;
}
void OAIInputs::setDateTimeInput(const OAIDateTimeInput &date_time_input) {
    m_date_time_input = date_time_input;
    m_date_time_input_isSet = true;
}

bool OAIInputs::is_date_time_input_Set() const{
    return m_date_time_input_isSet;
}

bool OAIInputs::is_date_time_input_Valid() const{
    return m_date_time_input_isValid;
}

OAIStringInputs OAIInputs::getStringInputs() const {
    return m_string_inputs;
}
void OAIInputs::setStringInputs(const OAIStringInputs &string_inputs) {
    m_string_inputs = string_inputs;
    m_string_inputs_isSet = true;
}

bool OAIInputs::is_string_inputs_Set() const{
    return m_string_inputs_isSet;
}

bool OAIInputs::is_string_inputs_Valid() const{
    return m_string_inputs_isValid;
}

OAITimeInput OAIInputs::getTimeInput() const {
    return m_time_input;
}
void OAIInputs::setTimeInput(const OAITimeInput &time_input) {
    m_time_input = time_input;
    m_time_input_isSet = true;
}

bool OAIInputs::is_time_input_Set() const{
    return m_time_input_isSet;
}

bool OAIInputs::is_time_input_Valid() const{
    return m_time_input_isValid;
}

bool OAIInputs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_inputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_input.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
