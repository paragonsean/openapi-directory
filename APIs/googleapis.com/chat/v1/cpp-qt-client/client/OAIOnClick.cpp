/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnClick.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnClick::OAIOnClick(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnClick::OAIOnClick() {
    this->initializeModel();
}

OAIOnClick::~OAIOnClick() {}

void OAIOnClick::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_open_link_isSet = false;
    m_open_link_isValid = false;
}

void OAIOnClick::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnClick::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_open_link_isValid = ::OpenAPI::fromJsonValue(m_open_link, json[QString("openLink")]);
    m_open_link_isSet = !json[QString("openLink")].isNull() && m_open_link_isValid;
}

QString OAIOnClick::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnClick::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_open_link.isSet()) {
        obj.insert(QString("openLink"), ::OpenAPI::toJsonValue(m_open_link));
    }
    return obj;
}

OAIFormAction OAIOnClick::getAction() const {
    return m_action;
}
void OAIOnClick::setAction(const OAIFormAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIOnClick::is_action_Set() const{
    return m_action_isSet;
}

bool OAIOnClick::is_action_Valid() const{
    return m_action_isValid;
}

OAIOpenLink OAIOnClick::getOpenLink() const {
    return m_open_link;
}
void OAIOnClick::setOpenLink(const OAIOpenLink &open_link) {
    m_open_link = open_link;
    m_open_link_isSet = true;
}

bool OAIOnClick::is_open_link_Set() const{
    return m_open_link_isSet;
}

bool OAIOnClick::is_open_link_Valid() const{
    return m_open_link_isValid;
}

bool OAIOnClick::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnClick::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
