/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1Card.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1Card::OAIGoogleAppsCardV1Card(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1Card::OAIGoogleAppsCardV1Card() {
    this->initializeModel();
}

OAIGoogleAppsCardV1Card::~OAIGoogleAppsCardV1Card() {}

void OAIGoogleAppsCardV1Card::initializeModel() {

    m_card_actions_isSet = false;
    m_card_actions_isValid = false;

    m_display_style_isSet = false;
    m_display_style_isValid = false;

    m_fixed_footer_isSet = false;
    m_fixed_footer_isValid = false;

    m_header_isSet = false;
    m_header_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_peek_card_header_isSet = false;
    m_peek_card_header_isValid = false;

    m_section_divider_style_isSet = false;
    m_section_divider_style_isValid = false;

    m_sections_isSet = false;
    m_sections_isValid = false;
}

void OAIGoogleAppsCardV1Card::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1Card::fromJsonObject(QJsonObject json) {

    m_card_actions_isValid = ::OpenAPI::fromJsonValue(m_card_actions, json[QString("cardActions")]);
    m_card_actions_isSet = !json[QString("cardActions")].isNull() && m_card_actions_isValid;

    m_display_style_isValid = ::OpenAPI::fromJsonValue(m_display_style, json[QString("displayStyle")]);
    m_display_style_isSet = !json[QString("displayStyle")].isNull() && m_display_style_isValid;

    m_fixed_footer_isValid = ::OpenAPI::fromJsonValue(m_fixed_footer, json[QString("fixedFooter")]);
    m_fixed_footer_isSet = !json[QString("fixedFooter")].isNull() && m_fixed_footer_isValid;

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_peek_card_header_isValid = ::OpenAPI::fromJsonValue(m_peek_card_header, json[QString("peekCardHeader")]);
    m_peek_card_header_isSet = !json[QString("peekCardHeader")].isNull() && m_peek_card_header_isValid;

    m_section_divider_style_isValid = ::OpenAPI::fromJsonValue(m_section_divider_style, json[QString("sectionDividerStyle")]);
    m_section_divider_style_isSet = !json[QString("sectionDividerStyle")].isNull() && m_section_divider_style_isValid;

    m_sections_isValid = ::OpenAPI::fromJsonValue(m_sections, json[QString("sections")]);
    m_sections_isSet = !json[QString("sections")].isNull() && m_sections_isValid;
}

QString OAIGoogleAppsCardV1Card::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1Card::asJsonObject() const {
    QJsonObject obj;
    if (m_card_actions.size() > 0) {
        obj.insert(QString("cardActions"), ::OpenAPI::toJsonValue(m_card_actions));
    }
    if (m_display_style_isSet) {
        obj.insert(QString("displayStyle"), ::OpenAPI::toJsonValue(m_display_style));
    }
    if (m_fixed_footer.isSet()) {
        obj.insert(QString("fixedFooter"), ::OpenAPI::toJsonValue(m_fixed_footer));
    }
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_peek_card_header.isSet()) {
        obj.insert(QString("peekCardHeader"), ::OpenAPI::toJsonValue(m_peek_card_header));
    }
    if (m_section_divider_style_isSet) {
        obj.insert(QString("sectionDividerStyle"), ::OpenAPI::toJsonValue(m_section_divider_style));
    }
    if (m_sections.size() > 0) {
        obj.insert(QString("sections"), ::OpenAPI::toJsonValue(m_sections));
    }
    return obj;
}

QList<OAIGoogleAppsCardV1CardAction> OAIGoogleAppsCardV1Card::getCardActions() const {
    return m_card_actions;
}
void OAIGoogleAppsCardV1Card::setCardActions(const QList<OAIGoogleAppsCardV1CardAction> &card_actions) {
    m_card_actions = card_actions;
    m_card_actions_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_card_actions_Set() const{
    return m_card_actions_isSet;
}

bool OAIGoogleAppsCardV1Card::is_card_actions_Valid() const{
    return m_card_actions_isValid;
}

QString OAIGoogleAppsCardV1Card::getDisplayStyle() const {
    return m_display_style;
}
void OAIGoogleAppsCardV1Card::setDisplayStyle(const QString &display_style) {
    m_display_style = display_style;
    m_display_style_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_display_style_Set() const{
    return m_display_style_isSet;
}

bool OAIGoogleAppsCardV1Card::is_display_style_Valid() const{
    return m_display_style_isValid;
}

OAIGoogleAppsCardV1CardFixedFooter OAIGoogleAppsCardV1Card::getFixedFooter() const {
    return m_fixed_footer;
}
void OAIGoogleAppsCardV1Card::setFixedFooter(const OAIGoogleAppsCardV1CardFixedFooter &fixed_footer) {
    m_fixed_footer = fixed_footer;
    m_fixed_footer_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_fixed_footer_Set() const{
    return m_fixed_footer_isSet;
}

bool OAIGoogleAppsCardV1Card::is_fixed_footer_Valid() const{
    return m_fixed_footer_isValid;
}

OAIGoogleAppsCardV1CardHeader OAIGoogleAppsCardV1Card::getHeader() const {
    return m_header;
}
void OAIGoogleAppsCardV1Card::setHeader(const OAIGoogleAppsCardV1CardHeader &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_header_Set() const{
    return m_header_isSet;
}

bool OAIGoogleAppsCardV1Card::is_header_Valid() const{
    return m_header_isValid;
}

QString OAIGoogleAppsCardV1Card::getName() const {
    return m_name;
}
void OAIGoogleAppsCardV1Card::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsCardV1Card::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleAppsCardV1CardHeader OAIGoogleAppsCardV1Card::getPeekCardHeader() const {
    return m_peek_card_header;
}
void OAIGoogleAppsCardV1Card::setPeekCardHeader(const OAIGoogleAppsCardV1CardHeader &peek_card_header) {
    m_peek_card_header = peek_card_header;
    m_peek_card_header_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_peek_card_header_Set() const{
    return m_peek_card_header_isSet;
}

bool OAIGoogleAppsCardV1Card::is_peek_card_header_Valid() const{
    return m_peek_card_header_isValid;
}

QString OAIGoogleAppsCardV1Card::getSectionDividerStyle() const {
    return m_section_divider_style;
}
void OAIGoogleAppsCardV1Card::setSectionDividerStyle(const QString &section_divider_style) {
    m_section_divider_style = section_divider_style;
    m_section_divider_style_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_section_divider_style_Set() const{
    return m_section_divider_style_isSet;
}

bool OAIGoogleAppsCardV1Card::is_section_divider_style_Valid() const{
    return m_section_divider_style_isValid;
}

QList<OAIGoogleAppsCardV1Section> OAIGoogleAppsCardV1Card::getSections() const {
    return m_sections;
}
void OAIGoogleAppsCardV1Card::setSections(const QList<OAIGoogleAppsCardV1Section> &sections) {
    m_sections = sections;
    m_sections_isSet = true;
}

bool OAIGoogleAppsCardV1Card::is_sections_Set() const{
    return m_sections_isSet;
}

bool OAIGoogleAppsCardV1Card::is_sections_Valid() const{
    return m_sections_isValid;
}

bool OAIGoogleAppsCardV1Card::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_footer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peek_card_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_divider_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1Card::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
