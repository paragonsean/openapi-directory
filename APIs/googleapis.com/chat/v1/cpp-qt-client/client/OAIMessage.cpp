/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_action_response_isSet = false;
    m_action_response_isValid = false;

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_argument_text_isSet = false;
    m_argument_text_isValid = false;

    m_attached_gifs_isSet = false;
    m_attached_gifs_isValid = false;

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_cards_isSet = false;
    m_cards_isValid = false;

    m_cards_v2_isSet = false;
    m_cards_v2_isValid = false;

    m_client_assigned_message_id_isSet = false;
    m_client_assigned_message_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_deletion_metadata_isSet = false;
    m_deletion_metadata_isValid = false;

    m_emoji_reaction_summaries_isSet = false;
    m_emoji_reaction_summaries_isValid = false;

    m_fallback_text_isSet = false;
    m_fallback_text_isValid = false;

    m_formatted_text_isSet = false;
    m_formatted_text_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_matched_url_isSet = false;
    m_matched_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_private_message_viewer_isSet = false;
    m_private_message_viewer_isValid = false;

    m_quoted_message_metadata_isSet = false;
    m_quoted_message_metadata_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_slash_command_isSet = false;
    m_slash_command_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thread_isSet = false;
    m_thread_isValid = false;

    m_thread_reply_isSet = false;
    m_thread_reply_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_action_response_isValid = ::OpenAPI::fromJsonValue(m_action_response, json[QString("actionResponse")]);
    m_action_response_isSet = !json[QString("actionResponse")].isNull() && m_action_response_isValid;

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_argument_text_isValid = ::OpenAPI::fromJsonValue(m_argument_text, json[QString("argumentText")]);
    m_argument_text_isSet = !json[QString("argumentText")].isNull() && m_argument_text_isValid;

    m_attached_gifs_isValid = ::OpenAPI::fromJsonValue(m_attached_gifs, json[QString("attachedGifs")]);
    m_attached_gifs_isSet = !json[QString("attachedGifs")].isNull() && m_attached_gifs_isValid;

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_cards_isValid = ::OpenAPI::fromJsonValue(m_cards, json[QString("cards")]);
    m_cards_isSet = !json[QString("cards")].isNull() && m_cards_isValid;

    m_cards_v2_isValid = ::OpenAPI::fromJsonValue(m_cards_v2, json[QString("cardsV2")]);
    m_cards_v2_isSet = !json[QString("cardsV2")].isNull() && m_cards_v2_isValid;

    m_client_assigned_message_id_isValid = ::OpenAPI::fromJsonValue(m_client_assigned_message_id, json[QString("clientAssignedMessageId")]);
    m_client_assigned_message_id_isSet = !json[QString("clientAssignedMessageId")].isNull() && m_client_assigned_message_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_deletion_metadata_isValid = ::OpenAPI::fromJsonValue(m_deletion_metadata, json[QString("deletionMetadata")]);
    m_deletion_metadata_isSet = !json[QString("deletionMetadata")].isNull() && m_deletion_metadata_isValid;

    m_emoji_reaction_summaries_isValid = ::OpenAPI::fromJsonValue(m_emoji_reaction_summaries, json[QString("emojiReactionSummaries")]);
    m_emoji_reaction_summaries_isSet = !json[QString("emojiReactionSummaries")].isNull() && m_emoji_reaction_summaries_isValid;

    m_fallback_text_isValid = ::OpenAPI::fromJsonValue(m_fallback_text, json[QString("fallbackText")]);
    m_fallback_text_isSet = !json[QString("fallbackText")].isNull() && m_fallback_text_isValid;

    m_formatted_text_isValid = ::OpenAPI::fromJsonValue(m_formatted_text, json[QString("formattedText")]);
    m_formatted_text_isSet = !json[QString("formattedText")].isNull() && m_formatted_text_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_matched_url_isValid = ::OpenAPI::fromJsonValue(m_matched_url, json[QString("matchedUrl")]);
    m_matched_url_isSet = !json[QString("matchedUrl")].isNull() && m_matched_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_private_message_viewer_isValid = ::OpenAPI::fromJsonValue(m_private_message_viewer, json[QString("privateMessageViewer")]);
    m_private_message_viewer_isSet = !json[QString("privateMessageViewer")].isNull() && m_private_message_viewer_isValid;

    m_quoted_message_metadata_isValid = ::OpenAPI::fromJsonValue(m_quoted_message_metadata, json[QString("quotedMessageMetadata")]);
    m_quoted_message_metadata_isSet = !json[QString("quotedMessageMetadata")].isNull() && m_quoted_message_metadata_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("sender")]);
    m_sender_isSet = !json[QString("sender")].isNull() && m_sender_isValid;

    m_slash_command_isValid = ::OpenAPI::fromJsonValue(m_slash_command, json[QString("slashCommand")]);
    m_slash_command_isSet = !json[QString("slashCommand")].isNull() && m_slash_command_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thread_isValid = ::OpenAPI::fromJsonValue(m_thread, json[QString("thread")]);
    m_thread_isSet = !json[QString("thread")].isNull() && m_thread_isValid;

    m_thread_reply_isValid = ::OpenAPI::fromJsonValue(m_thread_reply, json[QString("threadReply")]);
    m_thread_reply_isSet = !json[QString("threadReply")].isNull() && m_thread_reply_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_action_response.isSet()) {
        obj.insert(QString("actionResponse"), ::OpenAPI::toJsonValue(m_action_response));
    }
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_argument_text_isSet) {
        obj.insert(QString("argumentText"), ::OpenAPI::toJsonValue(m_argument_text));
    }
    if (m_attached_gifs.size() > 0) {
        obj.insert(QString("attachedGifs"), ::OpenAPI::toJsonValue(m_attached_gifs));
    }
    if (m_attachment.size() > 0) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_cards.size() > 0) {
        obj.insert(QString("cards"), ::OpenAPI::toJsonValue(m_cards));
    }
    if (m_cards_v2.size() > 0) {
        obj.insert(QString("cardsV2"), ::OpenAPI::toJsonValue(m_cards_v2));
    }
    if (m_client_assigned_message_id_isSet) {
        obj.insert(QString("clientAssignedMessageId"), ::OpenAPI::toJsonValue(m_client_assigned_message_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_deletion_metadata.isSet()) {
        obj.insert(QString("deletionMetadata"), ::OpenAPI::toJsonValue(m_deletion_metadata));
    }
    if (m_emoji_reaction_summaries.size() > 0) {
        obj.insert(QString("emojiReactionSummaries"), ::OpenAPI::toJsonValue(m_emoji_reaction_summaries));
    }
    if (m_fallback_text_isSet) {
        obj.insert(QString("fallbackText"), ::OpenAPI::toJsonValue(m_fallback_text));
    }
    if (m_formatted_text_isSet) {
        obj.insert(QString("formattedText"), ::OpenAPI::toJsonValue(m_formatted_text));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_matched_url.isSet()) {
        obj.insert(QString("matchedUrl"), ::OpenAPI::toJsonValue(m_matched_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_private_message_viewer.isSet()) {
        obj.insert(QString("privateMessageViewer"), ::OpenAPI::toJsonValue(m_private_message_viewer));
    }
    if (m_quoted_message_metadata.isSet()) {
        obj.insert(QString("quotedMessageMetadata"), ::OpenAPI::toJsonValue(m_quoted_message_metadata));
    }
    if (m_sender.isSet()) {
        obj.insert(QString("sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_slash_command.isSet()) {
        obj.insert(QString("slashCommand"), ::OpenAPI::toJsonValue(m_slash_command));
    }
    if (m_space.isSet()) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thread.isSet()) {
        obj.insert(QString("thread"), ::OpenAPI::toJsonValue(m_thread));
    }
    if (m_thread_reply_isSet) {
        obj.insert(QString("threadReply"), ::OpenAPI::toJsonValue(m_thread_reply));
    }
    return obj;
}

OAIActionResponse OAIMessage::getActionResponse() const {
    return m_action_response;
}
void OAIMessage::setActionResponse(const OAIActionResponse &action_response) {
    m_action_response = action_response;
    m_action_response_isSet = true;
}

bool OAIMessage::is_action_response_Set() const{
    return m_action_response_isSet;
}

bool OAIMessage::is_action_response_Valid() const{
    return m_action_response_isValid;
}

QList<OAIAnnotation> OAIMessage::getAnnotations() const {
    return m_annotations;
}
void OAIMessage::setAnnotations(const QList<OAIAnnotation> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIMessage::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIMessage::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIMessage::getArgumentText() const {
    return m_argument_text;
}
void OAIMessage::setArgumentText(const QString &argument_text) {
    m_argument_text = argument_text;
    m_argument_text_isSet = true;
}

bool OAIMessage::is_argument_text_Set() const{
    return m_argument_text_isSet;
}

bool OAIMessage::is_argument_text_Valid() const{
    return m_argument_text_isValid;
}

QList<OAIAttachedGif> OAIMessage::getAttachedGifs() const {
    return m_attached_gifs;
}
void OAIMessage::setAttachedGifs(const QList<OAIAttachedGif> &attached_gifs) {
    m_attached_gifs = attached_gifs;
    m_attached_gifs_isSet = true;
}

bool OAIMessage::is_attached_gifs_Set() const{
    return m_attached_gifs_isSet;
}

bool OAIMessage::is_attached_gifs_Valid() const{
    return m_attached_gifs_isValid;
}

QList<OAIAttachment> OAIMessage::getAttachment() const {
    return m_attachment;
}
void OAIMessage::setAttachment(const QList<OAIAttachment> &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAIMessage::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAIMessage::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QList<OAICard> OAIMessage::getCards() const {
    return m_cards;
}
void OAIMessage::setCards(const QList<OAICard> &cards) {
    m_cards = cards;
    m_cards_isSet = true;
}

bool OAIMessage::is_cards_Set() const{
    return m_cards_isSet;
}

bool OAIMessage::is_cards_Valid() const{
    return m_cards_isValid;
}

QList<OAICardWithId> OAIMessage::getCardsV2() const {
    return m_cards_v2;
}
void OAIMessage::setCardsV2(const QList<OAICardWithId> &cards_v2) {
    m_cards_v2 = cards_v2;
    m_cards_v2_isSet = true;
}

bool OAIMessage::is_cards_v2_Set() const{
    return m_cards_v2_isSet;
}

bool OAIMessage::is_cards_v2_Valid() const{
    return m_cards_v2_isValid;
}

QString OAIMessage::getClientAssignedMessageId() const {
    return m_client_assigned_message_id;
}
void OAIMessage::setClientAssignedMessageId(const QString &client_assigned_message_id) {
    m_client_assigned_message_id = client_assigned_message_id;
    m_client_assigned_message_id_isSet = true;
}

bool OAIMessage::is_client_assigned_message_id_Set() const{
    return m_client_assigned_message_id_isSet;
}

bool OAIMessage::is_client_assigned_message_id_Valid() const{
    return m_client_assigned_message_id_isValid;
}

QString OAIMessage::getCreateTime() const {
    return m_create_time;
}
void OAIMessage::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMessage::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMessage::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMessage::getDeleteTime() const {
    return m_delete_time;
}
void OAIMessage::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIMessage::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIMessage::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

OAIDeletionMetadata OAIMessage::getDeletionMetadata() const {
    return m_deletion_metadata;
}
void OAIMessage::setDeletionMetadata(const OAIDeletionMetadata &deletion_metadata) {
    m_deletion_metadata = deletion_metadata;
    m_deletion_metadata_isSet = true;
}

bool OAIMessage::is_deletion_metadata_Set() const{
    return m_deletion_metadata_isSet;
}

bool OAIMessage::is_deletion_metadata_Valid() const{
    return m_deletion_metadata_isValid;
}

QList<OAIEmojiReactionSummary> OAIMessage::getEmojiReactionSummaries() const {
    return m_emoji_reaction_summaries;
}
void OAIMessage::setEmojiReactionSummaries(const QList<OAIEmojiReactionSummary> &emoji_reaction_summaries) {
    m_emoji_reaction_summaries = emoji_reaction_summaries;
    m_emoji_reaction_summaries_isSet = true;
}

bool OAIMessage::is_emoji_reaction_summaries_Set() const{
    return m_emoji_reaction_summaries_isSet;
}

bool OAIMessage::is_emoji_reaction_summaries_Valid() const{
    return m_emoji_reaction_summaries_isValid;
}

QString OAIMessage::getFallbackText() const {
    return m_fallback_text;
}
void OAIMessage::setFallbackText(const QString &fallback_text) {
    m_fallback_text = fallback_text;
    m_fallback_text_isSet = true;
}

bool OAIMessage::is_fallback_text_Set() const{
    return m_fallback_text_isSet;
}

bool OAIMessage::is_fallback_text_Valid() const{
    return m_fallback_text_isValid;
}

QString OAIMessage::getFormattedText() const {
    return m_formatted_text;
}
void OAIMessage::setFormattedText(const QString &formatted_text) {
    m_formatted_text = formatted_text;
    m_formatted_text_isSet = true;
}

bool OAIMessage::is_formatted_text_Set() const{
    return m_formatted_text_isSet;
}

bool OAIMessage::is_formatted_text_Valid() const{
    return m_formatted_text_isValid;
}

QString OAIMessage::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIMessage::setLastUpdateTime(const QString &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIMessage::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIMessage::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAIMatchedUrl OAIMessage::getMatchedUrl() const {
    return m_matched_url;
}
void OAIMessage::setMatchedUrl(const OAIMatchedUrl &matched_url) {
    m_matched_url = matched_url;
    m_matched_url_isSet = true;
}

bool OAIMessage::is_matched_url_Set() const{
    return m_matched_url_isSet;
}

bool OAIMessage::is_matched_url_Valid() const{
    return m_matched_url_isValid;
}

QString OAIMessage::getName() const {
    return m_name;
}
void OAIMessage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMessage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMessage::is_name_Valid() const{
    return m_name_isValid;
}

OAIUser OAIMessage::getPrivateMessageViewer() const {
    return m_private_message_viewer;
}
void OAIMessage::setPrivateMessageViewer(const OAIUser &private_message_viewer) {
    m_private_message_viewer = private_message_viewer;
    m_private_message_viewer_isSet = true;
}

bool OAIMessage::is_private_message_viewer_Set() const{
    return m_private_message_viewer_isSet;
}

bool OAIMessage::is_private_message_viewer_Valid() const{
    return m_private_message_viewer_isValid;
}

OAIQuotedMessageMetadata OAIMessage::getQuotedMessageMetadata() const {
    return m_quoted_message_metadata;
}
void OAIMessage::setQuotedMessageMetadata(const OAIQuotedMessageMetadata &quoted_message_metadata) {
    m_quoted_message_metadata = quoted_message_metadata;
    m_quoted_message_metadata_isSet = true;
}

bool OAIMessage::is_quoted_message_metadata_Set() const{
    return m_quoted_message_metadata_isSet;
}

bool OAIMessage::is_quoted_message_metadata_Valid() const{
    return m_quoted_message_metadata_isValid;
}

OAIUser OAIMessage::getSender() const {
    return m_sender;
}
void OAIMessage::setSender(const OAIUser &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIMessage::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIMessage::is_sender_Valid() const{
    return m_sender_isValid;
}

OAISlashCommand OAIMessage::getSlashCommand() const {
    return m_slash_command;
}
void OAIMessage::setSlashCommand(const OAISlashCommand &slash_command) {
    m_slash_command = slash_command;
    m_slash_command_isSet = true;
}

bool OAIMessage::is_slash_command_Set() const{
    return m_slash_command_isSet;
}

bool OAIMessage::is_slash_command_Valid() const{
    return m_slash_command_isValid;
}

OAISpace OAIMessage::getSpace() const {
    return m_space;
}
void OAIMessage::setSpace(const OAISpace &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAIMessage::is_space_Set() const{
    return m_space_isSet;
}

bool OAIMessage::is_space_Valid() const{
    return m_space_isValid;
}

QString OAIMessage::getText() const {
    return m_text;
}
void OAIMessage::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessage::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessage::is_text_Valid() const{
    return m_text_isValid;
}

OAIThread OAIMessage::getThread() const {
    return m_thread;
}
void OAIMessage::setThread(const OAIThread &thread) {
    m_thread = thread;
    m_thread_isSet = true;
}

bool OAIMessage::is_thread_Set() const{
    return m_thread_isSet;
}

bool OAIMessage::is_thread_Valid() const{
    return m_thread_isValid;
}

bool OAIMessage::isThreadReply() const {
    return m_thread_reply;
}
void OAIMessage::setThreadReply(const bool &thread_reply) {
    m_thread_reply = thread_reply;
    m_thread_reply_isSet = true;
}

bool OAIMessage::is_thread_reply_Set() const{
    return m_thread_reply_isSet;
}

bool OAIMessage::is_thread_reply_Valid() const{
    return m_thread_reply_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_argument_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_gifs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cards_v2.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_assigned_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emoji_reaction_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matched_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_message_viewer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_message_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slash_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_reply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
