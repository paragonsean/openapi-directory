/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWidgetMarkup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWidgetMarkup::OAIWidgetMarkup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWidgetMarkup::OAIWidgetMarkup() {
    this->initializeModel();
}

OAIWidgetMarkup::~OAIWidgetMarkup() {}

void OAIWidgetMarkup::initializeModel() {

    m_buttons_isSet = false;
    m_buttons_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_text_paragraph_isSet = false;
    m_text_paragraph_isValid = false;
}

void OAIWidgetMarkup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWidgetMarkup::fromJsonObject(QJsonObject json) {

    m_buttons_isValid = ::OpenAPI::fromJsonValue(m_buttons, json[QString("buttons")]);
    m_buttons_isSet = !json[QString("buttons")].isNull() && m_buttons_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_text_paragraph_isValid = ::OpenAPI::fromJsonValue(m_text_paragraph, json[QString("textParagraph")]);
    m_text_paragraph_isSet = !json[QString("textParagraph")].isNull() && m_text_paragraph_isValid;
}

QString OAIWidgetMarkup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWidgetMarkup::asJsonObject() const {
    QJsonObject obj;
    if (m_buttons.size() > 0) {
        obj.insert(QString("buttons"), ::OpenAPI::toJsonValue(m_buttons));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_key_value.isSet()) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_text_paragraph.isSet()) {
        obj.insert(QString("textParagraph"), ::OpenAPI::toJsonValue(m_text_paragraph));
    }
    return obj;
}

QList<OAIButton> OAIWidgetMarkup::getButtons() const {
    return m_buttons;
}
void OAIWidgetMarkup::setButtons(const QList<OAIButton> &buttons) {
    m_buttons = buttons;
    m_buttons_isSet = true;
}

bool OAIWidgetMarkup::is_buttons_Set() const{
    return m_buttons_isSet;
}

bool OAIWidgetMarkup::is_buttons_Valid() const{
    return m_buttons_isValid;
}

OAIImage OAIWidgetMarkup::getImage() const {
    return m_image;
}
void OAIWidgetMarkup::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIWidgetMarkup::is_image_Set() const{
    return m_image_isSet;
}

bool OAIWidgetMarkup::is_image_Valid() const{
    return m_image_isValid;
}

OAIKeyValue OAIWidgetMarkup::getKeyValue() const {
    return m_key_value;
}
void OAIWidgetMarkup::setKeyValue(const OAIKeyValue &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIWidgetMarkup::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIWidgetMarkup::is_key_value_Valid() const{
    return m_key_value_isValid;
}

OAITextParagraph OAIWidgetMarkup::getTextParagraph() const {
    return m_text_paragraph;
}
void OAIWidgetMarkup::setTextParagraph(const OAITextParagraph &text_paragraph) {
    m_text_paragraph = text_paragraph;
    m_text_paragraph_isSet = true;
}

bool OAIWidgetMarkup::is_text_paragraph_Set() const{
    return m_text_paragraph_isSet;
}

bool OAIWidgetMarkup::is_text_paragraph_Valid() const{
    return m_text_paragraph_isValid;
}

bool OAIWidgetMarkup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buttons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_paragraph.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWidgetMarkup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
