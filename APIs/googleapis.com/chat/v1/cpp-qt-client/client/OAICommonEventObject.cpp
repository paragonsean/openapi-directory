/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommonEventObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommonEventObject::OAICommonEventObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommonEventObject::OAICommonEventObject() {
    this->initializeModel();
}

OAICommonEventObject::~OAICommonEventObject() {}

void OAICommonEventObject::initializeModel() {

    m_form_inputs_isSet = false;
    m_form_inputs_isValid = false;

    m_host_app_isSet = false;
    m_host_app_isValid = false;

    m_invoked_function_isSet = false;
    m_invoked_function_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_user_locale_isSet = false;
    m_user_locale_isValid = false;
}

void OAICommonEventObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommonEventObject::fromJsonObject(QJsonObject json) {

    m_form_inputs_isValid = ::OpenAPI::fromJsonValue(m_form_inputs, json[QString("formInputs")]);
    m_form_inputs_isSet = !json[QString("formInputs")].isNull() && m_form_inputs_isValid;

    m_host_app_isValid = ::OpenAPI::fromJsonValue(m_host_app, json[QString("hostApp")]);
    m_host_app_isSet = !json[QString("hostApp")].isNull() && m_host_app_isValid;

    m_invoked_function_isValid = ::OpenAPI::fromJsonValue(m_invoked_function, json[QString("invokedFunction")]);
    m_invoked_function_isSet = !json[QString("invokedFunction")].isNull() && m_invoked_function_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_user_locale_isValid = ::OpenAPI::fromJsonValue(m_user_locale, json[QString("userLocale")]);
    m_user_locale_isSet = !json[QString("userLocale")].isNull() && m_user_locale_isValid;
}

QString OAICommonEventObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommonEventObject::asJsonObject() const {
    QJsonObject obj;
    if (m_form_inputs.size() > 0) {
        obj.insert(QString("formInputs"), ::OpenAPI::toJsonValue(m_form_inputs));
    }
    if (m_host_app_isSet) {
        obj.insert(QString("hostApp"), ::OpenAPI::toJsonValue(m_host_app));
    }
    if (m_invoked_function_isSet) {
        obj.insert(QString("invokedFunction"), ::OpenAPI::toJsonValue(m_invoked_function));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_time_zone.isSet()) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_user_locale_isSet) {
        obj.insert(QString("userLocale"), ::OpenAPI::toJsonValue(m_user_locale));
    }
    return obj;
}

QMap<QString, OAIInputs> OAICommonEventObject::getFormInputs() const {
    return m_form_inputs;
}
void OAICommonEventObject::setFormInputs(const QMap<QString, OAIInputs> &form_inputs) {
    m_form_inputs = form_inputs;
    m_form_inputs_isSet = true;
}

bool OAICommonEventObject::is_form_inputs_Set() const{
    return m_form_inputs_isSet;
}

bool OAICommonEventObject::is_form_inputs_Valid() const{
    return m_form_inputs_isValid;
}

QString OAICommonEventObject::getHostApp() const {
    return m_host_app;
}
void OAICommonEventObject::setHostApp(const QString &host_app) {
    m_host_app = host_app;
    m_host_app_isSet = true;
}

bool OAICommonEventObject::is_host_app_Set() const{
    return m_host_app_isSet;
}

bool OAICommonEventObject::is_host_app_Valid() const{
    return m_host_app_isValid;
}

QString OAICommonEventObject::getInvokedFunction() const {
    return m_invoked_function;
}
void OAICommonEventObject::setInvokedFunction(const QString &invoked_function) {
    m_invoked_function = invoked_function;
    m_invoked_function_isSet = true;
}

bool OAICommonEventObject::is_invoked_function_Set() const{
    return m_invoked_function_isSet;
}

bool OAICommonEventObject::is_invoked_function_Valid() const{
    return m_invoked_function_isValid;
}

QMap<QString, QString> OAICommonEventObject::getParameters() const {
    return m_parameters;
}
void OAICommonEventObject::setParameters(const QMap<QString, QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICommonEventObject::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICommonEventObject::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAICommonEventObject::getPlatform() const {
    return m_platform;
}
void OAICommonEventObject::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAICommonEventObject::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAICommonEventObject::is_platform_Valid() const{
    return m_platform_isValid;
}

OAITimeZone OAICommonEventObject::getTimeZone() const {
    return m_time_zone;
}
void OAICommonEventObject::setTimeZone(const OAITimeZone &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAICommonEventObject::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAICommonEventObject::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAICommonEventObject::getUserLocale() const {
    return m_user_locale;
}
void OAICommonEventObject::setUserLocale(const QString &user_locale) {
    m_user_locale = user_locale;
    m_user_locale_isSet = true;
}

bool OAICommonEventObject::is_user_locale_Set() const{
    return m_user_locale_isSet;
}

bool OAICommonEventObject::is_user_locale_Valid() const{
    return m_user_locale_isValid;
}

bool OAICommonEventObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoked_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommonEventObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
