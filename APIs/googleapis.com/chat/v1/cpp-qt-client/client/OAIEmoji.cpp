/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmoji.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmoji::OAIEmoji(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmoji::OAIEmoji() {
    this->initializeModel();
}

OAIEmoji::~OAIEmoji() {}

void OAIEmoji::initializeModel() {

    m_custom_emoji_isSet = false;
    m_custom_emoji_isValid = false;

    m_unicode_isSet = false;
    m_unicode_isValid = false;
}

void OAIEmoji::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmoji::fromJsonObject(QJsonObject json) {

    m_custom_emoji_isValid = ::OpenAPI::fromJsonValue(m_custom_emoji, json[QString("customEmoji")]);
    m_custom_emoji_isSet = !json[QString("customEmoji")].isNull() && m_custom_emoji_isValid;

    m_unicode_isValid = ::OpenAPI::fromJsonValue(m_unicode, json[QString("unicode")]);
    m_unicode_isSet = !json[QString("unicode")].isNull() && m_unicode_isValid;
}

QString OAIEmoji::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmoji::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_emoji.isSet()) {
        obj.insert(QString("customEmoji"), ::OpenAPI::toJsonValue(m_custom_emoji));
    }
    if (m_unicode_isSet) {
        obj.insert(QString("unicode"), ::OpenAPI::toJsonValue(m_unicode));
    }
    return obj;
}

OAICustomEmoji OAIEmoji::getCustomEmoji() const {
    return m_custom_emoji;
}
void OAIEmoji::setCustomEmoji(const OAICustomEmoji &custom_emoji) {
    m_custom_emoji = custom_emoji;
    m_custom_emoji_isSet = true;
}

bool OAIEmoji::is_custom_emoji_Set() const{
    return m_custom_emoji_isSet;
}

bool OAIEmoji::is_custom_emoji_Valid() const{
    return m_custom_emoji_isValid;
}

QString OAIEmoji::getUnicode() const {
    return m_unicode;
}
void OAIEmoji::setUnicode(const QString &unicode) {
    m_unicode = unicode;
    m_unicode_isSet = true;
}

bool OAIEmoji::is_unicode_Set() const{
    return m_unicode_isSet;
}

bool OAIEmoji::is_unicode_Valid() const{
    return m_unicode_isValid;
}

bool OAIEmoji::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_emoji.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmoji::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
