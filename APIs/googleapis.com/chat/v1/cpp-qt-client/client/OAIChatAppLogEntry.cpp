/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatAppLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatAppLogEntry::OAIChatAppLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatAppLogEntry::OAIChatAppLogEntry() {
    this->initializeModel();
}

OAIChatAppLogEntry::~OAIChatAppLogEntry() {}

void OAIChatAppLogEntry::initializeModel() {

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_deployment_function_isSet = false;
    m_deployment_function_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIChatAppLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatAppLogEntry::fromJsonObject(QJsonObject json) {

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_deployment_function_isValid = ::OpenAPI::fromJsonValue(m_deployment_function, json[QString("deploymentFunction")]);
    m_deployment_function_isSet = !json[QString("deploymentFunction")].isNull() && m_deployment_function_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIChatAppLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatAppLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_isSet) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_deployment_function_isSet) {
        obj.insert(QString("deploymentFunction"), ::OpenAPI::toJsonValue(m_deployment_function));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QString OAIChatAppLogEntry::getDeployment() const {
    return m_deployment;
}
void OAIChatAppLogEntry::setDeployment(const QString &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIChatAppLogEntry::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIChatAppLogEntry::is_deployment_Valid() const{
    return m_deployment_isValid;
}

QString OAIChatAppLogEntry::getDeploymentFunction() const {
    return m_deployment_function;
}
void OAIChatAppLogEntry::setDeploymentFunction(const QString &deployment_function) {
    m_deployment_function = deployment_function;
    m_deployment_function_isSet = true;
}

bool OAIChatAppLogEntry::is_deployment_function_Set() const{
    return m_deployment_function_isSet;
}

bool OAIChatAppLogEntry::is_deployment_function_Valid() const{
    return m_deployment_function_isValid;
}

OAIStatus OAIChatAppLogEntry::getError() const {
    return m_error;
}
void OAIChatAppLogEntry::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIChatAppLogEntry::is_error_Set() const{
    return m_error_isSet;
}

bool OAIChatAppLogEntry::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIChatAppLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatAppLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
