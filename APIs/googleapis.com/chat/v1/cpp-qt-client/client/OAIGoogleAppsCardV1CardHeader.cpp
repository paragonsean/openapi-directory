/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1CardHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1CardHeader::OAIGoogleAppsCardV1CardHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1CardHeader::OAIGoogleAppsCardV1CardHeader() {
    this->initializeModel();
}

OAIGoogleAppsCardV1CardHeader::~OAIGoogleAppsCardV1CardHeader() {}

void OAIGoogleAppsCardV1CardHeader::initializeModel() {

    m_image_alt_text_isSet = false;
    m_image_alt_text_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGoogleAppsCardV1CardHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1CardHeader::fromJsonObject(QJsonObject json) {

    m_image_alt_text_isValid = ::OpenAPI::fromJsonValue(m_image_alt_text, json[QString("imageAltText")]);
    m_image_alt_text_isSet = !json[QString("imageAltText")].isNull() && m_image_alt_text_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("imageType")]);
    m_image_type_isSet = !json[QString("imageType")].isNull() && m_image_type_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIGoogleAppsCardV1CardHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1CardHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_image_alt_text_isSet) {
        obj.insert(QString("imageAltText"), ::OpenAPI::toJsonValue(m_image_alt_text));
    }
    if (m_image_type_isSet) {
        obj.insert(QString("imageType"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIGoogleAppsCardV1CardHeader::getImageAltText() const {
    return m_image_alt_text;
}
void OAIGoogleAppsCardV1CardHeader::setImageAltText(const QString &image_alt_text) {
    m_image_alt_text = image_alt_text;
    m_image_alt_text_isSet = true;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_alt_text_Set() const{
    return m_image_alt_text_isSet;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_alt_text_Valid() const{
    return m_image_alt_text_isValid;
}

QString OAIGoogleAppsCardV1CardHeader::getImageType() const {
    return m_image_type;
}
void OAIGoogleAppsCardV1CardHeader::setImageType(const QString &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_type_Valid() const{
    return m_image_type_isValid;
}

QString OAIGoogleAppsCardV1CardHeader::getImageUrl() const {
    return m_image_url;
}
void OAIGoogleAppsCardV1CardHeader::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGoogleAppsCardV1CardHeader::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGoogleAppsCardV1CardHeader::getSubtitle() const {
    return m_subtitle;
}
void OAIGoogleAppsCardV1CardHeader::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIGoogleAppsCardV1CardHeader::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIGoogleAppsCardV1CardHeader::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAIGoogleAppsCardV1CardHeader::getTitle() const {
    return m_title;
}
void OAIGoogleAppsCardV1CardHeader::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGoogleAppsCardV1CardHeader::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGoogleAppsCardV1CardHeader::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGoogleAppsCardV1CardHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_alt_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1CardHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
