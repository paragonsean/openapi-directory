/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmojiReactionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmojiReactionSummary::OAIEmojiReactionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmojiReactionSummary::OAIEmojiReactionSummary() {
    this->initializeModel();
}

OAIEmojiReactionSummary::~OAIEmojiReactionSummary() {}

void OAIEmojiReactionSummary::initializeModel() {

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_reaction_count_isSet = false;
    m_reaction_count_isValid = false;
}

void OAIEmojiReactionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmojiReactionSummary::fromJsonObject(QJsonObject json) {

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_reaction_count_isValid = ::OpenAPI::fromJsonValue(m_reaction_count, json[QString("reactionCount")]);
    m_reaction_count_isSet = !json[QString("reactionCount")].isNull() && m_reaction_count_isValid;
}

QString OAIEmojiReactionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmojiReactionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_emoji.isSet()) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_reaction_count_isSet) {
        obj.insert(QString("reactionCount"), ::OpenAPI::toJsonValue(m_reaction_count));
    }
    return obj;
}

OAIEmoji OAIEmojiReactionSummary::getEmoji() const {
    return m_emoji;
}
void OAIEmojiReactionSummary::setEmoji(const OAIEmoji &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIEmojiReactionSummary::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIEmojiReactionSummary::is_emoji_Valid() const{
    return m_emoji_isValid;
}

qint32 OAIEmojiReactionSummary::getReactionCount() const {
    return m_reaction_count;
}
void OAIEmojiReactionSummary::setReactionCount(const qint32 &reaction_count) {
    m_reaction_count = reaction_count;
    m_reaction_count_isSet = true;
}

bool OAIEmojiReactionSummary::is_reaction_count_Set() const{
    return m_reaction_count_isSet;
}

bool OAIEmojiReactionSummary::is_reaction_count_Valid() const{
    return m_reaction_count_isValid;
}

bool OAIEmojiReactionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emoji.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmojiReactionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
