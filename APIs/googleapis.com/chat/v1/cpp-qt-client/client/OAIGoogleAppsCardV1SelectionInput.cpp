/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1SelectionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1SelectionInput::OAIGoogleAppsCardV1SelectionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1SelectionInput::OAIGoogleAppsCardV1SelectionInput() {
    this->initializeModel();
}

OAIGoogleAppsCardV1SelectionInput::~OAIGoogleAppsCardV1SelectionInput() {}

void OAIGoogleAppsCardV1SelectionInput::initializeModel() {

    m_external_data_source_isSet = false;
    m_external_data_source_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_multi_select_max_selected_items_isSet = false;
    m_multi_select_max_selected_items_isValid = false;

    m_multi_select_min_query_length_isSet = false;
    m_multi_select_min_query_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_on_change_action_isSet = false;
    m_on_change_action_isValid = false;

    m_platform_data_source_isSet = false;
    m_platform_data_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleAppsCardV1SelectionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1SelectionInput::fromJsonObject(QJsonObject json) {

    m_external_data_source_isValid = ::OpenAPI::fromJsonValue(m_external_data_source, json[QString("externalDataSource")]);
    m_external_data_source_isSet = !json[QString("externalDataSource")].isNull() && m_external_data_source_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_multi_select_max_selected_items_isValid = ::OpenAPI::fromJsonValue(m_multi_select_max_selected_items, json[QString("multiSelectMaxSelectedItems")]);
    m_multi_select_max_selected_items_isSet = !json[QString("multiSelectMaxSelectedItems")].isNull() && m_multi_select_max_selected_items_isValid;

    m_multi_select_min_query_length_isValid = ::OpenAPI::fromJsonValue(m_multi_select_min_query_length, json[QString("multiSelectMinQueryLength")]);
    m_multi_select_min_query_length_isSet = !json[QString("multiSelectMinQueryLength")].isNull() && m_multi_select_min_query_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_on_change_action_isValid = ::OpenAPI::fromJsonValue(m_on_change_action, json[QString("onChangeAction")]);
    m_on_change_action_isSet = !json[QString("onChangeAction")].isNull() && m_on_change_action_isValid;

    m_platform_data_source_isValid = ::OpenAPI::fromJsonValue(m_platform_data_source, json[QString("platformDataSource")]);
    m_platform_data_source_isSet = !json[QString("platformDataSource")].isNull() && m_platform_data_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleAppsCardV1SelectionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1SelectionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_external_data_source.isSet()) {
        obj.insert(QString("externalDataSource"), ::OpenAPI::toJsonValue(m_external_data_source));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_multi_select_max_selected_items_isSet) {
        obj.insert(QString("multiSelectMaxSelectedItems"), ::OpenAPI::toJsonValue(m_multi_select_max_selected_items));
    }
    if (m_multi_select_min_query_length_isSet) {
        obj.insert(QString("multiSelectMinQueryLength"), ::OpenAPI::toJsonValue(m_multi_select_min_query_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_on_change_action.isSet()) {
        obj.insert(QString("onChangeAction"), ::OpenAPI::toJsonValue(m_on_change_action));
    }
    if (m_platform_data_source.isSet()) {
        obj.insert(QString("platformDataSource"), ::OpenAPI::toJsonValue(m_platform_data_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1SelectionInput::getExternalDataSource() const {
    return m_external_data_source;
}
void OAIGoogleAppsCardV1SelectionInput::setExternalDataSource(const OAIGoogleAppsCardV1Action &external_data_source) {
    m_external_data_source = external_data_source;
    m_external_data_source_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_external_data_source_Set() const{
    return m_external_data_source_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_external_data_source_Valid() const{
    return m_external_data_source_isValid;
}

QList<OAIGoogleAppsCardV1SelectionItem> OAIGoogleAppsCardV1SelectionInput::getItems() const {
    return m_items;
}
void OAIGoogleAppsCardV1SelectionInput::setItems(const QList<OAIGoogleAppsCardV1SelectionItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIGoogleAppsCardV1SelectionInput::getLabel() const {
    return m_label;
}
void OAIGoogleAppsCardV1SelectionInput::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_label_Set() const{
    return m_label_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIGoogleAppsCardV1SelectionInput::getMultiSelectMaxSelectedItems() const {
    return m_multi_select_max_selected_items;
}
void OAIGoogleAppsCardV1SelectionInput::setMultiSelectMaxSelectedItems(const qint32 &multi_select_max_selected_items) {
    m_multi_select_max_selected_items = multi_select_max_selected_items;
    m_multi_select_max_selected_items_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_multi_select_max_selected_items_Set() const{
    return m_multi_select_max_selected_items_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_multi_select_max_selected_items_Valid() const{
    return m_multi_select_max_selected_items_isValid;
}

qint32 OAIGoogleAppsCardV1SelectionInput::getMultiSelectMinQueryLength() const {
    return m_multi_select_min_query_length;
}
void OAIGoogleAppsCardV1SelectionInput::setMultiSelectMinQueryLength(const qint32 &multi_select_min_query_length) {
    m_multi_select_min_query_length = multi_select_min_query_length;
    m_multi_select_min_query_length_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_multi_select_min_query_length_Set() const{
    return m_multi_select_min_query_length_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_multi_select_min_query_length_Valid() const{
    return m_multi_select_min_query_length_isValid;
}

QString OAIGoogleAppsCardV1SelectionInput::getName() const {
    return m_name;
}
void OAIGoogleAppsCardV1SelectionInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1SelectionInput::getOnChangeAction() const {
    return m_on_change_action;
}
void OAIGoogleAppsCardV1SelectionInput::setOnChangeAction(const OAIGoogleAppsCardV1Action &on_change_action) {
    m_on_change_action = on_change_action;
    m_on_change_action_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_on_change_action_Set() const{
    return m_on_change_action_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_on_change_action_Valid() const{
    return m_on_change_action_isValid;
}

OAIGoogleAppsCardV1PlatformDataSource OAIGoogleAppsCardV1SelectionInput::getPlatformDataSource() const {
    return m_platform_data_source;
}
void OAIGoogleAppsCardV1SelectionInput::setPlatformDataSource(const OAIGoogleAppsCardV1PlatformDataSource &platform_data_source) {
    m_platform_data_source = platform_data_source;
    m_platform_data_source_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_platform_data_source_Set() const{
    return m_platform_data_source_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_platform_data_source_Valid() const{
    return m_platform_data_source_isValid;
}

QString OAIGoogleAppsCardV1SelectionInput::getType() const {
    return m_type;
}
void OAIGoogleAppsCardV1SelectionInput::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleAppsCardV1SelectionInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleAppsCardV1SelectionInput::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleAppsCardV1SelectionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_select_max_selected_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_select_min_query_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_change_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1SelectionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
