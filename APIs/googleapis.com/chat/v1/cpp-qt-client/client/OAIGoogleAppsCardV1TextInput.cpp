/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1TextInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1TextInput::OAIGoogleAppsCardV1TextInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1TextInput::OAIGoogleAppsCardV1TextInput() {
    this->initializeModel();
}

OAIGoogleAppsCardV1TextInput::~OAIGoogleAppsCardV1TextInput() {}

void OAIGoogleAppsCardV1TextInput::initializeModel() {

    m_auto_complete_action_isSet = false;
    m_auto_complete_action_isValid = false;

    m_hint_text_isSet = false;
    m_hint_text_isValid = false;

    m_initial_suggestions_isSet = false;
    m_initial_suggestions_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_on_change_action_isSet = false;
    m_on_change_action_isValid = false;

    m_placeholder_text_isSet = false;
    m_placeholder_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGoogleAppsCardV1TextInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1TextInput::fromJsonObject(QJsonObject json) {

    m_auto_complete_action_isValid = ::OpenAPI::fromJsonValue(m_auto_complete_action, json[QString("autoCompleteAction")]);
    m_auto_complete_action_isSet = !json[QString("autoCompleteAction")].isNull() && m_auto_complete_action_isValid;

    m_hint_text_isValid = ::OpenAPI::fromJsonValue(m_hint_text, json[QString("hintText")]);
    m_hint_text_isSet = !json[QString("hintText")].isNull() && m_hint_text_isValid;

    m_initial_suggestions_isValid = ::OpenAPI::fromJsonValue(m_initial_suggestions, json[QString("initialSuggestions")]);
    m_initial_suggestions_isSet = !json[QString("initialSuggestions")].isNull() && m_initial_suggestions_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_on_change_action_isValid = ::OpenAPI::fromJsonValue(m_on_change_action, json[QString("onChangeAction")]);
    m_on_change_action_isSet = !json[QString("onChangeAction")].isNull() && m_on_change_action_isValid;

    m_placeholder_text_isValid = ::OpenAPI::fromJsonValue(m_placeholder_text, json[QString("placeholderText")]);
    m_placeholder_text_isSet = !json[QString("placeholderText")].isNull() && m_placeholder_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGoogleAppsCardV1TextInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1TextInput::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_complete_action.isSet()) {
        obj.insert(QString("autoCompleteAction"), ::OpenAPI::toJsonValue(m_auto_complete_action));
    }
    if (m_hint_text_isSet) {
        obj.insert(QString("hintText"), ::OpenAPI::toJsonValue(m_hint_text));
    }
    if (m_initial_suggestions.isSet()) {
        obj.insert(QString("initialSuggestions"), ::OpenAPI::toJsonValue(m_initial_suggestions));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_on_change_action.isSet()) {
        obj.insert(QString("onChangeAction"), ::OpenAPI::toJsonValue(m_on_change_action));
    }
    if (m_placeholder_text_isSet) {
        obj.insert(QString("placeholderText"), ::OpenAPI::toJsonValue(m_placeholder_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1TextInput::getAutoCompleteAction() const {
    return m_auto_complete_action;
}
void OAIGoogleAppsCardV1TextInput::setAutoCompleteAction(const OAIGoogleAppsCardV1Action &auto_complete_action) {
    m_auto_complete_action = auto_complete_action;
    m_auto_complete_action_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_auto_complete_action_Set() const{
    return m_auto_complete_action_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_auto_complete_action_Valid() const{
    return m_auto_complete_action_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getHintText() const {
    return m_hint_text;
}
void OAIGoogleAppsCardV1TextInput::setHintText(const QString &hint_text) {
    m_hint_text = hint_text;
    m_hint_text_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_hint_text_Set() const{
    return m_hint_text_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_hint_text_Valid() const{
    return m_hint_text_isValid;
}

OAIGoogleAppsCardV1Suggestions OAIGoogleAppsCardV1TextInput::getInitialSuggestions() const {
    return m_initial_suggestions;
}
void OAIGoogleAppsCardV1TextInput::setInitialSuggestions(const OAIGoogleAppsCardV1Suggestions &initial_suggestions) {
    m_initial_suggestions = initial_suggestions;
    m_initial_suggestions_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_initial_suggestions_Set() const{
    return m_initial_suggestions_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_initial_suggestions_Valid() const{
    return m_initial_suggestions_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getLabel() const {
    return m_label;
}
void OAIGoogleAppsCardV1TextInput::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_label_Set() const{
    return m_label_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getName() const {
    return m_name;
}
void OAIGoogleAppsCardV1TextInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleAppsCardV1Action OAIGoogleAppsCardV1TextInput::getOnChangeAction() const {
    return m_on_change_action;
}
void OAIGoogleAppsCardV1TextInput::setOnChangeAction(const OAIGoogleAppsCardV1Action &on_change_action) {
    m_on_change_action = on_change_action;
    m_on_change_action_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_on_change_action_Set() const{
    return m_on_change_action_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_on_change_action_Valid() const{
    return m_on_change_action_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getPlaceholderText() const {
    return m_placeholder_text;
}
void OAIGoogleAppsCardV1TextInput::setPlaceholderText(const QString &placeholder_text) {
    m_placeholder_text = placeholder_text;
    m_placeholder_text_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_placeholder_text_Set() const{
    return m_placeholder_text_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_placeholder_text_Valid() const{
    return m_placeholder_text_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getType() const {
    return m_type;
}
void OAIGoogleAppsCardV1TextInput::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGoogleAppsCardV1TextInput::getValue() const {
    return m_value;
}
void OAIGoogleAppsCardV1TextInput::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGoogleAppsCardV1TextInput::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGoogleAppsCardV1TextInput::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGoogleAppsCardV1TextInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_complete_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hint_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_suggestions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_change_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placeholder_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1TextInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
