/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetUpSpaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetUpSpaceRequest::OAISetUpSpaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetUpSpaceRequest::OAISetUpSpaceRequest() {
    this->initializeModel();
}

OAISetUpSpaceRequest::~OAISetUpSpaceRequest() {}

void OAISetUpSpaceRequest::initializeModel() {

    m_memberships_isSet = false;
    m_memberships_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;
}

void OAISetUpSpaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetUpSpaceRequest::fromJsonObject(QJsonObject json) {

    m_memberships_isValid = ::OpenAPI::fromJsonValue(m_memberships, json[QString("memberships")]);
    m_memberships_isSet = !json[QString("memberships")].isNull() && m_memberships_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;
}

QString OAISetUpSpaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetUpSpaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_memberships.size() > 0) {
        obj.insert(QString("memberships"), ::OpenAPI::toJsonValue(m_memberships));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_space.isSet()) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    return obj;
}

QList<OAIMembership> OAISetUpSpaceRequest::getMemberships() const {
    return m_memberships;
}
void OAISetUpSpaceRequest::setMemberships(const QList<OAIMembership> &memberships) {
    m_memberships = memberships;
    m_memberships_isSet = true;
}

bool OAISetUpSpaceRequest::is_memberships_Set() const{
    return m_memberships_isSet;
}

bool OAISetUpSpaceRequest::is_memberships_Valid() const{
    return m_memberships_isValid;
}

QString OAISetUpSpaceRequest::getRequestId() const {
    return m_request_id;
}
void OAISetUpSpaceRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISetUpSpaceRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISetUpSpaceRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAISpace OAISetUpSpaceRequest::getSpace() const {
    return m_space;
}
void OAISetUpSpaceRequest::setSpace(const OAISpace &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAISetUpSpaceRequest::is_space_Set() const{
    return m_space_isSet;
}

bool OAISetUpSpaceRequest::is_space_Valid() const{
    return m_space_isValid;
}

bool OAISetUpSpaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_memberships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetUpSpaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
