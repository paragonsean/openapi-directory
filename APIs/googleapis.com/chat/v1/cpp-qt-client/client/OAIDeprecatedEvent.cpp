/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeprecatedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeprecatedEvent::OAIDeprecatedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeprecatedEvent::OAIDeprecatedEvent() {
    this->initializeModel();
}

OAIDeprecatedEvent::~OAIDeprecatedEvent() {}

void OAIDeprecatedEvent::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_common_isSet = false;
    m_common_isValid = false;

    m_config_complete_redirect_url_isSet = false;
    m_config_complete_redirect_url_isValid = false;

    m_dialog_event_type_isSet = false;
    m_dialog_event_type_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_is_dialog_event_isSet = false;
    m_is_dialog_event_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;

    m_thread_key_isSet = false;
    m_thread_key_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIDeprecatedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeprecatedEvent::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_common_isValid = ::OpenAPI::fromJsonValue(m_common, json[QString("common")]);
    m_common_isSet = !json[QString("common")].isNull() && m_common_isValid;

    m_config_complete_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_config_complete_redirect_url, json[QString("configCompleteRedirectUrl")]);
    m_config_complete_redirect_url_isSet = !json[QString("configCompleteRedirectUrl")].isNull() && m_config_complete_redirect_url_isValid;

    m_dialog_event_type_isValid = ::OpenAPI::fromJsonValue(m_dialog_event_type, json[QString("dialogEventType")]);
    m_dialog_event_type_isSet = !json[QString("dialogEventType")].isNull() && m_dialog_event_type_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_is_dialog_event_isValid = ::OpenAPI::fromJsonValue(m_is_dialog_event, json[QString("isDialogEvent")]);
    m_is_dialog_event_isSet = !json[QString("isDialogEvent")].isNull() && m_is_dialog_event_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;

    m_thread_key_isValid = ::OpenAPI::fromJsonValue(m_thread_key, json[QString("threadKey")]);
    m_thread_key_isSet = !json[QString("threadKey")].isNull() && m_thread_key_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIDeprecatedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeprecatedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_common.isSet()) {
        obj.insert(QString("common"), ::OpenAPI::toJsonValue(m_common));
    }
    if (m_config_complete_redirect_url_isSet) {
        obj.insert(QString("configCompleteRedirectUrl"), ::OpenAPI::toJsonValue(m_config_complete_redirect_url));
    }
    if (m_dialog_event_type_isSet) {
        obj.insert(QString("dialogEventType"), ::OpenAPI::toJsonValue(m_dialog_event_type));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_is_dialog_event_isSet) {
        obj.insert(QString("isDialogEvent"), ::OpenAPI::toJsonValue(m_is_dialog_event));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_space.isSet()) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    if (m_thread_key_isSet) {
        obj.insert(QString("threadKey"), ::OpenAPI::toJsonValue(m_thread_key));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIFormAction OAIDeprecatedEvent::getAction() const {
    return m_action;
}
void OAIDeprecatedEvent::setAction(const OAIFormAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDeprecatedEvent::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDeprecatedEvent::is_action_Valid() const{
    return m_action_isValid;
}

OAICommonEventObject OAIDeprecatedEvent::getCommon() const {
    return m_common;
}
void OAIDeprecatedEvent::setCommon(const OAICommonEventObject &common) {
    m_common = common;
    m_common_isSet = true;
}

bool OAIDeprecatedEvent::is_common_Set() const{
    return m_common_isSet;
}

bool OAIDeprecatedEvent::is_common_Valid() const{
    return m_common_isValid;
}

QString OAIDeprecatedEvent::getConfigCompleteRedirectUrl() const {
    return m_config_complete_redirect_url;
}
void OAIDeprecatedEvent::setConfigCompleteRedirectUrl(const QString &config_complete_redirect_url) {
    m_config_complete_redirect_url = config_complete_redirect_url;
    m_config_complete_redirect_url_isSet = true;
}

bool OAIDeprecatedEvent::is_config_complete_redirect_url_Set() const{
    return m_config_complete_redirect_url_isSet;
}

bool OAIDeprecatedEvent::is_config_complete_redirect_url_Valid() const{
    return m_config_complete_redirect_url_isValid;
}

QString OAIDeprecatedEvent::getDialogEventType() const {
    return m_dialog_event_type;
}
void OAIDeprecatedEvent::setDialogEventType(const QString &dialog_event_type) {
    m_dialog_event_type = dialog_event_type;
    m_dialog_event_type_isSet = true;
}

bool OAIDeprecatedEvent::is_dialog_event_type_Set() const{
    return m_dialog_event_type_isSet;
}

bool OAIDeprecatedEvent::is_dialog_event_type_Valid() const{
    return m_dialog_event_type_isValid;
}

QString OAIDeprecatedEvent::getEventTime() const {
    return m_event_time;
}
void OAIDeprecatedEvent::setEventTime(const QString &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIDeprecatedEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIDeprecatedEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

bool OAIDeprecatedEvent::isIsDialogEvent() const {
    return m_is_dialog_event;
}
void OAIDeprecatedEvent::setIsDialogEvent(const bool &is_dialog_event) {
    m_is_dialog_event = is_dialog_event;
    m_is_dialog_event_isSet = true;
}

bool OAIDeprecatedEvent::is_is_dialog_event_Set() const{
    return m_is_dialog_event_isSet;
}

bool OAIDeprecatedEvent::is_is_dialog_event_Valid() const{
    return m_is_dialog_event_isValid;
}

OAIMessage OAIDeprecatedEvent::getMessage() const {
    return m_message;
}
void OAIDeprecatedEvent::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDeprecatedEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDeprecatedEvent::is_message_Valid() const{
    return m_message_isValid;
}

OAISpace OAIDeprecatedEvent::getSpace() const {
    return m_space;
}
void OAIDeprecatedEvent::setSpace(const OAISpace &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAIDeprecatedEvent::is_space_Set() const{
    return m_space_isSet;
}

bool OAIDeprecatedEvent::is_space_Valid() const{
    return m_space_isValid;
}

QString OAIDeprecatedEvent::getThreadKey() const {
    return m_thread_key;
}
void OAIDeprecatedEvent::setThreadKey(const QString &thread_key) {
    m_thread_key = thread_key;
    m_thread_key_isSet = true;
}

bool OAIDeprecatedEvent::is_thread_key_Set() const{
    return m_thread_key_isSet;
}

bool OAIDeprecatedEvent::is_thread_key_Valid() const{
    return m_thread_key_isValid;
}

QString OAIDeprecatedEvent::getToken() const {
    return m_token;
}
void OAIDeprecatedEvent::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIDeprecatedEvent::is_token_Set() const{
    return m_token_isSet;
}

bool OAIDeprecatedEvent::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIDeprecatedEvent::getType() const {
    return m_type;
}
void OAIDeprecatedEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeprecatedEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeprecatedEvent::is_type_Valid() const{
    return m_type_isValid;
}

OAIUser OAIDeprecatedEvent::getUser() const {
    return m_user;
}
void OAIDeprecatedEvent::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDeprecatedEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDeprecatedEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIDeprecatedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_common.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_complete_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dialog_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeprecatedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
