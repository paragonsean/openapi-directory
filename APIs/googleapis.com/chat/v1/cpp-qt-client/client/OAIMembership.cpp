/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_group_member_isSet = false;
    m_group_member_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_group_member_isValid = ::OpenAPI::fromJsonValue(m_group_member, json[QString("groupMember")]);
    m_group_member_isSet = !json[QString("groupMember")].isNull() && m_group_member_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_group_member.isSet()) {
        obj.insert(QString("groupMember"), ::OpenAPI::toJsonValue(m_group_member));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIMembership::getCreateTime() const {
    return m_create_time;
}
void OAIMembership::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMembership::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMembership::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMembership::getDeleteTime() const {
    return m_delete_time;
}
void OAIMembership::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIMembership::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIMembership::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

OAIGroup OAIMembership::getGroupMember() const {
    return m_group_member;
}
void OAIMembership::setGroupMember(const OAIGroup &group_member) {
    m_group_member = group_member;
    m_group_member_isSet = true;
}

bool OAIMembership::is_group_member_Set() const{
    return m_group_member_isSet;
}

bool OAIMembership::is_group_member_Valid() const{
    return m_group_member_isValid;
}

OAIUser OAIMembership::getMember() const {
    return m_member;
}
void OAIMembership::setMember(const OAIUser &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIMembership::is_member_Set() const{
    return m_member_isSet;
}

bool OAIMembership::is_member_Valid() const{
    return m_member_isValid;
}

QString OAIMembership::getName() const {
    return m_name;
}
void OAIMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMembership::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMembership::getRole() const {
    return m_role;
}
void OAIMembership::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIMembership::is_role_Set() const{
    return m_role_isSet;
}

bool OAIMembership::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIMembership::getState() const {
    return m_state;
}
void OAIMembership::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMembership::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMembership::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
