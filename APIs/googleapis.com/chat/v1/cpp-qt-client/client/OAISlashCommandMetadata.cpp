/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlashCommandMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlashCommandMetadata::OAISlashCommandMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlashCommandMetadata::OAISlashCommandMetadata() {
    this->initializeModel();
}

OAISlashCommandMetadata::~OAISlashCommandMetadata() {}

void OAISlashCommandMetadata::initializeModel() {

    m_bot_isSet = false;
    m_bot_isValid = false;

    m_command_id_isSet = false;
    m_command_id_isValid = false;

    m_command_name_isSet = false;
    m_command_name_isValid = false;

    m_triggers_dialog_isSet = false;
    m_triggers_dialog_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISlashCommandMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlashCommandMetadata::fromJsonObject(QJsonObject json) {

    m_bot_isValid = ::OpenAPI::fromJsonValue(m_bot, json[QString("bot")]);
    m_bot_isSet = !json[QString("bot")].isNull() && m_bot_isValid;

    m_command_id_isValid = ::OpenAPI::fromJsonValue(m_command_id, json[QString("commandId")]);
    m_command_id_isSet = !json[QString("commandId")].isNull() && m_command_id_isValid;

    m_command_name_isValid = ::OpenAPI::fromJsonValue(m_command_name, json[QString("commandName")]);
    m_command_name_isSet = !json[QString("commandName")].isNull() && m_command_name_isValid;

    m_triggers_dialog_isValid = ::OpenAPI::fromJsonValue(m_triggers_dialog, json[QString("triggersDialog")]);
    m_triggers_dialog_isSet = !json[QString("triggersDialog")].isNull() && m_triggers_dialog_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISlashCommandMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlashCommandMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_bot.isSet()) {
        obj.insert(QString("bot"), ::OpenAPI::toJsonValue(m_bot));
    }
    if (m_command_id_isSet) {
        obj.insert(QString("commandId"), ::OpenAPI::toJsonValue(m_command_id));
    }
    if (m_command_name_isSet) {
        obj.insert(QString("commandName"), ::OpenAPI::toJsonValue(m_command_name));
    }
    if (m_triggers_dialog_isSet) {
        obj.insert(QString("triggersDialog"), ::OpenAPI::toJsonValue(m_triggers_dialog));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIUser OAISlashCommandMetadata::getBot() const {
    return m_bot;
}
void OAISlashCommandMetadata::setBot(const OAIUser &bot) {
    m_bot = bot;
    m_bot_isSet = true;
}

bool OAISlashCommandMetadata::is_bot_Set() const{
    return m_bot_isSet;
}

bool OAISlashCommandMetadata::is_bot_Valid() const{
    return m_bot_isValid;
}

QString OAISlashCommandMetadata::getCommandId() const {
    return m_command_id;
}
void OAISlashCommandMetadata::setCommandId(const QString &command_id) {
    m_command_id = command_id;
    m_command_id_isSet = true;
}

bool OAISlashCommandMetadata::is_command_id_Set() const{
    return m_command_id_isSet;
}

bool OAISlashCommandMetadata::is_command_id_Valid() const{
    return m_command_id_isValid;
}

QString OAISlashCommandMetadata::getCommandName() const {
    return m_command_name;
}
void OAISlashCommandMetadata::setCommandName(const QString &command_name) {
    m_command_name = command_name;
    m_command_name_isSet = true;
}

bool OAISlashCommandMetadata::is_command_name_Set() const{
    return m_command_name_isSet;
}

bool OAISlashCommandMetadata::is_command_name_Valid() const{
    return m_command_name_isValid;
}

bool OAISlashCommandMetadata::isTriggersDialog() const {
    return m_triggers_dialog;
}
void OAISlashCommandMetadata::setTriggersDialog(const bool &triggers_dialog) {
    m_triggers_dialog = triggers_dialog;
    m_triggers_dialog_isSet = true;
}

bool OAISlashCommandMetadata::is_triggers_dialog_Set() const{
    return m_triggers_dialog_isSet;
}

bool OAISlashCommandMetadata::is_triggers_dialog_Valid() const{
    return m_triggers_dialog_isValid;
}

QString OAISlashCommandMetadata::getType() const {
    return m_type;
}
void OAISlashCommandMetadata::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISlashCommandMetadata::is_type_Set() const{
    return m_type_isSet;
}

bool OAISlashCommandMetadata::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISlashCommandMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers_dialog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlashCommandMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
