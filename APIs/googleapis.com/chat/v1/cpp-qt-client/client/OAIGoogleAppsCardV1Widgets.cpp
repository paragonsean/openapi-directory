/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsCardV1Widgets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsCardV1Widgets::OAIGoogleAppsCardV1Widgets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsCardV1Widgets::OAIGoogleAppsCardV1Widgets() {
    this->initializeModel();
}

OAIGoogleAppsCardV1Widgets::~OAIGoogleAppsCardV1Widgets() {}

void OAIGoogleAppsCardV1Widgets::initializeModel() {

    m_button_list_isSet = false;
    m_button_list_isValid = false;

    m_date_time_picker_isSet = false;
    m_date_time_picker_isValid = false;

    m_decorated_text_isSet = false;
    m_decorated_text_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_selection_input_isSet = false;
    m_selection_input_isValid = false;

    m_text_input_isSet = false;
    m_text_input_isValid = false;

    m_text_paragraph_isSet = false;
    m_text_paragraph_isValid = false;
}

void OAIGoogleAppsCardV1Widgets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsCardV1Widgets::fromJsonObject(QJsonObject json) {

    m_button_list_isValid = ::OpenAPI::fromJsonValue(m_button_list, json[QString("buttonList")]);
    m_button_list_isSet = !json[QString("buttonList")].isNull() && m_button_list_isValid;

    m_date_time_picker_isValid = ::OpenAPI::fromJsonValue(m_date_time_picker, json[QString("dateTimePicker")]);
    m_date_time_picker_isSet = !json[QString("dateTimePicker")].isNull() && m_date_time_picker_isValid;

    m_decorated_text_isValid = ::OpenAPI::fromJsonValue(m_decorated_text, json[QString("decoratedText")]);
    m_decorated_text_isSet = !json[QString("decoratedText")].isNull() && m_decorated_text_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_selection_input_isValid = ::OpenAPI::fromJsonValue(m_selection_input, json[QString("selectionInput")]);
    m_selection_input_isSet = !json[QString("selectionInput")].isNull() && m_selection_input_isValid;

    m_text_input_isValid = ::OpenAPI::fromJsonValue(m_text_input, json[QString("textInput")]);
    m_text_input_isSet = !json[QString("textInput")].isNull() && m_text_input_isValid;

    m_text_paragraph_isValid = ::OpenAPI::fromJsonValue(m_text_paragraph, json[QString("textParagraph")]);
    m_text_paragraph_isSet = !json[QString("textParagraph")].isNull() && m_text_paragraph_isValid;
}

QString OAIGoogleAppsCardV1Widgets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsCardV1Widgets::asJsonObject() const {
    QJsonObject obj;
    if (m_button_list.isSet()) {
        obj.insert(QString("buttonList"), ::OpenAPI::toJsonValue(m_button_list));
    }
    if (m_date_time_picker.isSet()) {
        obj.insert(QString("dateTimePicker"), ::OpenAPI::toJsonValue(m_date_time_picker));
    }
    if (m_decorated_text.isSet()) {
        obj.insert(QString("decoratedText"), ::OpenAPI::toJsonValue(m_decorated_text));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_selection_input.isSet()) {
        obj.insert(QString("selectionInput"), ::OpenAPI::toJsonValue(m_selection_input));
    }
    if (m_text_input.isSet()) {
        obj.insert(QString("textInput"), ::OpenAPI::toJsonValue(m_text_input));
    }
    if (m_text_paragraph.isSet()) {
        obj.insert(QString("textParagraph"), ::OpenAPI::toJsonValue(m_text_paragraph));
    }
    return obj;
}

OAIGoogleAppsCardV1ButtonList OAIGoogleAppsCardV1Widgets::getButtonList() const {
    return m_button_list;
}
void OAIGoogleAppsCardV1Widgets::setButtonList(const OAIGoogleAppsCardV1ButtonList &button_list) {
    m_button_list = button_list;
    m_button_list_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_button_list_Set() const{
    return m_button_list_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_button_list_Valid() const{
    return m_button_list_isValid;
}

OAIGoogleAppsCardV1DateTimePicker OAIGoogleAppsCardV1Widgets::getDateTimePicker() const {
    return m_date_time_picker;
}
void OAIGoogleAppsCardV1Widgets::setDateTimePicker(const OAIGoogleAppsCardV1DateTimePicker &date_time_picker) {
    m_date_time_picker = date_time_picker;
    m_date_time_picker_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_date_time_picker_Set() const{
    return m_date_time_picker_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_date_time_picker_Valid() const{
    return m_date_time_picker_isValid;
}

OAIGoogleAppsCardV1DecoratedText OAIGoogleAppsCardV1Widgets::getDecoratedText() const {
    return m_decorated_text;
}
void OAIGoogleAppsCardV1Widgets::setDecoratedText(const OAIGoogleAppsCardV1DecoratedText &decorated_text) {
    m_decorated_text = decorated_text;
    m_decorated_text_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_decorated_text_Set() const{
    return m_decorated_text_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_decorated_text_Valid() const{
    return m_decorated_text_isValid;
}

OAIGoogleAppsCardV1Image OAIGoogleAppsCardV1Widgets::getImage() const {
    return m_image;
}
void OAIGoogleAppsCardV1Widgets::setImage(const OAIGoogleAppsCardV1Image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_image_Valid() const{
    return m_image_isValid;
}

OAIGoogleAppsCardV1SelectionInput OAIGoogleAppsCardV1Widgets::getSelectionInput() const {
    return m_selection_input;
}
void OAIGoogleAppsCardV1Widgets::setSelectionInput(const OAIGoogleAppsCardV1SelectionInput &selection_input) {
    m_selection_input = selection_input;
    m_selection_input_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_selection_input_Set() const{
    return m_selection_input_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_selection_input_Valid() const{
    return m_selection_input_isValid;
}

OAIGoogleAppsCardV1TextInput OAIGoogleAppsCardV1Widgets::getTextInput() const {
    return m_text_input;
}
void OAIGoogleAppsCardV1Widgets::setTextInput(const OAIGoogleAppsCardV1TextInput &text_input) {
    m_text_input = text_input;
    m_text_input_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_text_input_Set() const{
    return m_text_input_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_text_input_Valid() const{
    return m_text_input_isValid;
}

OAIGoogleAppsCardV1TextParagraph OAIGoogleAppsCardV1Widgets::getTextParagraph() const {
    return m_text_paragraph;
}
void OAIGoogleAppsCardV1Widgets::setTextParagraph(const OAIGoogleAppsCardV1TextParagraph &text_paragraph) {
    m_text_paragraph = text_paragraph;
    m_text_paragraph_isSet = true;
}

bool OAIGoogleAppsCardV1Widgets::is_text_paragraph_Set() const{
    return m_text_paragraph_isSet;
}

bool OAIGoogleAppsCardV1Widgets::is_text_paragraph_Valid() const{
    return m_text_paragraph_isValid;
}

bool OAIGoogleAppsCardV1Widgets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_picker.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decorated_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_paragraph.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsCardV1Widgets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
