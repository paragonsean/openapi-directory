/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpace::OAISpace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpace::OAISpace() {
    this->initializeModel();
}

OAISpace::~OAISpace() {}

void OAISpace::initializeModel() {

    m_admin_installed_isSet = false;
    m_admin_installed_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_user_allowed_isSet = false;
    m_external_user_allowed_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_single_user_bot_dm_isSet = false;
    m_single_user_bot_dm_isValid = false;

    m_space_details_isSet = false;
    m_space_details_isValid = false;

    m_space_history_state_isSet = false;
    m_space_history_state_isValid = false;

    m_space_threading_state_isSet = false;
    m_space_threading_state_isValid = false;

    m_space_type_isSet = false;
    m_space_type_isValid = false;

    m_threaded_isSet = false;
    m_threaded_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpace::fromJsonObject(QJsonObject json) {

    m_admin_installed_isValid = ::OpenAPI::fromJsonValue(m_admin_installed, json[QString("adminInstalled")]);
    m_admin_installed_isSet = !json[QString("adminInstalled")].isNull() && m_admin_installed_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_user_allowed_isValid = ::OpenAPI::fromJsonValue(m_external_user_allowed, json[QString("externalUserAllowed")]);
    m_external_user_allowed_isSet = !json[QString("externalUserAllowed")].isNull() && m_external_user_allowed_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("importMode")]);
    m_import_mode_isSet = !json[QString("importMode")].isNull() && m_import_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_single_user_bot_dm_isValid = ::OpenAPI::fromJsonValue(m_single_user_bot_dm, json[QString("singleUserBotDm")]);
    m_single_user_bot_dm_isSet = !json[QString("singleUserBotDm")].isNull() && m_single_user_bot_dm_isValid;

    m_space_details_isValid = ::OpenAPI::fromJsonValue(m_space_details, json[QString("spaceDetails")]);
    m_space_details_isSet = !json[QString("spaceDetails")].isNull() && m_space_details_isValid;

    m_space_history_state_isValid = ::OpenAPI::fromJsonValue(m_space_history_state, json[QString("spaceHistoryState")]);
    m_space_history_state_isSet = !json[QString("spaceHistoryState")].isNull() && m_space_history_state_isValid;

    m_space_threading_state_isValid = ::OpenAPI::fromJsonValue(m_space_threading_state, json[QString("spaceThreadingState")]);
    m_space_threading_state_isSet = !json[QString("spaceThreadingState")].isNull() && m_space_threading_state_isValid;

    m_space_type_isValid = ::OpenAPI::fromJsonValue(m_space_type, json[QString("spaceType")]);
    m_space_type_isSet = !json[QString("spaceType")].isNull() && m_space_type_isValid;

    m_threaded_isValid = ::OpenAPI::fromJsonValue(m_threaded, json[QString("threaded")]);
    m_threaded_isSet = !json[QString("threaded")].isNull() && m_threaded_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpace::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_installed_isSet) {
        obj.insert(QString("adminInstalled"), ::OpenAPI::toJsonValue(m_admin_installed));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_user_allowed_isSet) {
        obj.insert(QString("externalUserAllowed"), ::OpenAPI::toJsonValue(m_external_user_allowed));
    }
    if (m_import_mode_isSet) {
        obj.insert(QString("importMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_single_user_bot_dm_isSet) {
        obj.insert(QString("singleUserBotDm"), ::OpenAPI::toJsonValue(m_single_user_bot_dm));
    }
    if (m_space_details.isSet()) {
        obj.insert(QString("spaceDetails"), ::OpenAPI::toJsonValue(m_space_details));
    }
    if (m_space_history_state_isSet) {
        obj.insert(QString("spaceHistoryState"), ::OpenAPI::toJsonValue(m_space_history_state));
    }
    if (m_space_threading_state_isSet) {
        obj.insert(QString("spaceThreadingState"), ::OpenAPI::toJsonValue(m_space_threading_state));
    }
    if (m_space_type_isSet) {
        obj.insert(QString("spaceType"), ::OpenAPI::toJsonValue(m_space_type));
    }
    if (m_threaded_isSet) {
        obj.insert(QString("threaded"), ::OpenAPI::toJsonValue(m_threaded));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAISpace::isAdminInstalled() const {
    return m_admin_installed;
}
void OAISpace::setAdminInstalled(const bool &admin_installed) {
    m_admin_installed = admin_installed;
    m_admin_installed_isSet = true;
}

bool OAISpace::is_admin_installed_Set() const{
    return m_admin_installed_isSet;
}

bool OAISpace::is_admin_installed_Valid() const{
    return m_admin_installed_isValid;
}

QString OAISpace::getCreateTime() const {
    return m_create_time;
}
void OAISpace::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISpace::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISpace::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISpace::getDisplayName() const {
    return m_display_name;
}
void OAISpace::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISpace::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISpace::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAISpace::isExternalUserAllowed() const {
    return m_external_user_allowed;
}
void OAISpace::setExternalUserAllowed(const bool &external_user_allowed) {
    m_external_user_allowed = external_user_allowed;
    m_external_user_allowed_isSet = true;
}

bool OAISpace::is_external_user_allowed_Set() const{
    return m_external_user_allowed_isSet;
}

bool OAISpace::is_external_user_allowed_Valid() const{
    return m_external_user_allowed_isValid;
}

bool OAISpace::isImportMode() const {
    return m_import_mode;
}
void OAISpace::setImportMode(const bool &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAISpace::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAISpace::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

QString OAISpace::getName() const {
    return m_name;
}
void OAISpace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpace::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpace::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISpace::isSingleUserBotDm() const {
    return m_single_user_bot_dm;
}
void OAISpace::setSingleUserBotDm(const bool &single_user_bot_dm) {
    m_single_user_bot_dm = single_user_bot_dm;
    m_single_user_bot_dm_isSet = true;
}

bool OAISpace::is_single_user_bot_dm_Set() const{
    return m_single_user_bot_dm_isSet;
}

bool OAISpace::is_single_user_bot_dm_Valid() const{
    return m_single_user_bot_dm_isValid;
}

OAISpaceDetails OAISpace::getSpaceDetails() const {
    return m_space_details;
}
void OAISpace::setSpaceDetails(const OAISpaceDetails &space_details) {
    m_space_details = space_details;
    m_space_details_isSet = true;
}

bool OAISpace::is_space_details_Set() const{
    return m_space_details_isSet;
}

bool OAISpace::is_space_details_Valid() const{
    return m_space_details_isValid;
}

QString OAISpace::getSpaceHistoryState() const {
    return m_space_history_state;
}
void OAISpace::setSpaceHistoryState(const QString &space_history_state) {
    m_space_history_state = space_history_state;
    m_space_history_state_isSet = true;
}

bool OAISpace::is_space_history_state_Set() const{
    return m_space_history_state_isSet;
}

bool OAISpace::is_space_history_state_Valid() const{
    return m_space_history_state_isValid;
}

QString OAISpace::getSpaceThreadingState() const {
    return m_space_threading_state;
}
void OAISpace::setSpaceThreadingState(const QString &space_threading_state) {
    m_space_threading_state = space_threading_state;
    m_space_threading_state_isSet = true;
}

bool OAISpace::is_space_threading_state_Set() const{
    return m_space_threading_state_isSet;
}

bool OAISpace::is_space_threading_state_Valid() const{
    return m_space_threading_state_isValid;
}

QString OAISpace::getSpaceType() const {
    return m_space_type;
}
void OAISpace::setSpaceType(const QString &space_type) {
    m_space_type = space_type;
    m_space_type_isSet = true;
}

bool OAISpace::is_space_type_Set() const{
    return m_space_type_isSet;
}

bool OAISpace::is_space_type_Valid() const{
    return m_space_type_isValid;
}

bool OAISpace::isThreaded() const {
    return m_threaded;
}
void OAISpace::setThreaded(const bool &threaded) {
    m_threaded = threaded;
    m_threaded_isSet = true;
}

bool OAISpace::is_threaded_Set() const{
    return m_threaded_isSet;
}

bool OAISpace::is_threaded_Valid() const{
    return m_threaded_isValid;
}

QString OAISpace::getType() const {
    return m_type;
}
void OAISpace::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpace::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpace::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_user_bot_dm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_history_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_threading_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
