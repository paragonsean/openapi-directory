/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeZone::OAITimeZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeZone::OAITimeZone() {
    this->initializeModel();
}

OAITimeZone::~OAITimeZone() {}

void OAITimeZone::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAITimeZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeZone::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAITimeZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeZone::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAITimeZone::getId() const {
    return m_id;
}
void OAITimeZone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITimeZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAITimeZone::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITimeZone::getOffset() const {
    return m_offset;
}
void OAITimeZone::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITimeZone::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITimeZone::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAITimeZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
