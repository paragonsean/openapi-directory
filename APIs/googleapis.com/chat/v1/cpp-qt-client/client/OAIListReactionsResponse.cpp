/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReactionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReactionsResponse::OAIListReactionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReactionsResponse::OAIListReactionsResponse() {
    this->initializeModel();
}

OAIListReactionsResponse::~OAIListReactionsResponse() {}

void OAIListReactionsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;
}

void OAIListReactionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReactionsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;
}

QString OAIListReactionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReactionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_reactions.size() > 0) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    return obj;
}

QString OAIListReactionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListReactionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListReactionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListReactionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIReaction> OAIListReactionsResponse::getReactions() const {
    return m_reactions;
}
void OAIListReactionsResponse::setReactions(const QList<OAIReaction> &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIListReactionsResponse::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIListReactionsResponse::is_reactions_Valid() const{
    return m_reactions_isValid;
}

bool OAIListReactionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReactionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
