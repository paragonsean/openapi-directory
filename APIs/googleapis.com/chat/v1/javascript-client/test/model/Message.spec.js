/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleChatApi);
  }
}(this, function(expect, GoogleChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleChatApi.Message();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Message', function() {
    it('should create an instance of Message', function() {
      // uncomment below and update the code to test Message
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be.a(GoogleChatApi.Message);
    });

    it('should have the property actionResponse (base name: "actionResponse")', function() {
      // uncomment below and update the code to test the property actionResponse
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property annotations (base name: "annotations")', function() {
      // uncomment below and update the code to test the property annotations
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property argumentText (base name: "argumentText")', function() {
      // uncomment below and update the code to test the property argumentText
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property attachedGifs (base name: "attachedGifs")', function() {
      // uncomment below and update the code to test the property attachedGifs
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property attachment (base name: "attachment")', function() {
      // uncomment below and update the code to test the property attachment
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property cards (base name: "cards")', function() {
      // uncomment below and update the code to test the property cards
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property cardsV2 (base name: "cardsV2")', function() {
      // uncomment below and update the code to test the property cardsV2
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property clientAssignedMessageId (base name: "clientAssignedMessageId")', function() {
      // uncomment below and update the code to test the property clientAssignedMessageId
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property deleteTime (base name: "deleteTime")', function() {
      // uncomment below and update the code to test the property deleteTime
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property deletionMetadata (base name: "deletionMetadata")', function() {
      // uncomment below and update the code to test the property deletionMetadata
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property emojiReactionSummaries (base name: "emojiReactionSummaries")', function() {
      // uncomment below and update the code to test the property emojiReactionSummaries
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property fallbackText (base name: "fallbackText")', function() {
      // uncomment below and update the code to test the property fallbackText
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property formattedText (base name: "formattedText")', function() {
      // uncomment below and update the code to test the property formattedText
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateTime (base name: "lastUpdateTime")', function() {
      // uncomment below and update the code to test the property lastUpdateTime
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property matchedUrl (base name: "matchedUrl")', function() {
      // uncomment below and update the code to test the property matchedUrl
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property privateMessageViewer (base name: "privateMessageViewer")', function() {
      // uncomment below and update the code to test the property privateMessageViewer
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property quotedMessageMetadata (base name: "quotedMessageMetadata")', function() {
      // uncomment below and update the code to test the property quotedMessageMetadata
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property sender (base name: "sender")', function() {
      // uncomment below and update the code to test the property sender
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property slashCommand (base name: "slashCommand")', function() {
      // uncomment below and update the code to test the property slashCommand
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property space (base name: "space")', function() {
      // uncomment below and update the code to test the property space
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property thread (base name: "thread")', function() {
      // uncomment below and update the code to test the property thread
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

    it('should have the property threadReply (base name: "threadReply")', function() {
      // uncomment below and update the code to test the property threadReply
      //var instance = new GoogleChatApi.Message();
      //expect(instance).to.be();
    });

  });

}));
