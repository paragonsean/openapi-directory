/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Button from './Button';
import Image from './Image';
import KeyValue from './KeyValue';
import TextParagraph from './TextParagraph';

/**
 * The WidgetMarkup model module.
 * @module model/WidgetMarkup
 * @version v1
 */
class WidgetMarkup {
    /**
     * Constructs a new <code>WidgetMarkup</code>.
     * A widget is a UI element that presents text and images.
     * @alias module:model/WidgetMarkup
     */
    constructor() { 
        
        WidgetMarkup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WidgetMarkup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WidgetMarkup} obj Optional instance to populate.
     * @return {module:model/WidgetMarkup} The populated <code>WidgetMarkup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WidgetMarkup();

            if (data.hasOwnProperty('buttons')) {
                obj['buttons'] = ApiClient.convertToType(data['buttons'], [Button]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('keyValue')) {
                obj['keyValue'] = KeyValue.constructFromObject(data['keyValue']);
            }
            if (data.hasOwnProperty('textParagraph')) {
                obj['textParagraph'] = TextParagraph.constructFromObject(data['textParagraph']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WidgetMarkup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WidgetMarkup</code>.
     */
    static validateJSON(data) {
        if (data['buttons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buttons'])) {
                throw new Error("Expected the field `buttons` to be an array in the JSON data but got " + data['buttons']);
            }
            // validate the optional field `buttons` (array)
            for (const item of data['buttons']) {
                Button.validateJSON(item);
            };
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // validate the optional field `keyValue`
        if (data['keyValue']) { // data not null
          KeyValue.validateJSON(data['keyValue']);
        }
        // validate the optional field `textParagraph`
        if (data['textParagraph']) { // data not null
          TextParagraph.validateJSON(data['textParagraph']);
        }

        return true;
    }


}



/**
 * A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.
 * @member {Array.<module:model/Button>} buttons
 */
WidgetMarkup.prototype['buttons'] = undefined;

/**
 * @member {module:model/Image} image
 */
WidgetMarkup.prototype['image'] = undefined;

/**
 * @member {module:model/KeyValue} keyValue
 */
WidgetMarkup.prototype['keyValue'] = undefined;

/**
 * @member {module:model/TextParagraph} textParagraph
 */
WidgetMarkup.prototype['textParagraph'] = undefined;






export default WidgetMarkup;

