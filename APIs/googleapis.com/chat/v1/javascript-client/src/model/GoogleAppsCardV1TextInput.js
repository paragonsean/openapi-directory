/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1Action from './GoogleAppsCardV1Action';
import GoogleAppsCardV1Suggestions from './GoogleAppsCardV1Suggestions';

/**
 * The GoogleAppsCardV1TextInput model module.
 * @module model/GoogleAppsCardV1TextInput
 * @version v1
 */
class GoogleAppsCardV1TextInput {
    /**
     * Constructs a new <code>GoogleAppsCardV1TextInput</code>.
     * A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
     * @alias module:model/GoogleAppsCardV1TextInput
     */
    constructor() { 
        
        GoogleAppsCardV1TextInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1TextInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1TextInput} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1TextInput} The populated <code>GoogleAppsCardV1TextInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1TextInput();

            if (data.hasOwnProperty('autoCompleteAction')) {
                obj['autoCompleteAction'] = GoogleAppsCardV1Action.constructFromObject(data['autoCompleteAction']);
            }
            if (data.hasOwnProperty('hintText')) {
                obj['hintText'] = ApiClient.convertToType(data['hintText'], 'String');
            }
            if (data.hasOwnProperty('initialSuggestions')) {
                obj['initialSuggestions'] = GoogleAppsCardV1Suggestions.constructFromObject(data['initialSuggestions']);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onChangeAction')) {
                obj['onChangeAction'] = GoogleAppsCardV1Action.constructFromObject(data['onChangeAction']);
            }
            if (data.hasOwnProperty('placeholderText')) {
                obj['placeholderText'] = ApiClient.convertToType(data['placeholderText'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1TextInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1TextInput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoCompleteAction`
        if (data['autoCompleteAction']) { // data not null
          GoogleAppsCardV1Action.validateJSON(data['autoCompleteAction']);
        }
        // ensure the json data is a string
        if (data['hintText'] && !(typeof data['hintText'] === 'string' || data['hintText'] instanceof String)) {
            throw new Error("Expected the field `hintText` to be a primitive type in the JSON string but got " + data['hintText']);
        }
        // validate the optional field `initialSuggestions`
        if (data['initialSuggestions']) { // data not null
          GoogleAppsCardV1Suggestions.validateJSON(data['initialSuggestions']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `onChangeAction`
        if (data['onChangeAction']) { // data not null
          GoogleAppsCardV1Action.validateJSON(data['onChangeAction']);
        }
        // ensure the json data is a string
        if (data['placeholderText'] && !(typeof data['placeholderText'] === 'string' || data['placeholderText'] instanceof String)) {
            throw new Error("Expected the field `placeholderText` to be a primitive type in the JSON string but got " + data['placeholderText']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleAppsCardV1Action} autoCompleteAction
 */
GoogleAppsCardV1TextInput.prototype['autoCompleteAction'] = undefined;

/**
 * Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible. Required if `label` is unspecified. Otherwise, optional.
 * @member {String} hintText
 */
GoogleAppsCardV1TextInput.prototype['hintText'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1Suggestions} initialSuggestions
 */
GoogleAppsCardV1TextInput.prototype['initialSuggestions'] = undefined;

/**
 * The text that appears above the text input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if you are asking someone's name, but specifically need their surname, write `surname` instead of `name`. Required if `hintText` is unspecified. Otherwise, optional.
 * @member {String} label
 */
GoogleAppsCardV1TextInput.prototype['label'] = undefined;

/**
 * The name by which the text input is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
 * @member {String} name
 */
GoogleAppsCardV1TextInput.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1Action} onChangeAction
 */
GoogleAppsCardV1TextInput.prototype['onChangeAction'] = undefined;

/**
 * Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, `Enter a number from 0 to 100`. [Google Chat apps](https://developers.google.com/chat):
 * @member {String} placeholderText
 */
GoogleAppsCardV1TextInput.prototype['placeholderText'] = undefined;

/**
 * How a text input field appears in the user interface. For example, whether the field is single or multi-line.
 * @member {module:model/GoogleAppsCardV1TextInput.TypeEnum} type
 */
GoogleAppsCardV1TextInput.prototype['type'] = undefined;

/**
 * The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
 * @member {String} value
 */
GoogleAppsCardV1TextInput.prototype['value'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsCardV1TextInput['TypeEnum'] = {

    /**
     * value: "SINGLE_LINE"
     * @const
     */
    "SINGLE_LINE": "SINGLE_LINE",

    /**
     * value: "MULTIPLE_LINE"
     * @const
     */
    "MULTIPLE_LINE": "MULTIPLE_LINE"
};



export default GoogleAppsCardV1TextInput;

