/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Inputs from './Inputs';
import TimeZone from './TimeZone';

/**
 * The CommonEventObject model module.
 * @module model/CommonEventObject
 * @version v1
 */
class CommonEventObject {
    /**
     * Constructs a new <code>CommonEventObject</code>.
     * Represents information about the user&#39;s client, such as locale, host app, and platform. For Chat apps, &#x60;CommonEventObject&#x60; includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
     * @alias module:model/CommonEventObject
     */
    constructor() { 
        
        CommonEventObject.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommonEventObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommonEventObject} obj Optional instance to populate.
     * @return {module:model/CommonEventObject} The populated <code>CommonEventObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommonEventObject();

            if (data.hasOwnProperty('formInputs')) {
                obj['formInputs'] = ApiClient.convertToType(data['formInputs'], {'String': Inputs});
            }
            if (data.hasOwnProperty('hostApp')) {
                obj['hostApp'] = ApiClient.convertToType(data['hostApp'], 'String');
            }
            if (data.hasOwnProperty('invokedFunction')) {
                obj['invokedFunction'] = ApiClient.convertToType(data['invokedFunction'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = TimeZone.constructFromObject(data['timeZone']);
            }
            if (data.hasOwnProperty('userLocale')) {
                obj['userLocale'] = ApiClient.convertToType(data['userLocale'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommonEventObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommonEventObject</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostApp'] && !(typeof data['hostApp'] === 'string' || data['hostApp'] instanceof String)) {
            throw new Error("Expected the field `hostApp` to be a primitive type in the JSON string but got " + data['hostApp']);
        }
        // ensure the json data is a string
        if (data['invokedFunction'] && !(typeof data['invokedFunction'] === 'string' || data['invokedFunction'] instanceof String)) {
            throw new Error("Expected the field `invokedFunction` to be a primitive type in the JSON string but got " + data['invokedFunction']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // validate the optional field `timeZone`
        if (data['timeZone']) { // data not null
          TimeZone.validateJSON(data['timeZone']);
        }
        // ensure the json data is a string
        if (data['userLocale'] && !(typeof data['userLocale'] === 'string' || data['userLocale'] instanceof String)) {
            throw new Error("Expected the field `userLocale` to be a primitive type in the JSON string but got " + data['userLocale']);
        }

        return true;
    }


}



/**
 * A map containing the values that a user inputs in a widget from a card or dialog. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. For details, see [Process information inputted by users](https://developers.google.com/chat/ui/read-form-data).
 * @member {Object.<String, module:model/Inputs>} formInputs
 */
CommonEventObject.prototype['formInputs'] = undefined;

/**
 * The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.
 * @member {module:model/CommonEventObject.HostAppEnum} hostApp
 */
CommonEventObject.prototype['hostApp'] = undefined;

/**
 * Name of the invoked function associated with the widget. Only set for Chat apps.
 * @member {String} invokedFunction
 */
CommonEventObject.prototype['invokedFunction'] = undefined;

/**
 * Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.
 * @member {Object.<String, String>} parameters
 */
CommonEventObject.prototype['parameters'] = undefined;

/**
 * The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
 * @member {module:model/CommonEventObject.PlatformEnum} platform
 */
CommonEventObject.prototype['platform'] = undefined;

/**
 * @member {module:model/TimeZone} timeZone
 */
CommonEventObject.prototype['timeZone'] = undefined;

/**
 * The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\".
 * @member {String} userLocale
 */
CommonEventObject.prototype['userLocale'] = undefined;





/**
 * Allowed values for the <code>hostApp</code> property.
 * @enum {String}
 * @readonly
 */
CommonEventObject['HostAppEnum'] = {

    /**
     * value: "UNSPECIFIED_HOST_APP"
     * @const
     */
    "UNSPECIFIED_HOST_APP": "UNSPECIFIED_HOST_APP",

    /**
     * value: "GMAIL"
     * @const
     */
    "GMAIL": "GMAIL",

    /**
     * value: "CALENDAR"
     * @const
     */
    "CALENDAR": "CALENDAR",

    /**
     * value: "DRIVE"
     * @const
     */
    "DRIVE": "DRIVE",

    /**
     * value: "DEMO"
     * @const
     */
    "DEMO": "DEMO",

    /**
     * value: "DOCS"
     * @const
     */
    "DOCS": "DOCS",

    /**
     * value: "MEET"
     * @const
     */
    "MEET": "MEET",

    /**
     * value: "SHEETS"
     * @const
     */
    "SHEETS": "SHEETS",

    /**
     * value: "SLIDES"
     * @const
     */
    "SLIDES": "SLIDES",

    /**
     * value: "DRAWINGS"
     * @const
     */
    "DRAWINGS": "DRAWINGS",

    /**
     * value: "CHAT"
     * @const
     */
    "CHAT": "CHAT",

    /**
     * value: "CHAT_IN_GMAIL"
     * @const
     */
    "CHAT_IN_GMAIL": "CHAT_IN_GMAIL"
};


/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
CommonEventObject['PlatformEnum'] = {

    /**
     * value: "UNKNOWN_PLATFORM"
     * @const
     */
    "UNKNOWN_PLATFORM": "UNKNOWN_PLATFORM",

    /**
     * value: "WEB"
     * @const
     */
    "WEB": "WEB",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "ANDROID"
     * @const
     */
    "ANDROID": "ANDROID"
};



export default CommonEventObject;

