/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1Action from './GoogleAppsCardV1Action';
import GoogleAppsCardV1PlatformDataSource from './GoogleAppsCardV1PlatformDataSource';
import GoogleAppsCardV1SelectionItem from './GoogleAppsCardV1SelectionItem';

/**
 * The GoogleAppsCardV1SelectionInput model module.
 * @module model/GoogleAppsCardV1SelectionInput
 * @version v1
 */
class GoogleAppsCardV1SelectionInput {
    /**
     * Constructs a new <code>GoogleAppsCardV1SelectionInput</code>.
     * A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
     * @alias module:model/GoogleAppsCardV1SelectionInput
     */
    constructor() { 
        
        GoogleAppsCardV1SelectionInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1SelectionInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1SelectionInput} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1SelectionInput} The populated <code>GoogleAppsCardV1SelectionInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1SelectionInput();

            if (data.hasOwnProperty('externalDataSource')) {
                obj['externalDataSource'] = GoogleAppsCardV1Action.constructFromObject(data['externalDataSource']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [GoogleAppsCardV1SelectionItem]);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('multiSelectMaxSelectedItems')) {
                obj['multiSelectMaxSelectedItems'] = ApiClient.convertToType(data['multiSelectMaxSelectedItems'], 'Number');
            }
            if (data.hasOwnProperty('multiSelectMinQueryLength')) {
                obj['multiSelectMinQueryLength'] = ApiClient.convertToType(data['multiSelectMinQueryLength'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onChangeAction')) {
                obj['onChangeAction'] = GoogleAppsCardV1Action.constructFromObject(data['onChangeAction']);
            }
            if (data.hasOwnProperty('platformDataSource')) {
                obj['platformDataSource'] = GoogleAppsCardV1PlatformDataSource.constructFromObject(data['platformDataSource']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1SelectionInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1SelectionInput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `externalDataSource`
        if (data['externalDataSource']) { // data not null
          GoogleAppsCardV1Action.validateJSON(data['externalDataSource']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                GoogleAppsCardV1SelectionItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `onChangeAction`
        if (data['onChangeAction']) { // data not null
          GoogleAppsCardV1Action.validateJSON(data['onChangeAction']);
        }
        // validate the optional field `platformDataSource`
        if (data['platformDataSource']) { // data not null
          GoogleAppsCardV1PlatformDataSource.validateJSON(data['platformDataSource']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleAppsCardV1Action} externalDataSource
 */
GoogleAppsCardV1SelectionInput.prototype['externalDataSource'] = undefined;

/**
 * An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.
 * @member {Array.<module:model/GoogleAppsCardV1SelectionItem>} items
 */
GoogleAppsCardV1SelectionInput.prototype['items'] = undefined;

/**
 * The text that appears above the selection input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be \"Urgency\" or \"Select urgency\".
 * @member {String} label
 */
GoogleAppsCardV1SelectionInput.prototype['label'] = undefined;

/**
 * For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.
 * @member {Number} multiSelectMaxSelectedItems
 */
GoogleAppsCardV1SelectionInput.prototype['multiSelectMaxSelectedItems'] = undefined;

/**
 * For multiselect menus, the number of text characters that a user inputs before the Chat app queries autocomplete and displays suggested items in the menu. If unspecified, defaults to 0 characters for static data sources and 3 characters for external data sources.
 * @member {Number} multiSelectMinQueryLength
 */
GoogleAppsCardV1SelectionInput.prototype['multiSelectMinQueryLength'] = undefined;

/**
 * The name that identifies the selection input in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
 * @member {String} name
 */
GoogleAppsCardV1SelectionInput.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1Action} onChangeAction
 */
GoogleAppsCardV1SelectionInput.prototype['onChangeAction'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1PlatformDataSource} platformDataSource
 */
GoogleAppsCardV1SelectionInput.prototype['platformDataSource'] = undefined;

/**
 * The type of items that are displayed to users in a `SelectionInput` widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.
 * @member {module:model/GoogleAppsCardV1SelectionInput.TypeEnum} type
 */
GoogleAppsCardV1SelectionInput.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsCardV1SelectionInput['TypeEnum'] = {

    /**
     * value: "CHECK_BOX"
     * @const
     */
    "CHECK_BOX": "CHECK_BOX",

    /**
     * value: "RADIO_BUTTON"
     * @const
     */
    "RADIO_BUTTON": "RADIO_BUTTON",

    /**
     * value: "SWITCH"
     * @const
     */
    "SWITCH": "SWITCH",

    /**
     * value: "DROPDOWN"
     * @const
     */
    "DROPDOWN": "DROPDOWN",

    /**
     * value: "MULTI_SELECT"
     * @const
     */
    "MULTI_SELECT": "MULTI_SELECT"
};



export default GoogleAppsCardV1SelectionInput;

