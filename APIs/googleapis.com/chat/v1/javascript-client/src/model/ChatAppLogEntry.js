/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The ChatAppLogEntry model module.
 * @module model/ChatAppLogEntry
 * @version v1
 */
class ChatAppLogEntry {
    /**
     * Constructs a new <code>ChatAppLogEntry</code>.
     * JSON payload of error messages. If the Cloud Logging API is enabled, these error messages are logged to [Google Cloud Logging](https://cloud.google.com/logging/docs).
     * @alias module:model/ChatAppLogEntry
     */
    constructor() { 
        
        ChatAppLogEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChatAppLogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatAppLogEntry} obj Optional instance to populate.
     * @return {module:model/ChatAppLogEntry} The populated <code>ChatAppLogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatAppLogEntry();

            if (data.hasOwnProperty('deployment')) {
                obj['deployment'] = ApiClient.convertToType(data['deployment'], 'String');
            }
            if (data.hasOwnProperty('deploymentFunction')) {
                obj['deploymentFunction'] = ApiClient.convertToType(data['deploymentFunction'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Status.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatAppLogEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatAppLogEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deployment'] && !(typeof data['deployment'] === 'string' || data['deployment'] instanceof String)) {
            throw new Error("Expected the field `deployment` to be a primitive type in the JSON string but got " + data['deployment']);
        }
        // ensure the json data is a string
        if (data['deploymentFunction'] && !(typeof data['deploymentFunction'] === 'string' || data['deploymentFunction'] instanceof String)) {
            throw new Error("Expected the field `deploymentFunction` to be a primitive type in the JSON string but got " + data['deploymentFunction']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Status.validateJSON(data['error']);
        }

        return true;
    }


}



/**
 * The deployment that caused the error. For Chat apps built in Apps Script, this is the deployment ID defined by Apps Script.
 * @member {String} deployment
 */
ChatAppLogEntry.prototype['deployment'] = undefined;

/**
 * The unencrypted `callback_method` name that was running when the error was encountered.
 * @member {String} deploymentFunction
 */
ChatAppLogEntry.prototype['deploymentFunction'] = undefined;

/**
 * @member {module:model/Status} error
 */
ChatAppLogEntry.prototype['error'] = undefined;






export default ChatAppLogEntry;

