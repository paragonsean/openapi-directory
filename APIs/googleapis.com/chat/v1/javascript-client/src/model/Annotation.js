/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SlashCommandMetadata from './SlashCommandMetadata';
import UserMentionMetadata from './UserMentionMetadata';

/**
 * The Annotation model module.
 * @module model/Annotation
 * @version v1
 */
class Annotation {
    /**
     * Constructs a new <code>Annotation</code>.
     * Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: &#x60;&#x60;&#x60; Hello @FooBot how are you!\&quot; &#x60;&#x60;&#x60; The corresponding annotations metadata: &#x60;&#x60;&#x60; \&quot;annotations\&quot;:[{ \&quot;type\&quot;:\&quot;USER_MENTION\&quot;, \&quot;startIndex\&quot;:6, \&quot;length\&quot;:7, \&quot;userMention\&quot;: { \&quot;user\&quot;: { \&quot;name\&quot;:\&quot;users/{user}\&quot;, \&quot;displayName\&quot;:\&quot;FooBot\&quot;, \&quot;avatarUrl\&quot;:\&quot;https://goo.gl/aeDtrS\&quot;, \&quot;type\&quot;:\&quot;BOT\&quot; }, \&quot;type\&quot;:\&quot;MENTION\&quot; } }] &#x60;&#x60;&#x60;
     * @alias module:model/Annotation
     */
    constructor() { 
        
        Annotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Annotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Annotation} obj Optional instance to populate.
     * @return {module:model/Annotation} The populated <code>Annotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Annotation();

            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('slashCommand')) {
                obj['slashCommand'] = SlashCommandMetadata.constructFromObject(data['slashCommand']);
            }
            if (data.hasOwnProperty('startIndex')) {
                obj['startIndex'] = ApiClient.convertToType(data['startIndex'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userMention')) {
                obj['userMention'] = UserMentionMetadata.constructFromObject(data['userMention']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Annotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Annotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `slashCommand`
        if (data['slashCommand']) { // data not null
          SlashCommandMetadata.validateJSON(data['slashCommand']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `userMention`
        if (data['userMention']) { // data not null
          UserMentionMetadata.validateJSON(data['userMention']);
        }

        return true;
    }


}



/**
 * Length of the substring in the plain-text message body this annotation corresponds to.
 * @member {Number} length
 */
Annotation.prototype['length'] = undefined;

/**
 * @member {module:model/SlashCommandMetadata} slashCommand
 */
Annotation.prototype['slashCommand'] = undefined;

/**
 * Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.
 * @member {Number} startIndex
 */
Annotation.prototype['startIndex'] = undefined;

/**
 * The type of this annotation.
 * @member {module:model/Annotation.TypeEnum} type
 */
Annotation.prototype['type'] = undefined;

/**
 * @member {module:model/UserMentionMetadata} userMention
 */
Annotation.prototype['userMention'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Annotation['TypeEnum'] = {

    /**
     * value: "ANNOTATION_TYPE_UNSPECIFIED"
     * @const
     */
    "ANNOTATION_TYPE_UNSPECIFIED": "ANNOTATION_TYPE_UNSPECIFIED",

    /**
     * value: "USER_MENTION"
     * @const
     */
    "USER_MENTION": "USER_MENTION",

    /**
     * value: "SLASH_COMMAND"
     * @const
     */
    "SLASH_COMMAND": "SLASH_COMMAND"
};



export default Annotation;

