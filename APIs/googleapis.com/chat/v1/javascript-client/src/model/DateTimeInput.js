/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DateTimeInput model module.
 * @module model/DateTimeInput
 * @version v1
 */
class DateTimeInput {
    /**
     * Constructs a new <code>DateTimeInput</code>.
     * Date and time input values.
     * @alias module:model/DateTimeInput
     */
    constructor() { 
        
        DateTimeInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DateTimeInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DateTimeInput} obj Optional instance to populate.
     * @return {module:model/DateTimeInput} The populated <code>DateTimeInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DateTimeInput();

            if (data.hasOwnProperty('hasDate')) {
                obj['hasDate'] = ApiClient.convertToType(data['hasDate'], 'Boolean');
            }
            if (data.hasOwnProperty('hasTime')) {
                obj['hasTime'] = ApiClient.convertToType(data['hasTime'], 'Boolean');
            }
            if (data.hasOwnProperty('msSinceEpoch')) {
                obj['msSinceEpoch'] = ApiClient.convertToType(data['msSinceEpoch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DateTimeInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DateTimeInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['msSinceEpoch'] && !(typeof data['msSinceEpoch'] === 'string' || data['msSinceEpoch'] instanceof String)) {
            throw new Error("Expected the field `msSinceEpoch` to be a primitive type in the JSON string but got " + data['msSinceEpoch']);
        }

        return true;
    }


}



/**
 * Whether the `datetime` input includes a calendar date.
 * @member {Boolean} hasDate
 */
DateTimeInput.prototype['hasDate'] = undefined;

/**
 * Whether the `datetime` input includes a timestamp.
 * @member {Boolean} hasTime
 */
DateTimeInput.prototype['hasTime'] = undefined;

/**
 * Time since epoch time, in milliseconds.
 * @member {String} msSinceEpoch
 */
DateTimeInput.prototype['msSinceEpoch'] = undefined;






export default DateTimeInput;

