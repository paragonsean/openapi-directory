/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomEmoji from './CustomEmoji';

/**
 * The Emoji model module.
 * @module model/Emoji
 * @version v1
 */
class Emoji {
    /**
     * Constructs a new <code>Emoji</code>.
     * An emoji that is used as a reaction to a message.
     * @alias module:model/Emoji
     */
    constructor() { 
        
        Emoji.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Emoji</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Emoji} obj Optional instance to populate.
     * @return {module:model/Emoji} The populated <code>Emoji</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Emoji();

            if (data.hasOwnProperty('customEmoji')) {
                obj['customEmoji'] = CustomEmoji.constructFromObject(data['customEmoji']);
            }
            if (data.hasOwnProperty('unicode')) {
                obj['unicode'] = ApiClient.convertToType(data['unicode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Emoji</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Emoji</code>.
     */
    static validateJSON(data) {
        // validate the optional field `customEmoji`
        if (data['customEmoji']) { // data not null
          CustomEmoji.validateJSON(data['customEmoji']);
        }
        // ensure the json data is a string
        if (data['unicode'] && !(typeof data['unicode'] === 'string' || data['unicode'] instanceof String)) {
            throw new Error("Expected the field `unicode` to be a primitive type in the JSON string but got " + data['unicode']);
        }

        return true;
    }


}



/**
 * @member {module:model/CustomEmoji} customEmoji
 */
Emoji.prototype['customEmoji'] = undefined;

/**
 * A basic emoji represented by a unicode string.
 * @member {String} unicode
 */
Emoji.prototype['unicode'] = undefined;






export default Emoji;

