/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';
import User from './User';

/**
 * The Membership model module.
 * @module model/Membership
 * @version v1
 */
class Membership {
    /**
     * Constructs a new <code>Membership</code>.
     * Represents a membership relation in Google Chat, such as whether a user or Chat app is invited to, part of, or absent from a space.
     * @alias module:model/Membership
     */
    constructor() { 
        
        Membership.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Membership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Membership} obj Optional instance to populate.
     * @return {module:model/Membership} The populated <code>Membership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Membership();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('groupMember')) {
                obj['groupMember'] = Group.constructFromObject(data['groupMember']);
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = User.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Membership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Membership</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // validate the optional field `groupMember`
        if (data['groupMember']) { // data not null
          Group.validateJSON(data['groupMember']);
        }
        // validate the optional field `member`
        if (data['member']) { // data not null
          User.validateJSON(data['member']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.
 * @member {String} createTime
 */
Membership.prototype['createTime'] = undefined;

/**
 * Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.
 * @member {String} deleteTime
 */
Membership.prototype['deleteTime'] = undefined;

/**
 * @member {module:model/Group} groupMember
 */
Membership.prototype['groupMember'] = undefined;

/**
 * @member {module:model/User} member
 */
Membership.prototype['member'] = undefined;

/**
 * Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`
 * @member {String} name
 */
Membership.prototype['name'] = undefined;

/**
 * Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`.
 * @member {module:model/Membership.RoleEnum} role
 */
Membership.prototype['role'] = undefined;

/**
 * Output only. State of the membership.
 * @member {module:model/Membership.StateEnum} state
 */
Membership.prototype['state'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
Membership['RoleEnum'] = {

    /**
     * value: "MEMBERSHIP_ROLE_UNSPECIFIED"
     * @const
     */
    "MEMBERSHIP_ROLE_UNSPECIFIED": "MEMBERSHIP_ROLE_UNSPECIFIED",

    /**
     * value: "ROLE_MEMBER"
     * @const
     */
    "ROLE_MEMBER": "ROLE_MEMBER",

    /**
     * value: "ROLE_MANAGER"
     * @const
     */
    "ROLE_MANAGER": "ROLE_MANAGER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Membership['StateEnum'] = {

    /**
     * value: "MEMBERSHIP_STATE_UNSPECIFIED"
     * @const
     */
    "MEMBERSHIP_STATE_UNSPECIFIED": "MEMBERSHIP_STATE_UNSPECIFIED",

    /**
     * value: "JOINED"
     * @const
     */
    "JOINED": "JOINED",

    /**
     * value: "INVITED"
     * @const
     */
    "INVITED": "INVITED",

    /**
     * value: "NOT_A_MEMBER"
     * @const
     */
    "NOT_A_MEMBER": "NOT_A_MEMBER"
};



export default Membership;

