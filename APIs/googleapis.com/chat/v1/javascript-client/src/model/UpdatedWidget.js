/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SelectionItems from './SelectionItems';

/**
 * The UpdatedWidget model module.
 * @module model/UpdatedWidget
 * @version v1
 */
class UpdatedWidget {
    /**
     * Constructs a new <code>UpdatedWidget</code>.
     * The response of the updated widget. Used to provide autocomplete options for a widget.
     * @alias module:model/UpdatedWidget
     */
    constructor() { 
        
        UpdatedWidget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdatedWidget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatedWidget} obj Optional instance to populate.
     * @return {module:model/UpdatedWidget} The populated <code>UpdatedWidget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatedWidget();

            if (data.hasOwnProperty('suggestions')) {
                obj['suggestions'] = SelectionItems.constructFromObject(data['suggestions']);
            }
            if (data.hasOwnProperty('widget')) {
                obj['widget'] = ApiClient.convertToType(data['widget'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatedWidget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatedWidget</code>.
     */
    static validateJSON(data) {
        // validate the optional field `suggestions`
        if (data['suggestions']) { // data not null
          SelectionItems.validateJSON(data['suggestions']);
        }
        // ensure the json data is a string
        if (data['widget'] && !(typeof data['widget'] === 'string' || data['widget'] instanceof String)) {
            throw new Error("Expected the field `widget` to be a primitive type in the JSON string but got " + data['widget']);
        }

        return true;
    }


}



/**
 * @member {module:model/SelectionItems} suggestions
 */
UpdatedWidget.prototype['suggestions'] = undefined;

/**
 * The ID of the updated widget. The ID must match the one for the widget that triggered the update request.
 * @member {String} widget
 */
UpdatedWidget.prototype['widget'] = undefined;






export default UpdatedWidget;

