/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachmentDataRef from './AttachmentDataRef';
import DriveDataRef from './DriveDataRef';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version v1
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * An attachment in Google Chat.
     * @alias module:model/Attachment
     */
    constructor() { 
        
        Attachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('attachmentDataRef')) {
                obj['attachmentDataRef'] = AttachmentDataRef.constructFromObject(data['attachmentDataRef']);
            }
            if (data.hasOwnProperty('contentName')) {
                obj['contentName'] = ApiClient.convertToType(data['contentName'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('downloadUri')) {
                obj['downloadUri'] = ApiClient.convertToType(data['downloadUri'], 'String');
            }
            if (data.hasOwnProperty('driveDataRef')) {
                obj['driveDataRef'] = DriveDataRef.constructFromObject(data['driveDataRef']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('thumbnailUri')) {
                obj['thumbnailUri'] = ApiClient.convertToType(data['thumbnailUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attachmentDataRef`
        if (data['attachmentDataRef']) { // data not null
          AttachmentDataRef.validateJSON(data['attachmentDataRef']);
        }
        // ensure the json data is a string
        if (data['contentName'] && !(typeof data['contentName'] === 'string' || data['contentName'] instanceof String)) {
            throw new Error("Expected the field `contentName` to be a primitive type in the JSON string but got " + data['contentName']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['downloadUri'] && !(typeof data['downloadUri'] === 'string' || data['downloadUri'] instanceof String)) {
            throw new Error("Expected the field `downloadUri` to be a primitive type in the JSON string but got " + data['downloadUri']);
        }
        // validate the optional field `driveDataRef`
        if (data['driveDataRef']) { // data not null
          DriveDataRef.validateJSON(data['driveDataRef']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['thumbnailUri'] && !(typeof data['thumbnailUri'] === 'string' || data['thumbnailUri'] instanceof String)) {
            throw new Error("Expected the field `thumbnailUri` to be a primitive type in the JSON string but got " + data['thumbnailUri']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttachmentDataRef} attachmentDataRef
 */
Attachment.prototype['attachmentDataRef'] = undefined;

/**
 * Output only. The original file name for the content, not the full path.
 * @member {String} contentName
 */
Attachment.prototype['contentName'] = undefined;

/**
 * Output only. The content type (MIME type) of the file.
 * @member {String} contentType
 */
Attachment.prototype['contentType'] = undefined;

/**
 * Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.
 * @member {String} downloadUri
 */
Attachment.prototype['downloadUri'] = undefined;

/**
 * @member {module:model/DriveDataRef} driveDataRef
 */
Attachment.prototype['driveDataRef'] = undefined;

/**
 * Resource name of the attachment, in the form `spaces/_*_/messages/_*_/attachments/_*`.
 * @member {String} name
 */
Attachment.prototype['name'] = undefined;

/**
 * Output only. The source of the attachment.
 * @member {module:model/Attachment.SourceEnum} source
 */
Attachment.prototype['source'] = undefined;

/**
 * Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.
 * @member {String} thumbnailUri
 */
Attachment.prototype['thumbnailUri'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
Attachment['SourceEnum'] = {

    /**
     * value: "SOURCE_UNSPECIFIED"
     * @const
     */
    "SOURCE_UNSPECIFIED": "SOURCE_UNSPECIFIED",

    /**
     * value: "DRIVE_FILE"
     * @const
     */
    "DRIVE_FILE": "DRIVE_FILE",

    /**
     * value: "UPLOADED_CONTENT"
     * @const
     */
    "UPLOADED_CONTENT": "UPLOADED_CONTENT"
};



export default Attachment;

