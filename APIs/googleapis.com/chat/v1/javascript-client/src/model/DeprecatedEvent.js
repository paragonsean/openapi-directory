/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonEventObject from './CommonEventObject';
import FormAction from './FormAction';
import Message from './Message';
import Space from './Space';
import User from './User';

/**
 * The DeprecatedEvent model module.
 * @module model/DeprecatedEvent
 * @version v1
 */
class DeprecatedEvent {
    /**
     * Constructs a new <code>DeprecatedEvent</code>.
     * A Google Chat app interaction event. To learn about interaction events, see [Receive and respond to interactions with your Google Chat app](https://developers.google.com/chat/api/guides/message-formats). To learn about event types and for example event payloads, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
     * @alias module:model/DeprecatedEvent
     */
    constructor() { 
        
        DeprecatedEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeprecatedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeprecatedEvent} obj Optional instance to populate.
     * @return {module:model/DeprecatedEvent} The populated <code>DeprecatedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeprecatedEvent();

            if (data.hasOwnProperty('action')) {
                obj['action'] = FormAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('common')) {
                obj['common'] = CommonEventObject.constructFromObject(data['common']);
            }
            if (data.hasOwnProperty('configCompleteRedirectUrl')) {
                obj['configCompleteRedirectUrl'] = ApiClient.convertToType(data['configCompleteRedirectUrl'], 'String');
            }
            if (data.hasOwnProperty('dialogEventType')) {
                obj['dialogEventType'] = ApiClient.convertToType(data['dialogEventType'], 'String');
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'String');
            }
            if (data.hasOwnProperty('isDialogEvent')) {
                obj['isDialogEvent'] = ApiClient.convertToType(data['isDialogEvent'], 'Boolean');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = Message.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('space')) {
                obj['space'] = Space.constructFromObject(data['space']);
            }
            if (data.hasOwnProperty('threadKey')) {
                obj['threadKey'] = ApiClient.convertToType(data['threadKey'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeprecatedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeprecatedEvent</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          FormAction.validateJSON(data['action']);
        }
        // validate the optional field `common`
        if (data['common']) { // data not null
          CommonEventObject.validateJSON(data['common']);
        }
        // ensure the json data is a string
        if (data['configCompleteRedirectUrl'] && !(typeof data['configCompleteRedirectUrl'] === 'string' || data['configCompleteRedirectUrl'] instanceof String)) {
            throw new Error("Expected the field `configCompleteRedirectUrl` to be a primitive type in the JSON string but got " + data['configCompleteRedirectUrl']);
        }
        // ensure the json data is a string
        if (data['dialogEventType'] && !(typeof data['dialogEventType'] === 'string' || data['dialogEventType'] instanceof String)) {
            throw new Error("Expected the field `dialogEventType` to be a primitive type in the JSON string but got " + data['dialogEventType']);
        }
        // ensure the json data is a string
        if (data['eventTime'] && !(typeof data['eventTime'] === 'string' || data['eventTime'] instanceof String)) {
            throw new Error("Expected the field `eventTime` to be a primitive type in the JSON string but got " + data['eventTime']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          Message.validateJSON(data['message']);
        }
        // validate the optional field `space`
        if (data['space']) { // data not null
          Space.validateJSON(data['space']);
        }
        // ensure the json data is a string
        if (data['threadKey'] && !(typeof data['threadKey'] === 'string' || data['threadKey'] instanceof String)) {
            throw new Error("Expected the field `threadKey` to be a primitive type in the JSON string but got " + data['threadKey']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/FormAction} action
 */
DeprecatedEvent.prototype['action'] = undefined;

/**
 * @member {module:model/CommonEventObject} common
 */
DeprecatedEvent.prototype['common'] = undefined;

/**
 * The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).
 * @member {String} configCompleteRedirectUrl
 */
DeprecatedEvent.prototype['configCompleteRedirectUrl'] = undefined;

/**
 * The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.
 * @member {module:model/DeprecatedEvent.DialogEventTypeEnum} dialogEventType
 */
DeprecatedEvent.prototype['dialogEventType'] = undefined;

/**
 * The timestamp indicating when the interaction event occurred.
 * @member {String} eventTime
 */
DeprecatedEvent.prototype['eventTime'] = undefined;

/**
 * For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).
 * @member {Boolean} isDialogEvent
 */
DeprecatedEvent.prototype['isDialogEvent'] = undefined;

/**
 * @member {module:model/Message} message
 */
DeprecatedEvent.prototype['message'] = undefined;

/**
 * @member {module:model/Space} space
 */
DeprecatedEvent.prototype['space'] = undefined;

/**
 * The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.
 * @member {String} threadKey
 */
DeprecatedEvent.prototype['threadKey'] = undefined;

/**
 * A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
 * @member {String} token
 */
DeprecatedEvent.prototype['token'] = undefined;

/**
 * The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
 * @member {module:model/DeprecatedEvent.TypeEnum} type
 */
DeprecatedEvent.prototype['type'] = undefined;

/**
 * @member {module:model/User} user
 */
DeprecatedEvent.prototype['user'] = undefined;





/**
 * Allowed values for the <code>dialogEventType</code> property.
 * @enum {String}
 * @readonly
 */
DeprecatedEvent['DialogEventTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "REQUEST_DIALOG"
     * @const
     */
    "REQUEST_DIALOG": "REQUEST_DIALOG",

    /**
     * value: "SUBMIT_DIALOG"
     * @const
     */
    "SUBMIT_DIALOG": "SUBMIT_DIALOG",

    /**
     * value: "CANCEL_DIALOG"
     * @const
     */
    "CANCEL_DIALOG": "CANCEL_DIALOG"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DeprecatedEvent['TypeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "MESSAGE"
     * @const
     */
    "MESSAGE": "MESSAGE",

    /**
     * value: "ADDED_TO_SPACE"
     * @const
     */
    "ADDED_TO_SPACE": "ADDED_TO_SPACE",

    /**
     * value: "REMOVED_FROM_SPACE"
     * @const
     */
    "REMOVED_FROM_SPACE": "REMOVED_FROM_SPACE",

    /**
     * value: "CARD_CLICKED"
     * @const
     */
    "CARD_CLICKED": "CARD_CLICKED",

    /**
     * value: "WIDGET_UPDATED"
     * @const
     */
    "WIDGET_UPDATED": "WIDGET_UPDATED"
};



export default DeprecatedEvent;

