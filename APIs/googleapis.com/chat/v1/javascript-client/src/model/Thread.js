/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Thread model module.
 * @module model/Thread
 * @version v1
 */
class Thread {
    /**
     * Constructs a new <code>Thread</code>.
     * A thread in a Google Chat space. For example usage, see [Start or reply to a message thread](https://developers.google.com/chat/api/guides/v1/messages/create#create-message-thread). If you specify a thread when creating a message, you can set the [&#x60;messageReplyOption&#x60;](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption) field to determine what happens if no matching thread is found.
     * @alias module:model/Thread
     */
    constructor() { 
        
        Thread.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Thread</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Thread} obj Optional instance to populate.
     * @return {module:model/Thread} The populated <code>Thread</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Thread();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('threadKey')) {
                obj['threadKey'] = ApiClient.convertToType(data['threadKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Thread</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Thread</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['threadKey'] && !(typeof data['threadKey'] === 'string' || data['threadKey'] instanceof String)) {
            throw new Error("Expected the field `threadKey` to be a primitive type in the JSON string but got " + data['threadKey']);
        }

        return true;
    }


}



/**
 * Output only. Resource name of the thread. Example: `spaces/{space}/threads/{thread}`
 * @member {String} name
 */
Thread.prototype['name'] = undefined;

/**
 * Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters. This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread `name` field instead.
 * @member {String} threadKey
 */
Thread.prototype['threadKey'] = undefined;






export default Thread;

