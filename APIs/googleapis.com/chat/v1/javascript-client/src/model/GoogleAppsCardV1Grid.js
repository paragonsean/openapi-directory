/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1BorderStyle from './GoogleAppsCardV1BorderStyle';
import GoogleAppsCardV1GridItem from './GoogleAppsCardV1GridItem';
import GoogleAppsCardV1OnClick from './GoogleAppsCardV1OnClick';

/**
 * The GoogleAppsCardV1Grid model module.
 * @module model/GoogleAppsCardV1Grid
 * @version v1
 */
class GoogleAppsCardV1Grid {
    /**
     * Constructs a new <code>GoogleAppsCardV1Grid</code>.
     * Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use &#x60;Columns&#x60;. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a 2 column grid with a single item: &#x60;&#x60;&#x60; \&quot;grid\&quot;: { \&quot;title\&quot;: \&quot;A fine collection of items\&quot;, \&quot;columnCount\&quot;: 2, \&quot;borderStyle\&quot;: { \&quot;type\&quot;: \&quot;STROKE\&quot;, \&quot;cornerRadius\&quot;: 4 }, \&quot;items\&quot;: [ { \&quot;image\&quot;: { \&quot;imageUri\&quot;: \&quot;https://www.example.com/image.png\&quot;, \&quot;cropStyle\&quot;: { \&quot;type\&quot;: \&quot;SQUARE\&quot; }, \&quot;borderStyle\&quot;: { \&quot;type\&quot;: \&quot;STROKE\&quot; } }, \&quot;title\&quot;: \&quot;An item\&quot;, \&quot;textAlignment\&quot;: \&quot;CENTER\&quot; } ], \&quot;onClick\&quot;: { \&quot;openLink\&quot;: { \&quot;url\&quot;: \&quot;https://www.example.com\&quot; } } } &#x60;&#x60;&#x60;
     * @alias module:model/GoogleAppsCardV1Grid
     */
    constructor() { 
        
        GoogleAppsCardV1Grid.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1Grid</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1Grid} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1Grid} The populated <code>GoogleAppsCardV1Grid</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1Grid();

            if (data.hasOwnProperty('borderStyle')) {
                obj['borderStyle'] = GoogleAppsCardV1BorderStyle.constructFromObject(data['borderStyle']);
            }
            if (data.hasOwnProperty('columnCount')) {
                obj['columnCount'] = ApiClient.convertToType(data['columnCount'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [GoogleAppsCardV1GridItem]);
            }
            if (data.hasOwnProperty('onClick')) {
                obj['onClick'] = GoogleAppsCardV1OnClick.constructFromObject(data['onClick']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1Grid</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1Grid</code>.
     */
    static validateJSON(data) {
        // validate the optional field `borderStyle`
        if (data['borderStyle']) { // data not null
          GoogleAppsCardV1BorderStyle.validateJSON(data['borderStyle']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                GoogleAppsCardV1GridItem.validateJSON(item);
            };
        }
        // validate the optional field `onClick`
        if (data['onClick']) { // data not null
          GoogleAppsCardV1OnClick.validateJSON(data['onClick']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleAppsCardV1BorderStyle} borderStyle
 */
GoogleAppsCardV1Grid.prototype['borderStyle'] = undefined;

/**
 * The number of columns to display in the grid. A default value is used if this field isn't specified, and that default value is different depending on where the grid is shown (dialog versus companion).
 * @member {Number} columnCount
 */
GoogleAppsCardV1Grid.prototype['columnCount'] = undefined;

/**
 * The items to display in the grid.
 * @member {Array.<module:model/GoogleAppsCardV1GridItem>} items
 */
GoogleAppsCardV1Grid.prototype['items'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1OnClick} onClick
 */
GoogleAppsCardV1Grid.prototype['onClick'] = undefined;

/**
 * The text that displays in the grid header.
 * @member {String} title
 */
GoogleAppsCardV1Grid.prototype['title'] = undefined;






export default GoogleAppsCardV1Grid;

