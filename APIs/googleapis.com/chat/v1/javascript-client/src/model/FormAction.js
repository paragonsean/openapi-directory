/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionParameter from './ActionParameter';

/**
 * The FormAction model module.
 * @module model/FormAction
 * @version v1
 */
class FormAction {
    /**
     * Constructs a new <code>FormAction</code>.
     * A form action describes the behavior when the form is submitted. For example, you can invoke Apps Script to handle the form.
     * @alias module:model/FormAction
     */
    constructor() { 
        
        FormAction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormAction} obj Optional instance to populate.
     * @return {module:model/FormAction} The populated <code>FormAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormAction();

            if (data.hasOwnProperty('actionMethodName')) {
                obj['actionMethodName'] = ApiClient.convertToType(data['actionMethodName'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ActionParameter]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormAction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionMethodName'] && !(typeof data['actionMethodName'] === 'string' || data['actionMethodName'] instanceof String)) {
            throw new Error("Expected the field `actionMethodName` to be a primitive type in the JSON string but got " + data['actionMethodName']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ActionParameter.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. You can use the same method name for several elements that trigger a common behavior.
 * @member {String} actionMethodName
 */
FormAction.prototype['actionMethodName'] = undefined;

/**
 * List of action parameters.
 * @member {Array.<module:model/ActionParameter>} parameters
 */
FormAction.prototype['parameters'] = undefined;






export default FormAction;

