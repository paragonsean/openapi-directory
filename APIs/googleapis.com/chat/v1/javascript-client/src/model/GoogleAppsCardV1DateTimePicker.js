/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1Action from './GoogleAppsCardV1Action';

/**
 * The GoogleAppsCardV1DateTimePicker model module.
 * @module model/GoogleAppsCardV1DateTimePicker
 * @version v1
 */
class GoogleAppsCardV1DateTimePicker {
    /**
     * Constructs a new <code>GoogleAppsCardV1DateTimePicker</code>.
     * Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
     * @alias module:model/GoogleAppsCardV1DateTimePicker
     */
    constructor() { 
        
        GoogleAppsCardV1DateTimePicker.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1DateTimePicker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1DateTimePicker} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1DateTimePicker} The populated <code>GoogleAppsCardV1DateTimePicker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1DateTimePicker();

            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onChangeAction')) {
                obj['onChangeAction'] = GoogleAppsCardV1Action.constructFromObject(data['onChangeAction']);
            }
            if (data.hasOwnProperty('timezoneOffsetDate')) {
                obj['timezoneOffsetDate'] = ApiClient.convertToType(data['timezoneOffsetDate'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valueMsEpoch')) {
                obj['valueMsEpoch'] = ApiClient.convertToType(data['valueMsEpoch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1DateTimePicker</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1DateTimePicker</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `onChangeAction`
        if (data['onChangeAction']) { // data not null
          GoogleAppsCardV1Action.validateJSON(data['onChangeAction']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['valueMsEpoch'] && !(typeof data['valueMsEpoch'] === 'string' || data['valueMsEpoch'] instanceof String)) {
            throw new Error("Expected the field `valueMsEpoch` to be a primitive type in the JSON string but got " + data['valueMsEpoch']);
        }

        return true;
    }


}



/**
 * The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as `Appointment date` or `Appointment date and time`.
 * @member {String} label
 */
GoogleAppsCardV1DateTimePicker.prototype['label'] = undefined;

/**
 * The name by which the `DateTimePicker` is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
 * @member {String} name
 */
GoogleAppsCardV1DateTimePicker.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1Action} onChangeAction
 */
GoogleAppsCardV1DateTimePicker.prototype['onChangeAction'] = undefined;

/**
 * The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.
 * @member {Number} timezoneOffsetDate
 */
GoogleAppsCardV1DateTimePicker.prototype['timezoneOffsetDate'] = undefined;

/**
 * Whether the widget supports inputting a date, a time, or the date and time.
 * @member {module:model/GoogleAppsCardV1DateTimePicker.TypeEnum} type
 */
GoogleAppsCardV1DateTimePicker.prototype['type'] = undefined;

/**
 * The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use `43200000` (or `12 * 60 * 60 * 1000`).
 * @member {String} valueMsEpoch
 */
GoogleAppsCardV1DateTimePicker.prototype['valueMsEpoch'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsCardV1DateTimePicker['TypeEnum'] = {

    /**
     * value: "DATE_AND_TIME"
     * @const
     */
    "DATE_AND_TIME": "DATE_AND_TIME",

    /**
     * value: "DATE_ONLY"
     * @const
     */
    "DATE_ONLY": "DATE_ONLY",

    /**
     * value: "TIME_ONLY"
     * @const
     */
    "TIME_ONLY": "TIME_ONLY"
};



export default GoogleAppsCardV1DateTimePicker;

