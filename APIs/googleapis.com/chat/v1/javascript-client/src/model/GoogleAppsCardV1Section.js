/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1Widget from './GoogleAppsCardV1Widget';

/**
 * The GoogleAppsCardV1Section model module.
 * @module model/GoogleAppsCardV1Section
 * @version v1
 */
class GoogleAppsCardV1Section {
    /**
     * Constructs a new <code>GoogleAppsCardV1Section</code>.
     * A section contains a collection of widgets that are rendered vertically in the order that they&#39;re specified. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
     * @alias module:model/GoogleAppsCardV1Section
     */
    constructor() { 
        
        GoogleAppsCardV1Section.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1Section</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1Section} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1Section} The populated <code>GoogleAppsCardV1Section</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1Section();

            if (data.hasOwnProperty('collapsible')) {
                obj['collapsible'] = ApiClient.convertToType(data['collapsible'], 'Boolean');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], 'String');
            }
            if (data.hasOwnProperty('uncollapsibleWidgetsCount')) {
                obj['uncollapsibleWidgetsCount'] = ApiClient.convertToType(data['uncollapsibleWidgetsCount'], 'Number');
            }
            if (data.hasOwnProperty('widgets')) {
                obj['widgets'] = ApiClient.convertToType(data['widgets'], [GoogleAppsCardV1Widget]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1Section</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1Section</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['header'] && !(typeof data['header'] === 'string' || data['header'] instanceof String)) {
            throw new Error("Expected the field `header` to be a primitive type in the JSON string but got " + data['header']);
        }
        if (data['widgets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['widgets'])) {
                throw new Error("Expected the field `widgets` to be an array in the JSON data but got " + data['widgets']);
            }
            // validate the optional field `widgets` (array)
            for (const item of data['widgets']) {
                GoogleAppsCardV1Widget.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Indicates whether this section is collapsible. Collapsible sections hide some or all widgets, but users can expand the section to reveal the hidden widgets by clicking **Show more**. Users can hide the widgets again by clicking **Show less**. To determine which widgets are hidden, specify `uncollapsibleWidgetsCount`.
 * @member {Boolean} collapsible
 */
GoogleAppsCardV1Section.prototype['collapsible'] = undefined;

/**
 * Text that appears at the top of a section. Supports simple HTML formatted text. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 * @member {String} header
 */
GoogleAppsCardV1Section.prototype['header'] = undefined;

/**
 * The number of uncollapsible widgets which remain visible even when a section is collapsed. For example, when a section contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always shown and the last three are collapsed by default. The `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is `true`.
 * @member {Number} uncollapsibleWidgetsCount
 */
GoogleAppsCardV1Section.prototype['uncollapsibleWidgetsCount'] = undefined;

/**
 * All the widgets in the section. Must contain at least one widget.
 * @member {Array.<module:model/GoogleAppsCardV1Widget>} widgets
 */
GoogleAppsCardV1Section.prototype['widgets'] = undefined;






export default GoogleAppsCardV1Section;

