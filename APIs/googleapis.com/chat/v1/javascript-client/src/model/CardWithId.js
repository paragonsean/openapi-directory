/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1Card from './GoogleAppsCardV1Card';

/**
 * The CardWithId model module.
 * @module model/CardWithId
 * @version v1
 */
class CardWithId {
    /**
     * Constructs a new <code>CardWithId</code>.
     * A [card](https://developers.google.com/chat/api/reference/rest/v1/cards) in a Google Chat message. Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the message can&#39;t contain cards. [Card builder](https://addons.gsuite.google.com/uikit/builder)
     * @alias module:model/CardWithId
     */
    constructor() { 
        
        CardWithId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardWithId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardWithId} obj Optional instance to populate.
     * @return {module:model/CardWithId} The populated <code>CardWithId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardWithId();

            if (data.hasOwnProperty('card')) {
                obj['card'] = GoogleAppsCardV1Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('cardId')) {
                obj['cardId'] = ApiClient.convertToType(data['cardId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardWithId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardWithId</code>.
     */
    static validateJSON(data) {
        // validate the optional field `card`
        if (data['card']) { // data not null
          GoogleAppsCardV1Card.validateJSON(data['card']);
        }
        // ensure the json data is a string
        if (data['cardId'] && !(typeof data['cardId'] === 'string' || data['cardId'] instanceof String)) {
            throw new Error("Expected the field `cardId` to be a primitive type in the JSON string but got " + data['cardId']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleAppsCardV1Card} card
 */
CardWithId.prototype['card'] = undefined;

/**
 * Required if the message contains multiple cards. A unique identifier for a card in a message.
 * @member {String} cardId
 */
CardWithId.prototype['cardId'] = undefined;






export default CardWithId;

