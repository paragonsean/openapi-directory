/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardAction from './CardAction';
import CardHeader from './CardHeader';
import Section from './Section';

/**
 * The Card model module.
 * @module model/Card
 * @version v1
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * A card is a UI element that can contain UI widgets such as text and images.
     * @alias module:model/Card
     */
    constructor() { 
        
        Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('cardActions')) {
                obj['cardActions'] = ApiClient.convertToType(data['cardActions'], [CardAction]);
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = CardHeader.constructFromObject(data['header']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [Section]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        if (data['cardActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cardActions'])) {
                throw new Error("Expected the field `cardActions` to be an array in the JSON data but got " + data['cardActions']);
            }
            // validate the optional field `cardActions` (array)
            for (const item of data['cardActions']) {
                CardAction.validateJSON(item);
            };
        }
        // validate the optional field `header`
        if (data['header']) { // data not null
          CardHeader.validateJSON(data['header']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                Section.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The actions of this card.
 * @member {Array.<module:model/CardAction>} cardActions
 */
Card.prototype['cardActions'] = undefined;

/**
 * @member {module:model/CardHeader} header
 */
Card.prototype['header'] = undefined;

/**
 * Name of the card.
 * @member {String} name
 */
Card.prototype['name'] = undefined;

/**
 * Sections are separated by a line divider.
 * @member {Array.<module:model/Section>} sections
 */
Card.prototype['sections'] = undefined;






export default Card;

