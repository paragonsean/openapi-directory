/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpaceDetails model module.
 * @module model/SpaceDetails
 * @version v1
 */
class SpaceDetails {
    /**
     * Constructs a new <code>SpaceDetails</code>.
     * Details about the space including description and rules.
     * @alias module:model/SpaceDetails
     */
    constructor() { 
        
        SpaceDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpaceDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpaceDetails} obj Optional instance to populate.
     * @return {module:model/SpaceDetails} The populated <code>SpaceDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpaceDetails();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('guidelines')) {
                obj['guidelines'] = ApiClient.convertToType(data['guidelines'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpaceDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpaceDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['guidelines'] && !(typeof data['guidelines'] === 'string' || data['guidelines'] instanceof String)) {
            throw new Error("Expected the field `guidelines` to be a primitive type in the JSON string but got " + data['guidelines']);
        }

        return true;
    }


}



/**
 * Optional. A description of the space. For example, describe the space's discussion topic, functional purpose, or participants. Supports up to 150 characters.
 * @member {String} description
 */
SpaceDetails.prototype['description'] = undefined;

/**
 * Optional. The space's rules, expectations, and etiquette. Supports up to 5,000 characters.
 * @member {String} guidelines
 */
SpaceDetails.prototype['guidelines'] = undefined;






export default SpaceDetails;

