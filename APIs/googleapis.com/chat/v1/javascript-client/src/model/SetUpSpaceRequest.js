/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Membership from './Membership';
import Space from './Space';

/**
 * The SetUpSpaceRequest model module.
 * @module model/SetUpSpaceRequest
 * @version v1
 */
class SetUpSpaceRequest {
    /**
     * Constructs a new <code>SetUpSpaceRequest</code>.
     * @alias module:model/SetUpSpaceRequest
     */
    constructor() { 
        
        SetUpSpaceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SetUpSpaceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetUpSpaceRequest} obj Optional instance to populate.
     * @return {module:model/SetUpSpaceRequest} The populated <code>SetUpSpaceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetUpSpaceRequest();

            if (data.hasOwnProperty('memberships')) {
                obj['memberships'] = ApiClient.convertToType(data['memberships'], [Membership]);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('space')) {
                obj['space'] = Space.constructFromObject(data['space']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetUpSpaceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetUpSpaceRequest</code>.
     */
    static validateJSON(data) {
        if (data['memberships']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['memberships'])) {
                throw new Error("Expected the field `memberships` to be an array in the JSON data but got " + data['memberships']);
            }
            // validate the optional field `memberships` (array)
            for (const item of data['memberships']) {
                Membership.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }
        // validate the optional field `space`
        if (data['space']) { // data not null
          Space.validateJSON(data['space']);
        }

        return true;
    }


}



/**
 * Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The `Membership.member` field must contain a `user` with `name` populated (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the `user.name` can be `users/example@gmail.com`.\" To invite Gmail users or users from external Google Workspace domains, user's email must be used for `{user}`. Optional when setting `Space.spaceType` to `SPACE`. Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships. Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
 * @member {Array.<module:model/Membership>} memberships
 */
SetUpSpaceRequest.prototype['memberships'] = undefined;

/**
 * Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.
 * @member {String} requestId
 */
SetUpSpaceRequest.prototype['requestId'] = undefined;

/**
 * @member {module:model/Space} space
 */
SetUpSpaceRequest.prototype['space'] = undefined;






export default SetUpSpaceRequest;

