/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsCardV1CardAction from './GoogleAppsCardV1CardAction';
import GoogleAppsCardV1CardFixedFooter from './GoogleAppsCardV1CardFixedFooter';
import GoogleAppsCardV1CardHeader from './GoogleAppsCardV1CardHeader';
import GoogleAppsCardV1Section from './GoogleAppsCardV1Section';

/**
 * The GoogleAppsCardV1Card model module.
 * @module model/GoogleAppsCardV1Card
 * @version v1
 */
class GoogleAppsCardV1Card {
    /**
     * Constructs a new <code>GoogleAppsCardV1Card</code>.
     * A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: &#x60;&#x60;&#x60; { \&quot;cardsV2\&quot;: [ { \&quot;cardId\&quot;: \&quot;unique-card-id\&quot;, \&quot;card\&quot;: { \&quot;header\&quot;: { \&quot;title\&quot;: \&quot;Sasha\&quot;, \&quot;subtitle\&quot;: \&quot;Software Engineer\&quot;, \&quot;imageUrl\&quot;: \&quot;https://developers.google.com/chat/images/quickstart-app-avatar.png\&quot;, \&quot;imageType\&quot;: \&quot;CIRCLE\&quot;, \&quot;imageAltText\&quot;: \&quot;Avatar for Sasha\&quot;, }, \&quot;sections\&quot;: [ { \&quot;header\&quot;: \&quot;Contact Info\&quot;, \&quot;collapsible\&quot;: true, \&quot;uncollapsibleWidgetsCount\&quot;: 1, \&quot;widgets\&quot;: [ { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;EMAIL\&quot;, }, \&quot;text\&quot;: \&quot;sasha@example.com\&quot;, } }, { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;PERSON\&quot;, }, \&quot;text\&quot;: \&quot;Online\&quot;, }, }, { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;PHONE\&quot;, }, \&quot;text\&quot;: \&quot;+1 (555) 555-1234\&quot;, } }, { \&quot;buttonList\&quot;: { \&quot;buttons\&quot;: [ { \&quot;text\&quot;: \&quot;Share\&quot;, \&quot;onClick\&quot;: { \&quot;openLink\&quot;: { \&quot;url\&quot;: \&quot;https://example.com/share\&quot;, } } }, { \&quot;text\&quot;: \&quot;Edit\&quot;, \&quot;onClick\&quot;: { \&quot;action\&quot;: { \&quot;function\&quot;: \&quot;goToView\&quot;, \&quot;parameters\&quot;: [ { \&quot;key\&quot;: \&quot;viewType\&quot;, \&quot;value\&quot;: \&quot;EDIT\&quot;, } ], } } }, ], } }, ], }, ], }, } ], } &#x60;&#x60;&#x60;
     * @alias module:model/GoogleAppsCardV1Card
     */
    constructor() { 
        
        GoogleAppsCardV1Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsCardV1Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsCardV1Card} obj Optional instance to populate.
     * @return {module:model/GoogleAppsCardV1Card} The populated <code>GoogleAppsCardV1Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsCardV1Card();

            if (data.hasOwnProperty('cardActions')) {
                obj['cardActions'] = ApiClient.convertToType(data['cardActions'], [GoogleAppsCardV1CardAction]);
            }
            if (data.hasOwnProperty('displayStyle')) {
                obj['displayStyle'] = ApiClient.convertToType(data['displayStyle'], 'String');
            }
            if (data.hasOwnProperty('fixedFooter')) {
                obj['fixedFooter'] = GoogleAppsCardV1CardFixedFooter.constructFromObject(data['fixedFooter']);
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = GoogleAppsCardV1CardHeader.constructFromObject(data['header']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('peekCardHeader')) {
                obj['peekCardHeader'] = GoogleAppsCardV1CardHeader.constructFromObject(data['peekCardHeader']);
            }
            if (data.hasOwnProperty('sectionDividerStyle')) {
                obj['sectionDividerStyle'] = ApiClient.convertToType(data['sectionDividerStyle'], 'String');
            }
            if (data.hasOwnProperty('sections')) {
                obj['sections'] = ApiClient.convertToType(data['sections'], [GoogleAppsCardV1Section]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsCardV1Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsCardV1Card</code>.
     */
    static validateJSON(data) {
        if (data['cardActions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cardActions'])) {
                throw new Error("Expected the field `cardActions` to be an array in the JSON data but got " + data['cardActions']);
            }
            // validate the optional field `cardActions` (array)
            for (const item of data['cardActions']) {
                GoogleAppsCardV1CardAction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayStyle'] && !(typeof data['displayStyle'] === 'string' || data['displayStyle'] instanceof String)) {
            throw new Error("Expected the field `displayStyle` to be a primitive type in the JSON string but got " + data['displayStyle']);
        }
        // validate the optional field `fixedFooter`
        if (data['fixedFooter']) { // data not null
          GoogleAppsCardV1CardFixedFooter.validateJSON(data['fixedFooter']);
        }
        // validate the optional field `header`
        if (data['header']) { // data not null
          GoogleAppsCardV1CardHeader.validateJSON(data['header']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `peekCardHeader`
        if (data['peekCardHeader']) { // data not null
          GoogleAppsCardV1CardHeader.validateJSON(data['peekCardHeader']);
        }
        // ensure the json data is a string
        if (data['sectionDividerStyle'] && !(typeof data['sectionDividerStyle'] === 'string' || data['sectionDividerStyle'] instanceof String)) {
            throw new Error("Expected the field `sectionDividerStyle` to be a primitive type in the JSON string but got " + data['sectionDividerStyle']);
        }
        if (data['sections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sections'])) {
                throw new Error("Expected the field `sections` to be an array in the JSON data but got " + data['sections']);
            }
            // validate the optional field `sections` (array)
            for (const item of data['sections']) {
                GoogleAppsCardV1Section.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The card's actions. Actions are added to the card's toolbar menu. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons): For example, the following JSON constructs a card action menu with `Settings` and `Send Feedback` options: ``` \"card_actions\": [ { \"actionLabel\": \"Settings\", \"onClick\": { \"action\": { \"functionName\": \"goToView\", \"parameters\": [ { \"key\": \"viewType\", \"value\": \"SETTING\" } ], \"loadIndicator\": \"LoadIndicator.SPINNER\" } } }, { \"actionLabel\": \"Send Feedback\", \"onClick\": { \"openLink\": { \"url\": \"https://example.com/feedback\" } } } ] ```
 * @member {Array.<module:model/GoogleAppsCardV1CardAction>} cardActions
 */
GoogleAppsCardV1Card.prototype['cardActions'] = undefined;

/**
 * In Google Workspace Add-ons, sets the display properties of the `peekCardHeader`. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
 * @member {module:model/GoogleAppsCardV1Card.DisplayStyleEnum} displayStyle
 */
GoogleAppsCardV1Card.prototype['displayStyle'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1CardFixedFooter} fixedFooter
 */
GoogleAppsCardV1Card.prototype['fixedFooter'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1CardHeader} header
 */
GoogleAppsCardV1Card.prototype['header'] = undefined;

/**
 * Name of the card. Used as a card identifier in card navigation. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
 * @member {String} name
 */
GoogleAppsCardV1Card.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleAppsCardV1CardHeader} peekCardHeader
 */
GoogleAppsCardV1Card.prototype['peekCardHeader'] = undefined;

/**
 * The divider style between sections.
 * @member {module:model/GoogleAppsCardV1Card.SectionDividerStyleEnum} sectionDividerStyle
 */
GoogleAppsCardV1Card.prototype['sectionDividerStyle'] = undefined;

/**
 * Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see [Card section](https://developers.google.com/chat/ui/widgets/card-section).
 * @member {Array.<module:model/GoogleAppsCardV1Section>} sections
 */
GoogleAppsCardV1Card.prototype['sections'] = undefined;





/**
 * Allowed values for the <code>displayStyle</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsCardV1Card['DisplayStyleEnum'] = {

    /**
     * value: "DISPLAY_STYLE_UNSPECIFIED"
     * @const
     */
    "DISPLAY_STYLE_UNSPECIFIED": "DISPLAY_STYLE_UNSPECIFIED",

    /**
     * value: "PEEK"
     * @const
     */
    "PEEK": "PEEK",

    /**
     * value: "REPLACE"
     * @const
     */
    "REPLACE": "REPLACE"
};


/**
 * Allowed values for the <code>sectionDividerStyle</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsCardV1Card['SectionDividerStyleEnum'] = {

    /**
     * value: "DIVIDER_STYLE_UNSPECIFIED"
     * @const
     */
    "DIVIDER_STYLE_UNSPECIFIED": "DIVIDER_STYLE_UNSPECIFIED",

    /**
     * value: "SOLID_DIVIDER"
     * @const
     */
    "SOLID_DIVIDER": "SOLID_DIVIDER",

    /**
     * value: "NO_DIVIDER"
     * @const
     */
    "NO_DIVIDER": "NO_DIVIDER"
};



export default GoogleAppsCardV1Card;

