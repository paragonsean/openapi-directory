/**
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DialogAction from './DialogAction';
import UpdatedWidget from './UpdatedWidget';

/**
 * The ActionResponse model module.
 * @module model/ActionResponse
 * @version v1
 */
class ActionResponse {
    /**
     * Constructs a new <code>ActionResponse</code>.
     * Parameters that a Chat app can use to configure how its response is posted.
     * @alias module:model/ActionResponse
     */
    constructor() { 
        
        ActionResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionResponse} obj Optional instance to populate.
     * @return {module:model/ActionResponse} The populated <code>ActionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionResponse();

            if (data.hasOwnProperty('dialogAction')) {
                obj['dialogAction'] = DialogAction.constructFromObject(data['dialogAction']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedWidget')) {
                obj['updatedWidget'] = UpdatedWidget.constructFromObject(data['updatedWidget']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dialogAction`
        if (data['dialogAction']) { // data not null
          DialogAction.validateJSON(data['dialogAction']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `updatedWidget`
        if (data['updatedWidget']) { // data not null
          UpdatedWidget.validateJSON(data['updatedWidget']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/DialogAction} dialogAction
 */
ActionResponse.prototype['dialogAction'] = undefined;

/**
 * Input only. The type of Chat app response.
 * @member {module:model/ActionResponse.TypeEnum} type
 */
ActionResponse.prototype['type'] = undefined;

/**
 * @member {module:model/UpdatedWidget} updatedWidget
 */
ActionResponse.prototype['updatedWidget'] = undefined;

/**
 * Input only. URL for users to authenticate or configure. (Only for `REQUEST_CONFIG` response types.)
 * @member {String} url
 */
ActionResponse.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ActionResponse['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "NEW_MESSAGE"
     * @const
     */
    "NEW_MESSAGE": "NEW_MESSAGE",

    /**
     * value: "UPDATE_MESSAGE"
     * @const
     */
    "UPDATE_MESSAGE": "UPDATE_MESSAGE",

    /**
     * value: "UPDATE_USER_MESSAGE_CARDS"
     * @const
     */
    "UPDATE_USER_MESSAGE_CARDS": "UPDATE_USER_MESSAGE_CARDS",

    /**
     * value: "REQUEST_CONFIG"
     * @const
     */
    "REQUEST_CONFIG": "REQUEST_CONFIG",

    /**
     * value: "DIALOG"
     * @const
     */
    "DIALOG": "DIALOG",

    /**
     * value: "UPDATE_WIDGET"
     * @const
     */
    "UPDATE_WIDGET": "UPDATE_WIDGET"
};



export default ActionResponse;

