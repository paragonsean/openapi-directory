/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Button;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.KeyValue;
import org.openapitools.client.model.TextParagraph;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A widget is a UI element that presents text and images.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WidgetMarkup {
  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private List<Button> buttons = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_KEY_VALUE = "keyValue";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE)
  private KeyValue keyValue;

  public static final String SERIALIZED_NAME_TEXT_PARAGRAPH = "textParagraph";
  @SerializedName(SERIALIZED_NAME_TEXT_PARAGRAPH)
  private TextParagraph textParagraph;

  public WidgetMarkup() {
  }

  public WidgetMarkup buttons(List<Button> buttons) {
    this.buttons = buttons;
    return this;
  }

  public WidgetMarkup addButtonsItem(Button buttonsItem) {
    if (this.buttons == null) {
      this.buttons = new ArrayList<>();
    }
    this.buttons.add(buttonsItem);
    return this;
  }

  /**
   * A list of buttons. Buttons is also &#x60;oneof data&#x60; and only one of these fields should be set.
   * @return buttons
   */
  @javax.annotation.Nullable
  public List<Button> getButtons() {
    return buttons;
  }

  public void setButtons(List<Button> buttons) {
    this.buttons = buttons;
  }


  public WidgetMarkup image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public WidgetMarkup keyValue(KeyValue keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Get keyValue
   * @return keyValue
   */
  @javax.annotation.Nullable
  public KeyValue getKeyValue() {
    return keyValue;
  }

  public void setKeyValue(KeyValue keyValue) {
    this.keyValue = keyValue;
  }


  public WidgetMarkup textParagraph(TextParagraph textParagraph) {
    this.textParagraph = textParagraph;
    return this;
  }

  /**
   * Get textParagraph
   * @return textParagraph
   */
  @javax.annotation.Nullable
  public TextParagraph getTextParagraph() {
    return textParagraph;
  }

  public void setTextParagraph(TextParagraph textParagraph) {
    this.textParagraph = textParagraph;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetMarkup widgetMarkup = (WidgetMarkup) o;
    return Objects.equals(this.buttons, widgetMarkup.buttons) &&
        Objects.equals(this.image, widgetMarkup.image) &&
        Objects.equals(this.keyValue, widgetMarkup.keyValue) &&
        Objects.equals(this.textParagraph, widgetMarkup.textParagraph);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttons, image, keyValue, textParagraph);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetMarkup {\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    keyValue: ").append(toIndentedString(keyValue)).append("\n");
    sb.append("    textParagraph: ").append(toIndentedString(textParagraph)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttons");
    openapiFields.add("image");
    openapiFields.add("keyValue");
    openapiFields.add("textParagraph");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WidgetMarkup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WidgetMarkup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WidgetMarkup is not found in the empty JSON string", WidgetMarkup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WidgetMarkup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WidgetMarkup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("buttons") != null && !jsonObj.get("buttons").isJsonNull()) {
        JsonArray jsonArraybuttons = jsonObj.getAsJsonArray("buttons");
        if (jsonArraybuttons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buttons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buttons` to be an array in the JSON string but got `%s`", jsonObj.get("buttons").toString()));
          }

          // validate the optional field `buttons` (array)
          for (int i = 0; i < jsonArraybuttons.size(); i++) {
            Button.validateJsonElement(jsonArraybuttons.get(i));
          };
        }
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `keyValue`
      if (jsonObj.get("keyValue") != null && !jsonObj.get("keyValue").isJsonNull()) {
        KeyValue.validateJsonElement(jsonObj.get("keyValue"));
      }
      // validate the optional field `textParagraph`
      if (jsonObj.get("textParagraph") != null && !jsonObj.get("textParagraph").isJsonNull()) {
        TextParagraph.validateJsonElement(jsonObj.get("textParagraph"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WidgetMarkup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WidgetMarkup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WidgetMarkup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WidgetMarkup.class));

       return (TypeAdapter<T>) new TypeAdapter<WidgetMarkup>() {
           @Override
           public void write(JsonWriter out, WidgetMarkup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WidgetMarkup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WidgetMarkup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WidgetMarkup
   * @throws IOException if the JSON string is invalid with respect to WidgetMarkup
   */
  public static WidgetMarkup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WidgetMarkup.class);
  }

  /**
   * Convert an instance of WidgetMarkup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

