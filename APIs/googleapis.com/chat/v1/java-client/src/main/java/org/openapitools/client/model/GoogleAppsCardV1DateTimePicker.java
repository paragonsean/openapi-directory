/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsCardV1Action;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lets users input a date, a time, or both a date and a time. For an example in Google Chat apps, see [Date time picker](https://developers.google.com/chat/ui/widgets/date-time-picker). Users can input text or use the picker to select dates and times. If users input an invalid date or time, the picker shows an error that prompts users to input the information correctly. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1DateTimePicker {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_CHANGE_ACTION = "onChangeAction";
  @SerializedName(SERIALIZED_NAME_ON_CHANGE_ACTION)
  private GoogleAppsCardV1Action onChangeAction;

  public static final String SERIALIZED_NAME_TIMEZONE_OFFSET_DATE = "timezoneOffsetDate";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_OFFSET_DATE)
  private Integer timezoneOffsetDate;

  /**
   * Whether the widget supports inputting a date, a time, or the date and time.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATE_AND_TIME("DATE_AND_TIME"),
    
    DATE_ONLY("DATE_ONLY"),
    
    TIME_ONLY("TIME_ONLY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE_MS_EPOCH = "valueMsEpoch";
  @SerializedName(SERIALIZED_NAME_VALUE_MS_EPOCH)
  private String valueMsEpoch;

  public GoogleAppsCardV1DateTimePicker() {
  }

  public GoogleAppsCardV1DateTimePicker label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as &#x60;Appointment date&#x60; or &#x60;Appointment date and time&#x60;.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GoogleAppsCardV1DateTimePicker name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name by which the &#x60;DateTimePicker&#x60; is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAppsCardV1DateTimePicker onChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
    return this;
  }

  /**
   * Get onChangeAction
   * @return onChangeAction
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getOnChangeAction() {
    return onChangeAction;
  }

  public void setOnChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
  }


  public GoogleAppsCardV1DateTimePicker timezoneOffsetDate(Integer timezoneOffsetDate) {
    this.timezoneOffsetDate = timezoneOffsetDate;
    return this;
  }

  /**
   * The number representing the time zone offset from UTC, in minutes. If set, the &#x60;value_ms_epoch&#x60; is displayed in the specified time zone. If unset, the value defaults to the user&#39;s time zone setting.
   * @return timezoneOffsetDate
   */
  @javax.annotation.Nullable
  public Integer getTimezoneOffsetDate() {
    return timezoneOffsetDate;
  }

  public void setTimezoneOffsetDate(Integer timezoneOffsetDate) {
    this.timezoneOffsetDate = timezoneOffsetDate;
  }


  public GoogleAppsCardV1DateTimePicker type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Whether the widget supports inputting a date, a time, or the date and time.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GoogleAppsCardV1DateTimePicker valueMsEpoch(String valueMsEpoch) {
    this.valueMsEpoch = valueMsEpoch;
    return this;
  }

  /**
   * The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (&#x60;DateTimePickerType&#x60;): * &#x60;DATE_AND_TIME&#x60;: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use &#x60;1672574400000&#x60;. * &#x60;DATE_ONLY&#x60;: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use &#x60;1672531200000&#x60;. * &#x60;TIME_ONLY&#x60;: a time in UTC. For example, to represent 12:00 PM, use &#x60;43200000&#x60; (or &#x60;12 * 60 * 60 * 1000&#x60;).
   * @return valueMsEpoch
   */
  @javax.annotation.Nullable
  public String getValueMsEpoch() {
    return valueMsEpoch;
  }

  public void setValueMsEpoch(String valueMsEpoch) {
    this.valueMsEpoch = valueMsEpoch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1DateTimePicker googleAppsCardV1DateTimePicker = (GoogleAppsCardV1DateTimePicker) o;
    return Objects.equals(this.label, googleAppsCardV1DateTimePicker.label) &&
        Objects.equals(this.name, googleAppsCardV1DateTimePicker.name) &&
        Objects.equals(this.onChangeAction, googleAppsCardV1DateTimePicker.onChangeAction) &&
        Objects.equals(this.timezoneOffsetDate, googleAppsCardV1DateTimePicker.timezoneOffsetDate) &&
        Objects.equals(this.type, googleAppsCardV1DateTimePicker.type) &&
        Objects.equals(this.valueMsEpoch, googleAppsCardV1DateTimePicker.valueMsEpoch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, name, onChangeAction, timezoneOffsetDate, type, valueMsEpoch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1DateTimePicker {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onChangeAction: ").append(toIndentedString(onChangeAction)).append("\n");
    sb.append("    timezoneOffsetDate: ").append(toIndentedString(timezoneOffsetDate)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueMsEpoch: ").append(toIndentedString(valueMsEpoch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("onChangeAction");
    openapiFields.add("timezoneOffsetDate");
    openapiFields.add("type");
    openapiFields.add("valueMsEpoch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1DateTimePicker
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1DateTimePicker.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1DateTimePicker is not found in the empty JSON string", GoogleAppsCardV1DateTimePicker.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1DateTimePicker.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1DateTimePicker` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `onChangeAction`
      if (jsonObj.get("onChangeAction") != null && !jsonObj.get("onChangeAction").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("onChangeAction"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("valueMsEpoch") != null && !jsonObj.get("valueMsEpoch").isJsonNull()) && !jsonObj.get("valueMsEpoch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueMsEpoch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueMsEpoch").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1DateTimePicker.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1DateTimePicker' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1DateTimePicker> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1DateTimePicker.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1DateTimePicker>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1DateTimePicker value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1DateTimePicker read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1DateTimePicker given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1DateTimePicker
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1DateTimePicker
   */
  public static GoogleAppsCardV1DateTimePicker fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1DateTimePicker.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1DateTimePicker to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

