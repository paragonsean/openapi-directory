/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OnClick;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An image button with an &#x60;onclick&#x60; action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageButton {
  /**
   * The icon specified by an &#x60;enum&#x60; that indices to an icon provided by Chat API.
   */
  @JsonAdapter(IconEnum.Adapter.class)
  public enum IconEnum {
    ICON_UNSPECIFIED("ICON_UNSPECIFIED"),
    
    AIRPLANE("AIRPLANE"),
    
    BOOKMARK("BOOKMARK"),
    
    BUS("BUS"),
    
    CAR("CAR"),
    
    CLOCK("CLOCK"),
    
    CONFIRMATION_NUMBER_ICON("CONFIRMATION_NUMBER_ICON"),
    
    DOLLAR("DOLLAR"),
    
    DESCRIPTION("DESCRIPTION"),
    
    EMAIL("EMAIL"),
    
    EVENT_PERFORMER("EVENT_PERFORMER"),
    
    EVENT_SEAT("EVENT_SEAT"),
    
    FLIGHT_ARRIVAL("FLIGHT_ARRIVAL"),
    
    FLIGHT_DEPARTURE("FLIGHT_DEPARTURE"),
    
    HOTEL("HOTEL"),
    
    HOTEL_ROOM_TYPE("HOTEL_ROOM_TYPE"),
    
    INVITE("INVITE"),
    
    MAP_PIN("MAP_PIN"),
    
    MEMBERSHIP("MEMBERSHIP"),
    
    MULTIPLE_PEOPLE("MULTIPLE_PEOPLE"),
    
    OFFER("OFFER"),
    
    PERSON("PERSON"),
    
    PHONE("PHONE"),
    
    RESTAURANT_ICON("RESTAURANT_ICON"),
    
    SHOPPING_CART("SHOPPING_CART"),
    
    STAR("STAR"),
    
    STORE("STORE"),
    
    TICKET("TICKET"),
    
    TRAIN("TRAIN"),
    
    VIDEO_CAMERA("VIDEO_CAMERA"),
    
    VIDEO_PLAY("VIDEO_PLAY");

    private String value;

    IconEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IconEnum fromValue(String value) {
      for (IconEnum b : IconEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IconEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IconEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IconEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IconEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IconEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private IconEnum icon;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_CLICK = "onClick";
  @SerializedName(SERIALIZED_NAME_ON_CLICK)
  private OnClick onClick;

  public ImageButton() {
  }

  public ImageButton icon(IconEnum icon) {
    this.icon = icon;
    return this;
  }

  /**
   * The icon specified by an &#x60;enum&#x60; that indices to an icon provided by Chat API.
   * @return icon
   */
  @javax.annotation.Nullable
  public IconEnum getIcon() {
    return icon;
  }

  public void setIcon(IconEnum icon) {
    this.icon = icon;
  }


  public ImageButton iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The icon specified by a URL.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public ImageButton name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this &#x60;image_button&#x60; that&#39;s used for accessibility. Default value is provided if this name isn&#39;t specified.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ImageButton onClick(OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * Get onClick
   * @return onClick
   */
  @javax.annotation.Nullable
  public OnClick getOnClick() {
    return onClick;
  }

  public void setOnClick(OnClick onClick) {
    this.onClick = onClick;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageButton imageButton = (ImageButton) o;
    return Objects.equals(this.icon, imageButton.icon) &&
        Objects.equals(this.iconUrl, imageButton.iconUrl) &&
        Objects.equals(this.name, imageButton.name) &&
        Objects.equals(this.onClick, imageButton.onClick);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icon, iconUrl, name, onClick);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageButton {\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onClick: ").append(toIndentedString(onClick)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("icon");
    openapiFields.add("iconUrl");
    openapiFields.add("name");
    openapiFields.add("onClick");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageButton
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageButton.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageButton is not found in the empty JSON string", ImageButton.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageButton.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageButton` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        IconEnum.validateJsonElement(jsonObj.get("icon"));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `onClick`
      if (jsonObj.get("onClick") != null && !jsonObj.get("onClick").isJsonNull()) {
        OnClick.validateJsonElement(jsonObj.get("onClick"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageButton.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageButton' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageButton> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageButton.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageButton>() {
           @Override
           public void write(JsonWriter out, ImageButton value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageButton read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageButton given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageButton
   * @throws IOException if the JSON string is invalid with respect to ImageButton
   */
  public static ImageButton fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageButton.class);
  }

  /**
   * Convert an instance of ImageButton to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

