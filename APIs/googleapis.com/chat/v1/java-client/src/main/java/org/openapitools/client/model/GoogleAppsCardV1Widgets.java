/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsCardV1ButtonList;
import org.openapitools.client.model.GoogleAppsCardV1DateTimePicker;
import org.openapitools.client.model.GoogleAppsCardV1DecoratedText;
import org.openapitools.client.model.GoogleAppsCardV1Image;
import org.openapitools.client.model.GoogleAppsCardV1SelectionInput;
import org.openapitools.client.model.GoogleAppsCardV1TextInput;
import org.openapitools.client.model.GoogleAppsCardV1TextParagraph;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The supported widgets that you can include in a column. [Google Chat apps](https://developers.google.com/chat):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Widgets {
  public static final String SERIALIZED_NAME_BUTTON_LIST = "buttonList";
  @SerializedName(SERIALIZED_NAME_BUTTON_LIST)
  private GoogleAppsCardV1ButtonList buttonList;

  public static final String SERIALIZED_NAME_DATE_TIME_PICKER = "dateTimePicker";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_PICKER)
  private GoogleAppsCardV1DateTimePicker dateTimePicker;

  public static final String SERIALIZED_NAME_DECORATED_TEXT = "decoratedText";
  @SerializedName(SERIALIZED_NAME_DECORATED_TEXT)
  private GoogleAppsCardV1DecoratedText decoratedText;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private GoogleAppsCardV1Image image;

  public static final String SERIALIZED_NAME_SELECTION_INPUT = "selectionInput";
  @SerializedName(SERIALIZED_NAME_SELECTION_INPUT)
  private GoogleAppsCardV1SelectionInput selectionInput;

  public static final String SERIALIZED_NAME_TEXT_INPUT = "textInput";
  @SerializedName(SERIALIZED_NAME_TEXT_INPUT)
  private GoogleAppsCardV1TextInput textInput;

  public static final String SERIALIZED_NAME_TEXT_PARAGRAPH = "textParagraph";
  @SerializedName(SERIALIZED_NAME_TEXT_PARAGRAPH)
  private GoogleAppsCardV1TextParagraph textParagraph;

  public GoogleAppsCardV1Widgets() {
  }

  public GoogleAppsCardV1Widgets buttonList(GoogleAppsCardV1ButtonList buttonList) {
    this.buttonList = buttonList;
    return this;
  }

  /**
   * Get buttonList
   * @return buttonList
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1ButtonList getButtonList() {
    return buttonList;
  }

  public void setButtonList(GoogleAppsCardV1ButtonList buttonList) {
    this.buttonList = buttonList;
  }


  public GoogleAppsCardV1Widgets dateTimePicker(GoogleAppsCardV1DateTimePicker dateTimePicker) {
    this.dateTimePicker = dateTimePicker;
    return this;
  }

  /**
   * Get dateTimePicker
   * @return dateTimePicker
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1DateTimePicker getDateTimePicker() {
    return dateTimePicker;
  }

  public void setDateTimePicker(GoogleAppsCardV1DateTimePicker dateTimePicker) {
    this.dateTimePicker = dateTimePicker;
  }


  public GoogleAppsCardV1Widgets decoratedText(GoogleAppsCardV1DecoratedText decoratedText) {
    this.decoratedText = decoratedText;
    return this;
  }

  /**
   * Get decoratedText
   * @return decoratedText
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1DecoratedText getDecoratedText() {
    return decoratedText;
  }

  public void setDecoratedText(GoogleAppsCardV1DecoratedText decoratedText) {
    this.decoratedText = decoratedText;
  }


  public GoogleAppsCardV1Widgets image(GoogleAppsCardV1Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Image getImage() {
    return image;
  }

  public void setImage(GoogleAppsCardV1Image image) {
    this.image = image;
  }


  public GoogleAppsCardV1Widgets selectionInput(GoogleAppsCardV1SelectionInput selectionInput) {
    this.selectionInput = selectionInput;
    return this;
  }

  /**
   * Get selectionInput
   * @return selectionInput
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1SelectionInput getSelectionInput() {
    return selectionInput;
  }

  public void setSelectionInput(GoogleAppsCardV1SelectionInput selectionInput) {
    this.selectionInput = selectionInput;
  }


  public GoogleAppsCardV1Widgets textInput(GoogleAppsCardV1TextInput textInput) {
    this.textInput = textInput;
    return this;
  }

  /**
   * Get textInput
   * @return textInput
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1TextInput getTextInput() {
    return textInput;
  }

  public void setTextInput(GoogleAppsCardV1TextInput textInput) {
    this.textInput = textInput;
  }


  public GoogleAppsCardV1Widgets textParagraph(GoogleAppsCardV1TextParagraph textParagraph) {
    this.textParagraph = textParagraph;
    return this;
  }

  /**
   * Get textParagraph
   * @return textParagraph
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1TextParagraph getTextParagraph() {
    return textParagraph;
  }

  public void setTextParagraph(GoogleAppsCardV1TextParagraph textParagraph) {
    this.textParagraph = textParagraph;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Widgets googleAppsCardV1Widgets = (GoogleAppsCardV1Widgets) o;
    return Objects.equals(this.buttonList, googleAppsCardV1Widgets.buttonList) &&
        Objects.equals(this.dateTimePicker, googleAppsCardV1Widgets.dateTimePicker) &&
        Objects.equals(this.decoratedText, googleAppsCardV1Widgets.decoratedText) &&
        Objects.equals(this.image, googleAppsCardV1Widgets.image) &&
        Objects.equals(this.selectionInput, googleAppsCardV1Widgets.selectionInput) &&
        Objects.equals(this.textInput, googleAppsCardV1Widgets.textInput) &&
        Objects.equals(this.textParagraph, googleAppsCardV1Widgets.textParagraph);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttonList, dateTimePicker, decoratedText, image, selectionInput, textInput, textParagraph);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Widgets {\n");
    sb.append("    buttonList: ").append(toIndentedString(buttonList)).append("\n");
    sb.append("    dateTimePicker: ").append(toIndentedString(dateTimePicker)).append("\n");
    sb.append("    decoratedText: ").append(toIndentedString(decoratedText)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    selectionInput: ").append(toIndentedString(selectionInput)).append("\n");
    sb.append("    textInput: ").append(toIndentedString(textInput)).append("\n");
    sb.append("    textParagraph: ").append(toIndentedString(textParagraph)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttonList");
    openapiFields.add("dateTimePicker");
    openapiFields.add("decoratedText");
    openapiFields.add("image");
    openapiFields.add("selectionInput");
    openapiFields.add("textInput");
    openapiFields.add("textParagraph");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Widgets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Widgets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Widgets is not found in the empty JSON string", GoogleAppsCardV1Widgets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Widgets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Widgets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buttonList`
      if (jsonObj.get("buttonList") != null && !jsonObj.get("buttonList").isJsonNull()) {
        GoogleAppsCardV1ButtonList.validateJsonElement(jsonObj.get("buttonList"));
      }
      // validate the optional field `dateTimePicker`
      if (jsonObj.get("dateTimePicker") != null && !jsonObj.get("dateTimePicker").isJsonNull()) {
        GoogleAppsCardV1DateTimePicker.validateJsonElement(jsonObj.get("dateTimePicker"));
      }
      // validate the optional field `decoratedText`
      if (jsonObj.get("decoratedText") != null && !jsonObj.get("decoratedText").isJsonNull()) {
        GoogleAppsCardV1DecoratedText.validateJsonElement(jsonObj.get("decoratedText"));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        GoogleAppsCardV1Image.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `selectionInput`
      if (jsonObj.get("selectionInput") != null && !jsonObj.get("selectionInput").isJsonNull()) {
        GoogleAppsCardV1SelectionInput.validateJsonElement(jsonObj.get("selectionInput"));
      }
      // validate the optional field `textInput`
      if (jsonObj.get("textInput") != null && !jsonObj.get("textInput").isJsonNull()) {
        GoogleAppsCardV1TextInput.validateJsonElement(jsonObj.get("textInput"));
      }
      // validate the optional field `textParagraph`
      if (jsonObj.get("textParagraph") != null && !jsonObj.get("textParagraph").isJsonNull()) {
        GoogleAppsCardV1TextParagraph.validateJsonElement(jsonObj.get("textParagraph"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Widgets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Widgets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Widgets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Widgets.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Widgets>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Widgets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Widgets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Widgets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Widgets
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Widgets
   */
  public static GoogleAppsCardV1Widgets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Widgets.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Widgets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

