/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DateInput;
import org.openapitools.client.model.DateTimeInput;
import org.openapitools.client.model.StringInputs;
import org.openapitools.client.model.TimeInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Types of data that users can [input on cards or dialogs](https://developers.google.com/chat/ui/read-form-data). The input type depends on the type of values that the widget accepts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Inputs {
  public static final String SERIALIZED_NAME_DATE_INPUT = "dateInput";
  @SerializedName(SERIALIZED_NAME_DATE_INPUT)
  private DateInput dateInput;

  public static final String SERIALIZED_NAME_DATE_TIME_INPUT = "dateTimeInput";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_INPUT)
  private DateTimeInput dateTimeInput;

  public static final String SERIALIZED_NAME_STRING_INPUTS = "stringInputs";
  @SerializedName(SERIALIZED_NAME_STRING_INPUTS)
  private StringInputs stringInputs;

  public static final String SERIALIZED_NAME_TIME_INPUT = "timeInput";
  @SerializedName(SERIALIZED_NAME_TIME_INPUT)
  private TimeInput timeInput;

  public Inputs() {
  }

  public Inputs dateInput(DateInput dateInput) {
    this.dateInput = dateInput;
    return this;
  }

  /**
   * Get dateInput
   * @return dateInput
   */
  @javax.annotation.Nullable
  public DateInput getDateInput() {
    return dateInput;
  }

  public void setDateInput(DateInput dateInput) {
    this.dateInput = dateInput;
  }


  public Inputs dateTimeInput(DateTimeInput dateTimeInput) {
    this.dateTimeInput = dateTimeInput;
    return this;
  }

  /**
   * Get dateTimeInput
   * @return dateTimeInput
   */
  @javax.annotation.Nullable
  public DateTimeInput getDateTimeInput() {
    return dateTimeInput;
  }

  public void setDateTimeInput(DateTimeInput dateTimeInput) {
    this.dateTimeInput = dateTimeInput;
  }


  public Inputs stringInputs(StringInputs stringInputs) {
    this.stringInputs = stringInputs;
    return this;
  }

  /**
   * Get stringInputs
   * @return stringInputs
   */
  @javax.annotation.Nullable
  public StringInputs getStringInputs() {
    return stringInputs;
  }

  public void setStringInputs(StringInputs stringInputs) {
    this.stringInputs = stringInputs;
  }


  public Inputs timeInput(TimeInput timeInput) {
    this.timeInput = timeInput;
    return this;
  }

  /**
   * Get timeInput
   * @return timeInput
   */
  @javax.annotation.Nullable
  public TimeInput getTimeInput() {
    return timeInput;
  }

  public void setTimeInput(TimeInput timeInput) {
    this.timeInput = timeInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inputs inputs = (Inputs) o;
    return Objects.equals(this.dateInput, inputs.dateInput) &&
        Objects.equals(this.dateTimeInput, inputs.dateTimeInput) &&
        Objects.equals(this.stringInputs, inputs.stringInputs) &&
        Objects.equals(this.timeInput, inputs.timeInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateInput, dateTimeInput, stringInputs, timeInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inputs {\n");
    sb.append("    dateInput: ").append(toIndentedString(dateInput)).append("\n");
    sb.append("    dateTimeInput: ").append(toIndentedString(dateTimeInput)).append("\n");
    sb.append("    stringInputs: ").append(toIndentedString(stringInputs)).append("\n");
    sb.append("    timeInput: ").append(toIndentedString(timeInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateInput");
    openapiFields.add("dateTimeInput");
    openapiFields.add("stringInputs");
    openapiFields.add("timeInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Inputs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Inputs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Inputs is not found in the empty JSON string", Inputs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Inputs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Inputs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dateInput`
      if (jsonObj.get("dateInput") != null && !jsonObj.get("dateInput").isJsonNull()) {
        DateInput.validateJsonElement(jsonObj.get("dateInput"));
      }
      // validate the optional field `dateTimeInput`
      if (jsonObj.get("dateTimeInput") != null && !jsonObj.get("dateTimeInput").isJsonNull()) {
        DateTimeInput.validateJsonElement(jsonObj.get("dateTimeInput"));
      }
      // validate the optional field `stringInputs`
      if (jsonObj.get("stringInputs") != null && !jsonObj.get("stringInputs").isJsonNull()) {
        StringInputs.validateJsonElement(jsonObj.get("stringInputs"));
      }
      // validate the optional field `timeInput`
      if (jsonObj.get("timeInput") != null && !jsonObj.get("timeInput").isJsonNull()) {
        TimeInput.validateJsonElement(jsonObj.get("timeInput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Inputs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Inputs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Inputs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Inputs.class));

       return (TypeAdapter<T>) new TypeAdapter<Inputs>() {
           @Override
           public void write(JsonWriter out, Inputs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Inputs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Inputs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Inputs
   * @throws IOException if the JSON string is invalid with respect to Inputs
   */
  public static Inputs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Inputs.class);
  }

  /**
   * Convert an instance of Inputs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

