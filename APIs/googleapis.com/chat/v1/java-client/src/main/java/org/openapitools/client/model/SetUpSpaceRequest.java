/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Membership;
import org.openapitools.client.model.Space;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetUpSpaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetUpSpaceRequest {
  public static final String SERIALIZED_NAME_MEMBERSHIPS = "memberships";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIPS)
  private List<Membership> memberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Space space;

  public SetUpSpaceRequest() {
  }

  public SetUpSpaceRequest memberships(List<Membership> memberships) {
    this.memberships = memberships;
    return this;
  }

  public SetUpSpaceRequest addMembershipsItem(Membership membershipsItem) {
    if (this.memberships == null) {
      this.memberships = new ArrayList<>();
    }
    this.memberships.add(membershipsItem);
    return this;
  }

  /**
   * Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The &#x60;Membership.member&#x60; field must contain a &#x60;user&#x60; with &#x60;name&#x60; populated (format: &#x60;users/{user}&#x60;) and &#x60;type&#x60; set to &#x60;User.Type.HUMAN&#x60;. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user&#39;s email as an alias for {user}. For example, the &#x60;user.name&#x60; can be &#x60;users/example@gmail.com&#x60;.\&quot; To invite Gmail users or users from external Google Workspace domains, user&#39;s email must be used for &#x60;{user}&#x60;. Optional when setting &#x60;Space.spaceType&#x60; to &#x60;SPACE&#x60;. Required when setting &#x60;Space.spaceType&#x60; to &#x60;GROUP_CHAT&#x60;, along with at least two memberships. Required when setting &#x60;Space.spaceType&#x60; to &#x60;DIRECT_MESSAGE&#x60; with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting &#x60;Space.spaceType&#x60; to &#x60;DIRECT_MESSAGE&#x60; and &#x60;Space.singleUserBotDm&#x60; to &#x60;true&#x60;).
   * @return memberships
   */
  @javax.annotation.Nullable
  public List<Membership> getMemberships() {
    return memberships;
  }

  public void setMemberships(List<Membership> memberships) {
    this.memberships = memberships;
  }


  public SetUpSpaceRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public SetUpSpaceRequest space(Space space) {
    this.space = space;
    return this;
  }

  /**
   * Get space
   * @return space
   */
  @javax.annotation.Nullable
  public Space getSpace() {
    return space;
  }

  public void setSpace(Space space) {
    this.space = space;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetUpSpaceRequest setUpSpaceRequest = (SetUpSpaceRequest) o;
    return Objects.equals(this.memberships, setUpSpaceRequest.memberships) &&
        Objects.equals(this.requestId, setUpSpaceRequest.requestId) &&
        Objects.equals(this.space, setUpSpaceRequest.space);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberships, requestId, space);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetUpSpaceRequest {\n");
    sb.append("    memberships: ").append(toIndentedString(memberships)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memberships");
    openapiFields.add("requestId");
    openapiFields.add("space");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetUpSpaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetUpSpaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetUpSpaceRequest is not found in the empty JSON string", SetUpSpaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetUpSpaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetUpSpaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("memberships") != null && !jsonObj.get("memberships").isJsonNull()) {
        JsonArray jsonArraymemberships = jsonObj.getAsJsonArray("memberships");
        if (jsonArraymemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("memberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `memberships` to be an array in the JSON string but got `%s`", jsonObj.get("memberships").toString()));
          }

          // validate the optional field `memberships` (array)
          for (int i = 0; i < jsonArraymemberships.size(); i++) {
            Membership.validateJsonElement(jsonArraymemberships.get(i));
          };
        }
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      // validate the optional field `space`
      if (jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) {
        Space.validateJsonElement(jsonObj.get("space"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetUpSpaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetUpSpaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetUpSpaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetUpSpaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetUpSpaceRequest>() {
           @Override
           public void write(JsonWriter out, SetUpSpaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetUpSpaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetUpSpaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetUpSpaceRequest
   * @throws IOException if the JSON string is invalid with respect to SetUpSpaceRequest
   */
  public static SetUpSpaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetUpSpaceRequest.class);
  }

  /**
   * Convert an instance of SetUpSpaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

