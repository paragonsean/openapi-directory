/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1Widget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A section contains a collection of widgets that are rendered vertically in the order that they&#39;re specified. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Section {
  public static final String SERIALIZED_NAME_COLLAPSIBLE = "collapsible";
  @SerializedName(SERIALIZED_NAME_COLLAPSIBLE)
  private Boolean collapsible;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private String header;

  public static final String SERIALIZED_NAME_UNCOLLAPSIBLE_WIDGETS_COUNT = "uncollapsibleWidgetsCount";
  @SerializedName(SERIALIZED_NAME_UNCOLLAPSIBLE_WIDGETS_COUNT)
  private Integer uncollapsibleWidgetsCount;

  public static final String SERIALIZED_NAME_WIDGETS = "widgets";
  @SerializedName(SERIALIZED_NAME_WIDGETS)
  private List<GoogleAppsCardV1Widget> widgets = new ArrayList<>();

  public GoogleAppsCardV1Section() {
  }

  public GoogleAppsCardV1Section collapsible(Boolean collapsible) {
    this.collapsible = collapsible;
    return this;
  }

  /**
   * Indicates whether this section is collapsible. Collapsible sections hide some or all widgets, but users can expand the section to reveal the hidden widgets by clicking **Show more**. Users can hide the widgets again by clicking **Show less**. To determine which widgets are hidden, specify &#x60;uncollapsibleWidgetsCount&#x60;.
   * @return collapsible
   */
  @javax.annotation.Nullable
  public Boolean getCollapsible() {
    return collapsible;
  }

  public void setCollapsible(Boolean collapsible) {
    this.collapsible = collapsible;
  }


  public GoogleAppsCardV1Section header(String header) {
    this.header = header;
    return this;
  }

  /**
   * Text that appears at the top of a section. Supports simple HTML formatted text. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   * @return header
   */
  @javax.annotation.Nullable
  public String getHeader() {
    return header;
  }

  public void setHeader(String header) {
    this.header = header;
  }


  public GoogleAppsCardV1Section uncollapsibleWidgetsCount(Integer uncollapsibleWidgetsCount) {
    this.uncollapsibleWidgetsCount = uncollapsibleWidgetsCount;
    return this;
  }

  /**
   * The number of uncollapsible widgets which remain visible even when a section is collapsed. For example, when a section contains five widgets and the &#x60;uncollapsibleWidgetsCount&#x60; is set to &#x60;2&#x60;, the first two widgets are always shown and the last three are collapsed by default. The &#x60;uncollapsibleWidgetsCount&#x60; is taken into account only when &#x60;collapsible&#x60; is &#x60;true&#x60;.
   * @return uncollapsibleWidgetsCount
   */
  @javax.annotation.Nullable
  public Integer getUncollapsibleWidgetsCount() {
    return uncollapsibleWidgetsCount;
  }

  public void setUncollapsibleWidgetsCount(Integer uncollapsibleWidgetsCount) {
    this.uncollapsibleWidgetsCount = uncollapsibleWidgetsCount;
  }


  public GoogleAppsCardV1Section widgets(List<GoogleAppsCardV1Widget> widgets) {
    this.widgets = widgets;
    return this;
  }

  public GoogleAppsCardV1Section addWidgetsItem(GoogleAppsCardV1Widget widgetsItem) {
    if (this.widgets == null) {
      this.widgets = new ArrayList<>();
    }
    this.widgets.add(widgetsItem);
    return this;
  }

  /**
   * All the widgets in the section. Must contain at least one widget.
   * @return widgets
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1Widget> getWidgets() {
    return widgets;
  }

  public void setWidgets(List<GoogleAppsCardV1Widget> widgets) {
    this.widgets = widgets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Section googleAppsCardV1Section = (GoogleAppsCardV1Section) o;
    return Objects.equals(this.collapsible, googleAppsCardV1Section.collapsible) &&
        Objects.equals(this.header, googleAppsCardV1Section.header) &&
        Objects.equals(this.uncollapsibleWidgetsCount, googleAppsCardV1Section.uncollapsibleWidgetsCount) &&
        Objects.equals(this.widgets, googleAppsCardV1Section.widgets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collapsible, header, uncollapsibleWidgetsCount, widgets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Section {\n");
    sb.append("    collapsible: ").append(toIndentedString(collapsible)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    uncollapsibleWidgetsCount: ").append(toIndentedString(uncollapsibleWidgetsCount)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collapsible");
    openapiFields.add("header");
    openapiFields.add("uncollapsibleWidgetsCount");
    openapiFields.add("widgets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Section
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Section.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Section is not found in the empty JSON string", GoogleAppsCardV1Section.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Section.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Section` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) && !jsonObj.get("header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header").toString()));
      }
      if (jsonObj.get("widgets") != null && !jsonObj.get("widgets").isJsonNull()) {
        JsonArray jsonArraywidgets = jsonObj.getAsJsonArray("widgets");
        if (jsonArraywidgets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("widgets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `widgets` to be an array in the JSON string but got `%s`", jsonObj.get("widgets").toString()));
          }

          // validate the optional field `widgets` (array)
          for (int i = 0; i < jsonArraywidgets.size(); i++) {
            GoogleAppsCardV1Widget.validateJsonElement(jsonArraywidgets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Section.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Section' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Section> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Section.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Section>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Section value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Section read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Section given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Section
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Section
   */
  public static GoogleAppsCardV1Section fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Section.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Section to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

