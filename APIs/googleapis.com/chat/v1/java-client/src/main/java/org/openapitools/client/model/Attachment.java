/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttachmentDataRef;
import org.openapitools.client.model.DriveDataRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An attachment in Google Chat.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attachment {
  public static final String SERIALIZED_NAME_ATTACHMENT_DATA_REF = "attachmentDataRef";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_DATA_REF)
  private AttachmentDataRef attachmentDataRef;

  public static final String SERIALIZED_NAME_CONTENT_NAME = "contentName";
  @SerializedName(SERIALIZED_NAME_CONTENT_NAME)
  private String contentName;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DOWNLOAD_URI = "downloadUri";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URI)
  private String downloadUri;

  public static final String SERIALIZED_NAME_DRIVE_DATA_REF = "driveDataRef";
  @SerializedName(SERIALIZED_NAME_DRIVE_DATA_REF)
  private DriveDataRef driveDataRef;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The source of the attachment.
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    SOURCE_UNSPECIFIED("SOURCE_UNSPECIFIED"),
    
    DRIVE_FILE("DRIVE_FILE"),
    
    UPLOADED_CONTENT("UPLOADED_CONTENT");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  public static final String SERIALIZED_NAME_THUMBNAIL_URI = "thumbnailUri";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_URI)
  private String thumbnailUri;

  public Attachment() {
  }

  public Attachment(
     String contentName, 
     String contentType, 
     String downloadUri, 
     SourceEnum source, 
     String thumbnailUri
  ) {
    this();
    this.contentName = contentName;
    this.contentType = contentType;
    this.downloadUri = downloadUri;
    this.source = source;
    this.thumbnailUri = thumbnailUri;
  }

  public Attachment attachmentDataRef(AttachmentDataRef attachmentDataRef) {
    this.attachmentDataRef = attachmentDataRef;
    return this;
  }

  /**
   * Get attachmentDataRef
   * @return attachmentDataRef
   */
  @javax.annotation.Nullable
  public AttachmentDataRef getAttachmentDataRef() {
    return attachmentDataRef;
  }

  public void setAttachmentDataRef(AttachmentDataRef attachmentDataRef) {
    this.attachmentDataRef = attachmentDataRef;
  }


  /**
   * Output only. The original file name for the content, not the full path.
   * @return contentName
   */
  @javax.annotation.Nullable
  public String getContentName() {
    return contentName;
  }



  /**
   * Output only. The content type (MIME type) of the file.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }



  /**
   * Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn&#39;t use this URL to download attachment content.
   * @return downloadUri
   */
  @javax.annotation.Nullable
  public String getDownloadUri() {
    return downloadUri;
  }



  public Attachment driveDataRef(DriveDataRef driveDataRef) {
    this.driveDataRef = driveDataRef;
    return this;
  }

  /**
   * Get driveDataRef
   * @return driveDataRef
   */
  @javax.annotation.Nullable
  public DriveDataRef getDriveDataRef() {
    return driveDataRef;
  }

  public void setDriveDataRef(DriveDataRef driveDataRef) {
    this.driveDataRef = driveDataRef;
  }


  public Attachment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name of the attachment, in the form &#x60;spaces/_*_/messages/_*_/attachments/_*&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The source of the attachment.
   * @return source
   */
  @javax.annotation.Nullable
  public SourceEnum getSource() {
    return source;
  }



  /**
   * Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn&#39;t use this URL to download attachment content.
   * @return thumbnailUri
   */
  @javax.annotation.Nullable
  public String getThumbnailUri() {
    return thumbnailUri;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attachment attachment = (Attachment) o;
    return Objects.equals(this.attachmentDataRef, attachment.attachmentDataRef) &&
        Objects.equals(this.contentName, attachment.contentName) &&
        Objects.equals(this.contentType, attachment.contentType) &&
        Objects.equals(this.downloadUri, attachment.downloadUri) &&
        Objects.equals(this.driveDataRef, attachment.driveDataRef) &&
        Objects.equals(this.name, attachment.name) &&
        Objects.equals(this.source, attachment.source) &&
        Objects.equals(this.thumbnailUri, attachment.thumbnailUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentDataRef, contentName, contentType, downloadUri, driveDataRef, name, source, thumbnailUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attachment {\n");
    sb.append("    attachmentDataRef: ").append(toIndentedString(attachmentDataRef)).append("\n");
    sb.append("    contentName: ").append(toIndentedString(contentName)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("    driveDataRef: ").append(toIndentedString(driveDataRef)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    thumbnailUri: ").append(toIndentedString(thumbnailUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentDataRef");
    openapiFields.add("contentName");
    openapiFields.add("contentType");
    openapiFields.add("downloadUri");
    openapiFields.add("driveDataRef");
    openapiFields.add("name");
    openapiFields.add("source");
    openapiFields.add("thumbnailUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attachment is not found in the empty JSON string", Attachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attachmentDataRef`
      if (jsonObj.get("attachmentDataRef") != null && !jsonObj.get("attachmentDataRef").isJsonNull()) {
        AttachmentDataRef.validateJsonElement(jsonObj.get("attachmentDataRef"));
      }
      if ((jsonObj.get("contentName") != null && !jsonObj.get("contentName").isJsonNull()) && !jsonObj.get("contentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentName").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("downloadUri") != null && !jsonObj.get("downloadUri").isJsonNull()) && !jsonObj.get("downloadUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadUri").toString()));
      }
      // validate the optional field `driveDataRef`
      if (jsonObj.get("driveDataRef") != null && !jsonObj.get("driveDataRef").isJsonNull()) {
        DriveDataRef.validateJsonElement(jsonObj.get("driveDataRef"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        SourceEnum.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("thumbnailUri") != null && !jsonObj.get("thumbnailUri").isJsonNull()) && !jsonObj.get("thumbnailUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attachment.class));

       return (TypeAdapter<T>) new TypeAdapter<Attachment>() {
           @Override
           public void write(JsonWriter out, Attachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attachment
   * @throws IOException if the JSON string is invalid with respect to Attachment
   */
  public static Attachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attachment.class);
  }

  /**
   * Convert an instance of Attachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

