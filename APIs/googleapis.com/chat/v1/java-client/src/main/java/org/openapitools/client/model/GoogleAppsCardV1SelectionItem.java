/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item that users can select in a selection input, such as a checkbox or switch. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1SelectionItem {
  public static final String SERIALIZED_NAME_BOTTOM_TEXT = "bottomText";
  @SerializedName(SERIALIZED_NAME_BOTTOM_TEXT)
  private String bottomText;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_START_ICON_URI = "startIconUri";
  @SerializedName(SERIALIZED_NAME_START_ICON_URI)
  private String startIconUri;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public GoogleAppsCardV1SelectionItem() {
  }

  public GoogleAppsCardV1SelectionItem bottomText(String bottomText) {
    this.bottomText = bottomText;
    return this;
  }

  /**
   * For multiselect menus, a text description or label that&#39;s displayed below the item&#39;s &#x60;text&#x60; field.
   * @return bottomText
   */
  @javax.annotation.Nullable
  public String getBottomText() {
    return bottomText;
  }

  public void setBottomText(String bottomText) {
    this.bottomText = bottomText;
  }


  public GoogleAppsCardV1SelectionItem selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

  /**
   * Whether the item is selected by default. If the selection input only accepts one value (such as for radio buttons or a dropdown menu), only set this field for one item.
   * @return selected
   */
  @javax.annotation.Nullable
  public Boolean getSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public GoogleAppsCardV1SelectionItem startIconUri(String startIconUri) {
    this.startIconUri = startIconUri;
    return this;
  }

  /**
   * For multiselect menus, the URL for the icon displayed next to the item&#39;s &#x60;text&#x60; field. Supports PNG and JPEG files. Must be an &#x60;HTTPS&#x60; URL. For example, &#x60;https://developers.google.com/chat/images/quickstart-app-avatar.png&#x60;.
   * @return startIconUri
   */
  @javax.annotation.Nullable
  public String getStartIconUri() {
    return startIconUri;
  }

  public void setStartIconUri(String startIconUri) {
    this.startIconUri = startIconUri;
  }


  public GoogleAppsCardV1SelectionItem text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text that identifies or describes the item to users.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GoogleAppsCardV1SelectionItem value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value associated with this item. The client should use this as a form input value. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1SelectionItem googleAppsCardV1SelectionItem = (GoogleAppsCardV1SelectionItem) o;
    return Objects.equals(this.bottomText, googleAppsCardV1SelectionItem.bottomText) &&
        Objects.equals(this.selected, googleAppsCardV1SelectionItem.selected) &&
        Objects.equals(this.startIconUri, googleAppsCardV1SelectionItem.startIconUri) &&
        Objects.equals(this.text, googleAppsCardV1SelectionItem.text) &&
        Objects.equals(this.value, googleAppsCardV1SelectionItem.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottomText, selected, startIconUri, text, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1SelectionItem {\n");
    sb.append("    bottomText: ").append(toIndentedString(bottomText)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    startIconUri: ").append(toIndentedString(startIconUri)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bottomText");
    openapiFields.add("selected");
    openapiFields.add("startIconUri");
    openapiFields.add("text");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1SelectionItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1SelectionItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1SelectionItem is not found in the empty JSON string", GoogleAppsCardV1SelectionItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1SelectionItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1SelectionItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bottomText") != null && !jsonObj.get("bottomText").isJsonNull()) && !jsonObj.get("bottomText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottomText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottomText").toString()));
      }
      if ((jsonObj.get("startIconUri") != null && !jsonObj.get("startIconUri").isJsonNull()) && !jsonObj.get("startIconUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startIconUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startIconUri").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1SelectionItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1SelectionItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1SelectionItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1SelectionItem.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1SelectionItem>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1SelectionItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1SelectionItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1SelectionItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1SelectionItem
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1SelectionItem
   */
  public static GoogleAppsCardV1SelectionItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1SelectionItem.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1SelectionItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

