/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An icon displayed in a widget on a card. For an example in Google Chat apps, see [Icon](https://developers.google.com/chat/ui/widgets/icon). Supports [built-in](https://developers.google.com/chat/format-messages#builtinicons) and [custom](https://developers.google.com/chat/format-messages#customicons) icons. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Icon {
  public static final String SERIALIZED_NAME_ALT_TEXT = "altText";
  @SerializedName(SERIALIZED_NAME_ALT_TEXT)
  private String altText;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  /**
   * The crop style applied to the image. In some cases, applying a &#x60;CIRCLE&#x60; crop causes the image to be drawn larger than a built-in icon.
   */
  @JsonAdapter(ImageTypeEnum.Adapter.class)
  public enum ImageTypeEnum {
    SQUARE("SQUARE"),
    
    CIRCLE("CIRCLE");

    private String value;

    ImageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageTypeEnum fromValue(String value) {
      for (ImageTypeEnum b : ImageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private ImageTypeEnum imageType;

  public static final String SERIALIZED_NAME_KNOWN_ICON = "knownIcon";
  @SerializedName(SERIALIZED_NAME_KNOWN_ICON)
  private String knownIcon;

  public GoogleAppsCardV1Icon() {
  }

  public GoogleAppsCardV1Icon altText(String altText) {
    this.altText = altText;
    return this;
  }

  /**
   * Optional. A description of the icon used for accessibility. If unspecified, the default value &#x60;Button&#x60; is provided. As a best practice, you should set a helpful description for what the icon displays, and if applicable, what it does. For example, &#x60;A user&#39;s account portrait&#x60;, or &#x60;Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat&#x60;. If the icon is set in a &#x60;Button&#x60;, the &#x60;altText&#x60; appears as helper text when the user hovers over the button. However, if the button also sets &#x60;text&#x60;, the icon&#39;s &#x60;altText&#x60; is ignored.
   * @return altText
   */
  @javax.annotation.Nullable
  public String getAltText() {
    return altText;
  }

  public void setAltText(String altText) {
    this.altText = altText;
  }


  public GoogleAppsCardV1Icon iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * Display a custom icon hosted at an HTTPS URL. For example: &#x60;&#x60;&#x60; \&quot;iconUrl\&quot;: \&quot;https://developers.google.com/chat/images/quickstart-app-avatar.png\&quot; &#x60;&#x60;&#x60; Supported file types include &#x60;.png&#x60; and &#x60;.jpg&#x60;.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public GoogleAppsCardV1Icon imageType(ImageTypeEnum imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * The crop style applied to the image. In some cases, applying a &#x60;CIRCLE&#x60; crop causes the image to be drawn larger than a built-in icon.
   * @return imageType
   */
  @javax.annotation.Nullable
  public ImageTypeEnum getImageType() {
    return imageType;
  }

  public void setImageType(ImageTypeEnum imageType) {
    this.imageType = imageType;
  }


  public GoogleAppsCardV1Icon knownIcon(String knownIcon) {
    this.knownIcon = knownIcon;
    return this;
  }

  /**
   * Display one of the built-in icons provided by Google Workspace. For example, to display an airplane icon, specify &#x60;AIRPLANE&#x60;. For a bus, specify &#x60;BUS&#x60;. For a full list of supported icons, see [built-in icons](https://developers.google.com/chat/format-messages#builtinicons).
   * @return knownIcon
   */
  @javax.annotation.Nullable
  public String getKnownIcon() {
    return knownIcon;
  }

  public void setKnownIcon(String knownIcon) {
    this.knownIcon = knownIcon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Icon googleAppsCardV1Icon = (GoogleAppsCardV1Icon) o;
    return Objects.equals(this.altText, googleAppsCardV1Icon.altText) &&
        Objects.equals(this.iconUrl, googleAppsCardV1Icon.iconUrl) &&
        Objects.equals(this.imageType, googleAppsCardV1Icon.imageType) &&
        Objects.equals(this.knownIcon, googleAppsCardV1Icon.knownIcon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altText, iconUrl, imageType, knownIcon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Icon {\n");
    sb.append("    altText: ").append(toIndentedString(altText)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    knownIcon: ").append(toIndentedString(knownIcon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("altText");
    openapiFields.add("iconUrl");
    openapiFields.add("imageType");
    openapiFields.add("knownIcon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Icon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Icon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Icon is not found in the empty JSON string", GoogleAppsCardV1Icon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Icon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Icon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("altText") != null && !jsonObj.get("altText").isJsonNull()) && !jsonObj.get("altText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `altText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("altText").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      if ((jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) && !jsonObj.get("imageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageType").toString()));
      }
      // validate the optional field `imageType`
      if (jsonObj.get("imageType") != null && !jsonObj.get("imageType").isJsonNull()) {
        ImageTypeEnum.validateJsonElement(jsonObj.get("imageType"));
      }
      if ((jsonObj.get("knownIcon") != null && !jsonObj.get("knownIcon").isJsonNull()) && !jsonObj.get("knownIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knownIcon").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Icon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Icon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Icon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Icon.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Icon>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Icon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Icon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Icon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Icon
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Icon
   */
  public static GoogleAppsCardV1Icon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Icon.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Icon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

