/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1CardAction;
import org.openapitools.client.model.GoogleAppsCardV1CardFixedFooter;
import org.openapitools.client.model.GoogleAppsCardV1CardHeader;
import org.openapitools.client.model.GoogleAppsCardV1Section;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A card interface displayed in a Google Chat message or Google Workspace Add-on. Cards support a defined layout, interactive UI elements like buttons, and rich media like images. Use cards to present detailed information, gather information from users, and guide users to take a next step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To learn how to build cards, see the following documentation: * For Google Chat apps, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). * For Google Workspace Add-ons, see [Card-based interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards). **Example: Card message for a Google Chat app** ![Example contact card](https://developers.google.com/chat/images/card_api_reference.png) To create the sample card message in Google Chat, use the following JSON: &#x60;&#x60;&#x60; { \&quot;cardsV2\&quot;: [ { \&quot;cardId\&quot;: \&quot;unique-card-id\&quot;, \&quot;card\&quot;: { \&quot;header\&quot;: { \&quot;title\&quot;: \&quot;Sasha\&quot;, \&quot;subtitle\&quot;: \&quot;Software Engineer\&quot;, \&quot;imageUrl\&quot;: \&quot;https://developers.google.com/chat/images/quickstart-app-avatar.png\&quot;, \&quot;imageType\&quot;: \&quot;CIRCLE\&quot;, \&quot;imageAltText\&quot;: \&quot;Avatar for Sasha\&quot;, }, \&quot;sections\&quot;: [ { \&quot;header\&quot;: \&quot;Contact Info\&quot;, \&quot;collapsible\&quot;: true, \&quot;uncollapsibleWidgetsCount\&quot;: 1, \&quot;widgets\&quot;: [ { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;EMAIL\&quot;, }, \&quot;text\&quot;: \&quot;sasha@example.com\&quot;, } }, { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;PERSON\&quot;, }, \&quot;text\&quot;: \&quot;Online\&quot;, }, }, { \&quot;decoratedText\&quot;: { \&quot;startIcon\&quot;: { \&quot;knownIcon\&quot;: \&quot;PHONE\&quot;, }, \&quot;text\&quot;: \&quot;+1 (555) 555-1234\&quot;, } }, { \&quot;buttonList\&quot;: { \&quot;buttons\&quot;: [ { \&quot;text\&quot;: \&quot;Share\&quot;, \&quot;onClick\&quot;: { \&quot;openLink\&quot;: { \&quot;url\&quot;: \&quot;https://example.com/share\&quot;, } } }, { \&quot;text\&quot;: \&quot;Edit\&quot;, \&quot;onClick\&quot;: { \&quot;action\&quot;: { \&quot;function\&quot;: \&quot;goToView\&quot;, \&quot;parameters\&quot;: [ { \&quot;key\&quot;: \&quot;viewType\&quot;, \&quot;value\&quot;: \&quot;EDIT\&quot;, } ], } } }, ], } }, ], }, ], }, } ], } &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Card {
  public static final String SERIALIZED_NAME_CARD_ACTIONS = "cardActions";
  @SerializedName(SERIALIZED_NAME_CARD_ACTIONS)
  private List<GoogleAppsCardV1CardAction> cardActions = new ArrayList<>();

  /**
   * In Google Workspace Add-ons, sets the display properties of the &#x60;peekCardHeader&#x60;. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
   */
  @JsonAdapter(DisplayStyleEnum.Adapter.class)
  public enum DisplayStyleEnum {
    DISPLAY_STYLE_UNSPECIFIED("DISPLAY_STYLE_UNSPECIFIED"),
    
    PEEK("PEEK"),
    
    REPLACE("REPLACE");

    private String value;

    DisplayStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayStyleEnum fromValue(String value) {
      for (DisplayStyleEnum b : DisplayStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_STYLE = "displayStyle";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STYLE)
  private DisplayStyleEnum displayStyle;

  public static final String SERIALIZED_NAME_FIXED_FOOTER = "fixedFooter";
  @SerializedName(SERIALIZED_NAME_FIXED_FOOTER)
  private GoogleAppsCardV1CardFixedFooter fixedFooter;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private GoogleAppsCardV1CardHeader header;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEEK_CARD_HEADER = "peekCardHeader";
  @SerializedName(SERIALIZED_NAME_PEEK_CARD_HEADER)
  private GoogleAppsCardV1CardHeader peekCardHeader;

  /**
   * The divider style between sections.
   */
  @JsonAdapter(SectionDividerStyleEnum.Adapter.class)
  public enum SectionDividerStyleEnum {
    DIVIDER_STYLE_UNSPECIFIED("DIVIDER_STYLE_UNSPECIFIED"),
    
    SOLID_DIVIDER("SOLID_DIVIDER"),
    
    NO_DIVIDER("NO_DIVIDER");

    private String value;

    SectionDividerStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SectionDividerStyleEnum fromValue(String value) {
      for (SectionDividerStyleEnum b : SectionDividerStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SectionDividerStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SectionDividerStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SectionDividerStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SectionDividerStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SectionDividerStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECTION_DIVIDER_STYLE = "sectionDividerStyle";
  @SerializedName(SERIALIZED_NAME_SECTION_DIVIDER_STYLE)
  private SectionDividerStyleEnum sectionDividerStyle;

  public static final String SERIALIZED_NAME_SECTIONS = "sections";
  @SerializedName(SERIALIZED_NAME_SECTIONS)
  private List<GoogleAppsCardV1Section> sections = new ArrayList<>();

  public GoogleAppsCardV1Card() {
  }

  public GoogleAppsCardV1Card cardActions(List<GoogleAppsCardV1CardAction> cardActions) {
    this.cardActions = cardActions;
    return this;
  }

  public GoogleAppsCardV1Card addCardActionsItem(GoogleAppsCardV1CardAction cardActionsItem) {
    if (this.cardActions == null) {
      this.cardActions = new ArrayList<>();
    }
    this.cardActions.add(cardActionsItem);
    return this;
  }

  /**
   * The card&#39;s actions. Actions are added to the card&#39;s toolbar menu. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons): For example, the following JSON constructs a card action menu with &#x60;Settings&#x60; and &#x60;Send Feedback&#x60; options: &#x60;&#x60;&#x60; \&quot;card_actions\&quot;: [ { \&quot;actionLabel\&quot;: \&quot;Settings\&quot;, \&quot;onClick\&quot;: { \&quot;action\&quot;: { \&quot;functionName\&quot;: \&quot;goToView\&quot;, \&quot;parameters\&quot;: [ { \&quot;key\&quot;: \&quot;viewType\&quot;, \&quot;value\&quot;: \&quot;SETTING\&quot; } ], \&quot;loadIndicator\&quot;: \&quot;LoadIndicator.SPINNER\&quot; } } }, { \&quot;actionLabel\&quot;: \&quot;Send Feedback\&quot;, \&quot;onClick\&quot;: { \&quot;openLink\&quot;: { \&quot;url\&quot;: \&quot;https://example.com/feedback\&quot; } } } ] &#x60;&#x60;&#x60;
   * @return cardActions
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1CardAction> getCardActions() {
    return cardActions;
  }

  public void setCardActions(List<GoogleAppsCardV1CardAction> cardActions) {
    this.cardActions = cardActions;
  }


  public GoogleAppsCardV1Card displayStyle(DisplayStyleEnum displayStyle) {
    this.displayStyle = displayStyle;
    return this;
  }

  /**
   * In Google Workspace Add-ons, sets the display properties of the &#x60;peekCardHeader&#x60;. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
   * @return displayStyle
   */
  @javax.annotation.Nullable
  public DisplayStyleEnum getDisplayStyle() {
    return displayStyle;
  }

  public void setDisplayStyle(DisplayStyleEnum displayStyle) {
    this.displayStyle = displayStyle;
  }


  public GoogleAppsCardV1Card fixedFooter(GoogleAppsCardV1CardFixedFooter fixedFooter) {
    this.fixedFooter = fixedFooter;
    return this;
  }

  /**
   * Get fixedFooter
   * @return fixedFooter
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1CardFixedFooter getFixedFooter() {
    return fixedFooter;
  }

  public void setFixedFooter(GoogleAppsCardV1CardFixedFooter fixedFooter) {
    this.fixedFooter = fixedFooter;
  }


  public GoogleAppsCardV1Card header(GoogleAppsCardV1CardHeader header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1CardHeader getHeader() {
    return header;
  }

  public void setHeader(GoogleAppsCardV1CardHeader header) {
    this.header = header;
  }


  public GoogleAppsCardV1Card name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the card. Used as a card identifier in card navigation. [Google Workspace Add-ons](https://developers.google.com/workspace/add-ons):
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAppsCardV1Card peekCardHeader(GoogleAppsCardV1CardHeader peekCardHeader) {
    this.peekCardHeader = peekCardHeader;
    return this;
  }

  /**
   * Get peekCardHeader
   * @return peekCardHeader
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1CardHeader getPeekCardHeader() {
    return peekCardHeader;
  }

  public void setPeekCardHeader(GoogleAppsCardV1CardHeader peekCardHeader) {
    this.peekCardHeader = peekCardHeader;
  }


  public GoogleAppsCardV1Card sectionDividerStyle(SectionDividerStyleEnum sectionDividerStyle) {
    this.sectionDividerStyle = sectionDividerStyle;
    return this;
  }

  /**
   * The divider style between sections.
   * @return sectionDividerStyle
   */
  @javax.annotation.Nullable
  public SectionDividerStyleEnum getSectionDividerStyle() {
    return sectionDividerStyle;
  }

  public void setSectionDividerStyle(SectionDividerStyleEnum sectionDividerStyle) {
    this.sectionDividerStyle = sectionDividerStyle;
  }


  public GoogleAppsCardV1Card sections(List<GoogleAppsCardV1Section> sections) {
    this.sections = sections;
    return this;
  }

  public GoogleAppsCardV1Card addSectionsItem(GoogleAppsCardV1Section sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * Contains a collection of widgets. Each section has its own, optional header. Sections are visually separated by a line divider. For an example in Google Chat apps, see [Card section](https://developers.google.com/chat/ui/widgets/card-section).
   * @return sections
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1Section> getSections() {
    return sections;
  }

  public void setSections(List<GoogleAppsCardV1Section> sections) {
    this.sections = sections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Card googleAppsCardV1Card = (GoogleAppsCardV1Card) o;
    return Objects.equals(this.cardActions, googleAppsCardV1Card.cardActions) &&
        Objects.equals(this.displayStyle, googleAppsCardV1Card.displayStyle) &&
        Objects.equals(this.fixedFooter, googleAppsCardV1Card.fixedFooter) &&
        Objects.equals(this.header, googleAppsCardV1Card.header) &&
        Objects.equals(this.name, googleAppsCardV1Card.name) &&
        Objects.equals(this.peekCardHeader, googleAppsCardV1Card.peekCardHeader) &&
        Objects.equals(this.sectionDividerStyle, googleAppsCardV1Card.sectionDividerStyle) &&
        Objects.equals(this.sections, googleAppsCardV1Card.sections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardActions, displayStyle, fixedFooter, header, name, peekCardHeader, sectionDividerStyle, sections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Card {\n");
    sb.append("    cardActions: ").append(toIndentedString(cardActions)).append("\n");
    sb.append("    displayStyle: ").append(toIndentedString(displayStyle)).append("\n");
    sb.append("    fixedFooter: ").append(toIndentedString(fixedFooter)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peekCardHeader: ").append(toIndentedString(peekCardHeader)).append("\n");
    sb.append("    sectionDividerStyle: ").append(toIndentedString(sectionDividerStyle)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardActions");
    openapiFields.add("displayStyle");
    openapiFields.add("fixedFooter");
    openapiFields.add("header");
    openapiFields.add("name");
    openapiFields.add("peekCardHeader");
    openapiFields.add("sectionDividerStyle");
    openapiFields.add("sections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Card
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Card is not found in the empty JSON string", GoogleAppsCardV1Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cardActions") != null && !jsonObj.get("cardActions").isJsonNull()) {
        JsonArray jsonArraycardActions = jsonObj.getAsJsonArray("cardActions");
        if (jsonArraycardActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cardActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cardActions` to be an array in the JSON string but got `%s`", jsonObj.get("cardActions").toString()));
          }

          // validate the optional field `cardActions` (array)
          for (int i = 0; i < jsonArraycardActions.size(); i++) {
            GoogleAppsCardV1CardAction.validateJsonElement(jsonArraycardActions.get(i));
          };
        }
      }
      if ((jsonObj.get("displayStyle") != null && !jsonObj.get("displayStyle").isJsonNull()) && !jsonObj.get("displayStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayStyle").toString()));
      }
      // validate the optional field `displayStyle`
      if (jsonObj.get("displayStyle") != null && !jsonObj.get("displayStyle").isJsonNull()) {
        DisplayStyleEnum.validateJsonElement(jsonObj.get("displayStyle"));
      }
      // validate the optional field `fixedFooter`
      if (jsonObj.get("fixedFooter") != null && !jsonObj.get("fixedFooter").isJsonNull()) {
        GoogleAppsCardV1CardFixedFooter.validateJsonElement(jsonObj.get("fixedFooter"));
      }
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        GoogleAppsCardV1CardHeader.validateJsonElement(jsonObj.get("header"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `peekCardHeader`
      if (jsonObj.get("peekCardHeader") != null && !jsonObj.get("peekCardHeader").isJsonNull()) {
        GoogleAppsCardV1CardHeader.validateJsonElement(jsonObj.get("peekCardHeader"));
      }
      if ((jsonObj.get("sectionDividerStyle") != null && !jsonObj.get("sectionDividerStyle").isJsonNull()) && !jsonObj.get("sectionDividerStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionDividerStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionDividerStyle").toString()));
      }
      // validate the optional field `sectionDividerStyle`
      if (jsonObj.get("sectionDividerStyle") != null && !jsonObj.get("sectionDividerStyle").isJsonNull()) {
        SectionDividerStyleEnum.validateJsonElement(jsonObj.get("sectionDividerStyle"));
      }
      if (jsonObj.get("sections") != null && !jsonObj.get("sections").isJsonNull()) {
        JsonArray jsonArraysections = jsonObj.getAsJsonArray("sections");
        if (jsonArraysections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sections` to be an array in the JSON string but got `%s`", jsonObj.get("sections").toString()));
          }

          // validate the optional field `sections` (array)
          for (int i = 0; i < jsonArraysections.size(); i++) {
            GoogleAppsCardV1Section.validateJsonElement(jsonArraysections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Card.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Card>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Card given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Card
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Card
   */
  public static GoogleAppsCardV1Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Card.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Card to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

