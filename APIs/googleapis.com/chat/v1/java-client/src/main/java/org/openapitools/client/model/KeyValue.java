/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Button;
import org.openapitools.client.model.OnClick;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A UI element contains a key (label) and a value (content). This element can also contain some actions such as &#x60;onclick&#x60; button.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KeyValue {
  public static final String SERIALIZED_NAME_BOTTOM_LABEL = "bottomLabel";
  @SerializedName(SERIALIZED_NAME_BOTTOM_LABEL)
  private String bottomLabel;

  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private Button button;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_MULTILINE = "contentMultiline";
  @SerializedName(SERIALIZED_NAME_CONTENT_MULTILINE)
  private Boolean contentMultiline;

  /**
   * An enum value that&#39;s replaced by the Chat API with the corresponding icon image.
   */
  @JsonAdapter(IconEnum.Adapter.class)
  public enum IconEnum {
    ICON_UNSPECIFIED("ICON_UNSPECIFIED"),
    
    AIRPLANE("AIRPLANE"),
    
    BOOKMARK("BOOKMARK"),
    
    BUS("BUS"),
    
    CAR("CAR"),
    
    CLOCK("CLOCK"),
    
    CONFIRMATION_NUMBER_ICON("CONFIRMATION_NUMBER_ICON"),
    
    DOLLAR("DOLLAR"),
    
    DESCRIPTION("DESCRIPTION"),
    
    EMAIL("EMAIL"),
    
    EVENT_PERFORMER("EVENT_PERFORMER"),
    
    EVENT_SEAT("EVENT_SEAT"),
    
    FLIGHT_ARRIVAL("FLIGHT_ARRIVAL"),
    
    FLIGHT_DEPARTURE("FLIGHT_DEPARTURE"),
    
    HOTEL("HOTEL"),
    
    HOTEL_ROOM_TYPE("HOTEL_ROOM_TYPE"),
    
    INVITE("INVITE"),
    
    MAP_PIN("MAP_PIN"),
    
    MEMBERSHIP("MEMBERSHIP"),
    
    MULTIPLE_PEOPLE("MULTIPLE_PEOPLE"),
    
    OFFER("OFFER"),
    
    PERSON("PERSON"),
    
    PHONE("PHONE"),
    
    RESTAURANT_ICON("RESTAURANT_ICON"),
    
    SHOPPING_CART("SHOPPING_CART"),
    
    STAR("STAR"),
    
    STORE("STORE"),
    
    TICKET("TICKET"),
    
    TRAIN("TRAIN"),
    
    VIDEO_CAMERA("VIDEO_CAMERA"),
    
    VIDEO_PLAY("VIDEO_PLAY");

    private String value;

    IconEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IconEnum fromValue(String value) {
      for (IconEnum b : IconEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IconEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IconEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IconEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IconEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IconEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private IconEnum icon;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_ON_CLICK = "onClick";
  @SerializedName(SERIALIZED_NAME_ON_CLICK)
  private OnClick onClick;

  public static final String SERIALIZED_NAME_TOP_LABEL = "topLabel";
  @SerializedName(SERIALIZED_NAME_TOP_LABEL)
  private String topLabel;

  public KeyValue() {
  }

  public KeyValue bottomLabel(String bottomLabel) {
    this.bottomLabel = bottomLabel;
    return this;
  }

  /**
   * The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   * @return bottomLabel
   */
  @javax.annotation.Nullable
  public String getBottomLabel() {
    return bottomLabel;
  }

  public void setBottomLabel(String bottomLabel) {
    this.bottomLabel = bottomLabel;
  }


  public KeyValue button(Button button) {
    this.button = button;
    return this;
  }

  /**
   * Get button
   * @return button
   */
  @javax.annotation.Nullable
  public Button getButton() {
    return button;
  }

  public void setButton(Button button) {
    this.button = button;
  }


  public KeyValue content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public KeyValue contentMultiline(Boolean contentMultiline) {
    this.contentMultiline = contentMultiline;
    return this;
  }

  /**
   * If the content should be multiline.
   * @return contentMultiline
   */
  @javax.annotation.Nullable
  public Boolean getContentMultiline() {
    return contentMultiline;
  }

  public void setContentMultiline(Boolean contentMultiline) {
    this.contentMultiline = contentMultiline;
  }


  public KeyValue icon(IconEnum icon) {
    this.icon = icon;
    return this;
  }

  /**
   * An enum value that&#39;s replaced by the Chat API with the corresponding icon image.
   * @return icon
   */
  @javax.annotation.Nullable
  public IconEnum getIcon() {
    return icon;
  }

  public void setIcon(IconEnum icon) {
    this.icon = icon;
  }


  public KeyValue iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The icon specified by a URL.
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public KeyValue onClick(OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * Get onClick
   * @return onClick
   */
  @javax.annotation.Nullable
  public OnClick getOnClick() {
    return onClick;
  }

  public void setOnClick(OnClick onClick) {
    this.onClick = onClick;
  }


  public KeyValue topLabel(String topLabel) {
    this.topLabel = topLabel;
    return this;
  }

  /**
   * The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   * @return topLabel
   */
  @javax.annotation.Nullable
  public String getTopLabel() {
    return topLabel;
  }

  public void setTopLabel(String topLabel) {
    this.topLabel = topLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyValue keyValue = (KeyValue) o;
    return Objects.equals(this.bottomLabel, keyValue.bottomLabel) &&
        Objects.equals(this.button, keyValue.button) &&
        Objects.equals(this.content, keyValue.content) &&
        Objects.equals(this.contentMultiline, keyValue.contentMultiline) &&
        Objects.equals(this.icon, keyValue.icon) &&
        Objects.equals(this.iconUrl, keyValue.iconUrl) &&
        Objects.equals(this.onClick, keyValue.onClick) &&
        Objects.equals(this.topLabel, keyValue.topLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottomLabel, button, content, contentMultiline, icon, iconUrl, onClick, topLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyValue {\n");
    sb.append("    bottomLabel: ").append(toIndentedString(bottomLabel)).append("\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentMultiline: ").append(toIndentedString(contentMultiline)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    onClick: ").append(toIndentedString(onClick)).append("\n");
    sb.append("    topLabel: ").append(toIndentedString(topLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bottomLabel");
    openapiFields.add("button");
    openapiFields.add("content");
    openapiFields.add("contentMultiline");
    openapiFields.add("icon");
    openapiFields.add("iconUrl");
    openapiFields.add("onClick");
    openapiFields.add("topLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeyValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeyValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyValue is not found in the empty JSON string", KeyValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeyValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeyValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bottomLabel") != null && !jsonObj.get("bottomLabel").isJsonNull()) && !jsonObj.get("bottomLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottomLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottomLabel").toString()));
      }
      // validate the optional field `button`
      if (jsonObj.get("button") != null && !jsonObj.get("button").isJsonNull()) {
        Button.validateJsonElement(jsonObj.get("button"));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        IconEnum.validateJsonElement(jsonObj.get("icon"));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      // validate the optional field `onClick`
      if (jsonObj.get("onClick") != null && !jsonObj.get("onClick").isJsonNull()) {
        OnClick.validateJsonElement(jsonObj.get("onClick"));
      }
      if ((jsonObj.get("topLabel") != null && !jsonObj.get("topLabel").isJsonNull()) && !jsonObj.get("topLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyValue.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyValue>() {
           @Override
           public void write(JsonWriter out, KeyValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeyValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeyValue
   * @throws IOException if the JSON string is invalid with respect to KeyValue
   */
  public static KeyValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyValue.class);
  }

  /**
   * Convert an instance of KeyValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

