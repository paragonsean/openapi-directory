/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1BorderStyle;
import org.openapitools.client.model.GoogleAppsCardV1GridItem;
import org.openapitools.client.model.GoogleAppsCardV1OnClick;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Displays a grid with a collection of items. Items can only include text or images. For responsive columns, or to include more than text or images, use &#x60;Columns&#x60;. For an example in Google Chat apps, see [Grid](https://developers.google.com/chat/ui/widgets/grid). A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): For example, the following JSON creates a 2 column grid with a single item: &#x60;&#x60;&#x60; \&quot;grid\&quot;: { \&quot;title\&quot;: \&quot;A fine collection of items\&quot;, \&quot;columnCount\&quot;: 2, \&quot;borderStyle\&quot;: { \&quot;type\&quot;: \&quot;STROKE\&quot;, \&quot;cornerRadius\&quot;: 4 }, \&quot;items\&quot;: [ { \&quot;image\&quot;: { \&quot;imageUri\&quot;: \&quot;https://www.example.com/image.png\&quot;, \&quot;cropStyle\&quot;: { \&quot;type\&quot;: \&quot;SQUARE\&quot; }, \&quot;borderStyle\&quot;: { \&quot;type\&quot;: \&quot;STROKE\&quot; } }, \&quot;title\&quot;: \&quot;An item\&quot;, \&quot;textAlignment\&quot;: \&quot;CENTER\&quot; } ], \&quot;onClick\&quot;: { \&quot;openLink\&quot;: { \&quot;url\&quot;: \&quot;https://www.example.com\&quot; } } } &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Grid {
  public static final String SERIALIZED_NAME_BORDER_STYLE = "borderStyle";
  @SerializedName(SERIALIZED_NAME_BORDER_STYLE)
  private GoogleAppsCardV1BorderStyle borderStyle;

  public static final String SERIALIZED_NAME_COLUMN_COUNT = "columnCount";
  @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
  private Integer columnCount;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<GoogleAppsCardV1GridItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_CLICK = "onClick";
  @SerializedName(SERIALIZED_NAME_ON_CLICK)
  private GoogleAppsCardV1OnClick onClick;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public GoogleAppsCardV1Grid() {
  }

  public GoogleAppsCardV1Grid borderStyle(GoogleAppsCardV1BorderStyle borderStyle) {
    this.borderStyle = borderStyle;
    return this;
  }

  /**
   * Get borderStyle
   * @return borderStyle
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1BorderStyle getBorderStyle() {
    return borderStyle;
  }

  public void setBorderStyle(GoogleAppsCardV1BorderStyle borderStyle) {
    this.borderStyle = borderStyle;
  }


  public GoogleAppsCardV1Grid columnCount(Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * The number of columns to display in the grid. A default value is used if this field isn&#39;t specified, and that default value is different depending on where the grid is shown (dialog versus companion).
   * @return columnCount
   */
  @javax.annotation.Nullable
  public Integer getColumnCount() {
    return columnCount;
  }

  public void setColumnCount(Integer columnCount) {
    this.columnCount = columnCount;
  }


  public GoogleAppsCardV1Grid items(List<GoogleAppsCardV1GridItem> items) {
    this.items = items;
    return this;
  }

  public GoogleAppsCardV1Grid addItemsItem(GoogleAppsCardV1GridItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The items to display in the grid.
   * @return items
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1GridItem> getItems() {
    return items;
  }

  public void setItems(List<GoogleAppsCardV1GridItem> items) {
    this.items = items;
  }


  public GoogleAppsCardV1Grid onClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * Get onClick
   * @return onClick
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1OnClick getOnClick() {
    return onClick;
  }

  public void setOnClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
  }


  public GoogleAppsCardV1Grid title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The text that displays in the grid header.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Grid googleAppsCardV1Grid = (GoogleAppsCardV1Grid) o;
    return Objects.equals(this.borderStyle, googleAppsCardV1Grid.borderStyle) &&
        Objects.equals(this.columnCount, googleAppsCardV1Grid.columnCount) &&
        Objects.equals(this.items, googleAppsCardV1Grid.items) &&
        Objects.equals(this.onClick, googleAppsCardV1Grid.onClick) &&
        Objects.equals(this.title, googleAppsCardV1Grid.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(borderStyle, columnCount, items, onClick, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Grid {\n");
    sb.append("    borderStyle: ").append(toIndentedString(borderStyle)).append("\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    onClick: ").append(toIndentedString(onClick)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("borderStyle");
    openapiFields.add("columnCount");
    openapiFields.add("items");
    openapiFields.add("onClick");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Grid
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Grid.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Grid is not found in the empty JSON string", GoogleAppsCardV1Grid.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Grid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Grid` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `borderStyle`
      if (jsonObj.get("borderStyle") != null && !jsonObj.get("borderStyle").isJsonNull()) {
        GoogleAppsCardV1BorderStyle.validateJsonElement(jsonObj.get("borderStyle"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            GoogleAppsCardV1GridItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the optional field `onClick`
      if (jsonObj.get("onClick") != null && !jsonObj.get("onClick").isJsonNull()) {
        GoogleAppsCardV1OnClick.validateJsonElement(jsonObj.get("onClick"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Grid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Grid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Grid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Grid.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Grid>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Grid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Grid read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Grid given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Grid
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Grid
   */
  public static GoogleAppsCardV1Grid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Grid.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Grid to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

