/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SlashCommandMetadata;
import org.openapitools.client.model.UserMentionMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Annotations associated with the plain-text body of the message. To add basic formatting to a text message, see [Format text messages](https://developers.google.com/chat/format-messages). Example plain-text message body: &#x60;&#x60;&#x60; Hello @FooBot how are you!\&quot; &#x60;&#x60;&#x60; The corresponding annotations metadata: &#x60;&#x60;&#x60; \&quot;annotations\&quot;:[{ \&quot;type\&quot;:\&quot;USER_MENTION\&quot;, \&quot;startIndex\&quot;:6, \&quot;length\&quot;:7, \&quot;userMention\&quot;: { \&quot;user\&quot;: { \&quot;name\&quot;:\&quot;users/{user}\&quot;, \&quot;displayName\&quot;:\&quot;FooBot\&quot;, \&quot;avatarUrl\&quot;:\&quot;https://goo.gl/aeDtrS\&quot;, \&quot;type\&quot;:\&quot;BOT\&quot; }, \&quot;type\&quot;:\&quot;MENTION\&quot; } }] &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Annotation {
  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_SLASH_COMMAND = "slashCommand";
  @SerializedName(SERIALIZED_NAME_SLASH_COMMAND)
  private SlashCommandMetadata slashCommand;

  public static final String SERIALIZED_NAME_START_INDEX = "startIndex";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  /**
   * The type of this annotation.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ANNOTATION_TYPE_UNSPECIFIED("ANNOTATION_TYPE_UNSPECIFIED"),
    
    USER_MENTION("USER_MENTION"),
    
    SLASH_COMMAND("SLASH_COMMAND");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER_MENTION = "userMention";
  @SerializedName(SERIALIZED_NAME_USER_MENTION)
  private UserMentionMetadata userMention;

  public Annotation() {
  }

  public Annotation length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Length of the substring in the plain-text message body this annotation corresponds to.
   * @return length
   */
  @javax.annotation.Nullable
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public Annotation slashCommand(SlashCommandMetadata slashCommand) {
    this.slashCommand = slashCommand;
    return this;
  }

  /**
   * Get slashCommand
   * @return slashCommand
   */
  @javax.annotation.Nullable
  public SlashCommandMetadata getSlashCommand() {
    return slashCommand;
  }

  public void setSlashCommand(SlashCommandMetadata slashCommand) {
    this.slashCommand = slashCommand;
  }


  public Annotation startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public Annotation type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this annotation.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Annotation userMention(UserMentionMetadata userMention) {
    this.userMention = userMention;
    return this;
  }

  /**
   * Get userMention
   * @return userMention
   */
  @javax.annotation.Nullable
  public UserMentionMetadata getUserMention() {
    return userMention;
  }

  public void setUserMention(UserMentionMetadata userMention) {
    this.userMention = userMention;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annotation annotation = (Annotation) o;
    return Objects.equals(this.length, annotation.length) &&
        Objects.equals(this.slashCommand, annotation.slashCommand) &&
        Objects.equals(this.startIndex, annotation.startIndex) &&
        Objects.equals(this.type, annotation.type) &&
        Objects.equals(this.userMention, annotation.userMention);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, slashCommand, startIndex, type, userMention);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annotation {\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    slashCommand: ").append(toIndentedString(slashCommand)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userMention: ").append(toIndentedString(userMention)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("length");
    openapiFields.add("slashCommand");
    openapiFields.add("startIndex");
    openapiFields.add("type");
    openapiFields.add("userMention");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Annotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Annotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Annotation is not found in the empty JSON string", Annotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Annotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Annotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `slashCommand`
      if (jsonObj.get("slashCommand") != null && !jsonObj.get("slashCommand").isJsonNull()) {
        SlashCommandMetadata.validateJsonElement(jsonObj.get("slashCommand"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `userMention`
      if (jsonObj.get("userMention") != null && !jsonObj.get("userMention").isJsonNull()) {
        UserMentionMetadata.validateJsonElement(jsonObj.get("userMention"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Annotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Annotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Annotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Annotation.class));

       return (TypeAdapter<T>) new TypeAdapter<Annotation>() {
           @Override
           public void write(JsonWriter out, Annotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Annotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Annotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Annotation
   * @throws IOException if the JSON string is invalid with respect to Annotation
   */
  public static Annotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Annotation.class);
  }

  /**
   * Convert an instance of Annotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

