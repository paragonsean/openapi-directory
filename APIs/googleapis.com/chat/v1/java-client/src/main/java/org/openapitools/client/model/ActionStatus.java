/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the status for a request to either invoke or submit a [dialog](https://developers.google.com/chat/how-tos/dialogs).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionStatus {
  /**
   * The status code.
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    OK("OK"),
    
    CANCELLED("CANCELLED"),
    
    UNKNOWN("UNKNOWN"),
    
    INVALID_ARGUMENT("INVALID_ARGUMENT"),
    
    DEADLINE_EXCEEDED("DEADLINE_EXCEEDED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    ALREADY_EXISTS("ALREADY_EXISTS"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    UNAUTHENTICATED("UNAUTHENTICATED"),
    
    RESOURCE_EXHAUSTED("RESOURCE_EXHAUSTED"),
    
    FAILED_PRECONDITION("FAILED_PRECONDITION"),
    
    ABORTED("ABORTED"),
    
    OUT_OF_RANGE("OUT_OF_RANGE"),
    
    UNIMPLEMENTED("UNIMPLEMENTED"),
    
    INTERNAL("INTERNAL"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    DATA_LOSS("DATA_LOSS");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(String value) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCodeEnum statusCode;

  public static final String SERIALIZED_NAME_USER_FACING_MESSAGE = "userFacingMessage";
  @SerializedName(SERIALIZED_NAME_USER_FACING_MESSAGE)
  private String userFacingMessage;

  public ActionStatus() {
  }

  public ActionStatus statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * The status code.
   * @return statusCode
   */
  @javax.annotation.Nullable
  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }


  public ActionStatus userFacingMessage(String userFacingMessage) {
    this.userFacingMessage = userFacingMessage;
    return this;
  }

  /**
   * The message to send users about the status of their request. If unset, a generic message based on the &#x60;status_code&#x60; is sent.
   * @return userFacingMessage
   */
  @javax.annotation.Nullable
  public String getUserFacingMessage() {
    return userFacingMessage;
  }

  public void setUserFacingMessage(String userFacingMessage) {
    this.userFacingMessage = userFacingMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionStatus actionStatus = (ActionStatus) o;
    return Objects.equals(this.statusCode, actionStatus.statusCode) &&
        Objects.equals(this.userFacingMessage, actionStatus.userFacingMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCode, userFacingMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionStatus {\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    userFacingMessage: ").append(toIndentedString(userFacingMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("statusCode");
    openapiFields.add("userFacingMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionStatus is not found in the empty JSON string", ActionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      // validate the optional field `statusCode`
      if (jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) {
        StatusCodeEnum.validateJsonElement(jsonObj.get("statusCode"));
      }
      if ((jsonObj.get("userFacingMessage") != null && !jsonObj.get("userFacingMessage").isJsonNull()) && !jsonObj.get("userFacingMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userFacingMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userFacingMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionStatus>() {
           @Override
           public void write(JsonWriter out, ActionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionStatus
   * @throws IOException if the JSON string is invalid with respect to ActionStatus
   */
  public static ActionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionStatus.class);
  }

  /**
   * Convert an instance of ActionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

