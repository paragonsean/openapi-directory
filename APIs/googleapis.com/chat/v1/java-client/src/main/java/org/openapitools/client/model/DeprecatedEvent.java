/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CommonEventObject;
import org.openapitools.client.model.FormAction;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Space;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Google Chat app interaction event. To learn about interaction events, see [Receive and respond to interactions with your Google Chat app](https://developers.google.com/chat/api/guides/message-formats). To learn about event types and for example event payloads, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeprecatedEvent {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private FormAction action;

  public static final String SERIALIZED_NAME_COMMON = "common";
  @SerializedName(SERIALIZED_NAME_COMMON)
  private CommonEventObject common;

  public static final String SERIALIZED_NAME_CONFIG_COMPLETE_REDIRECT_URL = "configCompleteRedirectUrl";
  @SerializedName(SERIALIZED_NAME_CONFIG_COMPLETE_REDIRECT_URL)
  private String configCompleteRedirectUrl;

  /**
   * The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.
   */
  @JsonAdapter(DialogEventTypeEnum.Adapter.class)
  public enum DialogEventTypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    REQUEST_DIALOG("REQUEST_DIALOG"),
    
    SUBMIT_DIALOG("SUBMIT_DIALOG"),
    
    CANCEL_DIALOG("CANCEL_DIALOG");

    private String value;

    DialogEventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DialogEventTypeEnum fromValue(String value) {
      for (DialogEventTypeEnum b : DialogEventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DialogEventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DialogEventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DialogEventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DialogEventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DialogEventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIALOG_EVENT_TYPE = "dialogEventType";
  @SerializedName(SERIALIZED_NAME_DIALOG_EVENT_TYPE)
  private DialogEventTypeEnum dialogEventType;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private String eventTime;

  public static final String SERIALIZED_NAME_IS_DIALOG_EVENT = "isDialogEvent";
  @SerializedName(SERIALIZED_NAME_IS_DIALOG_EVENT)
  private Boolean isDialogEvent;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private Message message;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Space space;

  public static final String SERIALIZED_NAME_THREAD_KEY = "threadKey";
  @SerializedName(SERIALIZED_NAME_THREAD_KEY)
  private String threadKey;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  /**
   * The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    MESSAGE("MESSAGE"),
    
    ADDED_TO_SPACE("ADDED_TO_SPACE"),
    
    REMOVED_FROM_SPACE("REMOVED_FROM_SPACE"),
    
    CARD_CLICKED("CARD_CLICKED"),
    
    WIDGET_UPDATED("WIDGET_UPDATED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public DeprecatedEvent() {
  }

  public DeprecatedEvent action(FormAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public FormAction getAction() {
    return action;
  }

  public void setAction(FormAction action) {
    this.action = action;
  }


  public DeprecatedEvent common(CommonEventObject common) {
    this.common = common;
    return this;
  }

  /**
   * Get common
   * @return common
   */
  @javax.annotation.Nullable
  public CommonEventObject getCommon() {
    return common;
  }

  public void setCommon(CommonEventObject common) {
    this.common = common;
  }


  public DeprecatedEvent configCompleteRedirectUrl(String configCompleteRedirectUrl) {
    this.configCompleteRedirectUrl = configCompleteRedirectUrl;
    return this;
  }

  /**
   * The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services &amp; tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).
   * @return configCompleteRedirectUrl
   */
  @javax.annotation.Nullable
  public String getConfigCompleteRedirectUrl() {
    return configCompleteRedirectUrl;
  }

  public void setConfigCompleteRedirectUrl(String configCompleteRedirectUrl) {
    this.configCompleteRedirectUrl = configCompleteRedirectUrl;
  }


  public DeprecatedEvent dialogEventType(DialogEventTypeEnum dialogEventType) {
    this.dialogEventType = dialogEventType;
    return this;
  }

  /**
   * The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.
   * @return dialogEventType
   */
  @javax.annotation.Nullable
  public DialogEventTypeEnum getDialogEventType() {
    return dialogEventType;
  }

  public void setDialogEventType(DialogEventTypeEnum dialogEventType) {
    this.dialogEventType = dialogEventType;
  }


  public DeprecatedEvent eventTime(String eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * The timestamp indicating when the interaction event occurred.
   * @return eventTime
   */
  @javax.annotation.Nullable
  public String getEventTime() {
    return eventTime;
  }

  public void setEventTime(String eventTime) {
    this.eventTime = eventTime;
  }


  public DeprecatedEvent isDialogEvent(Boolean isDialogEvent) {
    this.isDialogEvent = isDialogEvent;
    return this;
  }

  /**
   * For &#x60;CARD_CLICKED&#x60; interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).
   * @return isDialogEvent
   */
  @javax.annotation.Nullable
  public Boolean getIsDialogEvent() {
    return isDialogEvent;
  }

  public void setIsDialogEvent(Boolean isDialogEvent) {
    this.isDialogEvent = isDialogEvent;
  }


  public DeprecatedEvent message(Message message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public Message getMessage() {
    return message;
  }

  public void setMessage(Message message) {
    this.message = message;
  }


  public DeprecatedEvent space(Space space) {
    this.space = space;
    return this;
  }

  /**
   * Get space
   * @return space
   */
  @javax.annotation.Nullable
  public Space getSpace() {
    return space;
  }

  public void setSpace(Space space) {
    this.space = space;
  }


  public DeprecatedEvent threadKey(String threadKey) {
    this.threadKey = threadKey;
    return this;
  }

  /**
   * The Chat app-defined key for the thread related to the interaction event. See [&#x60;spaces.messages.thread.threadKey&#x60;](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.
   * @return threadKey
   */
  @javax.annotation.Nullable
  public String getThreadKey() {
    return threadKey;
  }

  public void setThreadKey(String threadKey) {
    this.threadKey = threadKey;
  }


  public DeprecatedEvent token(String token) {
    this.token = token;
    return this;
  }

  /**
   * A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don&#39;t use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public DeprecatedEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DeprecatedEvent user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeprecatedEvent deprecatedEvent = (DeprecatedEvent) o;
    return Objects.equals(this.action, deprecatedEvent.action) &&
        Objects.equals(this.common, deprecatedEvent.common) &&
        Objects.equals(this.configCompleteRedirectUrl, deprecatedEvent.configCompleteRedirectUrl) &&
        Objects.equals(this.dialogEventType, deprecatedEvent.dialogEventType) &&
        Objects.equals(this.eventTime, deprecatedEvent.eventTime) &&
        Objects.equals(this.isDialogEvent, deprecatedEvent.isDialogEvent) &&
        Objects.equals(this.message, deprecatedEvent.message) &&
        Objects.equals(this.space, deprecatedEvent.space) &&
        Objects.equals(this.threadKey, deprecatedEvent.threadKey) &&
        Objects.equals(this.token, deprecatedEvent.token) &&
        Objects.equals(this.type, deprecatedEvent.type) &&
        Objects.equals(this.user, deprecatedEvent.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, common, configCompleteRedirectUrl, dialogEventType, eventTime, isDialogEvent, message, space, threadKey, token, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeprecatedEvent {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    common: ").append(toIndentedString(common)).append("\n");
    sb.append("    configCompleteRedirectUrl: ").append(toIndentedString(configCompleteRedirectUrl)).append("\n");
    sb.append("    dialogEventType: ").append(toIndentedString(dialogEventType)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    isDialogEvent: ").append(toIndentedString(isDialogEvent)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    threadKey: ").append(toIndentedString(threadKey)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("common");
    openapiFields.add("configCompleteRedirectUrl");
    openapiFields.add("dialogEventType");
    openapiFields.add("eventTime");
    openapiFields.add("isDialogEvent");
    openapiFields.add("message");
    openapiFields.add("space");
    openapiFields.add("threadKey");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeprecatedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeprecatedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeprecatedEvent is not found in the empty JSON string", DeprecatedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeprecatedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeprecatedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        FormAction.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `common`
      if (jsonObj.get("common") != null && !jsonObj.get("common").isJsonNull()) {
        CommonEventObject.validateJsonElement(jsonObj.get("common"));
      }
      if ((jsonObj.get("configCompleteRedirectUrl") != null && !jsonObj.get("configCompleteRedirectUrl").isJsonNull()) && !jsonObj.get("configCompleteRedirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configCompleteRedirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configCompleteRedirectUrl").toString()));
      }
      if ((jsonObj.get("dialogEventType") != null && !jsonObj.get("dialogEventType").isJsonNull()) && !jsonObj.get("dialogEventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dialogEventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dialogEventType").toString()));
      }
      // validate the optional field `dialogEventType`
      if (jsonObj.get("dialogEventType") != null && !jsonObj.get("dialogEventType").isJsonNull()) {
        DialogEventTypeEnum.validateJsonElement(jsonObj.get("dialogEventType"));
      }
      if ((jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) && !jsonObj.get("eventTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventTime").toString()));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `space`
      if (jsonObj.get("space") != null && !jsonObj.get("space").isJsonNull()) {
        Space.validateJsonElement(jsonObj.get("space"));
      }
      if ((jsonObj.get("threadKey") != null && !jsonObj.get("threadKey").isJsonNull()) && !jsonObj.get("threadKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadKey").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeprecatedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeprecatedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeprecatedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeprecatedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<DeprecatedEvent>() {
           @Override
           public void write(JsonWriter out, DeprecatedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeprecatedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeprecatedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeprecatedEvent
   * @throws IOException if the JSON string is invalid with respect to DeprecatedEvent
   */
  public static DeprecatedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeprecatedEvent.class);
  }

  /**
   * Convert an instance of DeprecatedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

