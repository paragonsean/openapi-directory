/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1ActionParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An action that describes the behavior when the form is submitted. For example, you can invoke an Apps Script script to handle the form. If the action is triggered, the form values are sent to the server. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Action {
  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  /**
   * Optional. Required when opening a [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in response to an interaction with a user, such as a user clicking a button in a card message. If unspecified, the app responds by executing an &#x60;action&#x60;—like opening a link or running a function—as normal. By specifying an &#x60;interaction&#x60;, the app can respond in special interactive ways. For example, by setting &#x60;interaction&#x60; to &#x60;OPEN_DIALOG&#x60;, the app can open a [dialog](https://developers.google.com/chat/how-tos/dialogs). When specified, a loading indicator isn&#39;t shown. If specified for an add-on, the entire card is stripped and nothing is shown in the client. [Google Chat apps](https://developers.google.com/chat):
   */
  @JsonAdapter(InteractionEnum.Adapter.class)
  public enum InteractionEnum {
    INTERACTION_UNSPECIFIED("INTERACTION_UNSPECIFIED"),
    
    OPEN_DIALOG("OPEN_DIALOG");

    private String value;

    InteractionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InteractionEnum fromValue(String value) {
      for (InteractionEnum b : InteractionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InteractionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InteractionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InteractionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InteractionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InteractionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERACTION = "interaction";
  @SerializedName(SERIALIZED_NAME_INTERACTION)
  private InteractionEnum interaction;

  /**
   * Specifies the loading indicator that the action displays while making the call to the action.
   */
  @JsonAdapter(LoadIndicatorEnum.Adapter.class)
  public enum LoadIndicatorEnum {
    SPINNER("SPINNER"),
    
    NONE("NONE");

    private String value;

    LoadIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadIndicatorEnum fromValue(String value) {
      for (LoadIndicatorEnum b : LoadIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoadIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoadIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoadIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOAD_INDICATOR = "loadIndicator";
  @SerializedName(SERIALIZED_NAME_LOAD_INDICATOR)
  private LoadIndicatorEnum loadIndicator;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<GoogleAppsCardV1ActionParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSIST_VALUES = "persistValues";
  @SerializedName(SERIALIZED_NAME_PERSIST_VALUES)
  private Boolean persistValues;

  public GoogleAppsCardV1Action() {
  }

  public GoogleAppsCardV1Action function(String function) {
    this.function = function;
    return this;
  }

  /**
   * A custom function to invoke when the containing element is clicked or othrwise activated. For example usage, see [Create interactive cards](https://developers.google.com/chat/how-tos/cards-onclick).
   * @return function
   */
  @javax.annotation.Nullable
  public String getFunction() {
    return function;
  }

  public void setFunction(String function) {
    this.function = function;
  }


  public GoogleAppsCardV1Action interaction(InteractionEnum interaction) {
    this.interaction = interaction;
    return this;
  }

  /**
   * Optional. Required when opening a [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in response to an interaction with a user, such as a user clicking a button in a card message. If unspecified, the app responds by executing an &#x60;action&#x60;—like opening a link or running a function—as normal. By specifying an &#x60;interaction&#x60;, the app can respond in special interactive ways. For example, by setting &#x60;interaction&#x60; to &#x60;OPEN_DIALOG&#x60;, the app can open a [dialog](https://developers.google.com/chat/how-tos/dialogs). When specified, a loading indicator isn&#39;t shown. If specified for an add-on, the entire card is stripped and nothing is shown in the client. [Google Chat apps](https://developers.google.com/chat):
   * @return interaction
   */
  @javax.annotation.Nullable
  public InteractionEnum getInteraction() {
    return interaction;
  }

  public void setInteraction(InteractionEnum interaction) {
    this.interaction = interaction;
  }


  public GoogleAppsCardV1Action loadIndicator(LoadIndicatorEnum loadIndicator) {
    this.loadIndicator = loadIndicator;
    return this;
  }

  /**
   * Specifies the loading indicator that the action displays while making the call to the action.
   * @return loadIndicator
   */
  @javax.annotation.Nullable
  public LoadIndicatorEnum getLoadIndicator() {
    return loadIndicator;
  }

  public void setLoadIndicator(LoadIndicatorEnum loadIndicator) {
    this.loadIndicator = loadIndicator;
  }


  public GoogleAppsCardV1Action parameters(List<GoogleAppsCardV1ActionParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public GoogleAppsCardV1Action addParametersItem(GoogleAppsCardV1ActionParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * List of action parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1ActionParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<GoogleAppsCardV1ActionParameter> parameters) {
    this.parameters = parameters;
  }


  public GoogleAppsCardV1Action persistValues(Boolean persistValues) {
    this.persistValues = persistValues;
    return this;
  }

  /**
   * Indicates whether form values persist after the action. The default value is &#x60;false&#x60;. If &#x60;true&#x60;, form values remain after the action is triggered. To let the user make changes while the action is being processed, set [&#x60;LoadIndicator&#x60;](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to &#x60;NONE&#x60;. For [card messages](https://developers.google.com/chat/api/guides/v1/messages/create#create) in Chat apps, you must also set the action&#39;s [&#x60;ResponseType&#x60;](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#responsetype) to &#x60;UPDATE_MESSAGE&#x60; and use the same [&#x60;card_id&#x60;](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages#CardWithId) from the card that contained the action. If &#x60;false&#x60;, the form values are cleared when the action is triggered. To prevent the user from making changes while the action is being processed, set [&#x60;LoadIndicator&#x60;](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator) to &#x60;SPINNER&#x60;.
   * @return persistValues
   */
  @javax.annotation.Nullable
  public Boolean getPersistValues() {
    return persistValues;
  }

  public void setPersistValues(Boolean persistValues) {
    this.persistValues = persistValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Action googleAppsCardV1Action = (GoogleAppsCardV1Action) o;
    return Objects.equals(this.function, googleAppsCardV1Action.function) &&
        Objects.equals(this.interaction, googleAppsCardV1Action.interaction) &&
        Objects.equals(this.loadIndicator, googleAppsCardV1Action.loadIndicator) &&
        Objects.equals(this.parameters, googleAppsCardV1Action.parameters) &&
        Objects.equals(this.persistValues, googleAppsCardV1Action.persistValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(function, interaction, loadIndicator, parameters, persistValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Action {\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    interaction: ").append(toIndentedString(interaction)).append("\n");
    sb.append("    loadIndicator: ").append(toIndentedString(loadIndicator)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    persistValues: ").append(toIndentedString(persistValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("function");
    openapiFields.add("interaction");
    openapiFields.add("loadIndicator");
    openapiFields.add("parameters");
    openapiFields.add("persistValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Action
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Action is not found in the empty JSON string", GoogleAppsCardV1Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("function") != null && !jsonObj.get("function").isJsonNull()) && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      if ((jsonObj.get("interaction") != null && !jsonObj.get("interaction").isJsonNull()) && !jsonObj.get("interaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interaction").toString()));
      }
      // validate the optional field `interaction`
      if (jsonObj.get("interaction") != null && !jsonObj.get("interaction").isJsonNull()) {
        InteractionEnum.validateJsonElement(jsonObj.get("interaction"));
      }
      if ((jsonObj.get("loadIndicator") != null && !jsonObj.get("loadIndicator").isJsonNull()) && !jsonObj.get("loadIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loadIndicator").toString()));
      }
      // validate the optional field `loadIndicator`
      if (jsonObj.get("loadIndicator") != null && !jsonObj.get("loadIndicator").isJsonNull()) {
        LoadIndicatorEnum.validateJsonElement(jsonObj.get("loadIndicator"));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            GoogleAppsCardV1ActionParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Action.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Action>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Action given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Action
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Action
   */
  public static GoogleAppsCardV1Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Action.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Action to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

