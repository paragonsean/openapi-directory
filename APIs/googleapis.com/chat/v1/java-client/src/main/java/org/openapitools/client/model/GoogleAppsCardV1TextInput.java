/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsCardV1Action;
import org.openapitools.client.model.GoogleAppsCardV1Suggestions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A field in which users can enter text. Supports suggestions and on-change actions. For an example in Google Chat apps, see [Text input](https://developers.google.com/chat/ui/widgets/text-input). Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). When you need to collect undefined or abstract data from users, use a text input. To collect defined or enumerated data from users, use the SelectionInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1TextInput {
  public static final String SERIALIZED_NAME_AUTO_COMPLETE_ACTION = "autoCompleteAction";
  @SerializedName(SERIALIZED_NAME_AUTO_COMPLETE_ACTION)
  private GoogleAppsCardV1Action autoCompleteAction;

  public static final String SERIALIZED_NAME_HINT_TEXT = "hintText";
  @SerializedName(SERIALIZED_NAME_HINT_TEXT)
  private String hintText;

  public static final String SERIALIZED_NAME_INITIAL_SUGGESTIONS = "initialSuggestions";
  @SerializedName(SERIALIZED_NAME_INITIAL_SUGGESTIONS)
  private GoogleAppsCardV1Suggestions initialSuggestions;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_CHANGE_ACTION = "onChangeAction";
  @SerializedName(SERIALIZED_NAME_ON_CHANGE_ACTION)
  private GoogleAppsCardV1Action onChangeAction;

  public static final String SERIALIZED_NAME_PLACEHOLDER_TEXT = "placeholderText";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER_TEXT)
  private String placeholderText;

  /**
   * How a text input field appears in the user interface. For example, whether the field is single or multi-line.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SINGLE_LINE("SINGLE_LINE"),
    
    MULTIPLE_LINE("MULTIPLE_LINE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public GoogleAppsCardV1TextInput() {
  }

  public GoogleAppsCardV1TextInput autoCompleteAction(GoogleAppsCardV1Action autoCompleteAction) {
    this.autoCompleteAction = autoCompleteAction;
    return this;
  }

  /**
   * Get autoCompleteAction
   * @return autoCompleteAction
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getAutoCompleteAction() {
    return autoCompleteAction;
  }

  public void setAutoCompleteAction(GoogleAppsCardV1Action autoCompleteAction) {
    this.autoCompleteAction = autoCompleteAction;
  }


  public GoogleAppsCardV1TextInput hintText(String hintText) {
    this.hintText = hintText;
    return this;
  }

  /**
   * Text that appears below the text input field meant to assist users by prompting them to enter a certain value. This text is always visible. Required if &#x60;label&#x60; is unspecified. Otherwise, optional.
   * @return hintText
   */
  @javax.annotation.Nullable
  public String getHintText() {
    return hintText;
  }

  public void setHintText(String hintText) {
    this.hintText = hintText;
  }


  public GoogleAppsCardV1TextInput initialSuggestions(GoogleAppsCardV1Suggestions initialSuggestions) {
    this.initialSuggestions = initialSuggestions;
    return this;
  }

  /**
   * Get initialSuggestions
   * @return initialSuggestions
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Suggestions getInitialSuggestions() {
    return initialSuggestions;
  }

  public void setInitialSuggestions(GoogleAppsCardV1Suggestions initialSuggestions) {
    this.initialSuggestions = initialSuggestions;
  }


  public GoogleAppsCardV1TextInput label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The text that appears above the text input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if you are asking someone&#39;s name, but specifically need their surname, write &#x60;surname&#x60; instead of &#x60;name&#x60;. Required if &#x60;hintText&#x60; is unspecified. Otherwise, optional.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GoogleAppsCardV1TextInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name by which the text input is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAppsCardV1TextInput onChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
    return this;
  }

  /**
   * Get onChangeAction
   * @return onChangeAction
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getOnChangeAction() {
    return onChangeAction;
  }

  public void setOnChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
  }


  public GoogleAppsCardV1TextInput placeholderText(String placeholderText) {
    this.placeholderText = placeholderText;
    return this;
  }

  /**
   * Text that appears in the text input field when the field is empty. Use this text to prompt users to enter a value. For example, &#x60;Enter a number from 0 to 100&#x60;. [Google Chat apps](https://developers.google.com/chat):
   * @return placeholderText
   */
  @javax.annotation.Nullable
  public String getPlaceholderText() {
    return placeholderText;
  }

  public void setPlaceholderText(String placeholderText) {
    this.placeholderText = placeholderText;
  }


  public GoogleAppsCardV1TextInput type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * How a text input field appears in the user interface. For example, whether the field is single or multi-line.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GoogleAppsCardV1TextInput value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1TextInput googleAppsCardV1TextInput = (GoogleAppsCardV1TextInput) o;
    return Objects.equals(this.autoCompleteAction, googleAppsCardV1TextInput.autoCompleteAction) &&
        Objects.equals(this.hintText, googleAppsCardV1TextInput.hintText) &&
        Objects.equals(this.initialSuggestions, googleAppsCardV1TextInput.initialSuggestions) &&
        Objects.equals(this.label, googleAppsCardV1TextInput.label) &&
        Objects.equals(this.name, googleAppsCardV1TextInput.name) &&
        Objects.equals(this.onChangeAction, googleAppsCardV1TextInput.onChangeAction) &&
        Objects.equals(this.placeholderText, googleAppsCardV1TextInput.placeholderText) &&
        Objects.equals(this.type, googleAppsCardV1TextInput.type) &&
        Objects.equals(this.value, googleAppsCardV1TextInput.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCompleteAction, hintText, initialSuggestions, label, name, onChangeAction, placeholderText, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1TextInput {\n");
    sb.append("    autoCompleteAction: ").append(toIndentedString(autoCompleteAction)).append("\n");
    sb.append("    hintText: ").append(toIndentedString(hintText)).append("\n");
    sb.append("    initialSuggestions: ").append(toIndentedString(initialSuggestions)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onChangeAction: ").append(toIndentedString(onChangeAction)).append("\n");
    sb.append("    placeholderText: ").append(toIndentedString(placeholderText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoCompleteAction");
    openapiFields.add("hintText");
    openapiFields.add("initialSuggestions");
    openapiFields.add("label");
    openapiFields.add("name");
    openapiFields.add("onChangeAction");
    openapiFields.add("placeholderText");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1TextInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1TextInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1TextInput is not found in the empty JSON string", GoogleAppsCardV1TextInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1TextInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1TextInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoCompleteAction`
      if (jsonObj.get("autoCompleteAction") != null && !jsonObj.get("autoCompleteAction").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("autoCompleteAction"));
      }
      if ((jsonObj.get("hintText") != null && !jsonObj.get("hintText").isJsonNull()) && !jsonObj.get("hintText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hintText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hintText").toString()));
      }
      // validate the optional field `initialSuggestions`
      if (jsonObj.get("initialSuggestions") != null && !jsonObj.get("initialSuggestions").isJsonNull()) {
        GoogleAppsCardV1Suggestions.validateJsonElement(jsonObj.get("initialSuggestions"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `onChangeAction`
      if (jsonObj.get("onChangeAction") != null && !jsonObj.get("onChangeAction").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("onChangeAction"));
      }
      if ((jsonObj.get("placeholderText") != null && !jsonObj.get("placeholderText").isJsonNull()) && !jsonObj.get("placeholderText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeholderText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeholderText").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1TextInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1TextInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1TextInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1TextInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1TextInput>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1TextInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1TextInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1TextInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1TextInput
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1TextInput
   */
  public static GoogleAppsCardV1TextInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1TextInput.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1TextInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

