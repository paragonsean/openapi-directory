/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Inputs;
import org.openapitools.client.model.TimeZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents information about the user&#39;s client, such as locale, host app, and platform. For Chat apps, &#x60;CommonEventObject&#x60; includes data submitted by users interacting with cards, like data entered in [dialogs](https://developers.google.com/chat/how-tos/dialogs).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonEventObject {
  public static final String SERIALIZED_NAME_FORM_INPUTS = "formInputs";
  @SerializedName(SERIALIZED_NAME_FORM_INPUTS)
  private Map<String, Inputs> formInputs = new HashMap<>();

  /**
   * The hostApp enum which indicates the app the add-on is invoked from. Always &#x60;CHAT&#x60; for Chat apps.
   */
  @JsonAdapter(HostAppEnum.Adapter.class)
  public enum HostAppEnum {
    UNSPECIFIED_HOST_APP("UNSPECIFIED_HOST_APP"),
    
    GMAIL("GMAIL"),
    
    CALENDAR("CALENDAR"),
    
    DRIVE("DRIVE"),
    
    DEMO("DEMO"),
    
    DOCS("DOCS"),
    
    MEET("MEET"),
    
    SHEETS("SHEETS"),
    
    SLIDES("SLIDES"),
    
    DRAWINGS("DRAWINGS"),
    
    CHAT("CHAT"),
    
    CHAT_IN_GMAIL("CHAT_IN_GMAIL");

    private String value;

    HostAppEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostAppEnum fromValue(String value) {
      for (HostAppEnum b : HostAppEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostAppEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostAppEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostAppEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostAppEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostAppEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_APP = "hostApp";
  @SerializedName(SERIALIZED_NAME_HOST_APP)
  private HostAppEnum hostApp;

  public static final String SERIALIZED_NAME_INVOKED_FUNCTION = "invokedFunction";
  @SerializedName(SERIALIZED_NAME_INVOKED_FUNCTION)
  private String invokedFunction;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  /**
   * The platform enum which indicates the platform where the event originates (&#x60;WEB&#x60;, &#x60;IOS&#x60;, or &#x60;ANDROID&#x60;). Not supported by Chat apps.
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    UNKNOWN_PLATFORM("UNKNOWN_PLATFORM"),
    
    WEB("WEB"),
    
    IOS("IOS"),
    
    ANDROID("ANDROID");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private TimeZone timeZone;

  public static final String SERIALIZED_NAME_USER_LOCALE = "userLocale";
  @SerializedName(SERIALIZED_NAME_USER_LOCALE)
  private String userLocale;

  public CommonEventObject() {
  }

  public CommonEventObject formInputs(Map<String, Inputs> formInputs) {
    this.formInputs = formInputs;
    return this;
  }

  public CommonEventObject putFormInputsItem(String key, Inputs formInputsItem) {
    if (this.formInputs == null) {
      this.formInputs = new HashMap<>();
    }
    this.formInputs.put(key, formInputsItem);
    return this;
  }

  /**
   * A map containing the values that a user inputs in a widget from a card or dialog. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. For details, see [Process information inputted by users](https://developers.google.com/chat/ui/read-form-data).
   * @return formInputs
   */
  @javax.annotation.Nullable
  public Map<String, Inputs> getFormInputs() {
    return formInputs;
  }

  public void setFormInputs(Map<String, Inputs> formInputs) {
    this.formInputs = formInputs;
  }


  public CommonEventObject hostApp(HostAppEnum hostApp) {
    this.hostApp = hostApp;
    return this;
  }

  /**
   * The hostApp enum which indicates the app the add-on is invoked from. Always &#x60;CHAT&#x60; for Chat apps.
   * @return hostApp
   */
  @javax.annotation.Nullable
  public HostAppEnum getHostApp() {
    return hostApp;
  }

  public void setHostApp(HostAppEnum hostApp) {
    this.hostApp = hostApp;
  }


  public CommonEventObject invokedFunction(String invokedFunction) {
    this.invokedFunction = invokedFunction;
    return this;
  }

  /**
   * Name of the invoked function associated with the widget. Only set for Chat apps.
   * @return invokedFunction
   */
  @javax.annotation.Nullable
  public String getInvokedFunction() {
    return invokedFunction;
  }

  public void setInvokedFunction(String invokedFunction) {
    this.invokedFunction = invokedFunction;
  }


  public CommonEventObject parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public CommonEventObject putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public CommonEventObject platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The platform enum which indicates the platform where the event originates (&#x60;WEB&#x60;, &#x60;IOS&#x60;, or &#x60;ANDROID&#x60;). Not supported by Chat apps.
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public CommonEventObject timeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public TimeZone getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
  }


  public CommonEventObject userLocale(String userLocale) {
    this.userLocale = userLocale;
    return this;
  }

  /**
   * The full &#x60;locale.displayName&#x60; in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \&quot;en-US\&quot;.
   * @return userLocale
   */
  @javax.annotation.Nullable
  public String getUserLocale() {
    return userLocale;
  }

  public void setUserLocale(String userLocale) {
    this.userLocale = userLocale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonEventObject commonEventObject = (CommonEventObject) o;
    return Objects.equals(this.formInputs, commonEventObject.formInputs) &&
        Objects.equals(this.hostApp, commonEventObject.hostApp) &&
        Objects.equals(this.invokedFunction, commonEventObject.invokedFunction) &&
        Objects.equals(this.parameters, commonEventObject.parameters) &&
        Objects.equals(this.platform, commonEventObject.platform) &&
        Objects.equals(this.timeZone, commonEventObject.timeZone) &&
        Objects.equals(this.userLocale, commonEventObject.userLocale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formInputs, hostApp, invokedFunction, parameters, platform, timeZone, userLocale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonEventObject {\n");
    sb.append("    formInputs: ").append(toIndentedString(formInputs)).append("\n");
    sb.append("    hostApp: ").append(toIndentedString(hostApp)).append("\n");
    sb.append("    invokedFunction: ").append(toIndentedString(invokedFunction)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    userLocale: ").append(toIndentedString(userLocale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formInputs");
    openapiFields.add("hostApp");
    openapiFields.add("invokedFunction");
    openapiFields.add("parameters");
    openapiFields.add("platform");
    openapiFields.add("timeZone");
    openapiFields.add("userLocale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonEventObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonEventObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonEventObject is not found in the empty JSON string", CommonEventObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonEventObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonEventObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostApp") != null && !jsonObj.get("hostApp").isJsonNull()) && !jsonObj.get("hostApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostApp").toString()));
      }
      // validate the optional field `hostApp`
      if (jsonObj.get("hostApp") != null && !jsonObj.get("hostApp").isJsonNull()) {
        HostAppEnum.validateJsonElement(jsonObj.get("hostApp"));
      }
      if ((jsonObj.get("invokedFunction") != null && !jsonObj.get("invokedFunction").isJsonNull()) && !jsonObj.get("invokedFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invokedFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invokedFunction").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      }
      // validate the optional field `timeZone`
      if (jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) {
        TimeZone.validateJsonElement(jsonObj.get("timeZone"));
      }
      if ((jsonObj.get("userLocale") != null && !jsonObj.get("userLocale").isJsonNull()) && !jsonObj.get("userLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLocale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonEventObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonEventObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonEventObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonEventObject.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonEventObject>() {
           @Override
           public void write(JsonWriter out, CommonEventObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonEventObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonEventObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonEventObject
   * @throws IOException if the JSON string is invalid with respect to CommonEventObject
   */
  public static CommonEventObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonEventObject.class);
  }

  /**
   * Convert an instance of CommonEventObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

