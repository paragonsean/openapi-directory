/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsCardV1Button;
import org.openapitools.client.model.GoogleAppsCardV1Icon;
import org.openapitools.client.model.GoogleAppsCardV1OnClick;
import org.openapitools.client.model.GoogleAppsCardV1SwitchControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget, or a button after the text. For an example in Google Chat apps, see [Decorated text](https://developers.google.com/chat/ui/widgets/decorated-text). [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1DecoratedText {
  public static final String SERIALIZED_NAME_BOTTOM_LABEL = "bottomLabel";
  @SerializedName(SERIALIZED_NAME_BOTTOM_LABEL)
  private String bottomLabel;

  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private GoogleAppsCardV1Button button;

  public static final String SERIALIZED_NAME_END_ICON = "endIcon";
  @SerializedName(SERIALIZED_NAME_END_ICON)
  private GoogleAppsCardV1Icon endIcon;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private GoogleAppsCardV1Icon icon;

  public static final String SERIALIZED_NAME_ON_CLICK = "onClick";
  @SerializedName(SERIALIZED_NAME_ON_CLICK)
  private GoogleAppsCardV1OnClick onClick;

  public static final String SERIALIZED_NAME_START_ICON = "startIcon";
  @SerializedName(SERIALIZED_NAME_START_ICON)
  private GoogleAppsCardV1Icon startIcon;

  public static final String SERIALIZED_NAME_SWITCH_CONTROL = "switchControl";
  @SerializedName(SERIALIZED_NAME_SWITCH_CONTROL)
  private GoogleAppsCardV1SwitchControl switchControl;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TOP_LABEL = "topLabel";
  @SerializedName(SERIALIZED_NAME_TOP_LABEL)
  private String topLabel;

  public static final String SERIALIZED_NAME_WRAP_TEXT = "wrapText";
  @SerializedName(SERIALIZED_NAME_WRAP_TEXT)
  private Boolean wrapText;

  public GoogleAppsCardV1DecoratedText() {
  }

  public GoogleAppsCardV1DecoratedText bottomLabel(String bottomLabel) {
    this.bottomLabel = bottomLabel;
    return this;
  }

  /**
   * The text that appears below &#x60;text&#x60;. Always wraps.
   * @return bottomLabel
   */
  @javax.annotation.Nullable
  public String getBottomLabel() {
    return bottomLabel;
  }

  public void setBottomLabel(String bottomLabel) {
    this.bottomLabel = bottomLabel;
  }


  public GoogleAppsCardV1DecoratedText button(GoogleAppsCardV1Button button) {
    this.button = button;
    return this;
  }

  /**
   * Get button
   * @return button
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Button getButton() {
    return button;
  }

  public void setButton(GoogleAppsCardV1Button button) {
    this.button = button;
  }


  public GoogleAppsCardV1DecoratedText endIcon(GoogleAppsCardV1Icon endIcon) {
    this.endIcon = endIcon;
    return this;
  }

  /**
   * Get endIcon
   * @return endIcon
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Icon getEndIcon() {
    return endIcon;
  }

  public void setEndIcon(GoogleAppsCardV1Icon endIcon) {
    this.endIcon = endIcon;
  }


  public GoogleAppsCardV1DecoratedText icon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Icon getIcon() {
    return icon;
  }

  public void setIcon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
  }


  public GoogleAppsCardV1DecoratedText onClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * Get onClick
   * @return onClick
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1OnClick getOnClick() {
    return onClick;
  }

  public void setOnClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
  }


  public GoogleAppsCardV1DecoratedText startIcon(GoogleAppsCardV1Icon startIcon) {
    this.startIcon = startIcon;
    return this;
  }

  /**
   * Get startIcon
   * @return startIcon
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Icon getStartIcon() {
    return startIcon;
  }

  public void setStartIcon(GoogleAppsCardV1Icon startIcon) {
    this.startIcon = startIcon;
  }


  public GoogleAppsCardV1DecoratedText switchControl(GoogleAppsCardV1SwitchControl switchControl) {
    this.switchControl = switchControl;
    return this;
  }

  /**
   * Get switchControl
   * @return switchControl
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1SwitchControl getSwitchControl() {
    return switchControl;
  }

  public void setSwitchControl(GoogleAppsCardV1SwitchControl switchControl) {
    this.switchControl = switchControl;
  }


  public GoogleAppsCardV1DecoratedText text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Required. The primary text. Supports simple formatting. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public GoogleAppsCardV1DecoratedText topLabel(String topLabel) {
    this.topLabel = topLabel;
    return this;
  }

  /**
   * The text that appears above &#x60;text&#x60;. Always truncates.
   * @return topLabel
   */
  @javax.annotation.Nullable
  public String getTopLabel() {
    return topLabel;
  }

  public void setTopLabel(String topLabel) {
    this.topLabel = topLabel;
  }


  public GoogleAppsCardV1DecoratedText wrapText(Boolean wrapText) {
    this.wrapText = wrapText;
    return this;
  }

  /**
   * The wrap text setting. If &#x60;true&#x60;, the text wraps and displays on multiple lines. Otherwise, the text is truncated. Only applies to &#x60;text&#x60;, not &#x60;topLabel&#x60; and &#x60;bottomLabel&#x60;.
   * @return wrapText
   */
  @javax.annotation.Nullable
  public Boolean getWrapText() {
    return wrapText;
  }

  public void setWrapText(Boolean wrapText) {
    this.wrapText = wrapText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1DecoratedText googleAppsCardV1DecoratedText = (GoogleAppsCardV1DecoratedText) o;
    return Objects.equals(this.bottomLabel, googleAppsCardV1DecoratedText.bottomLabel) &&
        Objects.equals(this.button, googleAppsCardV1DecoratedText.button) &&
        Objects.equals(this.endIcon, googleAppsCardV1DecoratedText.endIcon) &&
        Objects.equals(this.icon, googleAppsCardV1DecoratedText.icon) &&
        Objects.equals(this.onClick, googleAppsCardV1DecoratedText.onClick) &&
        Objects.equals(this.startIcon, googleAppsCardV1DecoratedText.startIcon) &&
        Objects.equals(this.switchControl, googleAppsCardV1DecoratedText.switchControl) &&
        Objects.equals(this.text, googleAppsCardV1DecoratedText.text) &&
        Objects.equals(this.topLabel, googleAppsCardV1DecoratedText.topLabel) &&
        Objects.equals(this.wrapText, googleAppsCardV1DecoratedText.wrapText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottomLabel, button, endIcon, icon, onClick, startIcon, switchControl, text, topLabel, wrapText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1DecoratedText {\n");
    sb.append("    bottomLabel: ").append(toIndentedString(bottomLabel)).append("\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    endIcon: ").append(toIndentedString(endIcon)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    onClick: ").append(toIndentedString(onClick)).append("\n");
    sb.append("    startIcon: ").append(toIndentedString(startIcon)).append("\n");
    sb.append("    switchControl: ").append(toIndentedString(switchControl)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    topLabel: ").append(toIndentedString(topLabel)).append("\n");
    sb.append("    wrapText: ").append(toIndentedString(wrapText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bottomLabel");
    openapiFields.add("button");
    openapiFields.add("endIcon");
    openapiFields.add("icon");
    openapiFields.add("onClick");
    openapiFields.add("startIcon");
    openapiFields.add("switchControl");
    openapiFields.add("text");
    openapiFields.add("topLabel");
    openapiFields.add("wrapText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1DecoratedText
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1DecoratedText.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1DecoratedText is not found in the empty JSON string", GoogleAppsCardV1DecoratedText.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1DecoratedText.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1DecoratedText` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bottomLabel") != null && !jsonObj.get("bottomLabel").isJsonNull()) && !jsonObj.get("bottomLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottomLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottomLabel").toString()));
      }
      // validate the optional field `button`
      if (jsonObj.get("button") != null && !jsonObj.get("button").isJsonNull()) {
        GoogleAppsCardV1Button.validateJsonElement(jsonObj.get("button"));
      }
      // validate the optional field `endIcon`
      if (jsonObj.get("endIcon") != null && !jsonObj.get("endIcon").isJsonNull()) {
        GoogleAppsCardV1Icon.validateJsonElement(jsonObj.get("endIcon"));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        GoogleAppsCardV1Icon.validateJsonElement(jsonObj.get("icon"));
      }
      // validate the optional field `onClick`
      if (jsonObj.get("onClick") != null && !jsonObj.get("onClick").isJsonNull()) {
        GoogleAppsCardV1OnClick.validateJsonElement(jsonObj.get("onClick"));
      }
      // validate the optional field `startIcon`
      if (jsonObj.get("startIcon") != null && !jsonObj.get("startIcon").isJsonNull()) {
        GoogleAppsCardV1Icon.validateJsonElement(jsonObj.get("startIcon"));
      }
      // validate the optional field `switchControl`
      if (jsonObj.get("switchControl") != null && !jsonObj.get("switchControl").isJsonNull()) {
        GoogleAppsCardV1SwitchControl.validateJsonElement(jsonObj.get("switchControl"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("topLabel") != null && !jsonObj.get("topLabel").isJsonNull()) && !jsonObj.get("topLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1DecoratedText.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1DecoratedText' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1DecoratedText> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1DecoratedText.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1DecoratedText>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1DecoratedText value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1DecoratedText read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1DecoratedText given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1DecoratedText
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1DecoratedText
   */
  public static GoogleAppsCardV1DecoratedText fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1DecoratedText.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1DecoratedText to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

