/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsCardV1Action;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Either a toggle-style switch or a checkbox inside a &#x60;decoratedText&#x60; widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): Only supported in the &#x60;decoratedText&#x60; widget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1SwitchControl {
  /**
   * How the switch appears in the user interface. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
   */
  @JsonAdapter(ControlTypeEnum.Adapter.class)
  public enum ControlTypeEnum {
    SWITCH("SWITCH"),
    
    CHECKBOX("CHECKBOX"),
    
    CHECK_BOX("CHECK_BOX");

    private String value;

    ControlTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ControlTypeEnum fromValue(String value) {
      for (ControlTypeEnum b : ControlTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ControlTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ControlTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ControlTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ControlTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ControlTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTROL_TYPE = "controlType";
  @SerializedName(SERIALIZED_NAME_CONTROL_TYPE)
  private ControlTypeEnum controlType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_CHANGE_ACTION = "onChangeAction";
  @SerializedName(SERIALIZED_NAME_ON_CHANGE_ACTION)
  private GoogleAppsCardV1Action onChangeAction;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public GoogleAppsCardV1SwitchControl() {
  }

  public GoogleAppsCardV1SwitchControl controlType(ControlTypeEnum controlType) {
    this.controlType = controlType;
    return this;
  }

  /**
   * How the switch appears in the user interface. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
   * @return controlType
   */
  @javax.annotation.Nullable
  public ControlTypeEnum getControlType() {
    return controlType;
  }

  public void setControlType(ControlTypeEnum controlType) {
    this.controlType = controlType;
  }


  public GoogleAppsCardV1SwitchControl name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name by which the switch widget is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAppsCardV1SwitchControl onChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
    return this;
  }

  /**
   * Get onChangeAction
   * @return onChangeAction
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getOnChangeAction() {
    return onChangeAction;
  }

  public void setOnChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
  }


  public GoogleAppsCardV1SwitchControl selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

  /**
   * When &#x60;true&#x60;, the switch is selected.
   * @return selected
   */
  @javax.annotation.Nullable
  public Boolean getSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public GoogleAppsCardV1SwitchControl value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value entered by a user, returned as part of a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1SwitchControl googleAppsCardV1SwitchControl = (GoogleAppsCardV1SwitchControl) o;
    return Objects.equals(this.controlType, googleAppsCardV1SwitchControl.controlType) &&
        Objects.equals(this.name, googleAppsCardV1SwitchControl.name) &&
        Objects.equals(this.onChangeAction, googleAppsCardV1SwitchControl.onChangeAction) &&
        Objects.equals(this.selected, googleAppsCardV1SwitchControl.selected) &&
        Objects.equals(this.value, googleAppsCardV1SwitchControl.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlType, name, onChangeAction, selected, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1SwitchControl {\n");
    sb.append("    controlType: ").append(toIndentedString(controlType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onChangeAction: ").append(toIndentedString(onChangeAction)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controlType");
    openapiFields.add("name");
    openapiFields.add("onChangeAction");
    openapiFields.add("selected");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1SwitchControl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1SwitchControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1SwitchControl is not found in the empty JSON string", GoogleAppsCardV1SwitchControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1SwitchControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1SwitchControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controlType") != null && !jsonObj.get("controlType").isJsonNull()) && !jsonObj.get("controlType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlType").toString()));
      }
      // validate the optional field `controlType`
      if (jsonObj.get("controlType") != null && !jsonObj.get("controlType").isJsonNull()) {
        ControlTypeEnum.validateJsonElement(jsonObj.get("controlType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `onChangeAction`
      if (jsonObj.get("onChangeAction") != null && !jsonObj.get("onChangeAction").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("onChangeAction"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1SwitchControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1SwitchControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1SwitchControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1SwitchControl.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1SwitchControl>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1SwitchControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1SwitchControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1SwitchControl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1SwitchControl
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1SwitchControl
   */
  public static GoogleAppsCardV1SwitchControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1SwitchControl.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1SwitchControl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

