/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1Column;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &#x60;Columns&#x60; widget displays up to 2 columns in a card or dialog. You can add widgets to each column; the widgets appear in the order that they are specified. For an example in Google Chat apps, see [Columns](https://developers.google.com/chat/ui/widgets/columns). The height of each column is determined by the taller column. For example, if the first column is taller than the second column, both columns have the height of the first column. Because each column can contain a different number of widgets, you can&#39;t define rows or align widgets between the columns. Columns are displayed side-by-side. You can customize the width of each column using the &#x60;HorizontalSizeStyle&#x60; field. If the user&#39;s screen width is too narrow, the second column wraps below the first: * On web, the second column wraps if the screen width is less than or equal to 480 pixels. * On iOS devices, the second column wraps if the screen width is less than or equal to 300 pt. * On Android devices, the second column wraps if the screen width is less than or equal to 320 dp. To include more than 2 columns, or to use rows, use the &#x60;Grid&#x60; widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend): Columns for Google Workspace Add-ons are in [Developer Preview](https://developers.google.com/workspace/preview).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Columns {
  public static final String SERIALIZED_NAME_COLUMN_ITEMS = "columnItems";
  @SerializedName(SERIALIZED_NAME_COLUMN_ITEMS)
  private List<GoogleAppsCardV1Column> columnItems = new ArrayList<>();

  public GoogleAppsCardV1Columns() {
  }

  public GoogleAppsCardV1Columns columnItems(List<GoogleAppsCardV1Column> columnItems) {
    this.columnItems = columnItems;
    return this;
  }

  public GoogleAppsCardV1Columns addColumnItemsItem(GoogleAppsCardV1Column columnItemsItem) {
    if (this.columnItems == null) {
      this.columnItems = new ArrayList<>();
    }
    this.columnItems.add(columnItemsItem);
    return this;
  }

  /**
   * An array of columns. You can include up to 2 columns in a card or dialog.
   * @return columnItems
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1Column> getColumnItems() {
    return columnItems;
  }

  public void setColumnItems(List<GoogleAppsCardV1Column> columnItems) {
    this.columnItems = columnItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Columns googleAppsCardV1Columns = (GoogleAppsCardV1Columns) o;
    return Objects.equals(this.columnItems, googleAppsCardV1Columns.columnItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Columns {\n");
    sb.append("    columnItems: ").append(toIndentedString(columnItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Columns
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Columns.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Columns is not found in the empty JSON string", GoogleAppsCardV1Columns.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Columns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Columns` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columnItems") != null && !jsonObj.get("columnItems").isJsonNull()) {
        JsonArray jsonArraycolumnItems = jsonObj.getAsJsonArray("columnItems");
        if (jsonArraycolumnItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnItems` to be an array in the JSON string but got `%s`", jsonObj.get("columnItems").toString()));
          }

          // validate the optional field `columnItems` (array)
          for (int i = 0; i < jsonArraycolumnItems.size(); i++) {
            GoogleAppsCardV1Column.validateJsonElement(jsonArraycolumnItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Columns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Columns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Columns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Columns.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Columns>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Columns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Columns read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Columns given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Columns
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Columns
   */
  public static GoogleAppsCardV1Columns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Columns.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Columns to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

