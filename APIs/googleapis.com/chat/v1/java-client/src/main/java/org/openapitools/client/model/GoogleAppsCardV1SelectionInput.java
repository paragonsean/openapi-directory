/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1Action;
import org.openapitools.client.model.GoogleAppsCardV1PlatformDataSource;
import org.openapitools.client.model.GoogleAppsCardV1SelectionItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A widget that creates one or more UI items that users can select. For example, a dropdown menu or checkboxes. You can use this widget to collect data that can be predicted or enumerated. For an example in Google Chat apps, see [Selection input](https://developers.google.com/chat/ui/widgets/selection-input). Chat apps can process the value of items that users select or input. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data). To collect undefined or abstract data from users, use the TextInput widget. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1SelectionInput {
  public static final String SERIALIZED_NAME_EXTERNAL_DATA_SOURCE = "externalDataSource";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DATA_SOURCE)
  private GoogleAppsCardV1Action externalDataSource;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<GoogleAppsCardV1SelectionItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MULTI_SELECT_MAX_SELECTED_ITEMS = "multiSelectMaxSelectedItems";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_MAX_SELECTED_ITEMS)
  private Integer multiSelectMaxSelectedItems;

  public static final String SERIALIZED_NAME_MULTI_SELECT_MIN_QUERY_LENGTH = "multiSelectMinQueryLength";
  @SerializedName(SERIALIZED_NAME_MULTI_SELECT_MIN_QUERY_LENGTH)
  private Integer multiSelectMinQueryLength;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ON_CHANGE_ACTION = "onChangeAction";
  @SerializedName(SERIALIZED_NAME_ON_CHANGE_ACTION)
  private GoogleAppsCardV1Action onChangeAction;

  public static final String SERIALIZED_NAME_PLATFORM_DATA_SOURCE = "platformDataSource";
  @SerializedName(SERIALIZED_NAME_PLATFORM_DATA_SOURCE)
  private GoogleAppsCardV1PlatformDataSource platformDataSource;

  /**
   * The type of items that are displayed to users in a &#x60;SelectionInput&#x60; widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CHECK_BOX("CHECK_BOX"),
    
    RADIO_BUTTON("RADIO_BUTTON"),
    
    SWITCH("SWITCH"),
    
    DROPDOWN("DROPDOWN"),
    
    MULTI_SELECT("MULTI_SELECT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public GoogleAppsCardV1SelectionInput() {
  }

  public GoogleAppsCardV1SelectionInput externalDataSource(GoogleAppsCardV1Action externalDataSource) {
    this.externalDataSource = externalDataSource;
    return this;
  }

  /**
   * Get externalDataSource
   * @return externalDataSource
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getExternalDataSource() {
    return externalDataSource;
  }

  public void setExternalDataSource(GoogleAppsCardV1Action externalDataSource) {
    this.externalDataSource = externalDataSource;
  }


  public GoogleAppsCardV1SelectionInput items(List<GoogleAppsCardV1SelectionItem> items) {
    this.items = items;
    return this;
  }

  public GoogleAppsCardV1SelectionInput addItemsItem(GoogleAppsCardV1SelectionItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * An array of selectable items. For example, an array of radio buttons or checkboxes. Supports up to 100 items.
   * @return items
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1SelectionItem> getItems() {
    return items;
  }

  public void setItems(List<GoogleAppsCardV1SelectionItem> items) {
    this.items = items;
  }


  public GoogleAppsCardV1SelectionInput label(String label) {
    this.label = label;
    return this;
  }

  /**
   * The text that appears above the selection input field in the user interface. Specify text that helps the user enter the information your app needs. For example, if users are selecting the urgency of a work ticket from a drop-down menu, the label might be \&quot;Urgency\&quot; or \&quot;Select urgency\&quot;.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public GoogleAppsCardV1SelectionInput multiSelectMaxSelectedItems(Integer multiSelectMaxSelectedItems) {
    this.multiSelectMaxSelectedItems = multiSelectMaxSelectedItems;
    return this;
  }

  /**
   * For multiselect menus, the maximum number of items that a user can select. Minimum value is 1 item. If unspecified, defaults to 3 items.
   * @return multiSelectMaxSelectedItems
   */
  @javax.annotation.Nullable
  public Integer getMultiSelectMaxSelectedItems() {
    return multiSelectMaxSelectedItems;
  }

  public void setMultiSelectMaxSelectedItems(Integer multiSelectMaxSelectedItems) {
    this.multiSelectMaxSelectedItems = multiSelectMaxSelectedItems;
  }


  public GoogleAppsCardV1SelectionInput multiSelectMinQueryLength(Integer multiSelectMinQueryLength) {
    this.multiSelectMinQueryLength = multiSelectMinQueryLength;
    return this;
  }

  /**
   * For multiselect menus, the number of text characters that a user inputs before the Chat app queries autocomplete and displays suggested items in the menu. If unspecified, defaults to 0 characters for static data sources and 3 characters for external data sources.
   * @return multiSelectMinQueryLength
   */
  @javax.annotation.Nullable
  public Integer getMultiSelectMinQueryLength() {
    return multiSelectMinQueryLength;
  }

  public void setMultiSelectMinQueryLength(Integer multiSelectMinQueryLength) {
    this.multiSelectMinQueryLength = multiSelectMinQueryLength;
  }


  public GoogleAppsCardV1SelectionInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name that identifies the selection input in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleAppsCardV1SelectionInput onChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
    return this;
  }

  /**
   * Get onChangeAction
   * @return onChangeAction
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Action getOnChangeAction() {
    return onChangeAction;
  }

  public void setOnChangeAction(GoogleAppsCardV1Action onChangeAction) {
    this.onChangeAction = onChangeAction;
  }


  public GoogleAppsCardV1SelectionInput platformDataSource(GoogleAppsCardV1PlatformDataSource platformDataSource) {
    this.platformDataSource = platformDataSource;
    return this;
  }

  /**
   * Get platformDataSource
   * @return platformDataSource
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1PlatformDataSource getPlatformDataSource() {
    return platformDataSource;
  }

  public void setPlatformDataSource(GoogleAppsCardV1PlatformDataSource platformDataSource) {
    this.platformDataSource = platformDataSource;
  }


  public GoogleAppsCardV1SelectionInput type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of items that are displayed to users in a &#x60;SelectionInput&#x60; widget. Selection types support different types of interactions. For example, users can select one or more checkboxes, but they can only select one value from a dropdown menu.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1SelectionInput googleAppsCardV1SelectionInput = (GoogleAppsCardV1SelectionInput) o;
    return Objects.equals(this.externalDataSource, googleAppsCardV1SelectionInput.externalDataSource) &&
        Objects.equals(this.items, googleAppsCardV1SelectionInput.items) &&
        Objects.equals(this.label, googleAppsCardV1SelectionInput.label) &&
        Objects.equals(this.multiSelectMaxSelectedItems, googleAppsCardV1SelectionInput.multiSelectMaxSelectedItems) &&
        Objects.equals(this.multiSelectMinQueryLength, googleAppsCardV1SelectionInput.multiSelectMinQueryLength) &&
        Objects.equals(this.name, googleAppsCardV1SelectionInput.name) &&
        Objects.equals(this.onChangeAction, googleAppsCardV1SelectionInput.onChangeAction) &&
        Objects.equals(this.platformDataSource, googleAppsCardV1SelectionInput.platformDataSource) &&
        Objects.equals(this.type, googleAppsCardV1SelectionInput.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalDataSource, items, label, multiSelectMaxSelectedItems, multiSelectMinQueryLength, name, onChangeAction, platformDataSource, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1SelectionInput {\n");
    sb.append("    externalDataSource: ").append(toIndentedString(externalDataSource)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    multiSelectMaxSelectedItems: ").append(toIndentedString(multiSelectMaxSelectedItems)).append("\n");
    sb.append("    multiSelectMinQueryLength: ").append(toIndentedString(multiSelectMinQueryLength)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onChangeAction: ").append(toIndentedString(onChangeAction)).append("\n");
    sb.append("    platformDataSource: ").append(toIndentedString(platformDataSource)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalDataSource");
    openapiFields.add("items");
    openapiFields.add("label");
    openapiFields.add("multiSelectMaxSelectedItems");
    openapiFields.add("multiSelectMinQueryLength");
    openapiFields.add("name");
    openapiFields.add("onChangeAction");
    openapiFields.add("platformDataSource");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1SelectionInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1SelectionInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1SelectionInput is not found in the empty JSON string", GoogleAppsCardV1SelectionInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1SelectionInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1SelectionInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `externalDataSource`
      if (jsonObj.get("externalDataSource") != null && !jsonObj.get("externalDataSource").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("externalDataSource"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            GoogleAppsCardV1SelectionItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `onChangeAction`
      if (jsonObj.get("onChangeAction") != null && !jsonObj.get("onChangeAction").isJsonNull()) {
        GoogleAppsCardV1Action.validateJsonElement(jsonObj.get("onChangeAction"));
      }
      // validate the optional field `platformDataSource`
      if (jsonObj.get("platformDataSource") != null && !jsonObj.get("platformDataSource").isJsonNull()) {
        GoogleAppsCardV1PlatformDataSource.validateJsonElement(jsonObj.get("platformDataSource"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1SelectionInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1SelectionInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1SelectionInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1SelectionInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1SelectionInput>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1SelectionInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1SelectionInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1SelectionInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1SelectionInput
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1SelectionInput
   */
  public static GoogleAppsCardV1SelectionInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1SelectionInput.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1SelectionInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

