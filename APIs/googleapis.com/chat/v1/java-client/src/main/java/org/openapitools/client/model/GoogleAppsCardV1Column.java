/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsCardV1Widgets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A column. [Google Chat apps](https://developers.google.com/chat):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Column {
  /**
   * Specifies whether widgets align to the left, right, or center of a column.
   */
  @JsonAdapter(HorizontalAlignmentEnum.Adapter.class)
  public enum HorizontalAlignmentEnum {
    HORIZONTAL_ALIGNMENT_UNSPECIFIED("HORIZONTAL_ALIGNMENT_UNSPECIFIED"),
    
    START("START"),
    
    CENTER("CENTER"),
    
    END("END");

    private String value;

    HorizontalAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorizontalAlignmentEnum fromValue(String value) {
      for (HorizontalAlignmentEnum b : HorizontalAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorizontalAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorizontalAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorizontalAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorizontalAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorizontalAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORIZONTAL_ALIGNMENT = "horizontalAlignment";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_ALIGNMENT)
  private HorizontalAlignmentEnum horizontalAlignment;

  /**
   * Specifies how a column fills the width of the card. [Google Chat apps](https://developers.google.com/chat):
   */
  @JsonAdapter(HorizontalSizeStyleEnum.Adapter.class)
  public enum HorizontalSizeStyleEnum {
    HORIZONTAL_SIZE_STYLE_UNSPECIFIED("HORIZONTAL_SIZE_STYLE_UNSPECIFIED"),
    
    FILL_AVAILABLE_SPACE("FILL_AVAILABLE_SPACE"),
    
    FILL_MINIMUM_SPACE("FILL_MINIMUM_SPACE");

    private String value;

    HorizontalSizeStyleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HorizontalSizeStyleEnum fromValue(String value) {
      for (HorizontalSizeStyleEnum b : HorizontalSizeStyleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HorizontalSizeStyleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HorizontalSizeStyleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HorizontalSizeStyleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HorizontalSizeStyleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HorizontalSizeStyleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HORIZONTAL_SIZE_STYLE = "horizontalSizeStyle";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_SIZE_STYLE)
  private HorizontalSizeStyleEnum horizontalSizeStyle;

  /**
   * Specifies whether widgets align to the top, bottom, or center of a column. [Google Chat apps](https://developers.google.com/chat):
   */
  @JsonAdapter(VerticalAlignmentEnum.Adapter.class)
  public enum VerticalAlignmentEnum {
    VERTICAL_ALIGNMENT_UNSPECIFIED("VERTICAL_ALIGNMENT_UNSPECIFIED"),
    
    CENTER("CENTER"),
    
    TOP("TOP"),
    
    BOTTOM("BOTTOM");

    private String value;

    VerticalAlignmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerticalAlignmentEnum fromValue(String value) {
      for (VerticalAlignmentEnum b : VerticalAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerticalAlignmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerticalAlignmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerticalAlignmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerticalAlignmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerticalAlignmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERTICAL_ALIGNMENT = "verticalAlignment";
  @SerializedName(SERIALIZED_NAME_VERTICAL_ALIGNMENT)
  private VerticalAlignmentEnum verticalAlignment;

  public static final String SERIALIZED_NAME_WIDGETS = "widgets";
  @SerializedName(SERIALIZED_NAME_WIDGETS)
  private List<GoogleAppsCardV1Widgets> widgets = new ArrayList<>();

  public GoogleAppsCardV1Column() {
  }

  public GoogleAppsCardV1Column horizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
    return this;
  }

  /**
   * Specifies whether widgets align to the left, right, or center of a column.
   * @return horizontalAlignment
   */
  @javax.annotation.Nullable
  public HorizontalAlignmentEnum getHorizontalAlignment() {
    return horizontalAlignment;
  }

  public void setHorizontalAlignment(HorizontalAlignmentEnum horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
  }


  public GoogleAppsCardV1Column horizontalSizeStyle(HorizontalSizeStyleEnum horizontalSizeStyle) {
    this.horizontalSizeStyle = horizontalSizeStyle;
    return this;
  }

  /**
   * Specifies how a column fills the width of the card. [Google Chat apps](https://developers.google.com/chat):
   * @return horizontalSizeStyle
   */
  @javax.annotation.Nullable
  public HorizontalSizeStyleEnum getHorizontalSizeStyle() {
    return horizontalSizeStyle;
  }

  public void setHorizontalSizeStyle(HorizontalSizeStyleEnum horizontalSizeStyle) {
    this.horizontalSizeStyle = horizontalSizeStyle;
  }


  public GoogleAppsCardV1Column verticalAlignment(VerticalAlignmentEnum verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
    return this;
  }

  /**
   * Specifies whether widgets align to the top, bottom, or center of a column. [Google Chat apps](https://developers.google.com/chat):
   * @return verticalAlignment
   */
  @javax.annotation.Nullable
  public VerticalAlignmentEnum getVerticalAlignment() {
    return verticalAlignment;
  }

  public void setVerticalAlignment(VerticalAlignmentEnum verticalAlignment) {
    this.verticalAlignment = verticalAlignment;
  }


  public GoogleAppsCardV1Column widgets(List<GoogleAppsCardV1Widgets> widgets) {
    this.widgets = widgets;
    return this;
  }

  public GoogleAppsCardV1Column addWidgetsItem(GoogleAppsCardV1Widgets widgetsItem) {
    if (this.widgets == null) {
      this.widgets = new ArrayList<>();
    }
    this.widgets.add(widgetsItem);
    return this;
  }

  /**
   * An array of widgets included in a column. Widgets appear in the order that they are specified.
   * @return widgets
   */
  @javax.annotation.Nullable
  public List<GoogleAppsCardV1Widgets> getWidgets() {
    return widgets;
  }

  public void setWidgets(List<GoogleAppsCardV1Widgets> widgets) {
    this.widgets = widgets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Column googleAppsCardV1Column = (GoogleAppsCardV1Column) o;
    return Objects.equals(this.horizontalAlignment, googleAppsCardV1Column.horizontalAlignment) &&
        Objects.equals(this.horizontalSizeStyle, googleAppsCardV1Column.horizontalSizeStyle) &&
        Objects.equals(this.verticalAlignment, googleAppsCardV1Column.verticalAlignment) &&
        Objects.equals(this.widgets, googleAppsCardV1Column.widgets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(horizontalAlignment, horizontalSizeStyle, verticalAlignment, widgets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Column {\n");
    sb.append("    horizontalAlignment: ").append(toIndentedString(horizontalAlignment)).append("\n");
    sb.append("    horizontalSizeStyle: ").append(toIndentedString(horizontalSizeStyle)).append("\n");
    sb.append("    verticalAlignment: ").append(toIndentedString(verticalAlignment)).append("\n");
    sb.append("    widgets: ").append(toIndentedString(widgets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("horizontalAlignment");
    openapiFields.add("horizontalSizeStyle");
    openapiFields.add("verticalAlignment");
    openapiFields.add("widgets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Column
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Column.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Column is not found in the empty JSON string", GoogleAppsCardV1Column.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Column.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Column` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) && !jsonObj.get("horizontalAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontalAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontalAlignment").toString()));
      }
      // validate the optional field `horizontalAlignment`
      if (jsonObj.get("horizontalAlignment") != null && !jsonObj.get("horizontalAlignment").isJsonNull()) {
        HorizontalAlignmentEnum.validateJsonElement(jsonObj.get("horizontalAlignment"));
      }
      if ((jsonObj.get("horizontalSizeStyle") != null && !jsonObj.get("horizontalSizeStyle").isJsonNull()) && !jsonObj.get("horizontalSizeStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontalSizeStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontalSizeStyle").toString()));
      }
      // validate the optional field `horizontalSizeStyle`
      if (jsonObj.get("horizontalSizeStyle") != null && !jsonObj.get("horizontalSizeStyle").isJsonNull()) {
        HorizontalSizeStyleEnum.validateJsonElement(jsonObj.get("horizontalSizeStyle"));
      }
      if ((jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) && !jsonObj.get("verticalAlignment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verticalAlignment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verticalAlignment").toString()));
      }
      // validate the optional field `verticalAlignment`
      if (jsonObj.get("verticalAlignment") != null && !jsonObj.get("verticalAlignment").isJsonNull()) {
        VerticalAlignmentEnum.validateJsonElement(jsonObj.get("verticalAlignment"));
      }
      if (jsonObj.get("widgets") != null && !jsonObj.get("widgets").isJsonNull()) {
        JsonArray jsonArraywidgets = jsonObj.getAsJsonArray("widgets");
        if (jsonArraywidgets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("widgets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `widgets` to be an array in the JSON string but got `%s`", jsonObj.get("widgets").toString()));
          }

          // validate the optional field `widgets` (array)
          for (int i = 0; i < jsonArraywidgets.size(); i++) {
            GoogleAppsCardV1Widgets.validateJsonElement(jsonArraywidgets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Column.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Column' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Column> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Column.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Column>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Column value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Column read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Column given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Column
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Column
   */
  public static GoogleAppsCardV1Column fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Column.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Column to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

