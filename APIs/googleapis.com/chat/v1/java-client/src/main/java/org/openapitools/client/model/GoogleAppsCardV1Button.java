/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Color;
import org.openapitools.client.model.GoogleAppsCardV1Icon;
import org.openapitools.client.model.GoogleAppsCardV1OnClick;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A text, icon, or text and icon button that users can click. For an example in Google Chat apps, see [Button list](https://developers.google.com/chat/ui/widgets/button-list). To make an image a clickable button, specify an &#x60;Image&#x60; (not an &#x60;ImageComponent&#x60;) and set an &#x60;onClick&#x60; action. [Google Workspace Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:45.023335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsCardV1Button {
  public static final String SERIALIZED_NAME_ALT_TEXT = "altText";
  @SerializedName(SERIALIZED_NAME_ALT_TEXT)
  private String altText;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private Color color;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private GoogleAppsCardV1Icon icon;

  public static final String SERIALIZED_NAME_ON_CLICK = "onClick";
  @SerializedName(SERIALIZED_NAME_ON_CLICK)
  private GoogleAppsCardV1OnClick onClick;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public GoogleAppsCardV1Button() {
  }

  public GoogleAppsCardV1Button altText(String altText) {
    this.altText = altText;
    return this;
  }

  /**
   * The alternative text that&#39;s used for accessibility. Set descriptive text that lets users know what the button does. For example, if a button opens a hyperlink, you might write: \&quot;Opens a new browser tab and navigates to the Google Chat developer documentation at https://developers.google.com/chat\&quot;.
   * @return altText
   */
  @javax.annotation.Nullable
  public String getAltText() {
    return altText;
  }

  public void setAltText(String altText) {
    this.altText = altText;
  }


  public GoogleAppsCardV1Button color(Color color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public Color getColor() {
    return color;
  }

  public void setColor(Color color) {
    this.color = color;
  }


  public GoogleAppsCardV1Button disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * If &#x60;true&#x60;, the button is displayed in an inactive state and doesn&#39;t respond to user actions.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public GoogleAppsCardV1Button icon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1Icon getIcon() {
    return icon;
  }

  public void setIcon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
  }


  public GoogleAppsCardV1Button onClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * Get onClick
   * @return onClick
   */
  @javax.annotation.Nullable
  public GoogleAppsCardV1OnClick getOnClick() {
    return onClick;
  }

  public void setOnClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
  }


  public GoogleAppsCardV1Button text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text displayed inside the button.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsCardV1Button googleAppsCardV1Button = (GoogleAppsCardV1Button) o;
    return Objects.equals(this.altText, googleAppsCardV1Button.altText) &&
        Objects.equals(this.color, googleAppsCardV1Button.color) &&
        Objects.equals(this.disabled, googleAppsCardV1Button.disabled) &&
        Objects.equals(this.icon, googleAppsCardV1Button.icon) &&
        Objects.equals(this.onClick, googleAppsCardV1Button.onClick) &&
        Objects.equals(this.text, googleAppsCardV1Button.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altText, color, disabled, icon, onClick, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsCardV1Button {\n");
    sb.append("    altText: ").append(toIndentedString(altText)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    onClick: ").append(toIndentedString(onClick)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("altText");
    openapiFields.add("color");
    openapiFields.add("disabled");
    openapiFields.add("icon");
    openapiFields.add("onClick");
    openapiFields.add("text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsCardV1Button
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsCardV1Button.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsCardV1Button is not found in the empty JSON string", GoogleAppsCardV1Button.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsCardV1Button.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsCardV1Button` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("altText") != null && !jsonObj.get("altText").isJsonNull()) && !jsonObj.get("altText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `altText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("altText").toString()));
      }
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        Color.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `icon`
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) {
        GoogleAppsCardV1Icon.validateJsonElement(jsonObj.get("icon"));
      }
      // validate the optional field `onClick`
      if (jsonObj.get("onClick") != null && !jsonObj.get("onClick").isJsonNull()) {
        GoogleAppsCardV1OnClick.validateJsonElement(jsonObj.get("onClick"));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsCardV1Button.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsCardV1Button' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsCardV1Button> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsCardV1Button.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsCardV1Button>() {
           @Override
           public void write(JsonWriter out, GoogleAppsCardV1Button value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsCardV1Button read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsCardV1Button given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsCardV1Button
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsCardV1Button
   */
  public static GoogleAppsCardV1Button fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsCardV1Button.class);
  }

  /**
   * Convert an instance of GoogleAppsCardV1Button to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

