/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.CompleteImportSpaceResponse;
import org.openapitools.client.model.ListMembershipsResponse;
import org.openapitools.client.model.ListMessagesResponse;
import org.openapitools.client.model.ListReactionsResponse;
import org.openapitools.client.model.ListSpacesResponse;
import org.openapitools.client.model.Membership;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.SetUpSpaceRequest;
import org.openapitools.client.model.Space;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpacesApi
 */
@Disabled
public class SpacesApiTest {

    private final SpacesApi api = new SpacesApi();

    /**
     * Completes the [import process](https://developers.google.com/chat/api/guides/import-data) for the specified space and makes it visible to users. Requires app authentication and domain-wide delegation. For more information, see [Authorize Google Chat apps to import data](https://developers.google.com/chat/api/guides/authorize-import).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesCompleteImportTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CompleteImportSpaceResponse response = api.chatSpacesCompleteImport(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a named space. Spaces grouped by topics aren&#39;t supported. For an example, see [Create a space](https://developers.google.com/chat/api/guides/v1/spaces/create). If you receive the error message &#x60;ALREADY_EXISTS&#x60; when creating a space, try a different &#x60;displayName&#x60;. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Space space = null;
        Space response = api.chatSpacesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, space);
        // TODO: test validations
    }

    /**
     * Returns the existing direct message with the specified user. If no direct message space is found, returns a &#x60;404 NOT_FOUND&#x60; error. For an example, see [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message). With [user authentication](https://developers.google.com/chat/api/guides/auth/users), returns the direct message space between the specified user and the authenticated user. With [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts), returns the direct message space between the specified user and the calling Chat app. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users) or [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesFindDirectMessageTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String name = null;
        Space response = api.chatSpacesFindDirectMessage($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, name);
        // TODO: test validations
    }

    /**
     * Lists spaces the caller is a member of. Group chats and DMs aren&#39;t listed until the first message is sent. For an example, see [List spaces](https://developers.google.com/chat/api/guides/v1/spaces/list). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). Lists spaces visible to the caller or authenticated user. Group chats and DMs aren&#39;t listed until the first message is sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSpacesResponse response = api.chatSpacesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a human membership or app membership for the calling app. Creating memberships for other apps isn&#39;t supported. For an example, see [ Create a membership](https://developers.google.com/chat/api/guides/v1/members/create). When creating a membership, if the specified member has their auto-accept policy turned off, then they&#39;re invited, and must accept the space invitation before joining. Otherwise, creating a membership adds the member directly to the specified space. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). To specify the member to add, set the &#x60;membership.member.name&#x60; in the &#x60;CreateMembershipRequest&#x60;: - To add the calling app to a space or a direct message between two human users, use &#x60;users/app&#x60;. Unable to add other apps to the space. - To add a human user, use &#x60;users/{user}&#x60;, where &#x60;{user}&#x60; can be the email address for the user. For users in the same Workspace organization &#x60;{user}&#x60; can also be the &#x60;id&#x60; for the person from the People API, or the &#x60;id&#x60; for the user in the Directory API. For example, if the People API Person profile ID for &#x60;user@example.com&#x60; is &#x60;123456789&#x60;, you can add the user to the space by setting the &#x60;membership.member.name&#x60; to &#x60;users/user@example.com&#x60; or &#x60;users/123456789&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMembersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Membership membership = null;
        Membership response = api.chatSpacesMembersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, membership);
        // TODO: test validations
    }

    /**
     * Lists memberships in a space. For an example, see [List memberships](https://developers.google.com/chat/api/guides/v1/members/list). Listing memberships with [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) lists memberships in spaces that the Chat app has access to, but excludes Chat app memberships, including its own. Listing memberships with [User authentication](https://developers.google.com/chat/api/guides/auth/users) lists memberships in spaces that the authenticated user has access to. Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMembersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showGroups = null;
        Boolean showInvited = null;
        ListMembershipsResponse response = api.chatSpacesMembersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, showGroups, showInvited);
        // TODO: test validations
    }

    /**
     * Gets the metadata of a message attachment. The attachment data is fetched using the [media API](https://developers.google.com/chat/api/reference/rest/v1/media/download). For an example, see [Get a message attachment](https://developers.google.com/chat/api/guides/v1/media-and-attachments/get). Requires [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesAttachmentsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Attachment response = api.chatSpacesMessagesAttachmentsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a message in a Google Chat space. For an example, see [Create a message](https://developers.google.com/chat/api/guides/v1/messages/create). Calling this method requires [authentication](https://developers.google.com/chat/api/guides/auth) and supports the following authentication types: - For text messages, user authentication or app authentication are supported. - For card messages, only app authentication is supported. (Only Chat apps can create card messages.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String messageId = null;
        String messageReplyOption = null;
        String requestId = null;
        String threadKey = null;
        Message message = null;
        Message response = api.chatSpacesMessagesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, messageId, messageReplyOption, requestId, threadKey, message);
        // TODO: test validations
    }

    /**
     * Lists messages in a space that the caller is a member of, including messages from blocked members and spaces. For an example, see [List messages](/chat/api/guides/v1/messages/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showDeleted = null;
        ListMessagesResponse response = api.chatSpacesMessagesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, showDeleted);
        // TODO: test validations
    }

    /**
     * Updates a message. There&#39;s a difference between the &#x60;patch&#x60; and &#x60;update&#x60; methods. The &#x60;patch&#x60; method uses a &#x60;patch&#x60; request while the &#x60;update&#x60; method uses a &#x60;put&#x60; request. We recommend using the &#x60;patch&#x60; method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String updateMask = null;
        Message message = null;
        Message response = api.chatSpacesMessagesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, updateMask, message);
        // TODO: test validations
    }

    /**
     * Creates a reaction and adds it to a message. For an example, see [Create a reaction](https://developers.google.com/chat/api/guides/v1/reactions/create). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users). Only unicode emoji are supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesReactionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Reaction reaction = null;
        Reaction response = api.chatSpacesMessagesReactionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reaction);
        // TODO: test validations
    }

    /**
     * Deletes a reaction to a message. For an example, see [Delete a reaction](https://developers.google.com/chat/api/guides/v1/reactions/delete). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesReactionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.chatSpacesMessagesReactionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Lists reactions to a message. For an example, see [List reactions](https://developers.google.com/chat/api/guides/v1/reactions/list). Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesReactionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReactionsResponse response = api.chatSpacesMessagesReactionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a message. There&#39;s a difference between the &#x60;patch&#x60; and &#x60;update&#x60; methods. The &#x60;patch&#x60; method uses a &#x60;patch&#x60; request while the &#x60;update&#x60; method uses a &#x60;put&#x60; request. We recommend using the &#x60;patch&#x60; method. For an example, see [Update a message](https://developers.google.com/chat/api/guides/v1/messages/update). Requires [authentication](https://developers.google.com/chat/api/guides/auth). Supports [app authentication](https://developers.google.com/chat/api/guides/auth/service-accounts) and [user authentication](https://developers.google.com/chat/api/guides/auth/users). When using app authentication, requests can only update messages created by the calling Chat app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesMessagesUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String updateMask = null;
        Message message = null;
        Message response = api.chatSpacesMessagesUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, updateMask, message);
        // TODO: test validations
    }

    /**
     * Creates a space and adds specified users to it. The calling user is automatically added to the space, and shouldn&#39;t be specified as a membership in the request. For an example, see [Set up a space](https://developers.google.com/chat/api/guides/v1/spaces/set-up). To specify the human members to add, add memberships with the appropriate &#x60;member.name&#x60; in the &#x60;SetUpSpaceRequest&#x60;. To add a human user, use &#x60;users/{user}&#x60;, where &#x60;{user}&#x60; can be the email address for the user. For users in the same Workspace organization &#x60;{user}&#x60; can also be the &#x60;id&#x60; for the person from the People API, or the &#x60;id&#x60; for the user in the Directory API. For example, if the People API Person profile ID for &#x60;user@example.com&#x60; is &#x60;123456789&#x60;, you can add the user to the space by setting the &#x60;membership.member.name&#x60; to &#x60;users/user@example.com&#x60; or &#x60;users/123456789&#x60;. For a space or group chat, if the caller blocks or is blocked by some members, then those members aren&#39;t added to the created space. To create a direct message (DM) between the calling user and another human user, specify exactly one membership to represent the human user. If one user blocks the other, the request fails and the DM isn&#39;t created. To create a DM between the calling user and the calling app, set &#x60;Space.singleUserBotDm&#x60; to &#x60;true&#x60; and don&#39;t specify any memberships. You can only use this method to set up a DM with the calling app. To add the calling app as a member of a space or an existing DM between two human users, see [create a membership](https://developers.google.com/chat/api/guides/v1/members/create). If a DM already exists between two users, even when one user blocks the other at the time a request is made, then the existing DM is returned. Spaces with threaded replies aren&#39;t supported. If you receive the error message &#x60;ALREADY_EXISTS&#x60; when setting up a space, try a different &#x60;displayName&#x60;. An existing space within the Google Workspace organization might already use this display name. Requires [user authentication](https://developers.google.com/chat/api/guides/auth/users).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatSpacesSetupTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetUpSpaceRequest setUpSpaceRequest = null;
        Space response = api.chatSpacesSetup($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setUpSpaceRequest);
        // TODO: test validations
    }

}
