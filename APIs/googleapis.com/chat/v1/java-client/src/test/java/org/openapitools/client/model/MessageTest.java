/*
 * Google Chat API
 * The Google Chat API lets you build Chat apps to integrate your services with Google Chat and manage Chat resources such as spaces, members, and messages.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionResponse;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.AttachedGif;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardWithId;
import org.openapitools.client.model.DeletionMetadata;
import org.openapitools.client.model.EmojiReactionSummary;
import org.openapitools.client.model.MatchedUrl;
import org.openapitools.client.model.QuotedMessageMetadata;
import org.openapitools.client.model.SlashCommand;
import org.openapitools.client.model.Space;
import org.openapitools.client.model.Thread;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Message
 */
public class MessageTest {
    private final Message model = new Message();

    /**
     * Model tests for Message
     */
    @Test
    public void testMessage() {
        // TODO: test Message
    }

    /**
     * Test the property 'actionResponse'
     */
    @Test
    public void actionResponseTest() {
        // TODO: test actionResponse
    }

    /**
     * Test the property 'annotations'
     */
    @Test
    public void annotationsTest() {
        // TODO: test annotations
    }

    /**
     * Test the property 'argumentText'
     */
    @Test
    public void argumentTextTest() {
        // TODO: test argumentText
    }

    /**
     * Test the property 'attachedGifs'
     */
    @Test
    public void attachedGifsTest() {
        // TODO: test attachedGifs
    }

    /**
     * Test the property 'attachment'
     */
    @Test
    public void attachmentTest() {
        // TODO: test attachment
    }

    /**
     * Test the property 'cards'
     */
    @Test
    public void cardsTest() {
        // TODO: test cards
    }

    /**
     * Test the property 'cardsV2'
     */
    @Test
    public void cardsV2Test() {
        // TODO: test cardsV2
    }

    /**
     * Test the property 'clientAssignedMessageId'
     */
    @Test
    public void clientAssignedMessageIdTest() {
        // TODO: test clientAssignedMessageId
    }

    /**
     * Test the property 'createTime'
     */
    @Test
    public void createTimeTest() {
        // TODO: test createTime
    }

    /**
     * Test the property 'deleteTime'
     */
    @Test
    public void deleteTimeTest() {
        // TODO: test deleteTime
    }

    /**
     * Test the property 'deletionMetadata'
     */
    @Test
    public void deletionMetadataTest() {
        // TODO: test deletionMetadata
    }

    /**
     * Test the property 'emojiReactionSummaries'
     */
    @Test
    public void emojiReactionSummariesTest() {
        // TODO: test emojiReactionSummaries
    }

    /**
     * Test the property 'fallbackText'
     */
    @Test
    public void fallbackTextTest() {
        // TODO: test fallbackText
    }

    /**
     * Test the property 'formattedText'
     */
    @Test
    public void formattedTextTest() {
        // TODO: test formattedText
    }

    /**
     * Test the property 'lastUpdateTime'
     */
    @Test
    public void lastUpdateTimeTest() {
        // TODO: test lastUpdateTime
    }

    /**
     * Test the property 'matchedUrl'
     */
    @Test
    public void matchedUrlTest() {
        // TODO: test matchedUrl
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'privateMessageViewer'
     */
    @Test
    public void privateMessageViewerTest() {
        // TODO: test privateMessageViewer
    }

    /**
     * Test the property 'quotedMessageMetadata'
     */
    @Test
    public void quotedMessageMetadataTest() {
        // TODO: test quotedMessageMetadata
    }

    /**
     * Test the property 'sender'
     */
    @Test
    public void senderTest() {
        // TODO: test sender
    }

    /**
     * Test the property 'slashCommand'
     */
    @Test
    public void slashCommandTest() {
        // TODO: test slashCommand
    }

    /**
     * Test the property 'space'
     */
    @Test
    public void spaceTest() {
        // TODO: test space
    }

    /**
     * Test the property 'text'
     */
    @Test
    public void textTest() {
        // TODO: test text
    }

    /**
     * Test the property 'thread'
     */
    @Test
    public void threadTest() {
        // TODO: test thread
    }

    /**
     * Test the property 'threadReply'
     */
    @Test
    public void threadReplyTest() {
        // TODO: test threadReply
    }

}
