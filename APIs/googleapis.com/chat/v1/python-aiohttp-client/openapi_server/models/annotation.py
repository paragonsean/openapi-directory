# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.slash_command_metadata import SlashCommandMetadata
from openapi_server.models.user_mention_metadata import UserMentionMetadata
from openapi_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, slash_command: SlashCommandMetadata=None, start_index: int=None, type: str=None, user_mention: UserMentionMetadata=None):
        """Annotation - a model defined in OpenAPI

        :param length: The length of this Annotation.
        :param slash_command: The slash_command of this Annotation.
        :param start_index: The start_index of this Annotation.
        :param type: The type of this Annotation.
        :param user_mention: The user_mention of this Annotation.
        """
        self.openapi_types = {
            'length': int,
            'slash_command': SlashCommandMetadata,
            'start_index': int,
            'type': str,
            'user_mention': UserMentionMetadata
        }

        self.attribute_map = {
            'length': 'length',
            'slash_command': 'slashCommand',
            'start_index': 'startIndex',
            'type': 'type',
            'user_mention': 'userMention'
        }

        self._length = length
        self._slash_command = slash_command
        self._start_index = start_index
        self._type = type
        self._user_mention = user_mention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotation of this Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this Annotation.

        Length of the substring in the plain-text message body this annotation corresponds to.

        :return: The length of this Annotation.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Annotation.

        Length of the substring in the plain-text message body this annotation corresponds to.

        :param length: The length of this Annotation.
        :type length: int
        """

        self._length = length

    @property
    def slash_command(self):
        """Gets the slash_command of this Annotation.


        :return: The slash_command of this Annotation.
        :rtype: SlashCommandMetadata
        """
        return self._slash_command

    @slash_command.setter
    def slash_command(self, slash_command):
        """Sets the slash_command of this Annotation.


        :param slash_command: The slash_command of this Annotation.
        :type slash_command: SlashCommandMetadata
        """

        self._slash_command = slash_command

    @property
    def start_index(self):
        """Gets the start_index of this Annotation.

        Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.

        :return: The start_index of this Annotation.
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this Annotation.

        Start index (0-based, inclusive) in the plain-text message body this annotation corresponds to.

        :param start_index: The start_index of this Annotation.
        :type start_index: int
        """

        self._start_index = start_index

    @property
    def type(self):
        """Gets the type of this Annotation.

        The type of this annotation.

        :return: The type of this Annotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Annotation.

        The type of this annotation.

        :param type: The type of this Annotation.
        :type type: str
        """
        allowed_values = ["ANNOTATION_TYPE_UNSPECIFIED", "USER_MENTION", "SLASH_COMMAND"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_mention(self):
        """Gets the user_mention of this Annotation.


        :return: The user_mention of this Annotation.
        :rtype: UserMentionMetadata
        """
        return self._user_mention

    @user_mention.setter
    def user_mention(self, user_mention):
        """Sets the user_mention of this Annotation.


        :param user_mention: The user_mention of this Annotation.
        :type user_mention: UserMentionMetadata
        """

        self._user_mention = user_mention
