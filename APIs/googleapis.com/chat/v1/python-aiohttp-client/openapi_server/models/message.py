# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_response import ActionResponse
from openapi_server.models.annotation import Annotation
from openapi_server.models.attached_gif import AttachedGif
from openapi_server.models.attachment import Attachment
from openapi_server.models.card import Card
from openapi_server.models.card_with_id import CardWithId
from openapi_server.models.deletion_metadata import DeletionMetadata
from openapi_server.models.emoji_reaction_summary import EmojiReactionSummary
from openapi_server.models.matched_url import MatchedUrl
from openapi_server.models.quoted_message_metadata import QuotedMessageMetadata
from openapi_server.models.slash_command import SlashCommand
from openapi_server.models.space import Space
from openapi_server.models.thread import Thread
from openapi_server.models.user import User
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_response: ActionResponse=None, annotations: List[Annotation]=None, argument_text: str=None, attached_gifs: List[AttachedGif]=None, attachment: List[Attachment]=None, cards: List[Card]=None, cards_v2: List[CardWithId]=None, client_assigned_message_id: str=None, create_time: str=None, delete_time: str=None, deletion_metadata: DeletionMetadata=None, emoji_reaction_summaries: List[EmojiReactionSummary]=None, fallback_text: str=None, formatted_text: str=None, last_update_time: str=None, matched_url: MatchedUrl=None, name: str=None, private_message_viewer: User=None, quoted_message_metadata: QuotedMessageMetadata=None, sender: User=None, slash_command: SlashCommand=None, space: Space=None, text: str=None, thread: Thread=None, thread_reply: bool=None):
        """Message - a model defined in OpenAPI

        :param action_response: The action_response of this Message.
        :param annotations: The annotations of this Message.
        :param argument_text: The argument_text of this Message.
        :param attached_gifs: The attached_gifs of this Message.
        :param attachment: The attachment of this Message.
        :param cards: The cards of this Message.
        :param cards_v2: The cards_v2 of this Message.
        :param client_assigned_message_id: The client_assigned_message_id of this Message.
        :param create_time: The create_time of this Message.
        :param delete_time: The delete_time of this Message.
        :param deletion_metadata: The deletion_metadata of this Message.
        :param emoji_reaction_summaries: The emoji_reaction_summaries of this Message.
        :param fallback_text: The fallback_text of this Message.
        :param formatted_text: The formatted_text of this Message.
        :param last_update_time: The last_update_time of this Message.
        :param matched_url: The matched_url of this Message.
        :param name: The name of this Message.
        :param private_message_viewer: The private_message_viewer of this Message.
        :param quoted_message_metadata: The quoted_message_metadata of this Message.
        :param sender: The sender of this Message.
        :param slash_command: The slash_command of this Message.
        :param space: The space of this Message.
        :param text: The text of this Message.
        :param thread: The thread of this Message.
        :param thread_reply: The thread_reply of this Message.
        """
        self.openapi_types = {
            'action_response': ActionResponse,
            'annotations': List[Annotation],
            'argument_text': str,
            'attached_gifs': List[AttachedGif],
            'attachment': List[Attachment],
            'cards': List[Card],
            'cards_v2': List[CardWithId],
            'client_assigned_message_id': str,
            'create_time': str,
            'delete_time': str,
            'deletion_metadata': DeletionMetadata,
            'emoji_reaction_summaries': List[EmojiReactionSummary],
            'fallback_text': str,
            'formatted_text': str,
            'last_update_time': str,
            'matched_url': MatchedUrl,
            'name': str,
            'private_message_viewer': User,
            'quoted_message_metadata': QuotedMessageMetadata,
            'sender': User,
            'slash_command': SlashCommand,
            'space': Space,
            'text': str,
            'thread': Thread,
            'thread_reply': bool
        }

        self.attribute_map = {
            'action_response': 'actionResponse',
            'annotations': 'annotations',
            'argument_text': 'argumentText',
            'attached_gifs': 'attachedGifs',
            'attachment': 'attachment',
            'cards': 'cards',
            'cards_v2': 'cardsV2',
            'client_assigned_message_id': 'clientAssignedMessageId',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'deletion_metadata': 'deletionMetadata',
            'emoji_reaction_summaries': 'emojiReactionSummaries',
            'fallback_text': 'fallbackText',
            'formatted_text': 'formattedText',
            'last_update_time': 'lastUpdateTime',
            'matched_url': 'matchedUrl',
            'name': 'name',
            'private_message_viewer': 'privateMessageViewer',
            'quoted_message_metadata': 'quotedMessageMetadata',
            'sender': 'sender',
            'slash_command': 'slashCommand',
            'space': 'space',
            'text': 'text',
            'thread': 'thread',
            'thread_reply': 'threadReply'
        }

        self._action_response = action_response
        self._annotations = annotations
        self._argument_text = argument_text
        self._attached_gifs = attached_gifs
        self._attachment = attachment
        self._cards = cards
        self._cards_v2 = cards_v2
        self._client_assigned_message_id = client_assigned_message_id
        self._create_time = create_time
        self._delete_time = delete_time
        self._deletion_metadata = deletion_metadata
        self._emoji_reaction_summaries = emoji_reaction_summaries
        self._fallback_text = fallback_text
        self._formatted_text = formatted_text
        self._last_update_time = last_update_time
        self._matched_url = matched_url
        self._name = name
        self._private_message_viewer = private_message_viewer
        self._quoted_message_metadata = quoted_message_metadata
        self._sender = sender
        self._slash_command = slash_command
        self._space = space
        self._text = text
        self._thread = thread
        self._thread_reply = thread_reply

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_response(self):
        """Gets the action_response of this Message.


        :return: The action_response of this Message.
        :rtype: ActionResponse
        """
        return self._action_response

    @action_response.setter
    def action_response(self, action_response):
        """Sets the action_response of this Message.


        :param action_response: The action_response of this Message.
        :type action_response: ActionResponse
        """

        self._action_response = action_response

    @property
    def annotations(self):
        """Gets the annotations of this Message.

        Output only. Annotations associated with the `text` in this message.

        :return: The annotations of this Message.
        :rtype: List[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Message.

        Output only. Annotations associated with the `text` in this message.

        :param annotations: The annotations of this Message.
        :type annotations: List[Annotation]
        """

        self._annotations = annotations

    @property
    def argument_text(self):
        """Gets the argument_text of this Message.

        Output only. Plain-text body of the message with all Chat app mentions stripped out.

        :return: The argument_text of this Message.
        :rtype: str
        """
        return self._argument_text

    @argument_text.setter
    def argument_text(self, argument_text):
        """Sets the argument_text of this Message.

        Output only. Plain-text body of the message with all Chat app mentions stripped out.

        :param argument_text: The argument_text of this Message.
        :type argument_text: str
        """

        self._argument_text = argument_text

    @property
    def attached_gifs(self):
        """Gets the attached_gifs of this Message.

        Output only. GIF images that are attached to the message.

        :return: The attached_gifs of this Message.
        :rtype: List[AttachedGif]
        """
        return self._attached_gifs

    @attached_gifs.setter
    def attached_gifs(self, attached_gifs):
        """Sets the attached_gifs of this Message.

        Output only. GIF images that are attached to the message.

        :param attached_gifs: The attached_gifs of this Message.
        :type attached_gifs: List[AttachedGif]
        """

        self._attached_gifs = attached_gifs

    @property
    def attachment(self):
        """Gets the attachment of this Message.

        User-uploaded attachment.

        :return: The attachment of this Message.
        :rtype: List[Attachment]
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Message.

        User-uploaded attachment.

        :param attachment: The attachment of this Message.
        :type attachment: List[Attachment]
        """

        self._attachment = attachment

    @property
    def cards(self):
        """Gets the cards of this Message.

        Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.

        :return: The cards of this Message.
        :rtype: List[Card]
        """
        return self._cards

    @cards.setter
    def cards(self, cards):
        """Sets the cards of this Message.

        Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.

        :param cards: The cards of this Message.
        :type cards: List[Card]
        """

        self._cards = cards

    @property
    def cards_v2(self):
        """Gets the cards_v2 of this Message.

        An array of [cards](https://developers.google.com/chat/api/reference/rest/v1/cards). Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the messages can't contain cards. To learn about cards and how to create them, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). [Card builder](https://addons.gsuite.google.com/uikit/builder)

        :return: The cards_v2 of this Message.
        :rtype: List[CardWithId]
        """
        return self._cards_v2

    @cards_v2.setter
    def cards_v2(self, cards_v2):
        """Sets the cards_v2 of this Message.

        An array of [cards](https://developers.google.com/chat/api/reference/rest/v1/cards). Only Chat apps can create cards. If your Chat app [authenticates as a user](https://developers.google.com/chat/api/guides/auth/users), the messages can't contain cards. To learn about cards and how to create them, see [Design dynamic, interactive, and consistent UIs with cards](https://developers.google.com/chat/ui). [Card builder](https://addons.gsuite.google.com/uikit/builder)

        :param cards_v2: The cards_v2 of this Message.
        :type cards_v2: List[CardWithId]
        """

        self._cards_v2 = cards_v2

    @property
    def client_assigned_message_id(self):
        """Gets the client_assigned_message_id of this Message.

        Optional. A custom ID for the message. You can use field to identify a message, or to get, delete, or update a message. To set a custom ID, specify the [`messageId`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#body.QUERY_PARAMETERS.message_id) field when you create the message. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).

        :return: The client_assigned_message_id of this Message.
        :rtype: str
        """
        return self._client_assigned_message_id

    @client_assigned_message_id.setter
    def client_assigned_message_id(self, client_assigned_message_id):
        """Sets the client_assigned_message_id of this Message.

        Optional. A custom ID for the message. You can use field to identify a message, or to get, delete, or update a message. To set a custom ID, specify the [`messageId`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages/create#body.QUERY_PARAMETERS.message_id) field when you create the message. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).

        :param client_assigned_message_id: The client_assigned_message_id of this Message.
        :type client_assigned_message_id: str
        """

        self._client_assigned_message_id = client_assigned_message_id

    @property
    def create_time(self):
        """Gets the create_time of this Message.

        Optional. Immutable. For spaces created in Chat, the time at which the message was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the message was created in the source in order to preserve the original creation time.

        :return: The create_time of this Message.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Message.

        Optional. Immutable. For spaces created in Chat, the time at which the message was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the message was created in the source in order to preserve the original creation time.

        :param create_time: The create_time of this Message.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Message.

        Output only. The time at which the message was deleted in Google Chat. If the message is never deleted, this field is empty.

        :return: The delete_time of this Message.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Message.

        Output only. The time at which the message was deleted in Google Chat. If the message is never deleted, this field is empty.

        :param delete_time: The delete_time of this Message.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def deletion_metadata(self):
        """Gets the deletion_metadata of this Message.


        :return: The deletion_metadata of this Message.
        :rtype: DeletionMetadata
        """
        return self._deletion_metadata

    @deletion_metadata.setter
    def deletion_metadata(self, deletion_metadata):
        """Sets the deletion_metadata of this Message.


        :param deletion_metadata: The deletion_metadata of this Message.
        :type deletion_metadata: DeletionMetadata
        """

        self._deletion_metadata = deletion_metadata

    @property
    def emoji_reaction_summaries(self):
        """Gets the emoji_reaction_summaries of this Message.

        Output only. The list of emoji reaction summaries on the message.

        :return: The emoji_reaction_summaries of this Message.
        :rtype: List[EmojiReactionSummary]
        """
        return self._emoji_reaction_summaries

    @emoji_reaction_summaries.setter
    def emoji_reaction_summaries(self, emoji_reaction_summaries):
        """Sets the emoji_reaction_summaries of this Message.

        Output only. The list of emoji reaction summaries on the message.

        :param emoji_reaction_summaries: The emoji_reaction_summaries of this Message.
        :type emoji_reaction_summaries: List[EmojiReactionSummary]
        """

        self._emoji_reaction_summaries = emoji_reaction_summaries

    @property
    def fallback_text(self):
        """Gets the fallback_text of this Message.

        A plain-text description of the message's cards, used when the actual cards can't be displayed—for example, mobile notifications.

        :return: The fallback_text of this Message.
        :rtype: str
        """
        return self._fallback_text

    @fallback_text.setter
    def fallback_text(self, fallback_text):
        """Sets the fallback_text of this Message.

        A plain-text description of the message's cards, used when the actual cards can't be displayed—for example, mobile notifications.

        :param fallback_text: The fallback_text of this Message.
        :type fallback_text: str
        """

        self._fallback_text = fallback_text

    @property
    def formatted_text(self):
        """Gets the formatted_text of this Message.

        Output only. Contains the message `text` with markups added to communicate formatting. This field might not capture all formatting visible in the UI, but includes the following: * [Markup syntax](https://developers.google.com/chat/format-messages) for bold, italic, strikethrough, monospace, and monospace block. * [User mentions](https://developers.google.com/chat/format-messages#messages-@mention) using the format ``. * Custom hyperlinks using the format `<{url}|{rendered_text}>` where the first string is the URL and the second is the rendered text—for example, ``. * Custom emoji using the format `:{emoji_name}:`—for example, `:smile:`. This doesn't apply to Unicode emoji, such as `U+1F600` for a grinning face emoji. For more information, see [View text formatting sent in a message](https://developers.google.com/chat/format-messages#view_text_formatting_sent_in_a_message)

        :return: The formatted_text of this Message.
        :rtype: str
        """
        return self._formatted_text

    @formatted_text.setter
    def formatted_text(self, formatted_text):
        """Sets the formatted_text of this Message.

        Output only. Contains the message `text` with markups added to communicate formatting. This field might not capture all formatting visible in the UI, but includes the following: * [Markup syntax](https://developers.google.com/chat/format-messages) for bold, italic, strikethrough, monospace, and monospace block. * [User mentions](https://developers.google.com/chat/format-messages#messages-@mention) using the format ``. * Custom hyperlinks using the format `<{url}|{rendered_text}>` where the first string is the URL and the second is the rendered text—for example, ``. * Custom emoji using the format `:{emoji_name}:`—for example, `:smile:`. This doesn't apply to Unicode emoji, such as `U+1F600` for a grinning face emoji. For more information, see [View text formatting sent in a message](https://developers.google.com/chat/format-messages#view_text_formatting_sent_in_a_message)

        :param formatted_text: The formatted_text of this Message.
        :type formatted_text: str
        """

        self._formatted_text = formatted_text

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Message.

        Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.

        :return: The last_update_time of this Message.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Message.

        Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.

        :param last_update_time: The last_update_time of this Message.
        :type last_update_time: str
        """

        self._last_update_time = last_update_time

    @property
    def matched_url(self):
        """Gets the matched_url of this Message.


        :return: The matched_url of this Message.
        :rtype: MatchedUrl
        """
        return self._matched_url

    @matched_url.setter
    def matched_url(self, matched_url):
        """Sets the matched_url of this Message.


        :param matched_url: The matched_url of this Message.
        :type matched_url: MatchedUrl
        """

        self._matched_url = matched_url

    @property
    def name(self):
        """Gets the name of this Message.

        Resource name of the message. Format: `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space where the message is posted and `{message}` is a system-assigned ID for the message. For example, `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing `{message}` with the value from the `clientAssignedMessageId` field. For example, `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).

        :return: The name of this Message.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Message.

        Resource name of the message. Format: `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space where the message is posted and `{message}` is a system-assigned ID for the message. For example, `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom ID when you create a message, you can use this ID to specify the message in a request by replacing `{message}` with the value from the `clientAssignedMessageId` field. For example, `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a message](https://developers.google.com/chat/api/guides/v1/messages/create#name_a_created_message).

        :param name: The name of this Message.
        :type name: str
        """

        self._name = name

    @property
    def private_message_viewer(self):
        """Gets the private_message_viewer of this Message.


        :return: The private_message_viewer of this Message.
        :rtype: User
        """
        return self._private_message_viewer

    @private_message_viewer.setter
    def private_message_viewer(self, private_message_viewer):
        """Sets the private_message_viewer of this Message.


        :param private_message_viewer: The private_message_viewer of this Message.
        :type private_message_viewer: User
        """

        self._private_message_viewer = private_message_viewer

    @property
    def quoted_message_metadata(self):
        """Gets the quoted_message_metadata of this Message.


        :return: The quoted_message_metadata of this Message.
        :rtype: QuotedMessageMetadata
        """
        return self._quoted_message_metadata

    @quoted_message_metadata.setter
    def quoted_message_metadata(self, quoted_message_metadata):
        """Sets the quoted_message_metadata of this Message.


        :param quoted_message_metadata: The quoted_message_metadata of this Message.
        :type quoted_message_metadata: QuotedMessageMetadata
        """

        self._quoted_message_metadata = quoted_message_metadata

    @property
    def sender(self):
        """Gets the sender of this Message.


        :return: The sender of this Message.
        :rtype: User
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this Message.


        :param sender: The sender of this Message.
        :type sender: User
        """

        self._sender = sender

    @property
    def slash_command(self):
        """Gets the slash_command of this Message.


        :return: The slash_command of this Message.
        :rtype: SlashCommand
        """
        return self._slash_command

    @slash_command.setter
    def slash_command(self, slash_command):
        """Sets the slash_command of this Message.


        :param slash_command: The slash_command of this Message.
        :type slash_command: SlashCommand
        """

        self._slash_command = slash_command

    @property
    def space(self):
        """Gets the space of this Message.


        :return: The space of this Message.
        :rtype: Space
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this Message.


        :param space: The space of this Message.
        :type space: Space
        """

        self._space = space

    @property
    def text(self):
        """Gets the text of this Message.

        Plain-text body of the message. The first link to an image, video, or web page generates a [preview chip](https://developers.google.com/chat/how-tos/preview-links). You can also [@mention a Google Chat user](https://developers.google.com/chat/format-messages#messages-@mention), or everyone in the space. To learn about creating text messages, see [Send a text message](https://developers.google.com/chat/api/guides/v1/messages/create#create-text-messages).

        :return: The text of this Message.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Message.

        Plain-text body of the message. The first link to an image, video, or web page generates a [preview chip](https://developers.google.com/chat/how-tos/preview-links). You can also [@mention a Google Chat user](https://developers.google.com/chat/format-messages#messages-@mention), or everyone in the space. To learn about creating text messages, see [Send a text message](https://developers.google.com/chat/api/guides/v1/messages/create#create-text-messages).

        :param text: The text of this Message.
        :type text: str
        """

        self._text = text

    @property
    def thread(self):
        """Gets the thread of this Message.


        :return: The thread of this Message.
        :rtype: Thread
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this Message.


        :param thread: The thread of this Message.
        :type thread: Thread
        """

        self._thread = thread

    @property
    def thread_reply(self):
        """Gets the thread_reply of this Message.

        Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`.

        :return: The thread_reply of this Message.
        :rtype: bool
        """
        return self._thread_reply

    @thread_reply.setter
    def thread_reply(self, thread_reply):
        """Sets the thread_reply of this Message.

        Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`.

        :param thread_reply: The thread_reply of this Message.
        :type thread_reply: bool
        """

        self._thread_reply = thread_reply
