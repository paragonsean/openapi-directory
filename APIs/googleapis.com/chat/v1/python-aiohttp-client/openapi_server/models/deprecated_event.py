# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_event_object import CommonEventObject
from openapi_server.models.form_action import FormAction
from openapi_server.models.message import Message
from openapi_server.models.space import Space
from openapi_server.models.user import User
from openapi_server import util


class DeprecatedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: FormAction=None, common: CommonEventObject=None, config_complete_redirect_url: str=None, dialog_event_type: str=None, event_time: str=None, is_dialog_event: bool=None, message: Message=None, space: Space=None, thread_key: str=None, token: str=None, type: str=None, user: User=None):
        """DeprecatedEvent - a model defined in OpenAPI

        :param action: The action of this DeprecatedEvent.
        :param common: The common of this DeprecatedEvent.
        :param config_complete_redirect_url: The config_complete_redirect_url of this DeprecatedEvent.
        :param dialog_event_type: The dialog_event_type of this DeprecatedEvent.
        :param event_time: The event_time of this DeprecatedEvent.
        :param is_dialog_event: The is_dialog_event of this DeprecatedEvent.
        :param message: The message of this DeprecatedEvent.
        :param space: The space of this DeprecatedEvent.
        :param thread_key: The thread_key of this DeprecatedEvent.
        :param token: The token of this DeprecatedEvent.
        :param type: The type of this DeprecatedEvent.
        :param user: The user of this DeprecatedEvent.
        """
        self.openapi_types = {
            'action': FormAction,
            'common': CommonEventObject,
            'config_complete_redirect_url': str,
            'dialog_event_type': str,
            'event_time': str,
            'is_dialog_event': bool,
            'message': Message,
            'space': Space,
            'thread_key': str,
            'token': str,
            'type': str,
            'user': User
        }

        self.attribute_map = {
            'action': 'action',
            'common': 'common',
            'config_complete_redirect_url': 'configCompleteRedirectUrl',
            'dialog_event_type': 'dialogEventType',
            'event_time': 'eventTime',
            'is_dialog_event': 'isDialogEvent',
            'message': 'message',
            'space': 'space',
            'thread_key': 'threadKey',
            'token': 'token',
            'type': 'type',
            'user': 'user'
        }

        self._action = action
        self._common = common
        self._config_complete_redirect_url = config_complete_redirect_url
        self._dialog_event_type = dialog_event_type
        self._event_time = event_time
        self._is_dialog_event = is_dialog_event
        self._message = message
        self._space = space
        self._thread_key = thread_key
        self._token = token
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeprecatedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeprecatedEvent of this DeprecatedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DeprecatedEvent.


        :return: The action of this DeprecatedEvent.
        :rtype: FormAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DeprecatedEvent.


        :param action: The action of this DeprecatedEvent.
        :type action: FormAction
        """

        self._action = action

    @property
    def common(self):
        """Gets the common of this DeprecatedEvent.


        :return: The common of this DeprecatedEvent.
        :rtype: CommonEventObject
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this DeprecatedEvent.


        :param common: The common of this DeprecatedEvent.
        :type common: CommonEventObject
        """

        self._common = common

    @property
    def config_complete_redirect_url(self):
        """Gets the config_complete_redirect_url of this DeprecatedEvent.

        The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).

        :return: The config_complete_redirect_url of this DeprecatedEvent.
        :rtype: str
        """
        return self._config_complete_redirect_url

    @config_complete_redirect_url.setter
    def config_complete_redirect_url(self, config_complete_redirect_url):
        """Sets the config_complete_redirect_url of this DeprecatedEvent.

        The URL the Chat app should redirect the user to after they have completed an authorization or configuration flow outside of Google Chat. For more information, see [Connect a Chat app with other services & tools](https://developers.google.com/chat/how-tos/connect-web-services-tools).

        :param config_complete_redirect_url: The config_complete_redirect_url of this DeprecatedEvent.
        :type config_complete_redirect_url: str
        """

        self._config_complete_redirect_url = config_complete_redirect_url

    @property
    def dialog_event_type(self):
        """Gets the dialog_event_type of this DeprecatedEvent.

        The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.

        :return: The dialog_event_type of this DeprecatedEvent.
        :rtype: str
        """
        return self._dialog_event_type

    @dialog_event_type.setter
    def dialog_event_type(self, dialog_event_type):
        """Sets the dialog_event_type of this DeprecatedEvent.

        The type of [dialog](https://developers.google.com/chat/how-tos/dialogs) interaction event received.

        :param dialog_event_type: The dialog_event_type of this DeprecatedEvent.
        :type dialog_event_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "REQUEST_DIALOG", "SUBMIT_DIALOG", "CANCEL_DIALOG"]  # noqa: E501
        if dialog_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dialog_event_type` ({0}), must be one of {1}"
                .format(dialog_event_type, allowed_values)
            )

        self._dialog_event_type = dialog_event_type

    @property
    def event_time(self):
        """Gets the event_time of this DeprecatedEvent.

        The timestamp indicating when the interaction event occurred.

        :return: The event_time of this DeprecatedEvent.
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this DeprecatedEvent.

        The timestamp indicating when the interaction event occurred.

        :param event_time: The event_time of this DeprecatedEvent.
        :type event_time: str
        """

        self._event_time = event_time

    @property
    def is_dialog_event(self):
        """Gets the is_dialog_event of this DeprecatedEvent.

        For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).

        :return: The is_dialog_event of this DeprecatedEvent.
        :rtype: bool
        """
        return self._is_dialog_event

    @is_dialog_event.setter
    def is_dialog_event(self, is_dialog_event):
        """Sets the is_dialog_event of this DeprecatedEvent.

        For `CARD_CLICKED` interaction events, whether the user interacted with a [dialog](https://developers.google.com/chat/how-tos/dialogs).

        :param is_dialog_event: The is_dialog_event of this DeprecatedEvent.
        :type is_dialog_event: bool
        """

        self._is_dialog_event = is_dialog_event

    @property
    def message(self):
        """Gets the message of this DeprecatedEvent.


        :return: The message of this DeprecatedEvent.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeprecatedEvent.


        :param message: The message of this DeprecatedEvent.
        :type message: Message
        """

        self._message = message

    @property
    def space(self):
        """Gets the space of this DeprecatedEvent.


        :return: The space of this DeprecatedEvent.
        :rtype: Space
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this DeprecatedEvent.


        :param space: The space of this DeprecatedEvent.
        :type space: Space
        """

        self._space = space

    @property
    def thread_key(self):
        """Gets the thread_key of this DeprecatedEvent.

        The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.

        :return: The thread_key of this DeprecatedEvent.
        :rtype: str
        """
        return self._thread_key

    @thread_key.setter
    def thread_key(self, thread_key):
        """Sets the thread_key of this DeprecatedEvent.

        The Chat app-defined key for the thread related to the interaction event. See [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key) for more information.

        :param thread_key: The thread_key of this DeprecatedEvent.
        :type thread_key: str
        """

        self._thread_key = thread_key

    @property
    def token(self):
        """Gets the token of this DeprecatedEvent.

        A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).

        :return: The token of this DeprecatedEvent.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DeprecatedEvent.

        A secret value that legacy Chat apps can use to verify if a request is from Google. Google randomly generates the token, and its value remains static. You can obtain, revoke, or regenerate the token from the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat) in the Google Cloud Console. Modern Chat apps don't use this field. It is absent from API responses and the [Chat API configuration page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).

        :param token: The token of this DeprecatedEvent.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this DeprecatedEvent.

        The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).

        :return: The type of this DeprecatedEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeprecatedEvent.

        The type of interaction event. For details, see [Types of Google Chat app interaction events](https://developers.google.com/chat/api/guides/message-formats/events).

        :param type: The type of this DeprecatedEvent.
        :type type: str
        """
        allowed_values = ["UNSPECIFIED", "MESSAGE", "ADDED_TO_SPACE", "REMOVED_FROM_SPACE", "CARD_CLICKED", "WIDGET_UPDATED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this DeprecatedEvent.


        :return: The user of this DeprecatedEvent.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DeprecatedEvent.


        :param user: The user of this DeprecatedEvent.
        :type user: User
        """

        self._user = user
