# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inputs import Inputs
from openapi_server.models.time_zone import TimeZone
from openapi_server import util


class CommonEventObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_inputs: Dict[str, Inputs]=None, host_app: str=None, invoked_function: str=None, parameters: Dict[str, str]=None, platform: str=None, time_zone: TimeZone=None, user_locale: str=None):
        """CommonEventObject - a model defined in OpenAPI

        :param form_inputs: The form_inputs of this CommonEventObject.
        :param host_app: The host_app of this CommonEventObject.
        :param invoked_function: The invoked_function of this CommonEventObject.
        :param parameters: The parameters of this CommonEventObject.
        :param platform: The platform of this CommonEventObject.
        :param time_zone: The time_zone of this CommonEventObject.
        :param user_locale: The user_locale of this CommonEventObject.
        """
        self.openapi_types = {
            'form_inputs': Dict[str, Inputs],
            'host_app': str,
            'invoked_function': str,
            'parameters': Dict[str, str],
            'platform': str,
            'time_zone': TimeZone,
            'user_locale': str
        }

        self.attribute_map = {
            'form_inputs': 'formInputs',
            'host_app': 'hostApp',
            'invoked_function': 'invokedFunction',
            'parameters': 'parameters',
            'platform': 'platform',
            'time_zone': 'timeZone',
            'user_locale': 'userLocale'
        }

        self._form_inputs = form_inputs
        self._host_app = host_app
        self._invoked_function = invoked_function
        self._parameters = parameters
        self._platform = platform
        self._time_zone = time_zone
        self._user_locale = user_locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonEventObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonEventObject of this CommonEventObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_inputs(self):
        """Gets the form_inputs of this CommonEventObject.

        A map containing the values that a user inputs in a widget from a card or dialog. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. For details, see [Process information inputted by users](https://developers.google.com/chat/ui/read-form-data).

        :return: The form_inputs of this CommonEventObject.
        :rtype: Dict[str, Inputs]
        """
        return self._form_inputs

    @form_inputs.setter
    def form_inputs(self, form_inputs):
        """Sets the form_inputs of this CommonEventObject.

        A map containing the values that a user inputs in a widget from a card or dialog. The map keys are the string IDs assigned to each widget, and the values represent inputs to the widget. For details, see [Process information inputted by users](https://developers.google.com/chat/ui/read-form-data).

        :param form_inputs: The form_inputs of this CommonEventObject.
        :type form_inputs: Dict[str, Inputs]
        """

        self._form_inputs = form_inputs

    @property
    def host_app(self):
        """Gets the host_app of this CommonEventObject.

        The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.

        :return: The host_app of this CommonEventObject.
        :rtype: str
        """
        return self._host_app

    @host_app.setter
    def host_app(self, host_app):
        """Sets the host_app of this CommonEventObject.

        The hostApp enum which indicates the app the add-on is invoked from. Always `CHAT` for Chat apps.

        :param host_app: The host_app of this CommonEventObject.
        :type host_app: str
        """
        allowed_values = ["UNSPECIFIED_HOST_APP", "GMAIL", "CALENDAR", "DRIVE", "DEMO", "DOCS", "MEET", "SHEETS", "SLIDES", "DRAWINGS", "CHAT", "CHAT_IN_GMAIL"]  # noqa: E501
        if host_app not in allowed_values:
            raise ValueError(
                "Invalid value for `host_app` ({0}), must be one of {1}"
                .format(host_app, allowed_values)
            )

        self._host_app = host_app

    @property
    def invoked_function(self):
        """Gets the invoked_function of this CommonEventObject.

        Name of the invoked function associated with the widget. Only set for Chat apps.

        :return: The invoked_function of this CommonEventObject.
        :rtype: str
        """
        return self._invoked_function

    @invoked_function.setter
    def invoked_function(self, invoked_function):
        """Sets the invoked_function of this CommonEventObject.

        Name of the invoked function associated with the widget. Only set for Chat apps.

        :param invoked_function: The invoked_function of this CommonEventObject.
        :type invoked_function: str
        """

        self._invoked_function = invoked_function

    @property
    def parameters(self):
        """Gets the parameters of this CommonEventObject.

        Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.

        :return: The parameters of this CommonEventObject.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CommonEventObject.

        Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter) passed to the invoked function. Both keys and values must be strings.

        :param parameters: The parameters of this CommonEventObject.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def platform(self):
        """Gets the platform of this CommonEventObject.

        The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.

        :return: The platform of this CommonEventObject.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CommonEventObject.

        The platform enum which indicates the platform where the event originates (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.

        :param platform: The platform of this CommonEventObject.
        :type platform: str
        """
        allowed_values = ["UNKNOWN_PLATFORM", "WEB", "IOS", "ANDROID"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def time_zone(self):
        """Gets the time_zone of this CommonEventObject.


        :return: The time_zone of this CommonEventObject.
        :rtype: TimeZone
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CommonEventObject.


        :param time_zone: The time_zone of this CommonEventObject.
        :type time_zone: TimeZone
        """

        self._time_zone = time_zone

    @property
    def user_locale(self):
        """Gets the user_locale of this CommonEventObject.

        The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\".

        :return: The user_locale of this CommonEventObject.
        :rtype: str
        """
        return self._user_locale

    @user_locale.setter
    def user_locale(self, user_locale):
        """Sets the user_locale of this CommonEventObject.

        The full `locale.displayName` in the format of [ISO 639 language code]-[ISO 3166 country/region code] such as \"en-US\".

        :param user_locale: The user_locale of this CommonEventObject.
        :type user_locale: str
        """

        self._user_locale = user_locale
