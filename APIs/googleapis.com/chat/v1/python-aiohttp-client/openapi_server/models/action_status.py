# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code: str=None, user_facing_message: str=None):
        """ActionStatus - a model defined in OpenAPI

        :param status_code: The status_code of this ActionStatus.
        :param user_facing_message: The user_facing_message of this ActionStatus.
        """
        self.openapi_types = {
            'status_code': str,
            'user_facing_message': str
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'user_facing_message': 'userFacingMessage'
        }

        self._status_code = status_code
        self._user_facing_message = user_facing_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionStatus of this ActionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self):
        """Gets the status_code of this ActionStatus.

        The status code.

        :return: The status_code of this ActionStatus.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ActionStatus.

        The status code.

        :param status_code: The status_code of this ActionStatus.
        :type status_code: str
        """
        allowed_values = ["OK", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def user_facing_message(self):
        """Gets the user_facing_message of this ActionStatus.

        The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.

        :return: The user_facing_message of this ActionStatus.
        :rtype: str
        """
        return self._user_facing_message

    @user_facing_message.setter
    def user_facing_message(self, user_facing_message):
        """Sets the user_facing_message of this ActionStatus.

        The message to send users about the status of their request. If unset, a generic message based on the `status_code` is sent.

        :param user_facing_message: The user_facing_message of this ActionStatus.
        :type user_facing_message: str
        """

        self._user_facing_message = user_facing_message
