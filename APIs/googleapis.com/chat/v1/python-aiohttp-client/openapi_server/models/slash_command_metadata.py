# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class SlashCommandMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bot: User=None, command_id: str=None, command_name: str=None, triggers_dialog: bool=None, type: str=None):
        """SlashCommandMetadata - a model defined in OpenAPI

        :param bot: The bot of this SlashCommandMetadata.
        :param command_id: The command_id of this SlashCommandMetadata.
        :param command_name: The command_name of this SlashCommandMetadata.
        :param triggers_dialog: The triggers_dialog of this SlashCommandMetadata.
        :param type: The type of this SlashCommandMetadata.
        """
        self.openapi_types = {
            'bot': User,
            'command_id': str,
            'command_name': str,
            'triggers_dialog': bool,
            'type': str
        }

        self.attribute_map = {
            'bot': 'bot',
            'command_id': 'commandId',
            'command_name': 'commandName',
            'triggers_dialog': 'triggersDialog',
            'type': 'type'
        }

        self._bot = bot
        self._command_id = command_id
        self._command_name = command_name
        self._triggers_dialog = triggers_dialog
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlashCommandMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlashCommandMetadata of this SlashCommandMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bot(self):
        """Gets the bot of this SlashCommandMetadata.


        :return: The bot of this SlashCommandMetadata.
        :rtype: User
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this SlashCommandMetadata.


        :param bot: The bot of this SlashCommandMetadata.
        :type bot: User
        """

        self._bot = bot

    @property
    def command_id(self):
        """Gets the command_id of this SlashCommandMetadata.

        The command ID of the invoked slash command.

        :return: The command_id of this SlashCommandMetadata.
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this SlashCommandMetadata.

        The command ID of the invoked slash command.

        :param command_id: The command_id of this SlashCommandMetadata.
        :type command_id: str
        """

        self._command_id = command_id

    @property
    def command_name(self):
        """Gets the command_name of this SlashCommandMetadata.

        The name of the invoked slash command.

        :return: The command_name of this SlashCommandMetadata.
        :rtype: str
        """
        return self._command_name

    @command_name.setter
    def command_name(self, command_name):
        """Sets the command_name of this SlashCommandMetadata.

        The name of the invoked slash command.

        :param command_name: The command_name of this SlashCommandMetadata.
        :type command_name: str
        """

        self._command_name = command_name

    @property
    def triggers_dialog(self):
        """Gets the triggers_dialog of this SlashCommandMetadata.

        Indicates whether the slash command is for a dialog.

        :return: The triggers_dialog of this SlashCommandMetadata.
        :rtype: bool
        """
        return self._triggers_dialog

    @triggers_dialog.setter
    def triggers_dialog(self, triggers_dialog):
        """Sets the triggers_dialog of this SlashCommandMetadata.

        Indicates whether the slash command is for a dialog.

        :param triggers_dialog: The triggers_dialog of this SlashCommandMetadata.
        :type triggers_dialog: bool
        """

        self._triggers_dialog = triggers_dialog

    @property
    def type(self):
        """Gets the type of this SlashCommandMetadata.

        The type of slash command.

        :return: The type of this SlashCommandMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SlashCommandMetadata.

        The type of slash command.

        :param type: The type of this SlashCommandMetadata.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ADD", "INVOKE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
