# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Thread(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, thread_key: str=None):
        """Thread - a model defined in OpenAPI

        :param name: The name of this Thread.
        :param thread_key: The thread_key of this Thread.
        """
        self.openapi_types = {
            'name': str,
            'thread_key': str
        }

        self.attribute_map = {
            'name': 'name',
            'thread_key': 'threadKey'
        }

        self._name = name
        self._thread_key = thread_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Thread':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Thread of this Thread.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Thread.

        Output only. Resource name of the thread. Example: `spaces/{space}/threads/{thread}`

        :return: The name of this Thread.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Thread.

        Output only. Resource name of the thread. Example: `spaces/{space}/threads/{thread}`

        :param name: The name of this Thread.
        :type name: str
        """

        self._name = name

    @property
    def thread_key(self):
        """Gets the thread_key of this Thread.

        Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters. This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread `name` field instead.

        :return: The thread_key of this Thread.
        :rtype: str
        """
        return self._thread_key

    @thread_key.setter
    def thread_key(self, thread_key):
        """Sets the thread_key of this Thread.

        Optional. Input for creating or updating a thread. Otherwise, output only. ID for the thread. Supports up to 4000 characters. This ID is unique to the Chat app that sets it. For example, if multiple Chat apps create a message using the same thread key, the messages are posted in different threads. To reply in a thread created by a person or another Chat app, specify the thread `name` field instead.

        :param thread_key: The thread_key of this Thread.
        :type thread_key: str
        """

        self._thread_key = thread_key
