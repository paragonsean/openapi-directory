# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_action import CardAction
from openapi_server.models.card_header import CardHeader
from openapi_server.models.section import Section
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_actions: List[CardAction]=None, header: CardHeader=None, name: str=None, sections: List[Section]=None):
        """Card - a model defined in OpenAPI

        :param card_actions: The card_actions of this Card.
        :param header: The header of this Card.
        :param name: The name of this Card.
        :param sections: The sections of this Card.
        """
        self.openapi_types = {
            'card_actions': List[CardAction],
            'header': CardHeader,
            'name': str,
            'sections': List[Section]
        }

        self.attribute_map = {
            'card_actions': 'cardActions',
            'header': 'header',
            'name': 'name',
            'sections': 'sections'
        }

        self._card_actions = card_actions
        self._header = header
        self._name = name
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_actions(self):
        """Gets the card_actions of this Card.

        The actions of this card.

        :return: The card_actions of this Card.
        :rtype: List[CardAction]
        """
        return self._card_actions

    @card_actions.setter
    def card_actions(self, card_actions):
        """Sets the card_actions of this Card.

        The actions of this card.

        :param card_actions: The card_actions of this Card.
        :type card_actions: List[CardAction]
        """

        self._card_actions = card_actions

    @property
    def header(self):
        """Gets the header of this Card.


        :return: The header of this Card.
        :rtype: CardHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Card.


        :param header: The header of this Card.
        :type header: CardHeader
        """

        self._header = header

    @property
    def name(self):
        """Gets the name of this Card.

        Name of the card.

        :return: The name of this Card.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.

        Name of the card.

        :param name: The name of this Card.
        :type name: str
        """

        self._name = name

    @property
    def sections(self):
        """Gets the sections of this Card.

        Sections are separated by a line divider.

        :return: The sections of this Card.
        :rtype: List[Section]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this Card.

        Sections are separated by a line divider.

        :param sections: The sections of this Card.
        :type sections: List[Section]
        """

        self._sections = sections
