# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server import util


class GoogleAppsCardV1BorderStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corner_radius: int=None, stroke_color: Color=None, type: str=None):
        """GoogleAppsCardV1BorderStyle - a model defined in OpenAPI

        :param corner_radius: The corner_radius of this GoogleAppsCardV1BorderStyle.
        :param stroke_color: The stroke_color of this GoogleAppsCardV1BorderStyle.
        :param type: The type of this GoogleAppsCardV1BorderStyle.
        """
        self.openapi_types = {
            'corner_radius': int,
            'stroke_color': Color,
            'type': str
        }

        self.attribute_map = {
            'corner_radius': 'cornerRadius',
            'stroke_color': 'strokeColor',
            'type': 'type'
        }

        self._corner_radius = corner_radius
        self._stroke_color = stroke_color
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsCardV1BorderStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsCardV1BorderStyle of this GoogleAppsCardV1BorderStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corner_radius(self):
        """Gets the corner_radius of this GoogleAppsCardV1BorderStyle.

        The corner radius for the border.

        :return: The corner_radius of this GoogleAppsCardV1BorderStyle.
        :rtype: int
        """
        return self._corner_radius

    @corner_radius.setter
    def corner_radius(self, corner_radius):
        """Sets the corner_radius of this GoogleAppsCardV1BorderStyle.

        The corner radius for the border.

        :param corner_radius: The corner_radius of this GoogleAppsCardV1BorderStyle.
        :type corner_radius: int
        """

        self._corner_radius = corner_radius

    @property
    def stroke_color(self):
        """Gets the stroke_color of this GoogleAppsCardV1BorderStyle.


        :return: The stroke_color of this GoogleAppsCardV1BorderStyle.
        :rtype: Color
        """
        return self._stroke_color

    @stroke_color.setter
    def stroke_color(self, stroke_color):
        """Sets the stroke_color of this GoogleAppsCardV1BorderStyle.


        :param stroke_color: The stroke_color of this GoogleAppsCardV1BorderStyle.
        :type stroke_color: Color
        """

        self._stroke_color = stroke_color

    @property
    def type(self):
        """Gets the type of this GoogleAppsCardV1BorderStyle.

        The border type.

        :return: The type of this GoogleAppsCardV1BorderStyle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleAppsCardV1BorderStyle.

        The border type.

        :param type: The type of this GoogleAppsCardV1BorderStyle.
        :type type: str
        """
        allowed_values = ["BORDER_TYPE_UNSPECIFIED", "NO_BORDER", "STROKE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
