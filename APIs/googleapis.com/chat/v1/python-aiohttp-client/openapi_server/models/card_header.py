# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_style: str=None, image_url: str=None, subtitle: str=None, title: str=None):
        """CardHeader - a model defined in OpenAPI

        :param image_style: The image_style of this CardHeader.
        :param image_url: The image_url of this CardHeader.
        :param subtitle: The subtitle of this CardHeader.
        :param title: The title of this CardHeader.
        """
        self.openapi_types = {
            'image_style': str,
            'image_url': str,
            'subtitle': str,
            'title': str
        }

        self.attribute_map = {
            'image_style': 'imageStyle',
            'image_url': 'imageUrl',
            'subtitle': 'subtitle',
            'title': 'title'
        }

        self._image_style = image_style
        self._image_url = image_url
        self._subtitle = subtitle
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardHeader of this CardHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_style(self):
        """Gets the image_style of this CardHeader.

        The image's type (for example, square border or circular border).

        :return: The image_style of this CardHeader.
        :rtype: str
        """
        return self._image_style

    @image_style.setter
    def image_style(self, image_style):
        """Sets the image_style of this CardHeader.

        The image's type (for example, square border or circular border).

        :param image_style: The image_style of this CardHeader.
        :type image_style: str
        """
        allowed_values = ["IMAGE_STYLE_UNSPECIFIED", "IMAGE", "AVATAR"]  # noqa: E501
        if image_style not in allowed_values:
            raise ValueError(
                "Invalid value for `image_style` ({0}), must be one of {1}"
                .format(image_style, allowed_values)
            )

        self._image_style = image_style

    @property
    def image_url(self):
        """Gets the image_url of this CardHeader.

        The URL of the image in the card header.

        :return: The image_url of this CardHeader.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this CardHeader.

        The URL of the image in the card header.

        :param image_url: The image_url of this CardHeader.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def subtitle(self):
        """Gets the subtitle of this CardHeader.

        The subtitle of the card header.

        :return: The subtitle of this CardHeader.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this CardHeader.

        The subtitle of the card header.

        :param subtitle: The subtitle of this CardHeader.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def title(self):
        """Gets the title of this CardHeader.

        The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each takes up one line. If only the title is specified, it takes up both lines.

        :return: The title of this CardHeader.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CardHeader.

        The title must be specified. The header has a fixed height: if both a title and subtitle is specified, each takes up one line. If only the title is specified, it takes up both lines.

        :param title: The title of this CardHeader.
        :type title: str
        """

        self._title = title
