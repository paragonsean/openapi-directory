# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_card_v1_action import GoogleAppsCardV1Action
from openapi_server import util


class GoogleAppsCardV1DateTimePicker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, name: str=None, on_change_action: GoogleAppsCardV1Action=None, timezone_offset_date: int=None, type: str=None, value_ms_epoch: str=None):
        """GoogleAppsCardV1DateTimePicker - a model defined in OpenAPI

        :param label: The label of this GoogleAppsCardV1DateTimePicker.
        :param name: The name of this GoogleAppsCardV1DateTimePicker.
        :param on_change_action: The on_change_action of this GoogleAppsCardV1DateTimePicker.
        :param timezone_offset_date: The timezone_offset_date of this GoogleAppsCardV1DateTimePicker.
        :param type: The type of this GoogleAppsCardV1DateTimePicker.
        :param value_ms_epoch: The value_ms_epoch of this GoogleAppsCardV1DateTimePicker.
        """
        self.openapi_types = {
            'label': str,
            'name': str,
            'on_change_action': GoogleAppsCardV1Action,
            'timezone_offset_date': int,
            'type': str,
            'value_ms_epoch': str
        }

        self.attribute_map = {
            'label': 'label',
            'name': 'name',
            'on_change_action': 'onChangeAction',
            'timezone_offset_date': 'timezoneOffsetDate',
            'type': 'type',
            'value_ms_epoch': 'valueMsEpoch'
        }

        self._label = label
        self._name = name
        self._on_change_action = on_change_action
        self._timezone_offset_date = timezone_offset_date
        self._type = type
        self._value_ms_epoch = value_ms_epoch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsCardV1DateTimePicker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsCardV1DateTimePicker of this GoogleAppsCardV1DateTimePicker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this GoogleAppsCardV1DateTimePicker.

        The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as `Appointment date` or `Appointment date and time`.

        :return: The label of this GoogleAppsCardV1DateTimePicker.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GoogleAppsCardV1DateTimePicker.

        The text that prompts users to input a date, a time, or a date and time. For example, if users are scheduling an appointment, use a label such as `Appointment date` or `Appointment date and time`.

        :param label: The label of this GoogleAppsCardV1DateTimePicker.
        :type label: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this GoogleAppsCardV1DateTimePicker.

        The name by which the `DateTimePicker` is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).

        :return: The name of this GoogleAppsCardV1DateTimePicker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAppsCardV1DateTimePicker.

        The name by which the `DateTimePicker` is identified in a form input event. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/ui/read-form-data).

        :param name: The name of this GoogleAppsCardV1DateTimePicker.
        :type name: str
        """

        self._name = name

    @property
    def on_change_action(self):
        """Gets the on_change_action of this GoogleAppsCardV1DateTimePicker.


        :return: The on_change_action of this GoogleAppsCardV1DateTimePicker.
        :rtype: GoogleAppsCardV1Action
        """
        return self._on_change_action

    @on_change_action.setter
    def on_change_action(self, on_change_action):
        """Sets the on_change_action of this GoogleAppsCardV1DateTimePicker.


        :param on_change_action: The on_change_action of this GoogleAppsCardV1DateTimePicker.
        :type on_change_action: GoogleAppsCardV1Action
        """

        self._on_change_action = on_change_action

    @property
    def timezone_offset_date(self):
        """Gets the timezone_offset_date of this GoogleAppsCardV1DateTimePicker.

        The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.

        :return: The timezone_offset_date of this GoogleAppsCardV1DateTimePicker.
        :rtype: int
        """
        return self._timezone_offset_date

    @timezone_offset_date.setter
    def timezone_offset_date(self, timezone_offset_date):
        """Sets the timezone_offset_date of this GoogleAppsCardV1DateTimePicker.

        The number representing the time zone offset from UTC, in minutes. If set, the `value_ms_epoch` is displayed in the specified time zone. If unset, the value defaults to the user's time zone setting.

        :param timezone_offset_date: The timezone_offset_date of this GoogleAppsCardV1DateTimePicker.
        :type timezone_offset_date: int
        """

        self._timezone_offset_date = timezone_offset_date

    @property
    def type(self):
        """Gets the type of this GoogleAppsCardV1DateTimePicker.

        Whether the widget supports inputting a date, a time, or the date and time.

        :return: The type of this GoogleAppsCardV1DateTimePicker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleAppsCardV1DateTimePicker.

        Whether the widget supports inputting a date, a time, or the date and time.

        :param type: The type of this GoogleAppsCardV1DateTimePicker.
        :type type: str
        """
        allowed_values = ["DATE_AND_TIME", "DATE_ONLY", "TIME_ONLY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value_ms_epoch(self):
        """Gets the value_ms_epoch of this GoogleAppsCardV1DateTimePicker.

        The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use `43200000` (or `12 * 60 * 60 * 1000`).

        :return: The value_ms_epoch of this GoogleAppsCardV1DateTimePicker.
        :rtype: str
        """
        return self._value_ms_epoch

    @value_ms_epoch.setter
    def value_ms_epoch(self, value_ms_epoch):
        """Sets the value_ms_epoch of this GoogleAppsCardV1DateTimePicker.

        The default value displayed in the widget, in milliseconds since [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent January 1, 2023, use `1672531200000`. * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use `43200000` (or `12 * 60 * 60 * 1000`).

        :param value_ms_epoch: The value_ms_epoch of this GoogleAppsCardV1DateTimePicker.
        :type value_ms_epoch: str
        """

        self._value_ms_epoch = value_ms_epoch
