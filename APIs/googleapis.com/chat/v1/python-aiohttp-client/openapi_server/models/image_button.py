# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_click import OnClick
from openapi_server import util


class ImageButton(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon: str=None, icon_url: str=None, name: str=None, on_click: OnClick=None):
        """ImageButton - a model defined in OpenAPI

        :param icon: The icon of this ImageButton.
        :param icon_url: The icon_url of this ImageButton.
        :param name: The name of this ImageButton.
        :param on_click: The on_click of this ImageButton.
        """
        self.openapi_types = {
            'icon': str,
            'icon_url': str,
            'name': str,
            'on_click': OnClick
        }

        self.attribute_map = {
            'icon': 'icon',
            'icon_url': 'iconUrl',
            'name': 'name',
            'on_click': 'onClick'
        }

        self._icon = icon
        self._icon_url = icon_url
        self._name = name
        self._on_click = on_click

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageButton':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageButton of this ImageButton.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon(self):
        """Gets the icon of this ImageButton.

        The icon specified by an `enum` that indices to an icon provided by Chat API.

        :return: The icon of this ImageButton.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ImageButton.

        The icon specified by an `enum` that indices to an icon provided by Chat API.

        :param icon: The icon of this ImageButton.
        :type icon: str
        """
        allowed_values = ["ICON_UNSPECIFIED", "AIRPLANE", "BOOKMARK", "BUS", "CAR", "CLOCK", "CONFIRMATION_NUMBER_ICON", "DOLLAR", "DESCRIPTION", "EMAIL", "EVENT_PERFORMER", "EVENT_SEAT", "FLIGHT_ARRIVAL", "FLIGHT_DEPARTURE", "HOTEL", "HOTEL_ROOM_TYPE", "INVITE", "MAP_PIN", "MEMBERSHIP", "MULTIPLE_PEOPLE", "OFFER", "PERSON", "PHONE", "RESTAURANT_ICON", "SHOPPING_CART", "STAR", "STORE", "TICKET", "TRAIN", "VIDEO_CAMERA", "VIDEO_PLAY"]  # noqa: E501
        if icon not in allowed_values:
            raise ValueError(
                "Invalid value for `icon` ({0}), must be one of {1}"
                .format(icon, allowed_values)
            )

        self._icon = icon

    @property
    def icon_url(self):
        """Gets the icon_url of this ImageButton.

        The icon specified by a URL.

        :return: The icon_url of this ImageButton.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this ImageButton.

        The icon specified by a URL.

        :param icon_url: The icon_url of this ImageButton.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def name(self):
        """Gets the name of this ImageButton.

        The name of this `image_button` that's used for accessibility. Default value is provided if this name isn't specified.

        :return: The name of this ImageButton.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageButton.

        The name of this `image_button` that's used for accessibility. Default value is provided if this name isn't specified.

        :param name: The name of this ImageButton.
        :type name: str
        """

        self._name = name

    @property
    def on_click(self):
        """Gets the on_click of this ImageButton.


        :return: The on_click of this ImageButton.
        :rtype: OnClick
        """
        return self._on_click

    @on_click.setter
    def on_click(self, on_click):
        """Sets the on_click of this ImageButton.


        :param on_click: The on_click of this ImageButton.
        :type on_click: OnClick
        """

        self._on_click = on_click
