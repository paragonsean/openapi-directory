# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.space_details import SpaceDetails
from openapi_server import util


class Space(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_installed: bool=None, create_time: str=None, display_name: str=None, external_user_allowed: bool=None, import_mode: bool=None, name: str=None, single_user_bot_dm: bool=None, space_details: SpaceDetails=None, space_history_state: str=None, space_threading_state: str=None, space_type: str=None, threaded: bool=None, type: str=None):
        """Space - a model defined in OpenAPI

        :param admin_installed: The admin_installed of this Space.
        :param create_time: The create_time of this Space.
        :param display_name: The display_name of this Space.
        :param external_user_allowed: The external_user_allowed of this Space.
        :param import_mode: The import_mode of this Space.
        :param name: The name of this Space.
        :param single_user_bot_dm: The single_user_bot_dm of this Space.
        :param space_details: The space_details of this Space.
        :param space_history_state: The space_history_state of this Space.
        :param space_threading_state: The space_threading_state of this Space.
        :param space_type: The space_type of this Space.
        :param threaded: The threaded of this Space.
        :param type: The type of this Space.
        """
        self.openapi_types = {
            'admin_installed': bool,
            'create_time': str,
            'display_name': str,
            'external_user_allowed': bool,
            'import_mode': bool,
            'name': str,
            'single_user_bot_dm': bool,
            'space_details': SpaceDetails,
            'space_history_state': str,
            'space_threading_state': str,
            'space_type': str,
            'threaded': bool,
            'type': str
        }

        self.attribute_map = {
            'admin_installed': 'adminInstalled',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'external_user_allowed': 'externalUserAllowed',
            'import_mode': 'importMode',
            'name': 'name',
            'single_user_bot_dm': 'singleUserBotDm',
            'space_details': 'spaceDetails',
            'space_history_state': 'spaceHistoryState',
            'space_threading_state': 'spaceThreadingState',
            'space_type': 'spaceType',
            'threaded': 'threaded',
            'type': 'type'
        }

        self._admin_installed = admin_installed
        self._create_time = create_time
        self._display_name = display_name
        self._external_user_allowed = external_user_allowed
        self._import_mode = import_mode
        self._name = name
        self._single_user_bot_dm = single_user_bot_dm
        self._space_details = space_details
        self._space_history_state = space_history_state
        self._space_threading_state = space_threading_state
        self._space_type = space_type
        self._threaded = threaded
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Space':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Space of this Space.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_installed(self):
        """Gets the admin_installed of this Space.

        Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.

        :return: The admin_installed of this Space.
        :rtype: bool
        """
        return self._admin_installed

    @admin_installed.setter
    def admin_installed(self, admin_installed):
        """Sets the admin_installed of this Space.

        Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.

        :param admin_installed: The admin_installed of this Space.
        :type admin_installed: bool
        """

        self._admin_installed = admin_installed

    @property
    def create_time(self):
        """Gets the create_time of this Space.

        Optional. Immutable. For spaces created in Chat, the time the space was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the space was created in the source in order to preserve the original creation time. Only populated in the output when `spaceType` is `GROUP_CHAT` or `SPACE`.

        :return: The create_time of this Space.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Space.

        Optional. Immutable. For spaces created in Chat, the time the space was created. This field is output only, except when used in import mode spaces. For import mode spaces, set this field to the historical timestamp at which the space was created in the source in order to preserve the original creation time. Only populated in the output when `spaceType` is `GROUP_CHAT` or `SPACE`.

        :param create_time: The create_time of this Space.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this Space.

        The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space or updating the `displayName`, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. For direct messages, this field might be empty. Supports up to 128 characters.

        :return: The display_name of this Space.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Space.

        The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). If you receive the error message `ALREADY_EXISTS` when creating a space or updating the `displayName`, try a different `displayName`. An existing space within the Google Workspace organization might already use this display name. For direct messages, this field might be empty. Supports up to 128 characters.

        :param display_name: The display_name of this Space.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def external_user_allowed(self):
        """Gets the external_user_allowed of this Space.

        Immutable. Whether this space permits any Google Chat user as a member. Input when creating a space in a Google Workspace organization. Omit this field when creating spaces in the following conditions: * The authenticated user uses a Google Account. By default, the space permits any Google Chat user. * The space is used to [import data to Google Chat] (https://developers.google.com/chat/api/guides/import-data-overview). Import mode spaces must only permit members from the same Google Workspace organization. For existing spaces, this field is output only.

        :return: The external_user_allowed of this Space.
        :rtype: bool
        """
        return self._external_user_allowed

    @external_user_allowed.setter
    def external_user_allowed(self, external_user_allowed):
        """Sets the external_user_allowed of this Space.

        Immutable. Whether this space permits any Google Chat user as a member. Input when creating a space in a Google Workspace organization. Omit this field when creating spaces in the following conditions: * The authenticated user uses a Google Account. By default, the space permits any Google Chat user. * The space is used to [import data to Google Chat] (https://developers.google.com/chat/api/guides/import-data-overview). Import mode spaces must only permit members from the same Google Workspace organization. For existing spaces, this field is output only.

        :param external_user_allowed: The external_user_allowed of this Space.
        :type external_user_allowed: bool
        """

        self._external_user_allowed = external_user_allowed

    @property
    def import_mode(self):
        """Gets the import_mode of this Space.

        Optional. Whether this space is created in `Import Mode` as part of a data migration into Google Workspace. While spaces are being imported, they aren't visible to users until the import is complete.

        :return: The import_mode of this Space.
        :rtype: bool
        """
        return self._import_mode

    @import_mode.setter
    def import_mode(self, import_mode):
        """Sets the import_mode of this Space.

        Optional. Whether this space is created in `Import Mode` as part of a data migration into Google Workspace. While spaces are being imported, they aren't visible to users until the import is complete.

        :param import_mode: The import_mode of this Space.
        :type import_mode: bool
        """

        self._import_mode = import_mode

    @property
    def name(self):
        """Gets the name of this Space.

        Resource name of the space. Format: `spaces/{space}`

        :return: The name of this Space.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Space.

        Resource name of the space. Format: `spaces/{space}`

        :param name: The name of this Space.
        :type name: str
        """

        self._name = name

    @property
    def single_user_bot_dm(self):
        """Gets the single_user_bot_dm of this Space.

        Optional. Whether the space is a DM between a Chat app and a single human.

        :return: The single_user_bot_dm of this Space.
        :rtype: bool
        """
        return self._single_user_bot_dm

    @single_user_bot_dm.setter
    def single_user_bot_dm(self, single_user_bot_dm):
        """Sets the single_user_bot_dm of this Space.

        Optional. Whether the space is a DM between a Chat app and a single human.

        :param single_user_bot_dm: The single_user_bot_dm of this Space.
        :type single_user_bot_dm: bool
        """

        self._single_user_bot_dm = single_user_bot_dm

    @property
    def space_details(self):
        """Gets the space_details of this Space.


        :return: The space_details of this Space.
        :rtype: SpaceDetails
        """
        return self._space_details

    @space_details.setter
    def space_details(self, space_details):
        """Sets the space_details of this Space.


        :param space_details: The space_details of this Space.
        :type space_details: SpaceDetails
        """

        self._space_details = space_details

    @property
    def space_history_state(self):
        """Gets the space_history_state of this Space.

        The message history state for messages and threads in this space.

        :return: The space_history_state of this Space.
        :rtype: str
        """
        return self._space_history_state

    @space_history_state.setter
    def space_history_state(self, space_history_state):
        """Sets the space_history_state of this Space.

        The message history state for messages and threads in this space.

        :param space_history_state: The space_history_state of this Space.
        :type space_history_state: str
        """
        allowed_values = ["HISTORY_STATE_UNSPECIFIED", "HISTORY_OFF", "HISTORY_ON"]  # noqa: E501
        if space_history_state not in allowed_values:
            raise ValueError(
                "Invalid value for `space_history_state` ({0}), must be one of {1}"
                .format(space_history_state, allowed_values)
            )

        self._space_history_state = space_history_state

    @property
    def space_threading_state(self):
        """Gets the space_threading_state of this Space.

        Output only. The threading state in the Chat space.

        :return: The space_threading_state of this Space.
        :rtype: str
        """
        return self._space_threading_state

    @space_threading_state.setter
    def space_threading_state(self, space_threading_state):
        """Sets the space_threading_state of this Space.

        Output only. The threading state in the Chat space.

        :param space_threading_state: The space_threading_state of this Space.
        :type space_threading_state: str
        """
        allowed_values = ["SPACE_THREADING_STATE_UNSPECIFIED", "THREADED_MESSAGES", "GROUPED_MESSAGES", "UNTHREADED_MESSAGES"]  # noqa: E501
        if space_threading_state not in allowed_values:
            raise ValueError(
                "Invalid value for `space_threading_state` ({0}), must be one of {1}"
                .format(space_threading_state, allowed_values)
            )

        self._space_threading_state = space_threading_state

    @property
    def space_type(self):
        """Gets the space_type of this Space.

        The type of space. Required when creating a space or updating the space type of a space. Output only for other usage.

        :return: The space_type of this Space.
        :rtype: str
        """
        return self._space_type

    @space_type.setter
    def space_type(self, space_type):
        """Sets the space_type of this Space.

        The type of space. Required when creating a space or updating the space type of a space. Output only for other usage.

        :param space_type: The space_type of this Space.
        :type space_type: str
        """
        allowed_values = ["SPACE_TYPE_UNSPECIFIED", "SPACE", "GROUP_CHAT", "DIRECT_MESSAGE"]  # noqa: E501
        if space_type not in allowed_values:
            raise ValueError(
                "Invalid value for `space_type` ({0}), must be one of {1}"
                .format(space_type, allowed_values)
            )

        self._space_type = space_type

    @property
    def threaded(self):
        """Gets the threaded of this Space.

        Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.

        :return: The threaded of this Space.
        :rtype: bool
        """
        return self._threaded

    @threaded.setter
    def threaded(self, threaded):
        """Sets the threaded of this Space.

        Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.

        :param threaded: The threaded of this Space.
        :type threaded: bool
        """

        self._threaded = threaded

    @property
    def type(self):
        """Gets the type of this Space.

        Output only. Deprecated: Use `space_type` instead. The type of a space.

        :return: The type of this Space.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Space.

        Output only. Deprecated: Use `space_type` instead. The type of a space.

        :param type: The type of this Space.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "ROOM", "DM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
