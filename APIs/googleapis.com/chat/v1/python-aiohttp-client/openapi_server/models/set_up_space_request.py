# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership import Membership
from openapi_server.models.space import Space
from openapi_server import util


class SetUpSpaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, memberships: List[Membership]=None, request_id: str=None, space: Space=None):
        """SetUpSpaceRequest - a model defined in OpenAPI

        :param memberships: The memberships of this SetUpSpaceRequest.
        :param request_id: The request_id of this SetUpSpaceRequest.
        :param space: The space of this SetUpSpaceRequest.
        """
        self.openapi_types = {
            'memberships': List[Membership],
            'request_id': str,
            'space': Space
        }

        self.attribute_map = {
            'memberships': 'memberships',
            'request_id': 'requestId',
            'space': 'space'
        }

        self._memberships = memberships
        self._request_id = request_id
        self._space = space

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetUpSpaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetUpSpaceRequest of this SetUpSpaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def memberships(self):
        """Gets the memberships of this SetUpSpaceRequest.

        Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The `Membership.member` field must contain a `user` with `name` populated (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the `user.name` can be `users/example@gmail.com`.\" To invite Gmail users or users from external Google Workspace domains, user's email must be used for `{user}`. Optional when setting `Space.spaceType` to `SPACE`. Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships. Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).

        :return: The memberships of this SetUpSpaceRequest.
        :rtype: List[Membership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this SetUpSpaceRequest.

        Optional. The Google Chat users to invite to join the space. Omit the calling user, as they are added automatically. The set currently allows up to 20 memberships (in addition to the caller). The `Membership.member` field must contain a `user` with `name` populated (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only add human users when setting up a space (adding Chat apps is only supported for direct message setup with the calling app). You can also add members using the user's email as an alias for {user}. For example, the `user.name` can be `users/example@gmail.com`.\" To invite Gmail users or users from external Google Workspace domains, user's email must be used for `{user}`. Optional when setting `Space.spaceType` to `SPACE`. Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships. Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human user, along with exactly one membership. Must be empty when creating a 1:1 conversation between a human and the calling Chat app (when setting `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).

        :param memberships: The memberships of this SetUpSpaceRequest.
        :type memberships: List[Membership]
        """

        self._memberships = memberships

    @property
    def request_id(self):
        """Gets the request_id of this SetUpSpaceRequest.

        Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.

        :return: The request_id of this SetUpSpaceRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SetUpSpaceRequest.

        Optional. A unique identifier for this request. A random UUID is recommended. Specifying an existing request ID returns the space created with that ID instead of creating a new space. Specifying an existing request ID from the same Chat app with a different authenticated user returns an error.

        :param request_id: The request_id of this SetUpSpaceRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def space(self):
        """Gets the space of this SetUpSpaceRequest.


        :return: The space of this SetUpSpaceRequest.
        :rtype: Space
        """
        return self._space

    @space.setter
    def space(self, space):
        """Sets the space of this SetUpSpaceRequest.


        :param space: The space of this SetUpSpaceRequest.
        :type space: Space
        """

        self._space = space
