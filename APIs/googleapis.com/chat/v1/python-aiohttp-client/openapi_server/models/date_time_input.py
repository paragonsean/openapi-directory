# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateTimeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_date: bool=None, has_time: bool=None, ms_since_epoch: str=None):
        """DateTimeInput - a model defined in OpenAPI

        :param has_date: The has_date of this DateTimeInput.
        :param has_time: The has_time of this DateTimeInput.
        :param ms_since_epoch: The ms_since_epoch of this DateTimeInput.
        """
        self.openapi_types = {
            'has_date': bool,
            'has_time': bool,
            'ms_since_epoch': str
        }

        self.attribute_map = {
            'has_date': 'hasDate',
            'has_time': 'hasTime',
            'ms_since_epoch': 'msSinceEpoch'
        }

        self._has_date = has_date
        self._has_time = has_time
        self._ms_since_epoch = ms_since_epoch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateTimeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateTimeInput of this DateTimeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_date(self):
        """Gets the has_date of this DateTimeInput.

        Whether the `datetime` input includes a calendar date.

        :return: The has_date of this DateTimeInput.
        :rtype: bool
        """
        return self._has_date

    @has_date.setter
    def has_date(self, has_date):
        """Sets the has_date of this DateTimeInput.

        Whether the `datetime` input includes a calendar date.

        :param has_date: The has_date of this DateTimeInput.
        :type has_date: bool
        """

        self._has_date = has_date

    @property
    def has_time(self):
        """Gets the has_time of this DateTimeInput.

        Whether the `datetime` input includes a timestamp.

        :return: The has_time of this DateTimeInput.
        :rtype: bool
        """
        return self._has_time

    @has_time.setter
    def has_time(self, has_time):
        """Sets the has_time of this DateTimeInput.

        Whether the `datetime` input includes a timestamp.

        :param has_time: The has_time of this DateTimeInput.
        :type has_time: bool
        """

        self._has_time = has_time

    @property
    def ms_since_epoch(self):
        """Gets the ms_since_epoch of this DateTimeInput.

        Time since epoch time, in milliseconds.

        :return: The ms_since_epoch of this DateTimeInput.
        :rtype: str
        """
        return self._ms_since_epoch

    @ms_since_epoch.setter
    def ms_since_epoch(self, ms_since_epoch):
        """Sets the ms_since_epoch of this DateTimeInput.

        Time since epoch time, in milliseconds.

        :param ms_since_epoch: The ms_since_epoch of this DateTimeInput.
        :type ms_since_epoch: str
        """

        self._ms_since_epoch = ms_since_epoch
