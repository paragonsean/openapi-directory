# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, domain_id: str=None, is_anonymous: bool=None, name: str=None, type: str=None):
        """User - a model defined in OpenAPI

        :param display_name: The display_name of this User.
        :param domain_id: The domain_id of this User.
        :param is_anonymous: The is_anonymous of this User.
        :param name: The name of this User.
        :param type: The type of this User.
        """
        self.openapi_types = {
            'display_name': str,
            'domain_id': str,
            'is_anonymous': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'domain_id': 'domainId',
            'is_anonymous': 'isAnonymous',
            'name': 'name',
            'type': 'type'
        }

        self._display_name = display_name
        self._domain_id = domain_id
        self._is_anonymous = is_anonymous
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this User.

        Output only. The user's display name.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Output only. The user's display name.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def domain_id(self):
        """Gets the domain_id of this User.

        Unique identifier of the user's Google Workspace domain.

        :return: The domain_id of this User.
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this User.

        Unique identifier of the user's Google Workspace domain.

        :param domain_id: The domain_id of this User.
        :type domain_id: str
        """

        self._domain_id = domain_id

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this User.

        Output only. When `true`, the user is deleted or their profile is not visible.

        :return: The is_anonymous of this User.
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this User.

        Output only. When `true`, the user is deleted or their profile is not visible.

        :param is_anonymous: The is_anonymous of this User.
        :type is_anonymous: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def name(self):
        """Gets the name of this User.

        Resource name for a Google Chat user. Format: `users/{user}`. `users/app` can be used as an alias for the calling app bot user. For human users, `{user}` is the same user identifier as: - the `id` for the [Person](https://developers.google.com/people/api/rest/v1/people) in the People API. For example, `users/123456789` in Chat API represents the same person as the `123456789` Person profile ID in People API. - the `id` for a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. - the user's email address can be used as an alias for `{user}` in API requests. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can use `users/user@example.com` as an alias to reference `users/123456789`. Only the canonical resource name (for example `users/123456789`) will be returned from the API.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Resource name for a Google Chat user. Format: `users/{user}`. `users/app` can be used as an alias for the calling app bot user. For human users, `{user}` is the same user identifier as: - the `id` for the [Person](https://developers.google.com/people/api/rest/v1/people) in the People API. For example, `users/123456789` in Chat API represents the same person as the `123456789` Person profile ID in People API. - the `id` for a [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users) in the Admin SDK Directory API. - the user's email address can be used as an alias for `{user}` in API requests. For example, if the People API Person profile ID for `user@example.com` is `123456789`, you can use `users/user@example.com` as an alias to reference `users/123456789`. Only the canonical resource name (for example `users/123456789`) will be returned from the API.

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this User.

        User type.

        :return: The type of this User.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this User.

        User type.

        :param type: The type of this User.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "HUMAN", "BOT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
