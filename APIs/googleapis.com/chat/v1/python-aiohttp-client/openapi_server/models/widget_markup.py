# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.button import Button
from openapi_server.models.image import Image
from openapi_server.models.key_value import KeyValue
from openapi_server.models.text_paragraph import TextParagraph
from openapi_server import util


class WidgetMarkup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buttons: List[Button]=None, image: Image=None, key_value: KeyValue=None, text_paragraph: TextParagraph=None):
        """WidgetMarkup - a model defined in OpenAPI

        :param buttons: The buttons of this WidgetMarkup.
        :param image: The image of this WidgetMarkup.
        :param key_value: The key_value of this WidgetMarkup.
        :param text_paragraph: The text_paragraph of this WidgetMarkup.
        """
        self.openapi_types = {
            'buttons': List[Button],
            'image': Image,
            'key_value': KeyValue,
            'text_paragraph': TextParagraph
        }

        self.attribute_map = {
            'buttons': 'buttons',
            'image': 'image',
            'key_value': 'keyValue',
            'text_paragraph': 'textParagraph'
        }

        self._buttons = buttons
        self._image = image
        self._key_value = key_value
        self._text_paragraph = text_paragraph

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WidgetMarkup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WidgetMarkup of this WidgetMarkup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buttons(self):
        """Gets the buttons of this WidgetMarkup.

        A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.

        :return: The buttons of this WidgetMarkup.
        :rtype: List[Button]
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this WidgetMarkup.

        A list of buttons. Buttons is also `oneof data` and only one of these fields should be set.

        :param buttons: The buttons of this WidgetMarkup.
        :type buttons: List[Button]
        """

        self._buttons = buttons

    @property
    def image(self):
        """Gets the image of this WidgetMarkup.


        :return: The image of this WidgetMarkup.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this WidgetMarkup.


        :param image: The image of this WidgetMarkup.
        :type image: Image
        """

        self._image = image

    @property
    def key_value(self):
        """Gets the key_value of this WidgetMarkup.


        :return: The key_value of this WidgetMarkup.
        :rtype: KeyValue
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this WidgetMarkup.


        :param key_value: The key_value of this WidgetMarkup.
        :type key_value: KeyValue
        """

        self._key_value = key_value

    @property
    def text_paragraph(self):
        """Gets the text_paragraph of this WidgetMarkup.


        :return: The text_paragraph of this WidgetMarkup.
        :rtype: TextParagraph
        """
        return self._text_paragraph

    @text_paragraph.setter
    def text_paragraph(self, text_paragraph):
        """Sets the text_paragraph of this WidgetMarkup.


        :param text_paragraph: The text_paragraph of this WidgetMarkup.
        :type text_paragraph: TextParagraph
        """

        self._text_paragraph = text_paragraph
