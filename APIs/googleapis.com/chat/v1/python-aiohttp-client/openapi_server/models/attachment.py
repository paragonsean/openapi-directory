# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_data_ref import AttachmentDataRef
from openapi_server.models.drive_data_ref import DriveDataRef
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_data_ref: AttachmentDataRef=None, content_name: str=None, content_type: str=None, download_uri: str=None, drive_data_ref: DriveDataRef=None, name: str=None, source: str=None, thumbnail_uri: str=None):
        """Attachment - a model defined in OpenAPI

        :param attachment_data_ref: The attachment_data_ref of this Attachment.
        :param content_name: The content_name of this Attachment.
        :param content_type: The content_type of this Attachment.
        :param download_uri: The download_uri of this Attachment.
        :param drive_data_ref: The drive_data_ref of this Attachment.
        :param name: The name of this Attachment.
        :param source: The source of this Attachment.
        :param thumbnail_uri: The thumbnail_uri of this Attachment.
        """
        self.openapi_types = {
            'attachment_data_ref': AttachmentDataRef,
            'content_name': str,
            'content_type': str,
            'download_uri': str,
            'drive_data_ref': DriveDataRef,
            'name': str,
            'source': str,
            'thumbnail_uri': str
        }

        self.attribute_map = {
            'attachment_data_ref': 'attachmentDataRef',
            'content_name': 'contentName',
            'content_type': 'contentType',
            'download_uri': 'downloadUri',
            'drive_data_ref': 'driveDataRef',
            'name': 'name',
            'source': 'source',
            'thumbnail_uri': 'thumbnailUri'
        }

        self._attachment_data_ref = attachment_data_ref
        self._content_name = content_name
        self._content_type = content_type
        self._download_uri = download_uri
        self._drive_data_ref = drive_data_ref
        self._name = name
        self._source = source
        self._thumbnail_uri = thumbnail_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_data_ref(self):
        """Gets the attachment_data_ref of this Attachment.


        :return: The attachment_data_ref of this Attachment.
        :rtype: AttachmentDataRef
        """
        return self._attachment_data_ref

    @attachment_data_ref.setter
    def attachment_data_ref(self, attachment_data_ref):
        """Sets the attachment_data_ref of this Attachment.


        :param attachment_data_ref: The attachment_data_ref of this Attachment.
        :type attachment_data_ref: AttachmentDataRef
        """

        self._attachment_data_ref = attachment_data_ref

    @property
    def content_name(self):
        """Gets the content_name of this Attachment.

        Output only. The original file name for the content, not the full path.

        :return: The content_name of this Attachment.
        :rtype: str
        """
        return self._content_name

    @content_name.setter
    def content_name(self, content_name):
        """Sets the content_name of this Attachment.

        Output only. The original file name for the content, not the full path.

        :param content_name: The content_name of this Attachment.
        :type content_name: str
        """

        self._content_name = content_name

    @property
    def content_type(self):
        """Gets the content_type of this Attachment.

        Output only. The content type (MIME type) of the file.

        :return: The content_type of this Attachment.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Attachment.

        Output only. The content type (MIME type) of the file.

        :param content_type: The content_type of this Attachment.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def download_uri(self):
        """Gets the download_uri of this Attachment.

        Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.

        :return: The download_uri of this Attachment.
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this Attachment.

        Output only. The download URL which should be used to allow a human user to download the attachment. Chat apps shouldn't use this URL to download attachment content.

        :param download_uri: The download_uri of this Attachment.
        :type download_uri: str
        """

        self._download_uri = download_uri

    @property
    def drive_data_ref(self):
        """Gets the drive_data_ref of this Attachment.


        :return: The drive_data_ref of this Attachment.
        :rtype: DriveDataRef
        """
        return self._drive_data_ref

    @drive_data_ref.setter
    def drive_data_ref(self, drive_data_ref):
        """Sets the drive_data_ref of this Attachment.


        :param drive_data_ref: The drive_data_ref of this Attachment.
        :type drive_data_ref: DriveDataRef
        """

        self._drive_data_ref = drive_data_ref

    @property
    def name(self):
        """Gets the name of this Attachment.

        Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.

        :return: The name of this Attachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachment.

        Resource name of the attachment, in the form `spaces/*/messages/*/attachments/*`.

        :param name: The name of this Attachment.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Attachment.

        Output only. The source of the attachment.

        :return: The source of this Attachment.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Attachment.

        Output only. The source of the attachment.

        :param source: The source of this Attachment.
        :type source: str
        """
        allowed_values = ["SOURCE_UNSPECIFIED", "DRIVE_FILE", "UPLOADED_CONTENT"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def thumbnail_uri(self):
        """Gets the thumbnail_uri of this Attachment.

        Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.

        :return: The thumbnail_uri of this Attachment.
        :rtype: str
        """
        return self._thumbnail_uri

    @thumbnail_uri.setter
    def thumbnail_uri(self, thumbnail_uri):
        """Sets the thumbnail_uri of this Attachment.

        Output only. The thumbnail URL which should be used to preview the attachment to a human user. Chat apps shouldn't use this URL to download attachment content.

        :param thumbnail_uri: The thumbnail_uri of this Attachment.
        :type thumbnail_uri: str
        """

        self._thumbnail_uri = thumbnail_uri
