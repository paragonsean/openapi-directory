# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.user import User
from openapi_server import util


class Membership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, group_member: Group=None, member: User=None, name: str=None, role: str=None, state: str=None):
        """Membership - a model defined in OpenAPI

        :param create_time: The create_time of this Membership.
        :param delete_time: The delete_time of this Membership.
        :param group_member: The group_member of this Membership.
        :param member: The member of this Membership.
        :param name: The name of this Membership.
        :param role: The role of this Membership.
        :param state: The state of this Membership.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'group_member': Group,
            'member': User,
            'name': str,
            'role': str,
            'state': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'group_member': 'groupMember',
            'member': 'member',
            'name': 'name',
            'role': 'role',
            'state': 'state'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._group_member = group_member
        self._member = member
        self._name = name
        self._role = role
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Membership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Membership of this Membership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Membership.

        Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.

        :return: The create_time of this Membership.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Membership.

        Optional. Immutable. The creation time of the membership, such as when a member joined or was invited to join a space. This field is output only, except when used to import historical memberships in import mode spaces.

        :param create_time: The create_time of this Membership.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Membership.

        Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.

        :return: The delete_time of this Membership.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Membership.

        Optional. Immutable. The deletion time of the membership, such as when a member left or was removed from a space. This field is output only, except when used to import historical memberships in import mode spaces.

        :param delete_time: The delete_time of this Membership.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def group_member(self):
        """Gets the group_member of this Membership.


        :return: The group_member of this Membership.
        :rtype: Group
        """
        return self._group_member

    @group_member.setter
    def group_member(self, group_member):
        """Sets the group_member of this Membership.


        :param group_member: The group_member of this Membership.
        :type group_member: Group
        """

        self._group_member = group_member

    @property
    def member(self):
        """Gets the member of this Membership.


        :return: The member of this Membership.
        :rtype: User
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Membership.


        :param member: The member of this Membership.
        :type member: User
        """

        self._member = member

    @property
    def name(self):
        """Gets the name of this Membership.

        Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`

        :return: The name of this Membership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Membership.

        Resource name of the membership, assigned by the server. Format: `spaces/{space}/members/{member}`

        :param name: The name of this Membership.
        :type name: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this Membership.

        Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`.

        :return: The role of this Membership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Membership.

        Optional. User's role within a Chat space, which determines their permitted actions in the space. [Developer Preview](https://developers.google.com/workspace/preview): This field can only be used as input in `UpdateMembership`.

        :param role: The role of this Membership.
        :type role: str
        """
        allowed_values = ["MEMBERSHIP_ROLE_UNSPECIFIED", "ROLE_MEMBER", "ROLE_MANAGER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def state(self):
        """Gets the state of this Membership.

        Output only. State of the membership.

        :return: The state of this Membership.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Membership.

        Output only. State of the membership.

        :param state: The state of this Membership.
        :type state: str
        """
        allowed_values = ["MEMBERSHIP_STATE_UNSPECIFIED", "JOINED", "INVITED", "NOT_A_MEMBER"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
