# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_parameter import ActionParameter
from openapi_server import util


class FormAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_method_name: str=None, parameters: List[ActionParameter]=None):
        """FormAction - a model defined in OpenAPI

        :param action_method_name: The action_method_name of this FormAction.
        :param parameters: The parameters of this FormAction.
        """
        self.openapi_types = {
            'action_method_name': str,
            'parameters': List[ActionParameter]
        }

        self.attribute_map = {
            'action_method_name': 'actionMethodName',
            'parameters': 'parameters'
        }

        self._action_method_name = action_method_name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormAction of this FormAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_method_name(self):
        """Gets the action_method_name of this FormAction.

        The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. You can use the same method name for several elements that trigger a common behavior.

        :return: The action_method_name of this FormAction.
        :rtype: str
        """
        return self._action_method_name

    @action_method_name.setter
    def action_method_name(self, action_method_name):
        """Sets the action_method_name of this FormAction.

        The method name is used to identify which part of the form triggered the form submission. This information is echoed back to the Chat app as part of the card click event. You can use the same method name for several elements that trigger a common behavior.

        :param action_method_name: The action_method_name of this FormAction.
        :type action_method_name: str
        """

        self._action_method_name = action_method_name

    @property
    def parameters(self):
        """Gets the parameters of this FormAction.

        List of action parameters.

        :return: The parameters of this FormAction.
        :rtype: List[ActionParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this FormAction.

        List of action parameters.

        :param parameters: The parameters of this FormAction.
        :type parameters: List[ActionParameter]
        """

        self._parameters = parameters
