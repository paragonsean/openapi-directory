# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAppsCardV1ImageCropStyle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: float=None, type: str=None):
        """GoogleAppsCardV1ImageCropStyle - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this GoogleAppsCardV1ImageCropStyle.
        :param type: The type of this GoogleAppsCardV1ImageCropStyle.
        """
        self.openapi_types = {
            'aspect_ratio': float,
            'type': str
        }

        self.attribute_map = {
            'aspect_ratio': 'aspectRatio',
            'type': 'type'
        }

        self._aspect_ratio = aspect_ratio
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsCardV1ImageCropStyle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsCardV1ImageCropStyle of this GoogleAppsCardV1ImageCropStyle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this GoogleAppsCardV1ImageCropStyle.

        The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { \"type\": \"RECTANGLE_CUSTOM\", \"aspectRatio\": 16/9 } ```

        :return: The aspect_ratio of this GoogleAppsCardV1ImageCropStyle.
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this GoogleAppsCardV1ImageCropStyle.

        The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For example, here's how to apply a 16:9 aspect ratio: ``` cropStyle { \"type\": \"RECTANGLE_CUSTOM\", \"aspectRatio\": 16/9 } ```

        :param aspect_ratio: The aspect_ratio of this GoogleAppsCardV1ImageCropStyle.
        :type aspect_ratio: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def type(self):
        """Gets the type of this GoogleAppsCardV1ImageCropStyle.

        The crop type.

        :return: The type of this GoogleAppsCardV1ImageCropStyle.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleAppsCardV1ImageCropStyle.

        The crop type.

        :param type: The type of this GoogleAppsCardV1ImageCropStyle.
        :type type: str
        """
        allowed_values = ["IMAGE_CROP_TYPE_UNSPECIFIED", "SQUARE", "CIRCLE", "RECTANGLE_CUSTOM", "RECTANGLE_4_3"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
