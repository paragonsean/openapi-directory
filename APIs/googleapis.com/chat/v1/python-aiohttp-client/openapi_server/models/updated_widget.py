# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.selection_items import SelectionItems
from openapi_server import util


class UpdatedWidget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, suggestions: SelectionItems=None, widget: str=None):
        """UpdatedWidget - a model defined in OpenAPI

        :param suggestions: The suggestions of this UpdatedWidget.
        :param widget: The widget of this UpdatedWidget.
        """
        self.openapi_types = {
            'suggestions': SelectionItems,
            'widget': str
        }

        self.attribute_map = {
            'suggestions': 'suggestions',
            'widget': 'widget'
        }

        self._suggestions = suggestions
        self._widget = widget

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatedWidget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatedWidget of this UpdatedWidget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def suggestions(self):
        """Gets the suggestions of this UpdatedWidget.


        :return: The suggestions of this UpdatedWidget.
        :rtype: SelectionItems
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this UpdatedWidget.


        :param suggestions: The suggestions of this UpdatedWidget.
        :type suggestions: SelectionItems
        """

        self._suggestions = suggestions

    @property
    def widget(self):
        """Gets the widget of this UpdatedWidget.

        The ID of the updated widget. The ID must match the one for the widget that triggered the update request.

        :return: The widget of this UpdatedWidget.
        :rtype: str
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this UpdatedWidget.

        The ID of the updated widget. The ID must match the one for the widget that triggered the update request.

        :param widget: The widget of this UpdatedWidget.
        :type widget: str
        """

        self._widget = widget
