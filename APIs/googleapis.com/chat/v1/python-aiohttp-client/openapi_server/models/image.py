# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.on_click import OnClick
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: float=None, image_url: str=None, on_click: OnClick=None):
        """Image - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this Image.
        :param image_url: The image_url of this Image.
        :param on_click: The on_click of this Image.
        """
        self.openapi_types = {
            'aspect_ratio': float,
            'image_url': str,
            'on_click': OnClick
        }

        self.attribute_map = {
            'aspect_ratio': 'aspectRatio',
            'image_url': 'imageUrl',
            'on_click': 'onClick'
        }

        self._aspect_ratio = aspect_ratio
        self._image_url = image_url
        self._on_click = on_click

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Image.

        The aspect ratio of this image (width and height). This field lets you reserve the right height for the image while waiting for it to load. It's not meant to override the built-in aspect ratio of the image. If unset, the server fills it by prefetching the image.

        :return: The aspect_ratio of this Image.
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Image.

        The aspect ratio of this image (width and height). This field lets you reserve the right height for the image while waiting for it to load. It's not meant to override the built-in aspect ratio of the image. If unset, the server fills it by prefetching the image.

        :param aspect_ratio: The aspect_ratio of this Image.
        :type aspect_ratio: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def image_url(self):
        """Gets the image_url of this Image.

        The URL of the image.

        :return: The image_url of this Image.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Image.

        The URL of the image.

        :param image_url: The image_url of this Image.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def on_click(self):
        """Gets the on_click of this Image.


        :return: The on_click of this Image.
        :rtype: OnClick
        """
        return self._on_click

    @on_click.setter
    def on_click(self, on_click):
        """Sets the on_click of this Image.


        :param on_click: The on_click of this Image.
        :type on_click: OnClick
        """

        self._on_click = on_click
