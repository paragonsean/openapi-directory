# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.button import Button
from openapi_server.models.on_click import OnClick
from openapi_server import util


class KeyValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom_label: str=None, button: Button=None, content: str=None, content_multiline: bool=None, icon: str=None, icon_url: str=None, on_click: OnClick=None, top_label: str=None):
        """KeyValue - a model defined in OpenAPI

        :param bottom_label: The bottom_label of this KeyValue.
        :param button: The button of this KeyValue.
        :param content: The content of this KeyValue.
        :param content_multiline: The content_multiline of this KeyValue.
        :param icon: The icon of this KeyValue.
        :param icon_url: The icon_url of this KeyValue.
        :param on_click: The on_click of this KeyValue.
        :param top_label: The top_label of this KeyValue.
        """
        self.openapi_types = {
            'bottom_label': str,
            'button': Button,
            'content': str,
            'content_multiline': bool,
            'icon': str,
            'icon_url': str,
            'on_click': OnClick,
            'top_label': str
        }

        self.attribute_map = {
            'bottom_label': 'bottomLabel',
            'button': 'button',
            'content': 'content',
            'content_multiline': 'contentMultiline',
            'icon': 'icon',
            'icon_url': 'iconUrl',
            'on_click': 'onClick',
            'top_label': 'topLabel'
        }

        self._bottom_label = bottom_label
        self._button = button
        self._content = content
        self._content_multiline = content_multiline
        self._icon = icon
        self._icon_url = icon_url
        self._on_click = on_click
        self._top_label = top_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyValue of this KeyValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom_label(self):
        """Gets the bottom_label of this KeyValue.

        The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :return: The bottom_label of this KeyValue.
        :rtype: str
        """
        return self._bottom_label

    @bottom_label.setter
    def bottom_label(self, bottom_label):
        """Sets the bottom_label of this KeyValue.

        The text of the bottom label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :param bottom_label: The bottom_label of this KeyValue.
        :type bottom_label: str
        """

        self._bottom_label = bottom_label

    @property
    def button(self):
        """Gets the button of this KeyValue.


        :return: The button of this KeyValue.
        :rtype: Button
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this KeyValue.


        :param button: The button of this KeyValue.
        :type button: Button
        """

        self._button = button

    @property
    def content(self):
        """Gets the content of this KeyValue.

        The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :return: The content of this KeyValue.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this KeyValue.

        The text of the content. Formatted text supported and always required. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :param content: The content of this KeyValue.
        :type content: str
        """

        self._content = content

    @property
    def content_multiline(self):
        """Gets the content_multiline of this KeyValue.

        If the content should be multiline.

        :return: The content_multiline of this KeyValue.
        :rtype: bool
        """
        return self._content_multiline

    @content_multiline.setter
    def content_multiline(self, content_multiline):
        """Sets the content_multiline of this KeyValue.

        If the content should be multiline.

        :param content_multiline: The content_multiline of this KeyValue.
        :type content_multiline: bool
        """

        self._content_multiline = content_multiline

    @property
    def icon(self):
        """Gets the icon of this KeyValue.

        An enum value that's replaced by the Chat API with the corresponding icon image.

        :return: The icon of this KeyValue.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this KeyValue.

        An enum value that's replaced by the Chat API with the corresponding icon image.

        :param icon: The icon of this KeyValue.
        :type icon: str
        """
        allowed_values = ["ICON_UNSPECIFIED", "AIRPLANE", "BOOKMARK", "BUS", "CAR", "CLOCK", "CONFIRMATION_NUMBER_ICON", "DOLLAR", "DESCRIPTION", "EMAIL", "EVENT_PERFORMER", "EVENT_SEAT", "FLIGHT_ARRIVAL", "FLIGHT_DEPARTURE", "HOTEL", "HOTEL_ROOM_TYPE", "INVITE", "MAP_PIN", "MEMBERSHIP", "MULTIPLE_PEOPLE", "OFFER", "PERSON", "PHONE", "RESTAURANT_ICON", "SHOPPING_CART", "STAR", "STORE", "TICKET", "TRAIN", "VIDEO_CAMERA", "VIDEO_PLAY"]  # noqa: E501
        if icon not in allowed_values:
            raise ValueError(
                "Invalid value for `icon` ({0}), must be one of {1}"
                .format(icon, allowed_values)
            )

        self._icon = icon

    @property
    def icon_url(self):
        """Gets the icon_url of this KeyValue.

        The icon specified by a URL.

        :return: The icon_url of this KeyValue.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this KeyValue.

        The icon specified by a URL.

        :param icon_url: The icon_url of this KeyValue.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def on_click(self):
        """Gets the on_click of this KeyValue.


        :return: The on_click of this KeyValue.
        :rtype: OnClick
        """
        return self._on_click

    @on_click.setter
    def on_click(self, on_click):
        """Sets the on_click of this KeyValue.


        :param on_click: The on_click of this KeyValue.
        :type on_click: OnClick
        """

        self._on_click = on_click

    @property
    def top_label(self):
        """Gets the top_label of this KeyValue.

        The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :return: The top_label of this KeyValue.
        :rtype: str
        """
        return self._top_label

    @top_label.setter
    def top_label(self, top_label):
        """Sets the top_label of this KeyValue.

        The text of the top label. Formatted text supported. For more information about formatting text, see [Formatting text in Google Chat apps](https://developers.google.com/chat/format-messages#card-formatting) and [Formatting text in Google Workspace Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).

        :param top_label: The top_label of this KeyValue.
        :type top_label: str
        """

        self._top_label = top_label
