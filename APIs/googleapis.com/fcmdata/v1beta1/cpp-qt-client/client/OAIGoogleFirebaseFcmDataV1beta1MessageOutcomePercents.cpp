/**
 * Firebase Cloud Messaging Data API
 * Provides additional information about Firebase Cloud Messaging (FCM) message sends and deliveries.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents() {
    this->initializeModel();
}

OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::~OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents() {}

void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::initializeModel() {

    m_delivered_isSet = false;
    m_delivered_isValid = false;

    m_dropped_app_force_stopped_isSet = false;
    m_dropped_app_force_stopped_isValid = false;

    m_dropped_device_inactive_isSet = false;
    m_dropped_device_inactive_isValid = false;

    m_dropped_too_many_pending_messages_isSet = false;
    m_dropped_too_many_pending_messages_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;
}

void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::fromJsonObject(QJsonObject json) {

    m_delivered_isValid = ::OpenAPI::fromJsonValue(m_delivered, json[QString("delivered")]);
    m_delivered_isSet = !json[QString("delivered")].isNull() && m_delivered_isValid;

    m_dropped_app_force_stopped_isValid = ::OpenAPI::fromJsonValue(m_dropped_app_force_stopped, json[QString("droppedAppForceStopped")]);
    m_dropped_app_force_stopped_isSet = !json[QString("droppedAppForceStopped")].isNull() && m_dropped_app_force_stopped_isValid;

    m_dropped_device_inactive_isValid = ::OpenAPI::fromJsonValue(m_dropped_device_inactive, json[QString("droppedDeviceInactive")]);
    m_dropped_device_inactive_isSet = !json[QString("droppedDeviceInactive")].isNull() && m_dropped_device_inactive_isValid;

    m_dropped_too_many_pending_messages_isValid = ::OpenAPI::fromJsonValue(m_dropped_too_many_pending_messages, json[QString("droppedTooManyPendingMessages")]);
    m_dropped_too_many_pending_messages_isSet = !json[QString("droppedTooManyPendingMessages")].isNull() && m_dropped_too_many_pending_messages_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;
}

QString OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::asJsonObject() const {
    QJsonObject obj;
    if (m_delivered_isSet) {
        obj.insert(QString("delivered"), ::OpenAPI::toJsonValue(m_delivered));
    }
    if (m_dropped_app_force_stopped_isSet) {
        obj.insert(QString("droppedAppForceStopped"), ::OpenAPI::toJsonValue(m_dropped_app_force_stopped));
    }
    if (m_dropped_device_inactive_isSet) {
        obj.insert(QString("droppedDeviceInactive"), ::OpenAPI::toJsonValue(m_dropped_device_inactive));
    }
    if (m_dropped_too_many_pending_messages_isSet) {
        obj.insert(QString("droppedTooManyPendingMessages"), ::OpenAPI::toJsonValue(m_dropped_too_many_pending_messages));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    return obj;
}

float OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::getDelivered() const {
    return m_delivered;
}
void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::setDelivered(const float &delivered) {
    m_delivered = delivered;
    m_delivered_isSet = true;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_delivered_Set() const{
    return m_delivered_isSet;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_delivered_Valid() const{
    return m_delivered_isValid;
}

float OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::getDroppedAppForceStopped() const {
    return m_dropped_app_force_stopped;
}
void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::setDroppedAppForceStopped(const float &dropped_app_force_stopped) {
    m_dropped_app_force_stopped = dropped_app_force_stopped;
    m_dropped_app_force_stopped_isSet = true;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_app_force_stopped_Set() const{
    return m_dropped_app_force_stopped_isSet;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_app_force_stopped_Valid() const{
    return m_dropped_app_force_stopped_isValid;
}

float OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::getDroppedDeviceInactive() const {
    return m_dropped_device_inactive;
}
void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::setDroppedDeviceInactive(const float &dropped_device_inactive) {
    m_dropped_device_inactive = dropped_device_inactive;
    m_dropped_device_inactive_isSet = true;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_device_inactive_Set() const{
    return m_dropped_device_inactive_isSet;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_device_inactive_Valid() const{
    return m_dropped_device_inactive_isValid;
}

float OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::getDroppedTooManyPendingMessages() const {
    return m_dropped_too_many_pending_messages;
}
void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::setDroppedTooManyPendingMessages(const float &dropped_too_many_pending_messages) {
    m_dropped_too_many_pending_messages = dropped_too_many_pending_messages;
    m_dropped_too_many_pending_messages_isSet = true;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_too_many_pending_messages_Set() const{
    return m_dropped_too_many_pending_messages_isSet;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_dropped_too_many_pending_messages_Valid() const{
    return m_dropped_too_many_pending_messages_isValid;
}

float OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::getPending() const {
    return m_pending;
}
void OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::setPending(const float &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::is_pending_Valid() const{
    return m_pending_isValid;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_app_force_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_device_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_too_many_pending_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleFirebaseFcmDataV1beta1MessageOutcomePercents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
