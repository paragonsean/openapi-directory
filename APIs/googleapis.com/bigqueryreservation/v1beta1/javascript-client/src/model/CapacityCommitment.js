/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The CapacityCommitment model module.
 * @module model/CapacityCommitment
 * @version v1beta1
 */
class CapacityCommitment {
    /**
     * Constructs a new <code>CapacityCommitment</code>.
     * Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
     * @alias module:model/CapacityCommitment
     */
    constructor() { 
        
        CapacityCommitment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CapacityCommitment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CapacityCommitment} obj Optional instance to populate.
     * @return {module:model/CapacityCommitment} The populated <code>CapacityCommitment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CapacityCommitment();

            if (data.hasOwnProperty('commitmentEndTime')) {
                obj['commitmentEndTime'] = ApiClient.convertToType(data['commitmentEndTime'], 'String');
            }
            if (data.hasOwnProperty('commitmentStartTime')) {
                obj['commitmentStartTime'] = ApiClient.convertToType(data['commitmentStartTime'], 'String');
            }
            if (data.hasOwnProperty('failureStatus')) {
                obj['failureStatus'] = Status.constructFromObject(data['failureStatus']);
            }
            if (data.hasOwnProperty('multiRegionAuxiliary')) {
                obj['multiRegionAuxiliary'] = ApiClient.convertToType(data['multiRegionAuxiliary'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'String');
            }
            if (data.hasOwnProperty('renewalPlan')) {
                obj['renewalPlan'] = ApiClient.convertToType(data['renewalPlan'], 'String');
            }
            if (data.hasOwnProperty('slotCount')) {
                obj['slotCount'] = ApiClient.convertToType(data['slotCount'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CapacityCommitment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CapacityCommitment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitmentEndTime'] && !(typeof data['commitmentEndTime'] === 'string' || data['commitmentEndTime'] instanceof String)) {
            throw new Error("Expected the field `commitmentEndTime` to be a primitive type in the JSON string but got " + data['commitmentEndTime']);
        }
        // ensure the json data is a string
        if (data['commitmentStartTime'] && !(typeof data['commitmentStartTime'] === 'string' || data['commitmentStartTime'] instanceof String)) {
            throw new Error("Expected the field `commitmentStartTime` to be a primitive type in the JSON string but got " + data['commitmentStartTime']);
        }
        // validate the optional field `failureStatus`
        if (data['failureStatus']) { // data not null
          Status.validateJSON(data['failureStatus']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['plan'] && !(typeof data['plan'] === 'string' || data['plan'] instanceof String)) {
            throw new Error("Expected the field `plan` to be a primitive type in the JSON string but got " + data['plan']);
        }
        // ensure the json data is a string
        if (data['renewalPlan'] && !(typeof data['renewalPlan'] === 'string' || data['renewalPlan'] instanceof String)) {
            throw new Error("Expected the field `renewalPlan` to be a primitive type in the JSON string but got " + data['renewalPlan']);
        }
        // ensure the json data is a string
        if (data['slotCount'] && !(typeof data['slotCount'] === 'string' || data['slotCount'] instanceof String)) {
            throw new Error("Expected the field `slotCount` to be a primitive type in the JSON string but got " + data['slotCount']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.
 * @member {String} commitmentEndTime
 */
CapacityCommitment.prototype['commitmentEndTime'] = undefined;

/**
 * Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.
 * @member {String} commitmentStartTime
 */
CapacityCommitment.prototype['commitmentStartTime'] = undefined;

/**
 * @member {module:model/Status} failureStatus
 */
CapacityCommitment.prototype['failureStatus'] = undefined;

/**
 * Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region.
 * @member {Boolean} multiRegionAuxiliary
 */
CapacityCommitment.prototype['multiRegionAuxiliary'] = undefined;

/**
 * Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.
 * @member {String} name
 */
CapacityCommitment.prototype['name'] = undefined;

/**
 * Capacity commitment commitment plan.
 * @member {module:model/CapacityCommitment.PlanEnum} plan
 */
CapacityCommitment.prototype['plan'] = undefined;

/**
 * The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL commitments.
 * @member {module:model/CapacityCommitment.RenewalPlanEnum} renewalPlan
 */
CapacityCommitment.prototype['renewalPlan'] = undefined;

/**
 * Number of slots in this commitment.
 * @member {String} slotCount
 */
CapacityCommitment.prototype['slotCount'] = undefined;

/**
 * Output only. State of the commitment.
 * @member {module:model/CapacityCommitment.StateEnum} state
 */
CapacityCommitment.prototype['state'] = undefined;





/**
 * Allowed values for the <code>plan</code> property.
 * @enum {String}
 * @readonly
 */
CapacityCommitment['PlanEnum'] = {

    /**
     * value: "COMMITMENT_PLAN_UNSPECIFIED"
     * @const
     */
    "COMMITMENT_PLAN_UNSPECIFIED": "COMMITMENT_PLAN_UNSPECIFIED",

    /**
     * value: "FLEX"
     * @const
     */
    "FLEX": "FLEX",

    /**
     * value: "TRIAL"
     * @const
     */
    "TRIAL": "TRIAL",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "ANNUAL"
     * @const
     */
    "ANNUAL": "ANNUAL"
};


/**
 * Allowed values for the <code>renewalPlan</code> property.
 * @enum {String}
 * @readonly
 */
CapacityCommitment['RenewalPlanEnum'] = {

    /**
     * value: "COMMITMENT_PLAN_UNSPECIFIED"
     * @const
     */
    "COMMITMENT_PLAN_UNSPECIFIED": "COMMITMENT_PLAN_UNSPECIFIED",

    /**
     * value: "FLEX"
     * @const
     */
    "FLEX": "FLEX",

    /**
     * value: "TRIAL"
     * @const
     */
    "TRIAL": "TRIAL",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "ANNUAL"
     * @const
     */
    "ANNUAL": "ANNUAL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CapacityCommitment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default CapacityCommitment;

