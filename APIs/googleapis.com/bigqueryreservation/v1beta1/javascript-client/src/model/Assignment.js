/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Assignment model module.
 * @module model/Assignment
 * @version v1beta1
 */
class Assignment {
    /**
     * Constructs a new <code>Assignment</code>.
     * An assignment allows a project to submit jobs of a certain type using slots from the specified reservation.
     * @alias module:model/Assignment
     */
    constructor() { 
        
        Assignment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Assignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Assignment} obj Optional instance to populate.
     * @return {module:model/Assignment} The populated <code>Assignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Assignment();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = ApiClient.convertToType(data['assignee'], 'String');
            }
            if (data.hasOwnProperty('jobType')) {
                obj['jobType'] = ApiClient.convertToType(data['jobType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Assignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Assignment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assignee'] && !(typeof data['assignee'] === 'string' || data['assignee'] instanceof String)) {
            throw new Error("Expected the field `assignee` to be a primitive type in the JSON string but got " + data['assignee']);
        }
        // ensure the json data is a string
        if (data['jobType'] && !(typeof data['jobType'] === 'string' || data['jobType'] instanceof String)) {
            throw new Error("Expected the field `jobType` to be a primitive type in the JSON string but got " + data['jobType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.
 * @member {String} assignee
 */
Assignment.prototype['assignee'] = undefined;

/**
 * Which type of jobs will use the reservation.
 * @member {module:model/Assignment.JobTypeEnum} jobType
 */
Assignment.prototype['jobType'] = undefined;

/**
 * Output only. Name of the resource. E.g.: `projects/myproject/locations/US/reservations/team1-prod/assignments/123`. The assignment_id must only contain lower case alphanumeric characters or dashes and the max length is 64 characters.
 * @member {String} name
 */
Assignment.prototype['name'] = undefined;

/**
 * Output only. State of the assignment.
 * @member {module:model/Assignment.StateEnum} state
 */
Assignment.prototype['state'] = undefined;





/**
 * Allowed values for the <code>jobType</code> property.
 * @enum {String}
 * @readonly
 */
Assignment['JobTypeEnum'] = {

    /**
     * value: "JOB_TYPE_UNSPECIFIED"
     * @const
     */
    "JOB_TYPE_UNSPECIFIED": "JOB_TYPE_UNSPECIFIED",

    /**
     * value: "PIPELINE"
     * @const
     */
    "PIPELINE": "PIPELINE",

    /**
     * value: "QUERY"
     * @const
     */
    "QUERY": "QUERY",

    /**
     * value: "ML_EXTERNAL"
     * @const
     */
    "ML_EXTERNAL": "ML_EXTERNAL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Assignment['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE"
};



export default Assignment;

