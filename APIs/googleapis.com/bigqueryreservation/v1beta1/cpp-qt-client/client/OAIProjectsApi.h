/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignment.h"
#include "OAICapacityCommitment.h"
#include "OAIListAssignmentsResponse.h"
#include "OAIListCapacityCommitmentsResponse.h"
#include "OAIListReservationsResponse.h"
#include "OAIMergeCapacityCommitmentsRequest.h"
#include "OAIMoveAssignmentRequest.h"
#include "OAIObject.h"
#include "OAIReservation.h"
#include "OAISearchAssignmentsResponse.h"
#include "OAISplitCapacityCommitmentRequest.h"
#include "OAISplitCapacityCommitmentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  capacity_commitment_id QString [optional]
    * @param[in]  enforce_single_admin_project_per_org bool [optional]
    * @param[in]  oai_capacity_commitment OAICapacityCommitment [optional]
    */
    virtual void bigqueryreservation_projects_locations_capacityCommitments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &capacity_commitment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_admin_project_per_org = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAICapacityCommitment> &oai_capacity_commitment = ::OpenAPI::OptionalParam<OAICapacityCommitment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void bigqueryreservation_projects_locations_capacityCommitments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_merge_capacity_commitments_request OAIMergeCapacityCommitmentsRequest [optional]
    */
    virtual void bigqueryreservation_projects_locations_capacityCommitments_merge(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMergeCapacityCommitmentsRequest> &oai_merge_capacity_commitments_request = ::OpenAPI::OptionalParam<OAIMergeCapacityCommitmentsRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_split_capacity_commitment_request OAISplitCapacityCommitmentRequest [optional]
    */
    virtual void bigqueryreservation_projects_locations_capacityCommitments_split(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISplitCapacityCommitmentRequest> &oai_split_capacity_commitment_request = ::OpenAPI::OptionalParam<OAISplitCapacityCommitmentRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  assignment_id QString [optional]
    * @param[in]  oai_assignment OAIAssignment [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_assignments_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignment> &oai_assignment = ::OpenAPI::OptionalParam<OAIAssignment>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  force bool [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_assignments_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_assignments_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_move_assignment_request OAIMoveAssignmentRequest [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_assignments_move(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMoveAssignmentRequest> &oai_move_assignment_request = ::OpenAPI::OptionalParam<OAIMoveAssignmentRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_assignment OAIAssignment [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_assignments_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssignment> &oai_assignment = ::OpenAPI::OptionalParam<OAIAssignment>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  reservation_id QString [optional]
    * @param[in]  oai_reservation OAIReservation [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reservation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReservation> &oai_reservation = ::OpenAPI::OptionalParam<OAIReservation>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void bigqueryreservation_projects_locations_reservations_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  query QString [optional]
    */
    virtual void bigqueryreservation_projects_locations_searchAssignments(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bigqueryreservation_projects_locations_capacityCommitments_createCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_capacityCommitments_listCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_capacityCommitments_mergeCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_capacityCommitments_splitCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_assignments_createCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_assignments_deleteCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_assignments_listCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_assignments_moveCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_assignments_patchCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_createCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_getCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_reservations_listCallback(OAIHttpRequestWorker *worker);
    void bigqueryreservation_projects_locations_searchAssignmentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bigqueryreservation_projects_locations_capacityCommitments_createSignal(OAICapacityCommitment summary);
    void bigqueryreservation_projects_locations_capacityCommitments_listSignal(OAIListCapacityCommitmentsResponse summary);
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignal(OAICapacityCommitment summary);
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignal(OAISplitCapacityCommitmentResponse summary);
    void bigqueryreservation_projects_locations_reservations_assignments_createSignal(OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignal(OAIObject summary);
    void bigqueryreservation_projects_locations_reservations_assignments_listSignal(OAIListAssignmentsResponse summary);
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignal(OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignal(OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_createSignal(OAIReservation summary);
    void bigqueryreservation_projects_locations_reservations_getSignal(OAIReservation summary);
    void bigqueryreservation_projects_locations_reservations_listSignal(OAIListReservationsResponse summary);
    void bigqueryreservation_projects_locations_searchAssignmentsSignal(OAISearchAssignmentsResponse summary);


    void bigqueryreservation_projects_locations_capacityCommitments_createSignalFull(OAIHttpRequestWorker *worker, OAICapacityCommitment summary);
    void bigqueryreservation_projects_locations_capacityCommitments_listSignalFull(OAIHttpRequestWorker *worker, OAIListCapacityCommitmentsResponse summary);
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignalFull(OAIHttpRequestWorker *worker, OAICapacityCommitment summary);
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignalFull(OAIHttpRequestWorker *worker, OAISplitCapacityCommitmentResponse summary);
    void bigqueryreservation_projects_locations_reservations_assignments_createSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void bigqueryreservation_projects_locations_reservations_assignments_listSignalFull(OAIHttpRequestWorker *worker, OAIListAssignmentsResponse summary);
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignalFull(OAIHttpRequestWorker *worker, OAIAssignment summary);
    void bigqueryreservation_projects_locations_reservations_createSignalFull(OAIHttpRequestWorker *worker, OAIReservation summary);
    void bigqueryreservation_projects_locations_reservations_getSignalFull(OAIHttpRequestWorker *worker, OAIReservation summary);
    void bigqueryreservation_projects_locations_reservations_listSignalFull(OAIHttpRequestWorker *worker, OAIListReservationsResponse summary);
    void bigqueryreservation_projects_locations_searchAssignmentsSignalFull(OAIHttpRequestWorker *worker, OAISearchAssignmentsResponse summary);

    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_createSignalError() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_createSignalE(OAICapacityCommitment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_createSignalError(OAICapacityCommitment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_listSignalError() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_listSignalE(OAIListCapacityCommitmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_listSignalError(OAIListCapacityCommitmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_mergeSignalError() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignalE(OAICapacityCommitment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignalError(OAICapacityCommitment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_splitSignalError() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignalE(OAISplitCapacityCommitmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignalError(OAISplitCapacityCommitmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_createSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_createSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_createSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_deleteSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_listSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_listSignalE(OAIListAssignmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_listSignalError(OAIListAssignmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_moveSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_patchSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignalE(OAIAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignalError(OAIAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_createSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_createSignalE(OAIReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_createSignalError(OAIReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_getSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_getSignalE(OAIReservation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_getSignalError(OAIReservation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_listSignalError() instead")
    void bigqueryreservation_projects_locations_reservations_listSignalE(OAIListReservationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_listSignalError(OAIListReservationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_searchAssignmentsSignalError() instead")
    void bigqueryreservation_projects_locations_searchAssignmentsSignalE(OAISearchAssignmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_searchAssignmentsSignalError(OAISearchAssignmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_createSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_listSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_mergeSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_mergeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_capacityCommitments_splitSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_capacityCommitments_splitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_createSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_deleteSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_listSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_moveSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_moveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_assignments_patchSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_assignments_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_createSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_getSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_reservations_listSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_reservations_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_reservations_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bigqueryreservation_projects_locations_searchAssignmentsSignalErrorFull() instead")
    void bigqueryreservation_projects_locations_searchAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bigqueryreservation_projects_locations_searchAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
