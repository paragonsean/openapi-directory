/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservation::OAIReservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservation::OAIReservation() {
    this->initializeModel();
}

OAIReservation::~OAIReservation() {}

void OAIReservation::initializeModel() {

    m_concurrency_isSet = false;
    m_concurrency_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_ignore_idle_slots_isSet = false;
    m_ignore_idle_slots_isValid = false;

    m_multi_region_auxiliary_isSet = false;
    m_multi_region_auxiliary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slot_capacity_isSet = false;
    m_slot_capacity_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIReservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservation::fromJsonObject(QJsonObject json) {

    m_concurrency_isValid = ::OpenAPI::fromJsonValue(m_concurrency, json[QString("concurrency")]);
    m_concurrency_isSet = !json[QString("concurrency")].isNull() && m_concurrency_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_ignore_idle_slots_isValid = ::OpenAPI::fromJsonValue(m_ignore_idle_slots, json[QString("ignoreIdleSlots")]);
    m_ignore_idle_slots_isSet = !json[QString("ignoreIdleSlots")].isNull() && m_ignore_idle_slots_isValid;

    m_multi_region_auxiliary_isValid = ::OpenAPI::fromJsonValue(m_multi_region_auxiliary, json[QString("multiRegionAuxiliary")]);
    m_multi_region_auxiliary_isSet = !json[QString("multiRegionAuxiliary")].isNull() && m_multi_region_auxiliary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slot_capacity_isValid = ::OpenAPI::fromJsonValue(m_slot_capacity, json[QString("slotCapacity")]);
    m_slot_capacity_isSet = !json[QString("slotCapacity")].isNull() && m_slot_capacity_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIReservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservation::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrency_isSet) {
        obj.insert(QString("concurrency"), ::OpenAPI::toJsonValue(m_concurrency));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_ignore_idle_slots_isSet) {
        obj.insert(QString("ignoreIdleSlots"), ::OpenAPI::toJsonValue(m_ignore_idle_slots));
    }
    if (m_multi_region_auxiliary_isSet) {
        obj.insert(QString("multiRegionAuxiliary"), ::OpenAPI::toJsonValue(m_multi_region_auxiliary));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slot_capacity_isSet) {
        obj.insert(QString("slotCapacity"), ::OpenAPI::toJsonValue(m_slot_capacity));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIReservation::getConcurrency() const {
    return m_concurrency;
}
void OAIReservation::setConcurrency(const QString &concurrency) {
    m_concurrency = concurrency;
    m_concurrency_isSet = true;
}

bool OAIReservation::is_concurrency_Set() const{
    return m_concurrency_isSet;
}

bool OAIReservation::is_concurrency_Valid() const{
    return m_concurrency_isValid;
}

QString OAIReservation::getCreationTime() const {
    return m_creation_time;
}
void OAIReservation::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIReservation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIReservation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAIReservation::isIgnoreIdleSlots() const {
    return m_ignore_idle_slots;
}
void OAIReservation::setIgnoreIdleSlots(const bool &ignore_idle_slots) {
    m_ignore_idle_slots = ignore_idle_slots;
    m_ignore_idle_slots_isSet = true;
}

bool OAIReservation::is_ignore_idle_slots_Set() const{
    return m_ignore_idle_slots_isSet;
}

bool OAIReservation::is_ignore_idle_slots_Valid() const{
    return m_ignore_idle_slots_isValid;
}

bool OAIReservation::isMultiRegionAuxiliary() const {
    return m_multi_region_auxiliary;
}
void OAIReservation::setMultiRegionAuxiliary(const bool &multi_region_auxiliary) {
    m_multi_region_auxiliary = multi_region_auxiliary;
    m_multi_region_auxiliary_isSet = true;
}

bool OAIReservation::is_multi_region_auxiliary_Set() const{
    return m_multi_region_auxiliary_isSet;
}

bool OAIReservation::is_multi_region_auxiliary_Valid() const{
    return m_multi_region_auxiliary_isValid;
}

QString OAIReservation::getName() const {
    return m_name;
}
void OAIReservation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReservation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReservation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIReservation::getSlotCapacity() const {
    return m_slot_capacity;
}
void OAIReservation::setSlotCapacity(const QString &slot_capacity) {
    m_slot_capacity = slot_capacity;
    m_slot_capacity_isSet = true;
}

bool OAIReservation::is_slot_capacity_Set() const{
    return m_slot_capacity_isSet;
}

bool OAIReservation::is_slot_capacity_Valid() const{
    return m_slot_capacity_isValid;
}

QString OAIReservation::getUpdateTime() const {
    return m_update_time;
}
void OAIReservation::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIReservation::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIReservation::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIReservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_idle_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_auxiliary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
