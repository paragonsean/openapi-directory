# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Reservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrency: str=None, creation_time: str=None, ignore_idle_slots: bool=None, multi_region_auxiliary: bool=None, name: str=None, slot_capacity: str=None, update_time: str=None):
        """Reservation - a model defined in OpenAPI

        :param concurrency: The concurrency of this Reservation.
        :param creation_time: The creation_time of this Reservation.
        :param ignore_idle_slots: The ignore_idle_slots of this Reservation.
        :param multi_region_auxiliary: The multi_region_auxiliary of this Reservation.
        :param name: The name of this Reservation.
        :param slot_capacity: The slot_capacity of this Reservation.
        :param update_time: The update_time of this Reservation.
        """
        self.openapi_types = {
            'concurrency': str,
            'creation_time': str,
            'ignore_idle_slots': bool,
            'multi_region_auxiliary': bool,
            'name': str,
            'slot_capacity': str,
            'update_time': str
        }

        self.attribute_map = {
            'concurrency': 'concurrency',
            'creation_time': 'creationTime',
            'ignore_idle_slots': 'ignoreIdleSlots',
            'multi_region_auxiliary': 'multiRegionAuxiliary',
            'name': 'name',
            'slot_capacity': 'slotCapacity',
            'update_time': 'updateTime'
        }

        self._concurrency = concurrency
        self._creation_time = creation_time
        self._ignore_idle_slots = ignore_idle_slots
        self._multi_region_auxiliary = multi_region_auxiliary
        self._name = name
        self._slot_capacity = slot_capacity
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reservation of this Reservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrency(self):
        """Gets the concurrency of this Reservation.

        Job concurrency target which sets a soft upper bound on the number of jobs that can run concurrently in this reservation. This is a soft target due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency target will be automatically computed by the system. NOTE: this field is exposed as `target_job_concurrency` in the Information Schema, DDL and BQ CLI.

        :return: The concurrency of this Reservation.
        :rtype: str
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this Reservation.

        Job concurrency target which sets a soft upper bound on the number of jobs that can run concurrently in this reservation. This is a soft target due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency target will be automatically computed by the system. NOTE: this field is exposed as `target_job_concurrency` in the Information Schema, DDL and BQ CLI.

        :param concurrency: The concurrency of this Reservation.
        :type concurrency: str
        """

        self._concurrency = concurrency

    @property
    def creation_time(self):
        """Gets the creation_time of this Reservation.

        Output only. Creation time of the reservation.

        :return: The creation_time of this Reservation.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Reservation.

        Output only. Creation time of the reservation.

        :param creation_time: The creation_time of this Reservation.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def ignore_idle_slots(self):
        """Gets the ignore_idle_slots of this Reservation.

        If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.

        :return: The ignore_idle_slots of this Reservation.
        :rtype: bool
        """
        return self._ignore_idle_slots

    @ignore_idle_slots.setter
    def ignore_idle_slots(self, ignore_idle_slots):
        """Sets the ignore_idle_slots of this Reservation.

        If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.

        :param ignore_idle_slots: The ignore_idle_slots of this Reservation.
        :type ignore_idle_slots: bool
        """

        self._ignore_idle_slots = ignore_idle_slots

    @property
    def multi_region_auxiliary(self):
        """Gets the multi_region_auxiliary of this Reservation.

        Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization's default region.

        :return: The multi_region_auxiliary of this Reservation.
        :rtype: bool
        """
        return self._multi_region_auxiliary

    @multi_region_auxiliary.setter
    def multi_region_auxiliary(self, multi_region_auxiliary):
        """Sets the multi_region_auxiliary of this Reservation.

        Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization's default region.

        :param multi_region_auxiliary: The multi_region_auxiliary of this Reservation.
        :type multi_region_auxiliary: bool
        """

        self._multi_region_auxiliary = multi_region_auxiliary

    @property
    def name(self):
        """Gets the name of this Reservation.

        The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.

        :return: The name of this Reservation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Reservation.

        The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.

        :param name: The name of this Reservation.
        :type name: str
        """

        self._name = name

    @property
    def slot_capacity(self):
        """Gets the slot_capacity of this Reservation.

        Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false. If the new reservation's slot capacity exceeds the project's slot capacity or if total slot capacity of the new reservation and its siblings exceeds the project's slot capacity, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. NOTE: for reservations in US or EU multi-regions, slot capacity constraints are checked separately for default and auxiliary regions. See multi_region_auxiliary flag for more details.

        :return: The slot_capacity of this Reservation.
        :rtype: str
        """
        return self._slot_capacity

    @slot_capacity.setter
    def slot_capacity(self, slot_capacity):
        """Sets the slot_capacity of this Reservation.

        Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false. If the new reservation's slot capacity exceeds the project's slot capacity or if total slot capacity of the new reservation and its siblings exceeds the project's slot capacity, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. NOTE: for reservations in US or EU multi-regions, slot capacity constraints are checked separately for default and auxiliary regions. See multi_region_auxiliary flag for more details.

        :param slot_capacity: The slot_capacity of this Reservation.
        :type slot_capacity: str
        """

        self._slot_capacity = slot_capacity

    @property
    def update_time(self):
        """Gets the update_time of this Reservation.

        Output only. Last update time of the reservation.

        :return: The update_time of this Reservation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Reservation.

        Output only. Last update time of the reservation.

        :param update_time: The update_time of this Reservation.
        :type update_time: str
        """

        self._update_time = update_time
