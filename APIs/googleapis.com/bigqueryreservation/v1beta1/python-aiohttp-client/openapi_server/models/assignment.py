# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Assignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: str=None, job_type: str=None, name: str=None, state: str=None):
        """Assignment - a model defined in OpenAPI

        :param assignee: The assignee of this Assignment.
        :param job_type: The job_type of this Assignment.
        :param name: The name of this Assignment.
        :param state: The state of this Assignment.
        """
        self.openapi_types = {
            'assignee': str,
            'job_type': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'job_type': 'jobType',
            'name': 'name',
            'state': 'state'
        }

        self._assignee = assignee
        self._job_type = job_type
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Assignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Assignment of this Assignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this Assignment.

        The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.

        :return: The assignee of this Assignment.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this Assignment.

        The resource which will use the reservation. E.g. `projects/myproject`, `folders/123`, or `organizations/456`.

        :param assignee: The assignee of this Assignment.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def job_type(self):
        """Gets the job_type of this Assignment.

        Which type of jobs will use the reservation.

        :return: The job_type of this Assignment.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this Assignment.

        Which type of jobs will use the reservation.

        :param job_type: The job_type of this Assignment.
        :type job_type: str
        """
        allowed_values = ["JOB_TYPE_UNSPECIFIED", "PIPELINE", "QUERY", "ML_EXTERNAL"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def name(self):
        """Gets the name of this Assignment.

        Output only. Name of the resource. E.g.: `projects/myproject/locations/US/reservations/team1-prod/assignments/123`. The assignment_id must only contain lower case alphanumeric characters or dashes and the max length is 64 characters.

        :return: The name of this Assignment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assignment.

        Output only. Name of the resource. E.g.: `projects/myproject/locations/US/reservations/team1-prod/assignments/123`. The assignment_id must only contain lower case alphanumeric characters or dashes and the max length is 64 characters.

        :param name: The name of this Assignment.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Assignment.

        Output only. State of the assignment.

        :return: The state of this Assignment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Assignment.

        Output only. State of the assignment.

        :param state: The state of this Assignment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
