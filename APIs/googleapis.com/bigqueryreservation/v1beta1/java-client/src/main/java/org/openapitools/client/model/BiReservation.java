/*
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a BI Reservation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:44:05.740947-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BiReservation {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED_TABLES = "preferredTables";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TABLES)
  private List<TableReference> preferredTables = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public BiReservation() {
  }

  public BiReservation(
     String updateTime
  ) {
    this();
    this.updateTime = updateTime;
  }

  public BiReservation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the singleton BI reservation. Reservation names have the form &#x60;projects/{project_id}/locations/{location_id}/biReservation&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BiReservation preferredTables(List<TableReference> preferredTables) {
    this.preferredTables = preferredTables;
    return this;
  }

  public BiReservation addPreferredTablesItem(TableReference preferredTablesItem) {
    if (this.preferredTables == null) {
      this.preferredTables = new ArrayList<>();
    }
    this.preferredTables.add(preferredTablesItem);
    return this;
  }

  /**
   * Preferred tables to use BI capacity for.
   * @return preferredTables
   */
  @javax.annotation.Nullable
  public List<TableReference> getPreferredTables() {
    return preferredTables;
  }

  public void setPreferredTables(List<TableReference> preferredTables) {
    this.preferredTables = preferredTables;
  }


  public BiReservation size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Size of a reservation, in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  /**
   * Output only. The last update timestamp of a reservation.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BiReservation biReservation = (BiReservation) o;
    return Objects.equals(this.name, biReservation.name) &&
        Objects.equals(this.preferredTables, biReservation.preferredTables) &&
        Objects.equals(this.size, biReservation.size) &&
        Objects.equals(this.updateTime, biReservation.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, preferredTables, size, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BiReservation {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredTables: ").append(toIndentedString(preferredTables)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("preferredTables");
    openapiFields.add("size");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BiReservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BiReservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BiReservation is not found in the empty JSON string", BiReservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BiReservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BiReservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("preferredTables") != null && !jsonObj.get("preferredTables").isJsonNull()) {
        JsonArray jsonArraypreferredTables = jsonObj.getAsJsonArray("preferredTables");
        if (jsonArraypreferredTables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferredTables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferredTables` to be an array in the JSON string but got `%s`", jsonObj.get("preferredTables").toString()));
          }

          // validate the optional field `preferredTables` (array)
          for (int i = 0; i < jsonArraypreferredTables.size(); i++) {
            TableReference.validateJsonElement(jsonArraypreferredTables.get(i));
          };
        }
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BiReservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BiReservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BiReservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BiReservation.class));

       return (TypeAdapter<T>) new TypeAdapter<BiReservation>() {
           @Override
           public void write(JsonWriter out, BiReservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BiReservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BiReservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BiReservation
   * @throws IOException if the JSON string is invalid with respect to BiReservation
   */
  public static BiReservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BiReservation.class);
  }

  /**
   * Convert an instance of BiReservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

