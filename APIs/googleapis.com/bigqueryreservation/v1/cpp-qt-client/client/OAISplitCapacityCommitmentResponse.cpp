/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplitCapacityCommitmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplitCapacityCommitmentResponse::OAISplitCapacityCommitmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplitCapacityCommitmentResponse::OAISplitCapacityCommitmentResponse() {
    this->initializeModel();
}

OAISplitCapacityCommitmentResponse::~OAISplitCapacityCommitmentResponse() {}

void OAISplitCapacityCommitmentResponse::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_second_isSet = false;
    m_second_isValid = false;
}

void OAISplitCapacityCommitmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplitCapacityCommitmentResponse::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_second_isValid = ::OpenAPI::fromJsonValue(m_second, json[QString("second")]);
    m_second_isSet = !json[QString("second")].isNull() && m_second_isValid;
}

QString OAISplitCapacityCommitmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplitCapacityCommitmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_first.isSet()) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_second.isSet()) {
        obj.insert(QString("second"), ::OpenAPI::toJsonValue(m_second));
    }
    return obj;
}

OAICapacityCommitment OAISplitCapacityCommitmentResponse::getFirst() const {
    return m_first;
}
void OAISplitCapacityCommitmentResponse::setFirst(const OAICapacityCommitment &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAISplitCapacityCommitmentResponse::is_first_Set() const{
    return m_first_isSet;
}

bool OAISplitCapacityCommitmentResponse::is_first_Valid() const{
    return m_first_isValid;
}

OAICapacityCommitment OAISplitCapacityCommitmentResponse::getSecond() const {
    return m_second;
}
void OAISplitCapacityCommitmentResponse::setSecond(const OAICapacityCommitment &second) {
    m_second = second;
    m_second_isSet = true;
}

bool OAISplitCapacityCommitmentResponse::is_second_Set() const{
    return m_second_isSet;
}

bool OAISplitCapacityCommitmentResponse::is_second_Valid() const{
    return m_second_isValid;
}

bool OAISplitCapacityCommitmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_second.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplitCapacityCommitmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
