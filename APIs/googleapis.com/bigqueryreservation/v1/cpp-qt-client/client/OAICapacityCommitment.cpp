/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityCommitment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityCommitment::OAICapacityCommitment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityCommitment::OAICapacityCommitment() {
    this->initializeModel();
}

OAICapacityCommitment::~OAICapacityCommitment() {}

void OAICapacityCommitment::initializeModel() {

    m_commitment_end_time_isSet = false;
    m_commitment_end_time_isValid = false;

    m_commitment_start_time_isSet = false;
    m_commitment_start_time_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_failure_status_isSet = false;
    m_failure_status_isValid = false;

    m_is_flat_rate_isSet = false;
    m_is_flat_rate_isValid = false;

    m_multi_region_auxiliary_isSet = false;
    m_multi_region_auxiliary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_renewal_plan_isSet = false;
    m_renewal_plan_isValid = false;

    m_slot_count_isSet = false;
    m_slot_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICapacityCommitment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityCommitment::fromJsonObject(QJsonObject json) {

    m_commitment_end_time_isValid = ::OpenAPI::fromJsonValue(m_commitment_end_time, json[QString("commitmentEndTime")]);
    m_commitment_end_time_isSet = !json[QString("commitmentEndTime")].isNull() && m_commitment_end_time_isValid;

    m_commitment_start_time_isValid = ::OpenAPI::fromJsonValue(m_commitment_start_time, json[QString("commitmentStartTime")]);
    m_commitment_start_time_isSet = !json[QString("commitmentStartTime")].isNull() && m_commitment_start_time_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_failure_status_isValid = ::OpenAPI::fromJsonValue(m_failure_status, json[QString("failureStatus")]);
    m_failure_status_isSet = !json[QString("failureStatus")].isNull() && m_failure_status_isValid;

    m_is_flat_rate_isValid = ::OpenAPI::fromJsonValue(m_is_flat_rate, json[QString("isFlatRate")]);
    m_is_flat_rate_isSet = !json[QString("isFlatRate")].isNull() && m_is_flat_rate_isValid;

    m_multi_region_auxiliary_isValid = ::OpenAPI::fromJsonValue(m_multi_region_auxiliary, json[QString("multiRegionAuxiliary")]);
    m_multi_region_auxiliary_isSet = !json[QString("multiRegionAuxiliary")].isNull() && m_multi_region_auxiliary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_renewal_plan_isValid = ::OpenAPI::fromJsonValue(m_renewal_plan, json[QString("renewalPlan")]);
    m_renewal_plan_isSet = !json[QString("renewalPlan")].isNull() && m_renewal_plan_isValid;

    m_slot_count_isValid = ::OpenAPI::fromJsonValue(m_slot_count, json[QString("slotCount")]);
    m_slot_count_isSet = !json[QString("slotCount")].isNull() && m_slot_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICapacityCommitment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityCommitment::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_end_time_isSet) {
        obj.insert(QString("commitmentEndTime"), ::OpenAPI::toJsonValue(m_commitment_end_time));
    }
    if (m_commitment_start_time_isSet) {
        obj.insert(QString("commitmentStartTime"), ::OpenAPI::toJsonValue(m_commitment_start_time));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_failure_status.isSet()) {
        obj.insert(QString("failureStatus"), ::OpenAPI::toJsonValue(m_failure_status));
    }
    if (m_is_flat_rate_isSet) {
        obj.insert(QString("isFlatRate"), ::OpenAPI::toJsonValue(m_is_flat_rate));
    }
    if (m_multi_region_auxiliary_isSet) {
        obj.insert(QString("multiRegionAuxiliary"), ::OpenAPI::toJsonValue(m_multi_region_auxiliary));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_renewal_plan_isSet) {
        obj.insert(QString("renewalPlan"), ::OpenAPI::toJsonValue(m_renewal_plan));
    }
    if (m_slot_count_isSet) {
        obj.insert(QString("slotCount"), ::OpenAPI::toJsonValue(m_slot_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICapacityCommitment::getCommitmentEndTime() const {
    return m_commitment_end_time;
}
void OAICapacityCommitment::setCommitmentEndTime(const QString &commitment_end_time) {
    m_commitment_end_time = commitment_end_time;
    m_commitment_end_time_isSet = true;
}

bool OAICapacityCommitment::is_commitment_end_time_Set() const{
    return m_commitment_end_time_isSet;
}

bool OAICapacityCommitment::is_commitment_end_time_Valid() const{
    return m_commitment_end_time_isValid;
}

QString OAICapacityCommitment::getCommitmentStartTime() const {
    return m_commitment_start_time;
}
void OAICapacityCommitment::setCommitmentStartTime(const QString &commitment_start_time) {
    m_commitment_start_time = commitment_start_time;
    m_commitment_start_time_isSet = true;
}

bool OAICapacityCommitment::is_commitment_start_time_Set() const{
    return m_commitment_start_time_isSet;
}

bool OAICapacityCommitment::is_commitment_start_time_Valid() const{
    return m_commitment_start_time_isValid;
}

QString OAICapacityCommitment::getEdition() const {
    return m_edition;
}
void OAICapacityCommitment::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAICapacityCommitment::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAICapacityCommitment::is_edition_Valid() const{
    return m_edition_isValid;
}

OAIStatus OAICapacityCommitment::getFailureStatus() const {
    return m_failure_status;
}
void OAICapacityCommitment::setFailureStatus(const OAIStatus &failure_status) {
    m_failure_status = failure_status;
    m_failure_status_isSet = true;
}

bool OAICapacityCommitment::is_failure_status_Set() const{
    return m_failure_status_isSet;
}

bool OAICapacityCommitment::is_failure_status_Valid() const{
    return m_failure_status_isValid;
}

bool OAICapacityCommitment::isIsFlatRate() const {
    return m_is_flat_rate;
}
void OAICapacityCommitment::setIsFlatRate(const bool &is_flat_rate) {
    m_is_flat_rate = is_flat_rate;
    m_is_flat_rate_isSet = true;
}

bool OAICapacityCommitment::is_is_flat_rate_Set() const{
    return m_is_flat_rate_isSet;
}

bool OAICapacityCommitment::is_is_flat_rate_Valid() const{
    return m_is_flat_rate_isValid;
}

bool OAICapacityCommitment::isMultiRegionAuxiliary() const {
    return m_multi_region_auxiliary;
}
void OAICapacityCommitment::setMultiRegionAuxiliary(const bool &multi_region_auxiliary) {
    m_multi_region_auxiliary = multi_region_auxiliary;
    m_multi_region_auxiliary_isSet = true;
}

bool OAICapacityCommitment::is_multi_region_auxiliary_Set() const{
    return m_multi_region_auxiliary_isSet;
}

bool OAICapacityCommitment::is_multi_region_auxiliary_Valid() const{
    return m_multi_region_auxiliary_isValid;
}

QString OAICapacityCommitment::getName() const {
    return m_name;
}
void OAICapacityCommitment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICapacityCommitment::is_name_Set() const{
    return m_name_isSet;
}

bool OAICapacityCommitment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICapacityCommitment::getPlan() const {
    return m_plan;
}
void OAICapacityCommitment::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAICapacityCommitment::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAICapacityCommitment::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAICapacityCommitment::getRenewalPlan() const {
    return m_renewal_plan;
}
void OAICapacityCommitment::setRenewalPlan(const QString &renewal_plan) {
    m_renewal_plan = renewal_plan;
    m_renewal_plan_isSet = true;
}

bool OAICapacityCommitment::is_renewal_plan_Set() const{
    return m_renewal_plan_isSet;
}

bool OAICapacityCommitment::is_renewal_plan_Valid() const{
    return m_renewal_plan_isValid;
}

QString OAICapacityCommitment::getSlotCount() const {
    return m_slot_count;
}
void OAICapacityCommitment::setSlotCount(const QString &slot_count) {
    m_slot_count = slot_count;
    m_slot_count_isSet = true;
}

bool OAICapacityCommitment::is_slot_count_Set() const{
    return m_slot_count_isSet;
}

bool OAICapacityCommitment::is_slot_count_Valid() const{
    return m_slot_count_isValid;
}

QString OAICapacityCommitment::getState() const {
    return m_state;
}
void OAICapacityCommitment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICapacityCommitment::is_state_Set() const{
    return m_state_isSet;
}

bool OAICapacityCommitment::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICapacityCommitment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_flat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_auxiliary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityCommitment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
