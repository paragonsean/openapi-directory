/**
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapacityCommitment.h
 *
 * Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
 */

#ifndef OAICapacityCommitment_H
#define OAICapacityCommitment_H

#include <QJsonObject>

#include "OAIStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;

class OAICapacityCommitment : public OAIObject {
public:
    OAICapacityCommitment();
    OAICapacityCommitment(QString json);
    ~OAICapacityCommitment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommitmentEndTime() const;
    void setCommitmentEndTime(const QString &commitment_end_time);
    bool is_commitment_end_time_Set() const;
    bool is_commitment_end_time_Valid() const;

    QString getCommitmentStartTime() const;
    void setCommitmentStartTime(const QString &commitment_start_time);
    bool is_commitment_start_time_Set() const;
    bool is_commitment_start_time_Valid() const;

    QString getEdition() const;
    void setEdition(const QString &edition);
    bool is_edition_Set() const;
    bool is_edition_Valid() const;

    OAIStatus getFailureStatus() const;
    void setFailureStatus(const OAIStatus &failure_status);
    bool is_failure_status_Set() const;
    bool is_failure_status_Valid() const;

    bool isIsFlatRate() const;
    void setIsFlatRate(const bool &is_flat_rate);
    bool is_is_flat_rate_Set() const;
    bool is_is_flat_rate_Valid() const;

    bool isMultiRegionAuxiliary() const;
    void setMultiRegionAuxiliary(const bool &multi_region_auxiliary);
    bool is_multi_region_auxiliary_Set() const;
    bool is_multi_region_auxiliary_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPlan() const;
    void setPlan(const QString &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    QString getRenewalPlan() const;
    void setRenewalPlan(const QString &renewal_plan);
    bool is_renewal_plan_Set() const;
    bool is_renewal_plan_Valid() const;

    QString getSlotCount() const;
    void setSlotCount(const QString &slot_count);
    bool is_slot_count_Set() const;
    bool is_slot_count_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_commitment_end_time;
    bool m_commitment_end_time_isSet;
    bool m_commitment_end_time_isValid;

    QString m_commitment_start_time;
    bool m_commitment_start_time_isSet;
    bool m_commitment_start_time_isValid;

    QString m_edition;
    bool m_edition_isSet;
    bool m_edition_isValid;

    OAIStatus m_failure_status;
    bool m_failure_status_isSet;
    bool m_failure_status_isValid;

    bool m_is_flat_rate;
    bool m_is_flat_rate_isSet;
    bool m_is_flat_rate_isValid;

    bool m_multi_region_auxiliary;
    bool m_multi_region_auxiliary_isSet;
    bool m_multi_region_auxiliary_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    QString m_renewal_plan;
    bool m_renewal_plan_isSet;
    bool m_renewal_plan_isValid;

    QString m_slot_count;
    bool m_slot_count_isSet;
    bool m_slot_count_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapacityCommitment)

#endif // OAICapacityCommitment_H
