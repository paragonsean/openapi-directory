/*
 * BigQuery Reservation API
 * A service to modify your BigQuery flat-rate reservations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.CapacityCommitment;
import org.openapitools.client.model.ListAssignmentsResponse;
import org.openapitools.client.model.ListCapacityCommitmentsResponse;
import org.openapitools.client.model.ListReservationsResponse;
import org.openapitools.client.model.MergeCapacityCommitmentsRequest;
import org.openapitools.client.model.MoveAssignmentRequest;
import org.openapitools.client.model.Reservation;
import org.openapitools.client.model.SearchAllAssignmentsResponse;
import org.openapitools.client.model.SearchAssignmentsResponse;
import org.openapitools.client.model.SplitCapacityCommitmentRequest;
import org.openapitools.client.model.SplitCapacityCommitmentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Creates a new capacity commitment resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsCapacityCommitmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String capacityCommitmentId = null;
        Boolean enforceSingleAdminProjectPerOrg = null;
        CapacityCommitment capacityCommitment = null;
        CapacityCommitment response = api.bigqueryreservationProjectsLocationsCapacityCommitmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, capacityCommitmentId, enforceSingleAdminProjectPerOrg, capacityCommitment);
        // TODO: test validations
    }

    /**
     * Lists all the capacity commitments for the admin project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsCapacityCommitmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCapacityCommitmentsResponse response = api.bigqueryreservationProjectsLocationsCapacityCommitmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Merges capacity commitments of the same plan into a single commitment. The resulting capacity commitment has the greater commitment_end_time out of the to-be-merged capacity commitments. Attempting to merge capacity commitments of different plan will fail with the error code &#x60;google.rpc.Code.FAILED_PRECONDITION&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsCapacityCommitmentsMergeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MergeCapacityCommitmentsRequest mergeCapacityCommitmentsRequest = null;
        CapacityCommitment response = api.bigqueryreservationProjectsLocationsCapacityCommitmentsMerge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, mergeCapacityCommitmentsRequest);
        // TODO: test validations
    }

    /**
     * Splits capacity commitment to two commitments of the same plan and &#x60;commitment_end_time&#x60;. A common use case is to enable downgrading commitments. For example, in order to downgrade from 10000 slots to 8000, you might split a 10000 capacity commitment into commitments of 2000 and 8000. Then, you delete the first one after the commitment end time passes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsCapacityCommitmentsSplitTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SplitCapacityCommitmentRequest splitCapacityCommitmentRequest = null;
        SplitCapacityCommitmentResponse response = api.bigqueryreservationProjectsLocationsCapacityCommitmentsSplit(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, splitCapacityCommitmentRequest);
        // TODO: test validations
    }

    /**
     * Creates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization &#x60;organizationA&#x60; contains two projects, &#x60;project1&#x60; and &#x60;project2&#x60;. * Assignments for all three entities (&#x60;organizationA&#x60;, &#x60;project1&#x60;, and &#x60;project2&#x60;) could all be created and mapped to the same or different reservations. \&quot;None\&quot; assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a \&quot;None\&quot; assignment, use \&quot;none\&quot; as a reservation_id in the parent. Example parent: &#x60;projects/myproject/locations/US/reservations/none&#x60;. Returns &#x60;google.rpc.Code.PERMISSION_DENIED&#x60; if user does not have &#39;bigquery.admin&#39; permissions on the project using the reservation and the project that owns this reservation. Returns &#x60;google.rpc.Code.INVALID_ARGUMENT&#x60; when location of the assignment does not match location of the reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsAssignmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String assignmentId = null;
        Assignment assignment = null;
        Assignment response = api.bigqueryreservationProjectsLocationsReservationsAssignmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assignmentId, assignment);
        // TODO: test validations
    }

    /**
     * Deletes a assignment. No expansion will happen. Example: * Organization &#x60;organizationA&#x60; contains two projects, &#x60;project1&#x60; and &#x60;project2&#x60;. * Reservation &#x60;res1&#x60; exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: &#x60;&#x60; and &#x60;&#x60; In this example, deletion of the &#x60;&#x60; assignment won&#39;t affect the other assignment &#x60;&#x60;. After said deletion, queries from &#x60;project1&#x60; will still use &#x60;res1&#x60; while queries from &#x60;project2&#x60; will switch to use on-demand mode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsAssignmentsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        Object response = api.bigqueryreservationProjectsLocationsReservationsAssignmentsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force);
        // TODO: test validations
    }

    /**
     * Lists assignments. Only explicitly created assignments will be returned. Example: * Organization &#x60;organizationA&#x60; contains two projects, &#x60;project1&#x60; and &#x60;project2&#x60;. * Reservation &#x60;res1&#x60; exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: &#x60;&#x60; and &#x60;&#x60; In this example, ListAssignments will just return the above two assignments for reservation &#x60;res1&#x60;, and no expansion/merge will happen. The wildcard \&quot;-\&quot; can be used for reservations in the request. In that case all assignments belongs to the specified project and location will be listed. **Note** \&quot;-\&quot; cannot be used for projects nor locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsAssignmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAssignmentsResponse response = api.bigqueryreservationProjectsLocationsReservationsAssignmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Moves an assignment under a new reservation. This differs from removing an existing assignment and recreating a new one by providing a transactional change that ensures an assignee always has an associated reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsAssignmentsMoveTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MoveAssignmentRequest moveAssignmentRequest = null;
        Assignment response = api.bigqueryreservationProjectsLocationsReservationsAssignmentsMove(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, moveAssignmentRequest);
        // TODO: test validations
    }

    /**
     * Updates an existing assignment. Only the &#x60;priority&#x60; field can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsAssignmentsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Assignment assignment = null;
        Assignment response = api.bigqueryreservationProjectsLocationsReservationsAssignmentsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, assignment);
        // TODO: test validations
    }

    /**
     * Creates a new reservation resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String reservationId = null;
        Reservation reservation = null;
        Reservation response = api.bigqueryreservationProjectsLocationsReservationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reservationId, reservation);
        // TODO: test validations
    }

    /**
     * Returns information about the reservation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Reservation response = api.bigqueryreservationProjectsLocationsReservationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all the reservations for the project in the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsReservationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReservationsResponse response = api.bigqueryreservationProjectsLocationsReservationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn&#39;t have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project-&gt;folder-&gt;organization) happens in this API. 3. Parent here is &#x60;projects/_*_/locations/_*&#x60;, instead of &#x60;projects/_*_/locations/_*reservations/_*&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsSearchAllAssignmentsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        SearchAllAssignmentsResponse response = api.bigqueryreservationProjectsLocationsSearchAllAssignments(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, query);
        // TODO: test validations
    }

    /**
     * Deprecated: Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn&#39;t have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project-&gt;folder-&gt;organization) happens in this API. 3. Parent here is &#x60;projects/_*_/locations/_*&#x60;, instead of &#x60;projects/_*_/locations/_*reservations/_*&#x60;. **Note** \&quot;-\&quot; cannot be used for projects nor locations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bigqueryreservationProjectsLocationsSearchAssignmentsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        SearchAssignmentsResponse response = api.bigqueryreservationProjectsLocationsSearchAssignments(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, query);
        // TODO: test validations
    }

}
