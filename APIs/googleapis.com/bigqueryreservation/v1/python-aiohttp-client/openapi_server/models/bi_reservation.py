# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_reference import TableReference
from openapi_server import util


class BiReservation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, preferred_tables: List[TableReference]=None, size: str=None, update_time: str=None):
        """BiReservation - a model defined in OpenAPI

        :param name: The name of this BiReservation.
        :param preferred_tables: The preferred_tables of this BiReservation.
        :param size: The size of this BiReservation.
        :param update_time: The update_time of this BiReservation.
        """
        self.openapi_types = {
            'name': str,
            'preferred_tables': List[TableReference],
            'size': str,
            'update_time': str
        }

        self.attribute_map = {
            'name': 'name',
            'preferred_tables': 'preferredTables',
            'size': 'size',
            'update_time': 'updateTime'
        }

        self._name = name
        self._preferred_tables = preferred_tables
        self._size = size
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BiReservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BiReservation of this BiReservation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this BiReservation.

        The resource name of the singleton BI reservation. Reservation names have the form `projects/{project_id}/locations/{location_id}/biReservation`.

        :return: The name of this BiReservation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BiReservation.

        The resource name of the singleton BI reservation. Reservation names have the form `projects/{project_id}/locations/{location_id}/biReservation`.

        :param name: The name of this BiReservation.
        :type name: str
        """

        self._name = name

    @property
    def preferred_tables(self):
        """Gets the preferred_tables of this BiReservation.

        Preferred tables to use BI capacity for.

        :return: The preferred_tables of this BiReservation.
        :rtype: List[TableReference]
        """
        return self._preferred_tables

    @preferred_tables.setter
    def preferred_tables(self, preferred_tables):
        """Sets the preferred_tables of this BiReservation.

        Preferred tables to use BI capacity for.

        :param preferred_tables: The preferred_tables of this BiReservation.
        :type preferred_tables: List[TableReference]
        """

        self._preferred_tables = preferred_tables

    @property
    def size(self):
        """Gets the size of this BiReservation.

        Size of a reservation, in bytes.

        :return: The size of this BiReservation.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BiReservation.

        Size of a reservation, in bytes.

        :param size: The size of this BiReservation.
        :type size: str
        """

        self._size = size

    @property
    def update_time(self):
        """Gets the update_time of this BiReservation.

        Output only. The last update timestamp of a reservation.

        :return: The update_time of this BiReservation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this BiReservation.

        Output only. The last update timestamp of a reservation.

        :param update_time: The update_time of this BiReservation.
        :type update_time: str
        """

        self._update_time = update_time
