# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class CapacityCommitment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_end_time: str=None, commitment_start_time: str=None, edition: str=None, failure_status: Status=None, is_flat_rate: bool=None, multi_region_auxiliary: bool=None, name: str=None, plan: str=None, renewal_plan: str=None, slot_count: str=None, state: str=None):
        """CapacityCommitment - a model defined in OpenAPI

        :param commitment_end_time: The commitment_end_time of this CapacityCommitment.
        :param commitment_start_time: The commitment_start_time of this CapacityCommitment.
        :param edition: The edition of this CapacityCommitment.
        :param failure_status: The failure_status of this CapacityCommitment.
        :param is_flat_rate: The is_flat_rate of this CapacityCommitment.
        :param multi_region_auxiliary: The multi_region_auxiliary of this CapacityCommitment.
        :param name: The name of this CapacityCommitment.
        :param plan: The plan of this CapacityCommitment.
        :param renewal_plan: The renewal_plan of this CapacityCommitment.
        :param slot_count: The slot_count of this CapacityCommitment.
        :param state: The state of this CapacityCommitment.
        """
        self.openapi_types = {
            'commitment_end_time': str,
            'commitment_start_time': str,
            'edition': str,
            'failure_status': Status,
            'is_flat_rate': bool,
            'multi_region_auxiliary': bool,
            'name': str,
            'plan': str,
            'renewal_plan': str,
            'slot_count': str,
            'state': str
        }

        self.attribute_map = {
            'commitment_end_time': 'commitmentEndTime',
            'commitment_start_time': 'commitmentStartTime',
            'edition': 'edition',
            'failure_status': 'failureStatus',
            'is_flat_rate': 'isFlatRate',
            'multi_region_auxiliary': 'multiRegionAuxiliary',
            'name': 'name',
            'plan': 'plan',
            'renewal_plan': 'renewalPlan',
            'slot_count': 'slotCount',
            'state': 'state'
        }

        self._commitment_end_time = commitment_end_time
        self._commitment_start_time = commitment_start_time
        self._edition = edition
        self._failure_status = failure_status
        self._is_flat_rate = is_flat_rate
        self._multi_region_auxiliary = multi_region_auxiliary
        self._name = name
        self._plan = plan
        self._renewal_plan = renewal_plan
        self._slot_count = slot_count
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapacityCommitment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapacityCommitment of this CapacityCommitment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_end_time(self):
        """Gets the commitment_end_time of this CapacityCommitment.

        Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.

        :return: The commitment_end_time of this CapacityCommitment.
        :rtype: str
        """
        return self._commitment_end_time

    @commitment_end_time.setter
    def commitment_end_time(self, commitment_end_time):
        """Sets the commitment_end_time of this CapacityCommitment.

        Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.

        :param commitment_end_time: The commitment_end_time of this CapacityCommitment.
        :type commitment_end_time: str
        """

        self._commitment_end_time = commitment_end_time

    @property
    def commitment_start_time(self):
        """Gets the commitment_start_time of this CapacityCommitment.

        Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.

        :return: The commitment_start_time of this CapacityCommitment.
        :rtype: str
        """
        return self._commitment_start_time

    @commitment_start_time.setter
    def commitment_start_time(self, commitment_start_time):
        """Sets the commitment_start_time of this CapacityCommitment.

        Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.

        :param commitment_start_time: The commitment_start_time of this CapacityCommitment.
        :type commitment_start_time: str
        """

        self._commitment_start_time = commitment_start_time

    @property
    def edition(self):
        """Gets the edition of this CapacityCommitment.

        Edition of the capacity commitment.

        :return: The edition of this CapacityCommitment.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this CapacityCommitment.

        Edition of the capacity commitment.

        :param edition: The edition of this CapacityCommitment.
        :type edition: str
        """
        allowed_values = ["EDITION_UNSPECIFIED", "STANDARD", "ENTERPRISE", "ENTERPRISE_PLUS"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def failure_status(self):
        """Gets the failure_status of this CapacityCommitment.


        :return: The failure_status of this CapacityCommitment.
        :rtype: Status
        """
        return self._failure_status

    @failure_status.setter
    def failure_status(self, failure_status):
        """Sets the failure_status of this CapacityCommitment.


        :param failure_status: The failure_status of this CapacityCommitment.
        :type failure_status: Status
        """

        self._failure_status = failure_status

    @property
    def is_flat_rate(self):
        """Gets the is_flat_rate of this CapacityCommitment.

        Output only. If true, the commitment is a flat-rate commitment, otherwise, it's an edition commitment.

        :return: The is_flat_rate of this CapacityCommitment.
        :rtype: bool
        """
        return self._is_flat_rate

    @is_flat_rate.setter
    def is_flat_rate(self, is_flat_rate):
        """Sets the is_flat_rate of this CapacityCommitment.

        Output only. If true, the commitment is a flat-rate commitment, otherwise, it's an edition commitment.

        :param is_flat_rate: The is_flat_rate of this CapacityCommitment.
        :type is_flat_rate: bool
        """

        self._is_flat_rate = is_flat_rate

    @property
    def multi_region_auxiliary(self):
        """Gets the multi_region_auxiliary of this CapacityCommitment.

        Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.

        :return: The multi_region_auxiliary of this CapacityCommitment.
        :rtype: bool
        """
        return self._multi_region_auxiliary

    @multi_region_auxiliary.setter
    def multi_region_auxiliary(self, multi_region_auxiliary):
        """Sets the multi_region_auxiliary of this CapacityCommitment.

        Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.

        :param multi_region_auxiliary: The multi_region_auxiliary of this CapacityCommitment.
        :type multi_region_auxiliary: bool
        """

        self._multi_region_auxiliary = multi_region_auxiliary

    @property
    def name(self):
        """Gets the name of this CapacityCommitment.

        Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.

        :return: The name of this CapacityCommitment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CapacityCommitment.

        Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.

        :param name: The name of this CapacityCommitment.
        :type name: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this CapacityCommitment.

        Capacity commitment commitment plan.

        :return: The plan of this CapacityCommitment.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CapacityCommitment.

        Capacity commitment commitment plan.

        :param plan: The plan of this CapacityCommitment.
        :type plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "FLEX", "FLEX_FLAT_RATE", "TRIAL", "MONTHLY", "MONTHLY_FLAT_RATE", "ANNUAL", "ANNUAL_FLAT_RATE", "THREE_YEAR", "NONE"]  # noqa: E501
        if plan not in allowed_values:
            raise ValueError(
                "Invalid value for `plan` ({0}), must be one of {1}"
                .format(plan, allowed_values)
            )

        self._plan = plan

    @property
    def renewal_plan(self):
        """Gets the renewal_plan of this CapacityCommitment.

        The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.

        :return: The renewal_plan of this CapacityCommitment.
        :rtype: str
        """
        return self._renewal_plan

    @renewal_plan.setter
    def renewal_plan(self, renewal_plan):
        """Sets the renewal_plan of this CapacityCommitment.

        The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.

        :param renewal_plan: The renewal_plan of this CapacityCommitment.
        :type renewal_plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "FLEX", "FLEX_FLAT_RATE", "TRIAL", "MONTHLY", "MONTHLY_FLAT_RATE", "ANNUAL", "ANNUAL_FLAT_RATE", "THREE_YEAR", "NONE"]  # noqa: E501
        if renewal_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `renewal_plan` ({0}), must be one of {1}"
                .format(renewal_plan, allowed_values)
            )

        self._renewal_plan = renewal_plan

    @property
    def slot_count(self):
        """Gets the slot_count of this CapacityCommitment.

        Number of slots in this commitment.

        :return: The slot_count of this CapacityCommitment.
        :rtype: str
        """
        return self._slot_count

    @slot_count.setter
    def slot_count(self, slot_count):
        """Sets the slot_count of this CapacityCommitment.

        Number of slots in this commitment.

        :param slot_count: The slot_count of this CapacityCommitment.
        :type slot_count: str
        """

        self._slot_count = slot_count

    @property
    def state(self):
        """Gets the state of this CapacityCommitment.

        Output only. State of the commitment.

        :return: The state of this CapacityCommitment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CapacityCommitment.

        Output only. State of the commitment.

        :param state: The state of this CapacityCommitment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "ACTIVE", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
