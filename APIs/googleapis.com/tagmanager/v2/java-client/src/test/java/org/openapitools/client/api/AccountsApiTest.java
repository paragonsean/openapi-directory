/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainerVersion;
import org.openapitools.client.model.ContainerVersionHeader;
import org.openapitools.client.model.CreateBuiltInVariableResponse;
import org.openapitools.client.model.CreateContainerVersionRequestVersionOptions;
import org.openapitools.client.model.CreateContainerVersionResponse;
import org.openapitools.client.model.CustomTemplate;
import org.openapitools.client.model.Destination;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.FolderEntities;
import org.openapitools.client.model.GetContainerSnippetResponse;
import org.openapitools.client.model.GetWorkspaceStatusResponse;
import org.openapitools.client.model.GtagConfig;
import org.openapitools.client.model.ListAccountsResponse;
import org.openapitools.client.model.ListClientsResponse;
import org.openapitools.client.model.ListContainerVersionsResponse;
import org.openapitools.client.model.ListContainersResponse;
import org.openapitools.client.model.ListDestinationsResponse;
import org.openapitools.client.model.ListEnabledBuiltInVariablesResponse;
import org.openapitools.client.model.ListEnvironmentsResponse;
import org.openapitools.client.model.ListFoldersResponse;
import org.openapitools.client.model.ListGtagConfigResponse;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListTemplatesResponse;
import org.openapitools.client.model.ListTransformationsResponse;
import org.openapitools.client.model.ListTriggersResponse;
import org.openapitools.client.model.ListUserPermissionsResponse;
import org.openapitools.client.model.ListVariablesResponse;
import org.openapitools.client.model.ListWorkspacesResponse;
import org.openapitools.client.model.ListZonesResponse;
import org.openapitools.client.model.PublishContainerVersionResponse;
import org.openapitools.client.model.QuickPreviewResponse;
import org.openapitools.client.model.RevertBuiltInVariableResponse;
import org.openapitools.client.model.RevertZoneResponse;
import org.openapitools.client.model.SyncWorkspaceResponse;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Transformation;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.UserPermission;
import org.openapitools.client.model.Variable;
import org.openapitools.client.model.Workspace;
import org.openapitools.client.model.Zone;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Combines Containers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersCombineTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowUserPermissionFeatureUpdate = null;
        String containerId = null;
        String settingSource = null;
        Container response = api.tagmanagerAccountsContainersCombine(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowUserPermissionFeatureUpdate, containerId, settingSource);
        // TODO: test validations
    }

    /**
     * Creates a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Container container = null;
        Container response = api.tagmanagerAccountsContainersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, container);
        // TODO: test validations
    }

    /**
     * Adds a Destination to this Container and removes it from the Container to which it is currently linked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersDestinationsLinkTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowUserPermissionFeatureUpdate = null;
        String destinationId = null;
        Destination response = api.tagmanagerAccountsContainersDestinationsLink(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowUserPermissionFeatureUpdate, destinationId);
        // TODO: test validations
    }

    /**
     * Lists all Destinations linked to a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersDestinationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListDestinationsResponse response = api.tagmanagerAccountsContainersDestinationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment environment = null;
        Environment response = api.tagmanagerAccountsContainersEnvironmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, environment);
        // TODO: test validations
    }

    /**
     * Lists all GTM Environments of a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListEnvironmentsResponse response = api.tagmanagerAccountsContainersEnvironmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Re-generates the authorization code for a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsReauthorizeTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment environment = null;
        Environment response = api.tagmanagerAccountsContainersEnvironmentsReauthorize(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, environment);
        // TODO: test validations
    }

    /**
     * Lists all Containers that belongs to a GTM Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListContainersResponse response = api.tagmanagerAccountsContainersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Looks up a Container by destination ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersLookupTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String destinationId = null;
        Container response = api.tagmanagerAccountsContainersLookup($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, destinationId);
        // TODO: test validations
    }

    /**
     * Move Tag ID out of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersMoveTagIdTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowUserPermissionFeatureUpdate = null;
        Boolean copySettings = null;
        Boolean copyTermsOfService = null;
        Boolean copyUsers = null;
        String tagId = null;
        String tagName = null;
        Container response = api.tagmanagerAccountsContainersMoveTagId(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowUserPermissionFeatureUpdate, copySettings, copyTermsOfService, copyUsers, tagId, tagName);
        // TODO: test validations
    }

    /**
     * Gets the tagging snippet for a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersSnippetTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetContainerSnippetResponse response = api.tagmanagerAccountsContainersSnippet(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the latest container version header
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionHeadersLatestTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersionHeader response = api.tagmanagerAccountsContainersVersionHeadersLatest(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all Container Versions of a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionHeadersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeDeleted = null;
        String pageToken = null;
        ListContainerVersionsResponse response = api.tagmanagerAccountsContainersVersionHeadersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeDeleted, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the live (i.e. published) container version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsLiveTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsLive(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Publishes a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsPublishTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        PublishContainerVersionResponse response = api.tagmanagerAccountsContainersVersionsPublish(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint);
        // TODO: test validations
    }

    /**
     * Sets the latest version used for synchronization of workspaces when detecting conflicts and errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsSetLatestTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsSetLatest(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Undeletes a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsUndeleteTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsUndelete(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates one or more GTM Built-In Variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesBuiltInVariablesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> type = null;
        CreateBuiltInVariableResponse response = api.tagmanagerAccountsContainersWorkspacesBuiltInVariablesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, type);
        // TODO: test validations
    }

    /**
     * Lists all the enabled Built-In Variables of a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesBuiltInVariablesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListEnabledBuiltInVariablesResponse response = api.tagmanagerAccountsContainersWorkspacesBuiltInVariablesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Reverts changes to a GTM Built-In Variables in a GTM Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesBuiltInVariablesRevertTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String type = null;
        RevertBuiltInVariableResponse response = api.tagmanagerAccountsContainersWorkspacesBuiltInVariablesRevert(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, type);
        // TODO: test validations
    }

    /**
     * Creates a GTM Client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesClientsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Client client = null;
        Client response = api.tagmanagerAccountsContainersWorkspacesClientsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, client);
        // TODO: test validations
    }

    /**
     * Lists all GTM Clients of a GTM container workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesClientsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListClientsResponse response = api.tagmanagerAccountsContainersWorkspacesClientsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Workspace workspace = null;
        Workspace response = api.tagmanagerAccountsContainersWorkspacesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, workspace);
        // TODO: test validations
    }

    /**
     * Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesCreateVersionTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateContainerVersionRequestVersionOptions createContainerVersionRequestVersionOptions = null;
        CreateContainerVersionResponse response = api.tagmanagerAccountsContainersWorkspacesCreateVersion(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createContainerVersionRequestVersionOptions);
        // TODO: test validations
    }

    /**
     * Creates a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesFoldersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Folder folder = null;
        Folder response = api.tagmanagerAccountsContainersWorkspacesFoldersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, folder);
        // TODO: test validations
    }

    /**
     * List all entities in a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesFoldersEntitiesTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        FolderEntities response = api.tagmanagerAccountsContainersWorkspacesFoldersEntities(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all GTM Folders of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesFoldersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListFoldersResponse response = api.tagmanagerAccountsContainersWorkspacesFoldersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Moves entities to a GTM Folder. If {folder_id} in the request path equals 0, this will instead move entities out of the folder they currently belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolderTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> tagId = null;
        List<String> triggerId = null;
        List<String> variableId = null;
        Folder folder = null;
        api.tagmanagerAccountsContainersWorkspacesFoldersMoveEntitiesToFolder(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tagId, triggerId, variableId, folder);
        // TODO: test validations
    }

    /**
     * Finds conflicting and modified entities in the workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesGetStatusTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetWorkspaceStatusResponse response = api.tagmanagerAccountsContainersWorkspacesGetStatus(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a Google tag config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesGtagConfigCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GtagConfig gtagConfig = null;
        GtagConfig response = api.tagmanagerAccountsContainersWorkspacesGtagConfigCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, gtagConfig);
        // TODO: test validations
    }

    /**
     * Lists all Google tag configs in a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesGtagConfigListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListGtagConfigResponse response = api.tagmanagerAccountsContainersWorkspacesGtagConfigList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all Workspaces that belong to a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListWorkspacesResponse response = api.tagmanagerAccountsContainersWorkspacesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Quick previews a workspace by creating a fake container version from all entities in the provided workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesQuickPreviewTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QuickPreviewResponse response = api.tagmanagerAccountsContainersWorkspacesQuickPreview(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesResolveConflictTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Entity entity = null;
        api.tagmanagerAccountsContainersWorkspacesResolveConflict(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, entity);
        // TODO: test validations
    }

    /**
     * Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesSyncTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SyncWorkspaceResponse response = api.tagmanagerAccountsContainersWorkspacesSync(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a GTM Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTagsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Tag tag = null;
        Tag response = api.tagmanagerAccountsContainersWorkspacesTagsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tag);
        // TODO: test validations
    }

    /**
     * Lists all GTM Tags of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTagsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListTagsResponse response = api.tagmanagerAccountsContainersWorkspacesTagsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a GTM Custom Template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTemplatesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CustomTemplate customTemplate = null;
        CustomTemplate response = api.tagmanagerAccountsContainersWorkspacesTemplatesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customTemplate);
        // TODO: test validations
    }

    /**
     * Lists all GTM Templates of a GTM container workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTemplatesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListTemplatesResponse response = api.tagmanagerAccountsContainersWorkspacesTemplatesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a GTM Transformation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTransformationsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Transformation transformation = null;
        Transformation response = api.tagmanagerAccountsContainersWorkspacesTransformationsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, transformation);
        // TODO: test validations
    }

    /**
     * Lists all GTM Transformations of a GTM container workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTransformationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListTransformationsResponse response = api.tagmanagerAccountsContainersWorkspacesTransformationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a GTM Trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTriggersCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Trigger trigger = null;
        Trigger response = api.tagmanagerAccountsContainersWorkspacesTriggersCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, trigger);
        // TODO: test validations
    }

    /**
     * Lists all GTM Triggers of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesTriggersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListTriggersResponse response = api.tagmanagerAccountsContainersWorkspacesTriggersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a GTM Variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesVariablesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Variable variable = null;
        Variable response = api.tagmanagerAccountsContainersWorkspacesVariablesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, variable);
        // TODO: test validations
    }

    /**
     * Lists all GTM Variables of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesVariablesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListVariablesResponse response = api.tagmanagerAccountsContainersWorkspacesVariablesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a GTM Zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesZonesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Zone zone = null;
        Zone response = api.tagmanagerAccountsContainersWorkspacesZonesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, zone);
        // TODO: test validations
    }

    /**
     * Lists all GTM Zones of a GTM container workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesZonesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListZonesResponse response = api.tagmanagerAccountsContainersWorkspacesZonesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Reverts changes to a GTM Zone in a GTM Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersWorkspacesZonesRevertTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        RevertZoneResponse response = api.tagmanagerAccountsContainersWorkspacesZonesRevert(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint);
        // TODO: test validations
    }

    /**
     * Lists all GTM Accounts that a user has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includeGoogleTags = null;
        String pageToken = null;
        ListAccountsResponse response = api.tagmanagerAccountsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includeGoogleTags, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a user&#39;s Account &amp; Container access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUserPermissionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserPermission userPermission = null;
        UserPermission response = api.tagmanagerAccountsUserPermissionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userPermission);
        // TODO: test validations
    }

    /**
     * Removes a user from the account, revoking access to it and all of its containers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUserPermissionsDeleteTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> type = null;
        api.tagmanagerAccountsUserPermissionsDelete(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, type);
        // TODO: test validations
    }

    /**
     * Gets a user&#39;s Account &amp; Container access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUserPermissionsGetTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String containerVersionId = null;
        UserPermission response = api.tagmanagerAccountsUserPermissionsGet(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, containerVersionId);
        // TODO: test validations
    }

    /**
     * List all users that have access to the account along with Account and Container user access granted to each of them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUserPermissionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String pageToken = null;
        ListUserPermissionsResponse response = api.tagmanagerAccountsUserPermissionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s Account &amp; Container access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUserPermissionsUpdateTest() throws ApiException {
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        UserPermission userPermission = null;
        UserPermission response = api.tagmanagerAccountsUserPermissionsUpdate(path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, userPermission);
        // TODO: test validations
    }

}
