/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuiltInVariable;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.CustomTemplate;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.GtagConfig;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Transformation;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.Variable;
import org.openapitools.client.model.Zone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Container Version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerVersion {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BUILT_IN_VARIABLE = "builtInVariable";
  @SerializedName(SERIALIZED_NAME_BUILT_IN_VARIABLE)
  private List<BuiltInVariable> builtInVariable = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private List<Client> client = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Container container;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_CONTAINER_VERSION_ID = "containerVersionId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_VERSION_ID)
  private String containerVersionId;

  public static final String SERIALIZED_NAME_CUSTOM_TEMPLATE = "customTemplate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TEMPLATE)
  private List<CustomTemplate> customTemplate = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private List<Folder> folder = new ArrayList<>();

  public static final String SERIALIZED_NAME_GTAG_CONFIG = "gtagConfig";
  @SerializedName(SERIALIZED_NAME_GTAG_CONFIG)
  private List<GtagConfig> gtagConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<Tag> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG_MANAGER_URL = "tagManagerUrl";
  @SerializedName(SERIALIZED_NAME_TAG_MANAGER_URL)
  private String tagManagerUrl;

  public static final String SERIALIZED_NAME_TRANSFORMATION = "transformation";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION)
  private List<Transformation> transformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private List<Trigger> trigger = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  private List<Variable> variable = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private List<Zone> zone = new ArrayList<>();

  public ContainerVersion() {
  }

  public ContainerVersion accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ContainerVersion builtInVariable(List<BuiltInVariable> builtInVariable) {
    this.builtInVariable = builtInVariable;
    return this;
  }

  public ContainerVersion addBuiltInVariableItem(BuiltInVariable builtInVariableItem) {
    if (this.builtInVariable == null) {
      this.builtInVariable = new ArrayList<>();
    }
    this.builtInVariable.add(builtInVariableItem);
    return this;
  }

  /**
   * The built-in variables in the container that this version was taken from.
   * @return builtInVariable
   */
  @javax.annotation.Nullable
  public List<BuiltInVariable> getBuiltInVariable() {
    return builtInVariable;
  }

  public void setBuiltInVariable(List<BuiltInVariable> builtInVariable) {
    this.builtInVariable = builtInVariable;
  }


  public ContainerVersion client(List<Client> client) {
    this.client = client;
    return this;
  }

  public ContainerVersion addClientItem(Client clientItem) {
    if (this.client == null) {
      this.client = new ArrayList<>();
    }
    this.client.add(clientItem);
    return this;
  }

  /**
   * The clients in the container that this version was taken from.
   * @return client
   */
  @javax.annotation.Nullable
  public List<Client> getClient() {
    return client;
  }

  public void setClient(List<Client> client) {
    this.client = client;
  }


  public ContainerVersion container(Container container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public Container getContainer() {
    return container;
  }

  public void setContainer(Container container) {
    this.container = container;
  }


  public ContainerVersion containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public ContainerVersion containerVersionId(String containerVersionId) {
    this.containerVersionId = containerVersionId;
    return this;
  }

  /**
   * The Container Version ID uniquely identifies the GTM Container Version.
   * @return containerVersionId
   */
  @javax.annotation.Nullable
  public String getContainerVersionId() {
    return containerVersionId;
  }

  public void setContainerVersionId(String containerVersionId) {
    this.containerVersionId = containerVersionId;
  }


  public ContainerVersion customTemplate(List<CustomTemplate> customTemplate) {
    this.customTemplate = customTemplate;
    return this;
  }

  public ContainerVersion addCustomTemplateItem(CustomTemplate customTemplateItem) {
    if (this.customTemplate == null) {
      this.customTemplate = new ArrayList<>();
    }
    this.customTemplate.add(customTemplateItem);
    return this;
  }

  /**
   * The custom templates in the container that this version was taken from.
   * @return customTemplate
   */
  @javax.annotation.Nullable
  public List<CustomTemplate> getCustomTemplate() {
    return customTemplate;
  }

  public void setCustomTemplate(List<CustomTemplate> customTemplate) {
    this.customTemplate = customTemplate;
  }


  public ContainerVersion deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * A value of true indicates this container version has been deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ContainerVersion description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Container version description. @mutable tagmanager.accounts.containers.versions.update
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ContainerVersion fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public ContainerVersion folder(List<Folder> folder) {
    this.folder = folder;
    return this;
  }

  public ContainerVersion addFolderItem(Folder folderItem) {
    if (this.folder == null) {
      this.folder = new ArrayList<>();
    }
    this.folder.add(folderItem);
    return this;
  }

  /**
   * The folders in the container that this version was taken from.
   * @return folder
   */
  @javax.annotation.Nullable
  public List<Folder> getFolder() {
    return folder;
  }

  public void setFolder(List<Folder> folder) {
    this.folder = folder;
  }


  public ContainerVersion gtagConfig(List<GtagConfig> gtagConfig) {
    this.gtagConfig = gtagConfig;
    return this;
  }

  public ContainerVersion addGtagConfigItem(GtagConfig gtagConfigItem) {
    if (this.gtagConfig == null) {
      this.gtagConfig = new ArrayList<>();
    }
    this.gtagConfig.add(gtagConfigItem);
    return this;
  }

  /**
   * The Google tag configs in the container that this version was taken from.
   * @return gtagConfig
   */
  @javax.annotation.Nullable
  public List<GtagConfig> getGtagConfig() {
    return gtagConfig;
  }

  public void setGtagConfig(List<GtagConfig> gtagConfig) {
    this.gtagConfig = gtagConfig;
  }


  public ContainerVersion name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Container version display name. @mutable tagmanager.accounts.containers.versions.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerVersion path(String path) {
    this.path = path;
    return this;
  }

  /**
   * GTM Container Version&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ContainerVersion tag(List<Tag> tag) {
    this.tag = tag;
    return this;
  }

  public ContainerVersion addTagItem(Tag tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * The tags in the container that this version was taken from.
   * @return tag
   */
  @javax.annotation.Nullable
  public List<Tag> getTag() {
    return tag;
  }

  public void setTag(List<Tag> tag) {
    this.tag = tag;
  }


  public ContainerVersion tagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return tagManagerUrl
   */
  @javax.annotation.Nullable
  public String getTagManagerUrl() {
    return tagManagerUrl;
  }

  public void setTagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
  }


  public ContainerVersion transformation(List<Transformation> transformation) {
    this.transformation = transformation;
    return this;
  }

  public ContainerVersion addTransformationItem(Transformation transformationItem) {
    if (this.transformation == null) {
      this.transformation = new ArrayList<>();
    }
    this.transformation.add(transformationItem);
    return this;
  }

  /**
   * The transformations in the container that this version was taken from.
   * @return transformation
   */
  @javax.annotation.Nullable
  public List<Transformation> getTransformation() {
    return transformation;
  }

  public void setTransformation(List<Transformation> transformation) {
    this.transformation = transformation;
  }


  public ContainerVersion trigger(List<Trigger> trigger) {
    this.trigger = trigger;
    return this;
  }

  public ContainerVersion addTriggerItem(Trigger triggerItem) {
    if (this.trigger == null) {
      this.trigger = new ArrayList<>();
    }
    this.trigger.add(triggerItem);
    return this;
  }

  /**
   * The triggers in the container that this version was taken from.
   * @return trigger
   */
  @javax.annotation.Nullable
  public List<Trigger> getTrigger() {
    return trigger;
  }

  public void setTrigger(List<Trigger> trigger) {
    this.trigger = trigger;
  }


  public ContainerVersion variable(List<Variable> variable) {
    this.variable = variable;
    return this;
  }

  public ContainerVersion addVariableItem(Variable variableItem) {
    if (this.variable == null) {
      this.variable = new ArrayList<>();
    }
    this.variable.add(variableItem);
    return this;
  }

  /**
   * The variables in the container that this version was taken from.
   * @return variable
   */
  @javax.annotation.Nullable
  public List<Variable> getVariable() {
    return variable;
  }

  public void setVariable(List<Variable> variable) {
    this.variable = variable;
  }


  public ContainerVersion zone(List<Zone> zone) {
    this.zone = zone;
    return this;
  }

  public ContainerVersion addZoneItem(Zone zoneItem) {
    if (this.zone == null) {
      this.zone = new ArrayList<>();
    }
    this.zone.add(zoneItem);
    return this;
  }

  /**
   * The zones in the container that this version was taken from.
   * @return zone
   */
  @javax.annotation.Nullable
  public List<Zone> getZone() {
    return zone;
  }

  public void setZone(List<Zone> zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerVersion containerVersion = (ContainerVersion) o;
    return Objects.equals(this.accountId, containerVersion.accountId) &&
        Objects.equals(this.builtInVariable, containerVersion.builtInVariable) &&
        Objects.equals(this.client, containerVersion.client) &&
        Objects.equals(this.container, containerVersion.container) &&
        Objects.equals(this.containerId, containerVersion.containerId) &&
        Objects.equals(this.containerVersionId, containerVersion.containerVersionId) &&
        Objects.equals(this.customTemplate, containerVersion.customTemplate) &&
        Objects.equals(this.deleted, containerVersion.deleted) &&
        Objects.equals(this.description, containerVersion.description) &&
        Objects.equals(this.fingerprint, containerVersion.fingerprint) &&
        Objects.equals(this.folder, containerVersion.folder) &&
        Objects.equals(this.gtagConfig, containerVersion.gtagConfig) &&
        Objects.equals(this.name, containerVersion.name) &&
        Objects.equals(this.path, containerVersion.path) &&
        Objects.equals(this.tag, containerVersion.tag) &&
        Objects.equals(this.tagManagerUrl, containerVersion.tagManagerUrl) &&
        Objects.equals(this.transformation, containerVersion.transformation) &&
        Objects.equals(this.trigger, containerVersion.trigger) &&
        Objects.equals(this.variable, containerVersion.variable) &&
        Objects.equals(this.zone, containerVersion.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, builtInVariable, client, container, containerId, containerVersionId, customTemplate, deleted, description, fingerprint, folder, gtagConfig, name, path, tag, tagManagerUrl, transformation, trigger, variable, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerVersion {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    builtInVariable: ").append(toIndentedString(builtInVariable)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    containerVersionId: ").append(toIndentedString(containerVersionId)).append("\n");
    sb.append("    customTemplate: ").append(toIndentedString(customTemplate)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    gtagConfig: ").append(toIndentedString(gtagConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tagManagerUrl: ").append(toIndentedString(tagManagerUrl)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("builtInVariable");
    openapiFields.add("client");
    openapiFields.add("container");
    openapiFields.add("containerId");
    openapiFields.add("containerVersionId");
    openapiFields.add("customTemplate");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("fingerprint");
    openapiFields.add("folder");
    openapiFields.add("gtagConfig");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("tag");
    openapiFields.add("tagManagerUrl");
    openapiFields.add("transformation");
    openapiFields.add("trigger");
    openapiFields.add("variable");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerVersion is not found in the empty JSON string", ContainerVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("builtInVariable") != null && !jsonObj.get("builtInVariable").isJsonNull()) {
        JsonArray jsonArraybuiltInVariable = jsonObj.getAsJsonArray("builtInVariable");
        if (jsonArraybuiltInVariable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("builtInVariable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `builtInVariable` to be an array in the JSON string but got `%s`", jsonObj.get("builtInVariable").toString()));
          }

          // validate the optional field `builtInVariable` (array)
          for (int i = 0; i < jsonArraybuiltInVariable.size(); i++) {
            BuiltInVariable.validateJsonElement(jsonArraybuiltInVariable.get(i));
          };
        }
      }
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        JsonArray jsonArrayclient = jsonObj.getAsJsonArray("client");
        if (jsonArrayclient != null) {
          // ensure the json data is an array
          if (!jsonObj.get("client").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `client` to be an array in the JSON string but got `%s`", jsonObj.get("client").toString()));
          }

          // validate the optional field `client` (array)
          for (int i = 0; i < jsonArrayclient.size(); i++) {
            Client.validateJsonElement(jsonArrayclient.get(i));
          };
        }
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        Container.validateJsonElement(jsonObj.get("container"));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("containerVersionId") != null && !jsonObj.get("containerVersionId").isJsonNull()) && !jsonObj.get("containerVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerVersionId").toString()));
      }
      if (jsonObj.get("customTemplate") != null && !jsonObj.get("customTemplate").isJsonNull()) {
        JsonArray jsonArraycustomTemplate = jsonObj.getAsJsonArray("customTemplate");
        if (jsonArraycustomTemplate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customTemplate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customTemplate` to be an array in the JSON string but got `%s`", jsonObj.get("customTemplate").toString()));
          }

          // validate the optional field `customTemplate` (array)
          for (int i = 0; i < jsonArraycustomTemplate.size(); i++) {
            CustomTemplate.validateJsonElement(jsonArraycustomTemplate.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if (jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) {
        JsonArray jsonArrayfolder = jsonObj.getAsJsonArray("folder");
        if (jsonArrayfolder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("folder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `folder` to be an array in the JSON string but got `%s`", jsonObj.get("folder").toString()));
          }

          // validate the optional field `folder` (array)
          for (int i = 0; i < jsonArrayfolder.size(); i++) {
            Folder.validateJsonElement(jsonArrayfolder.get(i));
          };
        }
      }
      if (jsonObj.get("gtagConfig") != null && !jsonObj.get("gtagConfig").isJsonNull()) {
        JsonArray jsonArraygtagConfig = jsonObj.getAsJsonArray("gtagConfig");
        if (jsonArraygtagConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gtagConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gtagConfig` to be an array in the JSON string but got `%s`", jsonObj.get("gtagConfig").toString()));
          }

          // validate the optional field `gtagConfig` (array)
          for (int i = 0; i < jsonArraygtagConfig.size(); i++) {
            GtagConfig.validateJsonElement(jsonArraygtagConfig.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        JsonArray jsonArraytag = jsonObj.getAsJsonArray("tag");
        if (jsonArraytag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
          }

          // validate the optional field `tag` (array)
          for (int i = 0; i < jsonArraytag.size(); i++) {
            Tag.validateJsonElement(jsonArraytag.get(i));
          };
        }
      }
      if ((jsonObj.get("tagManagerUrl") != null && !jsonObj.get("tagManagerUrl").isJsonNull()) && !jsonObj.get("tagManagerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagManagerUrl").toString()));
      }
      if (jsonObj.get("transformation") != null && !jsonObj.get("transformation").isJsonNull()) {
        JsonArray jsonArraytransformation = jsonObj.getAsJsonArray("transformation");
        if (jsonArraytransformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transformation` to be an array in the JSON string but got `%s`", jsonObj.get("transformation").toString()));
          }

          // validate the optional field `transformation` (array)
          for (int i = 0; i < jsonArraytransformation.size(); i++) {
            Transformation.validateJsonElement(jsonArraytransformation.get(i));
          };
        }
      }
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        JsonArray jsonArraytrigger = jsonObj.getAsJsonArray("trigger");
        if (jsonArraytrigger != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trigger").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trigger` to be an array in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
          }

          // validate the optional field `trigger` (array)
          for (int i = 0; i < jsonArraytrigger.size(); i++) {
            Trigger.validateJsonElement(jsonArraytrigger.get(i));
          };
        }
      }
      if (jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) {
        JsonArray jsonArrayvariable = jsonObj.getAsJsonArray("variable");
        if (jsonArrayvariable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variable` to be an array in the JSON string but got `%s`", jsonObj.get("variable").toString()));
          }

          // validate the optional field `variable` (array)
          for (int i = 0; i < jsonArrayvariable.size(); i++) {
            Variable.validateJsonElement(jsonArrayvariable.get(i));
          };
        }
      }
      if (jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) {
        JsonArray jsonArrayzone = jsonObj.getAsJsonArray("zone");
        if (jsonArrayzone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("zone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `zone` to be an array in the JSON string but got `%s`", jsonObj.get("zone").toString()));
          }

          // validate the optional field `zone` (array)
          for (int i = 0; i < jsonArrayzone.size(); i++) {
            Zone.validateJsonElement(jsonArrayzone.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerVersion>() {
           @Override
           public void write(JsonWriter out, ContainerVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerVersion
   * @throws IOException if the JSON string is invalid with respect to ContainerVersion
   */
  public static ContainerVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerVersion.class);
  }

  /**
   * Convert an instance of ContainerVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

