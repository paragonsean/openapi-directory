/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuiltInVariable;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.CustomTemplate;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.GtagConfig;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Transformation;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.Variable;
import org.openapitools.client.model.Zone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A workspace entity that may represent a tag, trigger, variable, or folder in addition to its status in the workspace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Entity {
  public static final String SERIALIZED_NAME_BUILT_IN_VARIABLE = "builtInVariable";
  @SerializedName(SERIALIZED_NAME_BUILT_IN_VARIABLE)
  private BuiltInVariable builtInVariable;

  /**
   * Represents how the entity has been changed in the workspace.
   */
  @JsonAdapter(ChangeStatusEnum.Adapter.class)
  public enum ChangeStatusEnum {
    CHANGE_STATUS_UNSPECIFIED("changeStatusUnspecified"),
    
    NONE("none"),
    
    ADDED("added"),
    
    DELETED("deleted"),
    
    UPDATED("updated");

    private String value;

    ChangeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeStatusEnum fromValue(String value) {
      for (ChangeStatusEnum b : ChangeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_STATUS = "changeStatus";
  @SerializedName(SERIALIZED_NAME_CHANGE_STATUS)
  private ChangeStatusEnum changeStatus;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private Client client;

  public static final String SERIALIZED_NAME_CUSTOM_TEMPLATE = "customTemplate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TEMPLATE)
  private CustomTemplate customTemplate;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private Folder folder;

  public static final String SERIALIZED_NAME_GTAG_CONFIG = "gtagConfig";
  @SerializedName(SERIALIZED_NAME_GTAG_CONFIG)
  private GtagConfig gtagConfig;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private Tag tag;

  public static final String SERIALIZED_NAME_TRANSFORMATION = "transformation";
  @SerializedName(SERIALIZED_NAME_TRANSFORMATION)
  private Transformation transformation;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private Trigger trigger;

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  private Variable variable;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private Zone zone;

  public Entity() {
  }

  public Entity builtInVariable(BuiltInVariable builtInVariable) {
    this.builtInVariable = builtInVariable;
    return this;
  }

  /**
   * Get builtInVariable
   * @return builtInVariable
   */
  @javax.annotation.Nullable
  public BuiltInVariable getBuiltInVariable() {
    return builtInVariable;
  }

  public void setBuiltInVariable(BuiltInVariable builtInVariable) {
    this.builtInVariable = builtInVariable;
  }


  public Entity changeStatus(ChangeStatusEnum changeStatus) {
    this.changeStatus = changeStatus;
    return this;
  }

  /**
   * Represents how the entity has been changed in the workspace.
   * @return changeStatus
   */
  @javax.annotation.Nullable
  public ChangeStatusEnum getChangeStatus() {
    return changeStatus;
  }

  public void setChangeStatus(ChangeStatusEnum changeStatus) {
    this.changeStatus = changeStatus;
  }


  public Entity client(Client client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public Client getClient() {
    return client;
  }

  public void setClient(Client client) {
    this.client = client;
  }


  public Entity customTemplate(CustomTemplate customTemplate) {
    this.customTemplate = customTemplate;
    return this;
  }

  /**
   * Get customTemplate
   * @return customTemplate
   */
  @javax.annotation.Nullable
  public CustomTemplate getCustomTemplate() {
    return customTemplate;
  }

  public void setCustomTemplate(CustomTemplate customTemplate) {
    this.customTemplate = customTemplate;
  }


  public Entity folder(Folder folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * @return folder
   */
  @javax.annotation.Nullable
  public Folder getFolder() {
    return folder;
  }

  public void setFolder(Folder folder) {
    this.folder = folder;
  }


  public Entity gtagConfig(GtagConfig gtagConfig) {
    this.gtagConfig = gtagConfig;
    return this;
  }

  /**
   * Get gtagConfig
   * @return gtagConfig
   */
  @javax.annotation.Nullable
  public GtagConfig getGtagConfig() {
    return gtagConfig;
  }

  public void setGtagConfig(GtagConfig gtagConfig) {
    this.gtagConfig = gtagConfig;
  }


  public Entity tag(Tag tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nullable
  public Tag getTag() {
    return tag;
  }

  public void setTag(Tag tag) {
    this.tag = tag;
  }


  public Entity transformation(Transformation transformation) {
    this.transformation = transformation;
    return this;
  }

  /**
   * Get transformation
   * @return transformation
   */
  @javax.annotation.Nullable
  public Transformation getTransformation() {
    return transformation;
  }

  public void setTransformation(Transformation transformation) {
    this.transformation = transformation;
  }


  public Entity trigger(Trigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public Trigger getTrigger() {
    return trigger;
  }

  public void setTrigger(Trigger trigger) {
    this.trigger = trigger;
  }


  public Entity variable(Variable variable) {
    this.variable = variable;
    return this;
  }

  /**
   * Get variable
   * @return variable
   */
  @javax.annotation.Nullable
  public Variable getVariable() {
    return variable;
  }

  public void setVariable(Variable variable) {
    this.variable = variable;
  }


  public Entity zone(Zone zone) {
    this.zone = zone;
    return this;
  }

  /**
   * Get zone
   * @return zone
   */
  @javax.annotation.Nullable
  public Zone getZone() {
    return zone;
  }

  public void setZone(Zone zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entity entity = (Entity) o;
    return Objects.equals(this.builtInVariable, entity.builtInVariable) &&
        Objects.equals(this.changeStatus, entity.changeStatus) &&
        Objects.equals(this.client, entity.client) &&
        Objects.equals(this.customTemplate, entity.customTemplate) &&
        Objects.equals(this.folder, entity.folder) &&
        Objects.equals(this.gtagConfig, entity.gtagConfig) &&
        Objects.equals(this.tag, entity.tag) &&
        Objects.equals(this.transformation, entity.transformation) &&
        Objects.equals(this.trigger, entity.trigger) &&
        Objects.equals(this.variable, entity.variable) &&
        Objects.equals(this.zone, entity.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(builtInVariable, changeStatus, client, customTemplate, folder, gtagConfig, tag, transformation, trigger, variable, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entity {\n");
    sb.append("    builtInVariable: ").append(toIndentedString(builtInVariable)).append("\n");
    sb.append("    changeStatus: ").append(toIndentedString(changeStatus)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    customTemplate: ").append(toIndentedString(customTemplate)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    gtagConfig: ").append(toIndentedString(gtagConfig)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    transformation: ").append(toIndentedString(transformation)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("builtInVariable");
    openapiFields.add("changeStatus");
    openapiFields.add("client");
    openapiFields.add("customTemplate");
    openapiFields.add("folder");
    openapiFields.add("gtagConfig");
    openapiFields.add("tag");
    openapiFields.add("transformation");
    openapiFields.add("trigger");
    openapiFields.add("variable");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Entity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Entity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Entity is not found in the empty JSON string", Entity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Entity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Entity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `builtInVariable`
      if (jsonObj.get("builtInVariable") != null && !jsonObj.get("builtInVariable").isJsonNull()) {
        BuiltInVariable.validateJsonElement(jsonObj.get("builtInVariable"));
      }
      if ((jsonObj.get("changeStatus") != null && !jsonObj.get("changeStatus").isJsonNull()) && !jsonObj.get("changeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeStatus").toString()));
      }
      // validate the optional field `changeStatus`
      if (jsonObj.get("changeStatus") != null && !jsonObj.get("changeStatus").isJsonNull()) {
        ChangeStatusEnum.validateJsonElement(jsonObj.get("changeStatus"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        Client.validateJsonElement(jsonObj.get("client"));
      }
      // validate the optional field `customTemplate`
      if (jsonObj.get("customTemplate") != null && !jsonObj.get("customTemplate").isJsonNull()) {
        CustomTemplate.validateJsonElement(jsonObj.get("customTemplate"));
      }
      // validate the optional field `folder`
      if (jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) {
        Folder.validateJsonElement(jsonObj.get("folder"));
      }
      // validate the optional field `gtagConfig`
      if (jsonObj.get("gtagConfig") != null && !jsonObj.get("gtagConfig").isJsonNull()) {
        GtagConfig.validateJsonElement(jsonObj.get("gtagConfig"));
      }
      // validate the optional field `tag`
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        Tag.validateJsonElement(jsonObj.get("tag"));
      }
      // validate the optional field `transformation`
      if (jsonObj.get("transformation") != null && !jsonObj.get("transformation").isJsonNull()) {
        Transformation.validateJsonElement(jsonObj.get("transformation"));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        Trigger.validateJsonElement(jsonObj.get("trigger"));
      }
      // validate the optional field `variable`
      if (jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) {
        Variable.validateJsonElement(jsonObj.get("variable"));
      }
      // validate the optional field `zone`
      if (jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) {
        Zone.validateJsonElement(jsonObj.get("zone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Entity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Entity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Entity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Entity.class));

       return (TypeAdapter<T>) new TypeAdapter<Entity>() {
           @Override
           public void write(JsonWriter out, Entity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Entity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Entity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Entity
   * @throws IOException if the JSON string is invalid with respect to Entity
   */
  public static Entity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Entity.class);
  }

  /**
   * Convert an instance of Entity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

