/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Parameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google tag configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GtagConfig {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_GTAG_CONFIG_ID = "gtagConfigId";
  @SerializedName(SERIALIZED_NAME_GTAG_CONFIG_ID)
  private String gtagConfigId;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private List<Parameter> parameter = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TAG_MANAGER_URL = "tagManagerUrl";
  @SerializedName(SERIALIZED_NAME_TAG_MANAGER_URL)
  private String tagManagerUrl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public GtagConfig() {
  }

  public GtagConfig accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Google tag account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public GtagConfig containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * Google tag container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public GtagConfig fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the Google tag config as computed at storage time. This value is recomputed whenever the config is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public GtagConfig gtagConfigId(String gtagConfigId) {
    this.gtagConfigId = gtagConfigId;
    return this;
  }

  /**
   * The ID uniquely identifies the Google tag config.
   * @return gtagConfigId
   */
  @javax.annotation.Nullable
  public String getGtagConfigId() {
    return gtagConfigId;
  }

  public void setGtagConfigId(String gtagConfigId) {
    this.gtagConfigId = gtagConfigId;
  }


  public GtagConfig parameter(List<Parameter> parameter) {
    this.parameter = parameter;
    return this;
  }

  public GtagConfig addParameterItem(Parameter parameterItem) {
    if (this.parameter == null) {
      this.parameter = new ArrayList<>();
    }
    this.parameter.add(parameterItem);
    return this;
  }

  /**
   * The Google tag config&#39;s parameters. @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update
   * @return parameter
   */
  @javax.annotation.Nullable
  public List<Parameter> getParameter() {
    return parameter;
  }

  public void setParameter(List<Parameter> parameter) {
    this.parameter = parameter;
  }


  public GtagConfig path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Google tag config&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public GtagConfig tagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return tagManagerUrl
   */
  @javax.annotation.Nullable
  public String getTagManagerUrl() {
    return tagManagerUrl;
  }

  public void setTagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
  }


  public GtagConfig type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public GtagConfig workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GtagConfig gtagConfig = (GtagConfig) o;
    return Objects.equals(this.accountId, gtagConfig.accountId) &&
        Objects.equals(this.containerId, gtagConfig.containerId) &&
        Objects.equals(this.fingerprint, gtagConfig.fingerprint) &&
        Objects.equals(this.gtagConfigId, gtagConfig.gtagConfigId) &&
        Objects.equals(this.parameter, gtagConfig.parameter) &&
        Objects.equals(this.path, gtagConfig.path) &&
        Objects.equals(this.tagManagerUrl, gtagConfig.tagManagerUrl) &&
        Objects.equals(this.type, gtagConfig.type) &&
        Objects.equals(this.workspaceId, gtagConfig.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, containerId, fingerprint, gtagConfigId, parameter, path, tagManagerUrl, type, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GtagConfig {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    gtagConfigId: ").append(toIndentedString(gtagConfigId)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    tagManagerUrl: ").append(toIndentedString(tagManagerUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("containerId");
    openapiFields.add("fingerprint");
    openapiFields.add("gtagConfigId");
    openapiFields.add("parameter");
    openapiFields.add("path");
    openapiFields.add("tagManagerUrl");
    openapiFields.add("type");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GtagConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GtagConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GtagConfig is not found in the empty JSON string", GtagConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GtagConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GtagConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("gtagConfigId") != null && !jsonObj.get("gtagConfigId").isJsonNull()) && !jsonObj.get("gtagConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtagConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtagConfigId").toString()));
      }
      if (jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) {
        JsonArray jsonArrayparameter = jsonObj.getAsJsonArray("parameter");
        if (jsonArrayparameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameter` to be an array in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
          }

          // validate the optional field `parameter` (array)
          for (int i = 0; i < jsonArrayparameter.size(); i++) {
            Parameter.validateJsonElement(jsonArrayparameter.get(i));
          };
        }
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("tagManagerUrl") != null && !jsonObj.get("tagManagerUrl").isJsonNull()) && !jsonObj.get("tagManagerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagManagerUrl").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GtagConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GtagConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GtagConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GtagConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GtagConfig>() {
           @Override
           public void write(JsonWriter out, GtagConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GtagConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GtagConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GtagConfig
   * @throws IOException if the JSON string is invalid with respect to GtagConfig
   */
  public static GtagConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GtagConfig.class);
  }

  /**
   * Convert an instance of GtagConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

