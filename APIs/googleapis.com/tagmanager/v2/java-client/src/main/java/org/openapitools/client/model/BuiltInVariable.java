/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Built-in variables are a special category of variables that are pre-created and non-customizable. They provide common functionality like accessing properties of the gtm data layer, monitoring clicks, or accessing elements of a page URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuiltInVariable {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Type of built-in variable. @required.tagmanager.accounts.containers.workspaces.built_in_variable.update @mutable tagmanager.accounts.containers.workspaces.built_in_variable.update
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BUILT_IN_VARIABLE_TYPE_UNSPECIFIED("builtInVariableTypeUnspecified"),
    
    PAGE_URL("pageUrl"),
    
    PAGE_HOSTNAME("pageHostname"),
    
    PAGE_PATH("pagePath"),
    
    REFERRER("referrer"),
    
    EVENT("event"),
    
    CLICK_ELEMENT("clickElement"),
    
    CLICK_CLASSES("clickClasses"),
    
    CLICK_ID("clickId"),
    
    CLICK_TARGET("clickTarget"),
    
    CLICK_URL("clickUrl"),
    
    CLICK_TEXT("clickText"),
    
    FIRST_PARTY_SERVING_URL("firstPartyServingUrl"),
    
    FORM_ELEMENT("formElement"),
    
    FORM_CLASSES("formClasses"),
    
    FORM_ID("formId"),
    
    FORM_TARGET("formTarget"),
    
    FORM_URL("formUrl"),
    
    FORM_TEXT("formText"),
    
    ERROR_MESSAGE("errorMessage"),
    
    ERROR_URL("errorUrl"),
    
    ERROR_LINE("errorLine"),
    
    NEW_HISTORY_URL("newHistoryUrl"),
    
    OLD_HISTORY_URL("oldHistoryUrl"),
    
    NEW_HISTORY_FRAGMENT("newHistoryFragment"),
    
    OLD_HISTORY_FRAGMENT("oldHistoryFragment"),
    
    NEW_HISTORY_STATE("newHistoryState"),
    
    OLD_HISTORY_STATE("oldHistoryState"),
    
    HISTORY_SOURCE("historySource"),
    
    CONTAINER_VERSION("containerVersion"),
    
    DEBUG_MODE("debugMode"),
    
    RANDOM_NUMBER("randomNumber"),
    
    CONTAINER_ID("containerId"),
    
    APP_ID("appId"),
    
    APP_NAME("appName"),
    
    APP_VERSION_CODE("appVersionCode"),
    
    APP_VERSION_NAME("appVersionName"),
    
    LANGUAGE("language"),
    
    OS_VERSION("osVersion"),
    
    PLATFORM("platform"),
    
    SDK_VERSION("sdkVersion"),
    
    DEVICE_NAME("deviceName"),
    
    RESOLUTION("resolution"),
    
    ADVERTISER_ID("advertiserId"),
    
    ADVERTISING_TRACKING_ENABLED("advertisingTrackingEnabled"),
    
    HTML_ID("htmlId"),
    
    ENVIRONMENT_NAME("environmentName"),
    
    AMP_BROWSER_LANGUAGE("ampBrowserLanguage"),
    
    AMP_CANONICAL_PATH("ampCanonicalPath"),
    
    AMP_CANONICAL_URL("ampCanonicalUrl"),
    
    AMP_CANONICAL_HOST("ampCanonicalHost"),
    
    AMP_REFERRER("ampReferrer"),
    
    AMP_TITLE("ampTitle"),
    
    AMP_CLIENT_ID("ampClientId"),
    
    AMP_CLIENT_TIMEZONE("ampClientTimezone"),
    
    AMP_CLIENT_TIMESTAMP("ampClientTimestamp"),
    
    AMP_CLIENT_SCREEN_WIDTH("ampClientScreenWidth"),
    
    AMP_CLIENT_SCREEN_HEIGHT("ampClientScreenHeight"),
    
    AMP_CLIENT_SCROLL_X("ampClientScrollX"),
    
    AMP_CLIENT_SCROLL_Y("ampClientScrollY"),
    
    AMP_CLIENT_MAX_SCROLL_X("ampClientMaxScrollX"),
    
    AMP_CLIENT_MAX_SCROLL_Y("ampClientMaxScrollY"),
    
    AMP_TOTAL_ENGAGED_TIME("ampTotalEngagedTime"),
    
    AMP_PAGE_VIEW_ID("ampPageViewId"),
    
    AMP_PAGE_LOAD_TIME("ampPageLoadTime"),
    
    AMP_PAGE_DOWNLOAD_TIME("ampPageDownloadTime"),
    
    AMP_GTM_EVENT("ampGtmEvent"),
    
    EVENT_NAME("eventName"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN("firebaseEventParameterCampaign"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_ACLID("firebaseEventParameterCampaignAclid"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_ANID("firebaseEventParameterCampaignAnid"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_CLICK_TIMESTAMP("firebaseEventParameterCampaignClickTimestamp"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_CONTENT("firebaseEventParameterCampaignContent"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_CP1("firebaseEventParameterCampaignCp1"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_GCLID("firebaseEventParameterCampaignGclid"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_SOURCE("firebaseEventParameterCampaignSource"),
    
    FIREBASE_EVENT_PARAMETER_CAMPAIGN_TERM("firebaseEventParameterCampaignTerm"),
    
    FIREBASE_EVENT_PARAMETER_CURRENCY("firebaseEventParameterCurrency"),
    
    FIREBASE_EVENT_PARAMETER_DYNAMIC_LINK_ACCEPT_TIME("firebaseEventParameterDynamicLinkAcceptTime"),
    
    FIREBASE_EVENT_PARAMETER_DYNAMIC_LINK_LINKID("firebaseEventParameterDynamicLinkLinkid"),
    
    FIREBASE_EVENT_PARAMETER_NOTIFICATION_MESSAGE_DEVICE_TIME("firebaseEventParameterNotificationMessageDeviceTime"),
    
    FIREBASE_EVENT_PARAMETER_NOTIFICATION_MESSAGE_ID("firebaseEventParameterNotificationMessageId"),
    
    FIREBASE_EVENT_PARAMETER_NOTIFICATION_MESSAGE_NAME("firebaseEventParameterNotificationMessageName"),
    
    FIREBASE_EVENT_PARAMETER_NOTIFICATION_MESSAGE_TIME("firebaseEventParameterNotificationMessageTime"),
    
    FIREBASE_EVENT_PARAMETER_NOTIFICATION_TOPIC("firebaseEventParameterNotificationTopic"),
    
    FIREBASE_EVENT_PARAMETER_PREVIOUS_APP_VERSION("firebaseEventParameterPreviousAppVersion"),
    
    FIREBASE_EVENT_PARAMETER_PREVIOUS_OS_VERSION("firebaseEventParameterPreviousOsVersion"),
    
    FIREBASE_EVENT_PARAMETER_PRICE("firebaseEventParameterPrice"),
    
    FIREBASE_EVENT_PARAMETER_PRODUCT_ID("firebaseEventParameterProductId"),
    
    FIREBASE_EVENT_PARAMETER_QUANTITY("firebaseEventParameterQuantity"),
    
    FIREBASE_EVENT_PARAMETER_VALUE("firebaseEventParameterValue"),
    
    VIDEO_PROVIDER("videoProvider"),
    
    VIDEO_URL("videoUrl"),
    
    VIDEO_TITLE("videoTitle"),
    
    VIDEO_DURATION("videoDuration"),
    
    VIDEO_PERCENT("videoPercent"),
    
    VIDEO_VISIBLE("videoVisible"),
    
    VIDEO_STATUS("videoStatus"),
    
    VIDEO_CURRENT_TIME("videoCurrentTime"),
    
    SCROLL_DEPTH_THRESHOLD("scrollDepthThreshold"),
    
    SCROLL_DEPTH_UNITS("scrollDepthUnits"),
    
    SCROLL_DEPTH_DIRECTION("scrollDepthDirection"),
    
    ELEMENT_VISIBILITY_RATIO("elementVisibilityRatio"),
    
    ELEMENT_VISIBILITY_TIME("elementVisibilityTime"),
    
    ELEMENT_VISIBILITY_FIRST_TIME("elementVisibilityFirstTime"),
    
    ELEMENT_VISIBILITY_RECENT_TIME("elementVisibilityRecentTime"),
    
    REQUEST_PATH("requestPath"),
    
    REQUEST_METHOD("requestMethod"),
    
    CLIENT_NAME("clientName"),
    
    QUERY_STRING("queryString"),
    
    SERVER_PAGE_LOCATION_URL("serverPageLocationUrl"),
    
    SERVER_PAGE_LOCATION_PATH("serverPageLocationPath"),
    
    SERVER_PAGE_LOCATION_HOSTNAME("serverPageLocationHostname"),
    
    VISITOR_REGION("visitorRegion");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public BuiltInVariable() {
  }

  public BuiltInVariable accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public BuiltInVariable containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public BuiltInVariable name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the built-in variable to be used to refer to the built-in variable.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BuiltInVariable path(String path) {
    this.path = path;
    return this;
  }

  /**
   * GTM BuiltInVariable&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public BuiltInVariable type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of built-in variable. @required.tagmanager.accounts.containers.workspaces.built_in_variable.update @mutable tagmanager.accounts.containers.workspaces.built_in_variable.update
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BuiltInVariable workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * GTM Workspace ID.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuiltInVariable builtInVariable = (BuiltInVariable) o;
    return Objects.equals(this.accountId, builtInVariable.accountId) &&
        Objects.equals(this.containerId, builtInVariable.containerId) &&
        Objects.equals(this.name, builtInVariable.name) &&
        Objects.equals(this.path, builtInVariable.path) &&
        Objects.equals(this.type, builtInVariable.type) &&
        Objects.equals(this.workspaceId, builtInVariable.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, containerId, name, path, type, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuiltInVariable {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("containerId");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("type");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuiltInVariable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuiltInVariable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuiltInVariable is not found in the empty JSON string", BuiltInVariable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuiltInVariable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuiltInVariable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuiltInVariable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuiltInVariable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuiltInVariable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuiltInVariable.class));

       return (TypeAdapter<T>) new TypeAdapter<BuiltInVariable>() {
           @Override
           public void write(JsonWriter out, BuiltInVariable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuiltInVariable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuiltInVariable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuiltInVariable
   * @throws IOException if the JSON string is invalid with respect to BuiltInVariable
   */
  public static BuiltInVariable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuiltInVariable.class);
  }

  /**
   * Convert an instance of BuiltInVariable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

