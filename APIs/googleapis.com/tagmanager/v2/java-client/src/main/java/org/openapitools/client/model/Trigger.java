/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Condition;
import org.openapitools.client.model.Parameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Trigger
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Trigger {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AUTO_EVENT_FILTER = "autoEventFilter";
  @SerializedName(SERIALIZED_NAME_AUTO_EVENT_FILTER)
  private List<Condition> autoEventFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_VALIDATION = "checkValidation";
  @SerializedName(SERIALIZED_NAME_CHECK_VALIDATION)
  private Parameter checkValidation;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_CONTINUOUS_TIME_MIN_MILLISECONDS = "continuousTimeMinMilliseconds";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS_TIME_MIN_MILLISECONDS)
  private Parameter continuousTimeMinMilliseconds;

  public static final String SERIALIZED_NAME_CUSTOM_EVENT_FILTER = "customEventFilter";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EVENT_FILTER)
  private List<Condition> customEventFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private Parameter eventName;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private List<Condition> filter = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_HORIZONTAL_SCROLL_PERCENTAGE_LIST = "horizontalScrollPercentageList";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_SCROLL_PERCENTAGE_LIST)
  private Parameter horizontalScrollPercentageList;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Parameter interval;

  public static final String SERIALIZED_NAME_INTERVAL_SECONDS = "intervalSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_SECONDS)
  private Parameter intervalSeconds;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Parameter limit;

  public static final String SERIALIZED_NAME_MAX_TIMER_LENGTH_SECONDS = "maxTimerLengthSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_TIMER_LENGTH_SECONDS)
  private Parameter maxTimerLengthSeconds;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private List<Parameter> parameter = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parentFolderId";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private Parameter selector;

  public static final String SERIALIZED_NAME_TAG_MANAGER_URL = "tagManagerUrl";
  @SerializedName(SERIALIZED_NAME_TAG_MANAGER_URL)
  private String tagManagerUrl;

  public static final String SERIALIZED_NAME_TOTAL_TIME_MIN_MILLISECONDS = "totalTimeMinMilliseconds";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME_MIN_MILLISECONDS)
  private Parameter totalTimeMinMilliseconds;

  public static final String SERIALIZED_NAME_TRIGGER_ID = "triggerId";
  @SerializedName(SERIALIZED_NAME_TRIGGER_ID)
  private String triggerId;

  /**
   * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EVENT_TYPE_UNSPECIFIED("eventTypeUnspecified"),
    
    PAGEVIEW("pageview"),
    
    DOM_READY("domReady"),
    
    WINDOW_LOADED("windowLoaded"),
    
    CUSTOM_EVENT("customEvent"),
    
    TRIGGER_GROUP("triggerGroup"),
    
    INIT("init"),
    
    CONSENT_INIT("consentInit"),
    
    SERVER_PAGEVIEW("serverPageview"),
    
    ALWAYS("always"),
    
    FIREBASE_APP_EXCEPTION("firebaseAppException"),
    
    FIREBASE_APP_UPDATE("firebaseAppUpdate"),
    
    FIREBASE_CAMPAIGN("firebaseCampaign"),
    
    FIREBASE_FIRST_OPEN("firebaseFirstOpen"),
    
    FIREBASE_IN_APP_PURCHASE("firebaseInAppPurchase"),
    
    FIREBASE_NOTIFICATION_DISMISS("firebaseNotificationDismiss"),
    
    FIREBASE_NOTIFICATION_FOREGROUND("firebaseNotificationForeground"),
    
    FIREBASE_NOTIFICATION_OPEN("firebaseNotificationOpen"),
    
    FIREBASE_NOTIFICATION_RECEIVE("firebaseNotificationReceive"),
    
    FIREBASE_OS_UPDATE("firebaseOsUpdate"),
    
    FIREBASE_SESSION_START("firebaseSessionStart"),
    
    FIREBASE_USER_ENGAGEMENT("firebaseUserEngagement"),
    
    FORM_SUBMISSION("formSubmission"),
    
    CLICK("click"),
    
    LINK_CLICK("linkClick"),
    
    JS_ERROR("jsError"),
    
    HISTORY_CHANGE("historyChange"),
    
    TIMER("timer"),
    
    AMP_CLICK("ampClick"),
    
    AMP_TIMER("ampTimer"),
    
    AMP_SCROLL("ampScroll"),
    
    AMP_VISIBILITY("ampVisibility"),
    
    YOU_TUBE_VIDEO("youTubeVideo"),
    
    SCROLL_DEPTH("scrollDepth"),
    
    ELEMENT_VISIBILITY("elementVisibility");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIQUE_TRIGGER_ID = "uniqueTriggerId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_TRIGGER_ID)
  private Parameter uniqueTriggerId;

  public static final String SERIALIZED_NAME_VERTICAL_SCROLL_PERCENTAGE_LIST = "verticalScrollPercentageList";
  @SerializedName(SERIALIZED_NAME_VERTICAL_SCROLL_PERCENTAGE_LIST)
  private Parameter verticalScrollPercentageList;

  public static final String SERIALIZED_NAME_VISIBILITY_SELECTOR = "visibilitySelector";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_SELECTOR)
  private Parameter visibilitySelector;

  public static final String SERIALIZED_NAME_VISIBLE_PERCENTAGE_MAX = "visiblePercentageMax";
  @SerializedName(SERIALIZED_NAME_VISIBLE_PERCENTAGE_MAX)
  private Parameter visiblePercentageMax;

  public static final String SERIALIZED_NAME_VISIBLE_PERCENTAGE_MIN = "visiblePercentageMin";
  @SerializedName(SERIALIZED_NAME_VISIBLE_PERCENTAGE_MIN)
  private Parameter visiblePercentageMin;

  public static final String SERIALIZED_NAME_WAIT_FOR_TAGS = "waitForTags";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_TAGS)
  private Parameter waitForTags;

  public static final String SERIALIZED_NAME_WAIT_FOR_TAGS_TIMEOUT = "waitForTagsTimeout";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_TAGS_TIMEOUT)
  private Parameter waitForTagsTimeout;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public Trigger() {
  }

  public Trigger accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Trigger autoEventFilter(List<Condition> autoEventFilter) {
    this.autoEventFilter = autoEventFilter;
    return this;
  }

  public Trigger addAutoEventFilterItem(Condition autoEventFilterItem) {
    if (this.autoEventFilter == null) {
      this.autoEventFilter = new ArrayList<>();
    }
    this.autoEventFilter.add(autoEventFilterItem);
    return this;
  }

  /**
   * Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return autoEventFilter
   */
  @javax.annotation.Nullable
  public List<Condition> getAutoEventFilter() {
    return autoEventFilter;
  }

  public void setAutoEventFilter(List<Condition> autoEventFilter) {
    this.autoEventFilter = autoEventFilter;
  }


  public Trigger checkValidation(Parameter checkValidation) {
    this.checkValidation = checkValidation;
    return this;
  }

  /**
   * Get checkValidation
   * @return checkValidation
   */
  @javax.annotation.Nullable
  public Parameter getCheckValidation() {
    return checkValidation;
  }

  public void setCheckValidation(Parameter checkValidation) {
    this.checkValidation = checkValidation;
  }


  public Trigger containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Trigger continuousTimeMinMilliseconds(Parameter continuousTimeMinMilliseconds) {
    this.continuousTimeMinMilliseconds = continuousTimeMinMilliseconds;
    return this;
  }

  /**
   * Get continuousTimeMinMilliseconds
   * @return continuousTimeMinMilliseconds
   */
  @javax.annotation.Nullable
  public Parameter getContinuousTimeMinMilliseconds() {
    return continuousTimeMinMilliseconds;
  }

  public void setContinuousTimeMinMilliseconds(Parameter continuousTimeMinMilliseconds) {
    this.continuousTimeMinMilliseconds = continuousTimeMinMilliseconds;
  }


  public Trigger customEventFilter(List<Condition> customEventFilter) {
    this.customEventFilter = customEventFilter;
    return this;
  }

  public Trigger addCustomEventFilterItem(Condition customEventFilterItem) {
    if (this.customEventFilter == null) {
      this.customEventFilter = new ArrayList<>();
    }
    this.customEventFilter.add(customEventFilterItem);
    return this;
  }

  /**
   * Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return customEventFilter
   */
  @javax.annotation.Nullable
  public List<Condition> getCustomEventFilter() {
    return customEventFilter;
  }

  public void setCustomEventFilter(List<Condition> customEventFilter) {
    this.customEventFilter = customEventFilter;
  }


  public Trigger eventName(Parameter eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public Parameter getEventName() {
    return eventName;
  }

  public void setEventName(Parameter eventName) {
    this.eventName = eventName;
  }


  public Trigger filter(List<Condition> filter) {
    this.filter = filter;
    return this;
  }

  public Trigger addFilterItem(Condition filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

  /**
   * The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return filter
   */
  @javax.annotation.Nullable
  public List<Condition> getFilter() {
    return filter;
  }

  public void setFilter(List<Condition> filter) {
    this.filter = filter;
  }


  public Trigger fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Trigger horizontalScrollPercentageList(Parameter horizontalScrollPercentageList) {
    this.horizontalScrollPercentageList = horizontalScrollPercentageList;
    return this;
  }

  /**
   * Get horizontalScrollPercentageList
   * @return horizontalScrollPercentageList
   */
  @javax.annotation.Nullable
  public Parameter getHorizontalScrollPercentageList() {
    return horizontalScrollPercentageList;
  }

  public void setHorizontalScrollPercentageList(Parameter horizontalScrollPercentageList) {
    this.horizontalScrollPercentageList = horizontalScrollPercentageList;
  }


  public Trigger interval(Parameter interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nullable
  public Parameter getInterval() {
    return interval;
  }

  public void setInterval(Parameter interval) {
    this.interval = interval;
  }


  public Trigger intervalSeconds(Parameter intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
    return this;
  }

  /**
   * Get intervalSeconds
   * @return intervalSeconds
   */
  @javax.annotation.Nullable
  public Parameter getIntervalSeconds() {
    return intervalSeconds;
  }

  public void setIntervalSeconds(Parameter intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
  }


  public Trigger limit(Parameter limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nullable
  public Parameter getLimit() {
    return limit;
  }

  public void setLimit(Parameter limit) {
    this.limit = limit;
  }


  public Trigger maxTimerLengthSeconds(Parameter maxTimerLengthSeconds) {
    this.maxTimerLengthSeconds = maxTimerLengthSeconds;
    return this;
  }

  /**
   * Get maxTimerLengthSeconds
   * @return maxTimerLengthSeconds
   */
  @javax.annotation.Nullable
  public Parameter getMaxTimerLengthSeconds() {
    return maxTimerLengthSeconds;
  }

  public void setMaxTimerLengthSeconds(Parameter maxTimerLengthSeconds) {
    this.maxTimerLengthSeconds = maxTimerLengthSeconds;
  }


  public Trigger name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Trigger display name. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Trigger notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes on how to apply this trigger in the container. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Trigger parameter(List<Parameter> parameter) {
    this.parameter = parameter;
    return this;
  }

  public Trigger addParameterItem(Parameter parameterItem) {
    if (this.parameter == null) {
      this.parameter = new ArrayList<>();
    }
    this.parameter.add(parameterItem);
    return this;
  }

  /**
   * Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return parameter
   */
  @javax.annotation.Nullable
  public List<Parameter> getParameter() {
    return parameter;
  }

  public void setParameter(List<Parameter> parameter) {
    this.parameter = parameter;
  }


  public Trigger parentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * Parent folder id.
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public Trigger path(String path) {
    this.path = path;
    return this;
  }

  /**
   * GTM Trigger&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Trigger selector(Parameter selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Get selector
   * @return selector
   */
  @javax.annotation.Nullable
  public Parameter getSelector() {
    return selector;
  }

  public void setSelector(Parameter selector) {
    this.selector = selector;
  }


  public Trigger tagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return tagManagerUrl
   */
  @javax.annotation.Nullable
  public String getTagManagerUrl() {
    return tagManagerUrl;
  }

  public void setTagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
  }


  public Trigger totalTimeMinMilliseconds(Parameter totalTimeMinMilliseconds) {
    this.totalTimeMinMilliseconds = totalTimeMinMilliseconds;
    return this;
  }

  /**
   * Get totalTimeMinMilliseconds
   * @return totalTimeMinMilliseconds
   */
  @javax.annotation.Nullable
  public Parameter getTotalTimeMinMilliseconds() {
    return totalTimeMinMilliseconds;
  }

  public void setTotalTimeMinMilliseconds(Parameter totalTimeMinMilliseconds) {
    this.totalTimeMinMilliseconds = totalTimeMinMilliseconds;
  }


  public Trigger triggerId(String triggerId) {
    this.triggerId = triggerId;
    return this;
  }

  /**
   * The Trigger ID uniquely identifies the GTM Trigger.
   * @return triggerId
   */
  @javax.annotation.Nullable
  public String getTriggerId() {
    return triggerId;
  }

  public void setTriggerId(String triggerId) {
    this.triggerId = triggerId;
  }


  public Trigger type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Trigger uniqueTriggerId(Parameter uniqueTriggerId) {
    this.uniqueTriggerId = uniqueTriggerId;
    return this;
  }

  /**
   * Get uniqueTriggerId
   * @return uniqueTriggerId
   */
  @javax.annotation.Nullable
  public Parameter getUniqueTriggerId() {
    return uniqueTriggerId;
  }

  public void setUniqueTriggerId(Parameter uniqueTriggerId) {
    this.uniqueTriggerId = uniqueTriggerId;
  }


  public Trigger verticalScrollPercentageList(Parameter verticalScrollPercentageList) {
    this.verticalScrollPercentageList = verticalScrollPercentageList;
    return this;
  }

  /**
   * Get verticalScrollPercentageList
   * @return verticalScrollPercentageList
   */
  @javax.annotation.Nullable
  public Parameter getVerticalScrollPercentageList() {
    return verticalScrollPercentageList;
  }

  public void setVerticalScrollPercentageList(Parameter verticalScrollPercentageList) {
    this.verticalScrollPercentageList = verticalScrollPercentageList;
  }


  public Trigger visibilitySelector(Parameter visibilitySelector) {
    this.visibilitySelector = visibilitySelector;
    return this;
  }

  /**
   * Get visibilitySelector
   * @return visibilitySelector
   */
  @javax.annotation.Nullable
  public Parameter getVisibilitySelector() {
    return visibilitySelector;
  }

  public void setVisibilitySelector(Parameter visibilitySelector) {
    this.visibilitySelector = visibilitySelector;
  }


  public Trigger visiblePercentageMax(Parameter visiblePercentageMax) {
    this.visiblePercentageMax = visiblePercentageMax;
    return this;
  }

  /**
   * Get visiblePercentageMax
   * @return visiblePercentageMax
   */
  @javax.annotation.Nullable
  public Parameter getVisiblePercentageMax() {
    return visiblePercentageMax;
  }

  public void setVisiblePercentageMax(Parameter visiblePercentageMax) {
    this.visiblePercentageMax = visiblePercentageMax;
  }


  public Trigger visiblePercentageMin(Parameter visiblePercentageMin) {
    this.visiblePercentageMin = visiblePercentageMin;
    return this;
  }

  /**
   * Get visiblePercentageMin
   * @return visiblePercentageMin
   */
  @javax.annotation.Nullable
  public Parameter getVisiblePercentageMin() {
    return visiblePercentageMin;
  }

  public void setVisiblePercentageMin(Parameter visiblePercentageMin) {
    this.visiblePercentageMin = visiblePercentageMin;
  }


  public Trigger waitForTags(Parameter waitForTags) {
    this.waitForTags = waitForTags;
    return this;
  }

  /**
   * Get waitForTags
   * @return waitForTags
   */
  @javax.annotation.Nullable
  public Parameter getWaitForTags() {
    return waitForTags;
  }

  public void setWaitForTags(Parameter waitForTags) {
    this.waitForTags = waitForTags;
  }


  public Trigger waitForTagsTimeout(Parameter waitForTagsTimeout) {
    this.waitForTagsTimeout = waitForTagsTimeout;
    return this;
  }

  /**
   * Get waitForTagsTimeout
   * @return waitForTagsTimeout
   */
  @javax.annotation.Nullable
  public Parameter getWaitForTagsTimeout() {
    return waitForTagsTimeout;
  }

  public void setWaitForTagsTimeout(Parameter waitForTagsTimeout) {
    this.waitForTagsTimeout = waitForTagsTimeout;
  }


  public Trigger workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * GTM Workspace ID.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Trigger trigger = (Trigger) o;
    return Objects.equals(this.accountId, trigger.accountId) &&
        Objects.equals(this.autoEventFilter, trigger.autoEventFilter) &&
        Objects.equals(this.checkValidation, trigger.checkValidation) &&
        Objects.equals(this.containerId, trigger.containerId) &&
        Objects.equals(this.continuousTimeMinMilliseconds, trigger.continuousTimeMinMilliseconds) &&
        Objects.equals(this.customEventFilter, trigger.customEventFilter) &&
        Objects.equals(this.eventName, trigger.eventName) &&
        Objects.equals(this.filter, trigger.filter) &&
        Objects.equals(this.fingerprint, trigger.fingerprint) &&
        Objects.equals(this.horizontalScrollPercentageList, trigger.horizontalScrollPercentageList) &&
        Objects.equals(this.interval, trigger.interval) &&
        Objects.equals(this.intervalSeconds, trigger.intervalSeconds) &&
        Objects.equals(this.limit, trigger.limit) &&
        Objects.equals(this.maxTimerLengthSeconds, trigger.maxTimerLengthSeconds) &&
        Objects.equals(this.name, trigger.name) &&
        Objects.equals(this.notes, trigger.notes) &&
        Objects.equals(this.parameter, trigger.parameter) &&
        Objects.equals(this.parentFolderId, trigger.parentFolderId) &&
        Objects.equals(this.path, trigger.path) &&
        Objects.equals(this.selector, trigger.selector) &&
        Objects.equals(this.tagManagerUrl, trigger.tagManagerUrl) &&
        Objects.equals(this.totalTimeMinMilliseconds, trigger.totalTimeMinMilliseconds) &&
        Objects.equals(this.triggerId, trigger.triggerId) &&
        Objects.equals(this.type, trigger.type) &&
        Objects.equals(this.uniqueTriggerId, trigger.uniqueTriggerId) &&
        Objects.equals(this.verticalScrollPercentageList, trigger.verticalScrollPercentageList) &&
        Objects.equals(this.visibilitySelector, trigger.visibilitySelector) &&
        Objects.equals(this.visiblePercentageMax, trigger.visiblePercentageMax) &&
        Objects.equals(this.visiblePercentageMin, trigger.visiblePercentageMin) &&
        Objects.equals(this.waitForTags, trigger.waitForTags) &&
        Objects.equals(this.waitForTagsTimeout, trigger.waitForTagsTimeout) &&
        Objects.equals(this.workspaceId, trigger.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, autoEventFilter, checkValidation, containerId, continuousTimeMinMilliseconds, customEventFilter, eventName, filter, fingerprint, horizontalScrollPercentageList, interval, intervalSeconds, limit, maxTimerLengthSeconds, name, notes, parameter, parentFolderId, path, selector, tagManagerUrl, totalTimeMinMilliseconds, triggerId, type, uniqueTriggerId, verticalScrollPercentageList, visibilitySelector, visiblePercentageMax, visiblePercentageMin, waitForTags, waitForTagsTimeout, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Trigger {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    autoEventFilter: ").append(toIndentedString(autoEventFilter)).append("\n");
    sb.append("    checkValidation: ").append(toIndentedString(checkValidation)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    continuousTimeMinMilliseconds: ").append(toIndentedString(continuousTimeMinMilliseconds)).append("\n");
    sb.append("    customEventFilter: ").append(toIndentedString(customEventFilter)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    horizontalScrollPercentageList: ").append(toIndentedString(horizontalScrollPercentageList)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalSeconds: ").append(toIndentedString(intervalSeconds)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    maxTimerLengthSeconds: ").append(toIndentedString(maxTimerLengthSeconds)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    tagManagerUrl: ").append(toIndentedString(tagManagerUrl)).append("\n");
    sb.append("    totalTimeMinMilliseconds: ").append(toIndentedString(totalTimeMinMilliseconds)).append("\n");
    sb.append("    triggerId: ").append(toIndentedString(triggerId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uniqueTriggerId: ").append(toIndentedString(uniqueTriggerId)).append("\n");
    sb.append("    verticalScrollPercentageList: ").append(toIndentedString(verticalScrollPercentageList)).append("\n");
    sb.append("    visibilitySelector: ").append(toIndentedString(visibilitySelector)).append("\n");
    sb.append("    visiblePercentageMax: ").append(toIndentedString(visiblePercentageMax)).append("\n");
    sb.append("    visiblePercentageMin: ").append(toIndentedString(visiblePercentageMin)).append("\n");
    sb.append("    waitForTags: ").append(toIndentedString(waitForTags)).append("\n");
    sb.append("    waitForTagsTimeout: ").append(toIndentedString(waitForTagsTimeout)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("autoEventFilter");
    openapiFields.add("checkValidation");
    openapiFields.add("containerId");
    openapiFields.add("continuousTimeMinMilliseconds");
    openapiFields.add("customEventFilter");
    openapiFields.add("eventName");
    openapiFields.add("filter");
    openapiFields.add("fingerprint");
    openapiFields.add("horizontalScrollPercentageList");
    openapiFields.add("interval");
    openapiFields.add("intervalSeconds");
    openapiFields.add("limit");
    openapiFields.add("maxTimerLengthSeconds");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("parameter");
    openapiFields.add("parentFolderId");
    openapiFields.add("path");
    openapiFields.add("selector");
    openapiFields.add("tagManagerUrl");
    openapiFields.add("totalTimeMinMilliseconds");
    openapiFields.add("triggerId");
    openapiFields.add("type");
    openapiFields.add("uniqueTriggerId");
    openapiFields.add("verticalScrollPercentageList");
    openapiFields.add("visibilitySelector");
    openapiFields.add("visiblePercentageMax");
    openapiFields.add("visiblePercentageMin");
    openapiFields.add("waitForTags");
    openapiFields.add("waitForTagsTimeout");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Trigger
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Trigger.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Trigger is not found in the empty JSON string", Trigger.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Trigger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Trigger` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("autoEventFilter") != null && !jsonObj.get("autoEventFilter").isJsonNull()) {
        JsonArray jsonArrayautoEventFilter = jsonObj.getAsJsonArray("autoEventFilter");
        if (jsonArrayautoEventFilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("autoEventFilter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `autoEventFilter` to be an array in the JSON string but got `%s`", jsonObj.get("autoEventFilter").toString()));
          }

          // validate the optional field `autoEventFilter` (array)
          for (int i = 0; i < jsonArrayautoEventFilter.size(); i++) {
            Condition.validateJsonElement(jsonArrayautoEventFilter.get(i));
          };
        }
      }
      // validate the optional field `checkValidation`
      if (jsonObj.get("checkValidation") != null && !jsonObj.get("checkValidation").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("checkValidation"));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      // validate the optional field `continuousTimeMinMilliseconds`
      if (jsonObj.get("continuousTimeMinMilliseconds") != null && !jsonObj.get("continuousTimeMinMilliseconds").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("continuousTimeMinMilliseconds"));
      }
      if (jsonObj.get("customEventFilter") != null && !jsonObj.get("customEventFilter").isJsonNull()) {
        JsonArray jsonArraycustomEventFilter = jsonObj.getAsJsonArray("customEventFilter");
        if (jsonArraycustomEventFilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customEventFilter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customEventFilter` to be an array in the JSON string but got `%s`", jsonObj.get("customEventFilter").toString()));
          }

          // validate the optional field `customEventFilter` (array)
          for (int i = 0; i < jsonArraycustomEventFilter.size(); i++) {
            Condition.validateJsonElement(jsonArraycustomEventFilter.get(i));
          };
        }
      }
      // validate the optional field `eventName`
      if (jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("eventName"));
      }
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        JsonArray jsonArrayfilter = jsonObj.getAsJsonArray("filter");
        if (jsonArrayfilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filter` to be an array in the JSON string but got `%s`", jsonObj.get("filter").toString()));
          }

          // validate the optional field `filter` (array)
          for (int i = 0; i < jsonArrayfilter.size(); i++) {
            Condition.validateJsonElement(jsonArrayfilter.get(i));
          };
        }
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      // validate the optional field `horizontalScrollPercentageList`
      if (jsonObj.get("horizontalScrollPercentageList") != null && !jsonObj.get("horizontalScrollPercentageList").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("horizontalScrollPercentageList"));
      }
      // validate the optional field `interval`
      if (jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("interval"));
      }
      // validate the optional field `intervalSeconds`
      if (jsonObj.get("intervalSeconds") != null && !jsonObj.get("intervalSeconds").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("intervalSeconds"));
      }
      // validate the optional field `limit`
      if (jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("limit"));
      }
      // validate the optional field `maxTimerLengthSeconds`
      if (jsonObj.get("maxTimerLengthSeconds") != null && !jsonObj.get("maxTimerLengthSeconds").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("maxTimerLengthSeconds"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) {
        JsonArray jsonArrayparameter = jsonObj.getAsJsonArray("parameter");
        if (jsonArrayparameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameter` to be an array in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
          }

          // validate the optional field `parameter` (array)
          for (int i = 0; i < jsonArrayparameter.size(); i++) {
            Parameter.validateJsonElement(jsonArrayparameter.get(i));
          };
        }
      }
      if ((jsonObj.get("parentFolderId") != null && !jsonObj.get("parentFolderId").isJsonNull()) && !jsonObj.get("parentFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFolderId").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `selector`
      if (jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("selector"));
      }
      if ((jsonObj.get("tagManagerUrl") != null && !jsonObj.get("tagManagerUrl").isJsonNull()) && !jsonObj.get("tagManagerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagManagerUrl").toString()));
      }
      // validate the optional field `totalTimeMinMilliseconds`
      if (jsonObj.get("totalTimeMinMilliseconds") != null && !jsonObj.get("totalTimeMinMilliseconds").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("totalTimeMinMilliseconds"));
      }
      if ((jsonObj.get("triggerId") != null && !jsonObj.get("triggerId").isJsonNull()) && !jsonObj.get("triggerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `uniqueTriggerId`
      if (jsonObj.get("uniqueTriggerId") != null && !jsonObj.get("uniqueTriggerId").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("uniqueTriggerId"));
      }
      // validate the optional field `verticalScrollPercentageList`
      if (jsonObj.get("verticalScrollPercentageList") != null && !jsonObj.get("verticalScrollPercentageList").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("verticalScrollPercentageList"));
      }
      // validate the optional field `visibilitySelector`
      if (jsonObj.get("visibilitySelector") != null && !jsonObj.get("visibilitySelector").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("visibilitySelector"));
      }
      // validate the optional field `visiblePercentageMax`
      if (jsonObj.get("visiblePercentageMax") != null && !jsonObj.get("visiblePercentageMax").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("visiblePercentageMax"));
      }
      // validate the optional field `visiblePercentageMin`
      if (jsonObj.get("visiblePercentageMin") != null && !jsonObj.get("visiblePercentageMin").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("visiblePercentageMin"));
      }
      // validate the optional field `waitForTags`
      if (jsonObj.get("waitForTags") != null && !jsonObj.get("waitForTags").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("waitForTags"));
      }
      // validate the optional field `waitForTagsTimeout`
      if (jsonObj.get("waitForTagsTimeout") != null && !jsonObj.get("waitForTagsTimeout").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("waitForTagsTimeout"));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Trigger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Trigger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Trigger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Trigger.class));

       return (TypeAdapter<T>) new TypeAdapter<Trigger>() {
           @Override
           public void write(JsonWriter out, Trigger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Trigger read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Trigger given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Trigger
   * @throws IOException if the JSON string is invalid with respect to Trigger
   */
  public static Trigger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Trigger.class);
  }

  /**
   * Convert an instance of Trigger to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

