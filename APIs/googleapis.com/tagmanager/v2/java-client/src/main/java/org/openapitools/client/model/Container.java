/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerFeatures;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Container {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private List<String> domainName = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private ContainerFeatures features;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PUBLIC_ID = "publicId";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ID)
  private String publicId;

  public static final String SERIALIZED_NAME_TAG_IDS = "tagIds";
  @SerializedName(SERIALIZED_NAME_TAG_IDS)
  private List<String> tagIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG_MANAGER_URL = "tagManagerUrl";
  @SerializedName(SERIALIZED_NAME_TAG_MANAGER_URL)
  private String tagManagerUrl;

  public static final String SERIALIZED_NAME_TAGGING_SERVER_URLS = "taggingServerUrls";
  @SerializedName(SERIALIZED_NAME_TAGGING_SERVER_URLS)
  private List<String> taggingServerUrls = new ArrayList<>();

  /**
   * Gets or Sets usageContext
   */
  @JsonAdapter(UsageContextEnum.Adapter.class)
  public enum UsageContextEnum {
    USAGE_CONTEXT_UNSPECIFIED("usageContextUnspecified"),
    
    WEB("web"),
    
    ANDROID("android"),
    
    IOS("ios"),
    
    ANDROID_SDK5("androidSdk5"),
    
    IOS_SDK5("iosSdk5"),
    
    AMP("amp"),
    
    SERVER("server");

    private String value;

    UsageContextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageContextEnum fromValue(String value) {
      for (UsageContextEnum b : UsageContextEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageContextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageContextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageContextEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageContextEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageContextEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE_CONTEXT = "usageContext";
  @SerializedName(SERIALIZED_NAME_USAGE_CONTEXT)
  private List<UsageContextEnum> usageContext = new ArrayList<>();

  public Container() {
  }

  public Container accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Container containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * The Container ID uniquely identifies the GTM Container.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Container domainName(List<String> domainName) {
    this.domainName = domainName;
    return this;
  }

  public Container addDomainNameItem(String domainNameItem) {
    if (this.domainName == null) {
      this.domainName = new ArrayList<>();
    }
    this.domainName.add(domainNameItem);
    return this;
  }

  /**
   * List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
   * @return domainName
   */
  @javax.annotation.Nullable
  public List<String> getDomainName() {
    return domainName;
  }

  public void setDomainName(List<String> domainName) {
    this.domainName = domainName;
  }


  public Container features(ContainerFeatures features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public ContainerFeatures getFeatures() {
    return features;
  }

  public void setFeatures(ContainerFeatures features) {
    this.features = features;
  }


  public Container fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Container name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Container notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Container path(String path) {
    this.path = path;
    return this;
  }

  /**
   * GTM Container&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Container publicId(String publicId) {
    this.publicId = publicId;
    return this;
  }

  /**
   * Container Public ID.
   * @return publicId
   */
  @javax.annotation.Nullable
  public String getPublicId() {
    return publicId;
  }

  public void setPublicId(String publicId) {
    this.publicId = publicId;
  }


  public Container tagIds(List<String> tagIds) {
    this.tagIds = tagIds;
    return this;
  }

  public Container addTagIdsItem(String tagIdsItem) {
    if (this.tagIds == null) {
      this.tagIds = new ArrayList<>();
    }
    this.tagIds.add(tagIdsItem);
    return this;
  }

  /**
   * All Tag IDs that refer to this Container.
   * @return tagIds
   */
  @javax.annotation.Nullable
  public List<String> getTagIds() {
    return tagIds;
  }

  public void setTagIds(List<String> tagIds) {
    this.tagIds = tagIds;
  }


  public Container tagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return tagManagerUrl
   */
  @javax.annotation.Nullable
  public String getTagManagerUrl() {
    return tagManagerUrl;
  }

  public void setTagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
  }


  public Container taggingServerUrls(List<String> taggingServerUrls) {
    this.taggingServerUrls = taggingServerUrls;
    return this;
  }

  public Container addTaggingServerUrlsItem(String taggingServerUrlsItem) {
    if (this.taggingServerUrls == null) {
      this.taggingServerUrls = new ArrayList<>();
    }
    this.taggingServerUrls.add(taggingServerUrlsItem);
    return this;
  }

  /**
   * List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
   * @return taggingServerUrls
   */
  @javax.annotation.Nullable
  public List<String> getTaggingServerUrls() {
    return taggingServerUrls;
  }

  public void setTaggingServerUrls(List<String> taggingServerUrls) {
    this.taggingServerUrls = taggingServerUrls;
  }


  public Container usageContext(List<UsageContextEnum> usageContext) {
    this.usageContext = usageContext;
    return this;
  }

  public Container addUsageContextItem(UsageContextEnum usageContextItem) {
    if (this.usageContext == null) {
      this.usageContext = new ArrayList<>();
    }
    this.usageContext.add(usageContextItem);
    return this;
  }

  /**
   * List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
   * @return usageContext
   */
  @javax.annotation.Nullable
  public List<UsageContextEnum> getUsageContext() {
    return usageContext;
  }

  public void setUsageContext(List<UsageContextEnum> usageContext) {
    this.usageContext = usageContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Container container = (Container) o;
    return Objects.equals(this.accountId, container.accountId) &&
        Objects.equals(this.containerId, container.containerId) &&
        Objects.equals(this.domainName, container.domainName) &&
        Objects.equals(this.features, container.features) &&
        Objects.equals(this.fingerprint, container.fingerprint) &&
        Objects.equals(this.name, container.name) &&
        Objects.equals(this.notes, container.notes) &&
        Objects.equals(this.path, container.path) &&
        Objects.equals(this.publicId, container.publicId) &&
        Objects.equals(this.tagIds, container.tagIds) &&
        Objects.equals(this.tagManagerUrl, container.tagManagerUrl) &&
        Objects.equals(this.taggingServerUrls, container.taggingServerUrls) &&
        Objects.equals(this.usageContext, container.usageContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, containerId, domainName, features, fingerprint, name, notes, path, publicId, tagIds, tagManagerUrl, taggingServerUrls, usageContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Container {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    publicId: ").append(toIndentedString(publicId)).append("\n");
    sb.append("    tagIds: ").append(toIndentedString(tagIds)).append("\n");
    sb.append("    tagManagerUrl: ").append(toIndentedString(tagManagerUrl)).append("\n");
    sb.append("    taggingServerUrls: ").append(toIndentedString(taggingServerUrls)).append("\n");
    sb.append("    usageContext: ").append(toIndentedString(usageContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("containerId");
    openapiFields.add("domainName");
    openapiFields.add("features");
    openapiFields.add("fingerprint");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("path");
    openapiFields.add("publicId");
    openapiFields.add("tagIds");
    openapiFields.add("tagManagerUrl");
    openapiFields.add("taggingServerUrls");
    openapiFields.add("usageContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Container
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Container.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Container is not found in the empty JSON string", Container.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Container.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Container` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull() && !jsonObj.get("domainName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be an array in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        ContainerFeatures.validateJsonElement(jsonObj.get("features"));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("publicId") != null && !jsonObj.get("publicId").isJsonNull()) && !jsonObj.get("publicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagIds") != null && !jsonObj.get("tagIds").isJsonNull() && !jsonObj.get("tagIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagIds` to be an array in the JSON string but got `%s`", jsonObj.get("tagIds").toString()));
      }
      if ((jsonObj.get("tagManagerUrl") != null && !jsonObj.get("tagManagerUrl").isJsonNull()) && !jsonObj.get("tagManagerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagManagerUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("taggingServerUrls") != null && !jsonObj.get("taggingServerUrls").isJsonNull() && !jsonObj.get("taggingServerUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taggingServerUrls` to be an array in the JSON string but got `%s`", jsonObj.get("taggingServerUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("usageContext") != null && !jsonObj.get("usageContext").isJsonNull() && !jsonObj.get("usageContext").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageContext` to be an array in the JSON string but got `%s`", jsonObj.get("usageContext").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Container.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Container' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Container> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Container.class));

       return (TypeAdapter<T>) new TypeAdapter<Container>() {
           @Override
           public void write(JsonWriter out, Container value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Container read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Container given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Container
   * @throws IOException if the JSON string is invalid with respect to Container
   */
  public static Container fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Container.class);
  }

  /**
   * Convert an instance of Container to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

