/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ZoneBoundary;
import org.openapitools.client.model.ZoneChildContainer;
import org.openapitools.client.model.ZoneTypeRestriction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Zone&#39;s contents.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Zone {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BOUNDARY = "boundary";
  @SerializedName(SERIALIZED_NAME_BOUNDARY)
  private ZoneBoundary boundary;

  public static final String SERIALIZED_NAME_CHILD_CONTAINER = "childContainer";
  @SerializedName(SERIALIZED_NAME_CHILD_CONTAINER)
  private List<ZoneChildContainer> childContainer = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TAG_MANAGER_URL = "tagManagerUrl";
  @SerializedName(SERIALIZED_NAME_TAG_MANAGER_URL)
  private String tagManagerUrl;

  public static final String SERIALIZED_NAME_TYPE_RESTRICTION = "typeRestriction";
  @SerializedName(SERIALIZED_NAME_TYPE_RESTRICTION)
  private ZoneTypeRestriction typeRestriction;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_ZONE_ID = "zoneId";
  @SerializedName(SERIALIZED_NAME_ZONE_ID)
  private String zoneId;

  public Zone() {
  }

  public Zone accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Zone boundary(ZoneBoundary boundary) {
    this.boundary = boundary;
    return this;
  }

  /**
   * Get boundary
   * @return boundary
   */
  @javax.annotation.Nullable
  public ZoneBoundary getBoundary() {
    return boundary;
  }

  public void setBoundary(ZoneBoundary boundary) {
    this.boundary = boundary;
  }


  public Zone childContainer(List<ZoneChildContainer> childContainer) {
    this.childContainer = childContainer;
    return this;
  }

  public Zone addChildContainerItem(ZoneChildContainer childContainerItem) {
    if (this.childContainer == null) {
      this.childContainer = new ArrayList<>();
    }
    this.childContainer.add(childContainerItem);
    return this;
  }

  /**
   * Containers that are children of this Zone.
   * @return childContainer
   */
  @javax.annotation.Nullable
  public List<ZoneChildContainer> getChildContainer() {
    return childContainer;
  }

  public void setChildContainer(List<ZoneChildContainer> childContainer) {
    this.childContainer = childContainer;
  }


  public Zone containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Zone fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Zone as computed at storage time. This value is recomputed whenever the zone is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Zone name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Zone display name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Zone notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes on how to apply this zone in the container.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Zone path(String path) {
    this.path = path;
    return this;
  }

  /**
   * GTM Zone&#39;s API relative path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Zone tagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
    return this;
  }

  /**
   * Auto generated link to the tag manager UI
   * @return tagManagerUrl
   */
  @javax.annotation.Nullable
  public String getTagManagerUrl() {
    return tagManagerUrl;
  }

  public void setTagManagerUrl(String tagManagerUrl) {
    this.tagManagerUrl = tagManagerUrl;
  }


  public Zone typeRestriction(ZoneTypeRestriction typeRestriction) {
    this.typeRestriction = typeRestriction;
    return this;
  }

  /**
   * Get typeRestriction
   * @return typeRestriction
   */
  @javax.annotation.Nullable
  public ZoneTypeRestriction getTypeRestriction() {
    return typeRestriction;
  }

  public void setTypeRestriction(ZoneTypeRestriction typeRestriction) {
    this.typeRestriction = typeRestriction;
  }


  public Zone workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * GTM Workspace ID.
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public Zone zoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  /**
   * The Zone ID uniquely identifies the GTM Zone.
   * @return zoneId
   */
  @javax.annotation.Nullable
  public String getZoneId() {
    return zoneId;
  }

  public void setZoneId(String zoneId) {
    this.zoneId = zoneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Zone zone = (Zone) o;
    return Objects.equals(this.accountId, zone.accountId) &&
        Objects.equals(this.boundary, zone.boundary) &&
        Objects.equals(this.childContainer, zone.childContainer) &&
        Objects.equals(this.containerId, zone.containerId) &&
        Objects.equals(this.fingerprint, zone.fingerprint) &&
        Objects.equals(this.name, zone.name) &&
        Objects.equals(this.notes, zone.notes) &&
        Objects.equals(this.path, zone.path) &&
        Objects.equals(this.tagManagerUrl, zone.tagManagerUrl) &&
        Objects.equals(this.typeRestriction, zone.typeRestriction) &&
        Objects.equals(this.workspaceId, zone.workspaceId) &&
        Objects.equals(this.zoneId, zone.zoneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, boundary, childContainer, containerId, fingerprint, name, notes, path, tagManagerUrl, typeRestriction, workspaceId, zoneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Zone {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    boundary: ").append(toIndentedString(boundary)).append("\n");
    sb.append("    childContainer: ").append(toIndentedString(childContainer)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    tagManagerUrl: ").append(toIndentedString(tagManagerUrl)).append("\n");
    sb.append("    typeRestriction: ").append(toIndentedString(typeRestriction)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    zoneId: ").append(toIndentedString(zoneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("boundary");
    openapiFields.add("childContainer");
    openapiFields.add("containerId");
    openapiFields.add("fingerprint");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("path");
    openapiFields.add("tagManagerUrl");
    openapiFields.add("typeRestriction");
    openapiFields.add("workspaceId");
    openapiFields.add("zoneId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Zone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Zone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Zone is not found in the empty JSON string", Zone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Zone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Zone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `boundary`
      if (jsonObj.get("boundary") != null && !jsonObj.get("boundary").isJsonNull()) {
        ZoneBoundary.validateJsonElement(jsonObj.get("boundary"));
      }
      if (jsonObj.get("childContainer") != null && !jsonObj.get("childContainer").isJsonNull()) {
        JsonArray jsonArraychildContainer = jsonObj.getAsJsonArray("childContainer");
        if (jsonArraychildContainer != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childContainer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childContainer` to be an array in the JSON string but got `%s`", jsonObj.get("childContainer").toString()));
          }

          // validate the optional field `childContainer` (array)
          for (int i = 0; i < jsonArraychildContainer.size(); i++) {
            ZoneChildContainer.validateJsonElement(jsonArraychildContainer.get(i));
          };
        }
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("tagManagerUrl") != null && !jsonObj.get("tagManagerUrl").isJsonNull()) && !jsonObj.get("tagManagerUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagManagerUrl").toString()));
      }
      // validate the optional field `typeRestriction`
      if (jsonObj.get("typeRestriction") != null && !jsonObj.get("typeRestriction").isJsonNull()) {
        ZoneTypeRestriction.validateJsonElement(jsonObj.get("typeRestriction"));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
      if ((jsonObj.get("zoneId") != null && !jsonObj.get("zoneId").isJsonNull()) && !jsonObj.get("zoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Zone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Zone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Zone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Zone.class));

       return (TypeAdapter<T>) new TypeAdapter<Zone>() {
           @Override
           public void write(JsonWriter out, Zone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Zone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Zone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Zone
   * @throws IOException if the JSON string is invalid with respect to Zone
   */
  public static Zone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Zone.class);
  }

  /**
   * Convert an instance of Zone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

