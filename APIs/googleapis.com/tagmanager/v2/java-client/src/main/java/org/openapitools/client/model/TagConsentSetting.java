/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Parameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TagConsentSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagConsentSetting {
  /**
   * The tag&#39;s consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.
   */
  @JsonAdapter(ConsentStatusEnum.Adapter.class)
  public enum ConsentStatusEnum {
    NOT_SET("notSet"),
    
    NOT_NEEDED("notNeeded"),
    
    NEEDED("needed");

    private String value;

    ConsentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConsentStatusEnum fromValue(String value) {
      for (ConsentStatusEnum b : ConsentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConsentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConsentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConsentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConsentStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConsentStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSENT_STATUS = "consentStatus";
  @SerializedName(SERIALIZED_NAME_CONSENT_STATUS)
  private ConsentStatusEnum consentStatus;

  public static final String SERIALIZED_NAME_CONSENT_TYPE = "consentType";
  @SerializedName(SERIALIZED_NAME_CONSENT_TYPE)
  private Parameter consentType;

  public TagConsentSetting() {
  }

  public TagConsentSetting consentStatus(ConsentStatusEnum consentStatus) {
    this.consentStatus = consentStatus;
    return this;
  }

  /**
   * The tag&#39;s consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.
   * @return consentStatus
   */
  @javax.annotation.Nullable
  public ConsentStatusEnum getConsentStatus() {
    return consentStatus;
  }

  public void setConsentStatus(ConsentStatusEnum consentStatus) {
    this.consentStatus = consentStatus;
  }


  public TagConsentSetting consentType(Parameter consentType) {
    this.consentType = consentType;
    return this;
  }

  /**
   * Get consentType
   * @return consentType
   */
  @javax.annotation.Nullable
  public Parameter getConsentType() {
    return consentType;
  }

  public void setConsentType(Parameter consentType) {
    this.consentType = consentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagConsentSetting tagConsentSetting = (TagConsentSetting) o;
    return Objects.equals(this.consentStatus, tagConsentSetting.consentStatus) &&
        Objects.equals(this.consentType, tagConsentSetting.consentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentStatus, consentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagConsentSetting {\n");
    sb.append("    consentStatus: ").append(toIndentedString(consentStatus)).append("\n");
    sb.append("    consentType: ").append(toIndentedString(consentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consentStatus");
    openapiFields.add("consentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagConsentSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagConsentSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagConsentSetting is not found in the empty JSON string", TagConsentSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagConsentSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagConsentSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consentStatus") != null && !jsonObj.get("consentStatus").isJsonNull()) && !jsonObj.get("consentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentStatus").toString()));
      }
      // validate the optional field `consentStatus`
      if (jsonObj.get("consentStatus") != null && !jsonObj.get("consentStatus").isJsonNull()) {
        ConsentStatusEnum.validateJsonElement(jsonObj.get("consentStatus"));
      }
      // validate the optional field `consentType`
      if (jsonObj.get("consentType") != null && !jsonObj.get("consentType").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("consentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagConsentSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagConsentSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagConsentSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagConsentSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<TagConsentSetting>() {
           @Override
           public void write(JsonWriter out, TagConsentSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagConsentSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagConsentSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagConsentSetting
   * @throws IOException if the JSON string is invalid with respect to TagConsentSetting
   */
  public static TagConsentSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagConsentSetting.class);
  }

  /**
   * Convert an instance of TagConsentSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

