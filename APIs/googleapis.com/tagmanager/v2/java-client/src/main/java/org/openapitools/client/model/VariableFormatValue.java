/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Parameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VariableFormatValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:30.823247-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VariableFormatValue {
  /**
   * The option to convert a string-type variable value to either lowercase or uppercase.
   */
  @JsonAdapter(CaseConversionTypeEnum.Adapter.class)
  public enum CaseConversionTypeEnum {
    NONE("none"),
    
    LOWERCASE("lowercase"),
    
    UPPERCASE("uppercase");

    private String value;

    CaseConversionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CaseConversionTypeEnum fromValue(String value) {
      for (CaseConversionTypeEnum b : CaseConversionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CaseConversionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CaseConversionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CaseConversionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CaseConversionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CaseConversionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CASE_CONVERSION_TYPE = "caseConversionType";
  @SerializedName(SERIALIZED_NAME_CASE_CONVERSION_TYPE)
  private CaseConversionTypeEnum caseConversionType;

  public static final String SERIALIZED_NAME_CONVERT_FALSE_TO_VALUE = "convertFalseToValue";
  @SerializedName(SERIALIZED_NAME_CONVERT_FALSE_TO_VALUE)
  private Parameter convertFalseToValue;

  public static final String SERIALIZED_NAME_CONVERT_NULL_TO_VALUE = "convertNullToValue";
  @SerializedName(SERIALIZED_NAME_CONVERT_NULL_TO_VALUE)
  private Parameter convertNullToValue;

  public static final String SERIALIZED_NAME_CONVERT_TRUE_TO_VALUE = "convertTrueToValue";
  @SerializedName(SERIALIZED_NAME_CONVERT_TRUE_TO_VALUE)
  private Parameter convertTrueToValue;

  public static final String SERIALIZED_NAME_CONVERT_UNDEFINED_TO_VALUE = "convertUndefinedToValue";
  @SerializedName(SERIALIZED_NAME_CONVERT_UNDEFINED_TO_VALUE)
  private Parameter convertUndefinedToValue;

  public VariableFormatValue() {
  }

  public VariableFormatValue caseConversionType(CaseConversionTypeEnum caseConversionType) {
    this.caseConversionType = caseConversionType;
    return this;
  }

  /**
   * The option to convert a string-type variable value to either lowercase or uppercase.
   * @return caseConversionType
   */
  @javax.annotation.Nullable
  public CaseConversionTypeEnum getCaseConversionType() {
    return caseConversionType;
  }

  public void setCaseConversionType(CaseConversionTypeEnum caseConversionType) {
    this.caseConversionType = caseConversionType;
  }


  public VariableFormatValue convertFalseToValue(Parameter convertFalseToValue) {
    this.convertFalseToValue = convertFalseToValue;
    return this;
  }

  /**
   * Get convertFalseToValue
   * @return convertFalseToValue
   */
  @javax.annotation.Nullable
  public Parameter getConvertFalseToValue() {
    return convertFalseToValue;
  }

  public void setConvertFalseToValue(Parameter convertFalseToValue) {
    this.convertFalseToValue = convertFalseToValue;
  }


  public VariableFormatValue convertNullToValue(Parameter convertNullToValue) {
    this.convertNullToValue = convertNullToValue;
    return this;
  }

  /**
   * Get convertNullToValue
   * @return convertNullToValue
   */
  @javax.annotation.Nullable
  public Parameter getConvertNullToValue() {
    return convertNullToValue;
  }

  public void setConvertNullToValue(Parameter convertNullToValue) {
    this.convertNullToValue = convertNullToValue;
  }


  public VariableFormatValue convertTrueToValue(Parameter convertTrueToValue) {
    this.convertTrueToValue = convertTrueToValue;
    return this;
  }

  /**
   * Get convertTrueToValue
   * @return convertTrueToValue
   */
  @javax.annotation.Nullable
  public Parameter getConvertTrueToValue() {
    return convertTrueToValue;
  }

  public void setConvertTrueToValue(Parameter convertTrueToValue) {
    this.convertTrueToValue = convertTrueToValue;
  }


  public VariableFormatValue convertUndefinedToValue(Parameter convertUndefinedToValue) {
    this.convertUndefinedToValue = convertUndefinedToValue;
    return this;
  }

  /**
   * Get convertUndefinedToValue
   * @return convertUndefinedToValue
   */
  @javax.annotation.Nullable
  public Parameter getConvertUndefinedToValue() {
    return convertUndefinedToValue;
  }

  public void setConvertUndefinedToValue(Parameter convertUndefinedToValue) {
    this.convertUndefinedToValue = convertUndefinedToValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariableFormatValue variableFormatValue = (VariableFormatValue) o;
    return Objects.equals(this.caseConversionType, variableFormatValue.caseConversionType) &&
        Objects.equals(this.convertFalseToValue, variableFormatValue.convertFalseToValue) &&
        Objects.equals(this.convertNullToValue, variableFormatValue.convertNullToValue) &&
        Objects.equals(this.convertTrueToValue, variableFormatValue.convertTrueToValue) &&
        Objects.equals(this.convertUndefinedToValue, variableFormatValue.convertUndefinedToValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseConversionType, convertFalseToValue, convertNullToValue, convertTrueToValue, convertUndefinedToValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariableFormatValue {\n");
    sb.append("    caseConversionType: ").append(toIndentedString(caseConversionType)).append("\n");
    sb.append("    convertFalseToValue: ").append(toIndentedString(convertFalseToValue)).append("\n");
    sb.append("    convertNullToValue: ").append(toIndentedString(convertNullToValue)).append("\n");
    sb.append("    convertTrueToValue: ").append(toIndentedString(convertTrueToValue)).append("\n");
    sb.append("    convertUndefinedToValue: ").append(toIndentedString(convertUndefinedToValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseConversionType");
    openapiFields.add("convertFalseToValue");
    openapiFields.add("convertNullToValue");
    openapiFields.add("convertTrueToValue");
    openapiFields.add("convertUndefinedToValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VariableFormatValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariableFormatValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariableFormatValue is not found in the empty JSON string", VariableFormatValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariableFormatValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariableFormatValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caseConversionType") != null && !jsonObj.get("caseConversionType").isJsonNull()) && !jsonObj.get("caseConversionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseConversionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseConversionType").toString()));
      }
      // validate the optional field `caseConversionType`
      if (jsonObj.get("caseConversionType") != null && !jsonObj.get("caseConversionType").isJsonNull()) {
        CaseConversionTypeEnum.validateJsonElement(jsonObj.get("caseConversionType"));
      }
      // validate the optional field `convertFalseToValue`
      if (jsonObj.get("convertFalseToValue") != null && !jsonObj.get("convertFalseToValue").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("convertFalseToValue"));
      }
      // validate the optional field `convertNullToValue`
      if (jsonObj.get("convertNullToValue") != null && !jsonObj.get("convertNullToValue").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("convertNullToValue"));
      }
      // validate the optional field `convertTrueToValue`
      if (jsonObj.get("convertTrueToValue") != null && !jsonObj.get("convertTrueToValue").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("convertTrueToValue"));
      }
      // validate the optional field `convertUndefinedToValue`
      if (jsonObj.get("convertUndefinedToValue") != null && !jsonObj.get("convertUndefinedToValue").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("convertUndefinedToValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariableFormatValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariableFormatValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariableFormatValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariableFormatValue.class));

       return (TypeAdapter<T>) new TypeAdapter<VariableFormatValue>() {
           @Override
           public void write(JsonWriter out, VariableFormatValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariableFormatValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VariableFormatValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VariableFormatValue
   * @throws IOException if the JSON string is invalid with respect to VariableFormatValue
   */
  public static VariableFormatValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariableFormatValue.class);
  }

  /**
   * Convert an instance of VariableFormatValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

