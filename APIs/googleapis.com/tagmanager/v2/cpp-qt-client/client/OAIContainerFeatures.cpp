/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerFeatures::OAIContainerFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerFeatures::OAIContainerFeatures() {
    this->initializeModel();
}

OAIContainerFeatures::~OAIContainerFeatures() {}

void OAIContainerFeatures::initializeModel() {

    m_support_built_in_variables_isSet = false;
    m_support_built_in_variables_isValid = false;

    m_support_clients_isSet = false;
    m_support_clients_isValid = false;

    m_support_environments_isSet = false;
    m_support_environments_isValid = false;

    m_support_folders_isSet = false;
    m_support_folders_isValid = false;

    m_support_gtag_configs_isSet = false;
    m_support_gtag_configs_isValid = false;

    m_support_tags_isSet = false;
    m_support_tags_isValid = false;

    m_support_templates_isSet = false;
    m_support_templates_isValid = false;

    m_support_transformations_isSet = false;
    m_support_transformations_isValid = false;

    m_support_triggers_isSet = false;
    m_support_triggers_isValid = false;

    m_support_user_permissions_isSet = false;
    m_support_user_permissions_isValid = false;

    m_support_variables_isSet = false;
    m_support_variables_isValid = false;

    m_support_versions_isSet = false;
    m_support_versions_isValid = false;

    m_support_workspaces_isSet = false;
    m_support_workspaces_isValid = false;

    m_support_zones_isSet = false;
    m_support_zones_isValid = false;
}

void OAIContainerFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerFeatures::fromJsonObject(QJsonObject json) {

    m_support_built_in_variables_isValid = ::OpenAPI::fromJsonValue(m_support_built_in_variables, json[QString("supportBuiltInVariables")]);
    m_support_built_in_variables_isSet = !json[QString("supportBuiltInVariables")].isNull() && m_support_built_in_variables_isValid;

    m_support_clients_isValid = ::OpenAPI::fromJsonValue(m_support_clients, json[QString("supportClients")]);
    m_support_clients_isSet = !json[QString("supportClients")].isNull() && m_support_clients_isValid;

    m_support_environments_isValid = ::OpenAPI::fromJsonValue(m_support_environments, json[QString("supportEnvironments")]);
    m_support_environments_isSet = !json[QString("supportEnvironments")].isNull() && m_support_environments_isValid;

    m_support_folders_isValid = ::OpenAPI::fromJsonValue(m_support_folders, json[QString("supportFolders")]);
    m_support_folders_isSet = !json[QString("supportFolders")].isNull() && m_support_folders_isValid;

    m_support_gtag_configs_isValid = ::OpenAPI::fromJsonValue(m_support_gtag_configs, json[QString("supportGtagConfigs")]);
    m_support_gtag_configs_isSet = !json[QString("supportGtagConfigs")].isNull() && m_support_gtag_configs_isValid;

    m_support_tags_isValid = ::OpenAPI::fromJsonValue(m_support_tags, json[QString("supportTags")]);
    m_support_tags_isSet = !json[QString("supportTags")].isNull() && m_support_tags_isValid;

    m_support_templates_isValid = ::OpenAPI::fromJsonValue(m_support_templates, json[QString("supportTemplates")]);
    m_support_templates_isSet = !json[QString("supportTemplates")].isNull() && m_support_templates_isValid;

    m_support_transformations_isValid = ::OpenAPI::fromJsonValue(m_support_transformations, json[QString("supportTransformations")]);
    m_support_transformations_isSet = !json[QString("supportTransformations")].isNull() && m_support_transformations_isValid;

    m_support_triggers_isValid = ::OpenAPI::fromJsonValue(m_support_triggers, json[QString("supportTriggers")]);
    m_support_triggers_isSet = !json[QString("supportTriggers")].isNull() && m_support_triggers_isValid;

    m_support_user_permissions_isValid = ::OpenAPI::fromJsonValue(m_support_user_permissions, json[QString("supportUserPermissions")]);
    m_support_user_permissions_isSet = !json[QString("supportUserPermissions")].isNull() && m_support_user_permissions_isValid;

    m_support_variables_isValid = ::OpenAPI::fromJsonValue(m_support_variables, json[QString("supportVariables")]);
    m_support_variables_isSet = !json[QString("supportVariables")].isNull() && m_support_variables_isValid;

    m_support_versions_isValid = ::OpenAPI::fromJsonValue(m_support_versions, json[QString("supportVersions")]);
    m_support_versions_isSet = !json[QString("supportVersions")].isNull() && m_support_versions_isValid;

    m_support_workspaces_isValid = ::OpenAPI::fromJsonValue(m_support_workspaces, json[QString("supportWorkspaces")]);
    m_support_workspaces_isSet = !json[QString("supportWorkspaces")].isNull() && m_support_workspaces_isValid;

    m_support_zones_isValid = ::OpenAPI::fromJsonValue(m_support_zones, json[QString("supportZones")]);
    m_support_zones_isSet = !json[QString("supportZones")].isNull() && m_support_zones_isValid;
}

QString OAIContainerFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_support_built_in_variables_isSet) {
        obj.insert(QString("supportBuiltInVariables"), ::OpenAPI::toJsonValue(m_support_built_in_variables));
    }
    if (m_support_clients_isSet) {
        obj.insert(QString("supportClients"), ::OpenAPI::toJsonValue(m_support_clients));
    }
    if (m_support_environments_isSet) {
        obj.insert(QString("supportEnvironments"), ::OpenAPI::toJsonValue(m_support_environments));
    }
    if (m_support_folders_isSet) {
        obj.insert(QString("supportFolders"), ::OpenAPI::toJsonValue(m_support_folders));
    }
    if (m_support_gtag_configs_isSet) {
        obj.insert(QString("supportGtagConfigs"), ::OpenAPI::toJsonValue(m_support_gtag_configs));
    }
    if (m_support_tags_isSet) {
        obj.insert(QString("supportTags"), ::OpenAPI::toJsonValue(m_support_tags));
    }
    if (m_support_templates_isSet) {
        obj.insert(QString("supportTemplates"), ::OpenAPI::toJsonValue(m_support_templates));
    }
    if (m_support_transformations_isSet) {
        obj.insert(QString("supportTransformations"), ::OpenAPI::toJsonValue(m_support_transformations));
    }
    if (m_support_triggers_isSet) {
        obj.insert(QString("supportTriggers"), ::OpenAPI::toJsonValue(m_support_triggers));
    }
    if (m_support_user_permissions_isSet) {
        obj.insert(QString("supportUserPermissions"), ::OpenAPI::toJsonValue(m_support_user_permissions));
    }
    if (m_support_variables_isSet) {
        obj.insert(QString("supportVariables"), ::OpenAPI::toJsonValue(m_support_variables));
    }
    if (m_support_versions_isSet) {
        obj.insert(QString("supportVersions"), ::OpenAPI::toJsonValue(m_support_versions));
    }
    if (m_support_workspaces_isSet) {
        obj.insert(QString("supportWorkspaces"), ::OpenAPI::toJsonValue(m_support_workspaces));
    }
    if (m_support_zones_isSet) {
        obj.insert(QString("supportZones"), ::OpenAPI::toJsonValue(m_support_zones));
    }
    return obj;
}

bool OAIContainerFeatures::isSupportBuiltInVariables() const {
    return m_support_built_in_variables;
}
void OAIContainerFeatures::setSupportBuiltInVariables(const bool &support_built_in_variables) {
    m_support_built_in_variables = support_built_in_variables;
    m_support_built_in_variables_isSet = true;
}

bool OAIContainerFeatures::is_support_built_in_variables_Set() const{
    return m_support_built_in_variables_isSet;
}

bool OAIContainerFeatures::is_support_built_in_variables_Valid() const{
    return m_support_built_in_variables_isValid;
}

bool OAIContainerFeatures::isSupportClients() const {
    return m_support_clients;
}
void OAIContainerFeatures::setSupportClients(const bool &support_clients) {
    m_support_clients = support_clients;
    m_support_clients_isSet = true;
}

bool OAIContainerFeatures::is_support_clients_Set() const{
    return m_support_clients_isSet;
}

bool OAIContainerFeatures::is_support_clients_Valid() const{
    return m_support_clients_isValid;
}

bool OAIContainerFeatures::isSupportEnvironments() const {
    return m_support_environments;
}
void OAIContainerFeatures::setSupportEnvironments(const bool &support_environments) {
    m_support_environments = support_environments;
    m_support_environments_isSet = true;
}

bool OAIContainerFeatures::is_support_environments_Set() const{
    return m_support_environments_isSet;
}

bool OAIContainerFeatures::is_support_environments_Valid() const{
    return m_support_environments_isValid;
}

bool OAIContainerFeatures::isSupportFolders() const {
    return m_support_folders;
}
void OAIContainerFeatures::setSupportFolders(const bool &support_folders) {
    m_support_folders = support_folders;
    m_support_folders_isSet = true;
}

bool OAIContainerFeatures::is_support_folders_Set() const{
    return m_support_folders_isSet;
}

bool OAIContainerFeatures::is_support_folders_Valid() const{
    return m_support_folders_isValid;
}

bool OAIContainerFeatures::isSupportGtagConfigs() const {
    return m_support_gtag_configs;
}
void OAIContainerFeatures::setSupportGtagConfigs(const bool &support_gtag_configs) {
    m_support_gtag_configs = support_gtag_configs;
    m_support_gtag_configs_isSet = true;
}

bool OAIContainerFeatures::is_support_gtag_configs_Set() const{
    return m_support_gtag_configs_isSet;
}

bool OAIContainerFeatures::is_support_gtag_configs_Valid() const{
    return m_support_gtag_configs_isValid;
}

bool OAIContainerFeatures::isSupportTags() const {
    return m_support_tags;
}
void OAIContainerFeatures::setSupportTags(const bool &support_tags) {
    m_support_tags = support_tags;
    m_support_tags_isSet = true;
}

bool OAIContainerFeatures::is_support_tags_Set() const{
    return m_support_tags_isSet;
}

bool OAIContainerFeatures::is_support_tags_Valid() const{
    return m_support_tags_isValid;
}

bool OAIContainerFeatures::isSupportTemplates() const {
    return m_support_templates;
}
void OAIContainerFeatures::setSupportTemplates(const bool &support_templates) {
    m_support_templates = support_templates;
    m_support_templates_isSet = true;
}

bool OAIContainerFeatures::is_support_templates_Set() const{
    return m_support_templates_isSet;
}

bool OAIContainerFeatures::is_support_templates_Valid() const{
    return m_support_templates_isValid;
}

bool OAIContainerFeatures::isSupportTransformations() const {
    return m_support_transformations;
}
void OAIContainerFeatures::setSupportTransformations(const bool &support_transformations) {
    m_support_transformations = support_transformations;
    m_support_transformations_isSet = true;
}

bool OAIContainerFeatures::is_support_transformations_Set() const{
    return m_support_transformations_isSet;
}

bool OAIContainerFeatures::is_support_transformations_Valid() const{
    return m_support_transformations_isValid;
}

bool OAIContainerFeatures::isSupportTriggers() const {
    return m_support_triggers;
}
void OAIContainerFeatures::setSupportTriggers(const bool &support_triggers) {
    m_support_triggers = support_triggers;
    m_support_triggers_isSet = true;
}

bool OAIContainerFeatures::is_support_triggers_Set() const{
    return m_support_triggers_isSet;
}

bool OAIContainerFeatures::is_support_triggers_Valid() const{
    return m_support_triggers_isValid;
}

bool OAIContainerFeatures::isSupportUserPermissions() const {
    return m_support_user_permissions;
}
void OAIContainerFeatures::setSupportUserPermissions(const bool &support_user_permissions) {
    m_support_user_permissions = support_user_permissions;
    m_support_user_permissions_isSet = true;
}

bool OAIContainerFeatures::is_support_user_permissions_Set() const{
    return m_support_user_permissions_isSet;
}

bool OAIContainerFeatures::is_support_user_permissions_Valid() const{
    return m_support_user_permissions_isValid;
}

bool OAIContainerFeatures::isSupportVariables() const {
    return m_support_variables;
}
void OAIContainerFeatures::setSupportVariables(const bool &support_variables) {
    m_support_variables = support_variables;
    m_support_variables_isSet = true;
}

bool OAIContainerFeatures::is_support_variables_Set() const{
    return m_support_variables_isSet;
}

bool OAIContainerFeatures::is_support_variables_Valid() const{
    return m_support_variables_isValid;
}

bool OAIContainerFeatures::isSupportVersions() const {
    return m_support_versions;
}
void OAIContainerFeatures::setSupportVersions(const bool &support_versions) {
    m_support_versions = support_versions;
    m_support_versions_isSet = true;
}

bool OAIContainerFeatures::is_support_versions_Set() const{
    return m_support_versions_isSet;
}

bool OAIContainerFeatures::is_support_versions_Valid() const{
    return m_support_versions_isValid;
}

bool OAIContainerFeatures::isSupportWorkspaces() const {
    return m_support_workspaces;
}
void OAIContainerFeatures::setSupportWorkspaces(const bool &support_workspaces) {
    m_support_workspaces = support_workspaces;
    m_support_workspaces_isSet = true;
}

bool OAIContainerFeatures::is_support_workspaces_Set() const{
    return m_support_workspaces_isSet;
}

bool OAIContainerFeatures::is_support_workspaces_Valid() const{
    return m_support_workspaces_isValid;
}

bool OAIContainerFeatures::isSupportZones() const {
    return m_support_zones;
}
void OAIContainerFeatures::setSupportZones(const bool &support_zones) {
    m_support_zones = support_zones;
    m_support_zones_isSet = true;
}

bool OAIContainerFeatures::is_support_zones_Set() const{
    return m_support_zones_isSet;
}

bool OAIContainerFeatures::is_support_zones_Valid() const{
    return m_support_zones_isValid;
}

bool OAIContainerFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_support_built_in_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_clients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_environments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_gtag_configs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_transformations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_triggers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_user_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_workspaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_zones_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
