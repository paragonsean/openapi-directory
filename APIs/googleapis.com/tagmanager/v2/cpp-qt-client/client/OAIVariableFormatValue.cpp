/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariableFormatValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariableFormatValue::OAIVariableFormatValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariableFormatValue::OAIVariableFormatValue() {
    this->initializeModel();
}

OAIVariableFormatValue::~OAIVariableFormatValue() {}

void OAIVariableFormatValue::initializeModel() {

    m_case_conversion_type_isSet = false;
    m_case_conversion_type_isValid = false;

    m_convert_false_to_value_isSet = false;
    m_convert_false_to_value_isValid = false;

    m_convert_null_to_value_isSet = false;
    m_convert_null_to_value_isValid = false;

    m_convert_true_to_value_isSet = false;
    m_convert_true_to_value_isValid = false;

    m_convert_undefined_to_value_isSet = false;
    m_convert_undefined_to_value_isValid = false;
}

void OAIVariableFormatValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariableFormatValue::fromJsonObject(QJsonObject json) {

    m_case_conversion_type_isValid = ::OpenAPI::fromJsonValue(m_case_conversion_type, json[QString("caseConversionType")]);
    m_case_conversion_type_isSet = !json[QString("caseConversionType")].isNull() && m_case_conversion_type_isValid;

    m_convert_false_to_value_isValid = ::OpenAPI::fromJsonValue(m_convert_false_to_value, json[QString("convertFalseToValue")]);
    m_convert_false_to_value_isSet = !json[QString("convertFalseToValue")].isNull() && m_convert_false_to_value_isValid;

    m_convert_null_to_value_isValid = ::OpenAPI::fromJsonValue(m_convert_null_to_value, json[QString("convertNullToValue")]);
    m_convert_null_to_value_isSet = !json[QString("convertNullToValue")].isNull() && m_convert_null_to_value_isValid;

    m_convert_true_to_value_isValid = ::OpenAPI::fromJsonValue(m_convert_true_to_value, json[QString("convertTrueToValue")]);
    m_convert_true_to_value_isSet = !json[QString("convertTrueToValue")].isNull() && m_convert_true_to_value_isValid;

    m_convert_undefined_to_value_isValid = ::OpenAPI::fromJsonValue(m_convert_undefined_to_value, json[QString("convertUndefinedToValue")]);
    m_convert_undefined_to_value_isSet = !json[QString("convertUndefinedToValue")].isNull() && m_convert_undefined_to_value_isValid;
}

QString OAIVariableFormatValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariableFormatValue::asJsonObject() const {
    QJsonObject obj;
    if (m_case_conversion_type_isSet) {
        obj.insert(QString("caseConversionType"), ::OpenAPI::toJsonValue(m_case_conversion_type));
    }
    if (m_convert_false_to_value.isSet()) {
        obj.insert(QString("convertFalseToValue"), ::OpenAPI::toJsonValue(m_convert_false_to_value));
    }
    if (m_convert_null_to_value.isSet()) {
        obj.insert(QString("convertNullToValue"), ::OpenAPI::toJsonValue(m_convert_null_to_value));
    }
    if (m_convert_true_to_value.isSet()) {
        obj.insert(QString("convertTrueToValue"), ::OpenAPI::toJsonValue(m_convert_true_to_value));
    }
    if (m_convert_undefined_to_value.isSet()) {
        obj.insert(QString("convertUndefinedToValue"), ::OpenAPI::toJsonValue(m_convert_undefined_to_value));
    }
    return obj;
}

QString OAIVariableFormatValue::getCaseConversionType() const {
    return m_case_conversion_type;
}
void OAIVariableFormatValue::setCaseConversionType(const QString &case_conversion_type) {
    m_case_conversion_type = case_conversion_type;
    m_case_conversion_type_isSet = true;
}

bool OAIVariableFormatValue::is_case_conversion_type_Set() const{
    return m_case_conversion_type_isSet;
}

bool OAIVariableFormatValue::is_case_conversion_type_Valid() const{
    return m_case_conversion_type_isValid;
}

OAIParameter OAIVariableFormatValue::getConvertFalseToValue() const {
    return m_convert_false_to_value;
}
void OAIVariableFormatValue::setConvertFalseToValue(const OAIParameter &convert_false_to_value) {
    m_convert_false_to_value = convert_false_to_value;
    m_convert_false_to_value_isSet = true;
}

bool OAIVariableFormatValue::is_convert_false_to_value_Set() const{
    return m_convert_false_to_value_isSet;
}

bool OAIVariableFormatValue::is_convert_false_to_value_Valid() const{
    return m_convert_false_to_value_isValid;
}

OAIParameter OAIVariableFormatValue::getConvertNullToValue() const {
    return m_convert_null_to_value;
}
void OAIVariableFormatValue::setConvertNullToValue(const OAIParameter &convert_null_to_value) {
    m_convert_null_to_value = convert_null_to_value;
    m_convert_null_to_value_isSet = true;
}

bool OAIVariableFormatValue::is_convert_null_to_value_Set() const{
    return m_convert_null_to_value_isSet;
}

bool OAIVariableFormatValue::is_convert_null_to_value_Valid() const{
    return m_convert_null_to_value_isValid;
}

OAIParameter OAIVariableFormatValue::getConvertTrueToValue() const {
    return m_convert_true_to_value;
}
void OAIVariableFormatValue::setConvertTrueToValue(const OAIParameter &convert_true_to_value) {
    m_convert_true_to_value = convert_true_to_value;
    m_convert_true_to_value_isSet = true;
}

bool OAIVariableFormatValue::is_convert_true_to_value_Set() const{
    return m_convert_true_to_value_isSet;
}

bool OAIVariableFormatValue::is_convert_true_to_value_Valid() const{
    return m_convert_true_to_value_isValid;
}

OAIParameter OAIVariableFormatValue::getConvertUndefinedToValue() const {
    return m_convert_undefined_to_value;
}
void OAIVariableFormatValue::setConvertUndefinedToValue(const OAIParameter &convert_undefined_to_value) {
    m_convert_undefined_to_value = convert_undefined_to_value;
    m_convert_undefined_to_value_isSet = true;
}

bool OAIVariableFormatValue::is_convert_undefined_to_value_Set() const{
    return m_convert_undefined_to_value_isSet;
}

bool OAIVariableFormatValue::is_convert_undefined_to_value_Valid() const{
    return m_convert_undefined_to_value_isValid;
}

bool OAIVariableFormatValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_conversion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_false_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_null_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_true_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_convert_undefined_to_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariableFormatValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
