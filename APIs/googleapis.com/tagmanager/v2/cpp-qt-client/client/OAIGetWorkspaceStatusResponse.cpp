/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkspaceStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkspaceStatusResponse::OAIGetWorkspaceStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkspaceStatusResponse::OAIGetWorkspaceStatusResponse() {
    this->initializeModel();
}

OAIGetWorkspaceStatusResponse::~OAIGetWorkspaceStatusResponse() {}

void OAIGetWorkspaceStatusResponse::initializeModel() {

    m_merge_conflict_isSet = false;
    m_merge_conflict_isValid = false;

    m_workspace_change_isSet = false;
    m_workspace_change_isValid = false;
}

void OAIGetWorkspaceStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkspaceStatusResponse::fromJsonObject(QJsonObject json) {

    m_merge_conflict_isValid = ::OpenAPI::fromJsonValue(m_merge_conflict, json[QString("mergeConflict")]);
    m_merge_conflict_isSet = !json[QString("mergeConflict")].isNull() && m_merge_conflict_isValid;

    m_workspace_change_isValid = ::OpenAPI::fromJsonValue(m_workspace_change, json[QString("workspaceChange")]);
    m_workspace_change_isSet = !json[QString("workspaceChange")].isNull() && m_workspace_change_isValid;
}

QString OAIGetWorkspaceStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkspaceStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_merge_conflict.size() > 0) {
        obj.insert(QString("mergeConflict"), ::OpenAPI::toJsonValue(m_merge_conflict));
    }
    if (m_workspace_change.size() > 0) {
        obj.insert(QString("workspaceChange"), ::OpenAPI::toJsonValue(m_workspace_change));
    }
    return obj;
}

QList<OAIMergeConflict> OAIGetWorkspaceStatusResponse::getMergeConflict() const {
    return m_merge_conflict;
}
void OAIGetWorkspaceStatusResponse::setMergeConflict(const QList<OAIMergeConflict> &merge_conflict) {
    m_merge_conflict = merge_conflict;
    m_merge_conflict_isSet = true;
}

bool OAIGetWorkspaceStatusResponse::is_merge_conflict_Set() const{
    return m_merge_conflict_isSet;
}

bool OAIGetWorkspaceStatusResponse::is_merge_conflict_Valid() const{
    return m_merge_conflict_isValid;
}

QList<OAIEntity> OAIGetWorkspaceStatusResponse::getWorkspaceChange() const {
    return m_workspace_change;
}
void OAIGetWorkspaceStatusResponse::setWorkspaceChange(const QList<OAIEntity> &workspace_change) {
    m_workspace_change = workspace_change;
    m_workspace_change_isSet = true;
}

bool OAIGetWorkspaceStatusResponse::is_workspace_change_Set() const{
    return m_workspace_change_isSet;
}

bool OAIGetWorkspaceStatusResponse::is_workspace_change_Valid() const{
    return m_workspace_change_isValid;
}

bool OAIGetWorkspaceStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merge_conflict.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_change.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkspaceStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
