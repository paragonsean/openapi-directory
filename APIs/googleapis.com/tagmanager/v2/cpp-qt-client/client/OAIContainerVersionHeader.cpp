/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerVersionHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerVersionHeader::OAIContainerVersionHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerVersionHeader::OAIContainerVersionHeader() {
    this->initializeModel();
}

OAIContainerVersionHeader::~OAIContainerVersionHeader() {}

void OAIContainerVersionHeader::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_container_version_id_isSet = false;
    m_container_version_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_num_clients_isSet = false;
    m_num_clients_isValid = false;

    m_num_custom_templates_isSet = false;
    m_num_custom_templates_isValid = false;

    m_num_gtag_configs_isSet = false;
    m_num_gtag_configs_isValid = false;

    m_num_macros_isSet = false;
    m_num_macros_isValid = false;

    m_num_rules_isSet = false;
    m_num_rules_isValid = false;

    m_num_tags_isSet = false;
    m_num_tags_isValid = false;

    m_num_transformations_isSet = false;
    m_num_transformations_isValid = false;

    m_num_triggers_isSet = false;
    m_num_triggers_isValid = false;

    m_num_variables_isSet = false;
    m_num_variables_isValid = false;

    m_num_zones_isSet = false;
    m_num_zones_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIContainerVersionHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerVersionHeader::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_container_version_id_isValid = ::OpenAPI::fromJsonValue(m_container_version_id, json[QString("containerVersionId")]);
    m_container_version_id_isSet = !json[QString("containerVersionId")].isNull() && m_container_version_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_num_clients_isValid = ::OpenAPI::fromJsonValue(m_num_clients, json[QString("numClients")]);
    m_num_clients_isSet = !json[QString("numClients")].isNull() && m_num_clients_isValid;

    m_num_custom_templates_isValid = ::OpenAPI::fromJsonValue(m_num_custom_templates, json[QString("numCustomTemplates")]);
    m_num_custom_templates_isSet = !json[QString("numCustomTemplates")].isNull() && m_num_custom_templates_isValid;

    m_num_gtag_configs_isValid = ::OpenAPI::fromJsonValue(m_num_gtag_configs, json[QString("numGtagConfigs")]);
    m_num_gtag_configs_isSet = !json[QString("numGtagConfigs")].isNull() && m_num_gtag_configs_isValid;

    m_num_macros_isValid = ::OpenAPI::fromJsonValue(m_num_macros, json[QString("numMacros")]);
    m_num_macros_isSet = !json[QString("numMacros")].isNull() && m_num_macros_isValid;

    m_num_rules_isValid = ::OpenAPI::fromJsonValue(m_num_rules, json[QString("numRules")]);
    m_num_rules_isSet = !json[QString("numRules")].isNull() && m_num_rules_isValid;

    m_num_tags_isValid = ::OpenAPI::fromJsonValue(m_num_tags, json[QString("numTags")]);
    m_num_tags_isSet = !json[QString("numTags")].isNull() && m_num_tags_isValid;

    m_num_transformations_isValid = ::OpenAPI::fromJsonValue(m_num_transformations, json[QString("numTransformations")]);
    m_num_transformations_isSet = !json[QString("numTransformations")].isNull() && m_num_transformations_isValid;

    m_num_triggers_isValid = ::OpenAPI::fromJsonValue(m_num_triggers, json[QString("numTriggers")]);
    m_num_triggers_isSet = !json[QString("numTriggers")].isNull() && m_num_triggers_isValid;

    m_num_variables_isValid = ::OpenAPI::fromJsonValue(m_num_variables, json[QString("numVariables")]);
    m_num_variables_isSet = !json[QString("numVariables")].isNull() && m_num_variables_isValid;

    m_num_zones_isValid = ::OpenAPI::fromJsonValue(m_num_zones, json[QString("numZones")]);
    m_num_zones_isSet = !json[QString("numZones")].isNull() && m_num_zones_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIContainerVersionHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerVersionHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_container_version_id_isSet) {
        obj.insert(QString("containerVersionId"), ::OpenAPI::toJsonValue(m_container_version_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_num_clients_isSet) {
        obj.insert(QString("numClients"), ::OpenAPI::toJsonValue(m_num_clients));
    }
    if (m_num_custom_templates_isSet) {
        obj.insert(QString("numCustomTemplates"), ::OpenAPI::toJsonValue(m_num_custom_templates));
    }
    if (m_num_gtag_configs_isSet) {
        obj.insert(QString("numGtagConfigs"), ::OpenAPI::toJsonValue(m_num_gtag_configs));
    }
    if (m_num_macros_isSet) {
        obj.insert(QString("numMacros"), ::OpenAPI::toJsonValue(m_num_macros));
    }
    if (m_num_rules_isSet) {
        obj.insert(QString("numRules"), ::OpenAPI::toJsonValue(m_num_rules));
    }
    if (m_num_tags_isSet) {
        obj.insert(QString("numTags"), ::OpenAPI::toJsonValue(m_num_tags));
    }
    if (m_num_transformations_isSet) {
        obj.insert(QString("numTransformations"), ::OpenAPI::toJsonValue(m_num_transformations));
    }
    if (m_num_triggers_isSet) {
        obj.insert(QString("numTriggers"), ::OpenAPI::toJsonValue(m_num_triggers));
    }
    if (m_num_variables_isSet) {
        obj.insert(QString("numVariables"), ::OpenAPI::toJsonValue(m_num_variables));
    }
    if (m_num_zones_isSet) {
        obj.insert(QString("numZones"), ::OpenAPI::toJsonValue(m_num_zones));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIContainerVersionHeader::getAccountId() const {
    return m_account_id;
}
void OAIContainerVersionHeader::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIContainerVersionHeader::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIContainerVersionHeader::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIContainerVersionHeader::getContainerId() const {
    return m_container_id;
}
void OAIContainerVersionHeader::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIContainerVersionHeader::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIContainerVersionHeader::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIContainerVersionHeader::getContainerVersionId() const {
    return m_container_version_id;
}
void OAIContainerVersionHeader::setContainerVersionId(const QString &container_version_id) {
    m_container_version_id = container_version_id;
    m_container_version_id_isSet = true;
}

bool OAIContainerVersionHeader::is_container_version_id_Set() const{
    return m_container_version_id_isSet;
}

bool OAIContainerVersionHeader::is_container_version_id_Valid() const{
    return m_container_version_id_isValid;
}

bool OAIContainerVersionHeader::isDeleted() const {
    return m_deleted;
}
void OAIContainerVersionHeader::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIContainerVersionHeader::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIContainerVersionHeader::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIContainerVersionHeader::getName() const {
    return m_name;
}
void OAIContainerVersionHeader::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerVersionHeader::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerVersionHeader::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainerVersionHeader::getNumClients() const {
    return m_num_clients;
}
void OAIContainerVersionHeader::setNumClients(const QString &num_clients) {
    m_num_clients = num_clients;
    m_num_clients_isSet = true;
}

bool OAIContainerVersionHeader::is_num_clients_Set() const{
    return m_num_clients_isSet;
}

bool OAIContainerVersionHeader::is_num_clients_Valid() const{
    return m_num_clients_isValid;
}

QString OAIContainerVersionHeader::getNumCustomTemplates() const {
    return m_num_custom_templates;
}
void OAIContainerVersionHeader::setNumCustomTemplates(const QString &num_custom_templates) {
    m_num_custom_templates = num_custom_templates;
    m_num_custom_templates_isSet = true;
}

bool OAIContainerVersionHeader::is_num_custom_templates_Set() const{
    return m_num_custom_templates_isSet;
}

bool OAIContainerVersionHeader::is_num_custom_templates_Valid() const{
    return m_num_custom_templates_isValid;
}

QString OAIContainerVersionHeader::getNumGtagConfigs() const {
    return m_num_gtag_configs;
}
void OAIContainerVersionHeader::setNumGtagConfigs(const QString &num_gtag_configs) {
    m_num_gtag_configs = num_gtag_configs;
    m_num_gtag_configs_isSet = true;
}

bool OAIContainerVersionHeader::is_num_gtag_configs_Set() const{
    return m_num_gtag_configs_isSet;
}

bool OAIContainerVersionHeader::is_num_gtag_configs_Valid() const{
    return m_num_gtag_configs_isValid;
}

QString OAIContainerVersionHeader::getNumMacros() const {
    return m_num_macros;
}
void OAIContainerVersionHeader::setNumMacros(const QString &num_macros) {
    m_num_macros = num_macros;
    m_num_macros_isSet = true;
}

bool OAIContainerVersionHeader::is_num_macros_Set() const{
    return m_num_macros_isSet;
}

bool OAIContainerVersionHeader::is_num_macros_Valid() const{
    return m_num_macros_isValid;
}

QString OAIContainerVersionHeader::getNumRules() const {
    return m_num_rules;
}
void OAIContainerVersionHeader::setNumRules(const QString &num_rules) {
    m_num_rules = num_rules;
    m_num_rules_isSet = true;
}

bool OAIContainerVersionHeader::is_num_rules_Set() const{
    return m_num_rules_isSet;
}

bool OAIContainerVersionHeader::is_num_rules_Valid() const{
    return m_num_rules_isValid;
}

QString OAIContainerVersionHeader::getNumTags() const {
    return m_num_tags;
}
void OAIContainerVersionHeader::setNumTags(const QString &num_tags) {
    m_num_tags = num_tags;
    m_num_tags_isSet = true;
}

bool OAIContainerVersionHeader::is_num_tags_Set() const{
    return m_num_tags_isSet;
}

bool OAIContainerVersionHeader::is_num_tags_Valid() const{
    return m_num_tags_isValid;
}

QString OAIContainerVersionHeader::getNumTransformations() const {
    return m_num_transformations;
}
void OAIContainerVersionHeader::setNumTransformations(const QString &num_transformations) {
    m_num_transformations = num_transformations;
    m_num_transformations_isSet = true;
}

bool OAIContainerVersionHeader::is_num_transformations_Set() const{
    return m_num_transformations_isSet;
}

bool OAIContainerVersionHeader::is_num_transformations_Valid() const{
    return m_num_transformations_isValid;
}

QString OAIContainerVersionHeader::getNumTriggers() const {
    return m_num_triggers;
}
void OAIContainerVersionHeader::setNumTriggers(const QString &num_triggers) {
    m_num_triggers = num_triggers;
    m_num_triggers_isSet = true;
}

bool OAIContainerVersionHeader::is_num_triggers_Set() const{
    return m_num_triggers_isSet;
}

bool OAIContainerVersionHeader::is_num_triggers_Valid() const{
    return m_num_triggers_isValid;
}

QString OAIContainerVersionHeader::getNumVariables() const {
    return m_num_variables;
}
void OAIContainerVersionHeader::setNumVariables(const QString &num_variables) {
    m_num_variables = num_variables;
    m_num_variables_isSet = true;
}

bool OAIContainerVersionHeader::is_num_variables_Set() const{
    return m_num_variables_isSet;
}

bool OAIContainerVersionHeader::is_num_variables_Valid() const{
    return m_num_variables_isValid;
}

QString OAIContainerVersionHeader::getNumZones() const {
    return m_num_zones;
}
void OAIContainerVersionHeader::setNumZones(const QString &num_zones) {
    m_num_zones = num_zones;
    m_num_zones_isSet = true;
}

bool OAIContainerVersionHeader::is_num_zones_Set() const{
    return m_num_zones_isSet;
}

bool OAIContainerVersionHeader::is_num_zones_Valid() const{
    return m_num_zones_isValid;
}

QString OAIContainerVersionHeader::getPath() const {
    return m_path;
}
void OAIContainerVersionHeader::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIContainerVersionHeader::is_path_Set() const{
    return m_path_isSet;
}

bool OAIContainerVersionHeader::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIContainerVersionHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_clients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_custom_templates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_gtag_configs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_macros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_transformations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_triggers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_variables_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_zones_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerVersionHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
