/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZone::OAIZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZone::OAIZone() {
    this->initializeModel();
}

OAIZone::~OAIZone() {}

void OAIZone::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_boundary_isSet = false;
    m_boundary_isValid = false;

    m_child_container_isSet = false;
    m_child_container_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_tag_manager_url_isSet = false;
    m_tag_manager_url_isValid = false;

    m_type_restriction_isSet = false;
    m_type_restriction_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_zone_id_isSet = false;
    m_zone_id_isValid = false;
}

void OAIZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZone::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_boundary_isValid = ::OpenAPI::fromJsonValue(m_boundary, json[QString("boundary")]);
    m_boundary_isSet = !json[QString("boundary")].isNull() && m_boundary_isValid;

    m_child_container_isValid = ::OpenAPI::fromJsonValue(m_child_container, json[QString("childContainer")]);
    m_child_container_isSet = !json[QString("childContainer")].isNull() && m_child_container_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_tag_manager_url_isValid = ::OpenAPI::fromJsonValue(m_tag_manager_url, json[QString("tagManagerUrl")]);
    m_tag_manager_url_isSet = !json[QString("tagManagerUrl")].isNull() && m_tag_manager_url_isValid;

    m_type_restriction_isValid = ::OpenAPI::fromJsonValue(m_type_restriction, json[QString("typeRestriction")]);
    m_type_restriction_isSet = !json[QString("typeRestriction")].isNull() && m_type_restriction_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;

    m_zone_id_isValid = ::OpenAPI::fromJsonValue(m_zone_id, json[QString("zoneId")]);
    m_zone_id_isSet = !json[QString("zoneId")].isNull() && m_zone_id_isValid;
}

QString OAIZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZone::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_boundary.isSet()) {
        obj.insert(QString("boundary"), ::OpenAPI::toJsonValue(m_boundary));
    }
    if (m_child_container.size() > 0) {
        obj.insert(QString("childContainer"), ::OpenAPI::toJsonValue(m_child_container));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_tag_manager_url_isSet) {
        obj.insert(QString("tagManagerUrl"), ::OpenAPI::toJsonValue(m_tag_manager_url));
    }
    if (m_type_restriction.isSet()) {
        obj.insert(QString("typeRestriction"), ::OpenAPI::toJsonValue(m_type_restriction));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_zone_id_isSet) {
        obj.insert(QString("zoneId"), ::OpenAPI::toJsonValue(m_zone_id));
    }
    return obj;
}

QString OAIZone::getAccountId() const {
    return m_account_id;
}
void OAIZone::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIZone::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIZone::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIZoneBoundary OAIZone::getBoundary() const {
    return m_boundary;
}
void OAIZone::setBoundary(const OAIZoneBoundary &boundary) {
    m_boundary = boundary;
    m_boundary_isSet = true;
}

bool OAIZone::is_boundary_Set() const{
    return m_boundary_isSet;
}

bool OAIZone::is_boundary_Valid() const{
    return m_boundary_isValid;
}

QList<OAIZoneChildContainer> OAIZone::getChildContainer() const {
    return m_child_container;
}
void OAIZone::setChildContainer(const QList<OAIZoneChildContainer> &child_container) {
    m_child_container = child_container;
    m_child_container_isSet = true;
}

bool OAIZone::is_child_container_Set() const{
    return m_child_container_isSet;
}

bool OAIZone::is_child_container_Valid() const{
    return m_child_container_isValid;
}

QString OAIZone::getContainerId() const {
    return m_container_id;
}
void OAIZone::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIZone::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIZone::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIZone::getFingerprint() const {
    return m_fingerprint;
}
void OAIZone::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIZone::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIZone::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIZone::getName() const {
    return m_name;
}
void OAIZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIZone::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIZone::getNotes() const {
    return m_notes;
}
void OAIZone::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIZone::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIZone::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIZone::getPath() const {
    return m_path;
}
void OAIZone::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIZone::is_path_Set() const{
    return m_path_isSet;
}

bool OAIZone::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIZone::getTagManagerUrl() const {
    return m_tag_manager_url;
}
void OAIZone::setTagManagerUrl(const QString &tag_manager_url) {
    m_tag_manager_url = tag_manager_url;
    m_tag_manager_url_isSet = true;
}

bool OAIZone::is_tag_manager_url_Set() const{
    return m_tag_manager_url_isSet;
}

bool OAIZone::is_tag_manager_url_Valid() const{
    return m_tag_manager_url_isValid;
}

OAIZoneTypeRestriction OAIZone::getTypeRestriction() const {
    return m_type_restriction;
}
void OAIZone::setTypeRestriction(const OAIZoneTypeRestriction &type_restriction) {
    m_type_restriction = type_restriction;
    m_type_restriction_isSet = true;
}

bool OAIZone::is_type_restriction_Set() const{
    return m_type_restriction_isSet;
}

bool OAIZone::is_type_restriction_Valid() const{
    return m_type_restriction_isValid;
}

QString OAIZone::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIZone::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIZone::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIZone::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAIZone::getZoneId() const {
    return m_zone_id;
}
void OAIZone::setZoneId(const QString &zone_id) {
    m_zone_id = zone_id;
    m_zone_id_isSet = true;
}

bool OAIZone::is_zone_id_Set() const{
    return m_zone_id_isSet;
}

bool OAIZone::is_zone_id_Valid() const{
    return m_zone_id_isValid;
}

bool OAIZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boundary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_container.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_manager_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
