/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGalleryReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGalleryReference::OAIGalleryReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGalleryReference::OAIGalleryReference() {
    this->initializeModel();
}

OAIGalleryReference::~OAIGalleryReference() {}

void OAIGalleryReference::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_is_modified_isSet = false;
    m_is_modified_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGalleryReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGalleryReference::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_is_modified_isValid = ::OpenAPI::fromJsonValue(m_is_modified, json[QString("isModified")]);
    m_is_modified_isSet = !json[QString("isModified")].isNull() && m_is_modified_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGalleryReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGalleryReference::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_is_modified_isSet) {
        obj.insert(QString("isModified"), ::OpenAPI::toJsonValue(m_is_modified));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGalleryReference::getHost() const {
    return m_host;
}
void OAIGalleryReference::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGalleryReference::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGalleryReference::is_host_Valid() const{
    return m_host_isValid;
}

bool OAIGalleryReference::isIsModified() const {
    return m_is_modified;
}
void OAIGalleryReference::setIsModified(const bool &is_modified) {
    m_is_modified = is_modified;
    m_is_modified_isSet = true;
}

bool OAIGalleryReference::is_is_modified_Set() const{
    return m_is_modified_isSet;
}

bool OAIGalleryReference::is_is_modified_Valid() const{
    return m_is_modified_isValid;
}

QString OAIGalleryReference::getOwner() const {
    return m_owner;
}
void OAIGalleryReference::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGalleryReference::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGalleryReference::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIGalleryReference::getRepository() const {
    return m_repository;
}
void OAIGalleryReference::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIGalleryReference::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIGalleryReference::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIGalleryReference::getSignature() const {
    return m_signature;
}
void OAIGalleryReference::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIGalleryReference::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIGalleryReference::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIGalleryReference::getVersion() const {
    return m_version;
}
void OAIGalleryReference::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGalleryReference::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGalleryReference::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGalleryReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGalleryReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
