/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPermission::OAIUserPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPermission::OAIUserPermission() {
    this->initializeModel();
}

OAIUserPermission::~OAIUserPermission() {}

void OAIUserPermission::initializeModel() {

    m_account_access_isSet = false;
    m_account_access_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_container_access_isSet = false;
    m_container_access_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIUserPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPermission::fromJsonObject(QJsonObject json) {

    m_account_access_isValid = ::OpenAPI::fromJsonValue(m_account_access, json[QString("accountAccess")]);
    m_account_access_isSet = !json[QString("accountAccess")].isNull() && m_account_access_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_container_access_isValid = ::OpenAPI::fromJsonValue(m_container_access, json[QString("containerAccess")]);
    m_container_access_isSet = !json[QString("containerAccess")].isNull() && m_container_access_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIUserPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_account_access.isSet()) {
        obj.insert(QString("accountAccess"), ::OpenAPI::toJsonValue(m_account_access));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_container_access.size() > 0) {
        obj.insert(QString("containerAccess"), ::OpenAPI::toJsonValue(m_container_access));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

OAIAccountAccess OAIUserPermission::getAccountAccess() const {
    return m_account_access;
}
void OAIUserPermission::setAccountAccess(const OAIAccountAccess &account_access) {
    m_account_access = account_access;
    m_account_access_isSet = true;
}

bool OAIUserPermission::is_account_access_Set() const{
    return m_account_access_isSet;
}

bool OAIUserPermission::is_account_access_Valid() const{
    return m_account_access_isValid;
}

QString OAIUserPermission::getAccountId() const {
    return m_account_id;
}
void OAIUserPermission::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUserPermission::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUserPermission::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAIContainerAccess> OAIUserPermission::getContainerAccess() const {
    return m_container_access;
}
void OAIUserPermission::setContainerAccess(const QList<OAIContainerAccess> &container_access) {
    m_container_access = container_access;
    m_container_access_isSet = true;
}

bool OAIUserPermission::is_container_access_Set() const{
    return m_container_access_isSet;
}

bool OAIUserPermission::is_container_access_Valid() const{
    return m_container_access_isValid;
}

QString OAIUserPermission::getEmailAddress() const {
    return m_email_address;
}
void OAIUserPermission::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUserPermission::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUserPermission::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIUserPermission::getPath() const {
    return m_path;
}
void OAIUserPermission::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIUserPermission::is_path_Set() const{
    return m_path_isSet;
}

bool OAIUserPermission::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIUserPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_access.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
