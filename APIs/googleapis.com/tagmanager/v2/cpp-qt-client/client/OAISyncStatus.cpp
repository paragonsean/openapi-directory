/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncStatus::OAISyncStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncStatus::OAISyncStatus() {
    this->initializeModel();
}

OAISyncStatus::~OAISyncStatus() {}

void OAISyncStatus::initializeModel() {

    m_merge_conflict_isSet = false;
    m_merge_conflict_isValid = false;

    m_sync_error_isSet = false;
    m_sync_error_isValid = false;
}

void OAISyncStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncStatus::fromJsonObject(QJsonObject json) {

    m_merge_conflict_isValid = ::OpenAPI::fromJsonValue(m_merge_conflict, json[QString("mergeConflict")]);
    m_merge_conflict_isSet = !json[QString("mergeConflict")].isNull() && m_merge_conflict_isValid;

    m_sync_error_isValid = ::OpenAPI::fromJsonValue(m_sync_error, json[QString("syncError")]);
    m_sync_error_isSet = !json[QString("syncError")].isNull() && m_sync_error_isValid;
}

QString OAISyncStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_merge_conflict_isSet) {
        obj.insert(QString("mergeConflict"), ::OpenAPI::toJsonValue(m_merge_conflict));
    }
    if (m_sync_error_isSet) {
        obj.insert(QString("syncError"), ::OpenAPI::toJsonValue(m_sync_error));
    }
    return obj;
}

bool OAISyncStatus::isMergeConflict() const {
    return m_merge_conflict;
}
void OAISyncStatus::setMergeConflict(const bool &merge_conflict) {
    m_merge_conflict = merge_conflict;
    m_merge_conflict_isSet = true;
}

bool OAISyncStatus::is_merge_conflict_Set() const{
    return m_merge_conflict_isSet;
}

bool OAISyncStatus::is_merge_conflict_Valid() const{
    return m_merge_conflict_isValid;
}

bool OAISyncStatus::isSyncError() const {
    return m_sync_error;
}
void OAISyncStatus::setSyncError(const bool &sync_error) {
    m_sync_error = sync_error;
    m_sync_error_isSet = true;
}

bool OAISyncStatus::is_sync_error_Set() const{
    return m_sync_error_isSet;
}

bool OAISyncStatus::is_sync_error_Valid() const{
    return m_sync_error_isValid;
}

bool OAISyncStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merge_conflict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_error_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
