/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerAccess::OAIContainerAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerAccess::OAIContainerAccess() {
    this->initializeModel();
}

OAIContainerAccess::~OAIContainerAccess() {}

void OAIContainerAccess::initializeModel() {

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;
}

void OAIContainerAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerAccess::fromJsonObject(QJsonObject json) {

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;
}

QString OAIContainerAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    return obj;
}

QString OAIContainerAccess::getContainerId() const {
    return m_container_id;
}
void OAIContainerAccess::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIContainerAccess::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIContainerAccess::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIContainerAccess::getPermission() const {
    return m_permission;
}
void OAIContainerAccess::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIContainerAccess::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIContainerAccess::is_permission_Valid() const{
    return m_permission_isValid;
}

bool OAIContainerAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
