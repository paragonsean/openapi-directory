/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountFeatures.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountFeatures::OAIAccountFeatures(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountFeatures::OAIAccountFeatures() {
    this->initializeModel();
}

OAIAccountFeatures::~OAIAccountFeatures() {}

void OAIAccountFeatures::initializeModel() {

    m_support_multiple_containers_isSet = false;
    m_support_multiple_containers_isValid = false;

    m_support_user_permissions_isSet = false;
    m_support_user_permissions_isValid = false;
}

void OAIAccountFeatures::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountFeatures::fromJsonObject(QJsonObject json) {

    m_support_multiple_containers_isValid = ::OpenAPI::fromJsonValue(m_support_multiple_containers, json[QString("supportMultipleContainers")]);
    m_support_multiple_containers_isSet = !json[QString("supportMultipleContainers")].isNull() && m_support_multiple_containers_isValid;

    m_support_user_permissions_isValid = ::OpenAPI::fromJsonValue(m_support_user_permissions, json[QString("supportUserPermissions")]);
    m_support_user_permissions_isSet = !json[QString("supportUserPermissions")].isNull() && m_support_user_permissions_isValid;
}

QString OAIAccountFeatures::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountFeatures::asJsonObject() const {
    QJsonObject obj;
    if (m_support_multiple_containers_isSet) {
        obj.insert(QString("supportMultipleContainers"), ::OpenAPI::toJsonValue(m_support_multiple_containers));
    }
    if (m_support_user_permissions_isSet) {
        obj.insert(QString("supportUserPermissions"), ::OpenAPI::toJsonValue(m_support_user_permissions));
    }
    return obj;
}

bool OAIAccountFeatures::isSupportMultipleContainers() const {
    return m_support_multiple_containers;
}
void OAIAccountFeatures::setSupportMultipleContainers(const bool &support_multiple_containers) {
    m_support_multiple_containers = support_multiple_containers;
    m_support_multiple_containers_isSet = true;
}

bool OAIAccountFeatures::is_support_multiple_containers_Set() const{
    return m_support_multiple_containers_isSet;
}

bool OAIAccountFeatures::is_support_multiple_containers_Valid() const{
    return m_support_multiple_containers_isValid;
}

bool OAIAccountFeatures::isSupportUserPermissions() const {
    return m_support_user_permissions;
}
void OAIAccountFeatures::setSupportUserPermissions(const bool &support_user_permissions) {
    m_support_user_permissions = support_user_permissions;
    m_support_user_permissions_isSet = true;
}

bool OAIAccountFeatures::is_support_user_permissions_Set() const{
    return m_support_user_permissions_isSet;
}

bool OAIAccountFeatures::is_support_user_permissions_Valid() const{
    return m_support_user_permissions_isValid;
}

bool OAIAccountFeatures::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_support_multiple_containers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_user_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountFeatures::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
