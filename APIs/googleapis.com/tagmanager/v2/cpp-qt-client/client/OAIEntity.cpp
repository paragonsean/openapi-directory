/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity::OAIEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity::OAIEntity() {
    this->initializeModel();
}

OAIEntity::~OAIEntity() {}

void OAIEntity::initializeModel() {

    m_built_in_variable_isSet = false;
    m_built_in_variable_isValid = false;

    m_change_status_isSet = false;
    m_change_status_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_custom_template_isSet = false;
    m_custom_template_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_gtag_config_isSet = false;
    m_gtag_config_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_transformation_isSet = false;
    m_transformation_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity::fromJsonObject(QJsonObject json) {

    m_built_in_variable_isValid = ::OpenAPI::fromJsonValue(m_built_in_variable, json[QString("builtInVariable")]);
    m_built_in_variable_isSet = !json[QString("builtInVariable")].isNull() && m_built_in_variable_isValid;

    m_change_status_isValid = ::OpenAPI::fromJsonValue(m_change_status, json[QString("changeStatus")]);
    m_change_status_isSet = !json[QString("changeStatus")].isNull() && m_change_status_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_custom_template_isValid = ::OpenAPI::fromJsonValue(m_custom_template, json[QString("customTemplate")]);
    m_custom_template_isSet = !json[QString("customTemplate")].isNull() && m_custom_template_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_gtag_config_isValid = ::OpenAPI::fromJsonValue(m_gtag_config, json[QString("gtagConfig")]);
    m_gtag_config_isSet = !json[QString("gtagConfig")].isNull() && m_gtag_config_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_transformation_isValid = ::OpenAPI::fromJsonValue(m_transformation, json[QString("transformation")]);
    m_transformation_isSet = !json[QString("transformation")].isNull() && m_transformation_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_built_in_variable.isSet()) {
        obj.insert(QString("builtInVariable"), ::OpenAPI::toJsonValue(m_built_in_variable));
    }
    if (m_change_status_isSet) {
        obj.insert(QString("changeStatus"), ::OpenAPI::toJsonValue(m_change_status));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_custom_template.isSet()) {
        obj.insert(QString("customTemplate"), ::OpenAPI::toJsonValue(m_custom_template));
    }
    if (m_folder.isSet()) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_gtag_config.isSet()) {
        obj.insert(QString("gtagConfig"), ::OpenAPI::toJsonValue(m_gtag_config));
    }
    if (m_tag.isSet()) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_transformation.isSet()) {
        obj.insert(QString("transformation"), ::OpenAPI::toJsonValue(m_transformation));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_variable.isSet()) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    if (m_zone.isSet()) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

OAIBuiltInVariable OAIEntity::getBuiltInVariable() const {
    return m_built_in_variable;
}
void OAIEntity::setBuiltInVariable(const OAIBuiltInVariable &built_in_variable) {
    m_built_in_variable = built_in_variable;
    m_built_in_variable_isSet = true;
}

bool OAIEntity::is_built_in_variable_Set() const{
    return m_built_in_variable_isSet;
}

bool OAIEntity::is_built_in_variable_Valid() const{
    return m_built_in_variable_isValid;
}

QString OAIEntity::getChangeStatus() const {
    return m_change_status;
}
void OAIEntity::setChangeStatus(const QString &change_status) {
    m_change_status = change_status;
    m_change_status_isSet = true;
}

bool OAIEntity::is_change_status_Set() const{
    return m_change_status_isSet;
}

bool OAIEntity::is_change_status_Valid() const{
    return m_change_status_isValid;
}

OAIClient OAIEntity::getClient() const {
    return m_client;
}
void OAIEntity::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIEntity::is_client_Set() const{
    return m_client_isSet;
}

bool OAIEntity::is_client_Valid() const{
    return m_client_isValid;
}

OAICustomTemplate OAIEntity::getCustomTemplate() const {
    return m_custom_template;
}
void OAIEntity::setCustomTemplate(const OAICustomTemplate &custom_template) {
    m_custom_template = custom_template;
    m_custom_template_isSet = true;
}

bool OAIEntity::is_custom_template_Set() const{
    return m_custom_template_isSet;
}

bool OAIEntity::is_custom_template_Valid() const{
    return m_custom_template_isValid;
}

OAIFolder OAIEntity::getFolder() const {
    return m_folder;
}
void OAIEntity::setFolder(const OAIFolder &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIEntity::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIEntity::is_folder_Valid() const{
    return m_folder_isValid;
}

OAIGtagConfig OAIEntity::getGtagConfig() const {
    return m_gtag_config;
}
void OAIEntity::setGtagConfig(const OAIGtagConfig &gtag_config) {
    m_gtag_config = gtag_config;
    m_gtag_config_isSet = true;
}

bool OAIEntity::is_gtag_config_Set() const{
    return m_gtag_config_isSet;
}

bool OAIEntity::is_gtag_config_Valid() const{
    return m_gtag_config_isValid;
}

OAITag OAIEntity::getTag() const {
    return m_tag;
}
void OAIEntity::setTag(const OAITag &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIEntity::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIEntity::is_tag_Valid() const{
    return m_tag_isValid;
}

OAITransformation OAIEntity::getTransformation() const {
    return m_transformation;
}
void OAIEntity::setTransformation(const OAITransformation &transformation) {
    m_transformation = transformation;
    m_transformation_isSet = true;
}

bool OAIEntity::is_transformation_Set() const{
    return m_transformation_isSet;
}

bool OAIEntity::is_transformation_Valid() const{
    return m_transformation_isValid;
}

OAITrigger OAIEntity::getTrigger() const {
    return m_trigger;
}
void OAIEntity::setTrigger(const OAITrigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIEntity::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIEntity::is_trigger_Valid() const{
    return m_trigger_isValid;
}

OAIVariable OAIEntity::getVariable() const {
    return m_variable;
}
void OAIEntity::setVariable(const OAIVariable &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIEntity::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIEntity::is_variable_Valid() const{
    return m_variable_isValid;
}

OAIZone OAIEntity::getZone() const {
    return m_zone;
}
void OAIEntity::setZone(const OAIZone &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIEntity::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIEntity::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_built_in_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtag_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
