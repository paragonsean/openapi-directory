/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergeConflict.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergeConflict::OAIMergeConflict(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergeConflict::OAIMergeConflict() {
    this->initializeModel();
}

OAIMergeConflict::~OAIMergeConflict() {}

void OAIMergeConflict::initializeModel() {

    m_entity_in_base_version_isSet = false;
    m_entity_in_base_version_isValid = false;

    m_entity_in_workspace_isSet = false;
    m_entity_in_workspace_isValid = false;
}

void OAIMergeConflict::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergeConflict::fromJsonObject(QJsonObject json) {

    m_entity_in_base_version_isValid = ::OpenAPI::fromJsonValue(m_entity_in_base_version, json[QString("entityInBaseVersion")]);
    m_entity_in_base_version_isSet = !json[QString("entityInBaseVersion")].isNull() && m_entity_in_base_version_isValid;

    m_entity_in_workspace_isValid = ::OpenAPI::fromJsonValue(m_entity_in_workspace, json[QString("entityInWorkspace")]);
    m_entity_in_workspace_isSet = !json[QString("entityInWorkspace")].isNull() && m_entity_in_workspace_isValid;
}

QString OAIMergeConflict::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergeConflict::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_in_base_version.isSet()) {
        obj.insert(QString("entityInBaseVersion"), ::OpenAPI::toJsonValue(m_entity_in_base_version));
    }
    if (m_entity_in_workspace.isSet()) {
        obj.insert(QString("entityInWorkspace"), ::OpenAPI::toJsonValue(m_entity_in_workspace));
    }
    return obj;
}

OAIEntity OAIMergeConflict::getEntityInBaseVersion() const {
    return m_entity_in_base_version;
}
void OAIMergeConflict::setEntityInBaseVersion(const OAIEntity &entity_in_base_version) {
    m_entity_in_base_version = entity_in_base_version;
    m_entity_in_base_version_isSet = true;
}

bool OAIMergeConflict::is_entity_in_base_version_Set() const{
    return m_entity_in_base_version_isSet;
}

bool OAIMergeConflict::is_entity_in_base_version_Valid() const{
    return m_entity_in_base_version_isValid;
}

OAIEntity OAIMergeConflict::getEntityInWorkspace() const {
    return m_entity_in_workspace;
}
void OAIMergeConflict::setEntityInWorkspace(const OAIEntity &entity_in_workspace) {
    m_entity_in_workspace = entity_in_workspace;
    m_entity_in_workspace_isSet = true;
}

bool OAIMergeConflict::is_entity_in_workspace_Set() const{
    return m_entity_in_workspace_isSet;
}

bool OAIMergeConflict::is_entity_in_workspace_Valid() const{
    return m_entity_in_workspace_isValid;
}

bool OAIMergeConflict::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_in_base_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_in_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergeConflict::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
