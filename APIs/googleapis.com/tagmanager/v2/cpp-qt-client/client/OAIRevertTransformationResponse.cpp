/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevertTransformationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevertTransformationResponse::OAIRevertTransformationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevertTransformationResponse::OAIRevertTransformationResponse() {
    this->initializeModel();
}

OAIRevertTransformationResponse::~OAIRevertTransformationResponse() {}

void OAIRevertTransformationResponse::initializeModel() {

    m_transformation_isSet = false;
    m_transformation_isValid = false;
}

void OAIRevertTransformationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevertTransformationResponse::fromJsonObject(QJsonObject json) {

    m_transformation_isValid = ::OpenAPI::fromJsonValue(m_transformation, json[QString("transformation")]);
    m_transformation_isSet = !json[QString("transformation")].isNull() && m_transformation_isValid;
}

QString OAIRevertTransformationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevertTransformationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_transformation.isSet()) {
        obj.insert(QString("transformation"), ::OpenAPI::toJsonValue(m_transformation));
    }
    return obj;
}

OAITransformation OAIRevertTransformationResponse::getTransformation() const {
    return m_transformation;
}
void OAIRevertTransformationResponse::setTransformation(const OAITransformation &transformation) {
    m_transformation = transformation;
    m_transformation_isSet = true;
}

bool OAIRevertTransformationResponse::is_transformation_Set() const{
    return m_transformation_isSet;
}

bool OAIRevertTransformationResponse::is_transformation_Valid() const{
    return m_transformation_isValid;
}

bool OAIRevertTransformationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevertTransformationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
