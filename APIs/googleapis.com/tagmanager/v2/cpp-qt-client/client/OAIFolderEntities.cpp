/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolderEntities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolderEntities::OAIFolderEntities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolderEntities::OAIFolderEntities() {
    this->initializeModel();
}

OAIFolderEntities::~OAIFolderEntities() {}

void OAIFolderEntities::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;
}

void OAIFolderEntities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolderEntities::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;
}

QString OAIFolderEntities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolderEntities::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_tag.size() > 0) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_trigger.size() > 0) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_variable.size() > 0) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    return obj;
}

QString OAIFolderEntities::getNextPageToken() const {
    return m_next_page_token;
}
void OAIFolderEntities::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIFolderEntities::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIFolderEntities::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAITag> OAIFolderEntities::getTag() const {
    return m_tag;
}
void OAIFolderEntities::setTag(const QList<OAITag> &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIFolderEntities::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIFolderEntities::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<OAITrigger> OAIFolderEntities::getTrigger() const {
    return m_trigger;
}
void OAIFolderEntities::setTrigger(const QList<OAITrigger> &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIFolderEntities::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIFolderEntities::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QList<OAIVariable> OAIFolderEntities::getVariable() const {
    return m_variable;
}
void OAIFolderEntities::setVariable(const QList<OAIVariable> &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIFolderEntities::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIFolderEntities::is_variable_Valid() const{
    return m_variable_isValid;
}

bool OAIFolderEntities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolderEntities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
