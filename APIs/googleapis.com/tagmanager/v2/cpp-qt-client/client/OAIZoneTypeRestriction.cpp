/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZoneTypeRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZoneTypeRestriction::OAIZoneTypeRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZoneTypeRestriction::OAIZoneTypeRestriction() {
    this->initializeModel();
}

OAIZoneTypeRestriction::~OAIZoneTypeRestriction() {}

void OAIZoneTypeRestriction::initializeModel() {

    m_enable_isSet = false;
    m_enable_isValid = false;

    m_whitelisted_type_id_isSet = false;
    m_whitelisted_type_id_isValid = false;
}

void OAIZoneTypeRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZoneTypeRestriction::fromJsonObject(QJsonObject json) {

    m_enable_isValid = ::OpenAPI::fromJsonValue(m_enable, json[QString("enable")]);
    m_enable_isSet = !json[QString("enable")].isNull() && m_enable_isValid;

    m_whitelisted_type_id_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_type_id, json[QString("whitelistedTypeId")]);
    m_whitelisted_type_id_isSet = !json[QString("whitelistedTypeId")].isNull() && m_whitelisted_type_id_isValid;
}

QString OAIZoneTypeRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZoneTypeRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_isSet) {
        obj.insert(QString("enable"), ::OpenAPI::toJsonValue(m_enable));
    }
    if (m_whitelisted_type_id.size() > 0) {
        obj.insert(QString("whitelistedTypeId"), ::OpenAPI::toJsonValue(m_whitelisted_type_id));
    }
    return obj;
}

bool OAIZoneTypeRestriction::isEnable() const {
    return m_enable;
}
void OAIZoneTypeRestriction::setEnable(const bool &enable) {
    m_enable = enable;
    m_enable_isSet = true;
}

bool OAIZoneTypeRestriction::is_enable_Set() const{
    return m_enable_isSet;
}

bool OAIZoneTypeRestriction::is_enable_Valid() const{
    return m_enable_isValid;
}

QList<QString> OAIZoneTypeRestriction::getWhitelistedTypeId() const {
    return m_whitelisted_type_id;
}
void OAIZoneTypeRestriction::setWhitelistedTypeId(const QList<QString> &whitelisted_type_id) {
    m_whitelisted_type_id = whitelisted_type_id;
    m_whitelisted_type_id_isSet = true;
}

bool OAIZoneTypeRestriction::is_whitelisted_type_id_Set() const{
    return m_whitelisted_type_id_isSet;
}

bool OAIZoneTypeRestriction::is_whitelisted_type_id_Valid() const{
    return m_whitelisted_type_id_isValid;
}

bool OAIZoneTypeRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_type_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZoneTypeRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
