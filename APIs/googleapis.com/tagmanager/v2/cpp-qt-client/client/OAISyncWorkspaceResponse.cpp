/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncWorkspaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncWorkspaceResponse::OAISyncWorkspaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncWorkspaceResponse::OAISyncWorkspaceResponse() {
    this->initializeModel();
}

OAISyncWorkspaceResponse::~OAISyncWorkspaceResponse() {}

void OAISyncWorkspaceResponse::initializeModel() {

    m_merge_conflict_isSet = false;
    m_merge_conflict_isValid = false;

    m_sync_status_isSet = false;
    m_sync_status_isValid = false;
}

void OAISyncWorkspaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncWorkspaceResponse::fromJsonObject(QJsonObject json) {

    m_merge_conflict_isValid = ::OpenAPI::fromJsonValue(m_merge_conflict, json[QString("mergeConflict")]);
    m_merge_conflict_isSet = !json[QString("mergeConflict")].isNull() && m_merge_conflict_isValid;

    m_sync_status_isValid = ::OpenAPI::fromJsonValue(m_sync_status, json[QString("syncStatus")]);
    m_sync_status_isSet = !json[QString("syncStatus")].isNull() && m_sync_status_isValid;
}

QString OAISyncWorkspaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncWorkspaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_merge_conflict.size() > 0) {
        obj.insert(QString("mergeConflict"), ::OpenAPI::toJsonValue(m_merge_conflict));
    }
    if (m_sync_status.isSet()) {
        obj.insert(QString("syncStatus"), ::OpenAPI::toJsonValue(m_sync_status));
    }
    return obj;
}

QList<OAIMergeConflict> OAISyncWorkspaceResponse::getMergeConflict() const {
    return m_merge_conflict;
}
void OAISyncWorkspaceResponse::setMergeConflict(const QList<OAIMergeConflict> &merge_conflict) {
    m_merge_conflict = merge_conflict;
    m_merge_conflict_isSet = true;
}

bool OAISyncWorkspaceResponse::is_merge_conflict_Set() const{
    return m_merge_conflict_isSet;
}

bool OAISyncWorkspaceResponse::is_merge_conflict_Valid() const{
    return m_merge_conflict_isValid;
}

OAISyncStatus OAISyncWorkspaceResponse::getSyncStatus() const {
    return m_sync_status;
}
void OAISyncWorkspaceResponse::setSyncStatus(const OAISyncStatus &sync_status) {
    m_sync_status = sync_status;
    m_sync_status_isSet = true;
}

bool OAISyncWorkspaceResponse::is_sync_status_Set() const{
    return m_sync_status_isSet;
}

bool OAISyncWorkspaceResponse::is_sync_status_Valid() const{
    return m_sync_status_isValid;
}

bool OAISyncWorkspaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merge_conflict.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncWorkspaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
