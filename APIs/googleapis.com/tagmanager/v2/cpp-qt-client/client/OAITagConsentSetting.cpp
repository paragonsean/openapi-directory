/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagConsentSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagConsentSetting::OAITagConsentSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagConsentSetting::OAITagConsentSetting() {
    this->initializeModel();
}

OAITagConsentSetting::~OAITagConsentSetting() {}

void OAITagConsentSetting::initializeModel() {

    m_consent_status_isSet = false;
    m_consent_status_isValid = false;

    m_consent_type_isSet = false;
    m_consent_type_isValid = false;
}

void OAITagConsentSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagConsentSetting::fromJsonObject(QJsonObject json) {

    m_consent_status_isValid = ::OpenAPI::fromJsonValue(m_consent_status, json[QString("consentStatus")]);
    m_consent_status_isSet = !json[QString("consentStatus")].isNull() && m_consent_status_isValid;

    m_consent_type_isValid = ::OpenAPI::fromJsonValue(m_consent_type, json[QString("consentType")]);
    m_consent_type_isSet = !json[QString("consentType")].isNull() && m_consent_type_isValid;
}

QString OAITagConsentSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagConsentSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_status_isSet) {
        obj.insert(QString("consentStatus"), ::OpenAPI::toJsonValue(m_consent_status));
    }
    if (m_consent_type.isSet()) {
        obj.insert(QString("consentType"), ::OpenAPI::toJsonValue(m_consent_type));
    }
    return obj;
}

QString OAITagConsentSetting::getConsentStatus() const {
    return m_consent_status;
}
void OAITagConsentSetting::setConsentStatus(const QString &consent_status) {
    m_consent_status = consent_status;
    m_consent_status_isSet = true;
}

bool OAITagConsentSetting::is_consent_status_Set() const{
    return m_consent_status_isSet;
}

bool OAITagConsentSetting::is_consent_status_Valid() const{
    return m_consent_status_isValid;
}

OAIParameter OAITagConsentSetting::getConsentType() const {
    return m_consent_type;
}
void OAITagConsentSetting::setConsentType(const OAIParameter &consent_type) {
    m_consent_type = consent_type;
    m_consent_type_isSet = true;
}

bool OAITagConsentSetting::is_consent_type_Set() const{
    return m_consent_type_isSet;
}

bool OAITagConsentSetting::is_consent_type_Valid() const{
    return m_consent_type_isValid;
}

bool OAITagConsentSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagConsentSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
