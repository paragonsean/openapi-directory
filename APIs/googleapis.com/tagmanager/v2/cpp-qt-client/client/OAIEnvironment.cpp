/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_authorization_code_isSet = false;
    m_authorization_code_isValid = false;

    m_authorization_timestamp_isSet = false;
    m_authorization_timestamp_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_container_version_id_isSet = false;
    m_container_version_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enable_debug_isSet = false;
    m_enable_debug_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_tag_manager_url_isSet = false;
    m_tag_manager_url_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIEnvironment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironment::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_authorization_code_isValid = ::OpenAPI::fromJsonValue(m_authorization_code, json[QString("authorizationCode")]);
    m_authorization_code_isSet = !json[QString("authorizationCode")].isNull() && m_authorization_code_isValid;

    m_authorization_timestamp_isValid = ::OpenAPI::fromJsonValue(m_authorization_timestamp, json[QString("authorizationTimestamp")]);
    m_authorization_timestamp_isSet = !json[QString("authorizationTimestamp")].isNull() && m_authorization_timestamp_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_container_version_id_isValid = ::OpenAPI::fromJsonValue(m_container_version_id, json[QString("containerVersionId")]);
    m_container_version_id_isSet = !json[QString("containerVersionId")].isNull() && m_container_version_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enable_debug_isValid = ::OpenAPI::fromJsonValue(m_enable_debug, json[QString("enableDebug")]);
    m_enable_debug_isSet = !json[QString("enableDebug")].isNull() && m_enable_debug_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environmentId")]);
    m_environment_id_isSet = !json[QString("environmentId")].isNull() && m_environment_id_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_tag_manager_url_isValid = ::OpenAPI::fromJsonValue(m_tag_manager_url, json[QString("tagManagerUrl")]);
    m_tag_manager_url_isSet = !json[QString("tagManagerUrl")].isNull() && m_tag_manager_url_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIEnvironment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironment::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_authorization_code_isSet) {
        obj.insert(QString("authorizationCode"), ::OpenAPI::toJsonValue(m_authorization_code));
    }
    if (m_authorization_timestamp_isSet) {
        obj.insert(QString("authorizationTimestamp"), ::OpenAPI::toJsonValue(m_authorization_timestamp));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_container_version_id_isSet) {
        obj.insert(QString("containerVersionId"), ::OpenAPI::toJsonValue(m_container_version_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enable_debug_isSet) {
        obj.insert(QString("enableDebug"), ::OpenAPI::toJsonValue(m_enable_debug));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environmentId"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_tag_manager_url_isSet) {
        obj.insert(QString("tagManagerUrl"), ::OpenAPI::toJsonValue(m_tag_manager_url));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIEnvironment::getAccountId() const {
    return m_account_id;
}
void OAIEnvironment::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIEnvironment::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIEnvironment::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIEnvironment::getAuthorizationCode() const {
    return m_authorization_code;
}
void OAIEnvironment::setAuthorizationCode(const QString &authorization_code) {
    m_authorization_code = authorization_code;
    m_authorization_code_isSet = true;
}

bool OAIEnvironment::is_authorization_code_Set() const{
    return m_authorization_code_isSet;
}

bool OAIEnvironment::is_authorization_code_Valid() const{
    return m_authorization_code_isValid;
}

QString OAIEnvironment::getAuthorizationTimestamp() const {
    return m_authorization_timestamp;
}
void OAIEnvironment::setAuthorizationTimestamp(const QString &authorization_timestamp) {
    m_authorization_timestamp = authorization_timestamp;
    m_authorization_timestamp_isSet = true;
}

bool OAIEnvironment::is_authorization_timestamp_Set() const{
    return m_authorization_timestamp_isSet;
}

bool OAIEnvironment::is_authorization_timestamp_Valid() const{
    return m_authorization_timestamp_isValid;
}

QString OAIEnvironment::getContainerId() const {
    return m_container_id;
}
void OAIEnvironment::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIEnvironment::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIEnvironment::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIEnvironment::getContainerVersionId() const {
    return m_container_version_id;
}
void OAIEnvironment::setContainerVersionId(const QString &container_version_id) {
    m_container_version_id = container_version_id;
    m_container_version_id_isSet = true;
}

bool OAIEnvironment::is_container_version_id_Set() const{
    return m_container_version_id_isSet;
}

bool OAIEnvironment::is_container_version_id_Valid() const{
    return m_container_version_id_isValid;
}

QString OAIEnvironment::getDescription() const {
    return m_description;
}
void OAIEnvironment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEnvironment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEnvironment::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIEnvironment::isEnableDebug() const {
    return m_enable_debug;
}
void OAIEnvironment::setEnableDebug(const bool &enable_debug) {
    m_enable_debug = enable_debug;
    m_enable_debug_isSet = true;
}

bool OAIEnvironment::is_enable_debug_Set() const{
    return m_enable_debug_isSet;
}

bool OAIEnvironment::is_enable_debug_Valid() const{
    return m_enable_debug_isValid;
}

QString OAIEnvironment::getEnvironmentId() const {
    return m_environment_id;
}
void OAIEnvironment::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIEnvironment::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIEnvironment::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QString OAIEnvironment::getFingerprint() const {
    return m_fingerprint;
}
void OAIEnvironment::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIEnvironment::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIEnvironment::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIEnvironment::getName() const {
    return m_name;
}
void OAIEnvironment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnvironment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnvironment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEnvironment::getPath() const {
    return m_path;
}
void OAIEnvironment::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIEnvironment::is_path_Set() const{
    return m_path_isSet;
}

bool OAIEnvironment::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIEnvironment::getTagManagerUrl() const {
    return m_tag_manager_url;
}
void OAIEnvironment::setTagManagerUrl(const QString &tag_manager_url) {
    m_tag_manager_url = tag_manager_url;
    m_tag_manager_url_isSet = true;
}

bool OAIEnvironment::is_tag_manager_url_Set() const{
    return m_tag_manager_url_isSet;
}

bool OAIEnvironment::is_tag_manager_url_Valid() const{
    return m_tag_manager_url_isValid;
}

QString OAIEnvironment::getType() const {
    return m_type;
}
void OAIEnvironment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEnvironment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEnvironment::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEnvironment::getUrl() const {
    return m_url;
}
void OAIEnvironment::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEnvironment::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEnvironment::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIEnvironment::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIEnvironment::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIEnvironment::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIEnvironment::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIEnvironment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_manager_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
