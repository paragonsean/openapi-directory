# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.built_in_variable import BuiltInVariable
from openapi_server.models.client import Client
from openapi_server.models.custom_template import CustomTemplate
from openapi_server.models.folder import Folder
from openapi_server.models.gtag_config import GtagConfig
from openapi_server.models.tag import Tag
from openapi_server.models.transformation import Transformation
from openapi_server.models.trigger import Trigger
from openapi_server.models.variable import Variable
from openapi_server.models.zone import Zone
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, built_in_variable: BuiltInVariable=None, change_status: str=None, client: Client=None, custom_template: CustomTemplate=None, folder: Folder=None, gtag_config: GtagConfig=None, tag: Tag=None, transformation: Transformation=None, trigger: Trigger=None, variable: Variable=None, zone: Zone=None):
        """Entity - a model defined in OpenAPI

        :param built_in_variable: The built_in_variable of this Entity.
        :param change_status: The change_status of this Entity.
        :param client: The client of this Entity.
        :param custom_template: The custom_template of this Entity.
        :param folder: The folder of this Entity.
        :param gtag_config: The gtag_config of this Entity.
        :param tag: The tag of this Entity.
        :param transformation: The transformation of this Entity.
        :param trigger: The trigger of this Entity.
        :param variable: The variable of this Entity.
        :param zone: The zone of this Entity.
        """
        self.openapi_types = {
            'built_in_variable': BuiltInVariable,
            'change_status': str,
            'client': Client,
            'custom_template': CustomTemplate,
            'folder': Folder,
            'gtag_config': GtagConfig,
            'tag': Tag,
            'transformation': Transformation,
            'trigger': Trigger,
            'variable': Variable,
            'zone': Zone
        }

        self.attribute_map = {
            'built_in_variable': 'builtInVariable',
            'change_status': 'changeStatus',
            'client': 'client',
            'custom_template': 'customTemplate',
            'folder': 'folder',
            'gtag_config': 'gtagConfig',
            'tag': 'tag',
            'transformation': 'transformation',
            'trigger': 'trigger',
            'variable': 'variable',
            'zone': 'zone'
        }

        self._built_in_variable = built_in_variable
        self._change_status = change_status
        self._client = client
        self._custom_template = custom_template
        self._folder = folder
        self._gtag_config = gtag_config
        self._tag = tag
        self._transformation = transformation
        self._trigger = trigger
        self._variable = variable
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def built_in_variable(self):
        """Gets the built_in_variable of this Entity.


        :return: The built_in_variable of this Entity.
        :rtype: BuiltInVariable
        """
        return self._built_in_variable

    @built_in_variable.setter
    def built_in_variable(self, built_in_variable):
        """Sets the built_in_variable of this Entity.


        :param built_in_variable: The built_in_variable of this Entity.
        :type built_in_variable: BuiltInVariable
        """

        self._built_in_variable = built_in_variable

    @property
    def change_status(self):
        """Gets the change_status of this Entity.

        Represents how the entity has been changed in the workspace.

        :return: The change_status of this Entity.
        :rtype: str
        """
        return self._change_status

    @change_status.setter
    def change_status(self, change_status):
        """Sets the change_status of this Entity.

        Represents how the entity has been changed in the workspace.

        :param change_status: The change_status of this Entity.
        :type change_status: str
        """
        allowed_values = ["changeStatusUnspecified", "none", "added", "deleted", "updated"]  # noqa: E501
        if change_status not in allowed_values:
            raise ValueError(
                "Invalid value for `change_status` ({0}), must be one of {1}"
                .format(change_status, allowed_values)
            )

        self._change_status = change_status

    @property
    def client(self):
        """Gets the client of this Entity.


        :return: The client of this Entity.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Entity.


        :param client: The client of this Entity.
        :type client: Client
        """

        self._client = client

    @property
    def custom_template(self):
        """Gets the custom_template of this Entity.


        :return: The custom_template of this Entity.
        :rtype: CustomTemplate
        """
        return self._custom_template

    @custom_template.setter
    def custom_template(self, custom_template):
        """Sets the custom_template of this Entity.


        :param custom_template: The custom_template of this Entity.
        :type custom_template: CustomTemplate
        """

        self._custom_template = custom_template

    @property
    def folder(self):
        """Gets the folder of this Entity.


        :return: The folder of this Entity.
        :rtype: Folder
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Entity.


        :param folder: The folder of this Entity.
        :type folder: Folder
        """

        self._folder = folder

    @property
    def gtag_config(self):
        """Gets the gtag_config of this Entity.


        :return: The gtag_config of this Entity.
        :rtype: GtagConfig
        """
        return self._gtag_config

    @gtag_config.setter
    def gtag_config(self, gtag_config):
        """Sets the gtag_config of this Entity.


        :param gtag_config: The gtag_config of this Entity.
        :type gtag_config: GtagConfig
        """

        self._gtag_config = gtag_config

    @property
    def tag(self):
        """Gets the tag of this Entity.


        :return: The tag of this Entity.
        :rtype: Tag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Entity.


        :param tag: The tag of this Entity.
        :type tag: Tag
        """

        self._tag = tag

    @property
    def transformation(self):
        """Gets the transformation of this Entity.


        :return: The transformation of this Entity.
        :rtype: Transformation
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation):
        """Sets the transformation of this Entity.


        :param transformation: The transformation of this Entity.
        :type transformation: Transformation
        """

        self._transformation = transformation

    @property
    def trigger(self):
        """Gets the trigger of this Entity.


        :return: The trigger of this Entity.
        :rtype: Trigger
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Entity.


        :param trigger: The trigger of this Entity.
        :type trigger: Trigger
        """

        self._trigger = trigger

    @property
    def variable(self):
        """Gets the variable of this Entity.


        :return: The variable of this Entity.
        :rtype: Variable
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this Entity.


        :param variable: The variable of this Entity.
        :type variable: Variable
        """

        self._variable = variable

    @property
    def zone(self):
        """Gets the zone of this Entity.


        :return: The zone of this Entity.
        :rtype: Zone
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Entity.


        :param zone: The zone of this Entity.
        :type zone: Zone
        """

        self._zone = zone
