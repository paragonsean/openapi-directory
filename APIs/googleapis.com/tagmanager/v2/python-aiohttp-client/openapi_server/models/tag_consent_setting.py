# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class TagConsentSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_status: str=None, consent_type: Parameter=None):
        """TagConsentSetting - a model defined in OpenAPI

        :param consent_status: The consent_status of this TagConsentSetting.
        :param consent_type: The consent_type of this TagConsentSetting.
        """
        self.openapi_types = {
            'consent_status': str,
            'consent_type': Parameter
        }

        self.attribute_map = {
            'consent_status': 'consentStatus',
            'consent_type': 'consentType'
        }

        self._consent_status = consent_status
        self._consent_type = consent_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagConsentSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagConsentSetting of this TagConsentSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_status(self):
        """Gets the consent_status of this TagConsentSetting.

        The tag's consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.

        :return: The consent_status of this TagConsentSetting.
        :rtype: str
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this TagConsentSetting.

        The tag's consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.

        :param consent_status: The consent_status of this TagConsentSetting.
        :type consent_status: str
        """
        allowed_values = ["notSet", "notNeeded", "needed"]  # noqa: E501
        if consent_status not in allowed_values:
            raise ValueError(
                "Invalid value for `consent_status` ({0}), must be one of {1}"
                .format(consent_status, allowed_values)
            )

        self._consent_status = consent_status

    @property
    def consent_type(self):
        """Gets the consent_type of this TagConsentSetting.


        :return: The consent_type of this TagConsentSetting.
        :rtype: Parameter
        """
        return self._consent_type

    @consent_type.setter
    def consent_type(self, consent_type):
        """Sets the consent_type of this TagConsentSetting.


        :param consent_type: The consent_type of this TagConsentSetting.
        :type consent_type: Parameter
        """

        self._consent_type = consent_type
