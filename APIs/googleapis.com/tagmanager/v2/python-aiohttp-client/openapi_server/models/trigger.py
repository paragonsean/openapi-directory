# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server.models.parameter import Parameter
from openapi_server import util


class Trigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, auto_event_filter: List[Condition]=None, check_validation: Parameter=None, container_id: str=None, continuous_time_min_milliseconds: Parameter=None, custom_event_filter: List[Condition]=None, event_name: Parameter=None, filter: List[Condition]=None, fingerprint: str=None, horizontal_scroll_percentage_list: Parameter=None, interval: Parameter=None, interval_seconds: Parameter=None, limit: Parameter=None, max_timer_length_seconds: Parameter=None, name: str=None, notes: str=None, parameter: List[Parameter]=None, parent_folder_id: str=None, path: str=None, selector: Parameter=None, tag_manager_url: str=None, total_time_min_milliseconds: Parameter=None, trigger_id: str=None, type: str=None, unique_trigger_id: Parameter=None, vertical_scroll_percentage_list: Parameter=None, visibility_selector: Parameter=None, visible_percentage_max: Parameter=None, visible_percentage_min: Parameter=None, wait_for_tags: Parameter=None, wait_for_tags_timeout: Parameter=None, workspace_id: str=None):
        """Trigger - a model defined in OpenAPI

        :param account_id: The account_id of this Trigger.
        :param auto_event_filter: The auto_event_filter of this Trigger.
        :param check_validation: The check_validation of this Trigger.
        :param container_id: The container_id of this Trigger.
        :param continuous_time_min_milliseconds: The continuous_time_min_milliseconds of this Trigger.
        :param custom_event_filter: The custom_event_filter of this Trigger.
        :param event_name: The event_name of this Trigger.
        :param filter: The filter of this Trigger.
        :param fingerprint: The fingerprint of this Trigger.
        :param horizontal_scroll_percentage_list: The horizontal_scroll_percentage_list of this Trigger.
        :param interval: The interval of this Trigger.
        :param interval_seconds: The interval_seconds of this Trigger.
        :param limit: The limit of this Trigger.
        :param max_timer_length_seconds: The max_timer_length_seconds of this Trigger.
        :param name: The name of this Trigger.
        :param notes: The notes of this Trigger.
        :param parameter: The parameter of this Trigger.
        :param parent_folder_id: The parent_folder_id of this Trigger.
        :param path: The path of this Trigger.
        :param selector: The selector of this Trigger.
        :param tag_manager_url: The tag_manager_url of this Trigger.
        :param total_time_min_milliseconds: The total_time_min_milliseconds of this Trigger.
        :param trigger_id: The trigger_id of this Trigger.
        :param type: The type of this Trigger.
        :param unique_trigger_id: The unique_trigger_id of this Trigger.
        :param vertical_scroll_percentage_list: The vertical_scroll_percentage_list of this Trigger.
        :param visibility_selector: The visibility_selector of this Trigger.
        :param visible_percentage_max: The visible_percentage_max of this Trigger.
        :param visible_percentage_min: The visible_percentage_min of this Trigger.
        :param wait_for_tags: The wait_for_tags of this Trigger.
        :param wait_for_tags_timeout: The wait_for_tags_timeout of this Trigger.
        :param workspace_id: The workspace_id of this Trigger.
        """
        self.openapi_types = {
            'account_id': str,
            'auto_event_filter': List[Condition],
            'check_validation': Parameter,
            'container_id': str,
            'continuous_time_min_milliseconds': Parameter,
            'custom_event_filter': List[Condition],
            'event_name': Parameter,
            'filter': List[Condition],
            'fingerprint': str,
            'horizontal_scroll_percentage_list': Parameter,
            'interval': Parameter,
            'interval_seconds': Parameter,
            'limit': Parameter,
            'max_timer_length_seconds': Parameter,
            'name': str,
            'notes': str,
            'parameter': List[Parameter],
            'parent_folder_id': str,
            'path': str,
            'selector': Parameter,
            'tag_manager_url': str,
            'total_time_min_milliseconds': Parameter,
            'trigger_id': str,
            'type': str,
            'unique_trigger_id': Parameter,
            'vertical_scroll_percentage_list': Parameter,
            'visibility_selector': Parameter,
            'visible_percentage_max': Parameter,
            'visible_percentage_min': Parameter,
            'wait_for_tags': Parameter,
            'wait_for_tags_timeout': Parameter,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'auto_event_filter': 'autoEventFilter',
            'check_validation': 'checkValidation',
            'container_id': 'containerId',
            'continuous_time_min_milliseconds': 'continuousTimeMinMilliseconds',
            'custom_event_filter': 'customEventFilter',
            'event_name': 'eventName',
            'filter': 'filter',
            'fingerprint': 'fingerprint',
            'horizontal_scroll_percentage_list': 'horizontalScrollPercentageList',
            'interval': 'interval',
            'interval_seconds': 'intervalSeconds',
            'limit': 'limit',
            'max_timer_length_seconds': 'maxTimerLengthSeconds',
            'name': 'name',
            'notes': 'notes',
            'parameter': 'parameter',
            'parent_folder_id': 'parentFolderId',
            'path': 'path',
            'selector': 'selector',
            'tag_manager_url': 'tagManagerUrl',
            'total_time_min_milliseconds': 'totalTimeMinMilliseconds',
            'trigger_id': 'triggerId',
            'type': 'type',
            'unique_trigger_id': 'uniqueTriggerId',
            'vertical_scroll_percentage_list': 'verticalScrollPercentageList',
            'visibility_selector': 'visibilitySelector',
            'visible_percentage_max': 'visiblePercentageMax',
            'visible_percentage_min': 'visiblePercentageMin',
            'wait_for_tags': 'waitForTags',
            'wait_for_tags_timeout': 'waitForTagsTimeout',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._auto_event_filter = auto_event_filter
        self._check_validation = check_validation
        self._container_id = container_id
        self._continuous_time_min_milliseconds = continuous_time_min_milliseconds
        self._custom_event_filter = custom_event_filter
        self._event_name = event_name
        self._filter = filter
        self._fingerprint = fingerprint
        self._horizontal_scroll_percentage_list = horizontal_scroll_percentage_list
        self._interval = interval
        self._interval_seconds = interval_seconds
        self._limit = limit
        self._max_timer_length_seconds = max_timer_length_seconds
        self._name = name
        self._notes = notes
        self._parameter = parameter
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._selector = selector
        self._tag_manager_url = tag_manager_url
        self._total_time_min_milliseconds = total_time_min_milliseconds
        self._trigger_id = trigger_id
        self._type = type
        self._unique_trigger_id = unique_trigger_id
        self._vertical_scroll_percentage_list = vertical_scroll_percentage_list
        self._visibility_selector = visibility_selector
        self._visible_percentage_max = visible_percentage_max
        self._visible_percentage_min = visible_percentage_min
        self._wait_for_tags = wait_for_tags
        self._wait_for_tags_timeout = wait_for_tags_timeout
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trigger of this Trigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Trigger.

        GTM Account ID.

        :return: The account_id of this Trigger.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Trigger.

        GTM Account ID.

        :param account_id: The account_id of this Trigger.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def auto_event_filter(self):
        """Gets the auto_event_filter of this Trigger.

        Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The auto_event_filter of this Trigger.
        :rtype: List[Condition]
        """
        return self._auto_event_filter

    @auto_event_filter.setter
    def auto_event_filter(self, auto_event_filter):
        """Sets the auto_event_filter of this Trigger.

        Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param auto_event_filter: The auto_event_filter of this Trigger.
        :type auto_event_filter: List[Condition]
        """

        self._auto_event_filter = auto_event_filter

    @property
    def check_validation(self):
        """Gets the check_validation of this Trigger.


        :return: The check_validation of this Trigger.
        :rtype: Parameter
        """
        return self._check_validation

    @check_validation.setter
    def check_validation(self, check_validation):
        """Sets the check_validation of this Trigger.


        :param check_validation: The check_validation of this Trigger.
        :type check_validation: Parameter
        """

        self._check_validation = check_validation

    @property
    def container_id(self):
        """Gets the container_id of this Trigger.

        GTM Container ID.

        :return: The container_id of this Trigger.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Trigger.

        GTM Container ID.

        :param container_id: The container_id of this Trigger.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def continuous_time_min_milliseconds(self):
        """Gets the continuous_time_min_milliseconds of this Trigger.


        :return: The continuous_time_min_milliseconds of this Trigger.
        :rtype: Parameter
        """
        return self._continuous_time_min_milliseconds

    @continuous_time_min_milliseconds.setter
    def continuous_time_min_milliseconds(self, continuous_time_min_milliseconds):
        """Sets the continuous_time_min_milliseconds of this Trigger.


        :param continuous_time_min_milliseconds: The continuous_time_min_milliseconds of this Trigger.
        :type continuous_time_min_milliseconds: Parameter
        """

        self._continuous_time_min_milliseconds = continuous_time_min_milliseconds

    @property
    def custom_event_filter(self):
        """Gets the custom_event_filter of this Trigger.

        Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The custom_event_filter of this Trigger.
        :rtype: List[Condition]
        """
        return self._custom_event_filter

    @custom_event_filter.setter
    def custom_event_filter(self, custom_event_filter):
        """Sets the custom_event_filter of this Trigger.

        Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param custom_event_filter: The custom_event_filter of this Trigger.
        :type custom_event_filter: List[Condition]
        """

        self._custom_event_filter = custom_event_filter

    @property
    def event_name(self):
        """Gets the event_name of this Trigger.


        :return: The event_name of this Trigger.
        :rtype: Parameter
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Trigger.


        :param event_name: The event_name of this Trigger.
        :type event_name: Parameter
        """

        self._event_name = event_name

    @property
    def filter(self):
        """Gets the filter of this Trigger.

        The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The filter of this Trigger.
        :rtype: List[Condition]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Trigger.

        The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param filter: The filter of this Trigger.
        :type filter: List[Condition]
        """

        self._filter = filter

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Trigger.

        The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.

        :return: The fingerprint of this Trigger.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Trigger.

        The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.

        :param fingerprint: The fingerprint of this Trigger.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def horizontal_scroll_percentage_list(self):
        """Gets the horizontal_scroll_percentage_list of this Trigger.


        :return: The horizontal_scroll_percentage_list of this Trigger.
        :rtype: Parameter
        """
        return self._horizontal_scroll_percentage_list

    @horizontal_scroll_percentage_list.setter
    def horizontal_scroll_percentage_list(self, horizontal_scroll_percentage_list):
        """Sets the horizontal_scroll_percentage_list of this Trigger.


        :param horizontal_scroll_percentage_list: The horizontal_scroll_percentage_list of this Trigger.
        :type horizontal_scroll_percentage_list: Parameter
        """

        self._horizontal_scroll_percentage_list = horizontal_scroll_percentage_list

    @property
    def interval(self):
        """Gets the interval of this Trigger.


        :return: The interval of this Trigger.
        :rtype: Parameter
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Trigger.


        :param interval: The interval of this Trigger.
        :type interval: Parameter
        """

        self._interval = interval

    @property
    def interval_seconds(self):
        """Gets the interval_seconds of this Trigger.


        :return: The interval_seconds of this Trigger.
        :rtype: Parameter
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds):
        """Sets the interval_seconds of this Trigger.


        :param interval_seconds: The interval_seconds of this Trigger.
        :type interval_seconds: Parameter
        """

        self._interval_seconds = interval_seconds

    @property
    def limit(self):
        """Gets the limit of this Trigger.


        :return: The limit of this Trigger.
        :rtype: Parameter
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Trigger.


        :param limit: The limit of this Trigger.
        :type limit: Parameter
        """

        self._limit = limit

    @property
    def max_timer_length_seconds(self):
        """Gets the max_timer_length_seconds of this Trigger.


        :return: The max_timer_length_seconds of this Trigger.
        :rtype: Parameter
        """
        return self._max_timer_length_seconds

    @max_timer_length_seconds.setter
    def max_timer_length_seconds(self, max_timer_length_seconds):
        """Sets the max_timer_length_seconds of this Trigger.


        :param max_timer_length_seconds: The max_timer_length_seconds of this Trigger.
        :type max_timer_length_seconds: Parameter
        """

        self._max_timer_length_seconds = max_timer_length_seconds

    @property
    def name(self):
        """Gets the name of this Trigger.

        Trigger display name. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The name of this Trigger.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Trigger.

        Trigger display name. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param name: The name of this Trigger.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Trigger.

        User notes on how to apply this trigger in the container. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The notes of this Trigger.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Trigger.

        User notes on how to apply this trigger in the container. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param notes: The notes of this Trigger.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameter(self):
        """Gets the parameter of this Trigger.

        Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The parameter of this Trigger.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Trigger.

        Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param parameter: The parameter of this Trigger.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Trigger.

        Parent folder id.

        :return: The parent_folder_id of this Trigger.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Trigger.

        Parent folder id.

        :param parent_folder_id: The parent_folder_id of this Trigger.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this Trigger.

        GTM Trigger's API relative path.

        :return: The path of this Trigger.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Trigger.

        GTM Trigger's API relative path.

        :param path: The path of this Trigger.
        :type path: str
        """

        self._path = path

    @property
    def selector(self):
        """Gets the selector of this Trigger.


        :return: The selector of this Trigger.
        :rtype: Parameter
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this Trigger.


        :param selector: The selector of this Trigger.
        :type selector: Parameter
        """

        self._selector = selector

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Trigger.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Trigger.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Trigger.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Trigger.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def total_time_min_milliseconds(self):
        """Gets the total_time_min_milliseconds of this Trigger.


        :return: The total_time_min_milliseconds of this Trigger.
        :rtype: Parameter
        """
        return self._total_time_min_milliseconds

    @total_time_min_milliseconds.setter
    def total_time_min_milliseconds(self, total_time_min_milliseconds):
        """Sets the total_time_min_milliseconds of this Trigger.


        :param total_time_min_milliseconds: The total_time_min_milliseconds of this Trigger.
        :type total_time_min_milliseconds: Parameter
        """

        self._total_time_min_milliseconds = total_time_min_milliseconds

    @property
    def trigger_id(self):
        """Gets the trigger_id of this Trigger.

        The Trigger ID uniquely identifies the GTM Trigger.

        :return: The trigger_id of this Trigger.
        :rtype: str
        """
        return self._trigger_id

    @trigger_id.setter
    def trigger_id(self, trigger_id):
        """Sets the trigger_id of this Trigger.

        The Trigger ID uniquely identifies the GTM Trigger.

        :param trigger_id: The trigger_id of this Trigger.
        :type trigger_id: str
        """

        self._trigger_id = trigger_id

    @property
    def type(self):
        """Gets the type of this Trigger.

        Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :return: The type of this Trigger.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Trigger.

        Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update

        :param type: The type of this Trigger.
        :type type: str
        """
        allowed_values = ["eventTypeUnspecified", "pageview", "domReady", "windowLoaded", "customEvent", "triggerGroup", "init", "consentInit", "serverPageview", "always", "firebaseAppException", "firebaseAppUpdate", "firebaseCampaign", "firebaseFirstOpen", "firebaseInAppPurchase", "firebaseNotificationDismiss", "firebaseNotificationForeground", "firebaseNotificationOpen", "firebaseNotificationReceive", "firebaseOsUpdate", "firebaseSessionStart", "firebaseUserEngagement", "formSubmission", "click", "linkClick", "jsError", "historyChange", "timer", "ampClick", "ampTimer", "ampScroll", "ampVisibility", "youTubeVideo", "scrollDepth", "elementVisibility"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unique_trigger_id(self):
        """Gets the unique_trigger_id of this Trigger.


        :return: The unique_trigger_id of this Trigger.
        :rtype: Parameter
        """
        return self._unique_trigger_id

    @unique_trigger_id.setter
    def unique_trigger_id(self, unique_trigger_id):
        """Sets the unique_trigger_id of this Trigger.


        :param unique_trigger_id: The unique_trigger_id of this Trigger.
        :type unique_trigger_id: Parameter
        """

        self._unique_trigger_id = unique_trigger_id

    @property
    def vertical_scroll_percentage_list(self):
        """Gets the vertical_scroll_percentage_list of this Trigger.


        :return: The vertical_scroll_percentage_list of this Trigger.
        :rtype: Parameter
        """
        return self._vertical_scroll_percentage_list

    @vertical_scroll_percentage_list.setter
    def vertical_scroll_percentage_list(self, vertical_scroll_percentage_list):
        """Sets the vertical_scroll_percentage_list of this Trigger.


        :param vertical_scroll_percentage_list: The vertical_scroll_percentage_list of this Trigger.
        :type vertical_scroll_percentage_list: Parameter
        """

        self._vertical_scroll_percentage_list = vertical_scroll_percentage_list

    @property
    def visibility_selector(self):
        """Gets the visibility_selector of this Trigger.


        :return: The visibility_selector of this Trigger.
        :rtype: Parameter
        """
        return self._visibility_selector

    @visibility_selector.setter
    def visibility_selector(self, visibility_selector):
        """Sets the visibility_selector of this Trigger.


        :param visibility_selector: The visibility_selector of this Trigger.
        :type visibility_selector: Parameter
        """

        self._visibility_selector = visibility_selector

    @property
    def visible_percentage_max(self):
        """Gets the visible_percentage_max of this Trigger.


        :return: The visible_percentage_max of this Trigger.
        :rtype: Parameter
        """
        return self._visible_percentage_max

    @visible_percentage_max.setter
    def visible_percentage_max(self, visible_percentage_max):
        """Sets the visible_percentage_max of this Trigger.


        :param visible_percentage_max: The visible_percentage_max of this Trigger.
        :type visible_percentage_max: Parameter
        """

        self._visible_percentage_max = visible_percentage_max

    @property
    def visible_percentage_min(self):
        """Gets the visible_percentage_min of this Trigger.


        :return: The visible_percentage_min of this Trigger.
        :rtype: Parameter
        """
        return self._visible_percentage_min

    @visible_percentage_min.setter
    def visible_percentage_min(self, visible_percentage_min):
        """Sets the visible_percentage_min of this Trigger.


        :param visible_percentage_min: The visible_percentage_min of this Trigger.
        :type visible_percentage_min: Parameter
        """

        self._visible_percentage_min = visible_percentage_min

    @property
    def wait_for_tags(self):
        """Gets the wait_for_tags of this Trigger.


        :return: The wait_for_tags of this Trigger.
        :rtype: Parameter
        """
        return self._wait_for_tags

    @wait_for_tags.setter
    def wait_for_tags(self, wait_for_tags):
        """Sets the wait_for_tags of this Trigger.


        :param wait_for_tags: The wait_for_tags of this Trigger.
        :type wait_for_tags: Parameter
        """

        self._wait_for_tags = wait_for_tags

    @property
    def wait_for_tags_timeout(self):
        """Gets the wait_for_tags_timeout of this Trigger.


        :return: The wait_for_tags_timeout of this Trigger.
        :rtype: Parameter
        """
        return self._wait_for_tags_timeout

    @wait_for_tags_timeout.setter
    def wait_for_tags_timeout(self, wait_for_tags_timeout):
        """Sets the wait_for_tags_timeout of this Trigger.


        :param wait_for_tags_timeout: The wait_for_tags_timeout of this Trigger.
        :type wait_for_tags_timeout: Parameter
        """

        self._wait_for_tags_timeout = wait_for_tags_timeout

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Trigger.

        GTM Workspace ID.

        :return: The workspace_id of this Trigger.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Trigger.

        GTM Workspace ID.

        :param workspace_id: The workspace_id of this Trigger.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
