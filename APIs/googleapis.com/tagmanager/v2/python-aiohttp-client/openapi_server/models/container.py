# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_features import ContainerFeatures
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, domain_name: List[str]=None, features: ContainerFeatures=None, fingerprint: str=None, name: str=None, notes: str=None, path: str=None, public_id: str=None, tag_ids: List[str]=None, tag_manager_url: str=None, tagging_server_urls: List[str]=None, usage_context: List[str]=None):
        """Container - a model defined in OpenAPI

        :param account_id: The account_id of this Container.
        :param container_id: The container_id of this Container.
        :param domain_name: The domain_name of this Container.
        :param features: The features of this Container.
        :param fingerprint: The fingerprint of this Container.
        :param name: The name of this Container.
        :param notes: The notes of this Container.
        :param path: The path of this Container.
        :param public_id: The public_id of this Container.
        :param tag_ids: The tag_ids of this Container.
        :param tag_manager_url: The tag_manager_url of this Container.
        :param tagging_server_urls: The tagging_server_urls of this Container.
        :param usage_context: The usage_context of this Container.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'domain_name': List[str],
            'features': ContainerFeatures,
            'fingerprint': str,
            'name': str,
            'notes': str,
            'path': str,
            'public_id': str,
            'tag_ids': List[str],
            'tag_manager_url': str,
            'tagging_server_urls': List[str],
            'usage_context': List[str]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'domain_name': 'domainName',
            'features': 'features',
            'fingerprint': 'fingerprint',
            'name': 'name',
            'notes': 'notes',
            'path': 'path',
            'public_id': 'publicId',
            'tag_ids': 'tagIds',
            'tag_manager_url': 'tagManagerUrl',
            'tagging_server_urls': 'taggingServerUrls',
            'usage_context': 'usageContext'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._domain_name = domain_name
        self._features = features
        self._fingerprint = fingerprint
        self._name = name
        self._notes = notes
        self._path = path
        self._public_id = public_id
        self._tag_ids = tag_ids
        self._tag_manager_url = tag_manager_url
        self._tagging_server_urls = tagging_server_urls
        self._usage_context = usage_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Container.

        GTM Account ID.

        :return: The account_id of this Container.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Container.

        GTM Account ID.

        :param account_id: The account_id of this Container.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this Container.

        The Container ID uniquely identifies the GTM Container.

        :return: The container_id of this Container.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.

        The Container ID uniquely identifies the GTM Container.

        :param container_id: The container_id of this Container.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def domain_name(self):
        """Gets the domain_name of this Container.

        List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The domain_name of this Container.
        :rtype: List[str]
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Container.

        List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param domain_name: The domain_name of this Container.
        :type domain_name: List[str]
        """

        self._domain_name = domain_name

    @property
    def features(self):
        """Gets the features of this Container.


        :return: The features of this Container.
        :rtype: ContainerFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Container.


        :param features: The features of this Container.
        :type features: ContainerFeatures
        """

        self._features = features

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Container.

        The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.

        :return: The fingerprint of this Container.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Container.

        The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.

        :param fingerprint: The fingerprint of this Container.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this Container.

        Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.

        Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Container.

        Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The notes of this Container.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Container.

        Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param notes: The notes of this Container.
        :type notes: str
        """

        self._notes = notes

    @property
    def path(self):
        """Gets the path of this Container.

        GTM Container's API relative path.

        :return: The path of this Container.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Container.

        GTM Container's API relative path.

        :param path: The path of this Container.
        :type path: str
        """

        self._path = path

    @property
    def public_id(self):
        """Gets the public_id of this Container.

        Container Public ID.

        :return: The public_id of this Container.
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this Container.

        Container Public ID.

        :param public_id: The public_id of this Container.
        :type public_id: str
        """

        self._public_id = public_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this Container.

        All Tag IDs that refer to this Container.

        :return: The tag_ids of this Container.
        :rtype: List[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this Container.

        All Tag IDs that refer to this Container.

        :param tag_ids: The tag_ids of this Container.
        :type tag_ids: List[str]
        """

        self._tag_ids = tag_ids

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Container.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Container.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Container.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Container.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def tagging_server_urls(self):
        """Gets the tagging_server_urls of this Container.

        List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The tagging_server_urls of this Container.
        :rtype: List[str]
        """
        return self._tagging_server_urls

    @tagging_server_urls.setter
    def tagging_server_urls(self, tagging_server_urls):
        """Sets the tagging_server_urls of this Container.

        List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param tagging_server_urls: The tagging_server_urls of this Container.
        :type tagging_server_urls: List[str]
        """

        self._tagging_server_urls = tagging_server_urls

    @property
    def usage_context(self):
        """Gets the usage_context of this Container.

        List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The usage_context of this Container.
        :rtype: List[str]
        """
        return self._usage_context

    @usage_context.setter
    def usage_context(self, usage_context):
        """Sets the usage_context of this Container.

        List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param usage_context: The usage_context of this Container.
        :type usage_context: List[str]
        """
        allowed_values = ["usageContextUnspecified", "web", "android", "ios", "androidSdk5", "iosSdk5", "amp", "server"]  # noqa: E501
        if not set(usage_context).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `usage_context` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(usage_context) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._usage_context = usage_context
