# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gallery_reference import GalleryReference
from openapi_server import util


class CustomTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, fingerprint: str=None, gallery_reference: GalleryReference=None, name: str=None, path: str=None, tag_manager_url: str=None, template_data: str=None, template_id: str=None, workspace_id: str=None):
        """CustomTemplate - a model defined in OpenAPI

        :param account_id: The account_id of this CustomTemplate.
        :param container_id: The container_id of this CustomTemplate.
        :param fingerprint: The fingerprint of this CustomTemplate.
        :param gallery_reference: The gallery_reference of this CustomTemplate.
        :param name: The name of this CustomTemplate.
        :param path: The path of this CustomTemplate.
        :param tag_manager_url: The tag_manager_url of this CustomTemplate.
        :param template_data: The template_data of this CustomTemplate.
        :param template_id: The template_id of this CustomTemplate.
        :param workspace_id: The workspace_id of this CustomTemplate.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'fingerprint': str,
            'gallery_reference': GalleryReference,
            'name': str,
            'path': str,
            'tag_manager_url': str,
            'template_data': str,
            'template_id': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'fingerprint': 'fingerprint',
            'gallery_reference': 'galleryReference',
            'name': 'name',
            'path': 'path',
            'tag_manager_url': 'tagManagerUrl',
            'template_data': 'templateData',
            'template_id': 'templateId',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._fingerprint = fingerprint
        self._gallery_reference = gallery_reference
        self._name = name
        self._path = path
        self._tag_manager_url = tag_manager_url
        self._template_data = template_data
        self._template_id = template_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomTemplate of this CustomTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CustomTemplate.

        GTM Account ID.

        :return: The account_id of this CustomTemplate.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CustomTemplate.

        GTM Account ID.

        :param account_id: The account_id of this CustomTemplate.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this CustomTemplate.

        GTM Container ID.

        :return: The container_id of this CustomTemplate.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this CustomTemplate.

        GTM Container ID.

        :param container_id: The container_id of this CustomTemplate.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this CustomTemplate.

        The fingerprint of the GTM Custom Template as computed at storage time. This value is recomputed whenever the template is modified.

        :return: The fingerprint of this CustomTemplate.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this CustomTemplate.

        The fingerprint of the GTM Custom Template as computed at storage time. This value is recomputed whenever the template is modified.

        :param fingerprint: The fingerprint of this CustomTemplate.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def gallery_reference(self):
        """Gets the gallery_reference of this CustomTemplate.


        :return: The gallery_reference of this CustomTemplate.
        :rtype: GalleryReference
        """
        return self._gallery_reference

    @gallery_reference.setter
    def gallery_reference(self, gallery_reference):
        """Sets the gallery_reference of this CustomTemplate.


        :param gallery_reference: The gallery_reference of this CustomTemplate.
        :type gallery_reference: GalleryReference
        """

        self._gallery_reference = gallery_reference

    @property
    def name(self):
        """Gets the name of this CustomTemplate.

        Custom Template display name.

        :return: The name of this CustomTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomTemplate.

        Custom Template display name.

        :param name: The name of this CustomTemplate.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this CustomTemplate.

        GTM Custom Template's API relative path.

        :return: The path of this CustomTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CustomTemplate.

        GTM Custom Template's API relative path.

        :param path: The path of this CustomTemplate.
        :type path: str
        """

        self._path = path

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this CustomTemplate.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this CustomTemplate.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this CustomTemplate.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this CustomTemplate.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def template_data(self):
        """Gets the template_data of this CustomTemplate.

        The custom template in text format.

        :return: The template_data of this CustomTemplate.
        :rtype: str
        """
        return self._template_data

    @template_data.setter
    def template_data(self, template_data):
        """Sets the template_data of this CustomTemplate.

        The custom template in text format.

        :param template_data: The template_data of this CustomTemplate.
        :type template_data: str
        """

        self._template_data = template_data

    @property
    def template_id(self):
        """Gets the template_id of this CustomTemplate.

        The Custom Template ID uniquely identifies the GTM custom template.

        :return: The template_id of this CustomTemplate.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CustomTemplate.

        The Custom Template ID uniquely identifies the GTM custom template.

        :param template_id: The template_id of this CustomTemplate.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this CustomTemplate.

        GTM Workspace ID.

        :return: The workspace_id of this CustomTemplate.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this CustomTemplate.

        GTM Workspace ID.

        :param workspace_id: The workspace_id of this CustomTemplate.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
