# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_features import AccountFeatures
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, features: AccountFeatures=None, fingerprint: str=None, name: str=None, path: str=None, share_data: bool=None, tag_manager_url: str=None):
        """Account - a model defined in OpenAPI

        :param account_id: The account_id of this Account.
        :param features: The features of this Account.
        :param fingerprint: The fingerprint of this Account.
        :param name: The name of this Account.
        :param path: The path of this Account.
        :param share_data: The share_data of this Account.
        :param tag_manager_url: The tag_manager_url of this Account.
        """
        self.openapi_types = {
            'account_id': str,
            'features': AccountFeatures,
            'fingerprint': str,
            'name': str,
            'path': str,
            'share_data': bool,
            'tag_manager_url': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'features': 'features',
            'fingerprint': 'fingerprint',
            'name': 'name',
            'path': 'path',
            'share_data': 'shareData',
            'tag_manager_url': 'tagManagerUrl'
        }

        self._account_id = account_id
        self._features = features
        self._fingerprint = fingerprint
        self._name = name
        self._path = path
        self._share_data = share_data
        self._tag_manager_url = tag_manager_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Account.

        The Account ID uniquely identifies the GTM Account.

        :return: The account_id of this Account.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.

        The Account ID uniquely identifies the GTM Account.

        :param account_id: The account_id of this Account.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def features(self):
        """Gets the features of this Account.


        :return: The features of this Account.
        :rtype: AccountFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Account.


        :param features: The features of this Account.
        :type features: AccountFeatures
        """

        self._features = features

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Account.

        The fingerprint of the GTM Account as computed at storage time. This value is recomputed whenever the account is modified.

        :return: The fingerprint of this Account.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Account.

        The fingerprint of the GTM Account as computed at storage time. This value is recomputed whenever the account is modified.

        :param fingerprint: The fingerprint of this Account.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this Account.

        Account display name. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Account display name. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this Account.

        GTM Account's API relative path.

        :return: The path of this Account.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Account.

        GTM Account's API relative path.

        :param path: The path of this Account.
        :type path: str
        """

        self._path = path

    @property
    def share_data(self):
        """Gets the share_data of this Account.

        Whether the account shares data anonymously with Google and others. This flag enables benchmarking by sharing your data in an anonymous form. Google will remove all identifiable information about your website, combine the data with hundreds of other anonymous sites and report aggregate trends in the benchmarking service. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update

        :return: The share_data of this Account.
        :rtype: bool
        """
        return self._share_data

    @share_data.setter
    def share_data(self, share_data):
        """Sets the share_data of this Account.

        Whether the account shares data anonymously with Google and others. This flag enables benchmarking by sharing your data in an anonymous form. Google will remove all identifiable information about your website, combine the data with hundreds of other anonymous sites and report aggregate trends in the benchmarking service. @mutable tagmanager.accounts.create @mutable tagmanager.accounts.update

        :param share_data: The share_data of this Account.
        :type share_data: bool
        """

        self._share_data = share_data

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Account.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Account.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Account.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Account.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url
