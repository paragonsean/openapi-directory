# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerVersionHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, container_version_id: str=None, deleted: bool=None, name: str=None, num_clients: str=None, num_custom_templates: str=None, num_gtag_configs: str=None, num_macros: str=None, num_rules: str=None, num_tags: str=None, num_transformations: str=None, num_triggers: str=None, num_variables: str=None, num_zones: str=None, path: str=None):
        """ContainerVersionHeader - a model defined in OpenAPI

        :param account_id: The account_id of this ContainerVersionHeader.
        :param container_id: The container_id of this ContainerVersionHeader.
        :param container_version_id: The container_version_id of this ContainerVersionHeader.
        :param deleted: The deleted of this ContainerVersionHeader.
        :param name: The name of this ContainerVersionHeader.
        :param num_clients: The num_clients of this ContainerVersionHeader.
        :param num_custom_templates: The num_custom_templates of this ContainerVersionHeader.
        :param num_gtag_configs: The num_gtag_configs of this ContainerVersionHeader.
        :param num_macros: The num_macros of this ContainerVersionHeader.
        :param num_rules: The num_rules of this ContainerVersionHeader.
        :param num_tags: The num_tags of this ContainerVersionHeader.
        :param num_transformations: The num_transformations of this ContainerVersionHeader.
        :param num_triggers: The num_triggers of this ContainerVersionHeader.
        :param num_variables: The num_variables of this ContainerVersionHeader.
        :param num_zones: The num_zones of this ContainerVersionHeader.
        :param path: The path of this ContainerVersionHeader.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'container_version_id': str,
            'deleted': bool,
            'name': str,
            'num_clients': str,
            'num_custom_templates': str,
            'num_gtag_configs': str,
            'num_macros': str,
            'num_rules': str,
            'num_tags': str,
            'num_transformations': str,
            'num_triggers': str,
            'num_variables': str,
            'num_zones': str,
            'path': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'container_version_id': 'containerVersionId',
            'deleted': 'deleted',
            'name': 'name',
            'num_clients': 'numClients',
            'num_custom_templates': 'numCustomTemplates',
            'num_gtag_configs': 'numGtagConfigs',
            'num_macros': 'numMacros',
            'num_rules': 'numRules',
            'num_tags': 'numTags',
            'num_transformations': 'numTransformations',
            'num_triggers': 'numTriggers',
            'num_variables': 'numVariables',
            'num_zones': 'numZones',
            'path': 'path'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._container_version_id = container_version_id
        self._deleted = deleted
        self._name = name
        self._num_clients = num_clients
        self._num_custom_templates = num_custom_templates
        self._num_gtag_configs = num_gtag_configs
        self._num_macros = num_macros
        self._num_rules = num_rules
        self._num_tags = num_tags
        self._num_transformations = num_transformations
        self._num_triggers = num_triggers
        self._num_variables = num_variables
        self._num_zones = num_zones
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerVersionHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerVersionHeader of this ContainerVersionHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ContainerVersionHeader.

        GTM Account ID.

        :return: The account_id of this ContainerVersionHeader.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ContainerVersionHeader.

        GTM Account ID.

        :param account_id: The account_id of this ContainerVersionHeader.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this ContainerVersionHeader.

        GTM Container ID.

        :return: The container_id of this ContainerVersionHeader.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ContainerVersionHeader.

        GTM Container ID.

        :param container_id: The container_id of this ContainerVersionHeader.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_version_id(self):
        """Gets the container_version_id of this ContainerVersionHeader.

        The Container Version ID uniquely identifies the GTM Container Version.

        :return: The container_version_id of this ContainerVersionHeader.
        :rtype: str
        """
        return self._container_version_id

    @container_version_id.setter
    def container_version_id(self, container_version_id):
        """Sets the container_version_id of this ContainerVersionHeader.

        The Container Version ID uniquely identifies the GTM Container Version.

        :param container_version_id: The container_version_id of this ContainerVersionHeader.
        :type container_version_id: str
        """

        self._container_version_id = container_version_id

    @property
    def deleted(self):
        """Gets the deleted of this ContainerVersionHeader.

        A value of true indicates this container version has been deleted.

        :return: The deleted of this ContainerVersionHeader.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ContainerVersionHeader.

        A value of true indicates this container version has been deleted.

        :param deleted: The deleted of this ContainerVersionHeader.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this ContainerVersionHeader.

        Container version display name.

        :return: The name of this ContainerVersionHeader.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerVersionHeader.

        Container version display name.

        :param name: The name of this ContainerVersionHeader.
        :type name: str
        """

        self._name = name

    @property
    def num_clients(self):
        """Gets the num_clients of this ContainerVersionHeader.

        Number of clients in the container version.

        :return: The num_clients of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_clients

    @num_clients.setter
    def num_clients(self, num_clients):
        """Sets the num_clients of this ContainerVersionHeader.

        Number of clients in the container version.

        :param num_clients: The num_clients of this ContainerVersionHeader.
        :type num_clients: str
        """

        self._num_clients = num_clients

    @property
    def num_custom_templates(self):
        """Gets the num_custom_templates of this ContainerVersionHeader.

        Number of custom templates in the container version.

        :return: The num_custom_templates of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_custom_templates

    @num_custom_templates.setter
    def num_custom_templates(self, num_custom_templates):
        """Sets the num_custom_templates of this ContainerVersionHeader.

        Number of custom templates in the container version.

        :param num_custom_templates: The num_custom_templates of this ContainerVersionHeader.
        :type num_custom_templates: str
        """

        self._num_custom_templates = num_custom_templates

    @property
    def num_gtag_configs(self):
        """Gets the num_gtag_configs of this ContainerVersionHeader.

        Number of Google tag configs in the container version.

        :return: The num_gtag_configs of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_gtag_configs

    @num_gtag_configs.setter
    def num_gtag_configs(self, num_gtag_configs):
        """Sets the num_gtag_configs of this ContainerVersionHeader.

        Number of Google tag configs in the container version.

        :param num_gtag_configs: The num_gtag_configs of this ContainerVersionHeader.
        :type num_gtag_configs: str
        """

        self._num_gtag_configs = num_gtag_configs

    @property
    def num_macros(self):
        """Gets the num_macros of this ContainerVersionHeader.

        Number of macros in the container version.

        :return: The num_macros of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_macros

    @num_macros.setter
    def num_macros(self, num_macros):
        """Sets the num_macros of this ContainerVersionHeader.

        Number of macros in the container version.

        :param num_macros: The num_macros of this ContainerVersionHeader.
        :type num_macros: str
        """

        self._num_macros = num_macros

    @property
    def num_rules(self):
        """Gets the num_rules of this ContainerVersionHeader.

        Number of rules in the container version.

        :return: The num_rules of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_rules

    @num_rules.setter
    def num_rules(self, num_rules):
        """Sets the num_rules of this ContainerVersionHeader.

        Number of rules in the container version.

        :param num_rules: The num_rules of this ContainerVersionHeader.
        :type num_rules: str
        """

        self._num_rules = num_rules

    @property
    def num_tags(self):
        """Gets the num_tags of this ContainerVersionHeader.

        Number of tags in the container version.

        :return: The num_tags of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_tags

    @num_tags.setter
    def num_tags(self, num_tags):
        """Sets the num_tags of this ContainerVersionHeader.

        Number of tags in the container version.

        :param num_tags: The num_tags of this ContainerVersionHeader.
        :type num_tags: str
        """

        self._num_tags = num_tags

    @property
    def num_transformations(self):
        """Gets the num_transformations of this ContainerVersionHeader.

        Number of transformations in the container version.

        :return: The num_transformations of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_transformations

    @num_transformations.setter
    def num_transformations(self, num_transformations):
        """Sets the num_transformations of this ContainerVersionHeader.

        Number of transformations in the container version.

        :param num_transformations: The num_transformations of this ContainerVersionHeader.
        :type num_transformations: str
        """

        self._num_transformations = num_transformations

    @property
    def num_triggers(self):
        """Gets the num_triggers of this ContainerVersionHeader.

        Number of triggers in the container version.

        :return: The num_triggers of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_triggers

    @num_triggers.setter
    def num_triggers(self, num_triggers):
        """Sets the num_triggers of this ContainerVersionHeader.

        Number of triggers in the container version.

        :param num_triggers: The num_triggers of this ContainerVersionHeader.
        :type num_triggers: str
        """

        self._num_triggers = num_triggers

    @property
    def num_variables(self):
        """Gets the num_variables of this ContainerVersionHeader.

        Number of variables in the container version.

        :return: The num_variables of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_variables

    @num_variables.setter
    def num_variables(self, num_variables):
        """Sets the num_variables of this ContainerVersionHeader.

        Number of variables in the container version.

        :param num_variables: The num_variables of this ContainerVersionHeader.
        :type num_variables: str
        """

        self._num_variables = num_variables

    @property
    def num_zones(self):
        """Gets the num_zones of this ContainerVersionHeader.

        Number of zones in the container version.

        :return: The num_zones of this ContainerVersionHeader.
        :rtype: str
        """
        return self._num_zones

    @num_zones.setter
    def num_zones(self, num_zones):
        """Sets the num_zones of this ContainerVersionHeader.

        Number of zones in the container version.

        :param num_zones: The num_zones of this ContainerVersionHeader.
        :type num_zones: str
        """

        self._num_zones = num_zones

    @property
    def path(self):
        """Gets the path of this ContainerVersionHeader.

        GTM Container Version's API relative path.

        :return: The path of this ContainerVersionHeader.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContainerVersionHeader.

        GTM Container Version's API relative path.

        :param path: The path of this ContainerVersionHeader.
        :type path: str
        """

        self._path = path
