# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class VariableFormatValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_conversion_type: str=None, convert_false_to_value: Parameter=None, convert_null_to_value: Parameter=None, convert_true_to_value: Parameter=None, convert_undefined_to_value: Parameter=None):
        """VariableFormatValue - a model defined in OpenAPI

        :param case_conversion_type: The case_conversion_type of this VariableFormatValue.
        :param convert_false_to_value: The convert_false_to_value of this VariableFormatValue.
        :param convert_null_to_value: The convert_null_to_value of this VariableFormatValue.
        :param convert_true_to_value: The convert_true_to_value of this VariableFormatValue.
        :param convert_undefined_to_value: The convert_undefined_to_value of this VariableFormatValue.
        """
        self.openapi_types = {
            'case_conversion_type': str,
            'convert_false_to_value': Parameter,
            'convert_null_to_value': Parameter,
            'convert_true_to_value': Parameter,
            'convert_undefined_to_value': Parameter
        }

        self.attribute_map = {
            'case_conversion_type': 'caseConversionType',
            'convert_false_to_value': 'convertFalseToValue',
            'convert_null_to_value': 'convertNullToValue',
            'convert_true_to_value': 'convertTrueToValue',
            'convert_undefined_to_value': 'convertUndefinedToValue'
        }

        self._case_conversion_type = case_conversion_type
        self._convert_false_to_value = convert_false_to_value
        self._convert_null_to_value = convert_null_to_value
        self._convert_true_to_value = convert_true_to_value
        self._convert_undefined_to_value = convert_undefined_to_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VariableFormatValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VariableFormatValue of this VariableFormatValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_conversion_type(self):
        """Gets the case_conversion_type of this VariableFormatValue.

        The option to convert a string-type variable value to either lowercase or uppercase.

        :return: The case_conversion_type of this VariableFormatValue.
        :rtype: str
        """
        return self._case_conversion_type

    @case_conversion_type.setter
    def case_conversion_type(self, case_conversion_type):
        """Sets the case_conversion_type of this VariableFormatValue.

        The option to convert a string-type variable value to either lowercase or uppercase.

        :param case_conversion_type: The case_conversion_type of this VariableFormatValue.
        :type case_conversion_type: str
        """
        allowed_values = ["none", "lowercase", "uppercase"]  # noqa: E501
        if case_conversion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `case_conversion_type` ({0}), must be one of {1}"
                .format(case_conversion_type, allowed_values)
            )

        self._case_conversion_type = case_conversion_type

    @property
    def convert_false_to_value(self):
        """Gets the convert_false_to_value of this VariableFormatValue.


        :return: The convert_false_to_value of this VariableFormatValue.
        :rtype: Parameter
        """
        return self._convert_false_to_value

    @convert_false_to_value.setter
    def convert_false_to_value(self, convert_false_to_value):
        """Sets the convert_false_to_value of this VariableFormatValue.


        :param convert_false_to_value: The convert_false_to_value of this VariableFormatValue.
        :type convert_false_to_value: Parameter
        """

        self._convert_false_to_value = convert_false_to_value

    @property
    def convert_null_to_value(self):
        """Gets the convert_null_to_value of this VariableFormatValue.


        :return: The convert_null_to_value of this VariableFormatValue.
        :rtype: Parameter
        """
        return self._convert_null_to_value

    @convert_null_to_value.setter
    def convert_null_to_value(self, convert_null_to_value):
        """Sets the convert_null_to_value of this VariableFormatValue.


        :param convert_null_to_value: The convert_null_to_value of this VariableFormatValue.
        :type convert_null_to_value: Parameter
        """

        self._convert_null_to_value = convert_null_to_value

    @property
    def convert_true_to_value(self):
        """Gets the convert_true_to_value of this VariableFormatValue.


        :return: The convert_true_to_value of this VariableFormatValue.
        :rtype: Parameter
        """
        return self._convert_true_to_value

    @convert_true_to_value.setter
    def convert_true_to_value(self, convert_true_to_value):
        """Sets the convert_true_to_value of this VariableFormatValue.


        :param convert_true_to_value: The convert_true_to_value of this VariableFormatValue.
        :type convert_true_to_value: Parameter
        """

        self._convert_true_to_value = convert_true_to_value

    @property
    def convert_undefined_to_value(self):
        """Gets the convert_undefined_to_value of this VariableFormatValue.


        :return: The convert_undefined_to_value of this VariableFormatValue.
        :rtype: Parameter
        """
        return self._convert_undefined_to_value

    @convert_undefined_to_value.setter
    def convert_undefined_to_value(self, convert_undefined_to_value):
        """Sets the convert_undefined_to_value of this VariableFormatValue.


        :param convert_undefined_to_value: The convert_undefined_to_value of this VariableFormatValue.
        :type convert_undefined_to_value: Parameter
        """

        self._convert_undefined_to_value = convert_undefined_to_value
