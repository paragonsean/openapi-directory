# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, authorization_code: str=None, authorization_timestamp: str=None, container_id: str=None, container_version_id: str=None, description: str=None, enable_debug: bool=None, environment_id: str=None, fingerprint: str=None, name: str=None, path: str=None, tag_manager_url: str=None, type: str=None, url: str=None, workspace_id: str=None):
        """Environment - a model defined in OpenAPI

        :param account_id: The account_id of this Environment.
        :param authorization_code: The authorization_code of this Environment.
        :param authorization_timestamp: The authorization_timestamp of this Environment.
        :param container_id: The container_id of this Environment.
        :param container_version_id: The container_version_id of this Environment.
        :param description: The description of this Environment.
        :param enable_debug: The enable_debug of this Environment.
        :param environment_id: The environment_id of this Environment.
        :param fingerprint: The fingerprint of this Environment.
        :param name: The name of this Environment.
        :param path: The path of this Environment.
        :param tag_manager_url: The tag_manager_url of this Environment.
        :param type: The type of this Environment.
        :param url: The url of this Environment.
        :param workspace_id: The workspace_id of this Environment.
        """
        self.openapi_types = {
            'account_id': str,
            'authorization_code': str,
            'authorization_timestamp': str,
            'container_id': str,
            'container_version_id': str,
            'description': str,
            'enable_debug': bool,
            'environment_id': str,
            'fingerprint': str,
            'name': str,
            'path': str,
            'tag_manager_url': str,
            'type': str,
            'url': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'authorization_code': 'authorizationCode',
            'authorization_timestamp': 'authorizationTimestamp',
            'container_id': 'containerId',
            'container_version_id': 'containerVersionId',
            'description': 'description',
            'enable_debug': 'enableDebug',
            'environment_id': 'environmentId',
            'fingerprint': 'fingerprint',
            'name': 'name',
            'path': 'path',
            'tag_manager_url': 'tagManagerUrl',
            'type': 'type',
            'url': 'url',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._authorization_code = authorization_code
        self._authorization_timestamp = authorization_timestamp
        self._container_id = container_id
        self._container_version_id = container_version_id
        self._description = description
        self._enable_debug = enable_debug
        self._environment_id = environment_id
        self._fingerprint = fingerprint
        self._name = name
        self._path = path
        self._tag_manager_url = tag_manager_url
        self._type = type
        self._url = url
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Environment.

        GTM Account ID.

        :return: The account_id of this Environment.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Environment.

        GTM Account ID.

        :param account_id: The account_id of this Environment.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def authorization_code(self):
        """Gets the authorization_code of this Environment.

        The environment authorization code.

        :return: The authorization_code of this Environment.
        :rtype: str
        """
        return self._authorization_code

    @authorization_code.setter
    def authorization_code(self, authorization_code):
        """Sets the authorization_code of this Environment.

        The environment authorization code.

        :param authorization_code: The authorization_code of this Environment.
        :type authorization_code: str
        """

        self._authorization_code = authorization_code

    @property
    def authorization_timestamp(self):
        """Gets the authorization_timestamp of this Environment.

        The last update time-stamp for the authorization code.

        :return: The authorization_timestamp of this Environment.
        :rtype: str
        """
        return self._authorization_timestamp

    @authorization_timestamp.setter
    def authorization_timestamp(self, authorization_timestamp):
        """Sets the authorization_timestamp of this Environment.

        The last update time-stamp for the authorization code.

        :param authorization_timestamp: The authorization_timestamp of this Environment.
        :type authorization_timestamp: str
        """

        self._authorization_timestamp = authorization_timestamp

    @property
    def container_id(self):
        """Gets the container_id of this Environment.

        GTM Container ID.

        :return: The container_id of this Environment.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Environment.

        GTM Container ID.

        :param container_id: The container_id of this Environment.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_version_id(self):
        """Gets the container_version_id of this Environment.

        Represents a link to a container version.

        :return: The container_version_id of this Environment.
        :rtype: str
        """
        return self._container_version_id

    @container_version_id.setter
    def container_version_id(self, container_version_id):
        """Sets the container_version_id of this Environment.

        Represents a link to a container version.

        :param container_version_id: The container_version_id of this Environment.
        :type container_version_id: str
        """

        self._container_version_id = container_version_id

    @property
    def description(self):
        """Gets the description of this Environment.

        The environment description. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.

        The environment description. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :param description: The description of this Environment.
        :type description: str
        """

        self._description = description

    @property
    def enable_debug(self):
        """Gets the enable_debug of this Environment.

        Whether or not to enable debug by default for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :return: The enable_debug of this Environment.
        :rtype: bool
        """
        return self._enable_debug

    @enable_debug.setter
    def enable_debug(self, enable_debug):
        """Sets the enable_debug of this Environment.

        Whether or not to enable debug by default for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :param enable_debug: The enable_debug of this Environment.
        :type enable_debug: bool
        """

        self._enable_debug = enable_debug

    @property
    def environment_id(self):
        """Gets the environment_id of this Environment.

        GTM Environment ID uniquely identifies the GTM Environment.

        :return: The environment_id of this Environment.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this Environment.

        GTM Environment ID uniquely identifies the GTM Environment.

        :param environment_id: The environment_id of this Environment.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Environment.

        The fingerprint of the GTM environment as computed at storage time. This value is recomputed whenever the environment is modified.

        :return: The fingerprint of this Environment.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Environment.

        The fingerprint of the GTM environment as computed at storage time. This value is recomputed whenever the environment is modified.

        :param fingerprint: The fingerprint of this Environment.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this Environment.

        The environment display name. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        The environment display name. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this Environment.

        GTM Environment's API relative path.

        :return: The path of this Environment.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Environment.

        GTM Environment's API relative path.

        :param path: The path of this Environment.
        :type path: str
        """

        self._path = path

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Environment.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Environment.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Environment.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Environment.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def type(self):
        """Gets the type of this Environment.

        The type of this environment.

        :return: The type of this Environment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Environment.

        The type of this environment.

        :param type: The type of this Environment.
        :type type: str
        """
        allowed_values = ["user", "live", "latest", "workspace"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this Environment.

        Default preview page url for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :return: The url of this Environment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Environment.

        Default preview page url for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update

        :param url: The url of this Environment.
        :type url: str
        """

        self._url = url

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Environment.

        Represents a link to a quick preview of a workspace.

        :return: The workspace_id of this Environment.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Environment.

        Represents a link to a quick preview of a workspace.

        :param workspace_id: The workspace_id of this Environment.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
