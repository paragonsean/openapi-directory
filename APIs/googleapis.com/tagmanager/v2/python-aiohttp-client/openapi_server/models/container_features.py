# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, support_built_in_variables: bool=None, support_clients: bool=None, support_environments: bool=None, support_folders: bool=None, support_gtag_configs: bool=None, support_tags: bool=None, support_templates: bool=None, support_transformations: bool=None, support_triggers: bool=None, support_user_permissions: bool=None, support_variables: bool=None, support_versions: bool=None, support_workspaces: bool=None, support_zones: bool=None):
        """ContainerFeatures - a model defined in OpenAPI

        :param support_built_in_variables: The support_built_in_variables of this ContainerFeatures.
        :param support_clients: The support_clients of this ContainerFeatures.
        :param support_environments: The support_environments of this ContainerFeatures.
        :param support_folders: The support_folders of this ContainerFeatures.
        :param support_gtag_configs: The support_gtag_configs of this ContainerFeatures.
        :param support_tags: The support_tags of this ContainerFeatures.
        :param support_templates: The support_templates of this ContainerFeatures.
        :param support_transformations: The support_transformations of this ContainerFeatures.
        :param support_triggers: The support_triggers of this ContainerFeatures.
        :param support_user_permissions: The support_user_permissions of this ContainerFeatures.
        :param support_variables: The support_variables of this ContainerFeatures.
        :param support_versions: The support_versions of this ContainerFeatures.
        :param support_workspaces: The support_workspaces of this ContainerFeatures.
        :param support_zones: The support_zones of this ContainerFeatures.
        """
        self.openapi_types = {
            'support_built_in_variables': bool,
            'support_clients': bool,
            'support_environments': bool,
            'support_folders': bool,
            'support_gtag_configs': bool,
            'support_tags': bool,
            'support_templates': bool,
            'support_transformations': bool,
            'support_triggers': bool,
            'support_user_permissions': bool,
            'support_variables': bool,
            'support_versions': bool,
            'support_workspaces': bool,
            'support_zones': bool
        }

        self.attribute_map = {
            'support_built_in_variables': 'supportBuiltInVariables',
            'support_clients': 'supportClients',
            'support_environments': 'supportEnvironments',
            'support_folders': 'supportFolders',
            'support_gtag_configs': 'supportGtagConfigs',
            'support_tags': 'supportTags',
            'support_templates': 'supportTemplates',
            'support_transformations': 'supportTransformations',
            'support_triggers': 'supportTriggers',
            'support_user_permissions': 'supportUserPermissions',
            'support_variables': 'supportVariables',
            'support_versions': 'supportVersions',
            'support_workspaces': 'supportWorkspaces',
            'support_zones': 'supportZones'
        }

        self._support_built_in_variables = support_built_in_variables
        self._support_clients = support_clients
        self._support_environments = support_environments
        self._support_folders = support_folders
        self._support_gtag_configs = support_gtag_configs
        self._support_tags = support_tags
        self._support_templates = support_templates
        self._support_transformations = support_transformations
        self._support_triggers = support_triggers
        self._support_user_permissions = support_user_permissions
        self._support_variables = support_variables
        self._support_versions = support_versions
        self._support_workspaces = support_workspaces
        self._support_zones = support_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerFeatures of this ContainerFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def support_built_in_variables(self):
        """Gets the support_built_in_variables of this ContainerFeatures.

        Whether this Container supports built-in variables

        :return: The support_built_in_variables of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_built_in_variables

    @support_built_in_variables.setter
    def support_built_in_variables(self, support_built_in_variables):
        """Sets the support_built_in_variables of this ContainerFeatures.

        Whether this Container supports built-in variables

        :param support_built_in_variables: The support_built_in_variables of this ContainerFeatures.
        :type support_built_in_variables: bool
        """

        self._support_built_in_variables = support_built_in_variables

    @property
    def support_clients(self):
        """Gets the support_clients of this ContainerFeatures.

        Whether this Container supports clients.

        :return: The support_clients of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_clients

    @support_clients.setter
    def support_clients(self, support_clients):
        """Sets the support_clients of this ContainerFeatures.

        Whether this Container supports clients.

        :param support_clients: The support_clients of this ContainerFeatures.
        :type support_clients: bool
        """

        self._support_clients = support_clients

    @property
    def support_environments(self):
        """Gets the support_environments of this ContainerFeatures.

        Whether this Container supports environments.

        :return: The support_environments of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_environments

    @support_environments.setter
    def support_environments(self, support_environments):
        """Sets the support_environments of this ContainerFeatures.

        Whether this Container supports environments.

        :param support_environments: The support_environments of this ContainerFeatures.
        :type support_environments: bool
        """

        self._support_environments = support_environments

    @property
    def support_folders(self):
        """Gets the support_folders of this ContainerFeatures.

        Whether this Container supports folders.

        :return: The support_folders of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_folders

    @support_folders.setter
    def support_folders(self, support_folders):
        """Sets the support_folders of this ContainerFeatures.

        Whether this Container supports folders.

        :param support_folders: The support_folders of this ContainerFeatures.
        :type support_folders: bool
        """

        self._support_folders = support_folders

    @property
    def support_gtag_configs(self):
        """Gets the support_gtag_configs of this ContainerFeatures.

        Whether this Container supports Google tag config.

        :return: The support_gtag_configs of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_gtag_configs

    @support_gtag_configs.setter
    def support_gtag_configs(self, support_gtag_configs):
        """Sets the support_gtag_configs of this ContainerFeatures.

        Whether this Container supports Google tag config.

        :param support_gtag_configs: The support_gtag_configs of this ContainerFeatures.
        :type support_gtag_configs: bool
        """

        self._support_gtag_configs = support_gtag_configs

    @property
    def support_tags(self):
        """Gets the support_tags of this ContainerFeatures.

        Whether this Container supports tags.

        :return: The support_tags of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_tags

    @support_tags.setter
    def support_tags(self, support_tags):
        """Sets the support_tags of this ContainerFeatures.

        Whether this Container supports tags.

        :param support_tags: The support_tags of this ContainerFeatures.
        :type support_tags: bool
        """

        self._support_tags = support_tags

    @property
    def support_templates(self):
        """Gets the support_templates of this ContainerFeatures.

        Whether this Container supports templates.

        :return: The support_templates of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_templates

    @support_templates.setter
    def support_templates(self, support_templates):
        """Sets the support_templates of this ContainerFeatures.

        Whether this Container supports templates.

        :param support_templates: The support_templates of this ContainerFeatures.
        :type support_templates: bool
        """

        self._support_templates = support_templates

    @property
    def support_transformations(self):
        """Gets the support_transformations of this ContainerFeatures.

        Whether this Container supports transformations.

        :return: The support_transformations of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_transformations

    @support_transformations.setter
    def support_transformations(self, support_transformations):
        """Sets the support_transformations of this ContainerFeatures.

        Whether this Container supports transformations.

        :param support_transformations: The support_transformations of this ContainerFeatures.
        :type support_transformations: bool
        """

        self._support_transformations = support_transformations

    @property
    def support_triggers(self):
        """Gets the support_triggers of this ContainerFeatures.

        Whether this Container supports triggers.

        :return: The support_triggers of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_triggers

    @support_triggers.setter
    def support_triggers(self, support_triggers):
        """Sets the support_triggers of this ContainerFeatures.

        Whether this Container supports triggers.

        :param support_triggers: The support_triggers of this ContainerFeatures.
        :type support_triggers: bool
        """

        self._support_triggers = support_triggers

    @property
    def support_user_permissions(self):
        """Gets the support_user_permissions of this ContainerFeatures.

        Whether this Container supports user permissions managed by GTM.

        :return: The support_user_permissions of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_user_permissions

    @support_user_permissions.setter
    def support_user_permissions(self, support_user_permissions):
        """Sets the support_user_permissions of this ContainerFeatures.

        Whether this Container supports user permissions managed by GTM.

        :param support_user_permissions: The support_user_permissions of this ContainerFeatures.
        :type support_user_permissions: bool
        """

        self._support_user_permissions = support_user_permissions

    @property
    def support_variables(self):
        """Gets the support_variables of this ContainerFeatures.

        Whether this Container supports variables.

        :return: The support_variables of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_variables

    @support_variables.setter
    def support_variables(self, support_variables):
        """Sets the support_variables of this ContainerFeatures.

        Whether this Container supports variables.

        :param support_variables: The support_variables of this ContainerFeatures.
        :type support_variables: bool
        """

        self._support_variables = support_variables

    @property
    def support_versions(self):
        """Gets the support_versions of this ContainerFeatures.

        Whether this Container supports Container versions.

        :return: The support_versions of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_versions

    @support_versions.setter
    def support_versions(self, support_versions):
        """Sets the support_versions of this ContainerFeatures.

        Whether this Container supports Container versions.

        :param support_versions: The support_versions of this ContainerFeatures.
        :type support_versions: bool
        """

        self._support_versions = support_versions

    @property
    def support_workspaces(self):
        """Gets the support_workspaces of this ContainerFeatures.

        Whether this Container supports workspaces.

        :return: The support_workspaces of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_workspaces

    @support_workspaces.setter
    def support_workspaces(self, support_workspaces):
        """Sets the support_workspaces of this ContainerFeatures.

        Whether this Container supports workspaces.

        :param support_workspaces: The support_workspaces of this ContainerFeatures.
        :type support_workspaces: bool
        """

        self._support_workspaces = support_workspaces

    @property
    def support_zones(self):
        """Gets the support_zones of this ContainerFeatures.

        Whether this Container supports zones.

        :return: The support_zones of this ContainerFeatures.
        :rtype: bool
        """
        return self._support_zones

    @support_zones.setter
    def support_zones(self, support_zones):
        """Sets the support_zones of this ContainerFeatures.

        Whether this Container supports zones.

        :param support_zones: The support_zones of this ContainerFeatures.
        :type support_zones: bool
        """

        self._support_zones = support_zones
