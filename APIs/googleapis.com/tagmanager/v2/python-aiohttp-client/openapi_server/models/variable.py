# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server.models.variable_format_value import VariableFormatValue
from openapi_server import util


class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, disabling_trigger_id: List[str]=None, enabling_trigger_id: List[str]=None, fingerprint: str=None, format_value: VariableFormatValue=None, name: str=None, notes: str=None, parameter: List[Parameter]=None, parent_folder_id: str=None, path: str=None, schedule_end_ms: str=None, schedule_start_ms: str=None, tag_manager_url: str=None, type: str=None, variable_id: str=None, workspace_id: str=None):
        """Variable - a model defined in OpenAPI

        :param account_id: The account_id of this Variable.
        :param container_id: The container_id of this Variable.
        :param disabling_trigger_id: The disabling_trigger_id of this Variable.
        :param enabling_trigger_id: The enabling_trigger_id of this Variable.
        :param fingerprint: The fingerprint of this Variable.
        :param format_value: The format_value of this Variable.
        :param name: The name of this Variable.
        :param notes: The notes of this Variable.
        :param parameter: The parameter of this Variable.
        :param parent_folder_id: The parent_folder_id of this Variable.
        :param path: The path of this Variable.
        :param schedule_end_ms: The schedule_end_ms of this Variable.
        :param schedule_start_ms: The schedule_start_ms of this Variable.
        :param tag_manager_url: The tag_manager_url of this Variable.
        :param type: The type of this Variable.
        :param variable_id: The variable_id of this Variable.
        :param workspace_id: The workspace_id of this Variable.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'disabling_trigger_id': List[str],
            'enabling_trigger_id': List[str],
            'fingerprint': str,
            'format_value': VariableFormatValue,
            'name': str,
            'notes': str,
            'parameter': List[Parameter],
            'parent_folder_id': str,
            'path': str,
            'schedule_end_ms': str,
            'schedule_start_ms': str,
            'tag_manager_url': str,
            'type': str,
            'variable_id': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'disabling_trigger_id': 'disablingTriggerId',
            'enabling_trigger_id': 'enablingTriggerId',
            'fingerprint': 'fingerprint',
            'format_value': 'formatValue',
            'name': 'name',
            'notes': 'notes',
            'parameter': 'parameter',
            'parent_folder_id': 'parentFolderId',
            'path': 'path',
            'schedule_end_ms': 'scheduleEndMs',
            'schedule_start_ms': 'scheduleStartMs',
            'tag_manager_url': 'tagManagerUrl',
            'type': 'type',
            'variable_id': 'variableId',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._disabling_trigger_id = disabling_trigger_id
        self._enabling_trigger_id = enabling_trigger_id
        self._fingerprint = fingerprint
        self._format_value = format_value
        self._name = name
        self._notes = notes
        self._parameter = parameter
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._schedule_end_ms = schedule_end_ms
        self._schedule_start_ms = schedule_start_ms
        self._tag_manager_url = tag_manager_url
        self._type = type
        self._variable_id = variable_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Variable of this Variable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Variable.

        GTM Account ID.

        :return: The account_id of this Variable.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Variable.

        GTM Account ID.

        :param account_id: The account_id of this Variable.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this Variable.

        GTM Container ID.

        :return: The container_id of this Variable.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Variable.

        GTM Container ID.

        :param container_id: The container_id of this Variable.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def disabling_trigger_id(self):
        """Gets the disabling_trigger_id of this Variable.

        For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The disabling_trigger_id of this Variable.
        :rtype: List[str]
        """
        return self._disabling_trigger_id

    @disabling_trigger_id.setter
    def disabling_trigger_id(self, disabling_trigger_id):
        """Sets the disabling_trigger_id of this Variable.

        For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param disabling_trigger_id: The disabling_trigger_id of this Variable.
        :type disabling_trigger_id: List[str]
        """

        self._disabling_trigger_id = disabling_trigger_id

    @property
    def enabling_trigger_id(self):
        """Gets the enabling_trigger_id of this Variable.

        For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The enabling_trigger_id of this Variable.
        :rtype: List[str]
        """
        return self._enabling_trigger_id

    @enabling_trigger_id.setter
    def enabling_trigger_id(self, enabling_trigger_id):
        """Sets the enabling_trigger_id of this Variable.

        For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param enabling_trigger_id: The enabling_trigger_id of this Variable.
        :type enabling_trigger_id: List[str]
        """

        self._enabling_trigger_id = enabling_trigger_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Variable.

        The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.

        :return: The fingerprint of this Variable.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Variable.

        The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.

        :param fingerprint: The fingerprint of this Variable.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def format_value(self):
        """Gets the format_value of this Variable.


        :return: The format_value of this Variable.
        :rtype: VariableFormatValue
        """
        return self._format_value

    @format_value.setter
    def format_value(self, format_value):
        """Sets the format_value of this Variable.


        :param format_value: The format_value of this Variable.
        :type format_value: VariableFormatValue
        """

        self._format_value = format_value

    @property
    def name(self):
        """Gets the name of this Variable.

        Variable display name. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variable.

        Variable display name. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param name: The name of this Variable.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Variable.

        User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The notes of this Variable.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Variable.

        User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param notes: The notes of this Variable.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameter(self):
        """Gets the parameter of this Variable.

        The variable's parameters. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The parameter of this Variable.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Variable.

        The variable's parameters. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param parameter: The parameter of this Variable.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Variable.

        Parent folder id.

        :return: The parent_folder_id of this Variable.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Variable.

        Parent folder id.

        :param parent_folder_id: The parent_folder_id of this Variable.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this Variable.

        GTM Variable's API relative path.

        :return: The path of this Variable.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Variable.

        GTM Variable's API relative path.

        :param path: The path of this Variable.
        :type path: str
        """

        self._path = path

    @property
    def schedule_end_ms(self):
        """Gets the schedule_end_ms of this Variable.

        The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The schedule_end_ms of this Variable.
        :rtype: str
        """
        return self._schedule_end_ms

    @schedule_end_ms.setter
    def schedule_end_ms(self, schedule_end_ms):
        """Sets the schedule_end_ms of this Variable.

        The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param schedule_end_ms: The schedule_end_ms of this Variable.
        :type schedule_end_ms: str
        """

        self._schedule_end_ms = schedule_end_ms

    @property
    def schedule_start_ms(self):
        """Gets the schedule_start_ms of this Variable.

        The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The schedule_start_ms of this Variable.
        :rtype: str
        """
        return self._schedule_start_ms

    @schedule_start_ms.setter
    def schedule_start_ms(self, schedule_start_ms):
        """Sets the schedule_start_ms of this Variable.

        The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param schedule_start_ms: The schedule_start_ms of this Variable.
        :type schedule_start_ms: str
        """

        self._schedule_start_ms = schedule_start_ms

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Variable.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Variable.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Variable.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Variable.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def type(self):
        """Gets the type of this Variable.

        GTM Variable Type. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :return: The type of this Variable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Variable.

        GTM Variable Type. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update

        :param type: The type of this Variable.
        :type type: str
        """

        self._type = type

    @property
    def variable_id(self):
        """Gets the variable_id of this Variable.

        The Variable ID uniquely identifies the GTM Variable.

        :return: The variable_id of this Variable.
        :rtype: str
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """Sets the variable_id of this Variable.

        The Variable ID uniquely identifies the GTM Variable.

        :param variable_id: The variable_id of this Variable.
        :type variable_id: str
        """

        self._variable_id = variable_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Variable.

        GTM Workspace ID.

        :return: The workspace_id of this Variable.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Variable.

        GTM Workspace ID.

        :param workspace_id: The workspace_id of this Variable.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
