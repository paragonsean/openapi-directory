# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.merge_conflict import MergeConflict
from openapi_server.models.sync_status import SyncStatus
from openapi_server import util


class SyncWorkspaceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merge_conflict: List[MergeConflict]=None, sync_status: SyncStatus=None):
        """SyncWorkspaceResponse - a model defined in OpenAPI

        :param merge_conflict: The merge_conflict of this SyncWorkspaceResponse.
        :param sync_status: The sync_status of this SyncWorkspaceResponse.
        """
        self.openapi_types = {
            'merge_conflict': List[MergeConflict],
            'sync_status': SyncStatus
        }

        self.attribute_map = {
            'merge_conflict': 'mergeConflict',
            'sync_status': 'syncStatus'
        }

        self._merge_conflict = merge_conflict
        self._sync_status = sync_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncWorkspaceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncWorkspaceResponse of this SyncWorkspaceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merge_conflict(self):
        """Gets the merge_conflict of this SyncWorkspaceResponse.

        The merge conflict after sync. If this field is not empty, the sync is still treated as successful. But a version cannot be created until all conflicts are resolved.

        :return: The merge_conflict of this SyncWorkspaceResponse.
        :rtype: List[MergeConflict]
        """
        return self._merge_conflict

    @merge_conflict.setter
    def merge_conflict(self, merge_conflict):
        """Sets the merge_conflict of this SyncWorkspaceResponse.

        The merge conflict after sync. If this field is not empty, the sync is still treated as successful. But a version cannot be created until all conflicts are resolved.

        :param merge_conflict: The merge_conflict of this SyncWorkspaceResponse.
        :type merge_conflict: List[MergeConflict]
        """

        self._merge_conflict = merge_conflict

    @property
    def sync_status(self):
        """Gets the sync_status of this SyncWorkspaceResponse.


        :return: The sync_status of this SyncWorkspaceResponse.
        :rtype: SyncStatus
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this SyncWorkspaceResponse.


        :param sync_status: The sync_status of this SyncWorkspaceResponse.
        :type sync_status: SyncStatus
        """

        self._sync_status = sync_status
