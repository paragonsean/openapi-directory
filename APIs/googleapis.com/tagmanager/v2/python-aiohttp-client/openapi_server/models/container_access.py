# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id: str=None, permission: str=None):
        """ContainerAccess - a model defined in OpenAPI

        :param container_id: The container_id of this ContainerAccess.
        :param permission: The permission of this ContainerAccess.
        """
        self.openapi_types = {
            'container_id': str,
            'permission': str
        }

        self.attribute_map = {
            'container_id': 'containerId',
            'permission': 'permission'
        }

        self._container_id = container_id
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerAccess of this ContainerAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self):
        """Gets the container_id of this ContainerAccess.

        GTM Container ID. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :return: The container_id of this ContainerAccess.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ContainerAccess.

        GTM Container ID. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :param container_id: The container_id of this ContainerAccess.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def permission(self):
        """Gets the permission of this ContainerAccess.

        List of Container permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :return: The permission of this ContainerAccess.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ContainerAccess.

        List of Container permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :param permission: The permission of this ContainerAccess.
        :type permission: str
        """
        allowed_values = ["containerPermissionUnspecified", "noAccess", "read", "edit", "approve", "publish"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission
