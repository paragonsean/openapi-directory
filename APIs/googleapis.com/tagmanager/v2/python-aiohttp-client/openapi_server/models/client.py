# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class Client(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, client_id: str=None, container_id: str=None, fingerprint: str=None, name: str=None, notes: str=None, parameter: List[Parameter]=None, parent_folder_id: str=None, path: str=None, priority: int=None, tag_manager_url: str=None, type: str=None, workspace_id: str=None):
        """Client - a model defined in OpenAPI

        :param account_id: The account_id of this Client.
        :param client_id: The client_id of this Client.
        :param container_id: The container_id of this Client.
        :param fingerprint: The fingerprint of this Client.
        :param name: The name of this Client.
        :param notes: The notes of this Client.
        :param parameter: The parameter of this Client.
        :param parent_folder_id: The parent_folder_id of this Client.
        :param path: The path of this Client.
        :param priority: The priority of this Client.
        :param tag_manager_url: The tag_manager_url of this Client.
        :param type: The type of this Client.
        :param workspace_id: The workspace_id of this Client.
        """
        self.openapi_types = {
            'account_id': str,
            'client_id': str,
            'container_id': str,
            'fingerprint': str,
            'name': str,
            'notes': str,
            'parameter': List[Parameter],
            'parent_folder_id': str,
            'path': str,
            'priority': int,
            'tag_manager_url': str,
            'type': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'client_id': 'clientId',
            'container_id': 'containerId',
            'fingerprint': 'fingerprint',
            'name': 'name',
            'notes': 'notes',
            'parameter': 'parameter',
            'parent_folder_id': 'parentFolderId',
            'path': 'path',
            'priority': 'priority',
            'tag_manager_url': 'tagManagerUrl',
            'type': 'type',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._client_id = client_id
        self._container_id = container_id
        self._fingerprint = fingerprint
        self._name = name
        self._notes = notes
        self._parameter = parameter
        self._parent_folder_id = parent_folder_id
        self._path = path
        self._priority = priority
        self._tag_manager_url = tag_manager_url
        self._type = type
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Client':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Client of this Client.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Client.

        GTM Account ID.

        :return: The account_id of this Client.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Client.

        GTM Account ID.

        :param account_id: The account_id of this Client.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def client_id(self):
        """Gets the client_id of this Client.

        The Client ID uniquely identifies the GTM client.

        :return: The client_id of this Client.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Client.

        The Client ID uniquely identifies the GTM client.

        :param client_id: The client_id of this Client.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def container_id(self):
        """Gets the container_id of this Client.

        GTM Container ID.

        :return: The container_id of this Client.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Client.

        GTM Container ID.

        :param container_id: The container_id of this Client.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Client.

        The fingerprint of the GTM Client as computed at storage time. This value is recomputed whenever the client is modified.

        :return: The fingerprint of this Client.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Client.

        The fingerprint of the GTM Client as computed at storage time. This value is recomputed whenever the client is modified.

        :param fingerprint: The fingerprint of this Client.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this Client.

        Client display name. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :return: The name of this Client.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.

        Client display name. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :param name: The name of this Client.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Client.

        User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update

        :return: The notes of this Client.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Client.

        User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update

        :param notes: The notes of this Client.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameter(self):
        """Gets the parameter of this Client.

        The client's parameters. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :return: The parameter of this Client.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Client.

        The client's parameters. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :param parameter: The parameter of this Client.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Client.

        Parent folder id.

        :return: The parent_folder_id of this Client.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Client.

        Parent folder id.

        :param parent_folder_id: The parent_folder_id of this Client.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def path(self):
        """Gets the path of this Client.

        GTM client's API relative path.

        :return: The path of this Client.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Client.

        GTM client's API relative path.

        :param path: The path of this Client.
        :type path: str
        """

        self._path = path

    @property
    def priority(self):
        """Gets the priority of this Client.

        Priority determines relative firing order. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :return: The priority of this Client.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Client.

        Priority determines relative firing order. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :param priority: The priority of this Client.
        :type priority: int
        """

        self._priority = priority

    @property
    def tag_manager_url(self):
        """Gets the tag_manager_url of this Client.

        Auto generated link to the tag manager UI

        :return: The tag_manager_url of this Client.
        :rtype: str
        """
        return self._tag_manager_url

    @tag_manager_url.setter
    def tag_manager_url(self, tag_manager_url):
        """Sets the tag_manager_url of this Client.

        Auto generated link to the tag manager UI

        :param tag_manager_url: The tag_manager_url of this Client.
        :type tag_manager_url: str
        """

        self._tag_manager_url = tag_manager_url

    @property
    def type(self):
        """Gets the type of this Client.

        Client type. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :return: The type of this Client.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Client.

        Client type. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update

        :param type: The type of this Client.
        :type type: str
        """

        self._type = type

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Client.

        GTM Workspace ID.

        :return: The workspace_id of this Client.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Client.

        GTM Workspace ID.

        :param workspace_id: The workspace_id of this Client.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
