# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server import util


class ZoneBoundary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: List[Condition]=None, custom_evaluation_trigger_id: List[str]=None):
        """ZoneBoundary - a model defined in OpenAPI

        :param condition: The condition of this ZoneBoundary.
        :param custom_evaluation_trigger_id: The custom_evaluation_trigger_id of this ZoneBoundary.
        """
        self.openapi_types = {
            'condition': List[Condition],
            'custom_evaluation_trigger_id': List[str]
        }

        self.attribute_map = {
            'condition': 'condition',
            'custom_evaluation_trigger_id': 'customEvaluationTriggerId'
        }

        self._condition = condition
        self._custom_evaluation_trigger_id = custom_evaluation_trigger_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneBoundary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneBoundary of this ZoneBoundary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this ZoneBoundary.

        The conditions that, when conjoined, make up the boundary.

        :return: The condition of this ZoneBoundary.
        :rtype: List[Condition]
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ZoneBoundary.

        The conditions that, when conjoined, make up the boundary.

        :param condition: The condition of this ZoneBoundary.
        :type condition: List[Condition]
        """

        self._condition = condition

    @property
    def custom_evaluation_trigger_id(self):
        """Gets the custom_evaluation_trigger_id of this ZoneBoundary.

        Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true.

        :return: The custom_evaluation_trigger_id of this ZoneBoundary.
        :rtype: List[str]
        """
        return self._custom_evaluation_trigger_id

    @custom_evaluation_trigger_id.setter
    def custom_evaluation_trigger_id(self, custom_evaluation_trigger_id):
        """Sets the custom_evaluation_trigger_id of this ZoneBoundary.

        Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true.

        :param custom_evaluation_trigger_id: The custom_evaluation_trigger_id of this ZoneBoundary.
        :type custom_evaluation_trigger_id: List[str]
        """

        self._custom_evaluation_trigger_id = custom_evaluation_trigger_id
