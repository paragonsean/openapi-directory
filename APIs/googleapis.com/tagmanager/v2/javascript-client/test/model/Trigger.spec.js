/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TagManagerApi);
  }
}(this, function(expect, TagManagerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TagManagerApi.Trigger();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Trigger', function() {
    it('should create an instance of Trigger', function() {
      // uncomment below and update the code to test Trigger
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be.a(TagManagerApi.Trigger);
    });

    it('should have the property accountId (base name: "accountId")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property autoEventFilter (base name: "autoEventFilter")', function() {
      // uncomment below and update the code to test the property autoEventFilter
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property checkValidation (base name: "checkValidation")', function() {
      // uncomment below and update the code to test the property checkValidation
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property containerId (base name: "containerId")', function() {
      // uncomment below and update the code to test the property containerId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property continuousTimeMinMilliseconds (base name: "continuousTimeMinMilliseconds")', function() {
      // uncomment below and update the code to test the property continuousTimeMinMilliseconds
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property customEventFilter (base name: "customEventFilter")', function() {
      // uncomment below and update the code to test the property customEventFilter
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property eventName (base name: "eventName")', function() {
      // uncomment below and update the code to test the property eventName
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property filter (base name: "filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property fingerprint (base name: "fingerprint")', function() {
      // uncomment below and update the code to test the property fingerprint
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property horizontalScrollPercentageList (base name: "horizontalScrollPercentageList")', function() {
      // uncomment below and update the code to test the property horizontalScrollPercentageList
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property intervalSeconds (base name: "intervalSeconds")', function() {
      // uncomment below and update the code to test the property intervalSeconds
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property maxTimerLengthSeconds (base name: "maxTimerLengthSeconds")', function() {
      // uncomment below and update the code to test the property maxTimerLengthSeconds
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property parameter (base name: "parameter")', function() {
      // uncomment below and update the code to test the property parameter
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property parentFolderId (base name: "parentFolderId")', function() {
      // uncomment below and update the code to test the property parentFolderId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property selector (base name: "selector")', function() {
      // uncomment below and update the code to test the property selector
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property tagManagerUrl (base name: "tagManagerUrl")', function() {
      // uncomment below and update the code to test the property tagManagerUrl
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property totalTimeMinMilliseconds (base name: "totalTimeMinMilliseconds")', function() {
      // uncomment below and update the code to test the property totalTimeMinMilliseconds
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property triggerId (base name: "triggerId")', function() {
      // uncomment below and update the code to test the property triggerId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property uniqueTriggerId (base name: "uniqueTriggerId")', function() {
      // uncomment below and update the code to test the property uniqueTriggerId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property verticalScrollPercentageList (base name: "verticalScrollPercentageList")', function() {
      // uncomment below and update the code to test the property verticalScrollPercentageList
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property visibilitySelector (base name: "visibilitySelector")', function() {
      // uncomment below and update the code to test the property visibilitySelector
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property visiblePercentageMax (base name: "visiblePercentageMax")', function() {
      // uncomment below and update the code to test the property visiblePercentageMax
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property visiblePercentageMin (base name: "visiblePercentageMin")', function() {
      // uncomment below and update the code to test the property visiblePercentageMin
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property waitForTags (base name: "waitForTags")', function() {
      // uncomment below and update the code to test the property waitForTags
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property waitForTagsTimeout (base name: "waitForTagsTimeout")', function() {
      // uncomment below and update the code to test the property waitForTagsTimeout
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

    it('should have the property workspaceId (base name: "workspaceId")', function() {
      // uncomment below and update the code to test the property workspaceId
      //var instance = new TagManagerApi.Trigger();
      //expect(instance).to.be();
    });

  });

}));
