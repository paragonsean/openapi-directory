/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The Condition model module.
 * @module model/Condition
 * @version v2
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * Represents a predicate.
     * @alias module:model/Condition
     */
    constructor() { 
        
        Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], [Parameter]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        if (data['parameter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter'])) {
                throw new Error("Expected the field `parameter` to be an array in the JSON data but got " + data['parameter']);
            }
            // validate the optional field `parameter` (array)
            for (const item of data['parameter']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
 * @member {Array.<module:model/Parameter>} parameter
 */
Condition.prototype['parameter'] = undefined;

/**
 * The type of operator for this condition. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
 * @member {module:model/Condition.TypeEnum} type
 */
Condition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Condition['TypeEnum'] = {

    /**
     * value: "conditionTypeUnspecified"
     * @const
     */
    "conditionTypeUnspecified": "conditionTypeUnspecified",

    /**
     * value: "equals"
     * @const
     */
    "equals": "equals",

    /**
     * value: "contains"
     * @const
     */
    "contains": "contains",

    /**
     * value: "startsWith"
     * @const
     */
    "startsWith": "startsWith",

    /**
     * value: "endsWith"
     * @const
     */
    "endsWith": "endsWith",

    /**
     * value: "matchRegex"
     * @const
     */
    "matchRegex": "matchRegex",

    /**
     * value: "greater"
     * @const
     */
    "greater": "greater",

    /**
     * value: "greaterOrEquals"
     * @const
     */
    "greaterOrEquals": "greaterOrEquals",

    /**
     * value: "less"
     * @const
     */
    "less": "less",

    /**
     * value: "lessOrEquals"
     * @const
     */
    "lessOrEquals": "lessOrEquals",

    /**
     * value: "cssSelector"
     * @const
     */
    "cssSelector": "cssSelector",

    /**
     * value: "urlMatches"
     * @const
     */
    "urlMatches": "urlMatches"
};



export default Condition;

