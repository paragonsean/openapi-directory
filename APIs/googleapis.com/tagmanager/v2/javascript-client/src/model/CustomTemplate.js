/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GalleryReference from './GalleryReference';

/**
 * The CustomTemplate model module.
 * @module model/CustomTemplate
 * @version v2
 */
class CustomTemplate {
    /**
     * Constructs a new <code>CustomTemplate</code>.
     * Represents a Google Tag Manager Custom Template&#39;s contents.
     * @alias module:model/CustomTemplate
     */
    constructor() { 
        
        CustomTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomTemplate} obj Optional instance to populate.
     * @return {module:model/CustomTemplate} The populated <code>CustomTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomTemplate();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('galleryReference')) {
                obj['galleryReference'] = GalleryReference.constructFromObject(data['galleryReference']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('templateData')) {
                obj['templateData'] = ApiClient.convertToType(data['templateData'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // validate the optional field `galleryReference`
        if (data['galleryReference']) { // data not null
          GalleryReference.validateJSON(data['galleryReference']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        // ensure the json data is a string
        if (data['templateData'] && !(typeof data['templateData'] === 'string' || data['templateData'] instanceof String)) {
            throw new Error("Expected the field `templateData` to be a primitive type in the JSON string but got " + data['templateData']);
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
CustomTemplate.prototype['accountId'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
CustomTemplate.prototype['containerId'] = undefined;

/**
 * The fingerprint of the GTM Custom Template as computed at storage time. This value is recomputed whenever the template is modified.
 * @member {String} fingerprint
 */
CustomTemplate.prototype['fingerprint'] = undefined;

/**
 * @member {module:model/GalleryReference} galleryReference
 */
CustomTemplate.prototype['galleryReference'] = undefined;

/**
 * Custom Template display name.
 * @member {String} name
 */
CustomTemplate.prototype['name'] = undefined;

/**
 * GTM Custom Template's API relative path.
 * @member {String} path
 */
CustomTemplate.prototype['path'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
CustomTemplate.prototype['tagManagerUrl'] = undefined;

/**
 * The custom template in text format.
 * @member {String} templateData
 */
CustomTemplate.prototype['templateData'] = undefined;

/**
 * The Custom Template ID uniquely identifies the GTM custom template.
 * @member {String} templateId
 */
CustomTemplate.prototype['templateId'] = undefined;

/**
 * GTM Workspace ID.
 * @member {String} workspaceId
 */
CustomTemplate.prototype['workspaceId'] = undefined;






export default CustomTemplate;

