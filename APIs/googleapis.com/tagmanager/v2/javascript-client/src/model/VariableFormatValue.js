/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The VariableFormatValue model module.
 * @module model/VariableFormatValue
 * @version v2
 */
class VariableFormatValue {
    /**
     * Constructs a new <code>VariableFormatValue</code>.
     * @alias module:model/VariableFormatValue
     */
    constructor() { 
        
        VariableFormatValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VariableFormatValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VariableFormatValue} obj Optional instance to populate.
     * @return {module:model/VariableFormatValue} The populated <code>VariableFormatValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VariableFormatValue();

            if (data.hasOwnProperty('caseConversionType')) {
                obj['caseConversionType'] = ApiClient.convertToType(data['caseConversionType'], 'String');
            }
            if (data.hasOwnProperty('convertFalseToValue')) {
                obj['convertFalseToValue'] = Parameter.constructFromObject(data['convertFalseToValue']);
            }
            if (data.hasOwnProperty('convertNullToValue')) {
                obj['convertNullToValue'] = Parameter.constructFromObject(data['convertNullToValue']);
            }
            if (data.hasOwnProperty('convertTrueToValue')) {
                obj['convertTrueToValue'] = Parameter.constructFromObject(data['convertTrueToValue']);
            }
            if (data.hasOwnProperty('convertUndefinedToValue')) {
                obj['convertUndefinedToValue'] = Parameter.constructFromObject(data['convertUndefinedToValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VariableFormatValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VariableFormatValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caseConversionType'] && !(typeof data['caseConversionType'] === 'string' || data['caseConversionType'] instanceof String)) {
            throw new Error("Expected the field `caseConversionType` to be a primitive type in the JSON string but got " + data['caseConversionType']);
        }
        // validate the optional field `convertFalseToValue`
        if (data['convertFalseToValue']) { // data not null
          Parameter.validateJSON(data['convertFalseToValue']);
        }
        // validate the optional field `convertNullToValue`
        if (data['convertNullToValue']) { // data not null
          Parameter.validateJSON(data['convertNullToValue']);
        }
        // validate the optional field `convertTrueToValue`
        if (data['convertTrueToValue']) { // data not null
          Parameter.validateJSON(data['convertTrueToValue']);
        }
        // validate the optional field `convertUndefinedToValue`
        if (data['convertUndefinedToValue']) { // data not null
          Parameter.validateJSON(data['convertUndefinedToValue']);
        }

        return true;
    }


}



/**
 * The option to convert a string-type variable value to either lowercase or uppercase.
 * @member {module:model/VariableFormatValue.CaseConversionTypeEnum} caseConversionType
 */
VariableFormatValue.prototype['caseConversionType'] = undefined;

/**
 * @member {module:model/Parameter} convertFalseToValue
 */
VariableFormatValue.prototype['convertFalseToValue'] = undefined;

/**
 * @member {module:model/Parameter} convertNullToValue
 */
VariableFormatValue.prototype['convertNullToValue'] = undefined;

/**
 * @member {module:model/Parameter} convertTrueToValue
 */
VariableFormatValue.prototype['convertTrueToValue'] = undefined;

/**
 * @member {module:model/Parameter} convertUndefinedToValue
 */
VariableFormatValue.prototype['convertUndefinedToValue'] = undefined;





/**
 * Allowed values for the <code>caseConversionType</code> property.
 * @enum {String}
 * @readonly
 */
VariableFormatValue['CaseConversionTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "lowercase"
     * @const
     */
    "lowercase": "lowercase",

    /**
     * value: "uppercase"
     * @const
     */
    "uppercase": "uppercase"
};



export default VariableFormatValue;

