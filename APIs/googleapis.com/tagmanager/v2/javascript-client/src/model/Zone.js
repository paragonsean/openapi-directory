/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZoneBoundary from './ZoneBoundary';
import ZoneChildContainer from './ZoneChildContainer';
import ZoneTypeRestriction from './ZoneTypeRestriction';

/**
 * The Zone model module.
 * @module model/Zone
 * @version v2
 */
class Zone {
    /**
     * Constructs a new <code>Zone</code>.
     * Represents a Google Tag Manager Zone&#39;s contents.
     * @alias module:model/Zone
     */
    constructor() { 
        
        Zone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Zone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Zone} obj Optional instance to populate.
     * @return {module:model/Zone} The populated <code>Zone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Zone();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('boundary')) {
                obj['boundary'] = ZoneBoundary.constructFromObject(data['boundary']);
            }
            if (data.hasOwnProperty('childContainer')) {
                obj['childContainer'] = ApiClient.convertToType(data['childContainer'], [ZoneChildContainer]);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('typeRestriction')) {
                obj['typeRestriction'] = ZoneTypeRestriction.constructFromObject(data['typeRestriction']);
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
            if (data.hasOwnProperty('zoneId')) {
                obj['zoneId'] = ApiClient.convertToType(data['zoneId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Zone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Zone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `boundary`
        if (data['boundary']) { // data not null
          ZoneBoundary.validateJSON(data['boundary']);
        }
        if (data['childContainer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childContainer'])) {
                throw new Error("Expected the field `childContainer` to be an array in the JSON data but got " + data['childContainer']);
            }
            // validate the optional field `childContainer` (array)
            for (const item of data['childContainer']) {
                ZoneChildContainer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        // validate the optional field `typeRestriction`
        if (data['typeRestriction']) { // data not null
          ZoneTypeRestriction.validateJSON(data['typeRestriction']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }
        // ensure the json data is a string
        if (data['zoneId'] && !(typeof data['zoneId'] === 'string' || data['zoneId'] instanceof String)) {
            throw new Error("Expected the field `zoneId` to be a primitive type in the JSON string but got " + data['zoneId']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Zone.prototype['accountId'] = undefined;

/**
 * @member {module:model/ZoneBoundary} boundary
 */
Zone.prototype['boundary'] = undefined;

/**
 * Containers that are children of this Zone.
 * @member {Array.<module:model/ZoneChildContainer>} childContainer
 */
Zone.prototype['childContainer'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
Zone.prototype['containerId'] = undefined;

/**
 * The fingerprint of the GTM Zone as computed at storage time. This value is recomputed whenever the zone is modified.
 * @member {String} fingerprint
 */
Zone.prototype['fingerprint'] = undefined;

/**
 * Zone display name.
 * @member {String} name
 */
Zone.prototype['name'] = undefined;

/**
 * User notes on how to apply this zone in the container.
 * @member {String} notes
 */
Zone.prototype['notes'] = undefined;

/**
 * GTM Zone's API relative path.
 * @member {String} path
 */
Zone.prototype['path'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
Zone.prototype['tagManagerUrl'] = undefined;

/**
 * @member {module:model/ZoneTypeRestriction} typeRestriction
 */
Zone.prototype['typeRestriction'] = undefined;

/**
 * GTM Workspace ID.
 * @member {String} workspaceId
 */
Zone.prototype['workspaceId'] = undefined;

/**
 * The Zone ID uniquely identifies the GTM Zone.
 * @member {String} zoneId
 */
Zone.prototype['zoneId'] = undefined;






export default Zone;

