/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';
import SetupTag from './SetupTag';
import TagConsentSetting from './TagConsentSetting';
import TeardownTag from './TeardownTag';

/**
 * The Tag model module.
 * @module model/Tag
 * @version v2
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * Represents a Google Tag Manager Tag.
     * @alias module:model/Tag
     */
    constructor() { 
        
        Tag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('blockingRuleId')) {
                obj['blockingRuleId'] = ApiClient.convertToType(data['blockingRuleId'], ['String']);
            }
            if (data.hasOwnProperty('blockingTriggerId')) {
                obj['blockingTriggerId'] = ApiClient.convertToType(data['blockingTriggerId'], ['String']);
            }
            if (data.hasOwnProperty('consentSettings')) {
                obj['consentSettings'] = TagConsentSetting.constructFromObject(data['consentSettings']);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('firingRuleId')) {
                obj['firingRuleId'] = ApiClient.convertToType(data['firingRuleId'], ['String']);
            }
            if (data.hasOwnProperty('firingTriggerId')) {
                obj['firingTriggerId'] = ApiClient.convertToType(data['firingTriggerId'], ['String']);
            }
            if (data.hasOwnProperty('liveOnly')) {
                obj['liveOnly'] = ApiClient.convertToType(data['liveOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('monitoringMetadata')) {
                obj['monitoringMetadata'] = Parameter.constructFromObject(data['monitoringMetadata']);
            }
            if (data.hasOwnProperty('monitoringMetadataTagNameKey')) {
                obj['monitoringMetadataTagNameKey'] = ApiClient.convertToType(data['monitoringMetadataTagNameKey'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], [Parameter]);
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('paused')) {
                obj['paused'] = ApiClient.convertToType(data['paused'], 'Boolean');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = Parameter.constructFromObject(data['priority']);
            }
            if (data.hasOwnProperty('scheduleEndMs')) {
                obj['scheduleEndMs'] = ApiClient.convertToType(data['scheduleEndMs'], 'String');
            }
            if (data.hasOwnProperty('scheduleStartMs')) {
                obj['scheduleStartMs'] = ApiClient.convertToType(data['scheduleStartMs'], 'String');
            }
            if (data.hasOwnProperty('setupTag')) {
                obj['setupTag'] = ApiClient.convertToType(data['setupTag'], [SetupTag]);
            }
            if (data.hasOwnProperty('tagFiringOption')) {
                obj['tagFiringOption'] = ApiClient.convertToType(data['tagFiringOption'], 'String');
            }
            if (data.hasOwnProperty('tagId')) {
                obj['tagId'] = ApiClient.convertToType(data['tagId'], 'String');
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('teardownTag')) {
                obj['teardownTag'] = ApiClient.convertToType(data['teardownTag'], [TeardownTag]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockingRuleId'])) {
            throw new Error("Expected the field `blockingRuleId` to be an array in the JSON data but got " + data['blockingRuleId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockingTriggerId'])) {
            throw new Error("Expected the field `blockingTriggerId` to be an array in the JSON data but got " + data['blockingTriggerId']);
        }
        // validate the optional field `consentSettings`
        if (data['consentSettings']) { // data not null
          TagConsentSetting.validateJSON(data['consentSettings']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['firingRuleId'])) {
            throw new Error("Expected the field `firingRuleId` to be an array in the JSON data but got " + data['firingRuleId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['firingTriggerId'])) {
            throw new Error("Expected the field `firingTriggerId` to be an array in the JSON data but got " + data['firingTriggerId']);
        }
        // validate the optional field `monitoringMetadata`
        if (data['monitoringMetadata']) { // data not null
          Parameter.validateJSON(data['monitoringMetadata']);
        }
        // ensure the json data is a string
        if (data['monitoringMetadataTagNameKey'] && !(typeof data['monitoringMetadataTagNameKey'] === 'string' || data['monitoringMetadataTagNameKey'] instanceof String)) {
            throw new Error("Expected the field `monitoringMetadataTagNameKey` to be a primitive type in the JSON string but got " + data['monitoringMetadataTagNameKey']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['parameter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter'])) {
                throw new Error("Expected the field `parameter` to be an array in the JSON data but got " + data['parameter']);
            }
            // validate the optional field `parameter` (array)
            for (const item of data['parameter']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `priority`
        if (data['priority']) { // data not null
          Parameter.validateJSON(data['priority']);
        }
        // ensure the json data is a string
        if (data['scheduleEndMs'] && !(typeof data['scheduleEndMs'] === 'string' || data['scheduleEndMs'] instanceof String)) {
            throw new Error("Expected the field `scheduleEndMs` to be a primitive type in the JSON string but got " + data['scheduleEndMs']);
        }
        // ensure the json data is a string
        if (data['scheduleStartMs'] && !(typeof data['scheduleStartMs'] === 'string' || data['scheduleStartMs'] instanceof String)) {
            throw new Error("Expected the field `scheduleStartMs` to be a primitive type in the JSON string but got " + data['scheduleStartMs']);
        }
        if (data['setupTag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['setupTag'])) {
                throw new Error("Expected the field `setupTag` to be an array in the JSON data but got " + data['setupTag']);
            }
            // validate the optional field `setupTag` (array)
            for (const item of data['setupTag']) {
                SetupTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tagFiringOption'] && !(typeof data['tagFiringOption'] === 'string' || data['tagFiringOption'] instanceof String)) {
            throw new Error("Expected the field `tagFiringOption` to be a primitive type in the JSON string but got " + data['tagFiringOption']);
        }
        // ensure the json data is a string
        if (data['tagId'] && !(typeof data['tagId'] === 'string' || data['tagId'] instanceof String)) {
            throw new Error("Expected the field `tagId` to be a primitive type in the JSON string but got " + data['tagId']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        if (data['teardownTag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teardownTag'])) {
                throw new Error("Expected the field `teardownTag` to be an array in the JSON data but got " + data['teardownTag']);
            }
            // validate the optional field `teardownTag` (array)
            for (const item of data['teardownTag']) {
                TeardownTag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Tag.prototype['accountId'] = undefined;

/**
 * Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Array.<String>} blockingRuleId
 */
Tag.prototype['blockingRuleId'] = undefined;

/**
 * Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Array.<String>} blockingTriggerId
 */
Tag.prototype['blockingTriggerId'] = undefined;

/**
 * @member {module:model/TagConsentSetting} consentSettings
 */
Tag.prototype['consentSettings'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
Tag.prototype['containerId'] = undefined;

/**
 * The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
 * @member {String} fingerprint
 */
Tag.prototype['fingerprint'] = undefined;

/**
 * Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Array.<String>} firingRuleId
 */
Tag.prototype['firingRuleId'] = undefined;

/**
 * Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Array.<String>} firingTriggerId
 */
Tag.prototype['firingTriggerId'] = undefined;

/**
 * If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Boolean} liveOnly
 */
Tag.prototype['liveOnly'] = undefined;

/**
 * @member {module:model/Parameter} monitoringMetadata
 */
Tag.prototype['monitoringMetadata'] = undefined;

/**
 * If non-empty, then the tag display name will be included in the monitoring metadata map using the key specified. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} monitoringMetadataTagNameKey
 */
Tag.prototype['monitoringMetadataTagNameKey'] = undefined;

/**
 * Tag display name. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} name
 */
Tag.prototype['name'] = undefined;

/**
 * User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} notes
 */
Tag.prototype['notes'] = undefined;

/**
 * The tag's parameters. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Array.<module:model/Parameter>} parameter
 */
Tag.prototype['parameter'] = undefined;

/**
 * Parent folder id.
 * @member {String} parentFolderId
 */
Tag.prototype['parentFolderId'] = undefined;

/**
 * GTM Tag's API relative path.
 * @member {String} path
 */
Tag.prototype['path'] = undefined;

/**
 * Indicates whether the tag is paused, which prevents the tag from firing. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {Boolean} paused
 */
Tag.prototype['paused'] = undefined;

/**
 * @member {module:model/Parameter} priority
 */
Tag.prototype['priority'] = undefined;

/**
 * The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} scheduleEndMs
 */
Tag.prototype['scheduleEndMs'] = undefined;

/**
 * The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} scheduleStartMs
 */
Tag.prototype['scheduleStartMs'] = undefined;

/**
 * The list of setup tags. Currently we only allow one.
 * @member {Array.<module:model/SetupTag>} setupTag
 */
Tag.prototype['setupTag'] = undefined;

/**
 * Option to fire this tag.
 * @member {module:model/Tag.TagFiringOptionEnum} tagFiringOption
 */
Tag.prototype['tagFiringOption'] = undefined;

/**
 * The Tag ID uniquely identifies the GTM Tag.
 * @member {String} tagId
 */
Tag.prototype['tagId'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
Tag.prototype['tagManagerUrl'] = undefined;

/**
 * The list of teardown tags. Currently we only allow one.
 * @member {Array.<module:model/TeardownTag>} teardownTag
 */
Tag.prototype['teardownTag'] = undefined;

/**
 * GTM Tag Type. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update
 * @member {String} type
 */
Tag.prototype['type'] = undefined;

/**
 * GTM Workspace ID.
 * @member {String} workspaceId
 */
Tag.prototype['workspaceId'] = undefined;





/**
 * Allowed values for the <code>tagFiringOption</code> property.
 * @enum {String}
 * @readonly
 */
Tag['TagFiringOptionEnum'] = {

    /**
     * value: "tagFiringOptionUnspecified"
     * @const
     */
    "tagFiringOptionUnspecified": "tagFiringOptionUnspecified",

    /**
     * value: "unlimited"
     * @const
     */
    "unlimited": "unlimited",

    /**
     * value: "oncePerEvent"
     * @const
     */
    "oncePerEvent": "oncePerEvent",

    /**
     * value: "oncePerLoad"
     * @const
     */
    "oncePerLoad": "oncePerLoad"
};



export default Tag;

