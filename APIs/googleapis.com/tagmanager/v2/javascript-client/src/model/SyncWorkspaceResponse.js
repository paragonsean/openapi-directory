/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MergeConflict from './MergeConflict';
import SyncStatus from './SyncStatus';

/**
 * The SyncWorkspaceResponse model module.
 * @module model/SyncWorkspaceResponse
 * @version v2
 */
class SyncWorkspaceResponse {
    /**
     * Constructs a new <code>SyncWorkspaceResponse</code>.
     * A response after synchronizing the workspace to the latest container version.
     * @alias module:model/SyncWorkspaceResponse
     */
    constructor() { 
        
        SyncWorkspaceResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SyncWorkspaceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SyncWorkspaceResponse} obj Optional instance to populate.
     * @return {module:model/SyncWorkspaceResponse} The populated <code>SyncWorkspaceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SyncWorkspaceResponse();

            if (data.hasOwnProperty('mergeConflict')) {
                obj['mergeConflict'] = ApiClient.convertToType(data['mergeConflict'], [MergeConflict]);
            }
            if (data.hasOwnProperty('syncStatus')) {
                obj['syncStatus'] = SyncStatus.constructFromObject(data['syncStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SyncWorkspaceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SyncWorkspaceResponse</code>.
     */
    static validateJSON(data) {
        if (data['mergeConflict']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mergeConflict'])) {
                throw new Error("Expected the field `mergeConflict` to be an array in the JSON data but got " + data['mergeConflict']);
            }
            // validate the optional field `mergeConflict` (array)
            for (const item of data['mergeConflict']) {
                MergeConflict.validateJSON(item);
            };
        }
        // validate the optional field `syncStatus`
        if (data['syncStatus']) { // data not null
          SyncStatus.validateJSON(data['syncStatus']);
        }

        return true;
    }


}



/**
 * The merge conflict after sync. If this field is not empty, the sync is still treated as successful. But a version cannot be created until all conflicts are resolved.
 * @member {Array.<module:model/MergeConflict>} mergeConflict
 */
SyncWorkspaceResponse.prototype['mergeConflict'] = undefined;

/**
 * @member {module:model/SyncStatus} syncStatus
 */
SyncWorkspaceResponse.prototype['syncStatus'] = undefined;






export default SyncWorkspaceResponse;

