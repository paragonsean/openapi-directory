/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The GtagConfig model module.
 * @module model/GtagConfig
 * @version v2
 */
class GtagConfig {
    /**
     * Constructs a new <code>GtagConfig</code>.
     * Represents a Google tag configuration.
     * @alias module:model/GtagConfig
     */
    constructor() { 
        
        GtagConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GtagConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GtagConfig} obj Optional instance to populate.
     * @return {module:model/GtagConfig} The populated <code>GtagConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GtagConfig();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('gtagConfigId')) {
                obj['gtagConfigId'] = ApiClient.convertToType(data['gtagConfigId'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], [Parameter]);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GtagConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GtagConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['gtagConfigId'] && !(typeof data['gtagConfigId'] === 'string' || data['gtagConfigId'] instanceof String)) {
            throw new Error("Expected the field `gtagConfigId` to be a primitive type in the JSON string but got " + data['gtagConfigId']);
        }
        if (data['parameter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter'])) {
                throw new Error("Expected the field `parameter` to be an array in the JSON data but got " + data['parameter']);
            }
            // validate the optional field `parameter` (array)
            for (const item of data['parameter']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * Google tag account ID.
 * @member {String} accountId
 */
GtagConfig.prototype['accountId'] = undefined;

/**
 * Google tag container ID.
 * @member {String} containerId
 */
GtagConfig.prototype['containerId'] = undefined;

/**
 * The fingerprint of the Google tag config as computed at storage time. This value is recomputed whenever the config is modified.
 * @member {String} fingerprint
 */
GtagConfig.prototype['fingerprint'] = undefined;

/**
 * The ID uniquely identifies the Google tag config.
 * @member {String} gtagConfigId
 */
GtagConfig.prototype['gtagConfigId'] = undefined;

/**
 * The Google tag config's parameters. @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update
 * @member {Array.<module:model/Parameter>} parameter
 */
GtagConfig.prototype['parameter'] = undefined;

/**
 * Google tag config's API relative path.
 * @member {String} path
 */
GtagConfig.prototype['path'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
GtagConfig.prototype['tagManagerUrl'] = undefined;

/**
 * Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update
 * @member {String} type
 */
GtagConfig.prototype['type'] = undefined;

/**
 * Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
 * @member {String} workspaceId
 */
GtagConfig.prototype['workspaceId'] = undefined;






export default GtagConfig;

