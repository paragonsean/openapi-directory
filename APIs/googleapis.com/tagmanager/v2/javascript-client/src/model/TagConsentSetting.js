/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The TagConsentSetting model module.
 * @module model/TagConsentSetting
 * @version v2
 */
class TagConsentSetting {
    /**
     * Constructs a new <code>TagConsentSetting</code>.
     * @alias module:model/TagConsentSetting
     */
    constructor() { 
        
        TagConsentSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagConsentSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagConsentSetting} obj Optional instance to populate.
     * @return {module:model/TagConsentSetting} The populated <code>TagConsentSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagConsentSetting();

            if (data.hasOwnProperty('consentStatus')) {
                obj['consentStatus'] = ApiClient.convertToType(data['consentStatus'], 'String');
            }
            if (data.hasOwnProperty('consentType')) {
                obj['consentType'] = Parameter.constructFromObject(data['consentType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagConsentSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagConsentSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consentStatus'] && !(typeof data['consentStatus'] === 'string' || data['consentStatus'] instanceof String)) {
            throw new Error("Expected the field `consentStatus` to be a primitive type in the JSON string but got " + data['consentStatus']);
        }
        // validate the optional field `consentType`
        if (data['consentType']) { // data not null
          Parameter.validateJSON(data['consentType']);
        }

        return true;
    }


}



/**
 * The tag's consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.
 * @member {module:model/TagConsentSetting.ConsentStatusEnum} consentStatus
 */
TagConsentSetting.prototype['consentStatus'] = undefined;

/**
 * @member {module:model/Parameter} consentType
 */
TagConsentSetting.prototype['consentType'] = undefined;





/**
 * Allowed values for the <code>consentStatus</code> property.
 * @enum {String}
 * @readonly
 */
TagConsentSetting['ConsentStatusEnum'] = {

    /**
     * value: "notSet"
     * @const
     */
    "notSet": "notSet",

    /**
     * value: "notNeeded"
     * @const
     */
    "notNeeded": "notNeeded",

    /**
     * value: "needed"
     * @const
     */
    "needed": "needed"
};



export default TagConsentSetting;

