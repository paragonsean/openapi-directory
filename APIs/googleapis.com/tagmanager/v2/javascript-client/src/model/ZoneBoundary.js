/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';

/**
 * The ZoneBoundary model module.
 * @module model/ZoneBoundary
 * @version v2
 */
class ZoneBoundary {
    /**
     * Constructs a new <code>ZoneBoundary</code>.
     * Represents a Zone&#39;s boundaries.
     * @alias module:model/ZoneBoundary
     */
    constructor() { 
        
        ZoneBoundary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneBoundary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneBoundary} obj Optional instance to populate.
     * @return {module:model/ZoneBoundary} The populated <code>ZoneBoundary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneBoundary();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], [Condition]);
            }
            if (data.hasOwnProperty('customEvaluationTriggerId')) {
                obj['customEvaluationTriggerId'] = ApiClient.convertToType(data['customEvaluationTriggerId'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneBoundary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneBoundary</code>.
     */
    static validateJSON(data) {
        if (data['condition']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['condition'])) {
                throw new Error("Expected the field `condition` to be an array in the JSON data but got " + data['condition']);
            }
            // validate the optional field `condition` (array)
            for (const item of data['condition']) {
                Condition.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customEvaluationTriggerId'])) {
            throw new Error("Expected the field `customEvaluationTriggerId` to be an array in the JSON data but got " + data['customEvaluationTriggerId']);
        }

        return true;
    }


}



/**
 * The conditions that, when conjoined, make up the boundary.
 * @member {Array.<module:model/Condition>} condition
 */
ZoneBoundary.prototype['condition'] = undefined;

/**
 * Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true.
 * @member {Array.<String>} customEvaluationTriggerId
 */
ZoneBoundary.prototype['customEvaluationTriggerId'] = undefined;






export default ZoneBoundary;

