/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuiltInVariable from './BuiltInVariable';
import Client from './Client';
import CustomTemplate from './CustomTemplate';
import Folder from './Folder';
import GtagConfig from './GtagConfig';
import Tag from './Tag';
import Transformation from './Transformation';
import Trigger from './Trigger';
import Variable from './Variable';
import Zone from './Zone';

/**
 * The Entity model module.
 * @module model/Entity
 * @version v2
 */
class Entity {
    /**
     * Constructs a new <code>Entity</code>.
     * A workspace entity that may represent a tag, trigger, variable, or folder in addition to its status in the workspace.
     * @alias module:model/Entity
     */
    constructor() { 
        
        Entity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Entity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entity} obj Optional instance to populate.
     * @return {module:model/Entity} The populated <code>Entity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entity();

            if (data.hasOwnProperty('builtInVariable')) {
                obj['builtInVariable'] = BuiltInVariable.constructFromObject(data['builtInVariable']);
            }
            if (data.hasOwnProperty('changeStatus')) {
                obj['changeStatus'] = ApiClient.convertToType(data['changeStatus'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = Client.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('customTemplate')) {
                obj['customTemplate'] = CustomTemplate.constructFromObject(data['customTemplate']);
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = Folder.constructFromObject(data['folder']);
            }
            if (data.hasOwnProperty('gtagConfig')) {
                obj['gtagConfig'] = GtagConfig.constructFromObject(data['gtagConfig']);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = Tag.constructFromObject(data['tag']);
            }
            if (data.hasOwnProperty('transformation')) {
                obj['transformation'] = Transformation.constructFromObject(data['transformation']);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = Trigger.constructFromObject(data['trigger']);
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = Variable.constructFromObject(data['variable']);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = Zone.constructFromObject(data['zone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `builtInVariable`
        if (data['builtInVariable']) { // data not null
          BuiltInVariable.validateJSON(data['builtInVariable']);
        }
        // ensure the json data is a string
        if (data['changeStatus'] && !(typeof data['changeStatus'] === 'string' || data['changeStatus'] instanceof String)) {
            throw new Error("Expected the field `changeStatus` to be a primitive type in the JSON string but got " + data['changeStatus']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          Client.validateJSON(data['client']);
        }
        // validate the optional field `customTemplate`
        if (data['customTemplate']) { // data not null
          CustomTemplate.validateJSON(data['customTemplate']);
        }
        // validate the optional field `folder`
        if (data['folder']) { // data not null
          Folder.validateJSON(data['folder']);
        }
        // validate the optional field `gtagConfig`
        if (data['gtagConfig']) { // data not null
          GtagConfig.validateJSON(data['gtagConfig']);
        }
        // validate the optional field `tag`
        if (data['tag']) { // data not null
          Tag.validateJSON(data['tag']);
        }
        // validate the optional field `transformation`
        if (data['transformation']) { // data not null
          Transformation.validateJSON(data['transformation']);
        }
        // validate the optional field `trigger`
        if (data['trigger']) { // data not null
          Trigger.validateJSON(data['trigger']);
        }
        // validate the optional field `variable`
        if (data['variable']) { // data not null
          Variable.validateJSON(data['variable']);
        }
        // validate the optional field `zone`
        if (data['zone']) { // data not null
          Zone.validateJSON(data['zone']);
        }

        return true;
    }


}



/**
 * @member {module:model/BuiltInVariable} builtInVariable
 */
Entity.prototype['builtInVariable'] = undefined;

/**
 * Represents how the entity has been changed in the workspace.
 * @member {module:model/Entity.ChangeStatusEnum} changeStatus
 */
Entity.prototype['changeStatus'] = undefined;

/**
 * @member {module:model/Client} client
 */
Entity.prototype['client'] = undefined;

/**
 * @member {module:model/CustomTemplate} customTemplate
 */
Entity.prototype['customTemplate'] = undefined;

/**
 * @member {module:model/Folder} folder
 */
Entity.prototype['folder'] = undefined;

/**
 * @member {module:model/GtagConfig} gtagConfig
 */
Entity.prototype['gtagConfig'] = undefined;

/**
 * @member {module:model/Tag} tag
 */
Entity.prototype['tag'] = undefined;

/**
 * @member {module:model/Transformation} transformation
 */
Entity.prototype['transformation'] = undefined;

/**
 * @member {module:model/Trigger} trigger
 */
Entity.prototype['trigger'] = undefined;

/**
 * @member {module:model/Variable} variable
 */
Entity.prototype['variable'] = undefined;

/**
 * @member {module:model/Zone} zone
 */
Entity.prototype['zone'] = undefined;





/**
 * Allowed values for the <code>changeStatus</code> property.
 * @enum {String}
 * @readonly
 */
Entity['ChangeStatusEnum'] = {

    /**
     * value: "changeStatusUnspecified"
     * @const
     */
    "changeStatusUnspecified": "changeStatusUnspecified",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "added"
     * @const
     */
    "added": "added",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "updated"
     * @const
     */
    "updated": "updated"
};



export default Entity;

