/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Environment model module.
 * @module model/Environment
 * @version v2
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * Represents a Google Tag Manager Environment. Note that a user can create, delete and update environments of type USER, but can only update the enable_debug and url fields of environments of other types.
     * @alias module:model/Environment
     */
    constructor() { 
        
        Environment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('authorizationCode')) {
                obj['authorizationCode'] = ApiClient.convertToType(data['authorizationCode'], 'String');
            }
            if (data.hasOwnProperty('authorizationTimestamp')) {
                obj['authorizationTimestamp'] = ApiClient.convertToType(data['authorizationTimestamp'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('containerVersionId')) {
                obj['containerVersionId'] = ApiClient.convertToType(data['containerVersionId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enableDebug')) {
                obj['enableDebug'] = ApiClient.convertToType(data['enableDebug'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentId')) {
                obj['environmentId'] = ApiClient.convertToType(data['environmentId'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['authorizationCode'] && !(typeof data['authorizationCode'] === 'string' || data['authorizationCode'] instanceof String)) {
            throw new Error("Expected the field `authorizationCode` to be a primitive type in the JSON string but got " + data['authorizationCode']);
        }
        // ensure the json data is a string
        if (data['authorizationTimestamp'] && !(typeof data['authorizationTimestamp'] === 'string' || data['authorizationTimestamp'] instanceof String)) {
            throw new Error("Expected the field `authorizationTimestamp` to be a primitive type in the JSON string but got " + data['authorizationTimestamp']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['containerVersionId'] && !(typeof data['containerVersionId'] === 'string' || data['containerVersionId'] instanceof String)) {
            throw new Error("Expected the field `containerVersionId` to be a primitive type in the JSON string but got " + data['containerVersionId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['environmentId'] && !(typeof data['environmentId'] === 'string' || data['environmentId'] instanceof String)) {
            throw new Error("Expected the field `environmentId` to be a primitive type in the JSON string but got " + data['environmentId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Environment.prototype['accountId'] = undefined;

/**
 * The environment authorization code.
 * @member {String} authorizationCode
 */
Environment.prototype['authorizationCode'] = undefined;

/**
 * The last update time-stamp for the authorization code.
 * @member {String} authorizationTimestamp
 */
Environment.prototype['authorizationTimestamp'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
Environment.prototype['containerId'] = undefined;

/**
 * Represents a link to a container version.
 * @member {String} containerVersionId
 */
Environment.prototype['containerVersionId'] = undefined;

/**
 * The environment description. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
 * @member {String} description
 */
Environment.prototype['description'] = undefined;

/**
 * Whether or not to enable debug by default for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
 * @member {Boolean} enableDebug
 */
Environment.prototype['enableDebug'] = undefined;

/**
 * GTM Environment ID uniquely identifies the GTM Environment.
 * @member {String} environmentId
 */
Environment.prototype['environmentId'] = undefined;

/**
 * The fingerprint of the GTM environment as computed at storage time. This value is recomputed whenever the environment is modified.
 * @member {String} fingerprint
 */
Environment.prototype['fingerprint'] = undefined;

/**
 * The environment display name. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
 * @member {String} name
 */
Environment.prototype['name'] = undefined;

/**
 * GTM Environment's API relative path.
 * @member {String} path
 */
Environment.prototype['path'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
Environment.prototype['tagManagerUrl'] = undefined;

/**
 * The type of this environment.
 * @member {module:model/Environment.TypeEnum} type
 */
Environment.prototype['type'] = undefined;

/**
 * Default preview page url for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update
 * @member {String} url
 */
Environment.prototype['url'] = undefined;

/**
 * Represents a link to a quick preview of a workspace.
 * @member {String} workspaceId
 */
Environment.prototype['workspaceId'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Environment['TypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "live"
     * @const
     */
    "live": "live",

    /**
     * value: "latest"
     * @const
     */
    "latest": "latest",

    /**
     * value: "workspace"
     * @const
     */
    "workspace": "workspace"
};



export default Environment;

