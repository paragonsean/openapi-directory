/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuiltInVariable from './BuiltInVariable';
import Client from './Client';
import Container from './Container';
import CustomTemplate from './CustomTemplate';
import Folder from './Folder';
import GtagConfig from './GtagConfig';
import Tag from './Tag';
import Transformation from './Transformation';
import Trigger from './Trigger';
import Variable from './Variable';
import Zone from './Zone';

/**
 * The ContainerVersion model module.
 * @module model/ContainerVersion
 * @version v2
 */
class ContainerVersion {
    /**
     * Constructs a new <code>ContainerVersion</code>.
     * Represents a Google Tag Manager Container Version.
     * @alias module:model/ContainerVersion
     */
    constructor() { 
        
        ContainerVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerVersion} obj Optional instance to populate.
     * @return {module:model/ContainerVersion} The populated <code>ContainerVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerVersion();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('builtInVariable')) {
                obj['builtInVariable'] = ApiClient.convertToType(data['builtInVariable'], [BuiltInVariable]);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], [Client]);
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = Container.constructFromObject(data['container']);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('containerVersionId')) {
                obj['containerVersionId'] = ApiClient.convertToType(data['containerVersionId'], 'String');
            }
            if (data.hasOwnProperty('customTemplate')) {
                obj['customTemplate'] = ApiClient.convertToType(data['customTemplate'], [CustomTemplate]);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], [Folder]);
            }
            if (data.hasOwnProperty('gtagConfig')) {
                obj['gtagConfig'] = ApiClient.convertToType(data['gtagConfig'], [GtagConfig]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], [Tag]);
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('transformation')) {
                obj['transformation'] = ApiClient.convertToType(data['transformation'], [Transformation]);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], [Trigger]);
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], [Variable]);
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], [Zone]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['builtInVariable']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['builtInVariable'])) {
                throw new Error("Expected the field `builtInVariable` to be an array in the JSON data but got " + data['builtInVariable']);
            }
            // validate the optional field `builtInVariable` (array)
            for (const item of data['builtInVariable']) {
                BuiltInVariable.validateJSON(item);
            };
        }
        if (data['client']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['client'])) {
                throw new Error("Expected the field `client` to be an array in the JSON data but got " + data['client']);
            }
            // validate the optional field `client` (array)
            for (const item of data['client']) {
                Client.validateJSON(item);
            };
        }
        // validate the optional field `container`
        if (data['container']) { // data not null
          Container.validateJSON(data['container']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['containerVersionId'] && !(typeof data['containerVersionId'] === 'string' || data['containerVersionId'] instanceof String)) {
            throw new Error("Expected the field `containerVersionId` to be a primitive type in the JSON string but got " + data['containerVersionId']);
        }
        if (data['customTemplate']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customTemplate'])) {
                throw new Error("Expected the field `customTemplate` to be an array in the JSON data but got " + data['customTemplate']);
            }
            // validate the optional field `customTemplate` (array)
            for (const item of data['customTemplate']) {
                CustomTemplate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        if (data['folder']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['folder'])) {
                throw new Error("Expected the field `folder` to be an array in the JSON data but got " + data['folder']);
            }
            // validate the optional field `folder` (array)
            for (const item of data['folder']) {
                Folder.validateJSON(item);
            };
        }
        if (data['gtagConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gtagConfig'])) {
                throw new Error("Expected the field `gtagConfig` to be an array in the JSON data but got " + data['gtagConfig']);
            }
            // validate the optional field `gtagConfig` (array)
            for (const item of data['gtagConfig']) {
                GtagConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        if (data['tag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tag'])) {
                throw new Error("Expected the field `tag` to be an array in the JSON data but got " + data['tag']);
            }
            // validate the optional field `tag` (array)
            for (const item of data['tag']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        if (data['transformation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transformation'])) {
                throw new Error("Expected the field `transformation` to be an array in the JSON data but got " + data['transformation']);
            }
            // validate the optional field `transformation` (array)
            for (const item of data['transformation']) {
                Transformation.validateJSON(item);
            };
        }
        if (data['trigger']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trigger'])) {
                throw new Error("Expected the field `trigger` to be an array in the JSON data but got " + data['trigger']);
            }
            // validate the optional field `trigger` (array)
            for (const item of data['trigger']) {
                Trigger.validateJSON(item);
            };
        }
        if (data['variable']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variable'])) {
                throw new Error("Expected the field `variable` to be an array in the JSON data but got " + data['variable']);
            }
            // validate the optional field `variable` (array)
            for (const item of data['variable']) {
                Variable.validateJSON(item);
            };
        }
        if (data['zone']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['zone'])) {
                throw new Error("Expected the field `zone` to be an array in the JSON data but got " + data['zone']);
            }
            // validate the optional field `zone` (array)
            for (const item of data['zone']) {
                Zone.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
ContainerVersion.prototype['accountId'] = undefined;

/**
 * The built-in variables in the container that this version was taken from.
 * @member {Array.<module:model/BuiltInVariable>} builtInVariable
 */
ContainerVersion.prototype['builtInVariable'] = undefined;

/**
 * The clients in the container that this version was taken from.
 * @member {Array.<module:model/Client>} client
 */
ContainerVersion.prototype['client'] = undefined;

/**
 * @member {module:model/Container} container
 */
ContainerVersion.prototype['container'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
ContainerVersion.prototype['containerId'] = undefined;

/**
 * The Container Version ID uniquely identifies the GTM Container Version.
 * @member {String} containerVersionId
 */
ContainerVersion.prototype['containerVersionId'] = undefined;

/**
 * The custom templates in the container that this version was taken from.
 * @member {Array.<module:model/CustomTemplate>} customTemplate
 */
ContainerVersion.prototype['customTemplate'] = undefined;

/**
 * A value of true indicates this container version has been deleted.
 * @member {Boolean} deleted
 */
ContainerVersion.prototype['deleted'] = undefined;

/**
 * Container version description. @mutable tagmanager.accounts.containers.versions.update
 * @member {String} description
 */
ContainerVersion.prototype['description'] = undefined;

/**
 * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
 * @member {String} fingerprint
 */
ContainerVersion.prototype['fingerprint'] = undefined;

/**
 * The folders in the container that this version was taken from.
 * @member {Array.<module:model/Folder>} folder
 */
ContainerVersion.prototype['folder'] = undefined;

/**
 * The Google tag configs in the container that this version was taken from.
 * @member {Array.<module:model/GtagConfig>} gtagConfig
 */
ContainerVersion.prototype['gtagConfig'] = undefined;

/**
 * Container version display name. @mutable tagmanager.accounts.containers.versions.update
 * @member {String} name
 */
ContainerVersion.prototype['name'] = undefined;

/**
 * GTM Container Version's API relative path.
 * @member {String} path
 */
ContainerVersion.prototype['path'] = undefined;

/**
 * The tags in the container that this version was taken from.
 * @member {Array.<module:model/Tag>} tag
 */
ContainerVersion.prototype['tag'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
ContainerVersion.prototype['tagManagerUrl'] = undefined;

/**
 * The transformations in the container that this version was taken from.
 * @member {Array.<module:model/Transformation>} transformation
 */
ContainerVersion.prototype['transformation'] = undefined;

/**
 * The triggers in the container that this version was taken from.
 * @member {Array.<module:model/Trigger>} trigger
 */
ContainerVersion.prototype['trigger'] = undefined;

/**
 * The variables in the container that this version was taken from.
 * @member {Array.<module:model/Variable>} variable
 */
ContainerVersion.prototype['variable'] = undefined;

/**
 * The zones in the container that this version was taken from.
 * @member {Array.<module:model/Zone>} zone
 */
ContainerVersion.prototype['zone'] = undefined;






export default ContainerVersion;

