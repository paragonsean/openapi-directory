/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerFeatures from './ContainerFeatures';

/**
 * The Container model module.
 * @module model/Container
 * @version v2
 */
class Container {
    /**
     * Constructs a new <code>Container</code>.
     * Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions.
     * @alias module:model/Container
     */
    constructor() { 
        
        Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Container} obj Optional instance to populate.
     * @return {module:model/Container} The populated <code>Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Container();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], ['String']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ContainerFeatures.constructFromObject(data['features']);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('publicId')) {
                obj['publicId'] = ApiClient.convertToType(data['publicId'], 'String');
            }
            if (data.hasOwnProperty('tagIds')) {
                obj['tagIds'] = ApiClient.convertToType(data['tagIds'], ['String']);
            }
            if (data.hasOwnProperty('tagManagerUrl')) {
                obj['tagManagerUrl'] = ApiClient.convertToType(data['tagManagerUrl'], 'String');
            }
            if (data.hasOwnProperty('taggingServerUrls')) {
                obj['taggingServerUrls'] = ApiClient.convertToType(data['taggingServerUrls'], ['String']);
            }
            if (data.hasOwnProperty('usageContext')) {
                obj['usageContext'] = ApiClient.convertToType(data['usageContext'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['domainName'])) {
            throw new Error("Expected the field `domainName` to be an array in the JSON data but got " + data['domainName']);
        }
        // validate the optional field `features`
        if (data['features']) { // data not null
          ContainerFeatures.validateJSON(data['features']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['publicId'] && !(typeof data['publicId'] === 'string' || data['publicId'] instanceof String)) {
            throw new Error("Expected the field `publicId` to be a primitive type in the JSON string but got " + data['publicId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagIds'])) {
            throw new Error("Expected the field `tagIds` to be an array in the JSON data but got " + data['tagIds']);
        }
        // ensure the json data is a string
        if (data['tagManagerUrl'] && !(typeof data['tagManagerUrl'] === 'string' || data['tagManagerUrl'] instanceof String)) {
            throw new Error("Expected the field `tagManagerUrl` to be a primitive type in the JSON string but got " + data['tagManagerUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['taggingServerUrls'])) {
            throw new Error("Expected the field `taggingServerUrls` to be an array in the JSON data but got " + data['taggingServerUrls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usageContext'])) {
            throw new Error("Expected the field `usageContext` to be an array in the JSON data but got " + data['usageContext']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Container.prototype['accountId'] = undefined;

/**
 * The Container ID uniquely identifies the GTM Container.
 * @member {String} containerId
 */
Container.prototype['containerId'] = undefined;

/**
 * List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
 * @member {Array.<String>} domainName
 */
Container.prototype['domainName'] = undefined;

/**
 * @member {module:model/ContainerFeatures} features
 */
Container.prototype['features'] = undefined;

/**
 * The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.
 * @member {String} fingerprint
 */
Container.prototype['fingerprint'] = undefined;

/**
 * Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
 * @member {String} name
 */
Container.prototype['name'] = undefined;

/**
 * Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
 * @member {String} notes
 */
Container.prototype['notes'] = undefined;

/**
 * GTM Container's API relative path.
 * @member {String} path
 */
Container.prototype['path'] = undefined;

/**
 * Container Public ID.
 * @member {String} publicId
 */
Container.prototype['publicId'] = undefined;

/**
 * All Tag IDs that refer to this Container.
 * @member {Array.<String>} tagIds
 */
Container.prototype['tagIds'] = undefined;

/**
 * Auto generated link to the tag manager UI
 * @member {String} tagManagerUrl
 */
Container.prototype['tagManagerUrl'] = undefined;

/**
 * List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
 * @member {Array.<String>} taggingServerUrls
 */
Container.prototype['taggingServerUrls'] = undefined;

/**
 * List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update
 * @member {Array.<module:model/Container.UsageContextEnum>} usageContext
 */
Container.prototype['usageContext'] = undefined;





/**
 * Allowed values for the <code>usageContext</code> property.
 * @enum {String}
 * @readonly
 */
Container['UsageContextEnum'] = {

    /**
     * value: "usageContextUnspecified"
     * @const
     */
    "usageContextUnspecified": "usageContextUnspecified",

    /**
     * value: "web"
     * @const
     */
    "web": "web",

    /**
     * value: "android"
     * @const
     */
    "android": "android",

    /**
     * value: "ios"
     * @const
     */
    "ios": "ios",

    /**
     * value: "androidSdk5"
     * @const
     */
    "androidSdk5": "androidSdk5",

    /**
     * value: "iosSdk5"
     * @const
     */
    "iosSdk5": "iosSdk5",

    /**
     * value: "amp"
     * @const
     */
    "amp": "amp",

    /**
     * value: "server"
     * @const
     */
    "server": "server"
};



export default Container;

