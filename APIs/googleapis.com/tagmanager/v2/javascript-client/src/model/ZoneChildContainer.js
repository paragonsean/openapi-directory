/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZoneChildContainer model module.
 * @module model/ZoneChildContainer
 * @version v2
 */
class ZoneChildContainer {
    /**
     * Constructs a new <code>ZoneChildContainer</code>.
     * Represents a child container of a Zone.
     * @alias module:model/ZoneChildContainer
     */
    constructor() { 
        
        ZoneChildContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneChildContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneChildContainer} obj Optional instance to populate.
     * @return {module:model/ZoneChildContainer} The populated <code>ZoneChildContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneChildContainer();

            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('publicId')) {
                obj['publicId'] = ApiClient.convertToType(data['publicId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneChildContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneChildContainer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['publicId'] && !(typeof data['publicId'] === 'string' || data['publicId'] instanceof String)) {
            throw new Error("Expected the field `publicId` to be a primitive type in the JSON string but got " + data['publicId']);
        }

        return true;
    }


}



/**
 * The zone's nickname for the child container.
 * @member {String} nickname
 */
ZoneChildContainer.prototype['nickname'] = undefined;

/**
 * The child container's public id.
 * @member {String} publicId
 */
ZoneChildContainer.prototype['publicId'] = undefined;






export default ZoneChildContainer;

