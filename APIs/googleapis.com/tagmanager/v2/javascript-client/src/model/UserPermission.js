/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountAccess from './AccountAccess';
import ContainerAccess from './ContainerAccess';

/**
 * The UserPermission model module.
 * @module model/UserPermission
 * @version v2
 */
class UserPermission {
    /**
     * Constructs a new <code>UserPermission</code>.
     * Represents a user&#39;s permissions to an account and its container.
     * @alias module:model/UserPermission
     */
    constructor() { 
        
        UserPermission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserPermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPermission} obj Optional instance to populate.
     * @return {module:model/UserPermission} The populated <code>UserPermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPermission();

            if (data.hasOwnProperty('accountAccess')) {
                obj['accountAccess'] = AccountAccess.constructFromObject(data['accountAccess']);
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('containerAccess')) {
                obj['containerAccess'] = ApiClient.convertToType(data['containerAccess'], [ContainerAccess]);
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPermission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPermission</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accountAccess`
        if (data['accountAccess']) { // data not null
          AccountAccess.validateJSON(data['accountAccess']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['containerAccess']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['containerAccess'])) {
                throw new Error("Expected the field `containerAccess` to be an array in the JSON data but got " + data['containerAccess']);
            }
            // validate the optional field `containerAccess` (array)
            for (const item of data['containerAccess']) {
                ContainerAccess.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * @member {module:model/AccountAccess} accountAccess
 */
UserPermission.prototype['accountAccess'] = undefined;

/**
 * The Account ID uniquely identifies the GTM Account.
 * @member {String} accountId
 */
UserPermission.prototype['accountId'] = undefined;

/**
 * GTM Container access permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
 * @member {Array.<module:model/ContainerAccess>} containerAccess
 */
UserPermission.prototype['containerAccess'] = undefined;

/**
 * User's email address. @mutable tagmanager.accounts.permissions.create
 * @member {String} emailAddress
 */
UserPermission.prototype['emailAddress'] = undefined;

/**
 * GTM UserPermission's API relative path.
 * @member {String} path
 */
UserPermission.prototype['path'] = undefined;






export default UserPermission;

