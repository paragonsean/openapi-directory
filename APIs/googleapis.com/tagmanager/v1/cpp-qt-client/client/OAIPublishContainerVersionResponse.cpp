/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishContainerVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishContainerVersionResponse::OAIPublishContainerVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishContainerVersionResponse::OAIPublishContainerVersionResponse() {
    this->initializeModel();
}

OAIPublishContainerVersionResponse::~OAIPublishContainerVersionResponse() {}

void OAIPublishContainerVersionResponse::initializeModel() {

    m_compiler_error_isSet = false;
    m_compiler_error_isValid = false;

    m_container_version_isSet = false;
    m_container_version_isValid = false;
}

void OAIPublishContainerVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishContainerVersionResponse::fromJsonObject(QJsonObject json) {

    m_compiler_error_isValid = ::OpenAPI::fromJsonValue(m_compiler_error, json[QString("compilerError")]);
    m_compiler_error_isSet = !json[QString("compilerError")].isNull() && m_compiler_error_isValid;

    m_container_version_isValid = ::OpenAPI::fromJsonValue(m_container_version, json[QString("containerVersion")]);
    m_container_version_isSet = !json[QString("containerVersion")].isNull() && m_container_version_isValid;
}

QString OAIPublishContainerVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishContainerVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_compiler_error_isSet) {
        obj.insert(QString("compilerError"), ::OpenAPI::toJsonValue(m_compiler_error));
    }
    if (m_container_version.isSet()) {
        obj.insert(QString("containerVersion"), ::OpenAPI::toJsonValue(m_container_version));
    }
    return obj;
}

bool OAIPublishContainerVersionResponse::isCompilerError() const {
    return m_compiler_error;
}
void OAIPublishContainerVersionResponse::setCompilerError(const bool &compiler_error) {
    m_compiler_error = compiler_error;
    m_compiler_error_isSet = true;
}

bool OAIPublishContainerVersionResponse::is_compiler_error_Set() const{
    return m_compiler_error_isSet;
}

bool OAIPublishContainerVersionResponse::is_compiler_error_Valid() const{
    return m_compiler_error_isValid;
}

OAIContainerVersion OAIPublishContainerVersionResponse::getContainerVersion() const {
    return m_container_version;
}
void OAIPublishContainerVersionResponse::setContainerVersion(const OAIContainerVersion &container_version) {
    m_container_version = container_version;
    m_container_version_isSet = true;
}

bool OAIPublishContainerVersionResponse::is_container_version_Set() const{
    return m_container_version_isSet;
}

bool OAIPublishContainerVersionResponse::is_container_version_Valid() const{
    return m_container_version_isValid;
}

bool OAIPublishContainerVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compiler_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishContainerVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
