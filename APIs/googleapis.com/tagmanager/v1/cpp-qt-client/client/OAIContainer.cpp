/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainer::OAIContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainer::OAIContainer() {
    this->initializeModel();
}

OAIContainer::~OAIContainer() {}

void OAIContainer::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_enabled_built_in_variable_isSet = false;
    m_enabled_built_in_variable_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_public_id_isSet = false;
    m_public_id_isValid = false;

    m_time_zone_country_id_isSet = false;
    m_time_zone_country_id_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_usage_context_isSet = false;
    m_usage_context_isValid = false;
}

void OAIContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainer::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_enabled_built_in_variable_isValid = ::OpenAPI::fromJsonValue(m_enabled_built_in_variable, json[QString("enabledBuiltInVariable")]);
    m_enabled_built_in_variable_isSet = !json[QString("enabledBuiltInVariable")].isNull() && m_enabled_built_in_variable_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_public_id_isValid = ::OpenAPI::fromJsonValue(m_public_id, json[QString("publicId")]);
    m_public_id_isSet = !json[QString("publicId")].isNull() && m_public_id_isValid;

    m_time_zone_country_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_country_id, json[QString("timeZoneCountryId")]);
    m_time_zone_country_id_isSet = !json[QString("timeZoneCountryId")].isNull() && m_time_zone_country_id_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("timeZoneId")]);
    m_time_zone_id_isSet = !json[QString("timeZoneId")].isNull() && m_time_zone_id_isValid;

    m_usage_context_isValid = ::OpenAPI::fromJsonValue(m_usage_context, json[QString("usageContext")]);
    m_usage_context_isSet = !json[QString("usageContext")].isNull() && m_usage_context_isValid;
}

QString OAIContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_domain_name.size() > 0) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_enabled_built_in_variable.size() > 0) {
        obj.insert(QString("enabledBuiltInVariable"), ::OpenAPI::toJsonValue(m_enabled_built_in_variable));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_public_id_isSet) {
        obj.insert(QString("publicId"), ::OpenAPI::toJsonValue(m_public_id));
    }
    if (m_time_zone_country_id_isSet) {
        obj.insert(QString("timeZoneCountryId"), ::OpenAPI::toJsonValue(m_time_zone_country_id));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("timeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_usage_context.size() > 0) {
        obj.insert(QString("usageContext"), ::OpenAPI::toJsonValue(m_usage_context));
    }
    return obj;
}

QString OAIContainer::getAccountId() const {
    return m_account_id;
}
void OAIContainer::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIContainer::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIContainer::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIContainer::getContainerId() const {
    return m_container_id;
}
void OAIContainer::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIContainer::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIContainer::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QList<QString> OAIContainer::getDomainName() const {
    return m_domain_name;
}
void OAIContainer::setDomainName(const QList<QString> &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIContainer::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIContainer::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList<QString> OAIContainer::getEnabledBuiltInVariable() const {
    return m_enabled_built_in_variable;
}
void OAIContainer::setEnabledBuiltInVariable(const QList<QString> &enabled_built_in_variable) {
    m_enabled_built_in_variable = enabled_built_in_variable;
    m_enabled_built_in_variable_isSet = true;
}

bool OAIContainer::is_enabled_built_in_variable_Set() const{
    return m_enabled_built_in_variable_isSet;
}

bool OAIContainer::is_enabled_built_in_variable_Valid() const{
    return m_enabled_built_in_variable_isValid;
}

QString OAIContainer::getFingerprint() const {
    return m_fingerprint;
}
void OAIContainer::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIContainer::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIContainer::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIContainer::getName() const {
    return m_name;
}
void OAIContainer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainer::getNotes() const {
    return m_notes;
}
void OAIContainer::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIContainer::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIContainer::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIContainer::getPublicId() const {
    return m_public_id;
}
void OAIContainer::setPublicId(const QString &public_id) {
    m_public_id = public_id;
    m_public_id_isSet = true;
}

bool OAIContainer::is_public_id_Set() const{
    return m_public_id_isSet;
}

bool OAIContainer::is_public_id_Valid() const{
    return m_public_id_isValid;
}

QString OAIContainer::getTimeZoneCountryId() const {
    return m_time_zone_country_id;
}
void OAIContainer::setTimeZoneCountryId(const QString &time_zone_country_id) {
    m_time_zone_country_id = time_zone_country_id;
    m_time_zone_country_id_isSet = true;
}

bool OAIContainer::is_time_zone_country_id_Set() const{
    return m_time_zone_country_id_isSet;
}

bool OAIContainer::is_time_zone_country_id_Valid() const{
    return m_time_zone_country_id_isValid;
}

QString OAIContainer::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIContainer::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIContainer::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIContainer::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

QList<QString> OAIContainer::getUsageContext() const {
    return m_usage_context;
}
void OAIContainer::setUsageContext(const QList<QString> &usage_context) {
    m_usage_context = usage_context;
    m_usage_context_isSet = true;
}

bool OAIContainer::is_usage_context_Set() const{
    return m_usage_context_isSet;
}

bool OAIContainer::is_usage_context_Valid() const{
    return m_usage_context_isValid;
}

bool OAIContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_built_in_variable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
