/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_blocking_rule_id_isSet = false;
    m_blocking_rule_id_isValid = false;

    m_blocking_trigger_id_isSet = false;
    m_blocking_trigger_id_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_firing_rule_id_isSet = false;
    m_firing_rule_id_isValid = false;

    m_firing_trigger_id_isSet = false;
    m_firing_trigger_id_isValid = false;

    m_live_only_isSet = false;
    m_live_only_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_paused_isSet = false;
    m_paused_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_schedule_end_ms_isSet = false;
    m_schedule_end_ms_isValid = false;

    m_schedule_start_ms_isSet = false;
    m_schedule_start_ms_isValid = false;

    m_setup_tag_isSet = false;
    m_setup_tag_isValid = false;

    m_tag_firing_option_isSet = false;
    m_tag_firing_option_isValid = false;

    m_tag_id_isSet = false;
    m_tag_id_isValid = false;

    m_teardown_tag_isSet = false;
    m_teardown_tag_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_blocking_rule_id_isValid = ::OpenAPI::fromJsonValue(m_blocking_rule_id, json[QString("blockingRuleId")]);
    m_blocking_rule_id_isSet = !json[QString("blockingRuleId")].isNull() && m_blocking_rule_id_isValid;

    m_blocking_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_blocking_trigger_id, json[QString("blockingTriggerId")]);
    m_blocking_trigger_id_isSet = !json[QString("blockingTriggerId")].isNull() && m_blocking_trigger_id_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_firing_rule_id_isValid = ::OpenAPI::fromJsonValue(m_firing_rule_id, json[QString("firingRuleId")]);
    m_firing_rule_id_isSet = !json[QString("firingRuleId")].isNull() && m_firing_rule_id_isValid;

    m_firing_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_firing_trigger_id, json[QString("firingTriggerId")]);
    m_firing_trigger_id_isSet = !json[QString("firingTriggerId")].isNull() && m_firing_trigger_id_isValid;

    m_live_only_isValid = ::OpenAPI::fromJsonValue(m_live_only, json[QString("liveOnly")]);
    m_live_only_isSet = !json[QString("liveOnly")].isNull() && m_live_only_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("parentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_paused_isValid = ::OpenAPI::fromJsonValue(m_paused, json[QString("paused")]);
    m_paused_isSet = !json[QString("paused")].isNull() && m_paused_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_schedule_end_ms_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_ms, json[QString("scheduleEndMs")]);
    m_schedule_end_ms_isSet = !json[QString("scheduleEndMs")].isNull() && m_schedule_end_ms_isValid;

    m_schedule_start_ms_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_ms, json[QString("scheduleStartMs")]);
    m_schedule_start_ms_isSet = !json[QString("scheduleStartMs")].isNull() && m_schedule_start_ms_isValid;

    m_setup_tag_isValid = ::OpenAPI::fromJsonValue(m_setup_tag, json[QString("setupTag")]);
    m_setup_tag_isSet = !json[QString("setupTag")].isNull() && m_setup_tag_isValid;

    m_tag_firing_option_isValid = ::OpenAPI::fromJsonValue(m_tag_firing_option, json[QString("tagFiringOption")]);
    m_tag_firing_option_isSet = !json[QString("tagFiringOption")].isNull() && m_tag_firing_option_isValid;

    m_tag_id_isValid = ::OpenAPI::fromJsonValue(m_tag_id, json[QString("tagId")]);
    m_tag_id_isSet = !json[QString("tagId")].isNull() && m_tag_id_isValid;

    m_teardown_tag_isValid = ::OpenAPI::fromJsonValue(m_teardown_tag, json[QString("teardownTag")]);
    m_teardown_tag_isSet = !json[QString("teardownTag")].isNull() && m_teardown_tag_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_blocking_rule_id.size() > 0) {
        obj.insert(QString("blockingRuleId"), ::OpenAPI::toJsonValue(m_blocking_rule_id));
    }
    if (m_blocking_trigger_id.size() > 0) {
        obj.insert(QString("blockingTriggerId"), ::OpenAPI::toJsonValue(m_blocking_trigger_id));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_firing_rule_id.size() > 0) {
        obj.insert(QString("firingRuleId"), ::OpenAPI::toJsonValue(m_firing_rule_id));
    }
    if (m_firing_trigger_id.size() > 0) {
        obj.insert(QString("firingTriggerId"), ::OpenAPI::toJsonValue(m_firing_trigger_id));
    }
    if (m_live_only_isSet) {
        obj.insert(QString("liveOnly"), ::OpenAPI::toJsonValue(m_live_only));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_parameter.size() > 0) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_paused_isSet) {
        obj.insert(QString("paused"), ::OpenAPI::toJsonValue(m_paused));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_schedule_end_ms_isSet) {
        obj.insert(QString("scheduleEndMs"), ::OpenAPI::toJsonValue(m_schedule_end_ms));
    }
    if (m_schedule_start_ms_isSet) {
        obj.insert(QString("scheduleStartMs"), ::OpenAPI::toJsonValue(m_schedule_start_ms));
    }
    if (m_setup_tag.size() > 0) {
        obj.insert(QString("setupTag"), ::OpenAPI::toJsonValue(m_setup_tag));
    }
    if (m_tag_firing_option_isSet) {
        obj.insert(QString("tagFiringOption"), ::OpenAPI::toJsonValue(m_tag_firing_option));
    }
    if (m_tag_id_isSet) {
        obj.insert(QString("tagId"), ::OpenAPI::toJsonValue(m_tag_id));
    }
    if (m_teardown_tag.size() > 0) {
        obj.insert(QString("teardownTag"), ::OpenAPI::toJsonValue(m_teardown_tag));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITag::getAccountId() const {
    return m_account_id;
}
void OAITag::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITag::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITag::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<QString> OAITag::getBlockingRuleId() const {
    return m_blocking_rule_id;
}
void OAITag::setBlockingRuleId(const QList<QString> &blocking_rule_id) {
    m_blocking_rule_id = blocking_rule_id;
    m_blocking_rule_id_isSet = true;
}

bool OAITag::is_blocking_rule_id_Set() const{
    return m_blocking_rule_id_isSet;
}

bool OAITag::is_blocking_rule_id_Valid() const{
    return m_blocking_rule_id_isValid;
}

QList<QString> OAITag::getBlockingTriggerId() const {
    return m_blocking_trigger_id;
}
void OAITag::setBlockingTriggerId(const QList<QString> &blocking_trigger_id) {
    m_blocking_trigger_id = blocking_trigger_id;
    m_blocking_trigger_id_isSet = true;
}

bool OAITag::is_blocking_trigger_id_Set() const{
    return m_blocking_trigger_id_isSet;
}

bool OAITag::is_blocking_trigger_id_Valid() const{
    return m_blocking_trigger_id_isValid;
}

QString OAITag::getContainerId() const {
    return m_container_id;
}
void OAITag::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAITag::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAITag::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAITag::getFingerprint() const {
    return m_fingerprint;
}
void OAITag::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAITag::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAITag::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QList<QString> OAITag::getFiringRuleId() const {
    return m_firing_rule_id;
}
void OAITag::setFiringRuleId(const QList<QString> &firing_rule_id) {
    m_firing_rule_id = firing_rule_id;
    m_firing_rule_id_isSet = true;
}

bool OAITag::is_firing_rule_id_Set() const{
    return m_firing_rule_id_isSet;
}

bool OAITag::is_firing_rule_id_Valid() const{
    return m_firing_rule_id_isValid;
}

QList<QString> OAITag::getFiringTriggerId() const {
    return m_firing_trigger_id;
}
void OAITag::setFiringTriggerId(const QList<QString> &firing_trigger_id) {
    m_firing_trigger_id = firing_trigger_id;
    m_firing_trigger_id_isSet = true;
}

bool OAITag::is_firing_trigger_id_Set() const{
    return m_firing_trigger_id_isSet;
}

bool OAITag::is_firing_trigger_id_Valid() const{
    return m_firing_trigger_id_isValid;
}

bool OAITag::isLiveOnly() const {
    return m_live_only;
}
void OAITag::setLiveOnly(const bool &live_only) {
    m_live_only = live_only;
    m_live_only_isSet = true;
}

bool OAITag::is_live_only_Set() const{
    return m_live_only_isSet;
}

bool OAITag::is_live_only_Valid() const{
    return m_live_only_isValid;
}

QString OAITag::getName() const {
    return m_name;
}
void OAITag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITag::is_name_Set() const{
    return m_name_isSet;
}

bool OAITag::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITag::getNotes() const {
    return m_notes;
}
void OAITag::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAITag::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAITag::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIParameter> OAITag::getParameter() const {
    return m_parameter;
}
void OAITag::setParameter(const QList<OAIParameter> &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAITag::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAITag::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAITag::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAITag::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAITag::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAITag::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

bool OAITag::isPaused() const {
    return m_paused;
}
void OAITag::setPaused(const bool &paused) {
    m_paused = paused;
    m_paused_isSet = true;
}

bool OAITag::is_paused_Set() const{
    return m_paused_isSet;
}

bool OAITag::is_paused_Valid() const{
    return m_paused_isValid;
}

OAIParameter OAITag::getPriority() const {
    return m_priority;
}
void OAITag::setPriority(const OAIParameter &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITag::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITag::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAITag::getScheduleEndMs() const {
    return m_schedule_end_ms;
}
void OAITag::setScheduleEndMs(const QString &schedule_end_ms) {
    m_schedule_end_ms = schedule_end_ms;
    m_schedule_end_ms_isSet = true;
}

bool OAITag::is_schedule_end_ms_Set() const{
    return m_schedule_end_ms_isSet;
}

bool OAITag::is_schedule_end_ms_Valid() const{
    return m_schedule_end_ms_isValid;
}

QString OAITag::getScheduleStartMs() const {
    return m_schedule_start_ms;
}
void OAITag::setScheduleStartMs(const QString &schedule_start_ms) {
    m_schedule_start_ms = schedule_start_ms;
    m_schedule_start_ms_isSet = true;
}

bool OAITag::is_schedule_start_ms_Set() const{
    return m_schedule_start_ms_isSet;
}

bool OAITag::is_schedule_start_ms_Valid() const{
    return m_schedule_start_ms_isValid;
}

QList<OAISetupTag> OAITag::getSetupTag() const {
    return m_setup_tag;
}
void OAITag::setSetupTag(const QList<OAISetupTag> &setup_tag) {
    m_setup_tag = setup_tag;
    m_setup_tag_isSet = true;
}

bool OAITag::is_setup_tag_Set() const{
    return m_setup_tag_isSet;
}

bool OAITag::is_setup_tag_Valid() const{
    return m_setup_tag_isValid;
}

QString OAITag::getTagFiringOption() const {
    return m_tag_firing_option;
}
void OAITag::setTagFiringOption(const QString &tag_firing_option) {
    m_tag_firing_option = tag_firing_option;
    m_tag_firing_option_isSet = true;
}

bool OAITag::is_tag_firing_option_Set() const{
    return m_tag_firing_option_isSet;
}

bool OAITag::is_tag_firing_option_Valid() const{
    return m_tag_firing_option_isValid;
}

QString OAITag::getTagId() const {
    return m_tag_id;
}
void OAITag::setTagId(const QString &tag_id) {
    m_tag_id = tag_id;
    m_tag_id_isSet = true;
}

bool OAITag::is_tag_id_Set() const{
    return m_tag_id_isSet;
}

bool OAITag::is_tag_id_Valid() const{
    return m_tag_id_isValid;
}

QList<OAITeardownTag> OAITag::getTeardownTag() const {
    return m_teardown_tag;
}
void OAITag::setTeardownTag(const QList<OAITeardownTag> &teardown_tag) {
    m_teardown_tag = teardown_tag;
    m_teardown_tag_isSet = true;
}

bool OAITag::is_teardown_tag_Set() const{
    return m_teardown_tag_isSet;
}

bool OAITag::is_teardown_tag_Valid() const{
    return m_teardown_tag_isValid;
}

QString OAITag::getType() const {
    return m_type;
}
void OAITag::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITag::is_type_Set() const{
    return m_type_isSet;
}

bool OAITag::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocking_rule_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocking_trigger_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firing_rule_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_firing_trigger_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_firing_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teardown_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
