/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerVersion::OAIContainerVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerVersion::OAIContainerVersion() {
    this->initializeModel();
}

OAIContainerVersion::~OAIContainerVersion() {}

void OAIContainerVersion::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_container_version_id_isSet = false;
    m_container_version_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_macro_isSet = false;
    m_macro_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_rule_isSet = false;
    m_rule_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;
}

void OAIContainerVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerVersion::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_container_version_id_isValid = ::OpenAPI::fromJsonValue(m_container_version_id, json[QString("containerVersionId")]);
    m_container_version_id_isSet = !json[QString("containerVersionId")].isNull() && m_container_version_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_macro_isValid = ::OpenAPI::fromJsonValue(m_macro, json[QString("macro")]);
    m_macro_isSet = !json[QString("macro")].isNull() && m_macro_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;
}

QString OAIContainerVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_container.isSet()) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_container_version_id_isSet) {
        obj.insert(QString("containerVersionId"), ::OpenAPI::toJsonValue(m_container_version_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_folder.size() > 0) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_macro.size() > 0) {
        obj.insert(QString("macro"), ::OpenAPI::toJsonValue(m_macro));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_rule.size() > 0) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    if (m_tag.size() > 0) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_trigger.size() > 0) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_variable.size() > 0) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    return obj;
}

QString OAIContainerVersion::getAccountId() const {
    return m_account_id;
}
void OAIContainerVersion::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIContainerVersion::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIContainerVersion::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIContainer OAIContainerVersion::getContainer() const {
    return m_container;
}
void OAIContainerVersion::setContainer(const OAIContainer &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIContainerVersion::is_container_Set() const{
    return m_container_isSet;
}

bool OAIContainerVersion::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIContainerVersion::getContainerId() const {
    return m_container_id;
}
void OAIContainerVersion::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAIContainerVersion::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAIContainerVersion::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAIContainerVersion::getContainerVersionId() const {
    return m_container_version_id;
}
void OAIContainerVersion::setContainerVersionId(const QString &container_version_id) {
    m_container_version_id = container_version_id;
    m_container_version_id_isSet = true;
}

bool OAIContainerVersion::is_container_version_id_Set() const{
    return m_container_version_id_isSet;
}

bool OAIContainerVersion::is_container_version_id_Valid() const{
    return m_container_version_id_isValid;
}

bool OAIContainerVersion::isDeleted() const {
    return m_deleted;
}
void OAIContainerVersion::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIContainerVersion::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIContainerVersion::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIContainerVersion::getFingerprint() const {
    return m_fingerprint;
}
void OAIContainerVersion::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIContainerVersion::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIContainerVersion::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QList<OAIFolder> OAIContainerVersion::getFolder() const {
    return m_folder;
}
void OAIContainerVersion::setFolder(const QList<OAIFolder> &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIContainerVersion::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIContainerVersion::is_folder_Valid() const{
    return m_folder_isValid;
}

QList<OAIMacro> OAIContainerVersion::getMacro() const {
    return m_macro;
}
void OAIContainerVersion::setMacro(const QList<OAIMacro> &macro) {
    m_macro = macro;
    m_macro_isSet = true;
}

bool OAIContainerVersion::is_macro_Set() const{
    return m_macro_isSet;
}

bool OAIContainerVersion::is_macro_Valid() const{
    return m_macro_isValid;
}

QString OAIContainerVersion::getName() const {
    return m_name;
}
void OAIContainerVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContainerVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContainerVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContainerVersion::getNotes() const {
    return m_notes;
}
void OAIContainerVersion::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIContainerVersion::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIContainerVersion::is_notes_Valid() const{
    return m_notes_isValid;
}

QList<OAIRule> OAIContainerVersion::getRule() const {
    return m_rule;
}
void OAIContainerVersion::setRule(const QList<OAIRule> &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIContainerVersion::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIContainerVersion::is_rule_Valid() const{
    return m_rule_isValid;
}

QList<OAITag> OAIContainerVersion::getTag() const {
    return m_tag;
}
void OAIContainerVersion::setTag(const QList<OAITag> &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIContainerVersion::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIContainerVersion::is_tag_Valid() const{
    return m_tag_isValid;
}

QList<OAITrigger> OAIContainerVersion::getTrigger() const {
    return m_trigger;
}
void OAIContainerVersion::setTrigger(const QList<OAITrigger> &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIContainerVersion::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIContainerVersion::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QList<OAIVariable> OAIContainerVersion::getVariable() const {
    return m_variable;
}
void OAIContainerVersion::setVariable(const QList<OAIVariable> &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIContainerVersion::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIContainerVersion::is_variable_Valid() const{
    return m_variable_isValid;
}

bool OAIContainerVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_macro.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
