/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrigger::OAITrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrigger::OAITrigger() {
    this->initializeModel();
}

OAITrigger::~OAITrigger() {}

void OAITrigger::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_auto_event_filter_isSet = false;
    m_auto_event_filter_isValid = false;

    m_check_validation_isSet = false;
    m_check_validation_isValid = false;

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_continuous_time_min_milliseconds_isSet = false;
    m_continuous_time_min_milliseconds_isValid = false;

    m_custom_event_filter_isSet = false;
    m_custom_event_filter_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_horizontal_scroll_percentage_list_isSet = false;
    m_horizontal_scroll_percentage_list_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_seconds_isSet = false;
    m_interval_seconds_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_max_timer_length_seconds_isSet = false;
    m_max_timer_length_seconds_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_parent_folder_id_isSet = false;
    m_parent_folder_id_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_total_time_min_milliseconds_isSet = false;
    m_total_time_min_milliseconds_isValid = false;

    m_trigger_id_isSet = false;
    m_trigger_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unique_trigger_id_isSet = false;
    m_unique_trigger_id_isValid = false;

    m_vertical_scroll_percentage_list_isSet = false;
    m_vertical_scroll_percentage_list_isValid = false;

    m_visibility_selector_isSet = false;
    m_visibility_selector_isValid = false;

    m_visible_percentage_max_isSet = false;
    m_visible_percentage_max_isValid = false;

    m_visible_percentage_min_isSet = false;
    m_visible_percentage_min_isValid = false;

    m_wait_for_tags_isSet = false;
    m_wait_for_tags_isValid = false;

    m_wait_for_tags_timeout_isSet = false;
    m_wait_for_tags_timeout_isValid = false;
}

void OAITrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrigger::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_auto_event_filter_isValid = ::OpenAPI::fromJsonValue(m_auto_event_filter, json[QString("autoEventFilter")]);
    m_auto_event_filter_isSet = !json[QString("autoEventFilter")].isNull() && m_auto_event_filter_isValid;

    m_check_validation_isValid = ::OpenAPI::fromJsonValue(m_check_validation, json[QString("checkValidation")]);
    m_check_validation_isSet = !json[QString("checkValidation")].isNull() && m_check_validation_isValid;

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_continuous_time_min_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_continuous_time_min_milliseconds, json[QString("continuousTimeMinMilliseconds")]);
    m_continuous_time_min_milliseconds_isSet = !json[QString("continuousTimeMinMilliseconds")].isNull() && m_continuous_time_min_milliseconds_isValid;

    m_custom_event_filter_isValid = ::OpenAPI::fromJsonValue(m_custom_event_filter, json[QString("customEventFilter")]);
    m_custom_event_filter_isSet = !json[QString("customEventFilter")].isNull() && m_custom_event_filter_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_horizontal_scroll_percentage_list_isValid = ::OpenAPI::fromJsonValue(m_horizontal_scroll_percentage_list, json[QString("horizontalScrollPercentageList")]);
    m_horizontal_scroll_percentage_list_isSet = !json[QString("horizontalScrollPercentageList")].isNull() && m_horizontal_scroll_percentage_list_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_seconds, json[QString("intervalSeconds")]);
    m_interval_seconds_isSet = !json[QString("intervalSeconds")].isNull() && m_interval_seconds_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_max_timer_length_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_timer_length_seconds, json[QString("maxTimerLengthSeconds")]);
    m_max_timer_length_seconds_isSet = !json[QString("maxTimerLengthSeconds")].isNull() && m_max_timer_length_seconds_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_parent_folder_id_isValid = ::OpenAPI::fromJsonValue(m_parent_folder_id, json[QString("parentFolderId")]);
    m_parent_folder_id_isSet = !json[QString("parentFolderId")].isNull() && m_parent_folder_id_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_total_time_min_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_total_time_min_milliseconds, json[QString("totalTimeMinMilliseconds")]);
    m_total_time_min_milliseconds_isSet = !json[QString("totalTimeMinMilliseconds")].isNull() && m_total_time_min_milliseconds_isValid;

    m_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_trigger_id, json[QString("triggerId")]);
    m_trigger_id_isSet = !json[QString("triggerId")].isNull() && m_trigger_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unique_trigger_id_isValid = ::OpenAPI::fromJsonValue(m_unique_trigger_id, json[QString("uniqueTriggerId")]);
    m_unique_trigger_id_isSet = !json[QString("uniqueTriggerId")].isNull() && m_unique_trigger_id_isValid;

    m_vertical_scroll_percentage_list_isValid = ::OpenAPI::fromJsonValue(m_vertical_scroll_percentage_list, json[QString("verticalScrollPercentageList")]);
    m_vertical_scroll_percentage_list_isSet = !json[QString("verticalScrollPercentageList")].isNull() && m_vertical_scroll_percentage_list_isValid;

    m_visibility_selector_isValid = ::OpenAPI::fromJsonValue(m_visibility_selector, json[QString("visibilitySelector")]);
    m_visibility_selector_isSet = !json[QString("visibilitySelector")].isNull() && m_visibility_selector_isValid;

    m_visible_percentage_max_isValid = ::OpenAPI::fromJsonValue(m_visible_percentage_max, json[QString("visiblePercentageMax")]);
    m_visible_percentage_max_isSet = !json[QString("visiblePercentageMax")].isNull() && m_visible_percentage_max_isValid;

    m_visible_percentage_min_isValid = ::OpenAPI::fromJsonValue(m_visible_percentage_min, json[QString("visiblePercentageMin")]);
    m_visible_percentage_min_isSet = !json[QString("visiblePercentageMin")].isNull() && m_visible_percentage_min_isValid;

    m_wait_for_tags_isValid = ::OpenAPI::fromJsonValue(m_wait_for_tags, json[QString("waitForTags")]);
    m_wait_for_tags_isSet = !json[QString("waitForTags")].isNull() && m_wait_for_tags_isValid;

    m_wait_for_tags_timeout_isValid = ::OpenAPI::fromJsonValue(m_wait_for_tags_timeout, json[QString("waitForTagsTimeout")]);
    m_wait_for_tags_timeout_isSet = !json[QString("waitForTagsTimeout")].isNull() && m_wait_for_tags_timeout_isValid;
}

QString OAITrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_auto_event_filter.size() > 0) {
        obj.insert(QString("autoEventFilter"), ::OpenAPI::toJsonValue(m_auto_event_filter));
    }
    if (m_check_validation.isSet()) {
        obj.insert(QString("checkValidation"), ::OpenAPI::toJsonValue(m_check_validation));
    }
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_continuous_time_min_milliseconds.isSet()) {
        obj.insert(QString("continuousTimeMinMilliseconds"), ::OpenAPI::toJsonValue(m_continuous_time_min_milliseconds));
    }
    if (m_custom_event_filter.size() > 0) {
        obj.insert(QString("customEventFilter"), ::OpenAPI::toJsonValue(m_custom_event_filter));
    }
    if (m_event_name.isSet()) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_filter.size() > 0) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_horizontal_scroll_percentage_list.isSet()) {
        obj.insert(QString("horizontalScrollPercentageList"), ::OpenAPI::toJsonValue(m_horizontal_scroll_percentage_list));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_seconds.isSet()) {
        obj.insert(QString("intervalSeconds"), ::OpenAPI::toJsonValue(m_interval_seconds));
    }
    if (m_limit.isSet()) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_max_timer_length_seconds.isSet()) {
        obj.insert(QString("maxTimerLengthSeconds"), ::OpenAPI::toJsonValue(m_max_timer_length_seconds));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter.size() > 0) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_parent_folder_id_isSet) {
        obj.insert(QString("parentFolderId"), ::OpenAPI::toJsonValue(m_parent_folder_id));
    }
    if (m_selector.isSet()) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_total_time_min_milliseconds.isSet()) {
        obj.insert(QString("totalTimeMinMilliseconds"), ::OpenAPI::toJsonValue(m_total_time_min_milliseconds));
    }
    if (m_trigger_id_isSet) {
        obj.insert(QString("triggerId"), ::OpenAPI::toJsonValue(m_trigger_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unique_trigger_id.isSet()) {
        obj.insert(QString("uniqueTriggerId"), ::OpenAPI::toJsonValue(m_unique_trigger_id));
    }
    if (m_vertical_scroll_percentage_list.isSet()) {
        obj.insert(QString("verticalScrollPercentageList"), ::OpenAPI::toJsonValue(m_vertical_scroll_percentage_list));
    }
    if (m_visibility_selector.isSet()) {
        obj.insert(QString("visibilitySelector"), ::OpenAPI::toJsonValue(m_visibility_selector));
    }
    if (m_visible_percentage_max.isSet()) {
        obj.insert(QString("visiblePercentageMax"), ::OpenAPI::toJsonValue(m_visible_percentage_max));
    }
    if (m_visible_percentage_min.isSet()) {
        obj.insert(QString("visiblePercentageMin"), ::OpenAPI::toJsonValue(m_visible_percentage_min));
    }
    if (m_wait_for_tags.isSet()) {
        obj.insert(QString("waitForTags"), ::OpenAPI::toJsonValue(m_wait_for_tags));
    }
    if (m_wait_for_tags_timeout.isSet()) {
        obj.insert(QString("waitForTagsTimeout"), ::OpenAPI::toJsonValue(m_wait_for_tags_timeout));
    }
    return obj;
}

QString OAITrigger::getAccountId() const {
    return m_account_id;
}
void OAITrigger::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITrigger::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITrigger::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAICondition> OAITrigger::getAutoEventFilter() const {
    return m_auto_event_filter;
}
void OAITrigger::setAutoEventFilter(const QList<OAICondition> &auto_event_filter) {
    m_auto_event_filter = auto_event_filter;
    m_auto_event_filter_isSet = true;
}

bool OAITrigger::is_auto_event_filter_Set() const{
    return m_auto_event_filter_isSet;
}

bool OAITrigger::is_auto_event_filter_Valid() const{
    return m_auto_event_filter_isValid;
}

OAIParameter OAITrigger::getCheckValidation() const {
    return m_check_validation;
}
void OAITrigger::setCheckValidation(const OAIParameter &check_validation) {
    m_check_validation = check_validation;
    m_check_validation_isSet = true;
}

bool OAITrigger::is_check_validation_Set() const{
    return m_check_validation_isSet;
}

bool OAITrigger::is_check_validation_Valid() const{
    return m_check_validation_isValid;
}

QString OAITrigger::getContainerId() const {
    return m_container_id;
}
void OAITrigger::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAITrigger::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAITrigger::is_container_id_Valid() const{
    return m_container_id_isValid;
}

OAIParameter OAITrigger::getContinuousTimeMinMilliseconds() const {
    return m_continuous_time_min_milliseconds;
}
void OAITrigger::setContinuousTimeMinMilliseconds(const OAIParameter &continuous_time_min_milliseconds) {
    m_continuous_time_min_milliseconds = continuous_time_min_milliseconds;
    m_continuous_time_min_milliseconds_isSet = true;
}

bool OAITrigger::is_continuous_time_min_milliseconds_Set() const{
    return m_continuous_time_min_milliseconds_isSet;
}

bool OAITrigger::is_continuous_time_min_milliseconds_Valid() const{
    return m_continuous_time_min_milliseconds_isValid;
}

QList<OAICondition> OAITrigger::getCustomEventFilter() const {
    return m_custom_event_filter;
}
void OAITrigger::setCustomEventFilter(const QList<OAICondition> &custom_event_filter) {
    m_custom_event_filter = custom_event_filter;
    m_custom_event_filter_isSet = true;
}

bool OAITrigger::is_custom_event_filter_Set() const{
    return m_custom_event_filter_isSet;
}

bool OAITrigger::is_custom_event_filter_Valid() const{
    return m_custom_event_filter_isValid;
}

OAIParameter OAITrigger::getEventName() const {
    return m_event_name;
}
void OAITrigger::setEventName(const OAIParameter &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAITrigger::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAITrigger::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QList<OAICondition> OAITrigger::getFilter() const {
    return m_filter;
}
void OAITrigger::setFilter(const QList<OAICondition> &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAITrigger::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAITrigger::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAITrigger::getFingerprint() const {
    return m_fingerprint;
}
void OAITrigger::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAITrigger::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAITrigger::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

OAIParameter OAITrigger::getHorizontalScrollPercentageList() const {
    return m_horizontal_scroll_percentage_list;
}
void OAITrigger::setHorizontalScrollPercentageList(const OAIParameter &horizontal_scroll_percentage_list) {
    m_horizontal_scroll_percentage_list = horizontal_scroll_percentage_list;
    m_horizontal_scroll_percentage_list_isSet = true;
}

bool OAITrigger::is_horizontal_scroll_percentage_list_Set() const{
    return m_horizontal_scroll_percentage_list_isSet;
}

bool OAITrigger::is_horizontal_scroll_percentage_list_Valid() const{
    return m_horizontal_scroll_percentage_list_isValid;
}

OAIParameter OAITrigger::getInterval() const {
    return m_interval;
}
void OAITrigger::setInterval(const OAIParameter &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAITrigger::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAITrigger::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIParameter OAITrigger::getIntervalSeconds() const {
    return m_interval_seconds;
}
void OAITrigger::setIntervalSeconds(const OAIParameter &interval_seconds) {
    m_interval_seconds = interval_seconds;
    m_interval_seconds_isSet = true;
}

bool OAITrigger::is_interval_seconds_Set() const{
    return m_interval_seconds_isSet;
}

bool OAITrigger::is_interval_seconds_Valid() const{
    return m_interval_seconds_isValid;
}

OAIParameter OAITrigger::getLimit() const {
    return m_limit;
}
void OAITrigger::setLimit(const OAIParameter &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAITrigger::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAITrigger::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIParameter OAITrigger::getMaxTimerLengthSeconds() const {
    return m_max_timer_length_seconds;
}
void OAITrigger::setMaxTimerLengthSeconds(const OAIParameter &max_timer_length_seconds) {
    m_max_timer_length_seconds = max_timer_length_seconds;
    m_max_timer_length_seconds_isSet = true;
}

bool OAITrigger::is_max_timer_length_seconds_Set() const{
    return m_max_timer_length_seconds_isSet;
}

bool OAITrigger::is_max_timer_length_seconds_Valid() const{
    return m_max_timer_length_seconds_isValid;
}

QString OAITrigger::getName() const {
    return m_name;
}
void OAITrigger::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrigger::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrigger::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIParameter> OAITrigger::getParameter() const {
    return m_parameter;
}
void OAITrigger::setParameter(const QList<OAIParameter> &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAITrigger::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAITrigger::is_parameter_Valid() const{
    return m_parameter_isValid;
}

QString OAITrigger::getParentFolderId() const {
    return m_parent_folder_id;
}
void OAITrigger::setParentFolderId(const QString &parent_folder_id) {
    m_parent_folder_id = parent_folder_id;
    m_parent_folder_id_isSet = true;
}

bool OAITrigger::is_parent_folder_id_Set() const{
    return m_parent_folder_id_isSet;
}

bool OAITrigger::is_parent_folder_id_Valid() const{
    return m_parent_folder_id_isValid;
}

OAIParameter OAITrigger::getSelector() const {
    return m_selector;
}
void OAITrigger::setSelector(const OAIParameter &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAITrigger::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAITrigger::is_selector_Valid() const{
    return m_selector_isValid;
}

OAIParameter OAITrigger::getTotalTimeMinMilliseconds() const {
    return m_total_time_min_milliseconds;
}
void OAITrigger::setTotalTimeMinMilliseconds(const OAIParameter &total_time_min_milliseconds) {
    m_total_time_min_milliseconds = total_time_min_milliseconds;
    m_total_time_min_milliseconds_isSet = true;
}

bool OAITrigger::is_total_time_min_milliseconds_Set() const{
    return m_total_time_min_milliseconds_isSet;
}

bool OAITrigger::is_total_time_min_milliseconds_Valid() const{
    return m_total_time_min_milliseconds_isValid;
}

QString OAITrigger::getTriggerId() const {
    return m_trigger_id;
}
void OAITrigger::setTriggerId(const QString &trigger_id) {
    m_trigger_id = trigger_id;
    m_trigger_id_isSet = true;
}

bool OAITrigger::is_trigger_id_Set() const{
    return m_trigger_id_isSet;
}

bool OAITrigger::is_trigger_id_Valid() const{
    return m_trigger_id_isValid;
}

QString OAITrigger::getType() const {
    return m_type;
}
void OAITrigger::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrigger::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrigger::is_type_Valid() const{
    return m_type_isValid;
}

OAIParameter OAITrigger::getUniqueTriggerId() const {
    return m_unique_trigger_id;
}
void OAITrigger::setUniqueTriggerId(const OAIParameter &unique_trigger_id) {
    m_unique_trigger_id = unique_trigger_id;
    m_unique_trigger_id_isSet = true;
}

bool OAITrigger::is_unique_trigger_id_Set() const{
    return m_unique_trigger_id_isSet;
}

bool OAITrigger::is_unique_trigger_id_Valid() const{
    return m_unique_trigger_id_isValid;
}

OAIParameter OAITrigger::getVerticalScrollPercentageList() const {
    return m_vertical_scroll_percentage_list;
}
void OAITrigger::setVerticalScrollPercentageList(const OAIParameter &vertical_scroll_percentage_list) {
    m_vertical_scroll_percentage_list = vertical_scroll_percentage_list;
    m_vertical_scroll_percentage_list_isSet = true;
}

bool OAITrigger::is_vertical_scroll_percentage_list_Set() const{
    return m_vertical_scroll_percentage_list_isSet;
}

bool OAITrigger::is_vertical_scroll_percentage_list_Valid() const{
    return m_vertical_scroll_percentage_list_isValid;
}

OAIParameter OAITrigger::getVisibilitySelector() const {
    return m_visibility_selector;
}
void OAITrigger::setVisibilitySelector(const OAIParameter &visibility_selector) {
    m_visibility_selector = visibility_selector;
    m_visibility_selector_isSet = true;
}

bool OAITrigger::is_visibility_selector_Set() const{
    return m_visibility_selector_isSet;
}

bool OAITrigger::is_visibility_selector_Valid() const{
    return m_visibility_selector_isValid;
}

OAIParameter OAITrigger::getVisiblePercentageMax() const {
    return m_visible_percentage_max;
}
void OAITrigger::setVisiblePercentageMax(const OAIParameter &visible_percentage_max) {
    m_visible_percentage_max = visible_percentage_max;
    m_visible_percentage_max_isSet = true;
}

bool OAITrigger::is_visible_percentage_max_Set() const{
    return m_visible_percentage_max_isSet;
}

bool OAITrigger::is_visible_percentage_max_Valid() const{
    return m_visible_percentage_max_isValid;
}

OAIParameter OAITrigger::getVisiblePercentageMin() const {
    return m_visible_percentage_min;
}
void OAITrigger::setVisiblePercentageMin(const OAIParameter &visible_percentage_min) {
    m_visible_percentage_min = visible_percentage_min;
    m_visible_percentage_min_isSet = true;
}

bool OAITrigger::is_visible_percentage_min_Set() const{
    return m_visible_percentage_min_isSet;
}

bool OAITrigger::is_visible_percentage_min_Valid() const{
    return m_visible_percentage_min_isValid;
}

OAIParameter OAITrigger::getWaitForTags() const {
    return m_wait_for_tags;
}
void OAITrigger::setWaitForTags(const OAIParameter &wait_for_tags) {
    m_wait_for_tags = wait_for_tags;
    m_wait_for_tags_isSet = true;
}

bool OAITrigger::is_wait_for_tags_Set() const{
    return m_wait_for_tags_isSet;
}

bool OAITrigger::is_wait_for_tags_Valid() const{
    return m_wait_for_tags_isValid;
}

OAIParameter OAITrigger::getWaitForTagsTimeout() const {
    return m_wait_for_tags_timeout;
}
void OAITrigger::setWaitForTagsTimeout(const OAIParameter &wait_for_tags_timeout) {
    m_wait_for_tags_timeout = wait_for_tags_timeout;
    m_wait_for_tags_timeout_isSet = true;
}

bool OAITrigger::is_wait_for_tags_timeout_Set() const{
    return m_wait_for_tags_timeout_isSet;
}

bool OAITrigger::is_wait_for_tags_timeout_Valid() const{
    return m_wait_for_tags_timeout_isValid;
}

bool OAITrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_event_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_time_min_milliseconds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_event_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_scroll_percentage_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_seconds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_timer_length_seconds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_min_milliseconds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_trigger_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_scroll_percentage_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_percentage_max.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_percentage_min.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_tags_timeout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
