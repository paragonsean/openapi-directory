# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server.models.setup_tag import SetupTag
from openapi_server.models.teardown_tag import TeardownTag
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, blocking_rule_id: List[str]=None, blocking_trigger_id: List[str]=None, container_id: str=None, fingerprint: str=None, firing_rule_id: List[str]=None, firing_trigger_id: List[str]=None, live_only: bool=None, name: str=None, notes: str=None, parameter: List[Parameter]=None, parent_folder_id: str=None, paused: bool=None, priority: Parameter=None, schedule_end_ms: str=None, schedule_start_ms: str=None, setup_tag: List[SetupTag]=None, tag_firing_option: str=None, tag_id: str=None, teardown_tag: List[TeardownTag]=None, type: str=None):
        """Tag - a model defined in OpenAPI

        :param account_id: The account_id of this Tag.
        :param blocking_rule_id: The blocking_rule_id of this Tag.
        :param blocking_trigger_id: The blocking_trigger_id of this Tag.
        :param container_id: The container_id of this Tag.
        :param fingerprint: The fingerprint of this Tag.
        :param firing_rule_id: The firing_rule_id of this Tag.
        :param firing_trigger_id: The firing_trigger_id of this Tag.
        :param live_only: The live_only of this Tag.
        :param name: The name of this Tag.
        :param notes: The notes of this Tag.
        :param parameter: The parameter of this Tag.
        :param parent_folder_id: The parent_folder_id of this Tag.
        :param paused: The paused of this Tag.
        :param priority: The priority of this Tag.
        :param schedule_end_ms: The schedule_end_ms of this Tag.
        :param schedule_start_ms: The schedule_start_ms of this Tag.
        :param setup_tag: The setup_tag of this Tag.
        :param tag_firing_option: The tag_firing_option of this Tag.
        :param tag_id: The tag_id of this Tag.
        :param teardown_tag: The teardown_tag of this Tag.
        :param type: The type of this Tag.
        """
        self.openapi_types = {
            'account_id': str,
            'blocking_rule_id': List[str],
            'blocking_trigger_id': List[str],
            'container_id': str,
            'fingerprint': str,
            'firing_rule_id': List[str],
            'firing_trigger_id': List[str],
            'live_only': bool,
            'name': str,
            'notes': str,
            'parameter': List[Parameter],
            'parent_folder_id': str,
            'paused': bool,
            'priority': Parameter,
            'schedule_end_ms': str,
            'schedule_start_ms': str,
            'setup_tag': List[SetupTag],
            'tag_firing_option': str,
            'tag_id': str,
            'teardown_tag': List[TeardownTag],
            'type': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'blocking_rule_id': 'blockingRuleId',
            'blocking_trigger_id': 'blockingTriggerId',
            'container_id': 'containerId',
            'fingerprint': 'fingerprint',
            'firing_rule_id': 'firingRuleId',
            'firing_trigger_id': 'firingTriggerId',
            'live_only': 'liveOnly',
            'name': 'name',
            'notes': 'notes',
            'parameter': 'parameter',
            'parent_folder_id': 'parentFolderId',
            'paused': 'paused',
            'priority': 'priority',
            'schedule_end_ms': 'scheduleEndMs',
            'schedule_start_ms': 'scheduleStartMs',
            'setup_tag': 'setupTag',
            'tag_firing_option': 'tagFiringOption',
            'tag_id': 'tagId',
            'teardown_tag': 'teardownTag',
            'type': 'type'
        }

        self._account_id = account_id
        self._blocking_rule_id = blocking_rule_id
        self._blocking_trigger_id = blocking_trigger_id
        self._container_id = container_id
        self._fingerprint = fingerprint
        self._firing_rule_id = firing_rule_id
        self._firing_trigger_id = firing_trigger_id
        self._live_only = live_only
        self._name = name
        self._notes = notes
        self._parameter = parameter
        self._parent_folder_id = parent_folder_id
        self._paused = paused
        self._priority = priority
        self._schedule_end_ms = schedule_end_ms
        self._schedule_start_ms = schedule_start_ms
        self._setup_tag = setup_tag
        self._tag_firing_option = tag_firing_option
        self._tag_id = tag_id
        self._teardown_tag = teardown_tag
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Tag.

        GTM Account ID.

        :return: The account_id of this Tag.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Tag.

        GTM Account ID.

        :param account_id: The account_id of this Tag.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def blocking_rule_id(self):
        """Gets the blocking_rule_id of this Tag.

        Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The blocking_rule_id of this Tag.
        :rtype: List[str]
        """
        return self._blocking_rule_id

    @blocking_rule_id.setter
    def blocking_rule_id(self, blocking_rule_id):
        """Sets the blocking_rule_id of this Tag.

        Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param blocking_rule_id: The blocking_rule_id of this Tag.
        :type blocking_rule_id: List[str]
        """

        self._blocking_rule_id = blocking_rule_id

    @property
    def blocking_trigger_id(self):
        """Gets the blocking_trigger_id of this Tag.

        Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The blocking_trigger_id of this Tag.
        :rtype: List[str]
        """
        return self._blocking_trigger_id

    @blocking_trigger_id.setter
    def blocking_trigger_id(self, blocking_trigger_id):
        """Sets the blocking_trigger_id of this Tag.

        Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param blocking_trigger_id: The blocking_trigger_id of this Tag.
        :type blocking_trigger_id: List[str]
        """

        self._blocking_trigger_id = blocking_trigger_id

    @property
    def container_id(self):
        """Gets the container_id of this Tag.

        GTM Container ID.

        :return: The container_id of this Tag.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Tag.

        GTM Container ID.

        :param container_id: The container_id of this Tag.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Tag.

        The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.

        :return: The fingerprint of this Tag.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Tag.

        The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.

        :param fingerprint: The fingerprint of this Tag.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def firing_rule_id(self):
        """Gets the firing_rule_id of this Tag.

        Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The firing_rule_id of this Tag.
        :rtype: List[str]
        """
        return self._firing_rule_id

    @firing_rule_id.setter
    def firing_rule_id(self, firing_rule_id):
        """Sets the firing_rule_id of this Tag.

        Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param firing_rule_id: The firing_rule_id of this Tag.
        :type firing_rule_id: List[str]
        """

        self._firing_rule_id = firing_rule_id

    @property
    def firing_trigger_id(self):
        """Gets the firing_trigger_id of this Tag.

        Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The firing_trigger_id of this Tag.
        :rtype: List[str]
        """
        return self._firing_trigger_id

    @firing_trigger_id.setter
    def firing_trigger_id(self, firing_trigger_id):
        """Sets the firing_trigger_id of this Tag.

        Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param firing_trigger_id: The firing_trigger_id of this Tag.
        :type firing_trigger_id: List[str]
        """

        self._firing_trigger_id = firing_trigger_id

    @property
    def live_only(self):
        """Gets the live_only of this Tag.

        If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The live_only of this Tag.
        :rtype: bool
        """
        return self._live_only

    @live_only.setter
    def live_only(self, live_only):
        """Sets the live_only of this Tag.

        If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param live_only: The live_only of this Tag.
        :type live_only: bool
        """

        self._live_only = live_only

    @property
    def name(self):
        """Gets the name of this Tag.

        Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param name: The name of this Tag.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Tag.

        User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The notes of this Tag.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Tag.

        User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param notes: The notes of this Tag.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameter(self):
        """Gets the parameter of this Tag.

        The tag's parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The parameter of this Tag.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Tag.

        The tag's parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param parameter: The parameter of this Tag.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Tag.

        Parent folder id.

        :return: The parent_folder_id of this Tag.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Tag.

        Parent folder id.

        :param parent_folder_id: The parent_folder_id of this Tag.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def paused(self):
        """Gets the paused of this Tag.

        True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The paused of this Tag.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """Sets the paused of this Tag.

        True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param paused: The paused of this Tag.
        :type paused: bool
        """

        self._paused = paused

    @property
    def priority(self):
        """Gets the priority of this Tag.


        :return: The priority of this Tag.
        :rtype: Parameter
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Tag.


        :param priority: The priority of this Tag.
        :type priority: Parameter
        """

        self._priority = priority

    @property
    def schedule_end_ms(self):
        """Gets the schedule_end_ms of this Tag.

        The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The schedule_end_ms of this Tag.
        :rtype: str
        """
        return self._schedule_end_ms

    @schedule_end_ms.setter
    def schedule_end_ms(self, schedule_end_ms):
        """Sets the schedule_end_ms of this Tag.

        The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param schedule_end_ms: The schedule_end_ms of this Tag.
        :type schedule_end_ms: str
        """

        self._schedule_end_ms = schedule_end_ms

    @property
    def schedule_start_ms(self):
        """Gets the schedule_start_ms of this Tag.

        The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The schedule_start_ms of this Tag.
        :rtype: str
        """
        return self._schedule_start_ms

    @schedule_start_ms.setter
    def schedule_start_ms(self, schedule_start_ms):
        """Sets the schedule_start_ms of this Tag.

        The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param schedule_start_ms: The schedule_start_ms of this Tag.
        :type schedule_start_ms: str
        """

        self._schedule_start_ms = schedule_start_ms

    @property
    def setup_tag(self):
        """Gets the setup_tag of this Tag.

        The list of setup tags. Currently we only allow one.

        :return: The setup_tag of this Tag.
        :rtype: List[SetupTag]
        """
        return self._setup_tag

    @setup_tag.setter
    def setup_tag(self, setup_tag):
        """Sets the setup_tag of this Tag.

        The list of setup tags. Currently we only allow one.

        :param setup_tag: The setup_tag of this Tag.
        :type setup_tag: List[SetupTag]
        """

        self._setup_tag = setup_tag

    @property
    def tag_firing_option(self):
        """Gets the tag_firing_option of this Tag.

        Option to fire this tag.

        :return: The tag_firing_option of this Tag.
        :rtype: str
        """
        return self._tag_firing_option

    @tag_firing_option.setter
    def tag_firing_option(self, tag_firing_option):
        """Sets the tag_firing_option of this Tag.

        Option to fire this tag.

        :param tag_firing_option: The tag_firing_option of this Tag.
        :type tag_firing_option: str
        """
        allowed_values = ["unlimited", "oncePerEvent", "oncePerLoad"]  # noqa: E501
        if tag_firing_option not in allowed_values:
            raise ValueError(
                "Invalid value for `tag_firing_option` ({0}), must be one of {1}"
                .format(tag_firing_option, allowed_values)
            )

        self._tag_firing_option = tag_firing_option

    @property
    def tag_id(self):
        """Gets the tag_id of this Tag.

        The Tag ID uniquely identifies the GTM Tag.

        :return: The tag_id of this Tag.
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this Tag.

        The Tag ID uniquely identifies the GTM Tag.

        :param tag_id: The tag_id of this Tag.
        :type tag_id: str
        """

        self._tag_id = tag_id

    @property
    def teardown_tag(self):
        """Gets the teardown_tag of this Tag.

        The list of teardown tags. Currently we only allow one.

        :return: The teardown_tag of this Tag.
        :rtype: List[TeardownTag]
        """
        return self._teardown_tag

    @teardown_tag.setter
    def teardown_tag(self, teardown_tag):
        """Sets the teardown_tag of this Tag.

        The list of teardown tags. Currently we only allow one.

        :param teardown_tag: The teardown_tag of this Tag.
        :type teardown_tag: List[TeardownTag]
        """

        self._teardown_tag = teardown_tag

    @property
    def type(self):
        """Gets the type of this Tag.

        GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :return: The type of this Tag.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tag.

        GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update

        :param type: The type of this Tag.
        :type type: str
        """

        self._type = type
