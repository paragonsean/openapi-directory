# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Folder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, fingerprint: str=None, folder_id: str=None, name: str=None):
        """Folder - a model defined in OpenAPI

        :param account_id: The account_id of this Folder.
        :param container_id: The container_id of this Folder.
        :param fingerprint: The fingerprint of this Folder.
        :param folder_id: The folder_id of this Folder.
        :param name: The name of this Folder.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'fingerprint': str,
            'folder_id': str,
            'name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'fingerprint': 'fingerprint',
            'folder_id': 'folderId',
            'name': 'name'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._fingerprint = fingerprint
        self._folder_id = folder_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Folder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Folder of this Folder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Folder.

        GTM Account ID.

        :return: The account_id of this Folder.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Folder.

        GTM Account ID.

        :param account_id: The account_id of this Folder.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this Folder.

        GTM Container ID.

        :return: The container_id of this Folder.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Folder.

        GTM Container ID.

        :param container_id: The container_id of this Folder.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Folder.

        The fingerprint of the GTM Folder as computed at storage time. This value is recomputed whenever the folder is modified.

        :return: The fingerprint of this Folder.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Folder.

        The fingerprint of the GTM Folder as computed at storage time. This value is recomputed whenever the folder is modified.

        :param fingerprint: The fingerprint of this Folder.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def folder_id(self):
        """Gets the folder_id of this Folder.

        The Folder ID uniquely identifies the GTM Folder.

        :return: The folder_id of this Folder.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Folder.

        The Folder ID uniquely identifies the GTM Folder.

        :param folder_id: The folder_id of this Folder.
        :type folder_id: str
        """

        self._folder_id = folder_id

    @property
    def name(self):
        """Gets the name of this Folder.

        Folder display name. @mutable tagmanager.accounts.containers.folders.create @mutable tagmanager.accounts.containers.folders.update

        :return: The name of this Folder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        Folder display name. @mutable tagmanager.accounts.containers.folders.create @mutable tagmanager.accounts.containers.folders.update

        :param name: The name of this Folder.
        :type name: str
        """

        self._name = name
