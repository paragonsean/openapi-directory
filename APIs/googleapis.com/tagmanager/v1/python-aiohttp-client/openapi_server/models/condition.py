# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter: List[Parameter]=None, type: str=None):
        """Condition - a model defined in OpenAPI

        :param parameter: The parameter of this Condition.
        :param type: The type of this Condition.
        """
        self.openapi_types = {
            'parameter': List[Parameter],
            'type': str
        }

        self.attribute_map = {
            'parameter': 'parameter',
            'type': 'type'
        }

        self._parameter = parameter
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter(self):
        """Gets the parameter of this Condition.

        A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update

        :return: The parameter of this Condition.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Condition.

        A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update

        :param parameter: The parameter of this Condition.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def type(self):
        """Gets the type of this Condition.

        The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update

        :return: The type of this Condition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Condition.

        The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update

        :param type: The type of this Condition.
        :type type: str
        """
        allowed_values = ["equals", "contains", "startsWith", "endsWith", "matchRegex", "greater", "greaterOrEquals", "less", "lessOrEquals", "cssSelector", "urlMatches"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
