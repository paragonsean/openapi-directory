# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_access import AccountAccess
from openapi_server.models.container_access import ContainerAccess
from openapi_server import util


class UserAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_access: AccountAccess=None, account_id: str=None, container_access: List[ContainerAccess]=None, email_address: str=None, permission_id: str=None):
        """UserAccess - a model defined in OpenAPI

        :param account_access: The account_access of this UserAccess.
        :param account_id: The account_id of this UserAccess.
        :param container_access: The container_access of this UserAccess.
        :param email_address: The email_address of this UserAccess.
        :param permission_id: The permission_id of this UserAccess.
        """
        self.openapi_types = {
            'account_access': AccountAccess,
            'account_id': str,
            'container_access': List[ContainerAccess],
            'email_address': str,
            'permission_id': str
        }

        self.attribute_map = {
            'account_access': 'accountAccess',
            'account_id': 'accountId',
            'container_access': 'containerAccess',
            'email_address': 'emailAddress',
            'permission_id': 'permissionId'
        }

        self._account_access = account_access
        self._account_id = account_id
        self._container_access = container_access
        self._email_address = email_address
        self._permission_id = permission_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAccess of this UserAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_access(self):
        """Gets the account_access of this UserAccess.


        :return: The account_access of this UserAccess.
        :rtype: AccountAccess
        """
        return self._account_access

    @account_access.setter
    def account_access(self, account_access):
        """Sets the account_access of this UserAccess.


        :param account_access: The account_access of this UserAccess.
        :type account_access: AccountAccess
        """

        self._account_access = account_access

    @property
    def account_id(self):
        """Gets the account_id of this UserAccess.

        GTM Account ID.

        :return: The account_id of this UserAccess.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UserAccess.

        GTM Account ID.

        :param account_id: The account_id of this UserAccess.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_access(self):
        """Gets the container_access of this UserAccess.

        GTM Container access permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :return: The container_access of this UserAccess.
        :rtype: List[ContainerAccess]
        """
        return self._container_access

    @container_access.setter
    def container_access(self, container_access):
        """Sets the container_access of this UserAccess.

        GTM Container access permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update

        :param container_access: The container_access of this UserAccess.
        :type container_access: List[ContainerAccess]
        """

        self._container_access = container_access

    @property
    def email_address(self):
        """Gets the email_address of this UserAccess.

        User's email address. @mutable tagmanager.accounts.permissions.create

        :return: The email_address of this UserAccess.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserAccess.

        User's email address. @mutable tagmanager.accounts.permissions.create

        :param email_address: The email_address of this UserAccess.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def permission_id(self):
        """Gets the permission_id of this UserAccess.

        Account Permission ID.

        :return: The permission_id of this UserAccess.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this UserAccess.

        Account Permission ID.

        :param permission_id: The permission_id of this UserAccess.
        :type permission_id: str
        """

        self._permission_id = permission_id
