# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.folder import Folder
from openapi_server.models.macro import Macro
from openapi_server.models.rule import Rule
from openapi_server.models.tag import Tag
from openapi_server.models.trigger import Trigger
from openapi_server.models.variable import Variable
from openapi_server import util


class ContainerVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container: Container=None, container_id: str=None, container_version_id: str=None, deleted: bool=None, fingerprint: str=None, folder: List[Folder]=None, macro: List[Macro]=None, name: str=None, notes: str=None, rule: List[Rule]=None, tag: List[Tag]=None, trigger: List[Trigger]=None, variable: List[Variable]=None):
        """ContainerVersion - a model defined in OpenAPI

        :param account_id: The account_id of this ContainerVersion.
        :param container: The container of this ContainerVersion.
        :param container_id: The container_id of this ContainerVersion.
        :param container_version_id: The container_version_id of this ContainerVersion.
        :param deleted: The deleted of this ContainerVersion.
        :param fingerprint: The fingerprint of this ContainerVersion.
        :param folder: The folder of this ContainerVersion.
        :param macro: The macro of this ContainerVersion.
        :param name: The name of this ContainerVersion.
        :param notes: The notes of this ContainerVersion.
        :param rule: The rule of this ContainerVersion.
        :param tag: The tag of this ContainerVersion.
        :param trigger: The trigger of this ContainerVersion.
        :param variable: The variable of this ContainerVersion.
        """
        self.openapi_types = {
            'account_id': str,
            'container': Container,
            'container_id': str,
            'container_version_id': str,
            'deleted': bool,
            'fingerprint': str,
            'folder': List[Folder],
            'macro': List[Macro],
            'name': str,
            'notes': str,
            'rule': List[Rule],
            'tag': List[Tag],
            'trigger': List[Trigger],
            'variable': List[Variable]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container': 'container',
            'container_id': 'containerId',
            'container_version_id': 'containerVersionId',
            'deleted': 'deleted',
            'fingerprint': 'fingerprint',
            'folder': 'folder',
            'macro': 'macro',
            'name': 'name',
            'notes': 'notes',
            'rule': 'rule',
            'tag': 'tag',
            'trigger': 'trigger',
            'variable': 'variable'
        }

        self._account_id = account_id
        self._container = container
        self._container_id = container_id
        self._container_version_id = container_version_id
        self._deleted = deleted
        self._fingerprint = fingerprint
        self._folder = folder
        self._macro = macro
        self._name = name
        self._notes = notes
        self._rule = rule
        self._tag = tag
        self._trigger = trigger
        self._variable = variable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerVersion of this ContainerVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ContainerVersion.

        GTM Account ID.

        :return: The account_id of this ContainerVersion.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ContainerVersion.

        GTM Account ID.

        :param account_id: The account_id of this ContainerVersion.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container(self):
        """Gets the container of this ContainerVersion.


        :return: The container of this ContainerVersion.
        :rtype: Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ContainerVersion.


        :param container: The container of this ContainerVersion.
        :type container: Container
        """

        self._container = container

    @property
    def container_id(self):
        """Gets the container_id of this ContainerVersion.

        GTM Container ID.

        :return: The container_id of this ContainerVersion.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ContainerVersion.

        GTM Container ID.

        :param container_id: The container_id of this ContainerVersion.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_version_id(self):
        """Gets the container_version_id of this ContainerVersion.

        The Container Version ID uniquely identifies the GTM Container Version.

        :return: The container_version_id of this ContainerVersion.
        :rtype: str
        """
        return self._container_version_id

    @container_version_id.setter
    def container_version_id(self, container_version_id):
        """Sets the container_version_id of this ContainerVersion.

        The Container Version ID uniquely identifies the GTM Container Version.

        :param container_version_id: The container_version_id of this ContainerVersion.
        :type container_version_id: str
        """

        self._container_version_id = container_version_id

    @property
    def deleted(self):
        """Gets the deleted of this ContainerVersion.

        A value of true indicates this container version has been deleted.

        :return: The deleted of this ContainerVersion.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ContainerVersion.

        A value of true indicates this container version has been deleted.

        :param deleted: The deleted of this ContainerVersion.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def fingerprint(self):
        """Gets the fingerprint of this ContainerVersion.

        The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.

        :return: The fingerprint of this ContainerVersion.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this ContainerVersion.

        The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.

        :param fingerprint: The fingerprint of this ContainerVersion.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def folder(self):
        """Gets the folder of this ContainerVersion.

        The folders in the container that this version was taken from.

        :return: The folder of this ContainerVersion.
        :rtype: List[Folder]
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this ContainerVersion.

        The folders in the container that this version was taken from.

        :param folder: The folder of this ContainerVersion.
        :type folder: List[Folder]
        """

        self._folder = folder

    @property
    def macro(self):
        """Gets the macro of this ContainerVersion.

        The macros in the container that this version was taken from.

        :return: The macro of this ContainerVersion.
        :rtype: List[Macro]
        """
        return self._macro

    @macro.setter
    def macro(self, macro):
        """Sets the macro of this ContainerVersion.

        The macros in the container that this version was taken from.

        :param macro: The macro of this ContainerVersion.
        :type macro: List[Macro]
        """

        self._macro = macro

    @property
    def name(self):
        """Gets the name of this ContainerVersion.

        Container version display name. @mutable tagmanager.accounts.containers.versions.update

        :return: The name of this ContainerVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContainerVersion.

        Container version display name. @mutable tagmanager.accounts.containers.versions.update

        :param name: The name of this ContainerVersion.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ContainerVersion.

        User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update

        :return: The notes of this ContainerVersion.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ContainerVersion.

        User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update

        :param notes: The notes of this ContainerVersion.
        :type notes: str
        """

        self._notes = notes

    @property
    def rule(self):
        """Gets the rule of this ContainerVersion.

        The rules in the container that this version was taken from.

        :return: The rule of this ContainerVersion.
        :rtype: List[Rule]
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ContainerVersion.

        The rules in the container that this version was taken from.

        :param rule: The rule of this ContainerVersion.
        :type rule: List[Rule]
        """

        self._rule = rule

    @property
    def tag(self):
        """Gets the tag of this ContainerVersion.

        The tags in the container that this version was taken from.

        :return: The tag of this ContainerVersion.
        :rtype: List[Tag]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ContainerVersion.

        The tags in the container that this version was taken from.

        :param tag: The tag of this ContainerVersion.
        :type tag: List[Tag]
        """

        self._tag = tag

    @property
    def trigger(self):
        """Gets the trigger of this ContainerVersion.

        The triggers in the container that this version was taken from.

        :return: The trigger of this ContainerVersion.
        :rtype: List[Trigger]
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this ContainerVersion.

        The triggers in the container that this version was taken from.

        :param trigger: The trigger of this ContainerVersion.
        :type trigger: List[Trigger]
        """

        self._trigger = trigger

    @property
    def variable(self):
        """Gets the variable of this ContainerVersion.

        The variables in the container that this version was taken from.

        :return: The variable of this ContainerVersion.
        :rtype: List[Variable]
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this ContainerVersion.

        The variables in the container that this version was taken from.

        :param variable: The variable of this ContainerVersion.
        :type variable: List[Variable]
        """

        self._variable = variable
