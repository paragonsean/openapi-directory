# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, domain_name: List[str]=None, enabled_built_in_variable: List[str]=None, fingerprint: str=None, name: str=None, notes: str=None, public_id: str=None, time_zone_country_id: str=None, time_zone_id: str=None, usage_context: List[str]=None):
        """Container - a model defined in OpenAPI

        :param account_id: The account_id of this Container.
        :param container_id: The container_id of this Container.
        :param domain_name: The domain_name of this Container.
        :param enabled_built_in_variable: The enabled_built_in_variable of this Container.
        :param fingerprint: The fingerprint of this Container.
        :param name: The name of this Container.
        :param notes: The notes of this Container.
        :param public_id: The public_id of this Container.
        :param time_zone_country_id: The time_zone_country_id of this Container.
        :param time_zone_id: The time_zone_id of this Container.
        :param usage_context: The usage_context of this Container.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'domain_name': List[str],
            'enabled_built_in_variable': List[str],
            'fingerprint': str,
            'name': str,
            'notes': str,
            'public_id': str,
            'time_zone_country_id': str,
            'time_zone_id': str,
            'usage_context': List[str]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'domain_name': 'domainName',
            'enabled_built_in_variable': 'enabledBuiltInVariable',
            'fingerprint': 'fingerprint',
            'name': 'name',
            'notes': 'notes',
            'public_id': 'publicId',
            'time_zone_country_id': 'timeZoneCountryId',
            'time_zone_id': 'timeZoneId',
            'usage_context': 'usageContext'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._domain_name = domain_name
        self._enabled_built_in_variable = enabled_built_in_variable
        self._fingerprint = fingerprint
        self._name = name
        self._notes = notes
        self._public_id = public_id
        self._time_zone_country_id = time_zone_country_id
        self._time_zone_id = time_zone_id
        self._usage_context = usage_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Container.

        GTM Account ID.

        :return: The account_id of this Container.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Container.

        GTM Account ID.

        :param account_id: The account_id of this Container.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this Container.

        The Container ID uniquely identifies the GTM Container.

        :return: The container_id of this Container.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.

        The Container ID uniquely identifies the GTM Container.

        :param container_id: The container_id of this Container.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def domain_name(self):
        """Gets the domain_name of this Container.

        Optional list of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The domain_name of this Container.
        :rtype: List[str]
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Container.

        Optional list of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param domain_name: The domain_name of this Container.
        :type domain_name: List[str]
        """

        self._domain_name = domain_name

    @property
    def enabled_built_in_variable(self):
        """Gets the enabled_built_in_variable of this Container.

        List of enabled built-in variables. Valid values include: pageUrl, pageHostname, pagePath, referrer, event, clickElement, clickClasses, clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId, formTarget, formUrl, formText, errorMessage, errorUrl, errorLine, newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState, historySource, containerVersion, debugMode, randomNumber, containerId. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The enabled_built_in_variable of this Container.
        :rtype: List[str]
        """
        return self._enabled_built_in_variable

    @enabled_built_in_variable.setter
    def enabled_built_in_variable(self, enabled_built_in_variable):
        """Sets the enabled_built_in_variable of this Container.

        List of enabled built-in variables. Valid values include: pageUrl, pageHostname, pagePath, referrer, event, clickElement, clickClasses, clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId, formTarget, formUrl, formText, errorMessage, errorUrl, errorLine, newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState, historySource, containerVersion, debugMode, randomNumber, containerId. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param enabled_built_in_variable: The enabled_built_in_variable of this Container.
        :type enabled_built_in_variable: List[str]
        """
        allowed_values = ["pageUrl", "pageHostname", "pagePath", "referrer", "event", "clickElement", "clickClasses", "clickId", "clickTarget", "clickUrl", "clickText", "firstPartyServingUrl", "formElement", "formClasses", "formId", "formTarget", "formUrl", "formText", "environmentName", "errorMessage", "errorUrl", "errorLine", "newHistoryUrl", "oldHistoryUrl", "newHistoryFragment", "oldHistoryFragment", "newHistoryState", "oldHistoryState", "historySource", "containerVersion", "debugMode", "randomNumber", "containerId", "appId", "appName", "appVersionCode", "appVersionName", "language", "osVersion", "platform", "sdkVersion", "deviceName", "resolution", "advertiserId", "advertisingTrackingEnabled", "htmlId", "ampBrowserLanguage", "ampCanonicalPath", "ampCanonicalUrl", "ampCanonicalHost", "ampReferrer", "ampTitle", "ampClientId", "ampClientTimezone", "ampClientTimestamp", "ampClientScreenWidth", "ampClientScreenHeight", "ampClientScrollX", "ampClientScrollY", "ampClientMaxScrollX", "ampClientMaxScrollY", "ampTotalEngagedTime", "ampPageViewId", "ampPageLoadTime", "ampPageDownloadTime", "ampGtmEvent", "eventName", "firebaseEventParameterCampaign", "firebaseEventParameterCampaignAclid", "firebaseEventParameterCampaignAnid", "firebaseEventParameterCampaignClickTimestamp", "firebaseEventParameterCampaignContent", "firebaseEventParameterCampaignCp1", "firebaseEventParameterCampaignGclid", "firebaseEventParameterCampaignSource", "firebaseEventParameterCampaignTerm", "firebaseEventParameterCurrency", "firebaseEventParameterDynamicLinkAcceptTime", "firebaseEventParameterDynamicLinkLinkid", "firebaseEventParameterNotificationMessageDeviceTime", "firebaseEventParameterNotificationMessageId", "firebaseEventParameterNotificationMessageName", "firebaseEventParameterNotificationMessageTime", "firebaseEventParameterNotificationTopic", "firebaseEventParameterPreviousAppVersion", "firebaseEventParameterPreviousOsVersion", "firebaseEventParameterPrice", "firebaseEventParameterProductId", "firebaseEventParameterQuantity", "firebaseEventParameterValue", "videoProvider", "videoUrl", "videoTitle", "videoDuration", "videoPercent", "videoVisible", "videoStatus", "videoCurrentTime", "scrollDepthThreshold", "scrollDepthUnits", "scrollDepthDirection", "elementVisibilityRatio", "elementVisibilityTime", "elementVisibilityFirstTime", "elementVisibilityRecentTime"]  # noqa: E501
        if not set(enabled_built_in_variable).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enabled_built_in_variable` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enabled_built_in_variable) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_built_in_variable = enabled_built_in_variable

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Container.

        The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.

        :return: The fingerprint of this Container.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Container.

        The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.

        :param fingerprint: The fingerprint of this Container.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def name(self):
        """Gets the name of this Container.

        Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.

        Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Container.

        Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The notes of this Container.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Container.

        Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param notes: The notes of this Container.
        :type notes: str
        """

        self._notes = notes

    @property
    def public_id(self):
        """Gets the public_id of this Container.

        Container Public ID.

        :return: The public_id of this Container.
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this Container.

        Container Public ID.

        :param public_id: The public_id of this Container.
        :type public_id: str
        """

        self._public_id = public_id

    @property
    def time_zone_country_id(self):
        """Gets the time_zone_country_id of this Container.

        Container Country ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The time_zone_country_id of this Container.
        :rtype: str
        """
        return self._time_zone_country_id

    @time_zone_country_id.setter
    def time_zone_country_id(self, time_zone_country_id):
        """Sets the time_zone_country_id of this Container.

        Container Country ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param time_zone_country_id: The time_zone_country_id of this Container.
        :type time_zone_country_id: str
        """

        self._time_zone_country_id = time_zone_country_id

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Container.

        Container Time Zone ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The time_zone_id of this Container.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Container.

        Container Time Zone ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param time_zone_id: The time_zone_id of this Container.
        :type time_zone_id: str
        """

        self._time_zone_id = time_zone_id

    @property
    def usage_context(self):
        """Gets the usage_context of this Container.

        List of Usage Contexts for the Container. Valid values include: web, android, ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :return: The usage_context of this Container.
        :rtype: List[str]
        """
        return self._usage_context

    @usage_context.setter
    def usage_context(self, usage_context):
        """Sets the usage_context of this Container.

        List of Usage Contexts for the Container. Valid values include: web, android, ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update

        :param usage_context: The usage_context of this Container.
        :type usage_context: List[str]
        """
        allowed_values = ["web", "android", "ios", "androidSdk5", "iosSdk5", "amp"]  # noqa: E501
        if not set(usage_context).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `usage_context` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(usage_context) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._usage_context = usage_context
