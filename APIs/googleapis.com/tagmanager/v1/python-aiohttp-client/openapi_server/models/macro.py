# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter import Parameter
from openapi_server import util


class Macro(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, container_id: str=None, disabling_rule_id: List[str]=None, enabling_rule_id: List[str]=None, fingerprint: str=None, macro_id: str=None, name: str=None, notes: str=None, parameter: List[Parameter]=None, parent_folder_id: str=None, schedule_end_ms: str=None, schedule_start_ms: str=None, type: str=None):
        """Macro - a model defined in OpenAPI

        :param account_id: The account_id of this Macro.
        :param container_id: The container_id of this Macro.
        :param disabling_rule_id: The disabling_rule_id of this Macro.
        :param enabling_rule_id: The enabling_rule_id of this Macro.
        :param fingerprint: The fingerprint of this Macro.
        :param macro_id: The macro_id of this Macro.
        :param name: The name of this Macro.
        :param notes: The notes of this Macro.
        :param parameter: The parameter of this Macro.
        :param parent_folder_id: The parent_folder_id of this Macro.
        :param schedule_end_ms: The schedule_end_ms of this Macro.
        :param schedule_start_ms: The schedule_start_ms of this Macro.
        :param type: The type of this Macro.
        """
        self.openapi_types = {
            'account_id': str,
            'container_id': str,
            'disabling_rule_id': List[str],
            'enabling_rule_id': List[str],
            'fingerprint': str,
            'macro_id': str,
            'name': str,
            'notes': str,
            'parameter': List[Parameter],
            'parent_folder_id': str,
            'schedule_end_ms': str,
            'schedule_start_ms': str,
            'type': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'container_id': 'containerId',
            'disabling_rule_id': 'disablingRuleId',
            'enabling_rule_id': 'enablingRuleId',
            'fingerprint': 'fingerprint',
            'macro_id': 'macroId',
            'name': 'name',
            'notes': 'notes',
            'parameter': 'parameter',
            'parent_folder_id': 'parentFolderId',
            'schedule_end_ms': 'scheduleEndMs',
            'schedule_start_ms': 'scheduleStartMs',
            'type': 'type'
        }

        self._account_id = account_id
        self._container_id = container_id
        self._disabling_rule_id = disabling_rule_id
        self._enabling_rule_id = enabling_rule_id
        self._fingerprint = fingerprint
        self._macro_id = macro_id
        self._name = name
        self._notes = notes
        self._parameter = parameter
        self._parent_folder_id = parent_folder_id
        self._schedule_end_ms = schedule_end_ms
        self._schedule_start_ms = schedule_start_ms
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Macro':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Macro of this Macro.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Macro.

        GTM Account ID.

        :return: The account_id of this Macro.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Macro.

        GTM Account ID.

        :param account_id: The account_id of this Macro.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def container_id(self):
        """Gets the container_id of this Macro.

        GTM Container ID.

        :return: The container_id of this Macro.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Macro.

        GTM Container ID.

        :param container_id: The container_id of this Macro.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def disabling_rule_id(self):
        """Gets the disabling_rule_id of this Macro.

        For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The disabling_rule_id of this Macro.
        :rtype: List[str]
        """
        return self._disabling_rule_id

    @disabling_rule_id.setter
    def disabling_rule_id(self, disabling_rule_id):
        """Sets the disabling_rule_id of this Macro.

        For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param disabling_rule_id: The disabling_rule_id of this Macro.
        :type disabling_rule_id: List[str]
        """

        self._disabling_rule_id = disabling_rule_id

    @property
    def enabling_rule_id(self):
        """Gets the enabling_rule_id of this Macro.

        For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The enabling_rule_id of this Macro.
        :rtype: List[str]
        """
        return self._enabling_rule_id

    @enabling_rule_id.setter
    def enabling_rule_id(self, enabling_rule_id):
        """Sets the enabling_rule_id of this Macro.

        For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param enabling_rule_id: The enabling_rule_id of this Macro.
        :type enabling_rule_id: List[str]
        """

        self._enabling_rule_id = enabling_rule_id

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Macro.

        The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.

        :return: The fingerprint of this Macro.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Macro.

        The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.

        :param fingerprint: The fingerprint of this Macro.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def macro_id(self):
        """Gets the macro_id of this Macro.

        The Macro ID uniquely identifies the GTM Macro.

        :return: The macro_id of this Macro.
        :rtype: str
        """
        return self._macro_id

    @macro_id.setter
    def macro_id(self, macro_id):
        """Sets the macro_id of this Macro.

        The Macro ID uniquely identifies the GTM Macro.

        :param macro_id: The macro_id of this Macro.
        :type macro_id: str
        """

        self._macro_id = macro_id

    @property
    def name(self):
        """Gets the name of this Macro.

        Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The name of this Macro.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Macro.

        Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param name: The name of this Macro.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Macro.

        User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The notes of this Macro.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Macro.

        User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param notes: The notes of this Macro.
        :type notes: str
        """

        self._notes = notes

    @property
    def parameter(self):
        """Gets the parameter of this Macro.

        The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The parameter of this Macro.
        :rtype: List[Parameter]
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Macro.

        The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param parameter: The parameter of this Macro.
        :type parameter: List[Parameter]
        """

        self._parameter = parameter

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Macro.

        Parent folder id.

        :return: The parent_folder_id of this Macro.
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Macro.

        Parent folder id.

        :param parent_folder_id: The parent_folder_id of this Macro.
        :type parent_folder_id: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def schedule_end_ms(self):
        """Gets the schedule_end_ms of this Macro.

        The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The schedule_end_ms of this Macro.
        :rtype: str
        """
        return self._schedule_end_ms

    @schedule_end_ms.setter
    def schedule_end_ms(self, schedule_end_ms):
        """Sets the schedule_end_ms of this Macro.

        The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param schedule_end_ms: The schedule_end_ms of this Macro.
        :type schedule_end_ms: str
        """

        self._schedule_end_ms = schedule_end_ms

    @property
    def schedule_start_ms(self):
        """Gets the schedule_start_ms of this Macro.

        The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The schedule_start_ms of this Macro.
        :rtype: str
        """
        return self._schedule_start_ms

    @schedule_start_ms.setter
    def schedule_start_ms(self, schedule_start_ms):
        """Sets the schedule_start_ms of this Macro.

        The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param schedule_start_ms: The schedule_start_ms of this Macro.
        :type schedule_start_ms: str
        """

        self._schedule_start_ms = schedule_start_ms

    @property
    def type(self):
        """Gets the type of this Macro.

        GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :return: The type of this Macro.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Macro.

        GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update

        :param type: The type of this Macro.
        :type type: str
        """

        self._type = type
