/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountAccess;
import org.openapitools.client.model.ContainerAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a user&#39;s permissions to an account and its container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:32.046805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserAccess {
  public static final String SERIALIZED_NAME_ACCOUNT_ACCESS = "accountAccess";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACCESS)
  private AccountAccess accountAccess;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER_ACCESS = "containerAccess";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ACCESS)
  private List<ContainerAccess> containerAccess = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_PERMISSION_ID = "permissionId";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ID)
  private String permissionId;

  public UserAccess() {
  }

  public UserAccess accountAccess(AccountAccess accountAccess) {
    this.accountAccess = accountAccess;
    return this;
  }

  /**
   * Get accountAccess
   * @return accountAccess
   */
  @javax.annotation.Nullable
  public AccountAccess getAccountAccess() {
    return accountAccess;
  }

  public void setAccountAccess(AccountAccess accountAccess) {
    this.accountAccess = accountAccess;
  }


  public UserAccess accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public UserAccess containerAccess(List<ContainerAccess> containerAccess) {
    this.containerAccess = containerAccess;
    return this;
  }

  public UserAccess addContainerAccessItem(ContainerAccess containerAccessItem) {
    if (this.containerAccess == null) {
      this.containerAccess = new ArrayList<>();
    }
    this.containerAccess.add(containerAccessItem);
    return this;
  }

  /**
   * GTM Container access permissions. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
   * @return containerAccess
   */
  @javax.annotation.Nullable
  public List<ContainerAccess> getContainerAccess() {
    return containerAccess;
  }

  public void setContainerAccess(List<ContainerAccess> containerAccess) {
    this.containerAccess = containerAccess;
  }


  public UserAccess emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * User&#39;s email address. @mutable tagmanager.accounts.permissions.create
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public UserAccess permissionId(String permissionId) {
    this.permissionId = permissionId;
    return this;
  }

  /**
   * Account Permission ID.
   * @return permissionId
   */
  @javax.annotation.Nullable
  public String getPermissionId() {
    return permissionId;
  }

  public void setPermissionId(String permissionId) {
    this.permissionId = permissionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccess userAccess = (UserAccess) o;
    return Objects.equals(this.accountAccess, userAccess.accountAccess) &&
        Objects.equals(this.accountId, userAccess.accountId) &&
        Objects.equals(this.containerAccess, userAccess.containerAccess) &&
        Objects.equals(this.emailAddress, userAccess.emailAddress) &&
        Objects.equals(this.permissionId, userAccess.permissionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAccess, accountId, containerAccess, emailAddress, permissionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccess {\n");
    sb.append("    accountAccess: ").append(toIndentedString(accountAccess)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    containerAccess: ").append(toIndentedString(containerAccess)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    permissionId: ").append(toIndentedString(permissionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountAccess");
    openapiFields.add("accountId");
    openapiFields.add("containerAccess");
    openapiFields.add("emailAddress");
    openapiFields.add("permissionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAccess is not found in the empty JSON string", UserAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountAccess`
      if (jsonObj.get("accountAccess") != null && !jsonObj.get("accountAccess").isJsonNull()) {
        AccountAccess.validateJsonElement(jsonObj.get("accountAccess"));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (jsonObj.get("containerAccess") != null && !jsonObj.get("containerAccess").isJsonNull()) {
        JsonArray jsonArraycontainerAccess = jsonObj.getAsJsonArray("containerAccess");
        if (jsonArraycontainerAccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containerAccess").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containerAccess` to be an array in the JSON string but got `%s`", jsonObj.get("containerAccess").toString()));
          }

          // validate the optional field `containerAccess` (array)
          for (int i = 0; i < jsonArraycontainerAccess.size(); i++) {
            ContainerAccess.validateJsonElement(jsonArraycontainerAccess.get(i));
          };
        }
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("permissionId") != null && !jsonObj.get("permissionId").isJsonNull()) && !jsonObj.get("permissionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAccess>() {
           @Override
           public void write(JsonWriter out, UserAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAccess
   * @throws IOException if the JSON string is invalid with respect to UserAccess
   */
  public static UserAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAccess.class);
  }

  /**
   * Convert an instance of UserAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

