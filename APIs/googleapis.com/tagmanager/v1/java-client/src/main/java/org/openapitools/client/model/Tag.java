/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Parameter;
import org.openapitools.client.model.SetupTag;
import org.openapitools.client.model.TeardownTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Tag.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:32.046805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tag {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BLOCKING_RULE_ID = "blockingRuleId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BLOCKING_RULE_ID)
  private List<String> blockingRuleId = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKING_TRIGGER_ID = "blockingTriggerId";
  @SerializedName(SERIALIZED_NAME_BLOCKING_TRIGGER_ID)
  private List<String> blockingTriggerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FIRING_RULE_ID = "firingRuleId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FIRING_RULE_ID)
  private List<String> firingRuleId = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRING_TRIGGER_ID = "firingTriggerId";
  @SerializedName(SERIALIZED_NAME_FIRING_TRIGGER_ID)
  private List<String> firingTriggerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIVE_ONLY = "liveOnly";
  @SerializedName(SERIALIZED_NAME_LIVE_ONLY)
  private Boolean liveOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private List<Parameter> parameter = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parentFolderId";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Parameter priority;

  public static final String SERIALIZED_NAME_SCHEDULE_END_MS = "scheduleEndMs";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_END_MS)
  private String scheduleEndMs;

  public static final String SERIALIZED_NAME_SCHEDULE_START_MS = "scheduleStartMs";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START_MS)
  private String scheduleStartMs;

  public static final String SERIALIZED_NAME_SETUP_TAG = "setupTag";
  @SerializedName(SERIALIZED_NAME_SETUP_TAG)
  private List<SetupTag> setupTag = new ArrayList<>();

  /**
   * Option to fire this tag.
   */
  @JsonAdapter(TagFiringOptionEnum.Adapter.class)
  public enum TagFiringOptionEnum {
    UNLIMITED("unlimited"),
    
    ONCE_PER_EVENT("oncePerEvent"),
    
    ONCE_PER_LOAD("oncePerLoad");

    private String value;

    TagFiringOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TagFiringOptionEnum fromValue(String value) {
      for (TagFiringOptionEnum b : TagFiringOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TagFiringOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TagFiringOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TagFiringOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TagFiringOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TagFiringOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAG_FIRING_OPTION = "tagFiringOption";
  @SerializedName(SERIALIZED_NAME_TAG_FIRING_OPTION)
  private TagFiringOptionEnum tagFiringOption;

  public static final String SERIALIZED_NAME_TAG_ID = "tagId";
  @SerializedName(SERIALIZED_NAME_TAG_ID)
  private String tagId;

  public static final String SERIALIZED_NAME_TEARDOWN_TAG = "teardownTag";
  @SerializedName(SERIALIZED_NAME_TEARDOWN_TAG)
  private List<TeardownTag> teardownTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Tag() {
  }

  public Tag accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  @Deprecated
  public Tag blockingRuleId(List<String> blockingRuleId) {
    this.blockingRuleId = blockingRuleId;
    return this;
  }

  public Tag addBlockingRuleIdItem(String blockingRuleIdItem) {
    if (this.blockingRuleId == null) {
      this.blockingRuleId = new ArrayList<>();
    }
    this.blockingRuleId.add(blockingRuleIdItem);
    return this;
  }

  /**
   * Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return blockingRuleId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getBlockingRuleId() {
    return blockingRuleId;
  }

  @Deprecated
  public void setBlockingRuleId(List<String> blockingRuleId) {
    this.blockingRuleId = blockingRuleId;
  }


  public Tag blockingTriggerId(List<String> blockingTriggerId) {
    this.blockingTriggerId = blockingTriggerId;
    return this;
  }

  public Tag addBlockingTriggerIdItem(String blockingTriggerIdItem) {
    if (this.blockingTriggerId == null) {
      this.blockingTriggerId = new ArrayList<>();
    }
    this.blockingTriggerId.add(blockingTriggerIdItem);
    return this;
  }

  /**
   * Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return blockingTriggerId
   */
  @javax.annotation.Nullable
  public List<String> getBlockingTriggerId() {
    return blockingTriggerId;
  }

  public void setBlockingTriggerId(List<String> blockingTriggerId) {
    this.blockingTriggerId = blockingTriggerId;
  }


  public Tag containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Tag fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  @Deprecated
  public Tag firingRuleId(List<String> firingRuleId) {
    this.firingRuleId = firingRuleId;
    return this;
  }

  public Tag addFiringRuleIdItem(String firingRuleIdItem) {
    if (this.firingRuleId == null) {
      this.firingRuleId = new ArrayList<>();
    }
    this.firingRuleId.add(firingRuleIdItem);
    return this;
  }

  /**
   * Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return firingRuleId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getFiringRuleId() {
    return firingRuleId;
  }

  @Deprecated
  public void setFiringRuleId(List<String> firingRuleId) {
    this.firingRuleId = firingRuleId;
  }


  public Tag firingTriggerId(List<String> firingTriggerId) {
    this.firingTriggerId = firingTriggerId;
    return this;
  }

  public Tag addFiringTriggerIdItem(String firingTriggerIdItem) {
    if (this.firingTriggerId == null) {
      this.firingTriggerId = new ArrayList<>();
    }
    this.firingTriggerId.add(firingTriggerIdItem);
    return this;
  }

  /**
   * Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return firingTriggerId
   */
  @javax.annotation.Nullable
  public List<String> getFiringTriggerId() {
    return firingTriggerId;
  }

  public void setFiringTriggerId(List<String> firingTriggerId) {
    this.firingTriggerId = firingTriggerId;
  }


  public Tag liveOnly(Boolean liveOnly) {
    this.liveOnly = liveOnly;
    return this;
  }

  /**
   * If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return liveOnly
   */
  @javax.annotation.Nullable
  public Boolean getLiveOnly() {
    return liveOnly;
  }

  public void setLiveOnly(Boolean liveOnly) {
    this.liveOnly = liveOnly;
  }


  public Tag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Tag notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Tag parameter(List<Parameter> parameter) {
    this.parameter = parameter;
    return this;
  }

  public Tag addParameterItem(Parameter parameterItem) {
    if (this.parameter == null) {
      this.parameter = new ArrayList<>();
    }
    this.parameter.add(parameterItem);
    return this;
  }

  /**
   * The tag&#39;s parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return parameter
   */
  @javax.annotation.Nullable
  public List<Parameter> getParameter() {
    return parameter;
  }

  public void setParameter(List<Parameter> parameter) {
    this.parameter = parameter;
  }


  public Tag parentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * Parent folder id.
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public Tag paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

  /**
   * True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return paused
   */
  @javax.annotation.Nullable
  public Boolean getPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public Tag priority(Parameter priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Parameter getPriority() {
    return priority;
  }

  public void setPriority(Parameter priority) {
    this.priority = priority;
  }


  public Tag scheduleEndMs(String scheduleEndMs) {
    this.scheduleEndMs = scheduleEndMs;
    return this;
  }

  /**
   * The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return scheduleEndMs
   */
  @javax.annotation.Nullable
  public String getScheduleEndMs() {
    return scheduleEndMs;
  }

  public void setScheduleEndMs(String scheduleEndMs) {
    this.scheduleEndMs = scheduleEndMs;
  }


  public Tag scheduleStartMs(String scheduleStartMs) {
    this.scheduleStartMs = scheduleStartMs;
    return this;
  }

  /**
   * The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return scheduleStartMs
   */
  @javax.annotation.Nullable
  public String getScheduleStartMs() {
    return scheduleStartMs;
  }

  public void setScheduleStartMs(String scheduleStartMs) {
    this.scheduleStartMs = scheduleStartMs;
  }


  public Tag setupTag(List<SetupTag> setupTag) {
    this.setupTag = setupTag;
    return this;
  }

  public Tag addSetupTagItem(SetupTag setupTagItem) {
    if (this.setupTag == null) {
      this.setupTag = new ArrayList<>();
    }
    this.setupTag.add(setupTagItem);
    return this;
  }

  /**
   * The list of setup tags. Currently we only allow one.
   * @return setupTag
   */
  @javax.annotation.Nullable
  public List<SetupTag> getSetupTag() {
    return setupTag;
  }

  public void setSetupTag(List<SetupTag> setupTag) {
    this.setupTag = setupTag;
  }


  public Tag tagFiringOption(TagFiringOptionEnum tagFiringOption) {
    this.tagFiringOption = tagFiringOption;
    return this;
  }

  /**
   * Option to fire this tag.
   * @return tagFiringOption
   */
  @javax.annotation.Nullable
  public TagFiringOptionEnum getTagFiringOption() {
    return tagFiringOption;
  }

  public void setTagFiringOption(TagFiringOptionEnum tagFiringOption) {
    this.tagFiringOption = tagFiringOption;
  }


  public Tag tagId(String tagId) {
    this.tagId = tagId;
    return this;
  }

  /**
   * The Tag ID uniquely identifies the GTM Tag.
   * @return tagId
   */
  @javax.annotation.Nullable
  public String getTagId() {
    return tagId;
  }

  public void setTagId(String tagId) {
    this.tagId = tagId;
  }


  public Tag teardownTag(List<TeardownTag> teardownTag) {
    this.teardownTag = teardownTag;
    return this;
  }

  public Tag addTeardownTagItem(TeardownTag teardownTagItem) {
    if (this.teardownTag == null) {
      this.teardownTag = new ArrayList<>();
    }
    this.teardownTag.add(teardownTagItem);
    return this;
  }

  /**
   * The list of teardown tags. Currently we only allow one.
   * @return teardownTag
   */
  @javax.annotation.Nullable
  public List<TeardownTag> getTeardownTag() {
    return teardownTag;
  }

  public void setTeardownTag(List<TeardownTag> teardownTag) {
    this.teardownTag = teardownTag;
  }


  public Tag type(String type) {
    this.type = type;
    return this;
  }

  /**
   * GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tag tag = (Tag) o;
    return Objects.equals(this.accountId, tag.accountId) &&
        Objects.equals(this.blockingRuleId, tag.blockingRuleId) &&
        Objects.equals(this.blockingTriggerId, tag.blockingTriggerId) &&
        Objects.equals(this.containerId, tag.containerId) &&
        Objects.equals(this.fingerprint, tag.fingerprint) &&
        Objects.equals(this.firingRuleId, tag.firingRuleId) &&
        Objects.equals(this.firingTriggerId, tag.firingTriggerId) &&
        Objects.equals(this.liveOnly, tag.liveOnly) &&
        Objects.equals(this.name, tag.name) &&
        Objects.equals(this.notes, tag.notes) &&
        Objects.equals(this.parameter, tag.parameter) &&
        Objects.equals(this.parentFolderId, tag.parentFolderId) &&
        Objects.equals(this.paused, tag.paused) &&
        Objects.equals(this.priority, tag.priority) &&
        Objects.equals(this.scheduleEndMs, tag.scheduleEndMs) &&
        Objects.equals(this.scheduleStartMs, tag.scheduleStartMs) &&
        Objects.equals(this.setupTag, tag.setupTag) &&
        Objects.equals(this.tagFiringOption, tag.tagFiringOption) &&
        Objects.equals(this.tagId, tag.tagId) &&
        Objects.equals(this.teardownTag, tag.teardownTag) &&
        Objects.equals(this.type, tag.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, blockingRuleId, blockingTriggerId, containerId, fingerprint, firingRuleId, firingTriggerId, liveOnly, name, notes, parameter, parentFolderId, paused, priority, scheduleEndMs, scheduleStartMs, setupTag, tagFiringOption, tagId, teardownTag, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tag {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    blockingRuleId: ").append(toIndentedString(blockingRuleId)).append("\n");
    sb.append("    blockingTriggerId: ").append(toIndentedString(blockingTriggerId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    firingRuleId: ").append(toIndentedString(firingRuleId)).append("\n");
    sb.append("    firingTriggerId: ").append(toIndentedString(firingTriggerId)).append("\n");
    sb.append("    liveOnly: ").append(toIndentedString(liveOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    scheduleEndMs: ").append(toIndentedString(scheduleEndMs)).append("\n");
    sb.append("    scheduleStartMs: ").append(toIndentedString(scheduleStartMs)).append("\n");
    sb.append("    setupTag: ").append(toIndentedString(setupTag)).append("\n");
    sb.append("    tagFiringOption: ").append(toIndentedString(tagFiringOption)).append("\n");
    sb.append("    tagId: ").append(toIndentedString(tagId)).append("\n");
    sb.append("    teardownTag: ").append(toIndentedString(teardownTag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("blockingRuleId");
    openapiFields.add("blockingTriggerId");
    openapiFields.add("containerId");
    openapiFields.add("fingerprint");
    openapiFields.add("firingRuleId");
    openapiFields.add("firingTriggerId");
    openapiFields.add("liveOnly");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("parameter");
    openapiFields.add("parentFolderId");
    openapiFields.add("paused");
    openapiFields.add("priority");
    openapiFields.add("scheduleEndMs");
    openapiFields.add("scheduleStartMs");
    openapiFields.add("setupTag");
    openapiFields.add("tagFiringOption");
    openapiFields.add("tagId");
    openapiFields.add("teardownTag");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tag is not found in the empty JSON string", Tag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockingRuleId") != null && !jsonObj.get("blockingRuleId").isJsonNull() && !jsonObj.get("blockingRuleId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingRuleId` to be an array in the JSON string but got `%s`", jsonObj.get("blockingRuleId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockingTriggerId") != null && !jsonObj.get("blockingTriggerId").isJsonNull() && !jsonObj.get("blockingTriggerId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockingTriggerId` to be an array in the JSON string but got `%s`", jsonObj.get("blockingTriggerId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("firingRuleId") != null && !jsonObj.get("firingRuleId").isJsonNull() && !jsonObj.get("firingRuleId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `firingRuleId` to be an array in the JSON string but got `%s`", jsonObj.get("firingRuleId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("firingTriggerId") != null && !jsonObj.get("firingTriggerId").isJsonNull() && !jsonObj.get("firingTriggerId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `firingTriggerId` to be an array in the JSON string but got `%s`", jsonObj.get("firingTriggerId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) {
        JsonArray jsonArrayparameter = jsonObj.getAsJsonArray("parameter");
        if (jsonArrayparameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameter` to be an array in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
          }

          // validate the optional field `parameter` (array)
          for (int i = 0; i < jsonArrayparameter.size(); i++) {
            Parameter.validateJsonElement(jsonArrayparameter.get(i));
          };
        }
      }
      if ((jsonObj.get("parentFolderId") != null && !jsonObj.get("parentFolderId").isJsonNull()) && !jsonObj.get("parentFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFolderId").toString()));
      }
      // validate the optional field `priority`
      if (jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) {
        Parameter.validateJsonElement(jsonObj.get("priority"));
      }
      if ((jsonObj.get("scheduleEndMs") != null && !jsonObj.get("scheduleEndMs").isJsonNull()) && !jsonObj.get("scheduleEndMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleEndMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleEndMs").toString()));
      }
      if ((jsonObj.get("scheduleStartMs") != null && !jsonObj.get("scheduleStartMs").isJsonNull()) && !jsonObj.get("scheduleStartMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleStartMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleStartMs").toString()));
      }
      if (jsonObj.get("setupTag") != null && !jsonObj.get("setupTag").isJsonNull()) {
        JsonArray jsonArraysetupTag = jsonObj.getAsJsonArray("setupTag");
        if (jsonArraysetupTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("setupTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `setupTag` to be an array in the JSON string but got `%s`", jsonObj.get("setupTag").toString()));
          }

          // validate the optional field `setupTag` (array)
          for (int i = 0; i < jsonArraysetupTag.size(); i++) {
            SetupTag.validateJsonElement(jsonArraysetupTag.get(i));
          };
        }
      }
      if ((jsonObj.get("tagFiringOption") != null && !jsonObj.get("tagFiringOption").isJsonNull()) && !jsonObj.get("tagFiringOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagFiringOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagFiringOption").toString()));
      }
      // validate the optional field `tagFiringOption`
      if (jsonObj.get("tagFiringOption") != null && !jsonObj.get("tagFiringOption").isJsonNull()) {
        TagFiringOptionEnum.validateJsonElement(jsonObj.get("tagFiringOption"));
      }
      if ((jsonObj.get("tagId") != null && !jsonObj.get("tagId").isJsonNull()) && !jsonObj.get("tagId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagId").toString()));
      }
      if (jsonObj.get("teardownTag") != null && !jsonObj.get("teardownTag").isJsonNull()) {
        JsonArray jsonArrayteardownTag = jsonObj.getAsJsonArray("teardownTag");
        if (jsonArrayteardownTag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teardownTag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teardownTag` to be an array in the JSON string but got `%s`", jsonObj.get("teardownTag").toString()));
          }

          // validate the optional field `teardownTag` (array)
          for (int i = 0; i < jsonArrayteardownTag.size(); i++) {
            TeardownTag.validateJsonElement(jsonArrayteardownTag.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tag.class));

       return (TypeAdapter<T>) new TypeAdapter<Tag>() {
           @Override
           public void write(JsonWriter out, Tag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tag
   * @throws IOException if the JSON string is invalid with respect to Tag
   */
  public static Tag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tag.class);
  }

  /**
   * Convert an instance of Tag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

