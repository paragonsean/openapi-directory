/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.Macro;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.Variable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Container Version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:32.046805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerVersion {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Container container;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_CONTAINER_VERSION_ID = "containerVersionId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_VERSION_ID)
  private String containerVersionId;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private List<Folder> folder = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACRO = "macro";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MACRO)
  private List<Macro> macro = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RULE)
  private List<Rule> rule = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<Tag> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private List<Trigger> trigger = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  private List<Variable> variable = new ArrayList<>();

  public ContainerVersion() {
  }

  public ContainerVersion accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public ContainerVersion container(Container container) {
    this.container = container;
    return this;
  }

  /**
   * Get container
   * @return container
   */
  @javax.annotation.Nullable
  public Container getContainer() {
    return container;
  }

  public void setContainer(Container container) {
    this.container = container;
  }


  public ContainerVersion containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public ContainerVersion containerVersionId(String containerVersionId) {
    this.containerVersionId = containerVersionId;
    return this;
  }

  /**
   * The Container Version ID uniquely identifies the GTM Container Version.
   * @return containerVersionId
   */
  @javax.annotation.Nullable
  public String getContainerVersionId() {
    return containerVersionId;
  }

  public void setContainerVersionId(String containerVersionId) {
    this.containerVersionId = containerVersionId;
  }


  public ContainerVersion deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * A value of true indicates this container version has been deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public ContainerVersion fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public ContainerVersion folder(List<Folder> folder) {
    this.folder = folder;
    return this;
  }

  public ContainerVersion addFolderItem(Folder folderItem) {
    if (this.folder == null) {
      this.folder = new ArrayList<>();
    }
    this.folder.add(folderItem);
    return this;
  }

  /**
   * The folders in the container that this version was taken from.
   * @return folder
   */
  @javax.annotation.Nullable
  public List<Folder> getFolder() {
    return folder;
  }

  public void setFolder(List<Folder> folder) {
    this.folder = folder;
  }


  @Deprecated
  public ContainerVersion macro(List<Macro> macro) {
    this.macro = macro;
    return this;
  }

  public ContainerVersion addMacroItem(Macro macroItem) {
    if (this.macro == null) {
      this.macro = new ArrayList<>();
    }
    this.macro.add(macroItem);
    return this;
  }

  /**
   * The macros in the container that this version was taken from.
   * @return macro
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Macro> getMacro() {
    return macro;
  }

  @Deprecated
  public void setMacro(List<Macro> macro) {
    this.macro = macro;
  }


  public ContainerVersion name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Container version display name. @mutable tagmanager.accounts.containers.versions.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerVersion notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  @Deprecated
  public ContainerVersion rule(List<Rule> rule) {
    this.rule = rule;
    return this;
  }

  public ContainerVersion addRuleItem(Rule ruleItem) {
    if (this.rule == null) {
      this.rule = new ArrayList<>();
    }
    this.rule.add(ruleItem);
    return this;
  }

  /**
   * The rules in the container that this version was taken from.
   * @return rule
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Rule> getRule() {
    return rule;
  }

  @Deprecated
  public void setRule(List<Rule> rule) {
    this.rule = rule;
  }


  public ContainerVersion tag(List<Tag> tag) {
    this.tag = tag;
    return this;
  }

  public ContainerVersion addTagItem(Tag tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * The tags in the container that this version was taken from.
   * @return tag
   */
  @javax.annotation.Nullable
  public List<Tag> getTag() {
    return tag;
  }

  public void setTag(List<Tag> tag) {
    this.tag = tag;
  }


  public ContainerVersion trigger(List<Trigger> trigger) {
    this.trigger = trigger;
    return this;
  }

  public ContainerVersion addTriggerItem(Trigger triggerItem) {
    if (this.trigger == null) {
      this.trigger = new ArrayList<>();
    }
    this.trigger.add(triggerItem);
    return this;
  }

  /**
   * The triggers in the container that this version was taken from.
   * @return trigger
   */
  @javax.annotation.Nullable
  public List<Trigger> getTrigger() {
    return trigger;
  }

  public void setTrigger(List<Trigger> trigger) {
    this.trigger = trigger;
  }


  public ContainerVersion variable(List<Variable> variable) {
    this.variable = variable;
    return this;
  }

  public ContainerVersion addVariableItem(Variable variableItem) {
    if (this.variable == null) {
      this.variable = new ArrayList<>();
    }
    this.variable.add(variableItem);
    return this;
  }

  /**
   * The variables in the container that this version was taken from.
   * @return variable
   */
  @javax.annotation.Nullable
  public List<Variable> getVariable() {
    return variable;
  }

  public void setVariable(List<Variable> variable) {
    this.variable = variable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerVersion containerVersion = (ContainerVersion) o;
    return Objects.equals(this.accountId, containerVersion.accountId) &&
        Objects.equals(this.container, containerVersion.container) &&
        Objects.equals(this.containerId, containerVersion.containerId) &&
        Objects.equals(this.containerVersionId, containerVersion.containerVersionId) &&
        Objects.equals(this.deleted, containerVersion.deleted) &&
        Objects.equals(this.fingerprint, containerVersion.fingerprint) &&
        Objects.equals(this.folder, containerVersion.folder) &&
        Objects.equals(this.macro, containerVersion.macro) &&
        Objects.equals(this.name, containerVersion.name) &&
        Objects.equals(this.notes, containerVersion.notes) &&
        Objects.equals(this.rule, containerVersion.rule) &&
        Objects.equals(this.tag, containerVersion.tag) &&
        Objects.equals(this.trigger, containerVersion.trigger) &&
        Objects.equals(this.variable, containerVersion.variable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, container, containerId, containerVersionId, deleted, fingerprint, folder, macro, name, notes, rule, tag, trigger, variable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerVersion {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    containerVersionId: ").append(toIndentedString(containerVersionId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    macro: ").append(toIndentedString(macro)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("container");
    openapiFields.add("containerId");
    openapiFields.add("containerVersionId");
    openapiFields.add("deleted");
    openapiFields.add("fingerprint");
    openapiFields.add("folder");
    openapiFields.add("macro");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("rule");
    openapiFields.add("tag");
    openapiFields.add("trigger");
    openapiFields.add("variable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerVersion is not found in the empty JSON string", ContainerVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        Container.validateJsonElement(jsonObj.get("container"));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      if ((jsonObj.get("containerVersionId") != null && !jsonObj.get("containerVersionId").isJsonNull()) && !jsonObj.get("containerVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerVersionId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if (jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) {
        JsonArray jsonArrayfolder = jsonObj.getAsJsonArray("folder");
        if (jsonArrayfolder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("folder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `folder` to be an array in the JSON string but got `%s`", jsonObj.get("folder").toString()));
          }

          // validate the optional field `folder` (array)
          for (int i = 0; i < jsonArrayfolder.size(); i++) {
            Folder.validateJsonElement(jsonArrayfolder.get(i));
          };
        }
      }
      if (jsonObj.get("macro") != null && !jsonObj.get("macro").isJsonNull()) {
        JsonArray jsonArraymacro = jsonObj.getAsJsonArray("macro");
        if (jsonArraymacro != null) {
          // ensure the json data is an array
          if (!jsonObj.get("macro").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `macro` to be an array in the JSON string but got `%s`", jsonObj.get("macro").toString()));
          }

          // validate the optional field `macro` (array)
          for (int i = 0; i < jsonArraymacro.size(); i++) {
            Macro.validateJsonElement(jsonArraymacro.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        JsonArray jsonArrayrule = jsonObj.getAsJsonArray("rule");
        if (jsonArrayrule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rule` to be an array in the JSON string but got `%s`", jsonObj.get("rule").toString()));
          }

          // validate the optional field `rule` (array)
          for (int i = 0; i < jsonArrayrule.size(); i++) {
            Rule.validateJsonElement(jsonArrayrule.get(i));
          };
        }
      }
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) {
        JsonArray jsonArraytag = jsonObj.getAsJsonArray("tag");
        if (jsonArraytag != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
          }

          // validate the optional field `tag` (array)
          for (int i = 0; i < jsonArraytag.size(); i++) {
            Tag.validateJsonElement(jsonArraytag.get(i));
          };
        }
      }
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        JsonArray jsonArraytrigger = jsonObj.getAsJsonArray("trigger");
        if (jsonArraytrigger != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trigger").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trigger` to be an array in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
          }

          // validate the optional field `trigger` (array)
          for (int i = 0; i < jsonArraytrigger.size(); i++) {
            Trigger.validateJsonElement(jsonArraytrigger.get(i));
          };
        }
      }
      if (jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) {
        JsonArray jsonArrayvariable = jsonObj.getAsJsonArray("variable");
        if (jsonArrayvariable != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variable").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variable` to be an array in the JSON string but got `%s`", jsonObj.get("variable").toString()));
          }

          // validate the optional field `variable` (array)
          for (int i = 0; i < jsonArrayvariable.size(); i++) {
            Variable.validateJsonElement(jsonArrayvariable.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerVersion>() {
           @Override
           public void write(JsonWriter out, ContainerVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerVersion
   * @throws IOException if the JSON string is invalid with respect to ContainerVersion
   */
  public static ContainerVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerVersion.class);
  }

  /**
   * Convert an instance of ContainerVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

