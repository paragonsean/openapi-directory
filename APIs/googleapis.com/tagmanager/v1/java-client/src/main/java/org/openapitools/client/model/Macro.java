/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Parameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Google Tag Manager Macro.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:32.046805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Macro {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CONTAINER_ID = "containerId";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_DISABLING_RULE_ID = "disablingRuleId";
  @SerializedName(SERIALIZED_NAME_DISABLING_RULE_ID)
  private List<String> disablingRuleId = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLING_RULE_ID = "enablingRuleId";
  @SerializedName(SERIALIZED_NAME_ENABLING_RULE_ID)
  private List<String> enablingRuleId = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_MACRO_ID = "macroId";
  @SerializedName(SERIALIZED_NAME_MACRO_ID)
  private String macroId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private List<Parameter> parameter = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_FOLDER_ID = "parentFolderId";
  @SerializedName(SERIALIZED_NAME_PARENT_FOLDER_ID)
  private String parentFolderId;

  public static final String SERIALIZED_NAME_SCHEDULE_END_MS = "scheduleEndMs";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_END_MS)
  private String scheduleEndMs;

  public static final String SERIALIZED_NAME_SCHEDULE_START_MS = "scheduleStartMs";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START_MS)
  private String scheduleStartMs;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Macro() {
  }

  public Macro accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * GTM Account ID.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Macro containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

  /**
   * GTM Container ID.
   * @return containerId
   */
  @javax.annotation.Nullable
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Macro disablingRuleId(List<String> disablingRuleId) {
    this.disablingRuleId = disablingRuleId;
    return this;
  }

  public Macro addDisablingRuleIdItem(String disablingRuleIdItem) {
    if (this.disablingRuleId == null) {
      this.disablingRuleId = new ArrayList<>();
    }
    this.disablingRuleId.add(disablingRuleIdItem);
    return this;
  }

  /**
   * For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return disablingRuleId
   */
  @javax.annotation.Nullable
  public List<String> getDisablingRuleId() {
    return disablingRuleId;
  }

  public void setDisablingRuleId(List<String> disablingRuleId) {
    this.disablingRuleId = disablingRuleId;
  }


  public Macro enablingRuleId(List<String> enablingRuleId) {
    this.enablingRuleId = enablingRuleId;
    return this;
  }

  public Macro addEnablingRuleIdItem(String enablingRuleIdItem) {
    if (this.enablingRuleId == null) {
      this.enablingRuleId = new ArrayList<>();
    }
    this.enablingRuleId.add(enablingRuleIdItem);
    return this;
  }

  /**
   * For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return enablingRuleId
   */
  @javax.annotation.Nullable
  public List<String> getEnablingRuleId() {
    return enablingRuleId;
  }

  public void setEnablingRuleId(List<String> enablingRuleId) {
    this.enablingRuleId = enablingRuleId;
  }


  public Macro fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public Macro macroId(String macroId) {
    this.macroId = macroId;
    return this;
  }

  /**
   * The Macro ID uniquely identifies the GTM Macro.
   * @return macroId
   */
  @javax.annotation.Nullable
  public String getMacroId() {
    return macroId;
  }

  public void setMacroId(String macroId) {
    this.macroId = macroId;
  }


  public Macro name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Macro notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Macro parameter(List<Parameter> parameter) {
    this.parameter = parameter;
    return this;
  }

  public Macro addParameterItem(Parameter parameterItem) {
    if (this.parameter == null) {
      this.parameter = new ArrayList<>();
    }
    this.parameter.add(parameterItem);
    return this;
  }

  /**
   * The macro&#39;s parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return parameter
   */
  @javax.annotation.Nullable
  public List<Parameter> getParameter() {
    return parameter;
  }

  public void setParameter(List<Parameter> parameter) {
    this.parameter = parameter;
  }


  public Macro parentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
    return this;
  }

  /**
   * Parent folder id.
   * @return parentFolderId
   */
  @javax.annotation.Nullable
  public String getParentFolderId() {
    return parentFolderId;
  }

  public void setParentFolderId(String parentFolderId) {
    this.parentFolderId = parentFolderId;
  }


  public Macro scheduleEndMs(String scheduleEndMs) {
    this.scheduleEndMs = scheduleEndMs;
    return this;
  }

  /**
   * The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return scheduleEndMs
   */
  @javax.annotation.Nullable
  public String getScheduleEndMs() {
    return scheduleEndMs;
  }

  public void setScheduleEndMs(String scheduleEndMs) {
    this.scheduleEndMs = scheduleEndMs;
  }


  public Macro scheduleStartMs(String scheduleStartMs) {
    this.scheduleStartMs = scheduleStartMs;
    return this;
  }

  /**
   * The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return scheduleStartMs
   */
  @javax.annotation.Nullable
  public String getScheduleStartMs() {
    return scheduleStartMs;
  }

  public void setScheduleStartMs(String scheduleStartMs) {
    this.scheduleStartMs = scheduleStartMs;
  }


  public Macro type(String type) {
    this.type = type;
    return this;
  }

  /**
   * GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Macro macro = (Macro) o;
    return Objects.equals(this.accountId, macro.accountId) &&
        Objects.equals(this.containerId, macro.containerId) &&
        Objects.equals(this.disablingRuleId, macro.disablingRuleId) &&
        Objects.equals(this.enablingRuleId, macro.enablingRuleId) &&
        Objects.equals(this.fingerprint, macro.fingerprint) &&
        Objects.equals(this.macroId, macro.macroId) &&
        Objects.equals(this.name, macro.name) &&
        Objects.equals(this.notes, macro.notes) &&
        Objects.equals(this.parameter, macro.parameter) &&
        Objects.equals(this.parentFolderId, macro.parentFolderId) &&
        Objects.equals(this.scheduleEndMs, macro.scheduleEndMs) &&
        Objects.equals(this.scheduleStartMs, macro.scheduleStartMs) &&
        Objects.equals(this.type, macro.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, containerId, disablingRuleId, enablingRuleId, fingerprint, macroId, name, notes, parameter, parentFolderId, scheduleEndMs, scheduleStartMs, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Macro {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    disablingRuleId: ").append(toIndentedString(disablingRuleId)).append("\n");
    sb.append("    enablingRuleId: ").append(toIndentedString(enablingRuleId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    macroId: ").append(toIndentedString(macroId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    parentFolderId: ").append(toIndentedString(parentFolderId)).append("\n");
    sb.append("    scheduleEndMs: ").append(toIndentedString(scheduleEndMs)).append("\n");
    sb.append("    scheduleStartMs: ").append(toIndentedString(scheduleStartMs)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("containerId");
    openapiFields.add("disablingRuleId");
    openapiFields.add("enablingRuleId");
    openapiFields.add("fingerprint");
    openapiFields.add("macroId");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("parameter");
    openapiFields.add("parentFolderId");
    openapiFields.add("scheduleEndMs");
    openapiFields.add("scheduleStartMs");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Macro
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Macro.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Macro is not found in the empty JSON string", Macro.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Macro.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Macro` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("containerId") != null && !jsonObj.get("containerId").isJsonNull()) && !jsonObj.get("containerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disablingRuleId") != null && !jsonObj.get("disablingRuleId").isJsonNull() && !jsonObj.get("disablingRuleId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disablingRuleId` to be an array in the JSON string but got `%s`", jsonObj.get("disablingRuleId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enablingRuleId") != null && !jsonObj.get("enablingRuleId").isJsonNull() && !jsonObj.get("enablingRuleId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enablingRuleId` to be an array in the JSON string but got `%s`", jsonObj.get("enablingRuleId").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("macroId") != null && !jsonObj.get("macroId").isJsonNull()) && !jsonObj.get("macroId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macroId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macroId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) {
        JsonArray jsonArrayparameter = jsonObj.getAsJsonArray("parameter");
        if (jsonArrayparameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameter` to be an array in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
          }

          // validate the optional field `parameter` (array)
          for (int i = 0; i < jsonArrayparameter.size(); i++) {
            Parameter.validateJsonElement(jsonArrayparameter.get(i));
          };
        }
      }
      if ((jsonObj.get("parentFolderId") != null && !jsonObj.get("parentFolderId").isJsonNull()) && !jsonObj.get("parentFolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentFolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentFolderId").toString()));
      }
      if ((jsonObj.get("scheduleEndMs") != null && !jsonObj.get("scheduleEndMs").isJsonNull()) && !jsonObj.get("scheduleEndMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleEndMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleEndMs").toString()));
      }
      if ((jsonObj.get("scheduleStartMs") != null && !jsonObj.get("scheduleStartMs").isJsonNull()) && !jsonObj.get("scheduleStartMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleStartMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleStartMs").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Macro.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Macro' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Macro> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Macro.class));

       return (TypeAdapter<T>) new TypeAdapter<Macro>() {
           @Override
           public void write(JsonWriter out, Macro value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Macro read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Macro given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Macro
   * @throws IOException if the JSON string is invalid with respect to Macro
   */
  public static Macro fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Macro.class);
  }

  /**
   * Convert an instance of Macro to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

