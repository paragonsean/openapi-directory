/*
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainerVersion;
import org.openapitools.client.model.CreateContainerVersionRequestVersionOptions;
import org.openapitools.client.model.CreateContainerVersionResponse;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.FolderEntities;
import org.openapitools.client.model.ListAccountUsersResponse;
import org.openapitools.client.model.ListAccountsResponse;
import org.openapitools.client.model.ListContainerVersionsResponse;
import org.openapitools.client.model.ListContainersResponse;
import org.openapitools.client.model.ListEnvironmentsResponse;
import org.openapitools.client.model.ListFoldersResponse;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListTriggersResponse;
import org.openapitools.client.model.ListVariablesResponse;
import org.openapitools.client.model.PublishContainerVersionResponse;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.UserAccess;
import org.openapitools.client.model.Variable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Creates a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Container container = null;
        Container response = api.tagmanagerAccountsContainersCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, container);
        // TODO: test validations
    }

    /**
     * Deletes a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersDelete(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment environment = null;
        Environment response = api.tagmanagerAccountsContainersEnvironmentsCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, environment);
        // TODO: test validations
    }

    /**
     * Deletes a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String environmentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersEnvironmentsDelete(accountId, containerId, environmentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String environmentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment response = api.tagmanagerAccountsContainersEnvironmentsGet(accountId, containerId, environmentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Environments of a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListEnvironmentsResponse response = api.tagmanagerAccountsContainersEnvironmentsList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersEnvironmentsUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String environmentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Environment environment = null;
        Environment response = api.tagmanagerAccountsContainersEnvironmentsUpdate(accountId, containerId, environmentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, environment);
        // TODO: test validations
    }

    /**
     * Creates a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Folder folder = null;
        Folder response = api.tagmanagerAccountsContainersFoldersCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, folder);
        // TODO: test validations
    }

    /**
     * Deletes a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String folderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersFoldersDelete(accountId, containerId, folderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all entities in a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersEntitiesListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String folderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FolderEntities response = api.tagmanagerAccountsContainersFoldersEntitiesList(accountId, containerId, folderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String folderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Folder response = api.tagmanagerAccountsContainersFoldersGet(accountId, containerId, folderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Folders of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListFoldersResponse response = api.tagmanagerAccountsContainersFoldersList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersFoldersUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String folderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Folder folder = null;
        Folder response = api.tagmanagerAccountsContainersFoldersUpdate(accountId, containerId, folderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, folder);
        // TODO: test validations
    }

    /**
     * Gets a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Container response = api.tagmanagerAccountsContainersGet(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all Containers that belongs to a GTM Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListContainersResponse response = api.tagmanagerAccountsContainersList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Moves entities to a GTM Folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersMoveFoldersUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String folderId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> tagId = null;
        List<String> triggerId = null;
        List<String> variableId = null;
        Folder folder = null;
        api.tagmanagerAccountsContainersMoveFoldersUpdate(accountId, containerId, folderId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tagId, triggerId, variableId, folder);
        // TODO: test validations
    }

    /**
     * Re-generates the authorization code for a GTM Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersReauthorizeEnvironmentsUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String environmentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment environment = null;
        Environment response = api.tagmanagerAccountsContainersReauthorizeEnvironmentsUpdate(accountId, containerId, environmentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, environment);
        // TODO: test validations
    }

    /**
     * Creates a GTM Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTagsCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Tag tag = null;
        Tag response = api.tagmanagerAccountsContainersTagsCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, tag);
        // TODO: test validations
    }

    /**
     * Deletes a GTM Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTagsDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String tagId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersTagsDelete(accountId, containerId, tagId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a GTM Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTagsGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String tagId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Tag response = api.tagmanagerAccountsContainersTagsGet(accountId, containerId, tagId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Tags of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTagsListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListTagsResponse response = api.tagmanagerAccountsContainersTagsList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a GTM Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTagsUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String tagId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Tag tag = null;
        Tag response = api.tagmanagerAccountsContainersTagsUpdate(accountId, containerId, tagId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, tag);
        // TODO: test validations
    }

    /**
     * Creates a GTM Trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTriggersCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Trigger trigger = null;
        Trigger response = api.tagmanagerAccountsContainersTriggersCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, trigger);
        // TODO: test validations
    }

    /**
     * Deletes a GTM Trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTriggersDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersTriggersDelete(accountId, containerId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a GTM Trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTriggersGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Trigger response = api.tagmanagerAccountsContainersTriggersGet(accountId, containerId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Triggers of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTriggersListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListTriggersResponse response = api.tagmanagerAccountsContainersTriggersList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a GTM Trigger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersTriggersUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String triggerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Trigger trigger = null;
        Trigger response = api.tagmanagerAccountsContainersTriggersUpdate(accountId, containerId, triggerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, trigger);
        // TODO: test validations
    }

    /**
     * Updates a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Container container = null;
        Container response = api.tagmanagerAccountsContainersUpdate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, container);
        // TODO: test validations
    }

    /**
     * Creates a GTM Variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVariablesCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Variable variable = null;
        Variable response = api.tagmanagerAccountsContainersVariablesCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, variable);
        // TODO: test validations
    }

    /**
     * Deletes a GTM Variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVariablesDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String variableId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersVariablesDelete(accountId, containerId, variableId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a GTM Variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVariablesGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String variableId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Variable response = api.tagmanagerAccountsContainersVariablesGet(accountId, containerId, variableId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Variables of a Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVariablesListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListVariablesResponse response = api.tagmanagerAccountsContainersVariablesList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a GTM Variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVariablesUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String variableId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Variable variable = null;
        Variable response = api.tagmanagerAccountsContainersVariablesUpdate(accountId, containerId, variableId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, variable);
        // TODO: test validations
    }

    /**
     * Creates a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsCreateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateContainerVersionRequestVersionOptions createContainerVersionRequestVersionOptions = null;
        CreateContainerVersionResponse response = api.tagmanagerAccountsContainersVersionsCreate(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createContainerVersionRequestVersionOptions);
        // TODO: test validations
    }

    /**
     * Deletes a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsDeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsContainersVersionsDelete(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsGetTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsGet(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all Container Versions of a GTM Container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsListTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean headers = null;
        Boolean includeDeleted = null;
        ListContainerVersionsResponse response = api.tagmanagerAccountsContainersVersionsList(accountId, containerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, headers, includeDeleted);
        // TODO: test validations
    }

    /**
     * Publishes a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsPublishTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        PublishContainerVersionResponse response = api.tagmanagerAccountsContainersVersionsPublish(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint);
        // TODO: test validations
    }

    /**
     * Restores a Container Version. This will overwrite the container&#39;s current configuration (including its variables, triggers and tags). The operation will not have any effect on the version that is being served (i.e. the published version).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsRestoreTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsRestore(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Undeletes a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsUndeleteTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsUndelete(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a Container Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsContainersVersionsUpdateTest() throws ApiException {
        String accountId = null;
        String containerId = null;
        String containerVersionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        ContainerVersion containerVersion = null;
        ContainerVersion response = api.tagmanagerAccountsContainersVersionsUpdate(accountId, containerId, containerVersionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, containerVersion);
        // TODO: test validations
    }

    /**
     * Gets a GTM Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsGetTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Account response = api.tagmanagerAccountsGet(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all GTM Accounts that a user has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListAccountsResponse response = api.tagmanagerAccountsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a user&#39;s Account &amp; Container Permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsPermissionsCreateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserAccess userAccess = null;
        UserAccess response = api.tagmanagerAccountsPermissionsCreate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userAccess);
        // TODO: test validations
    }

    /**
     * Removes a user from the account, revoking access to it and all of its containers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsPermissionsDeleteTest() throws ApiException {
        String accountId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tagmanagerAccountsPermissionsDelete(accountId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a user&#39;s Account &amp; Container Permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsPermissionsGetTest() throws ApiException {
        String accountId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserAccess response = api.tagmanagerAccountsPermissionsGet(accountId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List all users that have access to the account along with Account and Container Permissions granted to each of them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsPermissionsListTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListAccountUsersResponse response = api.tagmanagerAccountsPermissionsList(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s Account &amp; Container Permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsPermissionsUpdateTest() throws ApiException {
        String accountId = null;
        String permissionId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserAccess userAccess = null;
        UserAccess response = api.tagmanagerAccountsPermissionsUpdate(accountId, permissionId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userAccess);
        // TODO: test validations
    }

    /**
     * Updates a GTM Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagmanagerAccountsUpdateTest() throws ApiException {
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String fingerprint = null;
        Account account = null;
        Account response = api.tagmanagerAccountsUpdate(accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fingerprint, account);
        // TODO: test validations
    }

}
