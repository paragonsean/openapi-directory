/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerAccess model module.
 * @module model/ContainerAccess
 * @version v1
 */
class ContainerAccess {
    /**
     * Constructs a new <code>ContainerAccess</code>.
     * Defines the Google Tag Manager Container access permissions.
     * @alias module:model/ContainerAccess
     */
    constructor() { 
        
        ContainerAccess.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerAccess</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerAccess} obj Optional instance to populate.
     * @return {module:model/ContainerAccess} The populated <code>ContainerAccess</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerAccess();

            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerAccess</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerAccess</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permission'])) {
            throw new Error("Expected the field `permission` to be an array in the JSON data but got " + data['permission']);
        }

        return true;
    }


}



/**
 * GTM Container ID. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
 * @member {String} containerId
 */
ContainerAccess.prototype['containerId'] = undefined;

/**
 * List of Container permissions. Valid container permissions are: read, edit, delete, publish. @mutable tagmanager.accounts.permissions.create @mutable tagmanager.accounts.permissions.update
 * @member {Array.<module:model/ContainerAccess.PermissionEnum>} permission
 */
ContainerAccess.prototype['permission'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
ContainerAccess['PermissionEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "edit"
     * @const
     */
    "edit": "edit",

    /**
     * value: "publish"
     * @const
     */
    "publish": "publish",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "manage"
     * @const
     */
    "manage": "manage",

    /**
     * value: "editWorkspace"
     * @const
     */
    "editWorkspace": "editWorkspace"
};



export default ContainerAccess;

