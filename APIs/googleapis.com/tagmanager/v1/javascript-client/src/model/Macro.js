/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';

/**
 * The Macro model module.
 * @module model/Macro
 * @version v1
 */
class Macro {
    /**
     * Constructs a new <code>Macro</code>.
     * Represents a Google Tag Manager Macro.
     * @alias module:model/Macro
     */
    constructor() { 
        
        Macro.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Macro</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Macro} obj Optional instance to populate.
     * @return {module:model/Macro} The populated <code>Macro</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Macro();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('disablingRuleId')) {
                obj['disablingRuleId'] = ApiClient.convertToType(data['disablingRuleId'], ['String']);
            }
            if (data.hasOwnProperty('enablingRuleId')) {
                obj['enablingRuleId'] = ApiClient.convertToType(data['enablingRuleId'], ['String']);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('macroId')) {
                obj['macroId'] = ApiClient.convertToType(data['macroId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], [Parameter]);
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('scheduleEndMs')) {
                obj['scheduleEndMs'] = ApiClient.convertToType(data['scheduleEndMs'], 'String');
            }
            if (data.hasOwnProperty('scheduleStartMs')) {
                obj['scheduleStartMs'] = ApiClient.convertToType(data['scheduleStartMs'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Macro</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Macro</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['disablingRuleId'])) {
            throw new Error("Expected the field `disablingRuleId` to be an array in the JSON data but got " + data['disablingRuleId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enablingRuleId'])) {
            throw new Error("Expected the field `enablingRuleId` to be an array in the JSON data but got " + data['enablingRuleId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['macroId'] && !(typeof data['macroId'] === 'string' || data['macroId'] instanceof String)) {
            throw new Error("Expected the field `macroId` to be a primitive type in the JSON string but got " + data['macroId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['parameter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter'])) {
                throw new Error("Expected the field `parameter` to be an array in the JSON data but got " + data['parameter']);
            }
            // validate the optional field `parameter` (array)
            for (const item of data['parameter']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // ensure the json data is a string
        if (data['scheduleEndMs'] && !(typeof data['scheduleEndMs'] === 'string' || data['scheduleEndMs'] instanceof String)) {
            throw new Error("Expected the field `scheduleEndMs` to be a primitive type in the JSON string but got " + data['scheduleEndMs']);
        }
        // ensure the json data is a string
        if (data['scheduleStartMs'] && !(typeof data['scheduleStartMs'] === 'string' || data['scheduleStartMs'] instanceof String)) {
            throw new Error("Expected the field `scheduleStartMs` to be a primitive type in the JSON string but got " + data['scheduleStartMs']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Macro.prototype['accountId'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
Macro.prototype['containerId'] = undefined;

/**
 * For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {Array.<String>} disablingRuleId
 */
Macro.prototype['disablingRuleId'] = undefined;

/**
 * For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {Array.<String>} enablingRuleId
 */
Macro.prototype['enablingRuleId'] = undefined;

/**
 * The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.
 * @member {String} fingerprint
 */
Macro.prototype['fingerprint'] = undefined;

/**
 * The Macro ID uniquely identifies the GTM Macro.
 * @member {String} macroId
 */
Macro.prototype['macroId'] = undefined;

/**
 * Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {String} name
 */
Macro.prototype['name'] = undefined;

/**
 * User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {String} notes
 */
Macro.prototype['notes'] = undefined;

/**
 * The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {Array.<module:model/Parameter>} parameter
 */
Macro.prototype['parameter'] = undefined;

/**
 * Parent folder id.
 * @member {String} parentFolderId
 */
Macro.prototype['parentFolderId'] = undefined;

/**
 * The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {String} scheduleEndMs
 */
Macro.prototype['scheduleEndMs'] = undefined;

/**
 * The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {String} scheduleStartMs
 */
Macro.prototype['scheduleStartMs'] = undefined;

/**
 * GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
 * @member {String} type
 */
Macro.prototype['type'] = undefined;






export default Macro;

