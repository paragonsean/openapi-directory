/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SetupTag model module.
 * @module model/SetupTag
 * @version v1
 */
class SetupTag {
    /**
     * Constructs a new <code>SetupTag</code>.
     * @alias module:model/SetupTag
     */
    constructor() { 
        
        SetupTag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SetupTag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetupTag} obj Optional instance to populate.
     * @return {module:model/SetupTag} The populated <code>SetupTag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetupTag();

            if (data.hasOwnProperty('stopOnSetupFailure')) {
                obj['stopOnSetupFailure'] = ApiClient.convertToType(data['stopOnSetupFailure'], 'Boolean');
            }
            if (data.hasOwnProperty('tagName')) {
                obj['tagName'] = ApiClient.convertToType(data['tagName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetupTag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetupTag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tagName'] && !(typeof data['tagName'] === 'string' || data['tagName'] instanceof String)) {
            throw new Error("Expected the field `tagName` to be a primitive type in the JSON string but got " + data['tagName']);
        }

        return true;
    }


}



/**
 * If true, fire the main tag if and only if the setup tag fires successfully. If false, fire the main tag regardless of setup tag firing status.
 * @member {Boolean} stopOnSetupFailure
 */
SetupTag.prototype['stopOnSetupFailure'] = undefined;

/**
 * The name of the setup tag.
 * @member {String} tagName
 */
SetupTag.prototype['tagName'] = undefined;






export default SetupTag;

