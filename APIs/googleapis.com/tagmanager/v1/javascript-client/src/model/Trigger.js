/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Condition from './Condition';
import Parameter from './Parameter';

/**
 * The Trigger model module.
 * @module model/Trigger
 * @version v1
 */
class Trigger {
    /**
     * Constructs a new <code>Trigger</code>.
     * Represents a Google Tag Manager Trigger
     * @alias module:model/Trigger
     */
    constructor() { 
        
        Trigger.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Trigger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trigger} obj Optional instance to populate.
     * @return {module:model/Trigger} The populated <code>Trigger</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trigger();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('autoEventFilter')) {
                obj['autoEventFilter'] = ApiClient.convertToType(data['autoEventFilter'], [Condition]);
            }
            if (data.hasOwnProperty('checkValidation')) {
                obj['checkValidation'] = Parameter.constructFromObject(data['checkValidation']);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('continuousTimeMinMilliseconds')) {
                obj['continuousTimeMinMilliseconds'] = Parameter.constructFromObject(data['continuousTimeMinMilliseconds']);
            }
            if (data.hasOwnProperty('customEventFilter')) {
                obj['customEventFilter'] = ApiClient.convertToType(data['customEventFilter'], [Condition]);
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = Parameter.constructFromObject(data['eventName']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], [Condition]);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('horizontalScrollPercentageList')) {
                obj['horizontalScrollPercentageList'] = Parameter.constructFromObject(data['horizontalScrollPercentageList']);
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = Parameter.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('intervalSeconds')) {
                obj['intervalSeconds'] = Parameter.constructFromObject(data['intervalSeconds']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = Parameter.constructFromObject(data['limit']);
            }
            if (data.hasOwnProperty('maxTimerLengthSeconds')) {
                obj['maxTimerLengthSeconds'] = Parameter.constructFromObject(data['maxTimerLengthSeconds']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], [Parameter]);
            }
            if (data.hasOwnProperty('parentFolderId')) {
                obj['parentFolderId'] = ApiClient.convertToType(data['parentFolderId'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = Parameter.constructFromObject(data['selector']);
            }
            if (data.hasOwnProperty('totalTimeMinMilliseconds')) {
                obj['totalTimeMinMilliseconds'] = Parameter.constructFromObject(data['totalTimeMinMilliseconds']);
            }
            if (data.hasOwnProperty('triggerId')) {
                obj['triggerId'] = ApiClient.convertToType(data['triggerId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uniqueTriggerId')) {
                obj['uniqueTriggerId'] = Parameter.constructFromObject(data['uniqueTriggerId']);
            }
            if (data.hasOwnProperty('verticalScrollPercentageList')) {
                obj['verticalScrollPercentageList'] = Parameter.constructFromObject(data['verticalScrollPercentageList']);
            }
            if (data.hasOwnProperty('visibilitySelector')) {
                obj['visibilitySelector'] = Parameter.constructFromObject(data['visibilitySelector']);
            }
            if (data.hasOwnProperty('visiblePercentageMax')) {
                obj['visiblePercentageMax'] = Parameter.constructFromObject(data['visiblePercentageMax']);
            }
            if (data.hasOwnProperty('visiblePercentageMin')) {
                obj['visiblePercentageMin'] = Parameter.constructFromObject(data['visiblePercentageMin']);
            }
            if (data.hasOwnProperty('waitForTags')) {
                obj['waitForTags'] = Parameter.constructFromObject(data['waitForTags']);
            }
            if (data.hasOwnProperty('waitForTagsTimeout')) {
                obj['waitForTagsTimeout'] = Parameter.constructFromObject(data['waitForTagsTimeout']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trigger</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trigger</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        if (data['autoEventFilter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['autoEventFilter'])) {
                throw new Error("Expected the field `autoEventFilter` to be an array in the JSON data but got " + data['autoEventFilter']);
            }
            // validate the optional field `autoEventFilter` (array)
            for (const item of data['autoEventFilter']) {
                Condition.validateJSON(item);
            };
        }
        // validate the optional field `checkValidation`
        if (data['checkValidation']) { // data not null
          Parameter.validateJSON(data['checkValidation']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // validate the optional field `continuousTimeMinMilliseconds`
        if (data['continuousTimeMinMilliseconds']) { // data not null
          Parameter.validateJSON(data['continuousTimeMinMilliseconds']);
        }
        if (data['customEventFilter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customEventFilter'])) {
                throw new Error("Expected the field `customEventFilter` to be an array in the JSON data but got " + data['customEventFilter']);
            }
            // validate the optional field `customEventFilter` (array)
            for (const item of data['customEventFilter']) {
                Condition.validateJSON(item);
            };
        }
        // validate the optional field `eventName`
        if (data['eventName']) { // data not null
          Parameter.validateJSON(data['eventName']);
        }
        if (data['filter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filter'])) {
                throw new Error("Expected the field `filter` to be an array in the JSON data but got " + data['filter']);
            }
            // validate the optional field `filter` (array)
            for (const item of data['filter']) {
                Condition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // validate the optional field `horizontalScrollPercentageList`
        if (data['horizontalScrollPercentageList']) { // data not null
          Parameter.validateJSON(data['horizontalScrollPercentageList']);
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          Parameter.validateJSON(data['interval']);
        }
        // validate the optional field `intervalSeconds`
        if (data['intervalSeconds']) { // data not null
          Parameter.validateJSON(data['intervalSeconds']);
        }
        // validate the optional field `limit`
        if (data['limit']) { // data not null
          Parameter.validateJSON(data['limit']);
        }
        // validate the optional field `maxTimerLengthSeconds`
        if (data['maxTimerLengthSeconds']) { // data not null
          Parameter.validateJSON(data['maxTimerLengthSeconds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter'])) {
                throw new Error("Expected the field `parameter` to be an array in the JSON data but got " + data['parameter']);
            }
            // validate the optional field `parameter` (array)
            for (const item of data['parameter']) {
                Parameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['parentFolderId'] && !(typeof data['parentFolderId'] === 'string' || data['parentFolderId'] instanceof String)) {
            throw new Error("Expected the field `parentFolderId` to be a primitive type in the JSON string but got " + data['parentFolderId']);
        }
        // validate the optional field `selector`
        if (data['selector']) { // data not null
          Parameter.validateJSON(data['selector']);
        }
        // validate the optional field `totalTimeMinMilliseconds`
        if (data['totalTimeMinMilliseconds']) { // data not null
          Parameter.validateJSON(data['totalTimeMinMilliseconds']);
        }
        // ensure the json data is a string
        if (data['triggerId'] && !(typeof data['triggerId'] === 'string' || data['triggerId'] instanceof String)) {
            throw new Error("Expected the field `triggerId` to be a primitive type in the JSON string but got " + data['triggerId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `uniqueTriggerId`
        if (data['uniqueTriggerId']) { // data not null
          Parameter.validateJSON(data['uniqueTriggerId']);
        }
        // validate the optional field `verticalScrollPercentageList`
        if (data['verticalScrollPercentageList']) { // data not null
          Parameter.validateJSON(data['verticalScrollPercentageList']);
        }
        // validate the optional field `visibilitySelector`
        if (data['visibilitySelector']) { // data not null
          Parameter.validateJSON(data['visibilitySelector']);
        }
        // validate the optional field `visiblePercentageMax`
        if (data['visiblePercentageMax']) { // data not null
          Parameter.validateJSON(data['visiblePercentageMax']);
        }
        // validate the optional field `visiblePercentageMin`
        if (data['visiblePercentageMin']) { // data not null
          Parameter.validateJSON(data['visiblePercentageMin']);
        }
        // validate the optional field `waitForTags`
        if (data['waitForTags']) { // data not null
          Parameter.validateJSON(data['waitForTags']);
        }
        // validate the optional field `waitForTagsTimeout`
        if (data['waitForTagsTimeout']) { // data not null
          Parameter.validateJSON(data['waitForTagsTimeout']);
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
Trigger.prototype['accountId'] = undefined;

/**
 * Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 * @member {Array.<module:model/Condition>} autoEventFilter
 */
Trigger.prototype['autoEventFilter'] = undefined;

/**
 * @member {module:model/Parameter} checkValidation
 */
Trigger.prototype['checkValidation'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
Trigger.prototype['containerId'] = undefined;

/**
 * @member {module:model/Parameter} continuousTimeMinMilliseconds
 */
Trigger.prototype['continuousTimeMinMilliseconds'] = undefined;

/**
 * Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 * @member {Array.<module:model/Condition>} customEventFilter
 */
Trigger.prototype['customEventFilter'] = undefined;

/**
 * @member {module:model/Parameter} eventName
 */
Trigger.prototype['eventName'] = undefined;

/**
 * The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 * @member {Array.<module:model/Condition>} filter
 */
Trigger.prototype['filter'] = undefined;

/**
 * The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.
 * @member {String} fingerprint
 */
Trigger.prototype['fingerprint'] = undefined;

/**
 * @member {module:model/Parameter} horizontalScrollPercentageList
 */
Trigger.prototype['horizontalScrollPercentageList'] = undefined;

/**
 * @member {module:model/Parameter} interval
 */
Trigger.prototype['interval'] = undefined;

/**
 * @member {module:model/Parameter} intervalSeconds
 */
Trigger.prototype['intervalSeconds'] = undefined;

/**
 * @member {module:model/Parameter} limit
 */
Trigger.prototype['limit'] = undefined;

/**
 * @member {module:model/Parameter} maxTimerLengthSeconds
 */
Trigger.prototype['maxTimerLengthSeconds'] = undefined;

/**
 * Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 * @member {String} name
 */
Trigger.prototype['name'] = undefined;

/**
 * Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update
 * @member {Array.<module:model/Parameter>} parameter
 */
Trigger.prototype['parameter'] = undefined;

/**
 * Parent folder id.
 * @member {String} parentFolderId
 */
Trigger.prototype['parentFolderId'] = undefined;

/**
 * @member {module:model/Parameter} selector
 */
Trigger.prototype['selector'] = undefined;

/**
 * @member {module:model/Parameter} totalTimeMinMilliseconds
 */
Trigger.prototype['totalTimeMinMilliseconds'] = undefined;

/**
 * The Trigger ID uniquely identifies the GTM Trigger.
 * @member {String} triggerId
 */
Trigger.prototype['triggerId'] = undefined;

/**
 * Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 * @member {module:model/Trigger.TypeEnum} type
 */
Trigger.prototype['type'] = undefined;

/**
 * @member {module:model/Parameter} uniqueTriggerId
 */
Trigger.prototype['uniqueTriggerId'] = undefined;

/**
 * @member {module:model/Parameter} verticalScrollPercentageList
 */
Trigger.prototype['verticalScrollPercentageList'] = undefined;

/**
 * @member {module:model/Parameter} visibilitySelector
 */
Trigger.prototype['visibilitySelector'] = undefined;

/**
 * @member {module:model/Parameter} visiblePercentageMax
 */
Trigger.prototype['visiblePercentageMax'] = undefined;

/**
 * @member {module:model/Parameter} visiblePercentageMin
 */
Trigger.prototype['visiblePercentageMin'] = undefined;

/**
 * @member {module:model/Parameter} waitForTags
 */
Trigger.prototype['waitForTags'] = undefined;

/**
 * @member {module:model/Parameter} waitForTagsTimeout
 */
Trigger.prototype['waitForTagsTimeout'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Trigger['TypeEnum'] = {

    /**
     * value: "pageview"
     * @const
     */
    "pageview": "pageview",

    /**
     * value: "domReady"
     * @const
     */
    "domReady": "domReady",

    /**
     * value: "windowLoaded"
     * @const
     */
    "windowLoaded": "windowLoaded",

    /**
     * value: "customEvent"
     * @const
     */
    "customEvent": "customEvent",

    /**
     * value: "triggerGroup"
     * @const
     */
    "triggerGroup": "triggerGroup",

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "formSubmission"
     * @const
     */
    "formSubmission": "formSubmission",

    /**
     * value: "click"
     * @const
     */
    "click": "click",

    /**
     * value: "linkClick"
     * @const
     */
    "linkClick": "linkClick",

    /**
     * value: "jsError"
     * @const
     */
    "jsError": "jsError",

    /**
     * value: "historyChange"
     * @const
     */
    "historyChange": "historyChange",

    /**
     * value: "timer"
     * @const
     */
    "timer": "timer",

    /**
     * value: "ampClick"
     * @const
     */
    "ampClick": "ampClick",

    /**
     * value: "ampTimer"
     * @const
     */
    "ampTimer": "ampTimer",

    /**
     * value: "ampScroll"
     * @const
     */
    "ampScroll": "ampScroll",

    /**
     * value: "ampVisibility"
     * @const
     */
    "ampVisibility": "ampVisibility",

    /**
     * value: "youTubeVideo"
     * @const
     */
    "youTubeVideo": "youTubeVideo",

    /**
     * value: "scrollDepth"
     * @const
     */
    "scrollDepth": "scrollDepth",

    /**
     * value: "elementVisibility"
     * @const
     */
    "elementVisibility": "elementVisibility"
};



export default Trigger;

