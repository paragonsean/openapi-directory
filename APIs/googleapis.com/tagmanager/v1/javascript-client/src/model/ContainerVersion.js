/**
 * Tag Manager API
 * This API allows clients to access and modify container and tag configuration.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Container from './Container';
import Folder from './Folder';
import Macro from './Macro';
import Rule from './Rule';
import Tag from './Tag';
import Trigger from './Trigger';
import Variable from './Variable';

/**
 * The ContainerVersion model module.
 * @module model/ContainerVersion
 * @version v1
 */
class ContainerVersion {
    /**
     * Constructs a new <code>ContainerVersion</code>.
     * Represents a Google Tag Manager Container Version.
     * @alias module:model/ContainerVersion
     */
    constructor() { 
        
        ContainerVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerVersion} obj Optional instance to populate.
     * @return {module:model/ContainerVersion} The populated <code>ContainerVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerVersion();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = Container.constructFromObject(data['container']);
            }
            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('containerVersionId')) {
                obj['containerVersionId'] = ApiClient.convertToType(data['containerVersionId'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], [Folder]);
            }
            if (data.hasOwnProperty('macro')) {
                obj['macro'] = ApiClient.convertToType(data['macro'], [Macro]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], [Rule]);
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], [Tag]);
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], [Trigger]);
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], [Variable]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `container`
        if (data['container']) { // data not null
          Container.validateJSON(data['container']);
        }
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['containerVersionId'] && !(typeof data['containerVersionId'] === 'string' || data['containerVersionId'] instanceof String)) {
            throw new Error("Expected the field `containerVersionId` to be a primitive type in the JSON string but got " + data['containerVersionId']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        if (data['folder']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['folder'])) {
                throw new Error("Expected the field `folder` to be an array in the JSON data but got " + data['folder']);
            }
            // validate the optional field `folder` (array)
            for (const item of data['folder']) {
                Folder.validateJSON(item);
            };
        }
        if (data['macro']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['macro'])) {
                throw new Error("Expected the field `macro` to be an array in the JSON data but got " + data['macro']);
            }
            // validate the optional field `macro` (array)
            for (const item of data['macro']) {
                Macro.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['rule']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rule'])) {
                throw new Error("Expected the field `rule` to be an array in the JSON data but got " + data['rule']);
            }
            // validate the optional field `rule` (array)
            for (const item of data['rule']) {
                Rule.validateJSON(item);
            };
        }
        if (data['tag']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tag'])) {
                throw new Error("Expected the field `tag` to be an array in the JSON data but got " + data['tag']);
            }
            // validate the optional field `tag` (array)
            for (const item of data['tag']) {
                Tag.validateJSON(item);
            };
        }
        if (data['trigger']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trigger'])) {
                throw new Error("Expected the field `trigger` to be an array in the JSON data but got " + data['trigger']);
            }
            // validate the optional field `trigger` (array)
            for (const item of data['trigger']) {
                Trigger.validateJSON(item);
            };
        }
        if (data['variable']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variable'])) {
                throw new Error("Expected the field `variable` to be an array in the JSON data but got " + data['variable']);
            }
            // validate the optional field `variable` (array)
            for (const item of data['variable']) {
                Variable.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * GTM Account ID.
 * @member {String} accountId
 */
ContainerVersion.prototype['accountId'] = undefined;

/**
 * @member {module:model/Container} container
 */
ContainerVersion.prototype['container'] = undefined;

/**
 * GTM Container ID.
 * @member {String} containerId
 */
ContainerVersion.prototype['containerId'] = undefined;

/**
 * The Container Version ID uniquely identifies the GTM Container Version.
 * @member {String} containerVersionId
 */
ContainerVersion.prototype['containerVersionId'] = undefined;

/**
 * A value of true indicates this container version has been deleted.
 * @member {Boolean} deleted
 */
ContainerVersion.prototype['deleted'] = undefined;

/**
 * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
 * @member {String} fingerprint
 */
ContainerVersion.prototype['fingerprint'] = undefined;

/**
 * The folders in the container that this version was taken from.
 * @member {Array.<module:model/Folder>} folder
 */
ContainerVersion.prototype['folder'] = undefined;

/**
 * The macros in the container that this version was taken from.
 * @member {Array.<module:model/Macro>} macro
 */
ContainerVersion.prototype['macro'] = undefined;

/**
 * Container version display name. @mutable tagmanager.accounts.containers.versions.update
 * @member {String} name
 */
ContainerVersion.prototype['name'] = undefined;

/**
 * User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update
 * @member {String} notes
 */
ContainerVersion.prototype['notes'] = undefined;

/**
 * The rules in the container that this version was taken from.
 * @member {Array.<module:model/Rule>} rule
 */
ContainerVersion.prototype['rule'] = undefined;

/**
 * The tags in the container that this version was taken from.
 * @member {Array.<module:model/Tag>} tag
 */
ContainerVersion.prototype['tag'] = undefined;

/**
 * The triggers in the container that this version was taken from.
 * @member {Array.<module:model/Trigger>} trigger
 */
ContainerVersion.prototype['trigger'] = undefined;

/**
 * The variables in the container that this version was taken from.
 * @member {Array.<module:model/Variable>} variable
 */
ContainerVersion.prototype['variable'] = undefined;






export default ContainerVersion;

