/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdvertisedId;
import org.openapitools.client.model.AttachmentInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of beacon information served via the &#x60;beaconinfo.getforobserved&#x60; method, which you call when users of your app encounter your beacons.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BeaconInfo {
  public static final String SERIALIZED_NAME_ADVERTISED_ID = "advertisedId";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_ID)
  private AdvertisedId advertisedId;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentInfo> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEACON_NAME = "beaconName";
  @SerializedName(SERIALIZED_NAME_BEACON_NAME)
  private String beaconName;

  public BeaconInfo() {
  }

  public BeaconInfo advertisedId(AdvertisedId advertisedId) {
    this.advertisedId = advertisedId;
    return this;
  }

  /**
   * Get advertisedId
   * @return advertisedId
   */
  @javax.annotation.Nullable
  public AdvertisedId getAdvertisedId() {
    return advertisedId;
  }

  public void setAdvertisedId(AdvertisedId advertisedId) {
    this.advertisedId = advertisedId;
  }


  public BeaconInfo attachments(List<AttachmentInfo> attachments) {
    this.attachments = attachments;
    return this;
  }

  public BeaconInfo addAttachmentsItem(AttachmentInfo attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Attachments matching the type(s) requested. May be empty if no attachment types were requested.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<AttachmentInfo> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentInfo> attachments) {
    this.attachments = attachments;
  }


  public BeaconInfo beaconName(String beaconName) {
    this.beaconName = beaconName;
    return this;
  }

  /**
   * The name under which the beacon is registered.
   * @return beaconName
   */
  @javax.annotation.Nullable
  public String getBeaconName() {
    return beaconName;
  }

  public void setBeaconName(String beaconName) {
    this.beaconName = beaconName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BeaconInfo beaconInfo = (BeaconInfo) o;
    return Objects.equals(this.advertisedId, beaconInfo.advertisedId) &&
        Objects.equals(this.attachments, beaconInfo.attachments) &&
        Objects.equals(this.beaconName, beaconInfo.beaconName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisedId, attachments, beaconName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BeaconInfo {\n");
    sb.append("    advertisedId: ").append(toIndentedString(advertisedId)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    beaconName: ").append(toIndentedString(beaconName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertisedId");
    openapiFields.add("attachments");
    openapiFields.add("beaconName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BeaconInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BeaconInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BeaconInfo is not found in the empty JSON string", BeaconInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BeaconInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BeaconInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advertisedId`
      if (jsonObj.get("advertisedId") != null && !jsonObj.get("advertisedId").isJsonNull()) {
        AdvertisedId.validateJsonElement(jsonObj.get("advertisedId"));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            AttachmentInfo.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("beaconName") != null && !jsonObj.get("beaconName").isJsonNull()) && !jsonObj.get("beaconName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beaconName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beaconName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BeaconInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BeaconInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BeaconInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BeaconInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BeaconInfo>() {
           @Override
           public void write(JsonWriter out, BeaconInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BeaconInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BeaconInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BeaconInfo
   * @throws IOException if the JSON string is invalid with respect to BeaconInfo
   */
  public static BeaconInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BeaconInfo.class);
  }

  /**
   * Convert an instance of BeaconInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

