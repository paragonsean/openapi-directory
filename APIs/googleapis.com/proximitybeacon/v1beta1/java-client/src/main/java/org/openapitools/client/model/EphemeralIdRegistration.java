/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely registering an Eddystone-EID beacon with the service are supported: 1. Perform an ECDH key exchange via this API, including a previous call to &#x60;GET /v1beta1/eidparams&#x60;. In this case the fields &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; should be populated and &#x60;beacon_identity_key&#x60; should not be populated. This method ensures that only the two parties in the ECDH key exchange can compute the identity key, which becomes a secret between them. 2. Derive or obtain the beacon&#39;s identity key via other secure means (perhaps an ECDH key exchange between the beacon and a mobile device or any other secure method), and then submit the resulting identity key to the service. In this case &#x60;beacon_identity_key&#x60; field should be populated, and neither of &#x60;beacon_ecdh_public_key&#x60; nor &#x60;service_ecdh_public_key&#x60; fields should be. The security of this method depends on how securely the parties involved (in particular the bluetooth client) handle the identity key, and obviously on how securely the identity key was generated. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EphemeralIdRegistration {
  public static final String SERIALIZED_NAME_BEACON_ECDH_PUBLIC_KEY = "beaconEcdhPublicKey";
  @SerializedName(SERIALIZED_NAME_BEACON_ECDH_PUBLIC_KEY)
  private byte[] beaconEcdhPublicKey;

  public static final String SERIALIZED_NAME_BEACON_IDENTITY_KEY = "beaconIdentityKey";
  @SerializedName(SERIALIZED_NAME_BEACON_IDENTITY_KEY)
  private byte[] beaconIdentityKey;

  public static final String SERIALIZED_NAME_INITIAL_CLOCK_VALUE = "initialClockValue";
  @SerializedName(SERIALIZED_NAME_INITIAL_CLOCK_VALUE)
  private String initialClockValue;

  public static final String SERIALIZED_NAME_INITIAL_EID = "initialEid";
  @SerializedName(SERIALIZED_NAME_INITIAL_EID)
  private byte[] initialEid;

  public static final String SERIALIZED_NAME_ROTATION_PERIOD_EXPONENT = "rotationPeriodExponent";
  @SerializedName(SERIALIZED_NAME_ROTATION_PERIOD_EXPONENT)
  private Integer rotationPeriodExponent;

  public static final String SERIALIZED_NAME_SERVICE_ECDH_PUBLIC_KEY = "serviceEcdhPublicKey";
  @SerializedName(SERIALIZED_NAME_SERVICE_ECDH_PUBLIC_KEY)
  private byte[] serviceEcdhPublicKey;

  public EphemeralIdRegistration() {
  }

  public EphemeralIdRegistration beaconEcdhPublicKey(byte[] beaconEcdhPublicKey) {
    this.beaconEcdhPublicKey = beaconEcdhPublicKey;
    return this;
  }

  /**
   * The beacon&#39;s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, &#x60;service_ecdh_public_key&#x60; must also be populated, and &#x60;beacon_identity_key&#x60; must not be.
   * @return beaconEcdhPublicKey
   */
  @javax.annotation.Nullable
  public byte[] getBeaconEcdhPublicKey() {
    return beaconEcdhPublicKey;
  }

  public void setBeaconEcdhPublicKey(byte[] beaconEcdhPublicKey) {
    this.beaconEcdhPublicKey = beaconEcdhPublicKey;
  }


  public EphemeralIdRegistration beaconIdentityKey(byte[] beaconIdentityKey) {
    this.beaconIdentityKey = beaconIdentityKey;
    return this;
  }

  /**
   * The private key of the beacon. If this field is populated, &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; must not be populated.
   * @return beaconIdentityKey
   */
  @javax.annotation.Nullable
  public byte[] getBeaconIdentityKey() {
    return beaconIdentityKey;
  }

  public void setBeaconIdentityKey(byte[] beaconIdentityKey) {
    this.beaconIdentityKey = beaconIdentityKey;
  }


  public EphemeralIdRegistration initialClockValue(String initialClockValue) {
    this.initialClockValue = initialClockValue;
    return this;
  }

  /**
   * The initial clock value of the beacon. The beacon&#39;s clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.
   * @return initialClockValue
   */
  @javax.annotation.Nullable
  public String getInitialClockValue() {
    return initialClockValue;
  }

  public void setInitialClockValue(String initialClockValue) {
    this.initialClockValue = initialClockValue;
  }


  public EphemeralIdRegistration initialEid(byte[] initialEid) {
    this.initialEid = initialEid;
    return this;
  }

  /**
   * An initial ephemeral ID calculated using the clock value submitted as &#x60;initial_clock_value&#x60;, and the secret key generated by the Diffie-Hellman key exchange using &#x60;service_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60;. This initial EID value will be used by the service to confirm that the key exchange process was successful.
   * @return initialEid
   */
  @javax.annotation.Nullable
  public byte[] getInitialEid() {
    return initialEid;
  }

  public void setInitialEid(byte[] initialEid) {
    this.initialEid = initialEid;
  }


  public EphemeralIdRegistration rotationPeriodExponent(Integer rotationPeriodExponent) {
    this.rotationPeriodExponent = rotationPeriodExponent;
    return this;
  }

  /**
   * Indicates the nominal period between each rotation of the beacon&#39;s ephemeral ID. \&quot;Nominal\&quot; because the beacon should randomize the actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value corresponds to a power-of-two scaler on the beacon&#39;s clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.
   * @return rotationPeriodExponent
   */
  @javax.annotation.Nullable
  public Integer getRotationPeriodExponent() {
    return rotationPeriodExponent;
  }

  public void setRotationPeriodExponent(Integer rotationPeriodExponent) {
    this.rotationPeriodExponent = rotationPeriodExponent;
  }


  public EphemeralIdRegistration serviceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
    return this;
  }

  /**
   * The service&#39;s public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, &#x60;beacon_ecdh_public_key&#x60; must also be populated, and &#x60;beacon_identity_key&#x60; must not be.
   * @return serviceEcdhPublicKey
   */
  @javax.annotation.Nullable
  public byte[] getServiceEcdhPublicKey() {
    return serviceEcdhPublicKey;
  }

  public void setServiceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EphemeralIdRegistration ephemeralIdRegistration = (EphemeralIdRegistration) o;
    return Arrays.equals(this.beaconEcdhPublicKey, ephemeralIdRegistration.beaconEcdhPublicKey) &&
        Arrays.equals(this.beaconIdentityKey, ephemeralIdRegistration.beaconIdentityKey) &&
        Objects.equals(this.initialClockValue, ephemeralIdRegistration.initialClockValue) &&
        Arrays.equals(this.initialEid, ephemeralIdRegistration.initialEid) &&
        Objects.equals(this.rotationPeriodExponent, ephemeralIdRegistration.rotationPeriodExponent) &&
        Arrays.equals(this.serviceEcdhPublicKey, ephemeralIdRegistration.serviceEcdhPublicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(beaconEcdhPublicKey), Arrays.hashCode(beaconIdentityKey), initialClockValue, Arrays.hashCode(initialEid), rotationPeriodExponent, Arrays.hashCode(serviceEcdhPublicKey));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EphemeralIdRegistration {\n");
    sb.append("    beaconEcdhPublicKey: ").append(toIndentedString(beaconEcdhPublicKey)).append("\n");
    sb.append("    beaconIdentityKey: ").append(toIndentedString(beaconIdentityKey)).append("\n");
    sb.append("    initialClockValue: ").append(toIndentedString(initialClockValue)).append("\n");
    sb.append("    initialEid: ").append(toIndentedString(initialEid)).append("\n");
    sb.append("    rotationPeriodExponent: ").append(toIndentedString(rotationPeriodExponent)).append("\n");
    sb.append("    serviceEcdhPublicKey: ").append(toIndentedString(serviceEcdhPublicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beaconEcdhPublicKey");
    openapiFields.add("beaconIdentityKey");
    openapiFields.add("initialClockValue");
    openapiFields.add("initialEid");
    openapiFields.add("rotationPeriodExponent");
    openapiFields.add("serviceEcdhPublicKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EphemeralIdRegistration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EphemeralIdRegistration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EphemeralIdRegistration is not found in the empty JSON string", EphemeralIdRegistration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EphemeralIdRegistration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EphemeralIdRegistration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("initialClockValue") != null && !jsonObj.get("initialClockValue").isJsonNull()) && !jsonObj.get("initialClockValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialClockValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialClockValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EphemeralIdRegistration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EphemeralIdRegistration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EphemeralIdRegistration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EphemeralIdRegistration.class));

       return (TypeAdapter<T>) new TypeAdapter<EphemeralIdRegistration>() {
           @Override
           public void write(JsonWriter out, EphemeralIdRegistration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EphemeralIdRegistration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EphemeralIdRegistration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EphemeralIdRegistration
   * @throws IOException if the JSON string is invalid with respect to EphemeralIdRegistration
   */
  public static EphemeralIdRegistration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EphemeralIdRegistration.class);
  }

  /**
   * Convert an instance of EphemeralIdRegistration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

