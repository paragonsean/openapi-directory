/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AdvertisedId;
import org.openapitools.client.model.EphemeralIdRegistration;
import org.openapitools.client.model.IndoorLevel;
import org.openapitools.client.model.LatLng;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a beacon device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Beacon {
  public static final String SERIALIZED_NAME_ADVERTISED_ID = "advertisedId";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_ID)
  private AdvertisedId advertisedId;

  public static final String SERIALIZED_NAME_BEACON_NAME = "beaconName";
  @SerializedName(SERIALIZED_NAME_BEACON_NAME)
  private String beaconName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EPHEMERAL_ID_REGISTRATION = "ephemeralIdRegistration";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_ID_REGISTRATION)
  private EphemeralIdRegistration ephemeralIdRegistration;

  /**
   * Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.
   */
  @JsonAdapter(ExpectedStabilityEnum.Adapter.class)
  public enum ExpectedStabilityEnum {
    STABILITY_UNSPECIFIED("STABILITY_UNSPECIFIED"),
    
    STABLE("STABLE"),
    
    PORTABLE("PORTABLE"),
    
    MOBILE("MOBILE"),
    
    ROVING("ROVING");

    private String value;

    ExpectedStabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectedStabilityEnum fromValue(String value) {
      for (ExpectedStabilityEnum b : ExpectedStabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectedStabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectedStabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectedStabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectedStabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpectedStabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPECTED_STABILITY = "expectedStability";
  @SerializedName(SERIALIZED_NAME_EXPECTED_STABILITY)
  private ExpectedStabilityEnum expectedStability;

  public static final String SERIALIZED_NAME_INDOOR_LEVEL = "indoorLevel";
  @SerializedName(SERIALIZED_NAME_INDOOR_LEVEL)
  private IndoorLevel indoorLevel;

  public static final String SERIALIZED_NAME_LAT_LNG = "latLng";
  @SerializedName(SERIALIZED_NAME_LAT_LNG)
  private LatLng latLng;

  public static final String SERIALIZED_NAME_PLACE_ID = "placeId";
  @SerializedName(SERIALIZED_NAME_PLACE_ID)
  private String placeId;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVISIONING_KEY = "provisioningKey";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_KEY)
  private byte[] provisioningKey;

  /**
   * Current status of the beacon. Required.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    DECOMMISSIONED("DECOMMISSIONED"),
    
    INACTIVE("INACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Beacon() {
  }

  public Beacon advertisedId(AdvertisedId advertisedId) {
    this.advertisedId = advertisedId;
    return this;
  }

  /**
   * Get advertisedId
   * @return advertisedId
   */
  @javax.annotation.Nullable
  public AdvertisedId getAdvertisedId() {
    return advertisedId;
  }

  public void setAdvertisedId(AdvertisedId advertisedId) {
    this.advertisedId = advertisedId;
  }


  public Beacon beaconName(String beaconName) {
    this.beaconName = beaconName;
    return this;
  }

  /**
   * Resource name of this beacon. A beacon name has the format \&quot;beacons/N!beaconId\&quot; where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon&#39;s type. Possible values are &#x60;3&#x60; for Eddystone, &#x60;1&#x60; for iBeacon, or &#x60;5&#x60; for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.
   * @return beaconName
   */
  @javax.annotation.Nullable
  public String getBeaconName() {
    return beaconName;
  }

  public void setBeaconName(String beaconName) {
    this.beaconName = beaconName;
  }


  public Beacon description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Beacon ephemeralIdRegistration(EphemeralIdRegistration ephemeralIdRegistration) {
    this.ephemeralIdRegistration = ephemeralIdRegistration;
    return this;
  }

  /**
   * Get ephemeralIdRegistration
   * @return ephemeralIdRegistration
   */
  @javax.annotation.Nullable
  public EphemeralIdRegistration getEphemeralIdRegistration() {
    return ephemeralIdRegistration;
  }

  public void setEphemeralIdRegistration(EphemeralIdRegistration ephemeralIdRegistration) {
    this.ephemeralIdRegistration = ephemeralIdRegistration;
  }


  public Beacon expectedStability(ExpectedStabilityEnum expectedStability) {
    this.expectedStability = expectedStability;
    return this;
  }

  /**
   * Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.
   * @return expectedStability
   */
  @javax.annotation.Nullable
  public ExpectedStabilityEnum getExpectedStability() {
    return expectedStability;
  }

  public void setExpectedStability(ExpectedStabilityEnum expectedStability) {
    this.expectedStability = expectedStability;
  }


  public Beacon indoorLevel(IndoorLevel indoorLevel) {
    this.indoorLevel = indoorLevel;
    return this;
  }

  /**
   * Get indoorLevel
   * @return indoorLevel
   */
  @javax.annotation.Nullable
  public IndoorLevel getIndoorLevel() {
    return indoorLevel;
  }

  public void setIndoorLevel(IndoorLevel indoorLevel) {
    this.indoorLevel = indoorLevel;
  }


  public Beacon latLng(LatLng latLng) {
    this.latLng = latLng;
    return this;
  }

  /**
   * Get latLng
   * @return latLng
   */
  @javax.annotation.Nullable
  public LatLng getLatLng() {
    return latLng;
  }

  public void setLatLng(LatLng latLng) {
    this.latLng = latLng;
  }


  public Beacon placeId(String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.
   * @return placeId
   */
  @javax.annotation.Nullable
  public String getPlaceId() {
    return placeId;
  }

  public void setPlaceId(String placeId) {
    this.placeId = placeId;
  }


  public Beacon properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public Beacon putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Properties of the beacon device, for example battery type or firmware version. Optional.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public Beacon provisioningKey(byte[] provisioningKey) {
    this.provisioningKey = provisioningKey;
    return this;
  }

  /**
   * Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to &#x60;GET /v1beta1/beacons/3!beaconId&#x60; from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon&#39;s confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.
   * @return provisioningKey
   */
  @javax.annotation.Nullable
  public byte[] getProvisioningKey() {
    return provisioningKey;
  }

  public void setProvisioningKey(byte[] provisioningKey) {
    this.provisioningKey = provisioningKey;
  }


  public Beacon status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the beacon. Required.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Beacon beacon = (Beacon) o;
    return Objects.equals(this.advertisedId, beacon.advertisedId) &&
        Objects.equals(this.beaconName, beacon.beaconName) &&
        Objects.equals(this.description, beacon.description) &&
        Objects.equals(this.ephemeralIdRegistration, beacon.ephemeralIdRegistration) &&
        Objects.equals(this.expectedStability, beacon.expectedStability) &&
        Objects.equals(this.indoorLevel, beacon.indoorLevel) &&
        Objects.equals(this.latLng, beacon.latLng) &&
        Objects.equals(this.placeId, beacon.placeId) &&
        Objects.equals(this.properties, beacon.properties) &&
        Arrays.equals(this.provisioningKey, beacon.provisioningKey) &&
        Objects.equals(this.status, beacon.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertisedId, beaconName, description, ephemeralIdRegistration, expectedStability, indoorLevel, latLng, placeId, properties, Arrays.hashCode(provisioningKey), status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Beacon {\n");
    sb.append("    advertisedId: ").append(toIndentedString(advertisedId)).append("\n");
    sb.append("    beaconName: ").append(toIndentedString(beaconName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ephemeralIdRegistration: ").append(toIndentedString(ephemeralIdRegistration)).append("\n");
    sb.append("    expectedStability: ").append(toIndentedString(expectedStability)).append("\n");
    sb.append("    indoorLevel: ").append(toIndentedString(indoorLevel)).append("\n");
    sb.append("    latLng: ").append(toIndentedString(latLng)).append("\n");
    sb.append("    placeId: ").append(toIndentedString(placeId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    provisioningKey: ").append(toIndentedString(provisioningKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertisedId");
    openapiFields.add("beaconName");
    openapiFields.add("description");
    openapiFields.add("ephemeralIdRegistration");
    openapiFields.add("expectedStability");
    openapiFields.add("indoorLevel");
    openapiFields.add("latLng");
    openapiFields.add("placeId");
    openapiFields.add("properties");
    openapiFields.add("provisioningKey");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Beacon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Beacon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Beacon is not found in the empty JSON string", Beacon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Beacon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Beacon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `advertisedId`
      if (jsonObj.get("advertisedId") != null && !jsonObj.get("advertisedId").isJsonNull()) {
        AdvertisedId.validateJsonElement(jsonObj.get("advertisedId"));
      }
      if ((jsonObj.get("beaconName") != null && !jsonObj.get("beaconName").isJsonNull()) && !jsonObj.get("beaconName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beaconName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beaconName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `ephemeralIdRegistration`
      if (jsonObj.get("ephemeralIdRegistration") != null && !jsonObj.get("ephemeralIdRegistration").isJsonNull()) {
        EphemeralIdRegistration.validateJsonElement(jsonObj.get("ephemeralIdRegistration"));
      }
      if ((jsonObj.get("expectedStability") != null && !jsonObj.get("expectedStability").isJsonNull()) && !jsonObj.get("expectedStability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedStability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedStability").toString()));
      }
      // validate the optional field `expectedStability`
      if (jsonObj.get("expectedStability") != null && !jsonObj.get("expectedStability").isJsonNull()) {
        ExpectedStabilityEnum.validateJsonElement(jsonObj.get("expectedStability"));
      }
      // validate the optional field `indoorLevel`
      if (jsonObj.get("indoorLevel") != null && !jsonObj.get("indoorLevel").isJsonNull()) {
        IndoorLevel.validateJsonElement(jsonObj.get("indoorLevel"));
      }
      // validate the optional field `latLng`
      if (jsonObj.get("latLng") != null && !jsonObj.get("latLng").isJsonNull()) {
        LatLng.validateJsonElement(jsonObj.get("latLng"));
      }
      if ((jsonObj.get("placeId") != null && !jsonObj.get("placeId").isJsonNull()) && !jsonObj.get("placeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Beacon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Beacon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Beacon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Beacon.class));

       return (TypeAdapter<T>) new TypeAdapter<Beacon>() {
           @Override
           public void write(JsonWriter out, Beacon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Beacon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Beacon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Beacon
   * @throws IOException if the JSON string is invalid with respect to Beacon
   */
  public static Beacon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Beacon.class);
  }

  /**
   * Convert an instance of Beacon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

