/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EphemeralIdRegistrationParams {
  public static final String SERIALIZED_NAME_MAX_ROTATION_PERIOD_EXPONENT = "maxRotationPeriodExponent";
  @SerializedName(SERIALIZED_NAME_MAX_ROTATION_PERIOD_EXPONENT)
  private Integer maxRotationPeriodExponent;

  public static final String SERIALIZED_NAME_MIN_ROTATION_PERIOD_EXPONENT = "minRotationPeriodExponent";
  @SerializedName(SERIALIZED_NAME_MIN_ROTATION_PERIOD_EXPONENT)
  private Integer minRotationPeriodExponent;

  public static final String SERIALIZED_NAME_SERVICE_ECDH_PUBLIC_KEY = "serviceEcdhPublicKey";
  @SerializedName(SERIALIZED_NAME_SERVICE_ECDH_PUBLIC_KEY)
  private byte[] serviceEcdhPublicKey;

  public EphemeralIdRegistrationParams() {
  }

  public EphemeralIdRegistrationParams maxRotationPeriodExponent(Integer maxRotationPeriodExponent) {
    this.maxRotationPeriodExponent = maxRotationPeriodExponent;
    return this;
  }

  /**
   * Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent
   * @return maxRotationPeriodExponent
   */
  @javax.annotation.Nullable
  public Integer getMaxRotationPeriodExponent() {
    return maxRotationPeriodExponent;
  }

  public void setMaxRotationPeriodExponent(Integer maxRotationPeriodExponent) {
    this.maxRotationPeriodExponent = maxRotationPeriodExponent;
  }


  public EphemeralIdRegistrationParams minRotationPeriodExponent(Integer minRotationPeriodExponent) {
    this.minRotationPeriodExponent = minRotationPeriodExponent;
    return this;
  }

  /**
   * Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent
   * @return minRotationPeriodExponent
   */
  @javax.annotation.Nullable
  public Integer getMinRotationPeriodExponent() {
    return minRotationPeriodExponent;
  }

  public void setMinRotationPeriodExponent(Integer minRotationPeriodExponent) {
    this.minRotationPeriodExponent = minRotationPeriodExponent;
  }


  public EphemeralIdRegistrationParams serviceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
    return this;
  }

  /**
   * The beacon service&#39;s public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.
   * @return serviceEcdhPublicKey
   */
  @javax.annotation.Nullable
  public byte[] getServiceEcdhPublicKey() {
    return serviceEcdhPublicKey;
  }

  public void setServiceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EphemeralIdRegistrationParams ephemeralIdRegistrationParams = (EphemeralIdRegistrationParams) o;
    return Objects.equals(this.maxRotationPeriodExponent, ephemeralIdRegistrationParams.maxRotationPeriodExponent) &&
        Objects.equals(this.minRotationPeriodExponent, ephemeralIdRegistrationParams.minRotationPeriodExponent) &&
        Arrays.equals(this.serviceEcdhPublicKey, ephemeralIdRegistrationParams.serviceEcdhPublicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxRotationPeriodExponent, minRotationPeriodExponent, Arrays.hashCode(serviceEcdhPublicKey));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EphemeralIdRegistrationParams {\n");
    sb.append("    maxRotationPeriodExponent: ").append(toIndentedString(maxRotationPeriodExponent)).append("\n");
    sb.append("    minRotationPeriodExponent: ").append(toIndentedString(minRotationPeriodExponent)).append("\n");
    sb.append("    serviceEcdhPublicKey: ").append(toIndentedString(serviceEcdhPublicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxRotationPeriodExponent");
    openapiFields.add("minRotationPeriodExponent");
    openapiFields.add("serviceEcdhPublicKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EphemeralIdRegistrationParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EphemeralIdRegistrationParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EphemeralIdRegistrationParams is not found in the empty JSON string", EphemeralIdRegistrationParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EphemeralIdRegistrationParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EphemeralIdRegistrationParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EphemeralIdRegistrationParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EphemeralIdRegistrationParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EphemeralIdRegistrationParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EphemeralIdRegistrationParams.class));

       return (TypeAdapter<T>) new TypeAdapter<EphemeralIdRegistrationParams>() {
           @Override
           public void write(JsonWriter out, EphemeralIdRegistrationParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EphemeralIdRegistrationParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EphemeralIdRegistrationParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EphemeralIdRegistrationParams
   * @throws IOException if the JSON string is invalid with respect to EphemeralIdRegistrationParams
   */
  public static EphemeralIdRegistrationParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EphemeralIdRegistrationParams.class);
  }

  /**
   * Convert an instance of EphemeralIdRegistrationParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

