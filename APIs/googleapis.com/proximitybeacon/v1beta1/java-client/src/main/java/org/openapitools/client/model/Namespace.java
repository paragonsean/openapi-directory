/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Namespace {
  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  /**
   * Specifies what clients may receive attachments under this namespace via &#x60;beaconinfo.getforobserved&#x60;.
   */
  @JsonAdapter(ServingVisibilityEnum.Adapter.class)
  public enum ServingVisibilityEnum {
    VISIBILITY_UNSPECIFIED("VISIBILITY_UNSPECIFIED"),
    
    UNLISTED("UNLISTED"),
    
    PUBLIC("PUBLIC");

    private String value;

    ServingVisibilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServingVisibilityEnum fromValue(String value) {
      for (ServingVisibilityEnum b : ServingVisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServingVisibilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServingVisibilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServingVisibilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServingVisibilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServingVisibilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVING_VISIBILITY = "servingVisibility";
  @SerializedName(SERIALIZED_NAME_SERVING_VISIBILITY)
  private ServingVisibilityEnum servingVisibility;

  public Namespace() {
  }

  public Namespace namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
   * @return namespaceName
   */
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public Namespace servingVisibility(ServingVisibilityEnum servingVisibility) {
    this.servingVisibility = servingVisibility;
    return this;
  }

  /**
   * Specifies what clients may receive attachments under this namespace via &#x60;beaconinfo.getforobserved&#x60;.
   * @return servingVisibility
   */
  @javax.annotation.Nullable
  public ServingVisibilityEnum getServingVisibility() {
    return servingVisibility;
  }

  public void setServingVisibility(ServingVisibilityEnum servingVisibility) {
    this.servingVisibility = servingVisibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Namespace namespace = (Namespace) o;
    return Objects.equals(this.namespaceName, namespace.namespaceName) &&
        Objects.equals(this.servingVisibility, namespace.servingVisibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceName, servingVisibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Namespace {\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    servingVisibility: ").append(toIndentedString(servingVisibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("namespaceName");
    openapiFields.add("servingVisibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Namespace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Namespace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Namespace is not found in the empty JSON string", Namespace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Namespace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Namespace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("namespaceName") != null && !jsonObj.get("namespaceName").isJsonNull()) && !jsonObj.get("namespaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespaceName").toString()));
      }
      if ((jsonObj.get("servingVisibility") != null && !jsonObj.get("servingVisibility").isJsonNull()) && !jsonObj.get("servingVisibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servingVisibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servingVisibility").toString()));
      }
      // validate the optional field `servingVisibility`
      if (jsonObj.get("servingVisibility") != null && !jsonObj.get("servingVisibility").isJsonNull()) {
        ServingVisibilityEnum.validateJsonElement(jsonObj.get("servingVisibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Namespace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Namespace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Namespace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Namespace.class));

       return (TypeAdapter<T>) new TypeAdapter<Namespace>() {
           @Override
           public void write(JsonWriter out, Namespace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Namespace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Namespace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Namespace
   * @throws IOException if the JSON string is invalid with respect to Namespace
   */
  public static Namespace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Namespace.class);
  }

  /**
   * Convert an instance of Namespace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

