/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of attachment information served via the &#x60;beaconinfo.getforobserved&#x60; method, used when your users encounter your beacons.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachmentInfo {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public static final String SERIALIZED_NAME_MAX_DISTANCE_METERS = "maxDistanceMeters";
  @SerializedName(SERIALIZED_NAME_MAX_DISTANCE_METERS)
  private Double maxDistanceMeters;

  public static final String SERIALIZED_NAME_NAMESPACED_TYPE = "namespacedType";
  @SerializedName(SERIALIZED_NAME_NAMESPACED_TYPE)
  private String namespacedType;

  public AttachmentInfo() {
  }

  public AttachmentInfo data(byte[] data) {
    this.data = data;
    return this;
  }

  /**
   * An opaque data container for client-provided data.
   * @return data
   */
  @javax.annotation.Nullable
  public byte[] getData() {
    return data;
  }

  public void setData(byte[] data) {
    this.data = data;
  }


  public AttachmentInfo maxDistanceMeters(Double maxDistanceMeters) {
    this.maxDistanceMeters = maxDistanceMeters;
    return this;
  }

  /**
   * The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \&quot;seen\&quot; when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon&#39;s outer limit of detection.
   * @return maxDistanceMeters
   */
  @javax.annotation.Nullable
  public Double getMaxDistanceMeters() {
    return maxDistanceMeters;
  }

  public void setMaxDistanceMeters(Double maxDistanceMeters) {
    this.maxDistanceMeters = maxDistanceMeters;
  }


  public AttachmentInfo namespacedType(String namespacedType) {
    this.namespacedType = namespacedType;
    return this;
  }

  /**
   * Specifies what kind of attachment this is. Tells a client how to interpret the &#x60;data&#x60; field. Format is namespace/type, for example scrupulous-wombat-12345/welcome-message
   * @return namespacedType
   */
  @javax.annotation.Nullable
  public String getNamespacedType() {
    return namespacedType;
  }

  public void setNamespacedType(String namespacedType) {
    this.namespacedType = namespacedType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentInfo attachmentInfo = (AttachmentInfo) o;
    return Arrays.equals(this.data, attachmentInfo.data) &&
        Objects.equals(this.maxDistanceMeters, attachmentInfo.maxDistanceMeters) &&
        Objects.equals(this.namespacedType, attachmentInfo.namespacedType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(data), maxDistanceMeters, namespacedType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentInfo {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    maxDistanceMeters: ").append(toIndentedString(maxDistanceMeters)).append("\n");
    sb.append("    namespacedType: ").append(toIndentedString(namespacedType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("maxDistanceMeters");
    openapiFields.add("namespacedType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachmentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachmentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachmentInfo is not found in the empty JSON string", AttachmentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachmentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachmentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("namespacedType") != null && !jsonObj.get("namespacedType").isJsonNull()) && !jsonObj.get("namespacedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespacedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespacedType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachmentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachmentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachmentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachmentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachmentInfo>() {
           @Override
           public void write(JsonWriter out, AttachmentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachmentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachmentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachmentInfo
   * @throws IOException if the JSON string is invalid with respect to AttachmentInfo
   */
  public static AttachmentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachmentInfo.class);
  }

  /**
   * Convert an instance of AttachmentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

