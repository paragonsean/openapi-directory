/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Observation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request for beacon and attachment information about beacons that a mobile client has encountered \&quot;in the wild\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetInfoForObservedBeaconsRequest {
  public static final String SERIALIZED_NAME_NAMESPACED_TYPES = "namespacedTypes";
  @SerializedName(SERIALIZED_NAME_NAMESPACED_TYPES)
  private List<String> namespacedTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBSERVATIONS = "observations";
  @SerializedName(SERIALIZED_NAME_OBSERVATIONS)
  private List<Observation> observations = new ArrayList<>();

  public GetInfoForObservedBeaconsRequest() {
  }

  public GetInfoForObservedBeaconsRequest namespacedTypes(List<String> namespacedTypes) {
    this.namespacedTypes = namespacedTypes;
    return this;
  }

  public GetInfoForObservedBeaconsRequest addNamespacedTypesItem(String namespacedTypesItem) {
    if (this.namespacedTypes == null) {
      this.namespacedTypes = new ArrayList<>();
    }
    this.namespacedTypes.add(namespacedTypesItem);
    return this;
  }

  /**
   * Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts &#x60;*&#x60; to specify all types in all namespaces owned by the client. Optional.
   * @return namespacedTypes
   */
  @javax.annotation.Nullable
  public List<String> getNamespacedTypes() {
    return namespacedTypes;
  }

  public void setNamespacedTypes(List<String> namespacedTypes) {
    this.namespacedTypes = namespacedTypes;
  }


  public GetInfoForObservedBeaconsRequest observations(List<Observation> observations) {
    this.observations = observations;
    return this;
  }

  public GetInfoForObservedBeaconsRequest addObservationsItem(Observation observationsItem) {
    if (this.observations == null) {
      this.observations = new ArrayList<>();
    }
    this.observations.add(observationsItem);
    return this;
  }

  /**
   * The beacons that the client has encountered. At least one must be given.
   * @return observations
   */
  @javax.annotation.Nullable
  public List<Observation> getObservations() {
    return observations;
  }

  public void setObservations(List<Observation> observations) {
    this.observations = observations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInfoForObservedBeaconsRequest getInfoForObservedBeaconsRequest = (GetInfoForObservedBeaconsRequest) o;
    return Objects.equals(this.namespacedTypes, getInfoForObservedBeaconsRequest.namespacedTypes) &&
        Objects.equals(this.observations, getInfoForObservedBeaconsRequest.observations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespacedTypes, observations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInfoForObservedBeaconsRequest {\n");
    sb.append("    namespacedTypes: ").append(toIndentedString(namespacedTypes)).append("\n");
    sb.append("    observations: ").append(toIndentedString(observations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("namespacedTypes");
    openapiFields.add("observations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetInfoForObservedBeaconsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetInfoForObservedBeaconsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetInfoForObservedBeaconsRequest is not found in the empty JSON string", GetInfoForObservedBeaconsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetInfoForObservedBeaconsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetInfoForObservedBeaconsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("namespacedTypes") != null && !jsonObj.get("namespacedTypes").isJsonNull() && !jsonObj.get("namespacedTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespacedTypes` to be an array in the JSON string but got `%s`", jsonObj.get("namespacedTypes").toString()));
      }
      if (jsonObj.get("observations") != null && !jsonObj.get("observations").isJsonNull()) {
        JsonArray jsonArrayobservations = jsonObj.getAsJsonArray("observations");
        if (jsonArrayobservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("observations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `observations` to be an array in the JSON string but got `%s`", jsonObj.get("observations").toString()));
          }

          // validate the optional field `observations` (array)
          for (int i = 0; i < jsonArrayobservations.size(); i++) {
            Observation.validateJsonElement(jsonArrayobservations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetInfoForObservedBeaconsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetInfoForObservedBeaconsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetInfoForObservedBeaconsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetInfoForObservedBeaconsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetInfoForObservedBeaconsRequest>() {
           @Override
           public void write(JsonWriter out, GetInfoForObservedBeaconsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetInfoForObservedBeaconsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetInfoForObservedBeaconsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetInfoForObservedBeaconsRequest
   * @throws IOException if the JSON string is invalid with respect to GetInfoForObservedBeaconsRequest
   */
  public static GetInfoForObservedBeaconsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetInfoForObservedBeaconsRequest.class);
  }

  /**
   * Convert an instance of GetInfoForObservedBeaconsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

