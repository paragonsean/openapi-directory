/*
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Diagnostics for a single beacon.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:59.766689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Diagnostics {
  /**
   * Gets or Sets alerts
   */
  @JsonAdapter(AlertsEnum.Adapter.class)
  public enum AlertsEnum {
    ALERT_UNSPECIFIED("ALERT_UNSPECIFIED"),
    
    WRONG_LOCATION("WRONG_LOCATION"),
    
    LOW_BATTERY("LOW_BATTERY"),
    
    LOW_ACTIVITY("LOW_ACTIVITY");

    private String value;

    AlertsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertsEnum fromValue(String value) {
      for (AlertsEnum b : AlertsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERTS = "alerts";
  @SerializedName(SERIALIZED_NAME_ALERTS)
  private List<AlertsEnum> alerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_BEACON_NAME = "beaconName";
  @SerializedName(SERIALIZED_NAME_BEACON_NAME)
  private String beaconName;

  public static final String SERIALIZED_NAME_ESTIMATED_LOW_BATTERY_DATE = "estimatedLowBatteryDate";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_LOW_BATTERY_DATE)
  private Date estimatedLowBatteryDate;

  public Diagnostics() {
  }

  public Diagnostics alerts(List<AlertsEnum> alerts) {
    this.alerts = alerts;
    return this;
  }

  public Diagnostics addAlertsItem(AlertsEnum alertsItem) {
    if (this.alerts == null) {
      this.alerts = new ArrayList<>();
    }
    this.alerts.add(alertsItem);
    return this;
  }

  /**
   * An unordered list of Alerts that the beacon has.
   * @return alerts
   */
  @javax.annotation.Nullable
  public List<AlertsEnum> getAlerts() {
    return alerts;
  }

  public void setAlerts(List<AlertsEnum> alerts) {
    this.alerts = alerts;
  }


  public Diagnostics beaconName(String beaconName) {
    this.beaconName = beaconName;
    return this;
  }

  /**
   * Resource name of the beacon. For Eddystone-EID beacons, this may be the beacon&#39;s current EID, or the beacon&#39;s \&quot;stable\&quot; Eddystone-UID.
   * @return beaconName
   */
  @javax.annotation.Nullable
  public String getBeaconName() {
    return beaconName;
  }

  public void setBeaconName(String beaconName) {
    this.beaconName = beaconName;
  }


  public Diagnostics estimatedLowBatteryDate(Date estimatedLowBatteryDate) {
    this.estimatedLowBatteryDate = estimatedLowBatteryDate;
    return this;
  }

  /**
   * Get estimatedLowBatteryDate
   * @return estimatedLowBatteryDate
   */
  @javax.annotation.Nullable
  public Date getEstimatedLowBatteryDate() {
    return estimatedLowBatteryDate;
  }

  public void setEstimatedLowBatteryDate(Date estimatedLowBatteryDate) {
    this.estimatedLowBatteryDate = estimatedLowBatteryDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Diagnostics diagnostics = (Diagnostics) o;
    return Objects.equals(this.alerts, diagnostics.alerts) &&
        Objects.equals(this.beaconName, diagnostics.beaconName) &&
        Objects.equals(this.estimatedLowBatteryDate, diagnostics.estimatedLowBatteryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alerts, beaconName, estimatedLowBatteryDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Diagnostics {\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("    beaconName: ").append(toIndentedString(beaconName)).append("\n");
    sb.append("    estimatedLowBatteryDate: ").append(toIndentedString(estimatedLowBatteryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alerts");
    openapiFields.add("beaconName");
    openapiFields.add("estimatedLowBatteryDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Diagnostics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Diagnostics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Diagnostics is not found in the empty JSON string", Diagnostics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Diagnostics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Diagnostics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alerts") != null && !jsonObj.get("alerts").isJsonNull() && !jsonObj.get("alerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alerts` to be an array in the JSON string but got `%s`", jsonObj.get("alerts").toString()));
      }
      if ((jsonObj.get("beaconName") != null && !jsonObj.get("beaconName").isJsonNull()) && !jsonObj.get("beaconName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beaconName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beaconName").toString()));
      }
      // validate the optional field `estimatedLowBatteryDate`
      if (jsonObj.get("estimatedLowBatteryDate") != null && !jsonObj.get("estimatedLowBatteryDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("estimatedLowBatteryDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Diagnostics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Diagnostics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Diagnostics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Diagnostics.class));

       return (TypeAdapter<T>) new TypeAdapter<Diagnostics>() {
           @Override
           public void write(JsonWriter out, Diagnostics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Diagnostics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Diagnostics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Diagnostics
   * @throws IOException if the JSON string is invalid with respect to Diagnostics
   */
  public static Diagnostics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Diagnostics.class);
  }

  /**
   * Convert an instance of Diagnostics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

