/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Observation from './Observation';

/**
 * The GetInfoForObservedBeaconsRequest model module.
 * @module model/GetInfoForObservedBeaconsRequest
 * @version v1beta1
 */
class GetInfoForObservedBeaconsRequest {
    /**
     * Constructs a new <code>GetInfoForObservedBeaconsRequest</code>.
     * Request for beacon and attachment information about beacons that a mobile client has encountered \&quot;in the wild\&quot;.
     * @alias module:model/GetInfoForObservedBeaconsRequest
     */
    constructor() { 
        
        GetInfoForObservedBeaconsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetInfoForObservedBeaconsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetInfoForObservedBeaconsRequest} obj Optional instance to populate.
     * @return {module:model/GetInfoForObservedBeaconsRequest} The populated <code>GetInfoForObservedBeaconsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetInfoForObservedBeaconsRequest();

            if (data.hasOwnProperty('namespacedTypes')) {
                obj['namespacedTypes'] = ApiClient.convertToType(data['namespacedTypes'], ['String']);
            }
            if (data.hasOwnProperty('observations')) {
                obj['observations'] = ApiClient.convertToType(data['observations'], [Observation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetInfoForObservedBeaconsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetInfoForObservedBeaconsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['namespacedTypes'])) {
            throw new Error("Expected the field `namespacedTypes` to be an array in the JSON data but got " + data['namespacedTypes']);
        }
        if (data['observations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['observations'])) {
                throw new Error("Expected the field `observations` to be an array in the JSON data but got " + data['observations']);
            }
            // validate the optional field `observations` (array)
            for (const item of data['observations']) {
                Observation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts `*` to specify all types in all namespaces owned by the client. Optional.
 * @member {Array.<String>} namespacedTypes
 */
GetInfoForObservedBeaconsRequest.prototype['namespacedTypes'] = undefined;

/**
 * The beacons that the client has encountered. At least one must be given.
 * @member {Array.<module:model/Observation>} observations
 */
GetInfoForObservedBeaconsRequest.prototype['observations'] = undefined;






export default GetInfoForObservedBeaconsRequest;

