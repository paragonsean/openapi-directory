/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BeaconAttachment model module.
 * @module model/BeaconAttachment
 * @version v1beta1
 */
class BeaconAttachment {
    /**
     * Constructs a new <code>BeaconAttachment</code>.
     * Project-specific data associated with a beacon.
     * @alias module:model/BeaconAttachment
     */
    constructor() { 
        
        BeaconAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BeaconAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BeaconAttachment} obj Optional instance to populate.
     * @return {module:model/BeaconAttachment} The populated <code>BeaconAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BeaconAttachment();

            if (data.hasOwnProperty('attachmentName')) {
                obj['attachmentName'] = ApiClient.convertToType(data['attachmentName'], 'String');
            }
            if (data.hasOwnProperty('creationTimeMs')) {
                obj['creationTimeMs'] = ApiClient.convertToType(data['creationTimeMs'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'Blob');
            }
            if (data.hasOwnProperty('maxDistanceMeters')) {
                obj['maxDistanceMeters'] = ApiClient.convertToType(data['maxDistanceMeters'], 'Number');
            }
            if (data.hasOwnProperty('namespacedType')) {
                obj['namespacedType'] = ApiClient.convertToType(data['namespacedType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BeaconAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BeaconAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attachmentName'] && !(typeof data['attachmentName'] === 'string' || data['attachmentName'] instanceof String)) {
            throw new Error("Expected the field `attachmentName` to be a primitive type in the JSON string but got " + data['attachmentName']);
        }
        // ensure the json data is a string
        if (data['creationTimeMs'] && !(typeof data['creationTimeMs'] === 'string' || data['creationTimeMs'] instanceof String)) {
            throw new Error("Expected the field `creationTimeMs` to be a primitive type in the JSON string but got " + data['creationTimeMs']);
        }
        // ensure the json data is a string
        if (data['namespacedType'] && !(typeof data['namespacedType'] === 'string' || data['namespacedType'] instanceof String)) {
            throw new Error("Expected the field `namespacedType` to be a primitive type in the JSON string but got " + data['namespacedType']);
        }

        return true;
    }


}



/**
 * Resource name of this attachment. Attachment names have the format: beacons/ beacon_id/attachments/attachment_id. Leave this empty on creation.
 * @member {String} attachmentName
 */
BeaconAttachment.prototype['attachmentName'] = undefined;

/**
 * The UTC time when this attachment was created, in milliseconds since the UNIX epoch.
 * @member {String} creationTimeMs
 */
BeaconAttachment.prototype['creationTimeMs'] = undefined;

/**
 * An opaque data container for client-provided data. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.
 * @member {Blob} data
 */
BeaconAttachment.prototype['data'] = undefined;

/**
 * The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error.
 * @member {Number} maxDistanceMeters
 */
BeaconAttachment.prototype['maxDistanceMeters'] = undefined;

/**
 * Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`, for use by the client when parsing the `data` field. Required.
 * @member {String} namespacedType
 */
BeaconAttachment.prototype['namespacedType'] = undefined;






export default BeaconAttachment;

