/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvertisedId from './AdvertisedId';
import EphemeralIdRegistration from './EphemeralIdRegistration';
import IndoorLevel from './IndoorLevel';
import LatLng from './LatLng';

/**
 * The Beacon model module.
 * @module model/Beacon
 * @version v1beta1
 */
class Beacon {
    /**
     * Constructs a new <code>Beacon</code>.
     * Details of a beacon device.
     * @alias module:model/Beacon
     */
    constructor() { 
        
        Beacon.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Beacon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Beacon} obj Optional instance to populate.
     * @return {module:model/Beacon} The populated <code>Beacon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Beacon();

            if (data.hasOwnProperty('advertisedId')) {
                obj['advertisedId'] = AdvertisedId.constructFromObject(data['advertisedId']);
            }
            if (data.hasOwnProperty('beaconName')) {
                obj['beaconName'] = ApiClient.convertToType(data['beaconName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ephemeralIdRegistration')) {
                obj['ephemeralIdRegistration'] = EphemeralIdRegistration.constructFromObject(data['ephemeralIdRegistration']);
            }
            if (data.hasOwnProperty('expectedStability')) {
                obj['expectedStability'] = ApiClient.convertToType(data['expectedStability'], 'String');
            }
            if (data.hasOwnProperty('indoorLevel')) {
                obj['indoorLevel'] = IndoorLevel.constructFromObject(data['indoorLevel']);
            }
            if (data.hasOwnProperty('latLng')) {
                obj['latLng'] = LatLng.constructFromObject(data['latLng']);
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('provisioningKey')) {
                obj['provisioningKey'] = ApiClient.convertToType(data['provisioningKey'], 'Blob');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Beacon</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Beacon</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advertisedId`
        if (data['advertisedId']) { // data not null
          AdvertisedId.validateJSON(data['advertisedId']);
        }
        // ensure the json data is a string
        if (data['beaconName'] && !(typeof data['beaconName'] === 'string' || data['beaconName'] instanceof String)) {
            throw new Error("Expected the field `beaconName` to be a primitive type in the JSON string but got " + data['beaconName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `ephemeralIdRegistration`
        if (data['ephemeralIdRegistration']) { // data not null
          EphemeralIdRegistration.validateJSON(data['ephemeralIdRegistration']);
        }
        // ensure the json data is a string
        if (data['expectedStability'] && !(typeof data['expectedStability'] === 'string' || data['expectedStability'] instanceof String)) {
            throw new Error("Expected the field `expectedStability` to be a primitive type in the JSON string but got " + data['expectedStability']);
        }
        // validate the optional field `indoorLevel`
        if (data['indoorLevel']) { // data not null
          IndoorLevel.validateJSON(data['indoorLevel']);
        }
        // validate the optional field `latLng`
        if (data['latLng']) { // data not null
          LatLng.validateJSON(data['latLng']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvertisedId} advertisedId
 */
Beacon.prototype['advertisedId'] = undefined;

/**
 * Resource name of this beacon. A beacon name has the format \"beacons/N!beaconId\" where the beaconId is the base16 ID broadcast by the beacon and N is a code for the beacon's type. Possible values are `3` for Eddystone, `1` for iBeacon, or `5` for AltBeacon. This field must be left empty when registering. After reading a beacon, clients can use the name for future operations.
 * @member {String} beaconName
 */
Beacon.prototype['beaconName'] = undefined;

/**
 * Free text used to identify and describe the beacon. Maximum length 140 characters. Optional.
 * @member {String} description
 */
Beacon.prototype['description'] = undefined;

/**
 * @member {module:model/EphemeralIdRegistration} ephemeralIdRegistration
 */
Beacon.prototype['ephemeralIdRegistration'] = undefined;

/**
 * Expected location stability. This is set when the beacon is registered or updated, not automatically detected in any way. Optional.
 * @member {module:model/Beacon.ExpectedStabilityEnum} expectedStability
 */
Beacon.prototype['expectedStability'] = undefined;

/**
 * @member {module:model/IndoorLevel} indoorLevel
 */
Beacon.prototype['indoorLevel'] = undefined;

/**
 * @member {module:model/LatLng} latLng
 */
Beacon.prototype['latLng'] = undefined;

/**
 * The [Google Places API](/places/place-id) Place ID of the place where the beacon is deployed. This is given when the beacon is registered or updated, not automatically detected in any way. Optional.
 * @member {String} placeId
 */
Beacon.prototype['placeId'] = undefined;

/**
 * Properties of the beacon device, for example battery type or firmware version. Optional.
 * @member {Object.<String, String>} properties
 */
Beacon.prototype['properties'] = undefined;

/**
 * Some beacons may require a user to provide an authorization key before changing any of its configuration (e.g. broadcast frames, transmit power). This field provides a place to store and control access to that key. This field is populated in responses to `GET /v1beta1/beacons/3!beaconId` from users with write access to the given beacon. That is to say: If the user is authorized to write the beacon's confidential data in the service, the service considers them authorized to configure the beacon. Note that this key grants nothing on the service, only on the beacon itself.
 * @member {Blob} provisioningKey
 */
Beacon.prototype['provisioningKey'] = undefined;

/**
 * Current status of the beacon. Required.
 * @member {module:model/Beacon.StatusEnum} status
 */
Beacon.prototype['status'] = undefined;





/**
 * Allowed values for the <code>expectedStability</code> property.
 * @enum {String}
 * @readonly
 */
Beacon['ExpectedStabilityEnum'] = {

    /**
     * value: "STABILITY_UNSPECIFIED"
     * @const
     */
    "STABILITY_UNSPECIFIED": "STABILITY_UNSPECIFIED",

    /**
     * value: "STABLE"
     * @const
     */
    "STABLE": "STABLE",

    /**
     * value: "PORTABLE"
     * @const
     */
    "PORTABLE": "PORTABLE",

    /**
     * value: "MOBILE"
     * @const
     */
    "MOBILE": "MOBILE",

    /**
     * value: "ROVING"
     * @const
     */
    "ROVING": "ROVING"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Beacon['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DECOMMISSIONED"
     * @const
     */
    "DECOMMISSIONED": "DECOMMISSIONED",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default Beacon;

