/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvertisedId from './AdvertisedId';
import AttachmentInfo from './AttachmentInfo';

/**
 * The BeaconInfo model module.
 * @module model/BeaconInfo
 * @version v1beta1
 */
class BeaconInfo {
    /**
     * Constructs a new <code>BeaconInfo</code>.
     * A subset of beacon information served via the &#x60;beaconinfo.getforobserved&#x60; method, which you call when users of your app encounter your beacons.
     * @alias module:model/BeaconInfo
     */
    constructor() { 
        
        BeaconInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BeaconInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BeaconInfo} obj Optional instance to populate.
     * @return {module:model/BeaconInfo} The populated <code>BeaconInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BeaconInfo();

            if (data.hasOwnProperty('advertisedId')) {
                obj['advertisedId'] = AdvertisedId.constructFromObject(data['advertisedId']);
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [AttachmentInfo]);
            }
            if (data.hasOwnProperty('beaconName')) {
                obj['beaconName'] = ApiClient.convertToType(data['beaconName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BeaconInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BeaconInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advertisedId`
        if (data['advertisedId']) { // data not null
          AdvertisedId.validateJSON(data['advertisedId']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                AttachmentInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['beaconName'] && !(typeof data['beaconName'] === 'string' || data['beaconName'] instanceof String)) {
            throw new Error("Expected the field `beaconName` to be a primitive type in the JSON string but got " + data['beaconName']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvertisedId} advertisedId
 */
BeaconInfo.prototype['advertisedId'] = undefined;

/**
 * Attachments matching the type(s) requested. May be empty if no attachment types were requested.
 * @member {Array.<module:model/AttachmentInfo>} attachments
 */
BeaconInfo.prototype['attachments'] = undefined;

/**
 * The name under which the beacon is registered.
 * @member {String} beaconName
 */
BeaconInfo.prototype['beaconName'] = undefined;






export default BeaconInfo;

