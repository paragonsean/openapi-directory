/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDate from './ModelDate';

/**
 * The Diagnostics model module.
 * @module model/Diagnostics
 * @version v1beta1
 */
class Diagnostics {
    /**
     * Constructs a new <code>Diagnostics</code>.
     * Diagnostics for a single beacon.
     * @alias module:model/Diagnostics
     */
    constructor() { 
        
        Diagnostics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Diagnostics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Diagnostics} obj Optional instance to populate.
     * @return {module:model/Diagnostics} The populated <code>Diagnostics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Diagnostics();

            if (data.hasOwnProperty('alerts')) {
                obj['alerts'] = ApiClient.convertToType(data['alerts'], ['String']);
            }
            if (data.hasOwnProperty('beaconName')) {
                obj['beaconName'] = ApiClient.convertToType(data['beaconName'], 'String');
            }
            if (data.hasOwnProperty('estimatedLowBatteryDate')) {
                obj['estimatedLowBatteryDate'] = ModelDate.constructFromObject(data['estimatedLowBatteryDate']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Diagnostics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Diagnostics</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alerts'])) {
            throw new Error("Expected the field `alerts` to be an array in the JSON data but got " + data['alerts']);
        }
        // ensure the json data is a string
        if (data['beaconName'] && !(typeof data['beaconName'] === 'string' || data['beaconName'] instanceof String)) {
            throw new Error("Expected the field `beaconName` to be a primitive type in the JSON string but got " + data['beaconName']);
        }
        // validate the optional field `estimatedLowBatteryDate`
        if (data['estimatedLowBatteryDate']) { // data not null
          ModelDate.validateJSON(data['estimatedLowBatteryDate']);
        }

        return true;
    }


}



/**
 * An unordered list of Alerts that the beacon has.
 * @member {Array.<module:model/Diagnostics.AlertsEnum>} alerts
 */
Diagnostics.prototype['alerts'] = undefined;

/**
 * Resource name of the beacon. For Eddystone-EID beacons, this may be the beacon's current EID, or the beacon's \"stable\" Eddystone-UID.
 * @member {String} beaconName
 */
Diagnostics.prototype['beaconName'] = undefined;

/**
 * @member {module:model/ModelDate} estimatedLowBatteryDate
 */
Diagnostics.prototype['estimatedLowBatteryDate'] = undefined;





/**
 * Allowed values for the <code>alerts</code> property.
 * @enum {String}
 * @readonly
 */
Diagnostics['AlertsEnum'] = {

    /**
     * value: "ALERT_UNSPECIFIED"
     * @const
     */
    "ALERT_UNSPECIFIED": "ALERT_UNSPECIFIED",

    /**
     * value: "WRONG_LOCATION"
     * @const
     */
    "WRONG_LOCATION": "WRONG_LOCATION",

    /**
     * value: "LOW_BATTERY"
     * @const
     */
    "LOW_BATTERY": "LOW_BATTERY",

    /**
     * value: "LOW_ACTIVITY"
     * @const
     */
    "LOW_ACTIVITY": "LOW_ACTIVITY"
};



export default Diagnostics;

