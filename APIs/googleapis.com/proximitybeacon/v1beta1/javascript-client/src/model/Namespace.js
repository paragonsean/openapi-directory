/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Namespace model module.
 * @module model/Namespace
 * @version v1beta1
 */
class Namespace {
    /**
     * Constructs a new <code>Namespace</code>.
     * An attachment namespace defines read and write access for all the attachments created under it. Each namespace is globally unique, and owned by one project which is the only project that can create attachments under it.
     * @alias module:model/Namespace
     */
    constructor() { 
        
        Namespace.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Namespace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Namespace} obj Optional instance to populate.
     * @return {module:model/Namespace} The populated <code>Namespace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Namespace();

            if (data.hasOwnProperty('namespaceName')) {
                obj['namespaceName'] = ApiClient.convertToType(data['namespaceName'], 'String');
            }
            if (data.hasOwnProperty('servingVisibility')) {
                obj['servingVisibility'] = ApiClient.convertToType(data['servingVisibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Namespace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Namespace</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namespaceName'] && !(typeof data['namespaceName'] === 'string' || data['namespaceName'] instanceof String)) {
            throw new Error("Expected the field `namespaceName` to be a primitive type in the JSON string but got " + data['namespaceName']);
        }
        // ensure the json data is a string
        if (data['servingVisibility'] && !(typeof data['servingVisibility'] === 'string' || data['servingVisibility'] instanceof String)) {
            throw new Error("Expected the field `servingVisibility` to be a primitive type in the JSON string but got " + data['servingVisibility']);
        }

        return true;
    }


}



/**
 * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
 * @member {String} namespaceName
 */
Namespace.prototype['namespaceName'] = undefined;

/**
 * Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.
 * @member {module:model/Namespace.ServingVisibilityEnum} servingVisibility
 */
Namespace.prototype['servingVisibility'] = undefined;





/**
 * Allowed values for the <code>servingVisibility</code> property.
 * @enum {String}
 * @readonly
 */
Namespace['ServingVisibilityEnum'] = {

    /**
     * value: "VISIBILITY_UNSPECIFIED"
     * @const
     */
    "VISIBILITY_UNSPECIFIED": "VISIBILITY_UNSPECIFIED",

    /**
     * value: "UNLISTED"
     * @const
     */
    "UNLISTED": "UNLISTED",

    /**
     * value: "PUBLIC"
     * @const
     */
    "PUBLIC": "PUBLIC"
};



export default Namespace;

