/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdvertisedId model module.
 * @module model/AdvertisedId
 * @version v1beta1
 */
class AdvertisedId {
    /**
     * Constructs a new <code>AdvertisedId</code>.
     * Defines a unique identifier of a beacon as broadcast by the device.
     * @alias module:model/AdvertisedId
     */
    constructor() { 
        
        AdvertisedId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdvertisedId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvertisedId} obj Optional instance to populate.
     * @return {module:model/AdvertisedId} The populated <code>AdvertisedId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvertisedId();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Blob');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvertisedId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvertisedId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The actual beacon identifier, as broadcast by the beacon hardware. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.
 * @member {Blob} id
 */
AdvertisedId.prototype['id'] = undefined;

/**
 * Specifies the identifier type. Required.
 * @member {module:model/AdvertisedId.TypeEnum} type
 */
AdvertisedId.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AdvertisedId['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "EDDYSTONE"
     * @const
     */
    "EDDYSTONE": "EDDYSTONE",

    /**
     * value: "IBEACON"
     * @const
     */
    "IBEACON": "IBEACON",

    /**
     * value: "ALTBEACON"
     * @const
     */
    "ALTBEACON": "ALTBEACON",

    /**
     * value: "EDDYSTONE_EID"
     * @const
     */
    "EDDYSTONE_EID": "EDDYSTONE_EID"
};



export default AdvertisedId;

