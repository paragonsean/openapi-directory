/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvertisedId from './AdvertisedId';

/**
 * The Observation model module.
 * @module model/Observation
 * @version v1beta1
 */
class Observation {
    /**
     * Constructs a new <code>Observation</code>.
     * Represents one beacon observed once.
     * @alias module:model/Observation
     */
    constructor() { 
        
        Observation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Observation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Observation} obj Optional instance to populate.
     * @return {module:model/Observation} The populated <code>Observation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Observation();

            if (data.hasOwnProperty('advertisedId')) {
                obj['advertisedId'] = AdvertisedId.constructFromObject(data['advertisedId']);
            }
            if (data.hasOwnProperty('telemetry')) {
                obj['telemetry'] = ApiClient.convertToType(data['telemetry'], 'Blob');
            }
            if (data.hasOwnProperty('timestampMs')) {
                obj['timestampMs'] = ApiClient.convertToType(data['timestampMs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Observation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Observation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `advertisedId`
        if (data['advertisedId']) { // data not null
          AdvertisedId.validateJSON(data['advertisedId']);
        }
        // ensure the json data is a string
        if (data['timestampMs'] && !(typeof data['timestampMs'] === 'string' || data['timestampMs'] instanceof String)) {
            throw new Error("Expected the field `timestampMs` to be a primitive type in the JSON string but got " + data['timestampMs']);
        }

        return true;
    }


}



/**
 * @member {module:model/AdvertisedId} advertisedId
 */
Observation.prototype['advertisedId'] = undefined;

/**
 * The array of telemetry bytes received from the beacon. The server is responsible for parsing it. This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.
 * @member {Blob} telemetry
 */
Observation.prototype['telemetry'] = undefined;

/**
 * Time when the beacon was observed.
 * @member {String} timestampMs
 */
Observation.prototype['timestampMs'] = undefined;






export default Observation;

