/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EphemeralIdRegistration model module.
 * @module model/EphemeralIdRegistration
 * @version v1beta1
 */
class EphemeralIdRegistration {
    /**
     * Constructs a new <code>EphemeralIdRegistration</code>.
     * Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely registering an Eddystone-EID beacon with the service are supported: 1. Perform an ECDH key exchange via this API, including a previous call to &#x60;GET /v1beta1/eidparams&#x60;. In this case the fields &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; should be populated and &#x60;beacon_identity_key&#x60; should not be populated. This method ensures that only the two parties in the ECDH key exchange can compute the identity key, which becomes a secret between them. 2. Derive or obtain the beacon&#39;s identity key via other secure means (perhaps an ECDH key exchange between the beacon and a mobile device or any other secure method), and then submit the resulting identity key to the service. In this case &#x60;beacon_identity_key&#x60; field should be populated, and neither of &#x60;beacon_ecdh_public_key&#x60; nor &#x60;service_ecdh_public_key&#x60; fields should be. The security of this method depends on how securely the parties involved (in particular the bluetooth client) handle the identity key, and obviously on how securely the identity key was generated. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
     * @alias module:model/EphemeralIdRegistration
     */
    constructor() { 
        
        EphemeralIdRegistration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EphemeralIdRegistration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EphemeralIdRegistration} obj Optional instance to populate.
     * @return {module:model/EphemeralIdRegistration} The populated <code>EphemeralIdRegistration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EphemeralIdRegistration();

            if (data.hasOwnProperty('beaconEcdhPublicKey')) {
                obj['beaconEcdhPublicKey'] = ApiClient.convertToType(data['beaconEcdhPublicKey'], 'Blob');
            }
            if (data.hasOwnProperty('beaconIdentityKey')) {
                obj['beaconIdentityKey'] = ApiClient.convertToType(data['beaconIdentityKey'], 'Blob');
            }
            if (data.hasOwnProperty('initialClockValue')) {
                obj['initialClockValue'] = ApiClient.convertToType(data['initialClockValue'], 'String');
            }
            if (data.hasOwnProperty('initialEid')) {
                obj['initialEid'] = ApiClient.convertToType(data['initialEid'], 'Blob');
            }
            if (data.hasOwnProperty('rotationPeriodExponent')) {
                obj['rotationPeriodExponent'] = ApiClient.convertToType(data['rotationPeriodExponent'], 'Number');
            }
            if (data.hasOwnProperty('serviceEcdhPublicKey')) {
                obj['serviceEcdhPublicKey'] = ApiClient.convertToType(data['serviceEcdhPublicKey'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EphemeralIdRegistration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EphemeralIdRegistration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['initialClockValue'] && !(typeof data['initialClockValue'] === 'string' || data['initialClockValue'] instanceof String)) {
            throw new Error("Expected the field `initialClockValue` to be a primitive type in the JSON string but got " + data['initialClockValue']);
        }

        return true;
    }


}



/**
 * The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.
 * @member {Blob} beaconEcdhPublicKey
 */
EphemeralIdRegistration.prototype['beaconEcdhPublicKey'] = undefined;

/**
 * The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be populated.
 * @member {Blob} beaconIdentityKey
 */
EphemeralIdRegistration.prototype['beaconIdentityKey'] = undefined;

/**
 * The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.
 * @member {String} initialClockValue
 */
EphemeralIdRegistration.prototype['initialClockValue'] = undefined;

/**
 * An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`, and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key` and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm that the key exchange process was successful.
 * @member {Blob} initialEid
 */
EphemeralIdRegistration.prototype['initialEid'] = undefined;

/**
 * Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.
 * @member {Number} rotationPeriodExponent
 */
EphemeralIdRegistration.prototype['rotationPeriodExponent'] = undefined;

/**
 * The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.
 * @member {Blob} serviceEcdhPublicKey
 */
EphemeralIdRegistration.prototype['serviceEcdhPublicKey'] = undefined;






export default EphemeralIdRegistration;

