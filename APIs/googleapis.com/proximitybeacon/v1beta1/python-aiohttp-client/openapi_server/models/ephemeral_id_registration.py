# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EphemeralIdRegistration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beacon_ecdh_public_key: str=None, beacon_identity_key: str=None, initial_clock_value: str=None, initial_eid: str=None, rotation_period_exponent: int=None, service_ecdh_public_key: str=None):
        """EphemeralIdRegistration - a model defined in OpenAPI

        :param beacon_ecdh_public_key: The beacon_ecdh_public_key of this EphemeralIdRegistration.
        :param beacon_identity_key: The beacon_identity_key of this EphemeralIdRegistration.
        :param initial_clock_value: The initial_clock_value of this EphemeralIdRegistration.
        :param initial_eid: The initial_eid of this EphemeralIdRegistration.
        :param rotation_period_exponent: The rotation_period_exponent of this EphemeralIdRegistration.
        :param service_ecdh_public_key: The service_ecdh_public_key of this EphemeralIdRegistration.
        """
        self.openapi_types = {
            'beacon_ecdh_public_key': str,
            'beacon_identity_key': str,
            'initial_clock_value': str,
            'initial_eid': str,
            'rotation_period_exponent': int,
            'service_ecdh_public_key': str
        }

        self.attribute_map = {
            'beacon_ecdh_public_key': 'beaconEcdhPublicKey',
            'beacon_identity_key': 'beaconIdentityKey',
            'initial_clock_value': 'initialClockValue',
            'initial_eid': 'initialEid',
            'rotation_period_exponent': 'rotationPeriodExponent',
            'service_ecdh_public_key': 'serviceEcdhPublicKey'
        }

        self._beacon_ecdh_public_key = beacon_ecdh_public_key
        self._beacon_identity_key = beacon_identity_key
        self._initial_clock_value = initial_clock_value
        self._initial_eid = initial_eid
        self._rotation_period_exponent = rotation_period_exponent
        self._service_ecdh_public_key = service_ecdh_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EphemeralIdRegistration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EphemeralIdRegistration of this EphemeralIdRegistration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beacon_ecdh_public_key(self):
        """Gets the beacon_ecdh_public_key of this EphemeralIdRegistration.

        The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.

        :return: The beacon_ecdh_public_key of this EphemeralIdRegistration.
        :rtype: str
        """
        return self._beacon_ecdh_public_key

    @beacon_ecdh_public_key.setter
    def beacon_ecdh_public_key(self, beacon_ecdh_public_key):
        """Sets the beacon_ecdh_public_key of this EphemeralIdRegistration.

        The beacon's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `service_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.

        :param beacon_ecdh_public_key: The beacon_ecdh_public_key of this EphemeralIdRegistration.
        :type beacon_ecdh_public_key: str
        """

        self._beacon_ecdh_public_key = beacon_ecdh_public_key

    @property
    def beacon_identity_key(self):
        """Gets the beacon_identity_key of this EphemeralIdRegistration.

        The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be populated.

        :return: The beacon_identity_key of this EphemeralIdRegistration.
        :rtype: str
        """
        return self._beacon_identity_key

    @beacon_identity_key.setter
    def beacon_identity_key(self, beacon_identity_key):
        """Sets the beacon_identity_key of this EphemeralIdRegistration.

        The private key of the beacon. If this field is populated, `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be populated.

        :param beacon_identity_key: The beacon_identity_key of this EphemeralIdRegistration.
        :type beacon_identity_key: str
        """

        self._beacon_identity_key = beacon_identity_key

    @property
    def initial_clock_value(self):
        """Gets the initial_clock_value of this EphemeralIdRegistration.

        The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.

        :return: The initial_clock_value of this EphemeralIdRegistration.
        :rtype: str
        """
        return self._initial_clock_value

    @initial_clock_value.setter
    def initial_clock_value(self, initial_clock_value):
        """Sets the initial_clock_value of this EphemeralIdRegistration.

        The initial clock value of the beacon. The beacon's clock must have begun counting at this value immediately prior to transmitting this value to the resolving service. Significant delay in transmitting this value to the service risks registration or resolution failures. If a value is not provided, the default is zero.

        :param initial_clock_value: The initial_clock_value of this EphemeralIdRegistration.
        :type initial_clock_value: str
        """

        self._initial_clock_value = initial_clock_value

    @property
    def initial_eid(self):
        """Gets the initial_eid of this EphemeralIdRegistration.

        An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`, and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key` and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm that the key exchange process was successful.

        :return: The initial_eid of this EphemeralIdRegistration.
        :rtype: str
        """
        return self._initial_eid

    @initial_eid.setter
    def initial_eid(self, initial_eid):
        """Sets the initial_eid of this EphemeralIdRegistration.

        An initial ephemeral ID calculated using the clock value submitted as `initial_clock_value`, and the secret key generated by the Diffie-Hellman key exchange using `service_ecdh_public_key` and `service_ecdh_public_key`. This initial EID value will be used by the service to confirm that the key exchange process was successful.

        :param initial_eid: The initial_eid of this EphemeralIdRegistration.
        :type initial_eid: str
        """

        self._initial_eid = initial_eid

    @property
    def rotation_period_exponent(self):
        """Gets the rotation_period_exponent of this EphemeralIdRegistration.

        Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.

        :return: The rotation_period_exponent of this EphemeralIdRegistration.
        :rtype: int
        """
        return self._rotation_period_exponent

    @rotation_period_exponent.setter
    def rotation_period_exponent(self, rotation_period_exponent):
        """Sets the rotation_period_exponent of this EphemeralIdRegistration.

        Indicates the nominal period between each rotation of the beacon's ephemeral ID. \"Nominal\" because the beacon should randomize the actual interval. See [the spec at github](https://github.com/google/eddystone/tree/master/eddystone-eid) for details. This value corresponds to a power-of-two scaler on the beacon's clock: when the scaler value is K, the beacon will begin broadcasting a new ephemeral ID on average every 2^K seconds.

        :param rotation_period_exponent: The rotation_period_exponent of this EphemeralIdRegistration.
        :type rotation_period_exponent: int
        """

        self._rotation_period_exponent = rotation_period_exponent

    @property
    def service_ecdh_public_key(self):
        """Gets the service_ecdh_public_key of this EphemeralIdRegistration.

        The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.

        :return: The service_ecdh_public_key of this EphemeralIdRegistration.
        :rtype: str
        """
        return self._service_ecdh_public_key

    @service_ecdh_public_key.setter
    def service_ecdh_public_key(self, service_ecdh_public_key):
        """Sets the service_ecdh_public_key of this EphemeralIdRegistration.

        The service's public key used for the Elliptic curve Diffie-Hellman key exchange. When this field is populated, `beacon_ecdh_public_key` must also be populated, and `beacon_identity_key` must not be.

        :param service_ecdh_public_key: The service_ecdh_public_key of this EphemeralIdRegistration.
        :type service_ecdh_public_key: str
        """

        self._service_ecdh_public_key = service_ecdh_public_key
