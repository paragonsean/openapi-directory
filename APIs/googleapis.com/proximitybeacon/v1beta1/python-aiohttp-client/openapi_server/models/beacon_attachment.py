# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BeaconAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_name: str=None, creation_time_ms: str=None, data: str=None, max_distance_meters: float=None, namespaced_type: str=None):
        """BeaconAttachment - a model defined in OpenAPI

        :param attachment_name: The attachment_name of this BeaconAttachment.
        :param creation_time_ms: The creation_time_ms of this BeaconAttachment.
        :param data: The data of this BeaconAttachment.
        :param max_distance_meters: The max_distance_meters of this BeaconAttachment.
        :param namespaced_type: The namespaced_type of this BeaconAttachment.
        """
        self.openapi_types = {
            'attachment_name': str,
            'creation_time_ms': str,
            'data': str,
            'max_distance_meters': float,
            'namespaced_type': str
        }

        self.attribute_map = {
            'attachment_name': 'attachmentName',
            'creation_time_ms': 'creationTimeMs',
            'data': 'data',
            'max_distance_meters': 'maxDistanceMeters',
            'namespaced_type': 'namespacedType'
        }

        self._attachment_name = attachment_name
        self._creation_time_ms = creation_time_ms
        self._data = data
        self._max_distance_meters = max_distance_meters
        self._namespaced_type = namespaced_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeaconAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeaconAttachment of this BeaconAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_name(self):
        """Gets the attachment_name of this BeaconAttachment.

        Resource name of this attachment. Attachment names have the format: beacons/ beacon_id/attachments/attachment_id. Leave this empty on creation.

        :return: The attachment_name of this BeaconAttachment.
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this BeaconAttachment.

        Resource name of this attachment. Attachment names have the format: beacons/ beacon_id/attachments/attachment_id. Leave this empty on creation.

        :param attachment_name: The attachment_name of this BeaconAttachment.
        :type attachment_name: str
        """

        self._attachment_name = attachment_name

    @property
    def creation_time_ms(self):
        """Gets the creation_time_ms of this BeaconAttachment.

        The UTC time when this attachment was created, in milliseconds since the UNIX epoch.

        :return: The creation_time_ms of this BeaconAttachment.
        :rtype: str
        """
        return self._creation_time_ms

    @creation_time_ms.setter
    def creation_time_ms(self, creation_time_ms):
        """Sets the creation_time_ms of this BeaconAttachment.

        The UTC time when this attachment was created, in milliseconds since the UNIX epoch.

        :param creation_time_ms: The creation_time_ms of this BeaconAttachment.
        :type creation_time_ms: str
        """

        self._creation_time_ms = creation_time_ms

    @property
    def data(self):
        """Gets the data of this BeaconAttachment.

        An opaque data container for client-provided data. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.

        :return: The data of this BeaconAttachment.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BeaconAttachment.

        An opaque data container for client-provided data. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. Required.

        :param data: The data of this BeaconAttachment.
        :type data: str
        """

        self._data = data

    @property
    def max_distance_meters(self):
        """Gets the max_distance_meters of this BeaconAttachment.

        The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error.

        :return: The max_distance_meters of this BeaconAttachment.
        :rtype: float
        """
        return self._max_distance_meters

    @max_distance_meters.setter
    def max_distance_meters(self, max_distance_meters):
        """Sets the max_distance_meters of this BeaconAttachment.

        The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection. Negative values are invalid and return an error.

        :param max_distance_meters: The max_distance_meters of this BeaconAttachment.
        :type max_distance_meters: float
        """

        self._max_distance_meters = max_distance_meters

    @property
    def namespaced_type(self):
        """Gets the namespaced_type of this BeaconAttachment.

        Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`, for use by the client when parsing the `data` field. Required.

        :return: The namespaced_type of this BeaconAttachment.
        :rtype: str
        """
        return self._namespaced_type

    @namespaced_type.setter
    def namespaced_type(self, namespaced_type):
        """Sets the namespaced_type of this BeaconAttachment.

        Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type. Namespace provides type separation between clients. Type describes the type of `data`, for use by the client when parsing the `data` field. Required.

        :param namespaced_type: The namespaced_type of this BeaconAttachment.
        :type namespaced_type: str
        """

        self._namespaced_type = namespaced_type
