# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beacon import Beacon
from openapi_server import util


class ListBeaconsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beacons: List[Beacon]=None, next_page_token: str=None, total_count: str=None):
        """ListBeaconsResponse - a model defined in OpenAPI

        :param beacons: The beacons of this ListBeaconsResponse.
        :param next_page_token: The next_page_token of this ListBeaconsResponse.
        :param total_count: The total_count of this ListBeaconsResponse.
        """
        self.openapi_types = {
            'beacons': List[Beacon],
            'next_page_token': str,
            'total_count': str
        }

        self.attribute_map = {
            'beacons': 'beacons',
            'next_page_token': 'nextPageToken',
            'total_count': 'totalCount'
        }

        self._beacons = beacons
        self._next_page_token = next_page_token
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListBeaconsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListBeaconsResponse of this ListBeaconsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beacons(self):
        """Gets the beacons of this ListBeaconsResponse.

        The beacons that matched the search criteria.

        :return: The beacons of this ListBeaconsResponse.
        :rtype: List[Beacon]
        """
        return self._beacons

    @beacons.setter
    def beacons(self, beacons):
        """Sets the beacons of this ListBeaconsResponse.

        The beacons that matched the search criteria.

        :param beacons: The beacons of this ListBeaconsResponse.
        :type beacons: List[Beacon]
        """

        self._beacons = beacons

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListBeaconsResponse.

        An opaque pagination token that the client may provide in their next request to retrieve the next page of results.

        :return: The next_page_token of this ListBeaconsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListBeaconsResponse.

        An opaque pagination token that the client may provide in their next request to retrieve the next page of results.

        :param next_page_token: The next_page_token of this ListBeaconsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def total_count(self):
        """Gets the total_count of this ListBeaconsResponse.

        Estimate of the total number of beacons matched by the query. Higher values may be less accurate.

        :return: The total_count of this ListBeaconsResponse.
        :rtype: str
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ListBeaconsResponse.

        Estimate of the total number of beacons matched by the query. Higher values may be less accurate.

        :param total_count: The total_count of this ListBeaconsResponse.
        :type total_count: str
        """

        self._total_count = total_count
