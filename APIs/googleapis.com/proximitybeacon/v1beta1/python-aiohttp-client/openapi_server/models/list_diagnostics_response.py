# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostics import Diagnostics
from openapi_server import util


class ListDiagnosticsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, diagnostics: List[Diagnostics]=None, next_page_token: str=None):
        """ListDiagnosticsResponse - a model defined in OpenAPI

        :param diagnostics: The diagnostics of this ListDiagnosticsResponse.
        :param next_page_token: The next_page_token of this ListDiagnosticsResponse.
        """
        self.openapi_types = {
            'diagnostics': List[Diagnostics],
            'next_page_token': str
        }

        self.attribute_map = {
            'diagnostics': 'diagnostics',
            'next_page_token': 'nextPageToken'
        }

        self._diagnostics = diagnostics
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDiagnosticsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDiagnosticsResponse of this ListDiagnosticsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ListDiagnosticsResponse.

        The diagnostics matching the given request.

        :return: The diagnostics of this ListDiagnosticsResponse.
        :rtype: List[Diagnostics]
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ListDiagnosticsResponse.

        The diagnostics matching the given request.

        :param diagnostics: The diagnostics of this ListDiagnosticsResponse.
        :type diagnostics: List[Diagnostics]
        """

        self._diagnostics = diagnostics

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListDiagnosticsResponse.

        Token that can be used for pagination. Returned only if the request matches more beacons than can be returned in this response.

        :return: The next_page_token of this ListDiagnosticsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListDiagnosticsResponse.

        Token that can be used for pagination. Returned only if the request matches more beacons than can be returned in this response.

        :param next_page_token: The next_page_token of this ListDiagnosticsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
