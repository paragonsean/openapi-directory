# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advertised_id import AdvertisedId
from openapi_server import util


class Observation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertised_id: AdvertisedId=None, telemetry: str=None, timestamp_ms: str=None):
        """Observation - a model defined in OpenAPI

        :param advertised_id: The advertised_id of this Observation.
        :param telemetry: The telemetry of this Observation.
        :param timestamp_ms: The timestamp_ms of this Observation.
        """
        self.openapi_types = {
            'advertised_id': AdvertisedId,
            'telemetry': str,
            'timestamp_ms': str
        }

        self.attribute_map = {
            'advertised_id': 'advertisedId',
            'telemetry': 'telemetry',
            'timestamp_ms': 'timestampMs'
        }

        self._advertised_id = advertised_id
        self._telemetry = telemetry
        self._timestamp_ms = timestamp_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Observation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Observation of this Observation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertised_id(self):
        """Gets the advertised_id of this Observation.


        :return: The advertised_id of this Observation.
        :rtype: AdvertisedId
        """
        return self._advertised_id

    @advertised_id.setter
    def advertised_id(self, advertised_id):
        """Sets the advertised_id of this Observation.


        :param advertised_id: The advertised_id of this Observation.
        :type advertised_id: AdvertisedId
        """

        self._advertised_id = advertised_id

    @property
    def telemetry(self):
        """Gets the telemetry of this Observation.

        The array of telemetry bytes received from the beacon. The server is responsible for parsing it. This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.

        :return: The telemetry of this Observation.
        :rtype: str
        """
        return self._telemetry

    @telemetry.setter
    def telemetry(self, telemetry):
        """Sets the telemetry of this Observation.

        The array of telemetry bytes received from the beacon. The server is responsible for parsing it. This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.

        :param telemetry: The telemetry of this Observation.
        :type telemetry: str
        """

        self._telemetry = telemetry

    @property
    def timestamp_ms(self):
        """Gets the timestamp_ms of this Observation.

        Time when the beacon was observed.

        :return: The timestamp_ms of this Observation.
        :rtype: str
        """
        return self._timestamp_ms

    @timestamp_ms.setter
    def timestamp_ms(self, timestamp_ms):
        """Sets the timestamp_ms of this Observation.

        Time when the beacon was observed.

        :param timestamp_ms: The timestamp_ms of this Observation.
        :type timestamp_ms: str
        """

        self._timestamp_ms = timestamp_ms
