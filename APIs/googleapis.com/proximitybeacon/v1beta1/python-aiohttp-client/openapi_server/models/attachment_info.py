# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachmentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, max_distance_meters: float=None, namespaced_type: str=None):
        """AttachmentInfo - a model defined in OpenAPI

        :param data: The data of this AttachmentInfo.
        :param max_distance_meters: The max_distance_meters of this AttachmentInfo.
        :param namespaced_type: The namespaced_type of this AttachmentInfo.
        """
        self.openapi_types = {
            'data': str,
            'max_distance_meters': float,
            'namespaced_type': str
        }

        self.attribute_map = {
            'data': 'data',
            'max_distance_meters': 'maxDistanceMeters',
            'namespaced_type': 'namespacedType'
        }

        self._data = data
        self._max_distance_meters = max_distance_meters
        self._namespaced_type = namespaced_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachmentInfo of this AttachmentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AttachmentInfo.

        An opaque data container for client-provided data.

        :return: The data of this AttachmentInfo.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AttachmentInfo.

        An opaque data container for client-provided data.

        :param data: The data of this AttachmentInfo.
        :type data: str
        """

        self._data = data

    @property
    def max_distance_meters(self):
        """Gets the max_distance_meters of this AttachmentInfo.

        The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection.

        :return: The max_distance_meters of this AttachmentInfo.
        :rtype: float
        """
        return self._max_distance_meters

    @max_distance_meters.setter
    def max_distance_meters(self, max_distance_meters):
        """Sets the max_distance_meters of this AttachmentInfo.

        The distance away from the beacon at which this attachment should be delivered to a mobile app. Setting this to a value greater than zero indicates that the app should behave as if the beacon is \"seen\" when the mobile device is less than this distance away from the beacon. Different attachments on the same beacon can have different max distances. Note that even though this value is expressed with fractional meter precision, real-world behavior is likley to be much less precise than one meter, due to the nature of current Bluetooth radio technology. Optional. When not set or zero, the attachment should be delivered at the beacon's outer limit of detection.

        :param max_distance_meters: The max_distance_meters of this AttachmentInfo.
        :type max_distance_meters: float
        """

        self._max_distance_meters = max_distance_meters

    @property
    def namespaced_type(self):
        """Gets the namespaced_type of this AttachmentInfo.

        Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type, for example scrupulous-wombat-12345/welcome-message

        :return: The namespaced_type of this AttachmentInfo.
        :rtype: str
        """
        return self._namespaced_type

    @namespaced_type.setter
    def namespaced_type(self, namespaced_type):
        """Sets the namespaced_type of this AttachmentInfo.

        Specifies what kind of attachment this is. Tells a client how to interpret the `data` field. Format is namespace/type, for example scrupulous-wombat-12345/welcome-message

        :param namespaced_type: The namespaced_type of this AttachmentInfo.
        :type namespaced_type: str
        """

        self._namespaced_type = namespaced_type
