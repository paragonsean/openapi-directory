# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Namespace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace_name: str=None, serving_visibility: str=None):
        """Namespace - a model defined in OpenAPI

        :param namespace_name: The namespace_name of this Namespace.
        :param serving_visibility: The serving_visibility of this Namespace.
        """
        self.openapi_types = {
            'namespace_name': str,
            'serving_visibility': str
        }

        self.attribute_map = {
            'namespace_name': 'namespaceName',
            'serving_visibility': 'servingVisibility'
        }

        self._namespace_name = namespace_name
        self._serving_visibility = serving_visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Namespace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Namespace of this Namespace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace_name(self):
        """Gets the namespace_name of this Namespace.

        Resource name of this namespace. Namespaces names have the format: namespaces/namespace.

        :return: The namespace_name of this Namespace.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this Namespace.

        Resource name of this namespace. Namespaces names have the format: namespaces/namespace.

        :param namespace_name: The namespace_name of this Namespace.
        :type namespace_name: str
        """

        self._namespace_name = namespace_name

    @property
    def serving_visibility(self):
        """Gets the serving_visibility of this Namespace.

        Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.

        :return: The serving_visibility of this Namespace.
        :rtype: str
        """
        return self._serving_visibility

    @serving_visibility.setter
    def serving_visibility(self, serving_visibility):
        """Sets the serving_visibility of this Namespace.

        Specifies what clients may receive attachments under this namespace via `beaconinfo.getforobserved`.

        :param serving_visibility: The serving_visibility of this Namespace.
        :type serving_visibility: str
        """
        allowed_values = ["VISIBILITY_UNSPECIFIED", "UNLISTED", "PUBLIC"]  # noqa: E501
        if serving_visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `serving_visibility` ({0}), must be one of {1}"
                .format(serving_visibility, allowed_values)
            )

        self._serving_visibility = serving_visibility
