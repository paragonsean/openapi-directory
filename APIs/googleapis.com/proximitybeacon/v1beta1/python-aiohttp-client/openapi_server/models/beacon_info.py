# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advertised_id import AdvertisedId
from openapi_server.models.attachment_info import AttachmentInfo
from openapi_server import util


class BeaconInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertised_id: AdvertisedId=None, attachments: List[AttachmentInfo]=None, beacon_name: str=None):
        """BeaconInfo - a model defined in OpenAPI

        :param advertised_id: The advertised_id of this BeaconInfo.
        :param attachments: The attachments of this BeaconInfo.
        :param beacon_name: The beacon_name of this BeaconInfo.
        """
        self.openapi_types = {
            'advertised_id': AdvertisedId,
            'attachments': List[AttachmentInfo],
            'beacon_name': str
        }

        self.attribute_map = {
            'advertised_id': 'advertisedId',
            'attachments': 'attachments',
            'beacon_name': 'beaconName'
        }

        self._advertised_id = advertised_id
        self._attachments = attachments
        self._beacon_name = beacon_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BeaconInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BeaconInfo of this BeaconInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertised_id(self):
        """Gets the advertised_id of this BeaconInfo.


        :return: The advertised_id of this BeaconInfo.
        :rtype: AdvertisedId
        """
        return self._advertised_id

    @advertised_id.setter
    def advertised_id(self, advertised_id):
        """Sets the advertised_id of this BeaconInfo.


        :param advertised_id: The advertised_id of this BeaconInfo.
        :type advertised_id: AdvertisedId
        """

        self._advertised_id = advertised_id

    @property
    def attachments(self):
        """Gets the attachments of this BeaconInfo.

        Attachments matching the type(s) requested. May be empty if no attachment types were requested.

        :return: The attachments of this BeaconInfo.
        :rtype: List[AttachmentInfo]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this BeaconInfo.

        Attachments matching the type(s) requested. May be empty if no attachment types were requested.

        :param attachments: The attachments of this BeaconInfo.
        :type attachments: List[AttachmentInfo]
        """

        self._attachments = attachments

    @property
    def beacon_name(self):
        """Gets the beacon_name of this BeaconInfo.

        The name under which the beacon is registered.

        :return: The beacon_name of this BeaconInfo.
        :rtype: str
        """
        return self._beacon_name

    @beacon_name.setter
    def beacon_name(self, beacon_name):
        """Sets the beacon_name of this BeaconInfo.

        The name under which the beacon is registered.

        :param beacon_name: The beacon_name of this BeaconInfo.
        :type beacon_name: str
        """

        self._beacon_name = beacon_name
