# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class Diagnostics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: List[str]=None, beacon_name: str=None, estimated_low_battery_date: ModelDate=None):
        """Diagnostics - a model defined in OpenAPI

        :param alerts: The alerts of this Diagnostics.
        :param beacon_name: The beacon_name of this Diagnostics.
        :param estimated_low_battery_date: The estimated_low_battery_date of this Diagnostics.
        """
        self.openapi_types = {
            'alerts': List[str],
            'beacon_name': str,
            'estimated_low_battery_date': ModelDate
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'beacon_name': 'beaconName',
            'estimated_low_battery_date': 'estimatedLowBatteryDate'
        }

        self._alerts = alerts
        self._beacon_name = beacon_name
        self._estimated_low_battery_date = estimated_low_battery_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Diagnostics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Diagnostics of this Diagnostics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this Diagnostics.

        An unordered list of Alerts that the beacon has.

        :return: The alerts of this Diagnostics.
        :rtype: List[str]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this Diagnostics.

        An unordered list of Alerts that the beacon has.

        :param alerts: The alerts of this Diagnostics.
        :type alerts: List[str]
        """
        allowed_values = ["ALERT_UNSPECIFIED", "WRONG_LOCATION", "LOW_BATTERY", "LOW_ACTIVITY"]  # noqa: E501
        if not set(alerts).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alerts` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(alerts) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._alerts = alerts

    @property
    def beacon_name(self):
        """Gets the beacon_name of this Diagnostics.

        Resource name of the beacon. For Eddystone-EID beacons, this may be the beacon's current EID, or the beacon's \"stable\" Eddystone-UID.

        :return: The beacon_name of this Diagnostics.
        :rtype: str
        """
        return self._beacon_name

    @beacon_name.setter
    def beacon_name(self, beacon_name):
        """Sets the beacon_name of this Diagnostics.

        Resource name of the beacon. For Eddystone-EID beacons, this may be the beacon's current EID, or the beacon's \"stable\" Eddystone-UID.

        :param beacon_name: The beacon_name of this Diagnostics.
        :type beacon_name: str
        """

        self._beacon_name = beacon_name

    @property
    def estimated_low_battery_date(self):
        """Gets the estimated_low_battery_date of this Diagnostics.


        :return: The estimated_low_battery_date of this Diagnostics.
        :rtype: ModelDate
        """
        return self._estimated_low_battery_date

    @estimated_low_battery_date.setter
    def estimated_low_battery_date(self, estimated_low_battery_date):
        """Sets the estimated_low_battery_date of this Diagnostics.


        :param estimated_low_battery_date: The estimated_low_battery_date of this Diagnostics.
        :type estimated_low_battery_date: ModelDate
        """

        self._estimated_low_battery_date = estimated_low_battery_date
