# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.observation import Observation
from openapi_server import util


class GetInfoForObservedBeaconsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespaced_types: List[str]=None, observations: List[Observation]=None):
        """GetInfoForObservedBeaconsRequest - a model defined in OpenAPI

        :param namespaced_types: The namespaced_types of this GetInfoForObservedBeaconsRequest.
        :param observations: The observations of this GetInfoForObservedBeaconsRequest.
        """
        self.openapi_types = {
            'namespaced_types': List[str],
            'observations': List[Observation]
        }

        self.attribute_map = {
            'namespaced_types': 'namespacedTypes',
            'observations': 'observations'
        }

        self._namespaced_types = namespaced_types
        self._observations = observations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInfoForObservedBeaconsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInfoForObservedBeaconsRequest of this GetInfoForObservedBeaconsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespaced_types(self):
        """Gets the namespaced_types of this GetInfoForObservedBeaconsRequest.

        Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts `*` to specify all types in all namespaces owned by the client. Optional.

        :return: The namespaced_types of this GetInfoForObservedBeaconsRequest.
        :rtype: List[str]
        """
        return self._namespaced_types

    @namespaced_types.setter
    def namespaced_types(self, namespaced_types):
        """Sets the namespaced_types of this GetInfoForObservedBeaconsRequest.

        Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts `*` to specify all types in all namespaces owned by the client. Optional.

        :param namespaced_types: The namespaced_types of this GetInfoForObservedBeaconsRequest.
        :type namespaced_types: List[str]
        """

        self._namespaced_types = namespaced_types

    @property
    def observations(self):
        """Gets the observations of this GetInfoForObservedBeaconsRequest.

        The beacons that the client has encountered. At least one must be given.

        :return: The observations of this GetInfoForObservedBeaconsRequest.
        :rtype: List[Observation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this GetInfoForObservedBeaconsRequest.

        The beacons that the client has encountered. At least one must be given.

        :param observations: The observations of this GetInfoForObservedBeaconsRequest.
        :type observations: List[Observation]
        """

        self._observations = observations
