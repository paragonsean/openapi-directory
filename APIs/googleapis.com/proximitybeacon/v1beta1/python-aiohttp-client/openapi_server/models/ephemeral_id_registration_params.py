# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EphemeralIdRegistrationParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_rotation_period_exponent: int=None, min_rotation_period_exponent: int=None, service_ecdh_public_key: str=None):
        """EphemeralIdRegistrationParams - a model defined in OpenAPI

        :param max_rotation_period_exponent: The max_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :param min_rotation_period_exponent: The min_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :param service_ecdh_public_key: The service_ecdh_public_key of this EphemeralIdRegistrationParams.
        """
        self.openapi_types = {
            'max_rotation_period_exponent': int,
            'min_rotation_period_exponent': int,
            'service_ecdh_public_key': str
        }

        self.attribute_map = {
            'max_rotation_period_exponent': 'maxRotationPeriodExponent',
            'min_rotation_period_exponent': 'minRotationPeriodExponent',
            'service_ecdh_public_key': 'serviceEcdhPublicKey'
        }

        self._max_rotation_period_exponent = max_rotation_period_exponent
        self._min_rotation_period_exponent = min_rotation_period_exponent
        self._service_ecdh_public_key = service_ecdh_public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EphemeralIdRegistrationParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EphemeralIdRegistrationParams of this EphemeralIdRegistrationParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_rotation_period_exponent(self):
        """Gets the max_rotation_period_exponent of this EphemeralIdRegistrationParams.

        Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent

        :return: The max_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :rtype: int
        """
        return self._max_rotation_period_exponent

    @max_rotation_period_exponent.setter
    def max_rotation_period_exponent(self, max_rotation_period_exponent):
        """Sets the max_rotation_period_exponent of this EphemeralIdRegistrationParams.

        Indicates the maximum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent

        :param max_rotation_period_exponent: The max_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :type max_rotation_period_exponent: int
        """

        self._max_rotation_period_exponent = max_rotation_period_exponent

    @property
    def min_rotation_period_exponent(self):
        """Gets the min_rotation_period_exponent of this EphemeralIdRegistrationParams.

        Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent

        :return: The min_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :rtype: int
        """
        return self._min_rotation_period_exponent

    @min_rotation_period_exponent.setter
    def min_rotation_period_exponent(self, min_rotation_period_exponent):
        """Sets the min_rotation_period_exponent of this EphemeralIdRegistrationParams.

        Indicates the minimum rotation period supported by the service. See EddystoneEidRegistration.rotation_period_exponent

        :param min_rotation_period_exponent: The min_rotation_period_exponent of this EphemeralIdRegistrationParams.
        :type min_rotation_period_exponent: int
        """

        self._min_rotation_period_exponent = min_rotation_period_exponent

    @property
    def service_ecdh_public_key(self):
        """Gets the service_ecdh_public_key of this EphemeralIdRegistrationParams.

        The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.

        :return: The service_ecdh_public_key of this EphemeralIdRegistrationParams.
        :rtype: str
        """
        return self._service_ecdh_public_key

    @service_ecdh_public_key.setter
    def service_ecdh_public_key(self, service_ecdh_public_key):
        """Sets the service_ecdh_public_key of this EphemeralIdRegistrationParams.

        The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic Curve Diffie-Hellman key exchange.

        :param service_ecdh_public_key: The service_ecdh_public_key of this EphemeralIdRegistrationParams.
        :type service_ecdh_public_key: str
        """

        self._service_ecdh_public_key = service_ecdh_public_key
