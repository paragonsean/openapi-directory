# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.beacon_info import BeaconInfo
from openapi_server import util


class GetInfoForObservedBeaconsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beacons: List[BeaconInfo]=None):
        """GetInfoForObservedBeaconsResponse - a model defined in OpenAPI

        :param beacons: The beacons of this GetInfoForObservedBeaconsResponse.
        """
        self.openapi_types = {
            'beacons': List[BeaconInfo]
        }

        self.attribute_map = {
            'beacons': 'beacons'
        }

        self._beacons = beacons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetInfoForObservedBeaconsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetInfoForObservedBeaconsResponse of this GetInfoForObservedBeaconsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beacons(self):
        """Gets the beacons of this GetInfoForObservedBeaconsResponse.

        Public information about beacons. May be empty if the request matched no beacons.

        :return: The beacons of this GetInfoForObservedBeaconsResponse.
        :rtype: List[BeaconInfo]
        """
        return self._beacons

    @beacons.setter
    def beacons(self, beacons):
        """Sets the beacons of this GetInfoForObservedBeaconsResponse.

        Public information about beacons. May be empty if the request matched no beacons.

        :param beacons: The beacons of this GetInfoForObservedBeaconsResponse.
        :type beacons: List[BeaconInfo]
        """

        self._beacons = beacons
