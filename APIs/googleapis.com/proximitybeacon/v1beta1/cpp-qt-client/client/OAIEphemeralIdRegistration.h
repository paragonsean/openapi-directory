/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEphemeralIdRegistration.h
 *
 * Write-only registration parameters for beacons using Eddystone-EID format. Two ways of securely registering an Eddystone-EID beacon with the service are supported: 1. Perform an ECDH key exchange via this API, including a previous call to &#x60;GET /v1beta1/eidparams&#x60;. In this case the fields &#x60;beacon_ecdh_public_key&#x60; and &#x60;service_ecdh_public_key&#x60; should be populated and &#x60;beacon_identity_key&#x60; should not be populated. This method ensures that only the two parties in the ECDH key exchange can compute the identity key, which becomes a secret between them. 2. Derive or obtain the beacon&#39;s identity key via other secure means (perhaps an ECDH key exchange between the beacon and a mobile device or any other secure method), and then submit the resulting identity key to the service. In this case &#x60;beacon_identity_key&#x60; field should be populated, and neither of &#x60;beacon_ecdh_public_key&#x60; nor &#x60;service_ecdh_public_key&#x60; fields should be. The security of this method depends on how securely the parties involved (in particular the bluetooth client) handle the identity key, and obviously on how securely the identity key was generated. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
 */

#ifndef OAIEphemeralIdRegistration_H
#define OAIEphemeralIdRegistration_H

#include <QJsonObject>

#include <QByteArray>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEphemeralIdRegistration : public OAIObject {
public:
    OAIEphemeralIdRegistration();
    OAIEphemeralIdRegistration(QString json);
    ~OAIEphemeralIdRegistration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QByteArray getBeaconEcdhPublicKey() const;
    void setBeaconEcdhPublicKey(const QByteArray &beacon_ecdh_public_key);
    bool is_beacon_ecdh_public_key_Set() const;
    bool is_beacon_ecdh_public_key_Valid() const;

    QByteArray getBeaconIdentityKey() const;
    void setBeaconIdentityKey(const QByteArray &beacon_identity_key);
    bool is_beacon_identity_key_Set() const;
    bool is_beacon_identity_key_Valid() const;

    QString getInitialClockValue() const;
    void setInitialClockValue(const QString &initial_clock_value);
    bool is_initial_clock_value_Set() const;
    bool is_initial_clock_value_Valid() const;

    QByteArray getInitialEid() const;
    void setInitialEid(const QByteArray &initial_eid);
    bool is_initial_eid_Set() const;
    bool is_initial_eid_Valid() const;

    qint32 getRotationPeriodExponent() const;
    void setRotationPeriodExponent(const qint32 &rotation_period_exponent);
    bool is_rotation_period_exponent_Set() const;
    bool is_rotation_period_exponent_Valid() const;

    QByteArray getServiceEcdhPublicKey() const;
    void setServiceEcdhPublicKey(const QByteArray &service_ecdh_public_key);
    bool is_service_ecdh_public_key_Set() const;
    bool is_service_ecdh_public_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QByteArray m_beacon_ecdh_public_key;
    bool m_beacon_ecdh_public_key_isSet;
    bool m_beacon_ecdh_public_key_isValid;

    QByteArray m_beacon_identity_key;
    bool m_beacon_identity_key_isSet;
    bool m_beacon_identity_key_isValid;

    QString m_initial_clock_value;
    bool m_initial_clock_value_isSet;
    bool m_initial_clock_value_isValid;

    QByteArray m_initial_eid;
    bool m_initial_eid_isSet;
    bool m_initial_eid_isValid;

    qint32 m_rotation_period_exponent;
    bool m_rotation_period_exponent_isSet;
    bool m_rotation_period_exponent_isValid;

    QByteArray m_service_ecdh_public_key;
    bool m_service_ecdh_public_key_isSet;
    bool m_service_ecdh_public_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEphemeralIdRegistration)

#endif // OAIEphemeralIdRegistration_H
