/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEphemeralIdRegistrationParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEphemeralIdRegistrationParams::OAIEphemeralIdRegistrationParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEphemeralIdRegistrationParams::OAIEphemeralIdRegistrationParams() {
    this->initializeModel();
}

OAIEphemeralIdRegistrationParams::~OAIEphemeralIdRegistrationParams() {}

void OAIEphemeralIdRegistrationParams::initializeModel() {

    m_max_rotation_period_exponent_isSet = false;
    m_max_rotation_period_exponent_isValid = false;

    m_min_rotation_period_exponent_isSet = false;
    m_min_rotation_period_exponent_isValid = false;

    m_service_ecdh_public_key_isSet = false;
    m_service_ecdh_public_key_isValid = false;
}

void OAIEphemeralIdRegistrationParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEphemeralIdRegistrationParams::fromJsonObject(QJsonObject json) {

    m_max_rotation_period_exponent_isValid = ::OpenAPI::fromJsonValue(m_max_rotation_period_exponent, json[QString("maxRotationPeriodExponent")]);
    m_max_rotation_period_exponent_isSet = !json[QString("maxRotationPeriodExponent")].isNull() && m_max_rotation_period_exponent_isValid;

    m_min_rotation_period_exponent_isValid = ::OpenAPI::fromJsonValue(m_min_rotation_period_exponent, json[QString("minRotationPeriodExponent")]);
    m_min_rotation_period_exponent_isSet = !json[QString("minRotationPeriodExponent")].isNull() && m_min_rotation_period_exponent_isValid;

    m_service_ecdh_public_key_isValid = ::OpenAPI::fromJsonValue(m_service_ecdh_public_key, json[QString("serviceEcdhPublicKey")]);
    m_service_ecdh_public_key_isSet = !json[QString("serviceEcdhPublicKey")].isNull() && m_service_ecdh_public_key_isValid;
}

QString OAIEphemeralIdRegistrationParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEphemeralIdRegistrationParams::asJsonObject() const {
    QJsonObject obj;
    if (m_max_rotation_period_exponent_isSet) {
        obj.insert(QString("maxRotationPeriodExponent"), ::OpenAPI::toJsonValue(m_max_rotation_period_exponent));
    }
    if (m_min_rotation_period_exponent_isSet) {
        obj.insert(QString("minRotationPeriodExponent"), ::OpenAPI::toJsonValue(m_min_rotation_period_exponent));
    }
    if (m_service_ecdh_public_key_isSet) {
        obj.insert(QString("serviceEcdhPublicKey"), ::OpenAPI::toJsonValue(m_service_ecdh_public_key));
    }
    return obj;
}

qint32 OAIEphemeralIdRegistrationParams::getMaxRotationPeriodExponent() const {
    return m_max_rotation_period_exponent;
}
void OAIEphemeralIdRegistrationParams::setMaxRotationPeriodExponent(const qint32 &max_rotation_period_exponent) {
    m_max_rotation_period_exponent = max_rotation_period_exponent;
    m_max_rotation_period_exponent_isSet = true;
}

bool OAIEphemeralIdRegistrationParams::is_max_rotation_period_exponent_Set() const{
    return m_max_rotation_period_exponent_isSet;
}

bool OAIEphemeralIdRegistrationParams::is_max_rotation_period_exponent_Valid() const{
    return m_max_rotation_period_exponent_isValid;
}

qint32 OAIEphemeralIdRegistrationParams::getMinRotationPeriodExponent() const {
    return m_min_rotation_period_exponent;
}
void OAIEphemeralIdRegistrationParams::setMinRotationPeriodExponent(const qint32 &min_rotation_period_exponent) {
    m_min_rotation_period_exponent = min_rotation_period_exponent;
    m_min_rotation_period_exponent_isSet = true;
}

bool OAIEphemeralIdRegistrationParams::is_min_rotation_period_exponent_Set() const{
    return m_min_rotation_period_exponent_isSet;
}

bool OAIEphemeralIdRegistrationParams::is_min_rotation_period_exponent_Valid() const{
    return m_min_rotation_period_exponent_isValid;
}

QByteArray OAIEphemeralIdRegistrationParams::getServiceEcdhPublicKey() const {
    return m_service_ecdh_public_key;
}
void OAIEphemeralIdRegistrationParams::setServiceEcdhPublicKey(const QByteArray &service_ecdh_public_key) {
    m_service_ecdh_public_key = service_ecdh_public_key;
    m_service_ecdh_public_key_isSet = true;
}

bool OAIEphemeralIdRegistrationParams::is_service_ecdh_public_key_Set() const{
    return m_service_ecdh_public_key_isSet;
}

bool OAIEphemeralIdRegistrationParams::is_service_ecdh_public_key_Valid() const{
    return m_service_ecdh_public_key_isValid;
}

bool OAIEphemeralIdRegistrationParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_rotation_period_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_rotation_period_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ecdh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEphemeralIdRegistrationParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
