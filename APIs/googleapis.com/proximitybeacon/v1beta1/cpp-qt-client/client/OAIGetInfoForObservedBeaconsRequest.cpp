/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInfoForObservedBeaconsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInfoForObservedBeaconsRequest::OAIGetInfoForObservedBeaconsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInfoForObservedBeaconsRequest::OAIGetInfoForObservedBeaconsRequest() {
    this->initializeModel();
}

OAIGetInfoForObservedBeaconsRequest::~OAIGetInfoForObservedBeaconsRequest() {}

void OAIGetInfoForObservedBeaconsRequest::initializeModel() {

    m_namespaced_types_isSet = false;
    m_namespaced_types_isValid = false;

    m_observations_isSet = false;
    m_observations_isValid = false;
}

void OAIGetInfoForObservedBeaconsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInfoForObservedBeaconsRequest::fromJsonObject(QJsonObject json) {

    m_namespaced_types_isValid = ::OpenAPI::fromJsonValue(m_namespaced_types, json[QString("namespacedTypes")]);
    m_namespaced_types_isSet = !json[QString("namespacedTypes")].isNull() && m_namespaced_types_isValid;

    m_observations_isValid = ::OpenAPI::fromJsonValue(m_observations, json[QString("observations")]);
    m_observations_isSet = !json[QString("observations")].isNull() && m_observations_isValid;
}

QString OAIGetInfoForObservedBeaconsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInfoForObservedBeaconsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_namespaced_types.size() > 0) {
        obj.insert(QString("namespacedTypes"), ::OpenAPI::toJsonValue(m_namespaced_types));
    }
    if (m_observations.size() > 0) {
        obj.insert(QString("observations"), ::OpenAPI::toJsonValue(m_observations));
    }
    return obj;
}

QList<QString> OAIGetInfoForObservedBeaconsRequest::getNamespacedTypes() const {
    return m_namespaced_types;
}
void OAIGetInfoForObservedBeaconsRequest::setNamespacedTypes(const QList<QString> &namespaced_types) {
    m_namespaced_types = namespaced_types;
    m_namespaced_types_isSet = true;
}

bool OAIGetInfoForObservedBeaconsRequest::is_namespaced_types_Set() const{
    return m_namespaced_types_isSet;
}

bool OAIGetInfoForObservedBeaconsRequest::is_namespaced_types_Valid() const{
    return m_namespaced_types_isValid;
}

QList<OAIObservation> OAIGetInfoForObservedBeaconsRequest::getObservations() const {
    return m_observations;
}
void OAIGetInfoForObservedBeaconsRequest::setObservations(const QList<OAIObservation> &observations) {
    m_observations = observations;
    m_observations_isSet = true;
}

bool OAIGetInfoForObservedBeaconsRequest::is_observations_Set() const{
    return m_observations_isSet;
}

bool OAIGetInfoForObservedBeaconsRequest::is_observations_Valid() const{
    return m_observations_isValid;
}

bool OAIGetInfoForObservedBeaconsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespaced_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInfoForObservedBeaconsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
