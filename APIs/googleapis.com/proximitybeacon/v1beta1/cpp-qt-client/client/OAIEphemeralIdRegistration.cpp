/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEphemeralIdRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEphemeralIdRegistration::OAIEphemeralIdRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEphemeralIdRegistration::OAIEphemeralIdRegistration() {
    this->initializeModel();
}

OAIEphemeralIdRegistration::~OAIEphemeralIdRegistration() {}

void OAIEphemeralIdRegistration::initializeModel() {

    m_beacon_ecdh_public_key_isSet = false;
    m_beacon_ecdh_public_key_isValid = false;

    m_beacon_identity_key_isSet = false;
    m_beacon_identity_key_isValid = false;

    m_initial_clock_value_isSet = false;
    m_initial_clock_value_isValid = false;

    m_initial_eid_isSet = false;
    m_initial_eid_isValid = false;

    m_rotation_period_exponent_isSet = false;
    m_rotation_period_exponent_isValid = false;

    m_service_ecdh_public_key_isSet = false;
    m_service_ecdh_public_key_isValid = false;
}

void OAIEphemeralIdRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEphemeralIdRegistration::fromJsonObject(QJsonObject json) {

    m_beacon_ecdh_public_key_isValid = ::OpenAPI::fromJsonValue(m_beacon_ecdh_public_key, json[QString("beaconEcdhPublicKey")]);
    m_beacon_ecdh_public_key_isSet = !json[QString("beaconEcdhPublicKey")].isNull() && m_beacon_ecdh_public_key_isValid;

    m_beacon_identity_key_isValid = ::OpenAPI::fromJsonValue(m_beacon_identity_key, json[QString("beaconIdentityKey")]);
    m_beacon_identity_key_isSet = !json[QString("beaconIdentityKey")].isNull() && m_beacon_identity_key_isValid;

    m_initial_clock_value_isValid = ::OpenAPI::fromJsonValue(m_initial_clock_value, json[QString("initialClockValue")]);
    m_initial_clock_value_isSet = !json[QString("initialClockValue")].isNull() && m_initial_clock_value_isValid;

    m_initial_eid_isValid = ::OpenAPI::fromJsonValue(m_initial_eid, json[QString("initialEid")]);
    m_initial_eid_isSet = !json[QString("initialEid")].isNull() && m_initial_eid_isValid;

    m_rotation_period_exponent_isValid = ::OpenAPI::fromJsonValue(m_rotation_period_exponent, json[QString("rotationPeriodExponent")]);
    m_rotation_period_exponent_isSet = !json[QString("rotationPeriodExponent")].isNull() && m_rotation_period_exponent_isValid;

    m_service_ecdh_public_key_isValid = ::OpenAPI::fromJsonValue(m_service_ecdh_public_key, json[QString("serviceEcdhPublicKey")]);
    m_service_ecdh_public_key_isSet = !json[QString("serviceEcdhPublicKey")].isNull() && m_service_ecdh_public_key_isValid;
}

QString OAIEphemeralIdRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEphemeralIdRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_beacon_ecdh_public_key_isSet) {
        obj.insert(QString("beaconEcdhPublicKey"), ::OpenAPI::toJsonValue(m_beacon_ecdh_public_key));
    }
    if (m_beacon_identity_key_isSet) {
        obj.insert(QString("beaconIdentityKey"), ::OpenAPI::toJsonValue(m_beacon_identity_key));
    }
    if (m_initial_clock_value_isSet) {
        obj.insert(QString("initialClockValue"), ::OpenAPI::toJsonValue(m_initial_clock_value));
    }
    if (m_initial_eid_isSet) {
        obj.insert(QString("initialEid"), ::OpenAPI::toJsonValue(m_initial_eid));
    }
    if (m_rotation_period_exponent_isSet) {
        obj.insert(QString("rotationPeriodExponent"), ::OpenAPI::toJsonValue(m_rotation_period_exponent));
    }
    if (m_service_ecdh_public_key_isSet) {
        obj.insert(QString("serviceEcdhPublicKey"), ::OpenAPI::toJsonValue(m_service_ecdh_public_key));
    }
    return obj;
}

QByteArray OAIEphemeralIdRegistration::getBeaconEcdhPublicKey() const {
    return m_beacon_ecdh_public_key;
}
void OAIEphemeralIdRegistration::setBeaconEcdhPublicKey(const QByteArray &beacon_ecdh_public_key) {
    m_beacon_ecdh_public_key = beacon_ecdh_public_key;
    m_beacon_ecdh_public_key_isSet = true;
}

bool OAIEphemeralIdRegistration::is_beacon_ecdh_public_key_Set() const{
    return m_beacon_ecdh_public_key_isSet;
}

bool OAIEphemeralIdRegistration::is_beacon_ecdh_public_key_Valid() const{
    return m_beacon_ecdh_public_key_isValid;
}

QByteArray OAIEphemeralIdRegistration::getBeaconIdentityKey() const {
    return m_beacon_identity_key;
}
void OAIEphemeralIdRegistration::setBeaconIdentityKey(const QByteArray &beacon_identity_key) {
    m_beacon_identity_key = beacon_identity_key;
    m_beacon_identity_key_isSet = true;
}

bool OAIEphemeralIdRegistration::is_beacon_identity_key_Set() const{
    return m_beacon_identity_key_isSet;
}

bool OAIEphemeralIdRegistration::is_beacon_identity_key_Valid() const{
    return m_beacon_identity_key_isValid;
}

QString OAIEphemeralIdRegistration::getInitialClockValue() const {
    return m_initial_clock_value;
}
void OAIEphemeralIdRegistration::setInitialClockValue(const QString &initial_clock_value) {
    m_initial_clock_value = initial_clock_value;
    m_initial_clock_value_isSet = true;
}

bool OAIEphemeralIdRegistration::is_initial_clock_value_Set() const{
    return m_initial_clock_value_isSet;
}

bool OAIEphemeralIdRegistration::is_initial_clock_value_Valid() const{
    return m_initial_clock_value_isValid;
}

QByteArray OAIEphemeralIdRegistration::getInitialEid() const {
    return m_initial_eid;
}
void OAIEphemeralIdRegistration::setInitialEid(const QByteArray &initial_eid) {
    m_initial_eid = initial_eid;
    m_initial_eid_isSet = true;
}

bool OAIEphemeralIdRegistration::is_initial_eid_Set() const{
    return m_initial_eid_isSet;
}

bool OAIEphemeralIdRegistration::is_initial_eid_Valid() const{
    return m_initial_eid_isValid;
}

qint32 OAIEphemeralIdRegistration::getRotationPeriodExponent() const {
    return m_rotation_period_exponent;
}
void OAIEphemeralIdRegistration::setRotationPeriodExponent(const qint32 &rotation_period_exponent) {
    m_rotation_period_exponent = rotation_period_exponent;
    m_rotation_period_exponent_isSet = true;
}

bool OAIEphemeralIdRegistration::is_rotation_period_exponent_Set() const{
    return m_rotation_period_exponent_isSet;
}

bool OAIEphemeralIdRegistration::is_rotation_period_exponent_Valid() const{
    return m_rotation_period_exponent_isValid;
}

QByteArray OAIEphemeralIdRegistration::getServiceEcdhPublicKey() const {
    return m_service_ecdh_public_key;
}
void OAIEphemeralIdRegistration::setServiceEcdhPublicKey(const QByteArray &service_ecdh_public_key) {
    m_service_ecdh_public_key = service_ecdh_public_key;
    m_service_ecdh_public_key_isSet = true;
}

bool OAIEphemeralIdRegistration::is_service_ecdh_public_key_Set() const{
    return m_service_ecdh_public_key_isSet;
}

bool OAIEphemeralIdRegistration::is_service_ecdh_public_key_Valid() const{
    return m_service_ecdh_public_key_isValid;
}

bool OAIEphemeralIdRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beacon_ecdh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beacon_identity_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_clock_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_eid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_period_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ecdh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEphemeralIdRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
