/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnostics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnostics::OAIDiagnostics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnostics::OAIDiagnostics() {
    this->initializeModel();
}

OAIDiagnostics::~OAIDiagnostics() {}

void OAIDiagnostics::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_beacon_name_isSet = false;
    m_beacon_name_isValid = false;

    m_estimated_low_battery_date_isSet = false;
    m_estimated_low_battery_date_isValid = false;
}

void OAIDiagnostics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnostics::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_beacon_name_isValid = ::OpenAPI::fromJsonValue(m_beacon_name, json[QString("beaconName")]);
    m_beacon_name_isSet = !json[QString("beaconName")].isNull() && m_beacon_name_isValid;

    m_estimated_low_battery_date_isValid = ::OpenAPI::fromJsonValue(m_estimated_low_battery_date, json[QString("estimatedLowBatteryDate")]);
    m_estimated_low_battery_date_isSet = !json[QString("estimatedLowBatteryDate")].isNull() && m_estimated_low_battery_date_isValid;
}

QString OAIDiagnostics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnostics::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts.size() > 0) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_beacon_name_isSet) {
        obj.insert(QString("beaconName"), ::OpenAPI::toJsonValue(m_beacon_name));
    }
    if (m_estimated_low_battery_date.isSet()) {
        obj.insert(QString("estimatedLowBatteryDate"), ::OpenAPI::toJsonValue(m_estimated_low_battery_date));
    }
    return obj;
}

QList<QString> OAIDiagnostics::getAlerts() const {
    return m_alerts;
}
void OAIDiagnostics::setAlerts(const QList<QString> &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAIDiagnostics::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAIDiagnostics::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QString OAIDiagnostics::getBeaconName() const {
    return m_beacon_name;
}
void OAIDiagnostics::setBeaconName(const QString &beacon_name) {
    m_beacon_name = beacon_name;
    m_beacon_name_isSet = true;
}

bool OAIDiagnostics::is_beacon_name_Set() const{
    return m_beacon_name_isSet;
}

bool OAIDiagnostics::is_beacon_name_Valid() const{
    return m_beacon_name_isValid;
}

OAIDate OAIDiagnostics::getEstimatedLowBatteryDate() const {
    return m_estimated_low_battery_date;
}
void OAIDiagnostics::setEstimatedLowBatteryDate(const OAIDate &estimated_low_battery_date) {
    m_estimated_low_battery_date = estimated_low_battery_date;
    m_estimated_low_battery_date_isSet = true;
}

bool OAIDiagnostics::is_estimated_low_battery_date_Set() const{
    return m_estimated_low_battery_date_isSet;
}

bool OAIDiagnostics::is_estimated_low_battery_date_Valid() const{
    return m_estimated_low_battery_date_isValid;
}

bool OAIDiagnostics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beacon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_low_battery_date.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnostics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
