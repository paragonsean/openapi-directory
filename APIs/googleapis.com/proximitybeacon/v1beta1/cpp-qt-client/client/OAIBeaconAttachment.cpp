/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeaconAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeaconAttachment::OAIBeaconAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeaconAttachment::OAIBeaconAttachment() {
    this->initializeModel();
}

OAIBeaconAttachment::~OAIBeaconAttachment() {}

void OAIBeaconAttachment::initializeModel() {

    m_attachment_name_isSet = false;
    m_attachment_name_isValid = false;

    m_creation_time_ms_isSet = false;
    m_creation_time_ms_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_max_distance_meters_isSet = false;
    m_max_distance_meters_isValid = false;

    m_namespaced_type_isSet = false;
    m_namespaced_type_isValid = false;
}

void OAIBeaconAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeaconAttachment::fromJsonObject(QJsonObject json) {

    m_attachment_name_isValid = ::OpenAPI::fromJsonValue(m_attachment_name, json[QString("attachmentName")]);
    m_attachment_name_isSet = !json[QString("attachmentName")].isNull() && m_attachment_name_isValid;

    m_creation_time_ms_isValid = ::OpenAPI::fromJsonValue(m_creation_time_ms, json[QString("creationTimeMs")]);
    m_creation_time_ms_isSet = !json[QString("creationTimeMs")].isNull() && m_creation_time_ms_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_max_distance_meters_isValid = ::OpenAPI::fromJsonValue(m_max_distance_meters, json[QString("maxDistanceMeters")]);
    m_max_distance_meters_isSet = !json[QString("maxDistanceMeters")].isNull() && m_max_distance_meters_isValid;

    m_namespaced_type_isValid = ::OpenAPI::fromJsonValue(m_namespaced_type, json[QString("namespacedType")]);
    m_namespaced_type_isSet = !json[QString("namespacedType")].isNull() && m_namespaced_type_isValid;
}

QString OAIBeaconAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeaconAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_name_isSet) {
        obj.insert(QString("attachmentName"), ::OpenAPI::toJsonValue(m_attachment_name));
    }
    if (m_creation_time_ms_isSet) {
        obj.insert(QString("creationTimeMs"), ::OpenAPI::toJsonValue(m_creation_time_ms));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_max_distance_meters_isSet) {
        obj.insert(QString("maxDistanceMeters"), ::OpenAPI::toJsonValue(m_max_distance_meters));
    }
    if (m_namespaced_type_isSet) {
        obj.insert(QString("namespacedType"), ::OpenAPI::toJsonValue(m_namespaced_type));
    }
    return obj;
}

QString OAIBeaconAttachment::getAttachmentName() const {
    return m_attachment_name;
}
void OAIBeaconAttachment::setAttachmentName(const QString &attachment_name) {
    m_attachment_name = attachment_name;
    m_attachment_name_isSet = true;
}

bool OAIBeaconAttachment::is_attachment_name_Set() const{
    return m_attachment_name_isSet;
}

bool OAIBeaconAttachment::is_attachment_name_Valid() const{
    return m_attachment_name_isValid;
}

QString OAIBeaconAttachment::getCreationTimeMs() const {
    return m_creation_time_ms;
}
void OAIBeaconAttachment::setCreationTimeMs(const QString &creation_time_ms) {
    m_creation_time_ms = creation_time_ms;
    m_creation_time_ms_isSet = true;
}

bool OAIBeaconAttachment::is_creation_time_ms_Set() const{
    return m_creation_time_ms_isSet;
}

bool OAIBeaconAttachment::is_creation_time_ms_Valid() const{
    return m_creation_time_ms_isValid;
}

QByteArray OAIBeaconAttachment::getData() const {
    return m_data;
}
void OAIBeaconAttachment::setData(const QByteArray &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIBeaconAttachment::is_data_Set() const{
    return m_data_isSet;
}

bool OAIBeaconAttachment::is_data_Valid() const{
    return m_data_isValid;
}

double OAIBeaconAttachment::getMaxDistanceMeters() const {
    return m_max_distance_meters;
}
void OAIBeaconAttachment::setMaxDistanceMeters(const double &max_distance_meters) {
    m_max_distance_meters = max_distance_meters;
    m_max_distance_meters_isSet = true;
}

bool OAIBeaconAttachment::is_max_distance_meters_Set() const{
    return m_max_distance_meters_isSet;
}

bool OAIBeaconAttachment::is_max_distance_meters_Valid() const{
    return m_max_distance_meters_isValid;
}

QString OAIBeaconAttachment::getNamespacedType() const {
    return m_namespaced_type;
}
void OAIBeaconAttachment::setNamespacedType(const QString &namespaced_type) {
    m_namespaced_type = namespaced_type;
    m_namespaced_type_isSet = true;
}

bool OAIBeaconAttachment::is_namespaced_type_Set() const{
    return m_namespaced_type_isSet;
}

bool OAIBeaconAttachment::is_namespaced_type_Valid() const{
    return m_namespaced_type_isValid;
}

bool OAIBeaconAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_distance_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaced_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeaconAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
