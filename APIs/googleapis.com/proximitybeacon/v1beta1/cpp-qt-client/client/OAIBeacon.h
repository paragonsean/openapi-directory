/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBeacon.h
 *
 * Details of a beacon device.
 */

#ifndef OAIBeacon_H
#define OAIBeacon_H

#include <QJsonObject>

#include "OAIAdvertisedId.h"
#include "OAIEphemeralIdRegistration.h"
#include "OAIIndoorLevel.h"
#include "OAILatLng.h"
#include <QByteArray>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdvertisedId;
class OAIEphemeralIdRegistration;
class OAIIndoorLevel;
class OAILatLng;

class OAIBeacon : public OAIObject {
public:
    OAIBeacon();
    OAIBeacon(QString json);
    ~OAIBeacon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdvertisedId getAdvertisedId() const;
    void setAdvertisedId(const OAIAdvertisedId &advertised_id);
    bool is_advertised_id_Set() const;
    bool is_advertised_id_Valid() const;

    QString getBeaconName() const;
    void setBeaconName(const QString &beacon_name);
    bool is_beacon_name_Set() const;
    bool is_beacon_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIEphemeralIdRegistration getEphemeralIdRegistration() const;
    void setEphemeralIdRegistration(const OAIEphemeralIdRegistration &ephemeral_id_registration);
    bool is_ephemeral_id_registration_Set() const;
    bool is_ephemeral_id_registration_Valid() const;

    QString getExpectedStability() const;
    void setExpectedStability(const QString &expected_stability);
    bool is_expected_stability_Set() const;
    bool is_expected_stability_Valid() const;

    OAIIndoorLevel getIndoorLevel() const;
    void setIndoorLevel(const OAIIndoorLevel &indoor_level);
    bool is_indoor_level_Set() const;
    bool is_indoor_level_Valid() const;

    OAILatLng getLatLng() const;
    void setLatLng(const OAILatLng &lat_lng);
    bool is_lat_lng_Set() const;
    bool is_lat_lng_Valid() const;

    QString getPlaceId() const;
    void setPlaceId(const QString &place_id);
    bool is_place_id_Set() const;
    bool is_place_id_Valid() const;

    QMap<QString, QString> getProperties() const;
    void setProperties(const QMap<QString, QString> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QByteArray getProvisioningKey() const;
    void setProvisioningKey(const QByteArray &provisioning_key);
    bool is_provisioning_key_Set() const;
    bool is_provisioning_key_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdvertisedId m_advertised_id;
    bool m_advertised_id_isSet;
    bool m_advertised_id_isValid;

    QString m_beacon_name;
    bool m_beacon_name_isSet;
    bool m_beacon_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIEphemeralIdRegistration m_ephemeral_id_registration;
    bool m_ephemeral_id_registration_isSet;
    bool m_ephemeral_id_registration_isValid;

    QString m_expected_stability;
    bool m_expected_stability_isSet;
    bool m_expected_stability_isValid;

    OAIIndoorLevel m_indoor_level;
    bool m_indoor_level_isSet;
    bool m_indoor_level_isValid;

    OAILatLng m_lat_lng;
    bool m_lat_lng_isSet;
    bool m_lat_lng_isValid;

    QString m_place_id;
    bool m_place_id_isSet;
    bool m_place_id_isValid;

    QMap<QString, QString> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QByteArray m_provisioning_key;
    bool m_provisioning_key_isSet;
    bool m_provisioning_key_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBeacon)

#endif // OAIBeacon_H
