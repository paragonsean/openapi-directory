/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespace::OAINamespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespace::OAINamespace() {
    this->initializeModel();
}

OAINamespace::~OAINamespace() {}

void OAINamespace::initializeModel() {

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_serving_visibility_isSet = false;
    m_serving_visibility_isValid = false;
}

void OAINamespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespace::fromJsonObject(QJsonObject json) {

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("namespaceName")]);
    m_namespace_name_isSet = !json[QString("namespaceName")].isNull() && m_namespace_name_isValid;

    m_serving_visibility_isValid = ::OpenAPI::fromJsonValue(m_serving_visibility, json[QString("servingVisibility")]);
    m_serving_visibility_isSet = !json[QString("servingVisibility")].isNull() && m_serving_visibility_isValid;
}

QString OAINamespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespace::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_name_isSet) {
        obj.insert(QString("namespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_serving_visibility_isSet) {
        obj.insert(QString("servingVisibility"), ::OpenAPI::toJsonValue(m_serving_visibility));
    }
    return obj;
}

QString OAINamespace::getNamespaceName() const {
    return m_namespace_name;
}
void OAINamespace::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAINamespace::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAINamespace::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

QString OAINamespace::getServingVisibility() const {
    return m_serving_visibility;
}
void OAINamespace::setServingVisibility(const QString &serving_visibility) {
    m_serving_visibility = serving_visibility;
    m_serving_visibility_isSet = true;
}

bool OAINamespace::is_serving_visibility_Set() const{
    return m_serving_visibility_isSet;
}

bool OAINamespace::is_serving_visibility_Valid() const{
    return m_serving_visibility_isValid;
}

bool OAINamespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
