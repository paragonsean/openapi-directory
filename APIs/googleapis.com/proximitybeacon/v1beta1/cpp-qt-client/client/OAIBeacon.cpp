/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeacon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeacon::OAIBeacon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeacon::OAIBeacon() {
    this->initializeModel();
}

OAIBeacon::~OAIBeacon() {}

void OAIBeacon::initializeModel() {

    m_advertised_id_isSet = false;
    m_advertised_id_isValid = false;

    m_beacon_name_isSet = false;
    m_beacon_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ephemeral_id_registration_isSet = false;
    m_ephemeral_id_registration_isValid = false;

    m_expected_stability_isSet = false;
    m_expected_stability_isValid = false;

    m_indoor_level_isSet = false;
    m_indoor_level_isValid = false;

    m_lat_lng_isSet = false;
    m_lat_lng_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_provisioning_key_isSet = false;
    m_provisioning_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBeacon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeacon::fromJsonObject(QJsonObject json) {

    m_advertised_id_isValid = ::OpenAPI::fromJsonValue(m_advertised_id, json[QString("advertisedId")]);
    m_advertised_id_isSet = !json[QString("advertisedId")].isNull() && m_advertised_id_isValid;

    m_beacon_name_isValid = ::OpenAPI::fromJsonValue(m_beacon_name, json[QString("beaconName")]);
    m_beacon_name_isSet = !json[QString("beaconName")].isNull() && m_beacon_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ephemeral_id_registration_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_id_registration, json[QString("ephemeralIdRegistration")]);
    m_ephemeral_id_registration_isSet = !json[QString("ephemeralIdRegistration")].isNull() && m_ephemeral_id_registration_isValid;

    m_expected_stability_isValid = ::OpenAPI::fromJsonValue(m_expected_stability, json[QString("expectedStability")]);
    m_expected_stability_isSet = !json[QString("expectedStability")].isNull() && m_expected_stability_isValid;

    m_indoor_level_isValid = ::OpenAPI::fromJsonValue(m_indoor_level, json[QString("indoorLevel")]);
    m_indoor_level_isSet = !json[QString("indoorLevel")].isNull() && m_indoor_level_isValid;

    m_lat_lng_isValid = ::OpenAPI::fromJsonValue(m_lat_lng, json[QString("latLng")]);
    m_lat_lng_isSet = !json[QString("latLng")].isNull() && m_lat_lng_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_provisioning_key_isValid = ::OpenAPI::fromJsonValue(m_provisioning_key, json[QString("provisioningKey")]);
    m_provisioning_key_isSet = !json[QString("provisioningKey")].isNull() && m_provisioning_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBeacon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeacon::asJsonObject() const {
    QJsonObject obj;
    if (m_advertised_id.isSet()) {
        obj.insert(QString("advertisedId"), ::OpenAPI::toJsonValue(m_advertised_id));
    }
    if (m_beacon_name_isSet) {
        obj.insert(QString("beaconName"), ::OpenAPI::toJsonValue(m_beacon_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ephemeral_id_registration.isSet()) {
        obj.insert(QString("ephemeralIdRegistration"), ::OpenAPI::toJsonValue(m_ephemeral_id_registration));
    }
    if (m_expected_stability_isSet) {
        obj.insert(QString("expectedStability"), ::OpenAPI::toJsonValue(m_expected_stability));
    }
    if (m_indoor_level.isSet()) {
        obj.insert(QString("indoorLevel"), ::OpenAPI::toJsonValue(m_indoor_level));
    }
    if (m_lat_lng.isSet()) {
        obj.insert(QString("latLng"), ::OpenAPI::toJsonValue(m_lat_lng));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_provisioning_key_isSet) {
        obj.insert(QString("provisioningKey"), ::OpenAPI::toJsonValue(m_provisioning_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAdvertisedId OAIBeacon::getAdvertisedId() const {
    return m_advertised_id;
}
void OAIBeacon::setAdvertisedId(const OAIAdvertisedId &advertised_id) {
    m_advertised_id = advertised_id;
    m_advertised_id_isSet = true;
}

bool OAIBeacon::is_advertised_id_Set() const{
    return m_advertised_id_isSet;
}

bool OAIBeacon::is_advertised_id_Valid() const{
    return m_advertised_id_isValid;
}

QString OAIBeacon::getBeaconName() const {
    return m_beacon_name;
}
void OAIBeacon::setBeaconName(const QString &beacon_name) {
    m_beacon_name = beacon_name;
    m_beacon_name_isSet = true;
}

bool OAIBeacon::is_beacon_name_Set() const{
    return m_beacon_name_isSet;
}

bool OAIBeacon::is_beacon_name_Valid() const{
    return m_beacon_name_isValid;
}

QString OAIBeacon::getDescription() const {
    return m_description;
}
void OAIBeacon::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBeacon::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBeacon::is_description_Valid() const{
    return m_description_isValid;
}

OAIEphemeralIdRegistration OAIBeacon::getEphemeralIdRegistration() const {
    return m_ephemeral_id_registration;
}
void OAIBeacon::setEphemeralIdRegistration(const OAIEphemeralIdRegistration &ephemeral_id_registration) {
    m_ephemeral_id_registration = ephemeral_id_registration;
    m_ephemeral_id_registration_isSet = true;
}

bool OAIBeacon::is_ephemeral_id_registration_Set() const{
    return m_ephemeral_id_registration_isSet;
}

bool OAIBeacon::is_ephemeral_id_registration_Valid() const{
    return m_ephemeral_id_registration_isValid;
}

QString OAIBeacon::getExpectedStability() const {
    return m_expected_stability;
}
void OAIBeacon::setExpectedStability(const QString &expected_stability) {
    m_expected_stability = expected_stability;
    m_expected_stability_isSet = true;
}

bool OAIBeacon::is_expected_stability_Set() const{
    return m_expected_stability_isSet;
}

bool OAIBeacon::is_expected_stability_Valid() const{
    return m_expected_stability_isValid;
}

OAIIndoorLevel OAIBeacon::getIndoorLevel() const {
    return m_indoor_level;
}
void OAIBeacon::setIndoorLevel(const OAIIndoorLevel &indoor_level) {
    m_indoor_level = indoor_level;
    m_indoor_level_isSet = true;
}

bool OAIBeacon::is_indoor_level_Set() const{
    return m_indoor_level_isSet;
}

bool OAIBeacon::is_indoor_level_Valid() const{
    return m_indoor_level_isValid;
}

OAILatLng OAIBeacon::getLatLng() const {
    return m_lat_lng;
}
void OAIBeacon::setLatLng(const OAILatLng &lat_lng) {
    m_lat_lng = lat_lng;
    m_lat_lng_isSet = true;
}

bool OAIBeacon::is_lat_lng_Set() const{
    return m_lat_lng_isSet;
}

bool OAIBeacon::is_lat_lng_Valid() const{
    return m_lat_lng_isValid;
}

QString OAIBeacon::getPlaceId() const {
    return m_place_id;
}
void OAIBeacon::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIBeacon::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIBeacon::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QMap<QString, QString> OAIBeacon::getProperties() const {
    return m_properties;
}
void OAIBeacon::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIBeacon::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIBeacon::is_properties_Valid() const{
    return m_properties_isValid;
}

QByteArray OAIBeacon::getProvisioningKey() const {
    return m_provisioning_key;
}
void OAIBeacon::setProvisioningKey(const QByteArray &provisioning_key) {
    m_provisioning_key = provisioning_key;
    m_provisioning_key_isSet = true;
}

bool OAIBeacon::is_provisioning_key_Set() const{
    return m_provisioning_key_isSet;
}

bool OAIBeacon::is_provisioning_key_Valid() const{
    return m_provisioning_key_isValid;
}

QString OAIBeacon::getStatus() const {
    return m_status;
}
void OAIBeacon::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBeacon::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBeacon::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBeacon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertised_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beacon_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_id_registration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_stability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indoor_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_lng.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeacon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
