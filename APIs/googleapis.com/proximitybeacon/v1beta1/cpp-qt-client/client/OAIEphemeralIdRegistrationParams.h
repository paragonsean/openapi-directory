/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEphemeralIdRegistrationParams.h
 *
 * Information a client needs to provision and register beacons that broadcast Eddystone-EID format beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
 */

#ifndef OAIEphemeralIdRegistrationParams_H
#define OAIEphemeralIdRegistrationParams_H

#include <QJsonObject>

#include <QByteArray>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEphemeralIdRegistrationParams : public OAIObject {
public:
    OAIEphemeralIdRegistrationParams();
    OAIEphemeralIdRegistrationParams(QString json);
    ~OAIEphemeralIdRegistrationParams() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxRotationPeriodExponent() const;
    void setMaxRotationPeriodExponent(const qint32 &max_rotation_period_exponent);
    bool is_max_rotation_period_exponent_Set() const;
    bool is_max_rotation_period_exponent_Valid() const;

    qint32 getMinRotationPeriodExponent() const;
    void setMinRotationPeriodExponent(const qint32 &min_rotation_period_exponent);
    bool is_min_rotation_period_exponent_Set() const;
    bool is_min_rotation_period_exponent_Valid() const;

    QByteArray getServiceEcdhPublicKey() const;
    void setServiceEcdhPublicKey(const QByteArray &service_ecdh_public_key);
    bool is_service_ecdh_public_key_Set() const;
    bool is_service_ecdh_public_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_rotation_period_exponent;
    bool m_max_rotation_period_exponent_isSet;
    bool m_max_rotation_period_exponent_isValid;

    qint32 m_min_rotation_period_exponent;
    bool m_min_rotation_period_exponent_isSet;
    bool m_min_rotation_period_exponent_isValid;

    QByteArray m_service_ecdh_public_key;
    bool m_service_ecdh_public_key_isSet;
    bool m_service_ecdh_public_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEphemeralIdRegistrationParams)

#endif // OAIEphemeralIdRegistrationParams_H
