/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBeaconInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBeaconInfo::OAIBeaconInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBeaconInfo::OAIBeaconInfo() {
    this->initializeModel();
}

OAIBeaconInfo::~OAIBeaconInfo() {}

void OAIBeaconInfo::initializeModel() {

    m_advertised_id_isSet = false;
    m_advertised_id_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_beacon_name_isSet = false;
    m_beacon_name_isValid = false;
}

void OAIBeaconInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBeaconInfo::fromJsonObject(QJsonObject json) {

    m_advertised_id_isValid = ::OpenAPI::fromJsonValue(m_advertised_id, json[QString("advertisedId")]);
    m_advertised_id_isSet = !json[QString("advertisedId")].isNull() && m_advertised_id_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_beacon_name_isValid = ::OpenAPI::fromJsonValue(m_beacon_name, json[QString("beaconName")]);
    m_beacon_name_isSet = !json[QString("beaconName")].isNull() && m_beacon_name_isValid;
}

QString OAIBeaconInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBeaconInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_advertised_id.isSet()) {
        obj.insert(QString("advertisedId"), ::OpenAPI::toJsonValue(m_advertised_id));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_beacon_name_isSet) {
        obj.insert(QString("beaconName"), ::OpenAPI::toJsonValue(m_beacon_name));
    }
    return obj;
}

OAIAdvertisedId OAIBeaconInfo::getAdvertisedId() const {
    return m_advertised_id;
}
void OAIBeaconInfo::setAdvertisedId(const OAIAdvertisedId &advertised_id) {
    m_advertised_id = advertised_id;
    m_advertised_id_isSet = true;
}

bool OAIBeaconInfo::is_advertised_id_Set() const{
    return m_advertised_id_isSet;
}

bool OAIBeaconInfo::is_advertised_id_Valid() const{
    return m_advertised_id_isValid;
}

QList<OAIAttachmentInfo> OAIBeaconInfo::getAttachments() const {
    return m_attachments;
}
void OAIBeaconInfo::setAttachments(const QList<OAIAttachmentInfo> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIBeaconInfo::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIBeaconInfo::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIBeaconInfo::getBeaconName() const {
    return m_beacon_name;
}
void OAIBeaconInfo::setBeaconName(const QString &beacon_name) {
    m_beacon_name = beacon_name;
    m_beacon_name_isSet = true;
}

bool OAIBeaconInfo::is_beacon_name_Set() const{
    return m_beacon_name_isSet;
}

bool OAIBeaconInfo::is_beacon_name_Valid() const{
    return m_beacon_name_isValid;
}

bool OAIBeaconInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertised_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beacon_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBeaconInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
