/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetInfoForObservedBeaconsRequest.h
 *
 * Request for beacon and attachment information about beacons that a mobile client has encountered \&quot;in the wild\&quot;.
 */

#ifndef OAIGetInfoForObservedBeaconsRequest_H
#define OAIGetInfoForObservedBeaconsRequest_H

#include <QJsonObject>

#include "OAIObservation.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObservation;

class OAIGetInfoForObservedBeaconsRequest : public OAIObject {
public:
    OAIGetInfoForObservedBeaconsRequest();
    OAIGetInfoForObservedBeaconsRequest(QString json);
    ~OAIGetInfoForObservedBeaconsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getNamespacedTypes() const;
    void setNamespacedTypes(const QList<QString> &namespaced_types);
    bool is_namespaced_types_Set() const;
    bool is_namespaced_types_Valid() const;

    QList<OAIObservation> getObservations() const;
    void setObservations(const QList<OAIObservation> &observations);
    bool is_observations_Set() const;
    bool is_observations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_namespaced_types;
    bool m_namespaced_types_isSet;
    bool m_namespaced_types_isValid;

    QList<OAIObservation> m_observations;
    bool m_observations_isSet;
    bool m_observations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetInfoForObservedBeaconsRequest)

#endif // OAIGetInfoForObservedBeaconsRequest_H
