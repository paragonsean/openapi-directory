/**
 * Proximity Beacon API
 * Registers, manages, indexes, and searches beacons.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObservation::OAIObservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObservation::OAIObservation() {
    this->initializeModel();
}

OAIObservation::~OAIObservation() {}

void OAIObservation::initializeModel() {

    m_advertised_id_isSet = false;
    m_advertised_id_isValid = false;

    m_telemetry_isSet = false;
    m_telemetry_isValid = false;

    m_timestamp_ms_isSet = false;
    m_timestamp_ms_isValid = false;
}

void OAIObservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObservation::fromJsonObject(QJsonObject json) {

    m_advertised_id_isValid = ::OpenAPI::fromJsonValue(m_advertised_id, json[QString("advertisedId")]);
    m_advertised_id_isSet = !json[QString("advertisedId")].isNull() && m_advertised_id_isValid;

    m_telemetry_isValid = ::OpenAPI::fromJsonValue(m_telemetry, json[QString("telemetry")]);
    m_telemetry_isSet = !json[QString("telemetry")].isNull() && m_telemetry_isValid;

    m_timestamp_ms_isValid = ::OpenAPI::fromJsonValue(m_timestamp_ms, json[QString("timestampMs")]);
    m_timestamp_ms_isSet = !json[QString("timestampMs")].isNull() && m_timestamp_ms_isValid;
}

QString OAIObservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObservation::asJsonObject() const {
    QJsonObject obj;
    if (m_advertised_id.isSet()) {
        obj.insert(QString("advertisedId"), ::OpenAPI::toJsonValue(m_advertised_id));
    }
    if (m_telemetry_isSet) {
        obj.insert(QString("telemetry"), ::OpenAPI::toJsonValue(m_telemetry));
    }
    if (m_timestamp_ms_isSet) {
        obj.insert(QString("timestampMs"), ::OpenAPI::toJsonValue(m_timestamp_ms));
    }
    return obj;
}

OAIAdvertisedId OAIObservation::getAdvertisedId() const {
    return m_advertised_id;
}
void OAIObservation::setAdvertisedId(const OAIAdvertisedId &advertised_id) {
    m_advertised_id = advertised_id;
    m_advertised_id_isSet = true;
}

bool OAIObservation::is_advertised_id_Set() const{
    return m_advertised_id_isSet;
}

bool OAIObservation::is_advertised_id_Valid() const{
    return m_advertised_id_isValid;
}

QByteArray OAIObservation::getTelemetry() const {
    return m_telemetry;
}
void OAIObservation::setTelemetry(const QByteArray &telemetry) {
    m_telemetry = telemetry;
    m_telemetry_isSet = true;
}

bool OAIObservation::is_telemetry_Set() const{
    return m_telemetry_isSet;
}

bool OAIObservation::is_telemetry_Valid() const{
    return m_telemetry_isValid;
}

QString OAIObservation::getTimestampMs() const {
    return m_timestamp_ms;
}
void OAIObservation::setTimestampMs(const QString &timestamp_ms) {
    m_timestamp_ms = timestamp_ms;
    m_timestamp_ms_isSet = true;
}

bool OAIObservation::is_timestamp_ms_Set() const{
    return m_timestamp_ms_isSet;
}

bool OAIObservation::is_timestamp_ms_Valid() const{
    return m_timestamp_ms_isValid;
}

bool OAIObservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertised_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
