/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetPerformanceData from './AssetPerformanceData';
import InsightList from './InsightList';
import VirtualMachineDetails from './VirtualMachineDetails';

/**
 * The Asset model module.
 * @module model/Asset
 * @version v1alpha1
 */
class Asset {
    /**
     * Constructs a new <code>Asset</code>.
     * An asset represents a resource in your environment. Asset types include virtual machines and databases.
     * @alias module:model/Asset
     */
    constructor() { 
        
        Asset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Asset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Asset} obj Optional instance to populate.
     * @return {module:model/Asset} The populated <code>Asset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Asset();

            if (data.hasOwnProperty('assignedGroups')) {
                obj['assignedGroups'] = ApiClient.convertToType(data['assignedGroups'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('hideReason')) {
                obj['hideReason'] = ApiClient.convertToType(data['hideReason'], 'String');
            }
            if (data.hasOwnProperty('hideTime')) {
                obj['hideTime'] = ApiClient.convertToType(data['hideTime'], 'String');
            }
            if (data.hasOwnProperty('insightList')) {
                obj['insightList'] = InsightList.constructFromObject(data['insightList']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('performanceData')) {
                obj['performanceData'] = AssetPerformanceData.constructFromObject(data['performanceData']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('virtualMachineDetails')) {
                obj['virtualMachineDetails'] = VirtualMachineDetails.constructFromObject(data['virtualMachineDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Asset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Asset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['assignedGroups'])) {
            throw new Error("Expected the field `assignedGroups` to be an array in the JSON data but got " + data['assignedGroups']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['hideReason'] && !(typeof data['hideReason'] === 'string' || data['hideReason'] instanceof String)) {
            throw new Error("Expected the field `hideReason` to be a primitive type in the JSON string but got " + data['hideReason']);
        }
        // ensure the json data is a string
        if (data['hideTime'] && !(typeof data['hideTime'] === 'string' || data['hideTime'] instanceof String)) {
            throw new Error("Expected the field `hideTime` to be a primitive type in the JSON string but got " + data['hideTime']);
        }
        // validate the optional field `insightList`
        if (data['insightList']) { // data not null
          InsightList.validateJSON(data['insightList']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `performanceData`
        if (data['performanceData']) { // data not null
          AssetPerformanceData.validateJSON(data['performanceData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // validate the optional field `virtualMachineDetails`
        if (data['virtualMachineDetails']) { // data not null
          VirtualMachineDetails.validateJSON(data['virtualMachineDetails']);
        }

        return true;
    }


}



/**
 * Output only. The list of groups that the asset is assigned to.
 * @member {Array.<String>} assignedGroups
 */
Asset.prototype['assignedGroups'] = undefined;

/**
 * Generic asset attributes.
 * @member {Object.<String, String>} attributes
 */
Asset.prototype['attributes'] = undefined;

/**
 * Output only. The timestamp when the asset was created.
 * @member {String} createTime
 */
Asset.prototype['createTime'] = undefined;

/**
 * Optional. Indicates if the asset is hidden.
 * @member {Boolean} hidden
 */
Asset.prototype['hidden'] = undefined;

/**
 * Optional. An optional reason for marking this asset as hidden.
 * @member {String} hideReason
 */
Asset.prototype['hideReason'] = undefined;

/**
 * Output only. The timestamp when the asset was marked as hidden.
 * @member {String} hideTime
 */
Asset.prototype['hideTime'] = undefined;

/**
 * @member {module:model/InsightList} insightList
 */
Asset.prototype['insightList'] = undefined;

/**
 * Labels as key value pairs.
 * @member {Object.<String, String>} labels
 */
Asset.prototype['labels'] = undefined;

/**
 * Output only. The full name of the asset.
 * @member {String} name
 */
Asset.prototype['name'] = undefined;

/**
 * @member {module:model/AssetPerformanceData} performanceData
 */
Asset.prototype['performanceData'] = undefined;

/**
 * Output only. The list of sources contributing to the asset.
 * @member {Array.<String>} sources
 */
Asset.prototype['sources'] = undefined;

/**
 * Output only. The timestamp when the asset was last updated.
 * @member {String} updateTime
 */
Asset.prototype['updateTime'] = undefined;

/**
 * @member {module:model/VirtualMachineDetails} virtualMachineDetails
 */
Asset.prototype['virtualMachineDetails'] = undefined;






export default Asset;

