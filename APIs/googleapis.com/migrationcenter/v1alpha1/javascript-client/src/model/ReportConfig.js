/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportConfigGroupPreferenceSetAssignment from './ReportConfigGroupPreferenceSetAssignment';

/**
 * The ReportConfig model module.
 * @module model/ReportConfig
 * @version v1alpha1
 */
class ReportConfig {
    /**
     * Constructs a new <code>ReportConfig</code>.
     * The groups and associated preference sets on which we can generate reports.
     * @alias module:model/ReportConfig
     */
    constructor() { 
        
        ReportConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportConfig} obj Optional instance to populate.
     * @return {module:model/ReportConfig} The populated <code>ReportConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportConfig();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('groupPreferencesetAssignments')) {
                obj['groupPreferencesetAssignments'] = ApiClient.convertToType(data['groupPreferencesetAssignments'], [ReportConfigGroupPreferenceSetAssignment]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['groupPreferencesetAssignments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupPreferencesetAssignments'])) {
                throw new Error("Expected the field `groupPreferencesetAssignments` to be an array in the JSON data but got " + data['groupPreferencesetAssignments']);
            }
            // validate the optional field `groupPreferencesetAssignments` (array)
            for (const item of data['groupPreferencesetAssignments']) {
                ReportConfigGroupPreferenceSetAssignment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the resource was created.
 * @member {String} createTime
 */
ReportConfig.prototype['createTime'] = undefined;

/**
 * Free-text description.
 * @member {String} description
 */
ReportConfig.prototype['description'] = undefined;

/**
 * User-friendly display name. Maximum length is 63 characters.
 * @member {String} displayName
 */
ReportConfig.prototype['displayName'] = undefined;

/**
 * Required. Collection of combinations of groups and preference sets.
 * @member {Array.<module:model/ReportConfigGroupPreferenceSetAssignment>} groupPreferencesetAssignments
 */
ReportConfig.prototype['groupPreferencesetAssignments'] = undefined;

/**
 * Output only. Name of resource.
 * @member {String} name
 */
ReportConfig.prototype['name'] = undefined;

/**
 * Output only. The timestamp when the resource was last updated.
 * @member {String} updateTime
 */
ReportConfig.prototype['updateTime'] = undefined;






export default ReportConfig;

