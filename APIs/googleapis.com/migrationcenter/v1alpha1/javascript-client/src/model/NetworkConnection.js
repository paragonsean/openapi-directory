/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkConnection model module.
 * @module model/NetworkConnection
 * @version v1alpha1
 */
class NetworkConnection {
    /**
     * Constructs a new <code>NetworkConnection</code>.
     * @alias module:model/NetworkConnection
     */
    constructor() { 
        
        NetworkConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConnection} obj Optional instance to populate.
     * @return {module:model/NetworkConnection} The populated <code>NetworkConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConnection();

            if (data.hasOwnProperty('localIpAddress')) {
                obj['localIpAddress'] = ApiClient.convertToType(data['localIpAddress'], 'String');
            }
            if (data.hasOwnProperty('localPort')) {
                obj['localPort'] = ApiClient.convertToType(data['localPort'], 'Number');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('processName')) {
                obj['processName'] = ApiClient.convertToType(data['processName'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('remoteIpAddress')) {
                obj['remoteIpAddress'] = ApiClient.convertToType(data['remoteIpAddress'], 'String');
            }
            if (data.hasOwnProperty('remotePort')) {
                obj['remotePort'] = ApiClient.convertToType(data['remotePort'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['localIpAddress'] && !(typeof data['localIpAddress'] === 'string' || data['localIpAddress'] instanceof String)) {
            throw new Error("Expected the field `localIpAddress` to be a primitive type in the JSON string but got " + data['localIpAddress']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['processName'] && !(typeof data['processName'] === 'string' || data['processName'] instanceof String)) {
            throw new Error("Expected the field `processName` to be a primitive type in the JSON string but got " + data['processName']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['remoteIpAddress'] && !(typeof data['remoteIpAddress'] === 'string' || data['remoteIpAddress'] instanceof String)) {
            throw new Error("Expected the field `remoteIpAddress` to be a primitive type in the JSON string but got " + data['remoteIpAddress']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Local IP address.
 * @member {String} localIpAddress
 */
NetworkConnection.prototype['localIpAddress'] = undefined;

/**
 * Local port.
 * @member {Number} localPort
 */
NetworkConnection.prototype['localPort'] = undefined;

/**
 * Process ID.
 * @member {String} pid
 */
NetworkConnection.prototype['pid'] = undefined;

/**
 * Process or service name.
 * @member {String} processName
 */
NetworkConnection.prototype['processName'] = undefined;

/**
 * Connection protocol (e.g. TCP/UDP).
 * @member {String} protocol
 */
NetworkConnection.prototype['protocol'] = undefined;

/**
 * Remote IP address.
 * @member {String} remoteIpAddress
 */
NetworkConnection.prototype['remoteIpAddress'] = undefined;

/**
 * Remote port.
 * @member {Number} remotePort
 */
NetworkConnection.prototype['remotePort'] = undefined;

/**
 * Connection state (e.g. CONNECTED).
 * @member {String} state
 */
NetworkConnection.prototype['state'] = undefined;






export default NetworkConnection;

