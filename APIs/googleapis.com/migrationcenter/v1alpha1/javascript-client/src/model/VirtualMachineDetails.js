/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GuestOsDetails from './GuestOsDetails';
import PlatformDetails from './PlatformDetails';
import VirtualMachineArchitectureDetails from './VirtualMachineArchitectureDetails';
import VirtualMachineDiskDetails from './VirtualMachineDiskDetails';
import VirtualMachineNetworkDetails from './VirtualMachineNetworkDetails';

/**
 * The VirtualMachineDetails model module.
 * @module model/VirtualMachineDetails
 * @version v1alpha1
 */
class VirtualMachineDetails {
    /**
     * Constructs a new <code>VirtualMachineDetails</code>.
     * Details of a VirtualMachine.
     * @alias module:model/VirtualMachineDetails
     */
    constructor() { 
        
        VirtualMachineDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachineDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineDetails} obj Optional instance to populate.
     * @return {module:model/VirtualMachineDetails} The populated <code>VirtualMachineDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineDetails();

            if (data.hasOwnProperty('coreCount')) {
                obj['coreCount'] = ApiClient.convertToType(data['coreCount'], 'Number');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('guestOs')) {
                obj['guestOs'] = GuestOsDetails.constructFromObject(data['guestOs']);
            }
            if (data.hasOwnProperty('memoryMb')) {
                obj['memoryMb'] = ApiClient.convertToType(data['memoryMb'], 'Number');
            }
            if (data.hasOwnProperty('osFamily')) {
                obj['osFamily'] = ApiClient.convertToType(data['osFamily'], 'String');
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = PlatformDetails.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('powerState')) {
                obj['powerState'] = ApiClient.convertToType(data['powerState'], 'String');
            }
            if (data.hasOwnProperty('vcenterFolder')) {
                obj['vcenterFolder'] = ApiClient.convertToType(data['vcenterFolder'], 'String');
            }
            if (data.hasOwnProperty('vcenterUrl')) {
                obj['vcenterUrl'] = ApiClient.convertToType(data['vcenterUrl'], 'String');
            }
            if (data.hasOwnProperty('vcenterVmId')) {
                obj['vcenterVmId'] = ApiClient.convertToType(data['vcenterVmId'], 'String');
            }
            if (data.hasOwnProperty('vmArchitecture')) {
                obj['vmArchitecture'] = VirtualMachineArchitectureDetails.constructFromObject(data['vmArchitecture']);
            }
            if (data.hasOwnProperty('vmDisks')) {
                obj['vmDisks'] = VirtualMachineDiskDetails.constructFromObject(data['vmDisks']);
            }
            if (data.hasOwnProperty('vmName')) {
                obj['vmName'] = ApiClient.convertToType(data['vmName'], 'String');
            }
            if (data.hasOwnProperty('vmNetwork')) {
                obj['vmNetwork'] = VirtualMachineNetworkDetails.constructFromObject(data['vmNetwork']);
            }
            if (data.hasOwnProperty('vmUuid')) {
                obj['vmUuid'] = ApiClient.convertToType(data['vmUuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `guestOs`
        if (data['guestOs']) { // data not null
          GuestOsDetails.validateJSON(data['guestOs']);
        }
        // ensure the json data is a string
        if (data['osFamily'] && !(typeof data['osFamily'] === 'string' || data['osFamily'] instanceof String)) {
            throw new Error("Expected the field `osFamily` to be a primitive type in the JSON string but got " + data['osFamily']);
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          PlatformDetails.validateJSON(data['platform']);
        }
        // ensure the json data is a string
        if (data['powerState'] && !(typeof data['powerState'] === 'string' || data['powerState'] instanceof String)) {
            throw new Error("Expected the field `powerState` to be a primitive type in the JSON string but got " + data['powerState']);
        }
        // ensure the json data is a string
        if (data['vcenterFolder'] && !(typeof data['vcenterFolder'] === 'string' || data['vcenterFolder'] instanceof String)) {
            throw new Error("Expected the field `vcenterFolder` to be a primitive type in the JSON string but got " + data['vcenterFolder']);
        }
        // ensure the json data is a string
        if (data['vcenterUrl'] && !(typeof data['vcenterUrl'] === 'string' || data['vcenterUrl'] instanceof String)) {
            throw new Error("Expected the field `vcenterUrl` to be a primitive type in the JSON string but got " + data['vcenterUrl']);
        }
        // ensure the json data is a string
        if (data['vcenterVmId'] && !(typeof data['vcenterVmId'] === 'string' || data['vcenterVmId'] instanceof String)) {
            throw new Error("Expected the field `vcenterVmId` to be a primitive type in the JSON string but got " + data['vcenterVmId']);
        }
        // validate the optional field `vmArchitecture`
        if (data['vmArchitecture']) { // data not null
          VirtualMachineArchitectureDetails.validateJSON(data['vmArchitecture']);
        }
        // validate the optional field `vmDisks`
        if (data['vmDisks']) { // data not null
          VirtualMachineDiskDetails.validateJSON(data['vmDisks']);
        }
        // ensure the json data is a string
        if (data['vmName'] && !(typeof data['vmName'] === 'string' || data['vmName'] instanceof String)) {
            throw new Error("Expected the field `vmName` to be a primitive type in the JSON string but got " + data['vmName']);
        }
        // validate the optional field `vmNetwork`
        if (data['vmNetwork']) { // data not null
          VirtualMachineNetworkDetails.validateJSON(data['vmNetwork']);
        }
        // ensure the json data is a string
        if (data['vmUuid'] && !(typeof data['vmUuid'] === 'string' || data['vmUuid'] instanceof String)) {
            throw new Error("Expected the field `vmUuid` to be a primitive type in the JSON string but got " + data['vmUuid']);
        }

        return true;
    }


}



/**
 * Number of CPU cores in the VirtualMachine. Must be non-negative.
 * @member {Number} coreCount
 */
VirtualMachineDetails.prototype['coreCount'] = undefined;

/**
 * VM creation timestamp.
 * @member {String} createTime
 */
VirtualMachineDetails.prototype['createTime'] = undefined;

/**
 * @member {module:model/GuestOsDetails} guestOs
 */
VirtualMachineDetails.prototype['guestOs'] = undefined;

/**
 * The amount of memory in the VirtualMachine. Must be non-negative.
 * @member {Number} memoryMb
 */
VirtualMachineDetails.prototype['memoryMb'] = undefined;

/**
 * What family the OS belong to, if known.
 * @member {module:model/VirtualMachineDetails.OsFamilyEnum} osFamily
 */
VirtualMachineDetails.prototype['osFamily'] = undefined;

/**
 * The name of the operating system running on the VirtualMachine.
 * @member {String} osName
 */
VirtualMachineDetails.prototype['osName'] = undefined;

/**
 * The version of the operating system running on the virtual machine.
 * @member {String} osVersion
 */
VirtualMachineDetails.prototype['osVersion'] = undefined;

/**
 * @member {module:model/PlatformDetails} platform
 */
VirtualMachineDetails.prototype['platform'] = undefined;

/**
 * Power state of VM (poweredOn or poweredOff).
 * @member {String} powerState
 */
VirtualMachineDetails.prototype['powerState'] = undefined;

/**
 * Folder name in vCenter where asset resides.
 * @member {String} vcenterFolder
 */
VirtualMachineDetails.prototype['vcenterFolder'] = undefined;

/**
 * vCenter URL used in collection.
 * @member {String} vcenterUrl
 */
VirtualMachineDetails.prototype['vcenterUrl'] = undefined;

/**
 * vCenter VM ID.
 * @member {String} vcenterVmId
 */
VirtualMachineDetails.prototype['vcenterVmId'] = undefined;

/**
 * @member {module:model/VirtualMachineArchitectureDetails} vmArchitecture
 */
VirtualMachineDetails.prototype['vmArchitecture'] = undefined;

/**
 * @member {module:model/VirtualMachineDiskDetails} vmDisks
 */
VirtualMachineDetails.prototype['vmDisks'] = undefined;

/**
 * Virtual Machine display name.
 * @member {String} vmName
 */
VirtualMachineDetails.prototype['vmName'] = undefined;

/**
 * @member {module:model/VirtualMachineNetworkDetails} vmNetwork
 */
VirtualMachineDetails.prototype['vmNetwork'] = undefined;

/**
 * Virtual Machine unique identifier.
 * @member {String} vmUuid
 */
VirtualMachineDetails.prototype['vmUuid'] = undefined;





/**
 * Allowed values for the <code>osFamily</code> property.
 * @enum {String}
 * @readonly
 */
VirtualMachineDetails['OsFamilyEnum'] = {

    /**
     * value: "OS_FAMILY_UNKNOWN"
     * @const
     */
    "UNKNOWN": "OS_FAMILY_UNKNOWN",

    /**
     * value: "OS_FAMILY_WINDOWS"
     * @const
     */
    "WINDOWS": "OS_FAMILY_WINDOWS",

    /**
     * value: "OS_FAMILY_LINUX"
     * @const
     */
    "LINUX": "OS_FAMILY_LINUX",

    /**
     * value: "OS_FAMILY_UNIX"
     * @const
     */
    "UNIX": "OS_FAMILY_UNIX"
};



export default VirtualMachineDetails;

