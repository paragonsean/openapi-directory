/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskPartitionList from './DiskPartitionList';
import VmwareDiskConfig from './VmwareDiskConfig';

/**
 * The DiskEntry model module.
 * @module model/DiskEntry
 * @version v1alpha1
 */
class DiskEntry {
    /**
     * Constructs a new <code>DiskEntry</code>.
     * Single disk entry.
     * @alias module:model/DiskEntry
     */
    constructor() { 
        
        DiskEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiskEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiskEntry} obj Optional instance to populate.
     * @return {module:model/DiskEntry} The populated <code>DiskEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiskEntry();

            if (data.hasOwnProperty('diskLabel')) {
                obj['diskLabel'] = ApiClient.convertToType(data['diskLabel'], 'String');
            }
            if (data.hasOwnProperty('diskLabelType')) {
                obj['diskLabelType'] = ApiClient.convertToType(data['diskLabelType'], 'String');
            }
            if (data.hasOwnProperty('hwAddress')) {
                obj['hwAddress'] = ApiClient.convertToType(data['hwAddress'], 'String');
            }
            if (data.hasOwnProperty('interfaceType')) {
                obj['interfaceType'] = ApiClient.convertToType(data['interfaceType'], 'String');
            }
            if (data.hasOwnProperty('partitions')) {
                obj['partitions'] = DiskPartitionList.constructFromObject(data['partitions']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('totalCapacityBytes')) {
                obj['totalCapacityBytes'] = ApiClient.convertToType(data['totalCapacityBytes'], 'String');
            }
            if (data.hasOwnProperty('totalFreeBytes')) {
                obj['totalFreeBytes'] = ApiClient.convertToType(data['totalFreeBytes'], 'String');
            }
            if (data.hasOwnProperty('vmwareConfig')) {
                obj['vmwareConfig'] = VmwareDiskConfig.constructFromObject(data['vmwareConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiskEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiskEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['diskLabel'] && !(typeof data['diskLabel'] === 'string' || data['diskLabel'] instanceof String)) {
            throw new Error("Expected the field `diskLabel` to be a primitive type in the JSON string but got " + data['diskLabel']);
        }
        // ensure the json data is a string
        if (data['diskLabelType'] && !(typeof data['diskLabelType'] === 'string' || data['diskLabelType'] instanceof String)) {
            throw new Error("Expected the field `diskLabelType` to be a primitive type in the JSON string but got " + data['diskLabelType']);
        }
        // ensure the json data is a string
        if (data['hwAddress'] && !(typeof data['hwAddress'] === 'string' || data['hwAddress'] instanceof String)) {
            throw new Error("Expected the field `hwAddress` to be a primitive type in the JSON string but got " + data['hwAddress']);
        }
        // ensure the json data is a string
        if (data['interfaceType'] && !(typeof data['interfaceType'] === 'string' || data['interfaceType'] instanceof String)) {
            throw new Error("Expected the field `interfaceType` to be a primitive type in the JSON string but got " + data['interfaceType']);
        }
        // validate the optional field `partitions`
        if (data['partitions']) { // data not null
          DiskPartitionList.validateJSON(data['partitions']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['totalCapacityBytes'] && !(typeof data['totalCapacityBytes'] === 'string' || data['totalCapacityBytes'] instanceof String)) {
            throw new Error("Expected the field `totalCapacityBytes` to be a primitive type in the JSON string but got " + data['totalCapacityBytes']);
        }
        // ensure the json data is a string
        if (data['totalFreeBytes'] && !(typeof data['totalFreeBytes'] === 'string' || data['totalFreeBytes'] instanceof String)) {
            throw new Error("Expected the field `totalFreeBytes` to be a primitive type in the JSON string but got " + data['totalFreeBytes']);
        }
        // validate the optional field `vmwareConfig`
        if (data['vmwareConfig']) { // data not null
          VmwareDiskConfig.validateJSON(data['vmwareConfig']);
        }

        return true;
    }


}



/**
 * Disk label.
 * @member {String} diskLabel
 */
DiskEntry.prototype['diskLabel'] = undefined;

/**
 * Disk label type (e.g. BIOS/GPT)
 * @member {String} diskLabelType
 */
DiskEntry.prototype['diskLabelType'] = undefined;

/**
 * Disk hardware address (e.g. 0:1 for SCSI).
 * @member {String} hwAddress
 */
DiskEntry.prototype['hwAddress'] = undefined;

/**
 * Disks interface type (e.g. SATA/SCSI)
 * @member {String} interfaceType
 */
DiskEntry.prototype['interfaceType'] = undefined;

/**
 * @member {module:model/DiskPartitionList} partitions
 */
DiskEntry.prototype['partitions'] = undefined;

/**
 * Disk status (e.g. online).
 * @member {String} status
 */
DiskEntry.prototype['status'] = undefined;

/**
 * Disk capacity.
 * @member {String} totalCapacityBytes
 */
DiskEntry.prototype['totalCapacityBytes'] = undefined;

/**
 * Disk free space.
 * @member {String} totalFreeBytes
 */
DiskEntry.prototype['totalFreeBytes'] = undefined;

/**
 * @member {module:model/VmwareDiskConfig} vmwareConfig
 */
DiskEntry.prototype['vmwareConfig'] = undefined;






export default DiskEntry;

