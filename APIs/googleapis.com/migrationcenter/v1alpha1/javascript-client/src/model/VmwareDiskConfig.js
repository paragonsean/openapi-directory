/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmwareDiskConfig model module.
 * @module model/VmwareDiskConfig
 * @version v1alpha1
 */
class VmwareDiskConfig {
    /**
     * Constructs a new <code>VmwareDiskConfig</code>.
     * VMware disk config details.
     * @alias module:model/VmwareDiskConfig
     */
    constructor() { 
        
        VmwareDiskConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareDiskConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareDiskConfig} obj Optional instance to populate.
     * @return {module:model/VmwareDiskConfig} The populated <code>VmwareDiskConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareDiskConfig();

            if (data.hasOwnProperty('backingType')) {
                obj['backingType'] = ApiClient.convertToType(data['backingType'], 'String');
            }
            if (data.hasOwnProperty('rdmCompatibilityMode')) {
                obj['rdmCompatibilityMode'] = ApiClient.convertToType(data['rdmCompatibilityMode'], 'String');
            }
            if (data.hasOwnProperty('shared')) {
                obj['shared'] = ApiClient.convertToType(data['shared'], 'Boolean');
            }
            if (data.hasOwnProperty('vmdkDiskMode')) {
                obj['vmdkDiskMode'] = ApiClient.convertToType(data['vmdkDiskMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareDiskConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareDiskConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backingType'] && !(typeof data['backingType'] === 'string' || data['backingType'] instanceof String)) {
            throw new Error("Expected the field `backingType` to be a primitive type in the JSON string but got " + data['backingType']);
        }
        // ensure the json data is a string
        if (data['rdmCompatibilityMode'] && !(typeof data['rdmCompatibilityMode'] === 'string' || data['rdmCompatibilityMode'] instanceof String)) {
            throw new Error("Expected the field `rdmCompatibilityMode` to be a primitive type in the JSON string but got " + data['rdmCompatibilityMode']);
        }
        // ensure the json data is a string
        if (data['vmdkDiskMode'] && !(typeof data['vmdkDiskMode'] === 'string' || data['vmdkDiskMode'] instanceof String)) {
            throw new Error("Expected the field `vmdkDiskMode` to be a primitive type in the JSON string but got " + data['vmdkDiskMode']);
        }

        return true;
    }


}



/**
 * VMDK backing type.
 * @member {module:model/VmwareDiskConfig.BackingTypeEnum} backingType
 */
VmwareDiskConfig.prototype['backingType'] = undefined;

/**
 * RDM compatibility mode.
 * @member {String} rdmCompatibilityMode
 */
VmwareDiskConfig.prototype['rdmCompatibilityMode'] = undefined;

/**
 * Is VMDK shared with other VMs.
 * @member {Boolean} shared
 */
VmwareDiskConfig.prototype['shared'] = undefined;

/**
 * VMDK disk mode.
 * @member {String} vmdkDiskMode
 */
VmwareDiskConfig.prototype['vmdkDiskMode'] = undefined;





/**
 * Allowed values for the <code>backingType</code> property.
 * @enum {String}
 * @readonly
 */
VmwareDiskConfig['BackingTypeEnum'] = {

    /**
     * value: "BACKING_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "BACKING_TYPE_UNSPECIFIED",

    /**
     * value: "BACKING_TYPE_FLAT_V1"
     * @const
     */
    "FLAT_V1": "BACKING_TYPE_FLAT_V1",

    /**
     * value: "BACKING_TYPE_FLAT_V2"
     * @const
     */
    "FLAT_V2": "BACKING_TYPE_FLAT_V2",

    /**
     * value: "BACKING_TYPE_PMEM"
     * @const
     */
    "PMEM": "BACKING_TYPE_PMEM",

    /**
     * value: "BACKING_TYPE_RDM_V1"
     * @const
     */
    "RDM_V1": "BACKING_TYPE_RDM_V1",

    /**
     * value: "BACKING_TYPE_RDM_V2"
     * @const
     */
    "RDM_V2": "BACKING_TYPE_RDM_V2",

    /**
     * value: "BACKING_TYPE_SESPARSE"
     * @const
     */
    "SESPARSE": "BACKING_TYPE_SESPARSE",

    /**
     * value: "BACKING_TYPE_SESPARSE_V1"
     * @const
     */
    "SESPARSE_V1": "BACKING_TYPE_SESPARSE_V1",

    /**
     * value: "BACKING_TYPE_SESPARSE_V2"
     * @const
     */
    "SESPARSE_V2": "BACKING_TYPE_SESPARSE_V2"
};



export default VmwareDiskConfig;

