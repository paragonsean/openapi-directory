/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComputeStorageDescriptor model module.
 * @module model/ComputeStorageDescriptor
 * @version v1alpha1
 */
class ComputeStorageDescriptor {
    /**
     * Constructs a new <code>ComputeStorageDescriptor</code>.
     * Compute Engine storage option descriptor.
     * @alias module:model/ComputeStorageDescriptor
     */
    constructor() { 
        
        ComputeStorageDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeStorageDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeStorageDescriptor} obj Optional instance to populate.
     * @return {module:model/ComputeStorageDescriptor} The populated <code>ComputeStorageDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeStorageDescriptor();

            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeStorageDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeStorageDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Disk size in GiB.
 * @member {Number} sizeGb
 */
ComputeStorageDescriptor.prototype['sizeGb'] = undefined;

/**
 * Disk type backing the storage.
 * @member {module:model/ComputeStorageDescriptor.TypeEnum} type
 */
ComputeStorageDescriptor.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ComputeStorageDescriptor['TypeEnum'] = {

    /**
     * value: "PERSISTENT_DISK_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PERSISTENT_DISK_TYPE_UNSPECIFIED",

    /**
     * value: "PERSISTENT_DISK_TYPE_STANDARD"
     * @const
     */
    "STANDARD": "PERSISTENT_DISK_TYPE_STANDARD",

    /**
     * value: "PERSISTENT_DISK_TYPE_BALANCED"
     * @const
     */
    "BALANCED": "PERSISTENT_DISK_TYPE_BALANCED",

    /**
     * value: "PERSISTENT_DISK_TYPE_SSD"
     * @const
     */
    "SSD": "PERSISTENT_DISK_TYPE_SSD"
};



export default ComputeStorageDescriptor;

