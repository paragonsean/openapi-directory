/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CpuUsageSample from './CpuUsageSample';
import DiskUsageSample from './DiskUsageSample';
import MemoryUsageSample from './MemoryUsageSample';
import NetworkUsageSample from './NetworkUsageSample';

/**
 * The PerformanceSample model module.
 * @module model/PerformanceSample
 * @version v1alpha1
 */
class PerformanceSample {
    /**
     * Constructs a new <code>PerformanceSample</code>.
     * Performance data sample.
     * @alias module:model/PerformanceSample
     */
    constructor() { 
        
        PerformanceSample.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PerformanceSample</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PerformanceSample} obj Optional instance to populate.
     * @return {module:model/PerformanceSample} The populated <code>PerformanceSample</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PerformanceSample();

            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = CpuUsageSample.constructFromObject(data['cpu']);
            }
            if (data.hasOwnProperty('disk')) {
                obj['disk'] = DiskUsageSample.constructFromObject(data['disk']);
            }
            if (data.hasOwnProperty('memory')) {
                obj['memory'] = MemoryUsageSample.constructFromObject(data['memory']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = NetworkUsageSample.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('sampleTime')) {
                obj['sampleTime'] = ApiClient.convertToType(data['sampleTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PerformanceSample</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PerformanceSample</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cpu`
        if (data['cpu']) { // data not null
          CpuUsageSample.validateJSON(data['cpu']);
        }
        // validate the optional field `disk`
        if (data['disk']) { // data not null
          DiskUsageSample.validateJSON(data['disk']);
        }
        // validate the optional field `memory`
        if (data['memory']) { // data not null
          MemoryUsageSample.validateJSON(data['memory']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          NetworkUsageSample.validateJSON(data['network']);
        }
        // ensure the json data is a string
        if (data['sampleTime'] && !(typeof data['sampleTime'] === 'string' || data['sampleTime'] instanceof String)) {
            throw new Error("Expected the field `sampleTime` to be a primitive type in the JSON string but got " + data['sampleTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/CpuUsageSample} cpu
 */
PerformanceSample.prototype['cpu'] = undefined;

/**
 * @member {module:model/DiskUsageSample} disk
 */
PerformanceSample.prototype['disk'] = undefined;

/**
 * @member {module:model/MemoryUsageSample} memory
 */
PerformanceSample.prototype['memory'] = undefined;

/**
 * @member {module:model/NetworkUsageSample} network
 */
PerformanceSample.prototype['network'] = undefined;

/**
 * Time the sample was collected. If omitted, the frame report time will be used.
 * @member {String} sampleTime
 */
PerformanceSample.prototype['sampleTime'] = undefined;






export default PerformanceSample;

