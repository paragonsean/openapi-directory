/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';
import ReportSummaryMachineFinding from './ReportSummaryMachineFinding';
import ReportSummarySoleTenantFinding from './ReportSummarySoleTenantFinding';
import ReportSummaryVMWareEngineFinding from './ReportSummaryVMWareEngineFinding';
import VirtualMachinePreferences from './VirtualMachinePreferences';

/**
 * The ReportSummaryGroupPreferenceSetFinding model module.
 * @module model/ReportSummaryGroupPreferenceSetFinding
 * @version v1alpha1
 */
class ReportSummaryGroupPreferenceSetFinding {
    /**
     * Constructs a new <code>ReportSummaryGroupPreferenceSetFinding</code>.
     * Summary Findings for a specific Group/PreferenceSet combination.
     * @alias module:model/ReportSummaryGroupPreferenceSetFinding
     */
    constructor() { 
        
        ReportSummaryGroupPreferenceSetFinding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportSummaryGroupPreferenceSetFinding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportSummaryGroupPreferenceSetFinding} obj Optional instance to populate.
     * @return {module:model/ReportSummaryGroupPreferenceSetFinding} The populated <code>ReportSummaryGroupPreferenceSetFinding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportSummaryGroupPreferenceSetFinding();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('machineFinding')) {
                obj['machineFinding'] = ReportSummaryMachineFinding.constructFromObject(data['machineFinding']);
            }
            if (data.hasOwnProperty('machinePreferences')) {
                obj['machinePreferences'] = VirtualMachinePreferences.constructFromObject(data['machinePreferences']);
            }
            if (data.hasOwnProperty('monthlyCostCompute')) {
                obj['monthlyCostCompute'] = Money.constructFromObject(data['monthlyCostCompute']);
            }
            if (data.hasOwnProperty('monthlyCostNetworkEgress')) {
                obj['monthlyCostNetworkEgress'] = Money.constructFromObject(data['monthlyCostNetworkEgress']);
            }
            if (data.hasOwnProperty('monthlyCostOsLicense')) {
                obj['monthlyCostOsLicense'] = Money.constructFromObject(data['monthlyCostOsLicense']);
            }
            if (data.hasOwnProperty('monthlyCostOther')) {
                obj['monthlyCostOther'] = Money.constructFromObject(data['monthlyCostOther']);
            }
            if (data.hasOwnProperty('monthlyCostStorage')) {
                obj['monthlyCostStorage'] = Money.constructFromObject(data['monthlyCostStorage']);
            }
            if (data.hasOwnProperty('monthlyCostTotal')) {
                obj['monthlyCostTotal'] = Money.constructFromObject(data['monthlyCostTotal']);
            }
            if (data.hasOwnProperty('preferredRegion')) {
                obj['preferredRegion'] = ApiClient.convertToType(data['preferredRegion'], 'String');
            }
            if (data.hasOwnProperty('pricingTrack')) {
                obj['pricingTrack'] = ApiClient.convertToType(data['pricingTrack'], 'String');
            }
            if (data.hasOwnProperty('soleTenantFinding')) {
                obj['soleTenantFinding'] = ReportSummarySoleTenantFinding.constructFromObject(data['soleTenantFinding']);
            }
            if (data.hasOwnProperty('topPriority')) {
                obj['topPriority'] = ApiClient.convertToType(data['topPriority'], 'String');
            }
            if (data.hasOwnProperty('vmwareEngineFinding')) {
                obj['vmwareEngineFinding'] = ReportSummaryVMWareEngineFinding.constructFromObject(data['vmwareEngineFinding']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportSummaryGroupPreferenceSetFinding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportSummaryGroupPreferenceSetFinding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `machineFinding`
        if (data['machineFinding']) { // data not null
          ReportSummaryMachineFinding.validateJSON(data['machineFinding']);
        }
        // validate the optional field `machinePreferences`
        if (data['machinePreferences']) { // data not null
          VirtualMachinePreferences.validateJSON(data['machinePreferences']);
        }
        // validate the optional field `monthlyCostCompute`
        if (data['monthlyCostCompute']) { // data not null
          Money.validateJSON(data['monthlyCostCompute']);
        }
        // validate the optional field `monthlyCostNetworkEgress`
        if (data['monthlyCostNetworkEgress']) { // data not null
          Money.validateJSON(data['monthlyCostNetworkEgress']);
        }
        // validate the optional field `monthlyCostOsLicense`
        if (data['monthlyCostOsLicense']) { // data not null
          Money.validateJSON(data['monthlyCostOsLicense']);
        }
        // validate the optional field `monthlyCostOther`
        if (data['monthlyCostOther']) { // data not null
          Money.validateJSON(data['monthlyCostOther']);
        }
        // validate the optional field `monthlyCostStorage`
        if (data['monthlyCostStorage']) { // data not null
          Money.validateJSON(data['monthlyCostStorage']);
        }
        // validate the optional field `monthlyCostTotal`
        if (data['monthlyCostTotal']) { // data not null
          Money.validateJSON(data['monthlyCostTotal']);
        }
        // ensure the json data is a string
        if (data['preferredRegion'] && !(typeof data['preferredRegion'] === 'string' || data['preferredRegion'] instanceof String)) {
            throw new Error("Expected the field `preferredRegion` to be a primitive type in the JSON string but got " + data['preferredRegion']);
        }
        // ensure the json data is a string
        if (data['pricingTrack'] && !(typeof data['pricingTrack'] === 'string' || data['pricingTrack'] instanceof String)) {
            throw new Error("Expected the field `pricingTrack` to be a primitive type in the JSON string but got " + data['pricingTrack']);
        }
        // validate the optional field `soleTenantFinding`
        if (data['soleTenantFinding']) { // data not null
          ReportSummarySoleTenantFinding.validateJSON(data['soleTenantFinding']);
        }
        // ensure the json data is a string
        if (data['topPriority'] && !(typeof data['topPriority'] === 'string' || data['topPriority'] instanceof String)) {
            throw new Error("Expected the field `topPriority` to be a primitive type in the JSON string but got " + data['topPriority']);
        }
        // validate the optional field `vmwareEngineFinding`
        if (data['vmwareEngineFinding']) { // data not null
          ReportSummaryVMWareEngineFinding.validateJSON(data['vmwareEngineFinding']);
        }

        return true;
    }


}



/**
 * Description for the Preference Set.
 * @member {String} description
 */
ReportSummaryGroupPreferenceSetFinding.prototype['description'] = undefined;

/**
 * Display Name of the Preference Set
 * @member {String} displayName
 */
ReportSummaryGroupPreferenceSetFinding.prototype['displayName'] = undefined;

/**
 * @member {module:model/ReportSummaryMachineFinding} machineFinding
 */
ReportSummaryGroupPreferenceSetFinding.prototype['machineFinding'] = undefined;

/**
 * @member {module:model/VirtualMachinePreferences} machinePreferences
 */
ReportSummaryGroupPreferenceSetFinding.prototype['machinePreferences'] = undefined;

/**
 * @member {module:model/Money} monthlyCostCompute
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostCompute'] = undefined;

/**
 * @member {module:model/Money} monthlyCostNetworkEgress
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostNetworkEgress'] = undefined;

/**
 * @member {module:model/Money} monthlyCostOsLicense
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostOsLicense'] = undefined;

/**
 * @member {module:model/Money} monthlyCostOther
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostOther'] = undefined;

/**
 * @member {module:model/Money} monthlyCostStorage
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostStorage'] = undefined;

/**
 * @member {module:model/Money} monthlyCostTotal
 */
ReportSummaryGroupPreferenceSetFinding.prototype['monthlyCostTotal'] = undefined;

/**
 * Target region for this Preference Set
 * @member {String} preferredRegion
 */
ReportSummaryGroupPreferenceSetFinding.prototype['preferredRegion'] = undefined;

/**
 * Text describing the pricing track specified for this Preference Set
 * @member {String} pricingTrack
 */
ReportSummaryGroupPreferenceSetFinding.prototype['pricingTrack'] = undefined;

/**
 * @member {module:model/ReportSummarySoleTenantFinding} soleTenantFinding
 */
ReportSummaryGroupPreferenceSetFinding.prototype['soleTenantFinding'] = undefined;

/**
 * Text describing the business priority specified for this Preference Set
 * @member {String} topPriority
 */
ReportSummaryGroupPreferenceSetFinding.prototype['topPriority'] = undefined;

/**
 * @member {module:model/ReportSummaryVMWareEngineFinding} vmwareEngineFinding
 */
ReportSummaryGroupPreferenceSetFinding.prototype['vmwareEngineFinding'] = undefined;






export default ReportSummaryGroupPreferenceSetFinding;

