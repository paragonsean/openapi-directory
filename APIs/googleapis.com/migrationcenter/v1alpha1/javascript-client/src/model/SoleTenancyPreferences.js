/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SoleTenantNodeType from './SoleTenantNodeType';

/**
 * The SoleTenancyPreferences model module.
 * @module model/SoleTenancyPreferences
 * @version v1alpha1
 */
class SoleTenancyPreferences {
    /**
     * Constructs a new <code>SoleTenancyPreferences</code>.
     * Preferences concerning Sole Tenancy nodes and VMs.
     * @alias module:model/SoleTenancyPreferences
     */
    constructor() { 
        
        SoleTenancyPreferences.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoleTenancyPreferences</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoleTenancyPreferences} obj Optional instance to populate.
     * @return {module:model/SoleTenancyPreferences} The populated <code>SoleTenancyPreferences</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoleTenancyPreferences();

            if (data.hasOwnProperty('commitmentPlan')) {
                obj['commitmentPlan'] = ApiClient.convertToType(data['commitmentPlan'], 'String');
            }
            if (data.hasOwnProperty('cpuOvercommitRatio')) {
                obj['cpuOvercommitRatio'] = ApiClient.convertToType(data['cpuOvercommitRatio'], 'Number');
            }
            if (data.hasOwnProperty('hostMaintenancePolicy')) {
                obj['hostMaintenancePolicy'] = ApiClient.convertToType(data['hostMaintenancePolicy'], 'String');
            }
            if (data.hasOwnProperty('nodeTypes')) {
                obj['nodeTypes'] = ApiClient.convertToType(data['nodeTypes'], [SoleTenantNodeType]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoleTenancyPreferences</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoleTenancyPreferences</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitmentPlan'] && !(typeof data['commitmentPlan'] === 'string' || data['commitmentPlan'] instanceof String)) {
            throw new Error("Expected the field `commitmentPlan` to be a primitive type in the JSON string but got " + data['commitmentPlan']);
        }
        // ensure the json data is a string
        if (data['hostMaintenancePolicy'] && !(typeof data['hostMaintenancePolicy'] === 'string' || data['hostMaintenancePolicy'] instanceof String)) {
            throw new Error("Expected the field `hostMaintenancePolicy` to be a primitive type in the JSON string but got " + data['hostMaintenancePolicy']);
        }
        if (data['nodeTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeTypes'])) {
                throw new Error("Expected the field `nodeTypes` to be an array in the JSON data but got " + data['nodeTypes']);
            }
            // validate the optional field `nodeTypes` (array)
            for (const item of data['nodeTypes']) {
                SoleTenantNodeType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
 * @member {module:model/SoleTenancyPreferences.CommitmentPlanEnum} commitmentPlan
 */
SoleTenancyPreferences.prototype['commitmentPlan'] = undefined;

/**
 * CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
 * @member {Number} cpuOvercommitRatio
 */
SoleTenancyPreferences.prototype['cpuOvercommitRatio'] = undefined;

/**
 * Sole Tenancy nodes maintenance policy.
 * @member {module:model/SoleTenancyPreferences.HostMaintenancePolicyEnum} hostMaintenancePolicy
 */
SoleTenancyPreferences.prototype['hostMaintenancePolicy'] = undefined;

/**
 * A list of sole tenant node types. An empty list means that all possible node types will be considered.
 * @member {Array.<module:model/SoleTenantNodeType>} nodeTypes
 */
SoleTenancyPreferences.prototype['nodeTypes'] = undefined;





/**
 * Allowed values for the <code>commitmentPlan</code> property.
 * @enum {String}
 * @readonly
 */
SoleTenancyPreferences['CommitmentPlanEnum'] = {

    /**
     * value: "COMMITMENT_PLAN_UNSPECIFIED"
     * @const
     */
    "COMMITMENT_PLAN_UNSPECIFIED": "COMMITMENT_PLAN_UNSPECIFIED",

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND",

    /**
     * value: "COMMITMENT_1_YEAR"
     * @const
     */
    "COMMITMENT_1_YEAR": "COMMITMENT_1_YEAR",

    /**
     * value: "COMMITMENT_3_YEAR"
     * @const
     */
    "COMMITMENT_3_YEAR": "COMMITMENT_3_YEAR"
};


/**
 * Allowed values for the <code>hostMaintenancePolicy</code> property.
 * @enum {String}
 * @readonly
 */
SoleTenancyPreferences['HostMaintenancePolicyEnum'] = {

    /**
     * value: "HOST_MAINTENANCE_POLICY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "HOST_MAINTENANCE_POLICY_UNSPECIFIED",

    /**
     * value: "HOST_MAINTENANCE_POLICY_DEFAULT"
     * @const
     */
    "DEFAULT": "HOST_MAINTENANCE_POLICY_DEFAULT",

    /**
     * value: "HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE"
     * @const
     */
    "RESTART_IN_PLACE": "HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE",

    /**
     * value: "HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP"
     * @const
     */
    "MIGRATE_WITHIN_NODE_GROUP": "HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP"
};



export default SoleTenancyPreferences;

