/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FstabEntry model module.
 * @module model/FstabEntry
 * @version v1alpha1
 */
class FstabEntry {
    /**
     * Constructs a new <code>FstabEntry</code>.
     * Single fstab entry.
     * @alias module:model/FstabEntry
     */
    constructor() { 
        
        FstabEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FstabEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FstabEntry} obj Optional instance to populate.
     * @return {module:model/FstabEntry} The populated <code>FstabEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FstabEntry();

            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('freq')) {
                obj['freq'] = ApiClient.convertToType(data['freq'], 'Number');
            }
            if (data.hasOwnProperty('mntops')) {
                obj['mntops'] = ApiClient.convertToType(data['mntops'], 'String');
            }
            if (data.hasOwnProperty('passno')) {
                obj['passno'] = ApiClient.convertToType(data['passno'], 'Number');
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = ApiClient.convertToType(data['spec'], 'String');
            }
            if (data.hasOwnProperty('vfstype')) {
                obj['vfstype'] = ApiClient.convertToType(data['vfstype'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FstabEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FstabEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['mntops'] && !(typeof data['mntops'] === 'string' || data['mntops'] instanceof String)) {
            throw new Error("Expected the field `mntops` to be a primitive type in the JSON string but got " + data['mntops']);
        }
        // ensure the json data is a string
        if (data['spec'] && !(typeof data['spec'] === 'string' || data['spec'] instanceof String)) {
            throw new Error("Expected the field `spec` to be a primitive type in the JSON string but got " + data['spec']);
        }
        // ensure the json data is a string
        if (data['vfstype'] && !(typeof data['vfstype'] === 'string' || data['vfstype'] instanceof String)) {
            throw new Error("Expected the field `vfstype` to be a primitive type in the JSON string but got " + data['vfstype']);
        }

        return true;
    }


}



/**
 * The mount point for the filesystem.
 * @member {String} file
 */
FstabEntry.prototype['file'] = undefined;

/**
 * Used by dump to determine which filesystems need to be dumped.
 * @member {Number} freq
 */
FstabEntry.prototype['freq'] = undefined;

/**
 * Mount options associated with the filesystem.
 * @member {String} mntops
 */
FstabEntry.prototype['mntops'] = undefined;

/**
 * Used by the fsck(8) program to determine the order in which filesystem checks are done at reboot time.
 * @member {Number} passno
 */
FstabEntry.prototype['passno'] = undefined;

/**
 * The block special device or remote filesystem to be mounted.
 * @member {String} spec
 */
FstabEntry.prototype['spec'] = undefined;

/**
 * The type of the filesystem.
 * @member {String} vfstype
 */
FstabEntry.prototype['vfstype'] = undefined;






export default FstabEntry;

