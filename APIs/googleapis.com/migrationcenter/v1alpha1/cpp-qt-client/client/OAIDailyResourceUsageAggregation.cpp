/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDailyResourceUsageAggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDailyResourceUsageAggregation::OAIDailyResourceUsageAggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDailyResourceUsageAggregation::OAIDailyResourceUsageAggregation() {
    this->initializeModel();
}

OAIDailyResourceUsageAggregation::~OAIDailyResourceUsageAggregation() {}

void OAIDailyResourceUsageAggregation::initializeModel() {

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_memory_isSet = false;
    m_memory_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;
}

void OAIDailyResourceUsageAggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDailyResourceUsageAggregation::fromJsonObject(QJsonObject json) {

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_memory_isValid = ::OpenAPI::fromJsonValue(m_memory, json[QString("memory")]);
    m_memory_isSet = !json[QString("memory")].isNull() && m_memory_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;
}

QString OAIDailyResourceUsageAggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDailyResourceUsageAggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu.isSet()) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_disk.isSet()) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_memory.isSet()) {
        obj.insert(QString("memory"), ::OpenAPI::toJsonValue(m_memory));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    return obj;
}

OAIDailyResourceUsageAggregationCPU OAIDailyResourceUsageAggregation::getCpu() const {
    return m_cpu;
}
void OAIDailyResourceUsageAggregation::setCpu(const OAIDailyResourceUsageAggregationCPU &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIDailyResourceUsageAggregation::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIDailyResourceUsageAggregation::is_cpu_Valid() const{
    return m_cpu_isValid;
}

OAIDate OAIDailyResourceUsageAggregation::getDate() const {
    return m_date;
}
void OAIDailyResourceUsageAggregation::setDate(const OAIDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIDailyResourceUsageAggregation::is_date_Set() const{
    return m_date_isSet;
}

bool OAIDailyResourceUsageAggregation::is_date_Valid() const{
    return m_date_isValid;
}

OAIDailyResourceUsageAggregationDisk OAIDailyResourceUsageAggregation::getDisk() const {
    return m_disk;
}
void OAIDailyResourceUsageAggregation::setDisk(const OAIDailyResourceUsageAggregationDisk &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIDailyResourceUsageAggregation::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIDailyResourceUsageAggregation::is_disk_Valid() const{
    return m_disk_isValid;
}

OAIDailyResourceUsageAggregationMemory OAIDailyResourceUsageAggregation::getMemory() const {
    return m_memory;
}
void OAIDailyResourceUsageAggregation::setMemory(const OAIDailyResourceUsageAggregationMemory &memory) {
    m_memory = memory;
    m_memory_isSet = true;
}

bool OAIDailyResourceUsageAggregation::is_memory_Set() const{
    return m_memory_isSet;
}

bool OAIDailyResourceUsageAggregation::is_memory_Valid() const{
    return m_memory_isValid;
}

OAIDailyResourceUsageAggregationNetwork OAIDailyResourceUsageAggregation::getNetwork() const {
    return m_network;
}
void OAIDailyResourceUsageAggregation::setNetwork(const OAIDailyResourceUsageAggregationNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIDailyResourceUsageAggregation::is_network_Set() const{
    return m_network_isSet;
}

bool OAIDailyResourceUsageAggregation::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIDailyResourceUsageAggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDailyResourceUsageAggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
