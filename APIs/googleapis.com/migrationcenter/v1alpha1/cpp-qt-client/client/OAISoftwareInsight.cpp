/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareInsight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareInsight::OAISoftwareInsight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareInsight::OAISoftwareInsight() {
    this->initializeModel();
}

OAISoftwareInsight::~OAISoftwareInsight() {}

void OAISoftwareInsight::initializeModel() {

    m_detected_software_isSet = false;
    m_detected_software_isValid = false;
}

void OAISoftwareInsight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareInsight::fromJsonObject(QJsonObject json) {

    m_detected_software_isValid = ::OpenAPI::fromJsonValue(m_detected_software, json[QString("detectedSoftware")]);
    m_detected_software_isSet = !json[QString("detectedSoftware")].isNull() && m_detected_software_isValid;
}

QString OAISoftwareInsight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareInsight::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_software.isSet()) {
        obj.insert(QString("detectedSoftware"), ::OpenAPI::toJsonValue(m_detected_software));
    }
    return obj;
}

OAIDetectedSoftware OAISoftwareInsight::getDetectedSoftware() const {
    return m_detected_software;
}
void OAISoftwareInsight::setDetectedSoftware(const OAIDetectedSoftware &detected_software) {
    m_detected_software = detected_software;
    m_detected_software_isSet = true;
}

bool OAISoftwareInsight::is_detected_software_Set() const{
    return m_detected_software_isSet;
}

bool OAISoftwareInsight::is_detected_software_Valid() const{
    return m_detected_software_isValid;
}

bool OAISoftwareInsight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_software.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareInsight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
