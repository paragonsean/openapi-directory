/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJob::OAIImportJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJob::OAIImportJob() {
    this->initializeModel();
}

OAIImportJob::~OAIImportJob() {}

void OAIImportJob::initializeModel() {

    m_asset_source_isSet = false;
    m_asset_source_isValid = false;

    m_complete_time_isSet = false;
    m_complete_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_execution_report_isSet = false;
    m_execution_report_isValid = false;

    m_gcs_payload_isSet = false;
    m_gcs_payload_isValid = false;

    m_inline_payload_isSet = false;
    m_inline_payload_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_validation_report_isSet = false;
    m_validation_report_isValid = false;
}

void OAIImportJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJob::fromJsonObject(QJsonObject json) {

    m_asset_source_isValid = ::OpenAPI::fromJsonValue(m_asset_source, json[QString("assetSource")]);
    m_asset_source_isSet = !json[QString("assetSource")].isNull() && m_asset_source_isValid;

    m_complete_time_isValid = ::OpenAPI::fromJsonValue(m_complete_time, json[QString("completeTime")]);
    m_complete_time_isSet = !json[QString("completeTime")].isNull() && m_complete_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_execution_report_isValid = ::OpenAPI::fromJsonValue(m_execution_report, json[QString("executionReport")]);
    m_execution_report_isSet = !json[QString("executionReport")].isNull() && m_execution_report_isValid;

    m_gcs_payload_isValid = ::OpenAPI::fromJsonValue(m_gcs_payload, json[QString("gcsPayload")]);
    m_gcs_payload_isSet = !json[QString("gcsPayload")].isNull() && m_gcs_payload_isValid;

    m_inline_payload_isValid = ::OpenAPI::fromJsonValue(m_inline_payload, json[QString("inlinePayload")]);
    m_inline_payload_isSet = !json[QString("inlinePayload")].isNull() && m_inline_payload_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_validation_report_isValid = ::OpenAPI::fromJsonValue(m_validation_report, json[QString("validationReport")]);
    m_validation_report_isSet = !json[QString("validationReport")].isNull() && m_validation_report_isValid;
}

QString OAIImportJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJob::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_source_isSet) {
        obj.insert(QString("assetSource"), ::OpenAPI::toJsonValue(m_asset_source));
    }
    if (m_complete_time_isSet) {
        obj.insert(QString("completeTime"), ::OpenAPI::toJsonValue(m_complete_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_execution_report.isSet()) {
        obj.insert(QString("executionReport"), ::OpenAPI::toJsonValue(m_execution_report));
    }
    if (m_gcs_payload.isSet()) {
        obj.insert(QString("gcsPayload"), ::OpenAPI::toJsonValue(m_gcs_payload));
    }
    if (m_inline_payload.isSet()) {
        obj.insert(QString("inlinePayload"), ::OpenAPI::toJsonValue(m_inline_payload));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_validation_report.isSet()) {
        obj.insert(QString("validationReport"), ::OpenAPI::toJsonValue(m_validation_report));
    }
    return obj;
}

QString OAIImportJob::getAssetSource() const {
    return m_asset_source;
}
void OAIImportJob::setAssetSource(const QString &asset_source) {
    m_asset_source = asset_source;
    m_asset_source_isSet = true;
}

bool OAIImportJob::is_asset_source_Set() const{
    return m_asset_source_isSet;
}

bool OAIImportJob::is_asset_source_Valid() const{
    return m_asset_source_isValid;
}

QString OAIImportJob::getCompleteTime() const {
    return m_complete_time;
}
void OAIImportJob::setCompleteTime(const QString &complete_time) {
    m_complete_time = complete_time;
    m_complete_time_isSet = true;
}

bool OAIImportJob::is_complete_time_Set() const{
    return m_complete_time_isSet;
}

bool OAIImportJob::is_complete_time_Valid() const{
    return m_complete_time_isValid;
}

QString OAIImportJob::getCreateTime() const {
    return m_create_time;
}
void OAIImportJob::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIImportJob::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIImportJob::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIImportJob::getDisplayName() const {
    return m_display_name;
}
void OAIImportJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImportJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImportJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIExecutionReport OAIImportJob::getExecutionReport() const {
    return m_execution_report;
}
void OAIImportJob::setExecutionReport(const OAIExecutionReport &execution_report) {
    m_execution_report = execution_report;
    m_execution_report_isSet = true;
}

bool OAIImportJob::is_execution_report_Set() const{
    return m_execution_report_isSet;
}

bool OAIImportJob::is_execution_report_Valid() const{
    return m_execution_report_isValid;
}

OAIGCSPayloadInfo OAIImportJob::getGcsPayload() const {
    return m_gcs_payload;
}
void OAIImportJob::setGcsPayload(const OAIGCSPayloadInfo &gcs_payload) {
    m_gcs_payload = gcs_payload;
    m_gcs_payload_isSet = true;
}

bool OAIImportJob::is_gcs_payload_Set() const{
    return m_gcs_payload_isSet;
}

bool OAIImportJob::is_gcs_payload_Valid() const{
    return m_gcs_payload_isValid;
}

OAIInlinePayloadInfo OAIImportJob::getInlinePayload() const {
    return m_inline_payload;
}
void OAIImportJob::setInlinePayload(const OAIInlinePayloadInfo &inline_payload) {
    m_inline_payload = inline_payload;
    m_inline_payload_isSet = true;
}

bool OAIImportJob::is_inline_payload_Set() const{
    return m_inline_payload_isSet;
}

bool OAIImportJob::is_inline_payload_Valid() const{
    return m_inline_payload_isValid;
}

QMap<QString, QString> OAIImportJob::getLabels() const {
    return m_labels;
}
void OAIImportJob::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIImportJob::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIImportJob::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIImportJob::getName() const {
    return m_name;
}
void OAIImportJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportJob::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportJob::getState() const {
    return m_state;
}
void OAIImportJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImportJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImportJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIImportJob::getUpdateTime() const {
    return m_update_time;
}
void OAIImportJob::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIImportJob::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIImportJob::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIValidationReport OAIImportJob::getValidationReport() const {
    return m_validation_report;
}
void OAIImportJob::setValidationReport(const OAIValidationReport &validation_report) {
    m_validation_report = validation_report;
    m_validation_report_isSet = true;
}

bool OAIImportJob::is_validation_report_Set() const{
    return m_validation_report_isSet;
}

bool OAIImportJob::is_validation_report_Valid() const{
    return m_validation_report_isValid;
}

bool OAIImportJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_report.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
