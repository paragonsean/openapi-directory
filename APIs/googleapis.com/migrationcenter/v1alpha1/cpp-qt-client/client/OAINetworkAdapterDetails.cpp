/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAdapterDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAdapterDetails::OAINetworkAdapterDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAdapterDetails::OAINetworkAdapterDetails() {
    this->initializeModel();
}

OAINetworkAdapterDetails::~OAINetworkAdapterDetails() {}

void OAINetworkAdapterDetails::initializeModel() {

    m_adapter_type_isSet = false;
    m_adapter_type_isValid = false;

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;
}

void OAINetworkAdapterDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAdapterDetails::fromJsonObject(QJsonObject json) {

    m_adapter_type_isValid = ::OpenAPI::fromJsonValue(m_adapter_type, json[QString("adapterType")]);
    m_adapter_type_isSet = !json[QString("adapterType")].isNull() && m_adapter_type_isValid;

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;
}

QString OAINetworkAdapterDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAdapterDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_type_isSet) {
        obj.insert(QString("adapterType"), ::OpenAPI::toJsonValue(m_adapter_type));
    }
    if (m_addresses.isSet()) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    return obj;
}

QString OAINetworkAdapterDetails::getAdapterType() const {
    return m_adapter_type;
}
void OAINetworkAdapterDetails::setAdapterType(const QString &adapter_type) {
    m_adapter_type = adapter_type;
    m_adapter_type_isSet = true;
}

bool OAINetworkAdapterDetails::is_adapter_type_Set() const{
    return m_adapter_type_isSet;
}

bool OAINetworkAdapterDetails::is_adapter_type_Valid() const{
    return m_adapter_type_isValid;
}

OAINetworkAddressList OAINetworkAdapterDetails::getAddresses() const {
    return m_addresses;
}
void OAINetworkAdapterDetails::setAddresses(const OAINetworkAddressList &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAINetworkAdapterDetails::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAINetworkAdapterDetails::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QString OAINetworkAdapterDetails::getMacAddress() const {
    return m_mac_address;
}
void OAINetworkAdapterDetails::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAINetworkAdapterDetails::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAINetworkAdapterDetails::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

bool OAINetworkAdapterDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAdapterDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
