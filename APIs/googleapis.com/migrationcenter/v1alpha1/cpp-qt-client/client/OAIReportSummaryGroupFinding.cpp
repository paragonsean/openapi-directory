/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryGroupFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryGroupFinding::OAIReportSummaryGroupFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryGroupFinding::OAIReportSummaryGroupFinding() {
    this->initializeModel();
}

OAIReportSummaryGroupFinding::~OAIReportSummaryGroupFinding() {}

void OAIReportSummaryGroupFinding::initializeModel() {

    m_asset_aggregate_stats_isSet = false;
    m_asset_aggregate_stats_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_overlapping_asset_count_isSet = false;
    m_overlapping_asset_count_isValid = false;

    m_preference_set_findings_isSet = false;
    m_preference_set_findings_isValid = false;
}

void OAIReportSummaryGroupFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryGroupFinding::fromJsonObject(QJsonObject json) {

    m_asset_aggregate_stats_isValid = ::OpenAPI::fromJsonValue(m_asset_aggregate_stats, json[QString("assetAggregateStats")]);
    m_asset_aggregate_stats_isSet = !json[QString("assetAggregateStats")].isNull() && m_asset_aggregate_stats_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_overlapping_asset_count_isValid = ::OpenAPI::fromJsonValue(m_overlapping_asset_count, json[QString("overlappingAssetCount")]);
    m_overlapping_asset_count_isSet = !json[QString("overlappingAssetCount")].isNull() && m_overlapping_asset_count_isValid;

    m_preference_set_findings_isValid = ::OpenAPI::fromJsonValue(m_preference_set_findings, json[QString("preferenceSetFindings")]);
    m_preference_set_findings_isSet = !json[QString("preferenceSetFindings")].isNull() && m_preference_set_findings_isValid;
}

QString OAIReportSummaryGroupFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryGroupFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_aggregate_stats.isSet()) {
        obj.insert(QString("assetAggregateStats"), ::OpenAPI::toJsonValue(m_asset_aggregate_stats));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_overlapping_asset_count_isSet) {
        obj.insert(QString("overlappingAssetCount"), ::OpenAPI::toJsonValue(m_overlapping_asset_count));
    }
    if (m_preference_set_findings.size() > 0) {
        obj.insert(QString("preferenceSetFindings"), ::OpenAPI::toJsonValue(m_preference_set_findings));
    }
    return obj;
}

OAIReportSummaryAssetAggregateStats OAIReportSummaryGroupFinding::getAssetAggregateStats() const {
    return m_asset_aggregate_stats;
}
void OAIReportSummaryGroupFinding::setAssetAggregateStats(const OAIReportSummaryAssetAggregateStats &asset_aggregate_stats) {
    m_asset_aggregate_stats = asset_aggregate_stats;
    m_asset_aggregate_stats_isSet = true;
}

bool OAIReportSummaryGroupFinding::is_asset_aggregate_stats_Set() const{
    return m_asset_aggregate_stats_isSet;
}

bool OAIReportSummaryGroupFinding::is_asset_aggregate_stats_Valid() const{
    return m_asset_aggregate_stats_isValid;
}

QString OAIReportSummaryGroupFinding::getDescription() const {
    return m_description;
}
void OAIReportSummaryGroupFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportSummaryGroupFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportSummaryGroupFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReportSummaryGroupFinding::getDisplayName() const {
    return m_display_name;
}
void OAIReportSummaryGroupFinding::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIReportSummaryGroupFinding::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIReportSummaryGroupFinding::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIReportSummaryGroupFinding::getOverlappingAssetCount() const {
    return m_overlapping_asset_count;
}
void OAIReportSummaryGroupFinding::setOverlappingAssetCount(const QString &overlapping_asset_count) {
    m_overlapping_asset_count = overlapping_asset_count;
    m_overlapping_asset_count_isSet = true;
}

bool OAIReportSummaryGroupFinding::is_overlapping_asset_count_Set() const{
    return m_overlapping_asset_count_isSet;
}

bool OAIReportSummaryGroupFinding::is_overlapping_asset_count_Valid() const{
    return m_overlapping_asset_count_isValid;
}

QList<OAIReportSummaryGroupPreferenceSetFinding> OAIReportSummaryGroupFinding::getPreferenceSetFindings() const {
    return m_preference_set_findings;
}
void OAIReportSummaryGroupFinding::setPreferenceSetFindings(const QList<OAIReportSummaryGroupPreferenceSetFinding> &preference_set_findings) {
    m_preference_set_findings = preference_set_findings;
    m_preference_set_findings_isSet = true;
}

bool OAIReportSummaryGroupFinding::is_preference_set_findings_Set() const{
    return m_preference_set_findings_isSet;
}

bool OAIReportSummaryGroupFinding::is_preference_set_findings_Valid() const{
    return m_preference_set_findings_isValid;
}

bool OAIReportSummaryGroupFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_aggregate_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlapping_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preference_set_findings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryGroupFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
