/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualMachinePreferences.h
 *
 * VirtualMachinePreferences enables you to create sets of preferences, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
 */

#ifndef OAIVirtualMachinePreferences_H
#define OAIVirtualMachinePreferences_H

#include <QJsonObject>

#include "OAIComputeEnginePreferences.h"
#include "OAIRegionPreferences.h"
#include "OAISoleTenancyPreferences.h"
#include "OAIVirtualMachinePreferencesNetworkCostParameters.h"
#include "OAIVirtualMachinePreferencesSizingOptimizationCustomParameters.h"
#include "OAIVmwareEnginePreferences.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputeEnginePreferences;
class OAIVirtualMachinePreferencesNetworkCostParameters;
class OAIRegionPreferences;
class OAIVirtualMachinePreferencesSizingOptimizationCustomParameters;
class OAISoleTenancyPreferences;
class OAIVmwareEnginePreferences;

class OAIVirtualMachinePreferences : public OAIObject {
public:
    OAIVirtualMachinePreferences();
    OAIVirtualMachinePreferences(QString json);
    ~OAIVirtualMachinePreferences() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommitmentPlan() const;
    void setCommitmentPlan(const QString &commitment_plan);
    bool is_commitment_plan_Set() const;
    bool is_commitment_plan_Valid() const;

    OAIComputeEnginePreferences getComputeEnginePreferences() const;
    void setComputeEnginePreferences(const OAIComputeEnginePreferences &compute_engine_preferences);
    bool is_compute_engine_preferences_Set() const;
    bool is_compute_engine_preferences_Valid() const;

    OAIVirtualMachinePreferencesNetworkCostParameters getNetworkCostParameters() const;
    void setNetworkCostParameters(const OAIVirtualMachinePreferencesNetworkCostParameters &network_cost_parameters);
    bool is_network_cost_parameters_Set() const;
    bool is_network_cost_parameters_Valid() const;

    OAIRegionPreferences getRegionPreferences() const;
    void setRegionPreferences(const OAIRegionPreferences &region_preferences);
    bool is_region_preferences_Set() const;
    bool is_region_preferences_Valid() const;

    OAIVirtualMachinePreferencesSizingOptimizationCustomParameters getSizingOptimizationCustomParameters() const;
    void setSizingOptimizationCustomParameters(const OAIVirtualMachinePreferencesSizingOptimizationCustomParameters &sizing_optimization_custom_parameters);
    bool is_sizing_optimization_custom_parameters_Set() const;
    bool is_sizing_optimization_custom_parameters_Valid() const;

    QString getSizingOptimizationStrategy() const;
    void setSizingOptimizationStrategy(const QString &sizing_optimization_strategy);
    bool is_sizing_optimization_strategy_Set() const;
    bool is_sizing_optimization_strategy_Valid() const;

    OAISoleTenancyPreferences getSoleTenancyPreferences() const;
    void setSoleTenancyPreferences(const OAISoleTenancyPreferences &sole_tenancy_preferences);
    bool is_sole_tenancy_preferences_Set() const;
    bool is_sole_tenancy_preferences_Valid() const;

    QString getTargetProduct() const;
    void setTargetProduct(const QString &target_product);
    bool is_target_product_Set() const;
    bool is_target_product_Valid() const;

    OAIVmwareEnginePreferences getVmwareEnginePreferences() const;
    void setVmwareEnginePreferences(const OAIVmwareEnginePreferences &vmware_engine_preferences);
    bool is_vmware_engine_preferences_Set() const;
    bool is_vmware_engine_preferences_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_commitment_plan;
    bool m_commitment_plan_isSet;
    bool m_commitment_plan_isValid;

    OAIComputeEnginePreferences m_compute_engine_preferences;
    bool m_compute_engine_preferences_isSet;
    bool m_compute_engine_preferences_isValid;

    OAIVirtualMachinePreferencesNetworkCostParameters m_network_cost_parameters;
    bool m_network_cost_parameters_isSet;
    bool m_network_cost_parameters_isValid;

    OAIRegionPreferences m_region_preferences;
    bool m_region_preferences_isSet;
    bool m_region_preferences_isValid;

    OAIVirtualMachinePreferencesSizingOptimizationCustomParameters m_sizing_optimization_custom_parameters;
    bool m_sizing_optimization_custom_parameters_isSet;
    bool m_sizing_optimization_custom_parameters_isValid;

    QString m_sizing_optimization_strategy;
    bool m_sizing_optimization_strategy_isSet;
    bool m_sizing_optimization_strategy_isValid;

    OAISoleTenancyPreferences m_sole_tenancy_preferences;
    bool m_sole_tenancy_preferences_isSet;
    bool m_sole_tenancy_preferences_isValid;

    QString m_target_product;
    bool m_target_product_isSet;
    bool m_target_product_isValid;

    OAIVmwareEnginePreferences m_vmware_engine_preferences;
    bool m_vmware_engine_preferences_isSet;
    bool m_vmware_engine_preferences_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualMachinePreferences)

#endif // OAIVirtualMachinePreferences_H
