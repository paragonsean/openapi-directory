/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetFrame::OAIAssetFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetFrame::OAIAssetFrame() {
    this->initializeModel();
}

OAIAssetFrame::~OAIAssetFrame() {}

void OAIAssetFrame::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_performance_samples_isSet = false;
    m_performance_samples_isValid = false;

    m_report_time_isSet = false;
    m_report_time_isValid = false;

    m_trace_token_isSet = false;
    m_trace_token_isValid = false;

    m_virtual_machine_details_isSet = false;
    m_virtual_machine_details_isValid = false;
}

void OAIAssetFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetFrame::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_performance_samples_isValid = ::OpenAPI::fromJsonValue(m_performance_samples, json[QString("performanceSamples")]);
    m_performance_samples_isSet = !json[QString("performanceSamples")].isNull() && m_performance_samples_isValid;

    m_report_time_isValid = ::OpenAPI::fromJsonValue(m_report_time, json[QString("reportTime")]);
    m_report_time_isSet = !json[QString("reportTime")].isNull() && m_report_time_isValid;

    m_trace_token_isValid = ::OpenAPI::fromJsonValue(m_trace_token, json[QString("traceToken")]);
    m_trace_token_isSet = !json[QString("traceToken")].isNull() && m_trace_token_isValid;

    m_virtual_machine_details_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_details, json[QString("virtualMachineDetails")]);
    m_virtual_machine_details_isSet = !json[QString("virtualMachineDetails")].isNull() && m_virtual_machine_details_isValid;
}

QString OAIAssetFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_performance_samples.size() > 0) {
        obj.insert(QString("performanceSamples"), ::OpenAPI::toJsonValue(m_performance_samples));
    }
    if (m_report_time_isSet) {
        obj.insert(QString("reportTime"), ::OpenAPI::toJsonValue(m_report_time));
    }
    if (m_trace_token_isSet) {
        obj.insert(QString("traceToken"), ::OpenAPI::toJsonValue(m_trace_token));
    }
    if (m_virtual_machine_details.isSet()) {
        obj.insert(QString("virtualMachineDetails"), ::OpenAPI::toJsonValue(m_virtual_machine_details));
    }
    return obj;
}

QMap<QString, QString> OAIAssetFrame::getAttributes() const {
    return m_attributes;
}
void OAIAssetFrame::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAssetFrame::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAssetFrame::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QString> OAIAssetFrame::getLabels() const {
    return m_labels;
}
void OAIAssetFrame::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAssetFrame::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAssetFrame::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAIPerformanceSample> OAIAssetFrame::getPerformanceSamples() const {
    return m_performance_samples;
}
void OAIAssetFrame::setPerformanceSamples(const QList<OAIPerformanceSample> &performance_samples) {
    m_performance_samples = performance_samples;
    m_performance_samples_isSet = true;
}

bool OAIAssetFrame::is_performance_samples_Set() const{
    return m_performance_samples_isSet;
}

bool OAIAssetFrame::is_performance_samples_Valid() const{
    return m_performance_samples_isValid;
}

QString OAIAssetFrame::getReportTime() const {
    return m_report_time;
}
void OAIAssetFrame::setReportTime(const QString &report_time) {
    m_report_time = report_time;
    m_report_time_isSet = true;
}

bool OAIAssetFrame::is_report_time_Set() const{
    return m_report_time_isSet;
}

bool OAIAssetFrame::is_report_time_Valid() const{
    return m_report_time_isValid;
}

QString OAIAssetFrame::getTraceToken() const {
    return m_trace_token;
}
void OAIAssetFrame::setTraceToken(const QString &trace_token) {
    m_trace_token = trace_token;
    m_trace_token_isSet = true;
}

bool OAIAssetFrame::is_trace_token_Set() const{
    return m_trace_token_isSet;
}

bool OAIAssetFrame::is_trace_token_Valid() const{
    return m_trace_token_isValid;
}

OAIVirtualMachineDetails OAIAssetFrame::getVirtualMachineDetails() const {
    return m_virtual_machine_details;
}
void OAIAssetFrame::setVirtualMachineDetails(const OAIVirtualMachineDetails &virtual_machine_details) {
    m_virtual_machine_details = virtual_machine_details;
    m_virtual_machine_details_isSet = true;
}

bool OAIAssetFrame::is_virtual_machine_details_Set() const{
    return m_virtual_machine_details_isSet;
}

bool OAIAssetFrame::is_virtual_machine_details_Valid() const{
    return m_virtual_machine_details_isValid;
}

bool OAIAssetFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
