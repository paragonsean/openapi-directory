/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareDiskConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareDiskConfig::OAIVmwareDiskConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareDiskConfig::OAIVmwareDiskConfig() {
    this->initializeModel();
}

OAIVmwareDiskConfig::~OAIVmwareDiskConfig() {}

void OAIVmwareDiskConfig::initializeModel() {

    m_backing_type_isSet = false;
    m_backing_type_isValid = false;

    m_rdm_compatibility_mode_isSet = false;
    m_rdm_compatibility_mode_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_vmdk_disk_mode_isSet = false;
    m_vmdk_disk_mode_isValid = false;
}

void OAIVmwareDiskConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareDiskConfig::fromJsonObject(QJsonObject json) {

    m_backing_type_isValid = ::OpenAPI::fromJsonValue(m_backing_type, json[QString("backingType")]);
    m_backing_type_isSet = !json[QString("backingType")].isNull() && m_backing_type_isValid;

    m_rdm_compatibility_mode_isValid = ::OpenAPI::fromJsonValue(m_rdm_compatibility_mode, json[QString("rdmCompatibilityMode")]);
    m_rdm_compatibility_mode_isSet = !json[QString("rdmCompatibilityMode")].isNull() && m_rdm_compatibility_mode_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_vmdk_disk_mode_isValid = ::OpenAPI::fromJsonValue(m_vmdk_disk_mode, json[QString("vmdkDiskMode")]);
    m_vmdk_disk_mode_isSet = !json[QString("vmdkDiskMode")].isNull() && m_vmdk_disk_mode_isValid;
}

QString OAIVmwareDiskConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareDiskConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_backing_type_isSet) {
        obj.insert(QString("backingType"), ::OpenAPI::toJsonValue(m_backing_type));
    }
    if (m_rdm_compatibility_mode_isSet) {
        obj.insert(QString("rdmCompatibilityMode"), ::OpenAPI::toJsonValue(m_rdm_compatibility_mode));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_vmdk_disk_mode_isSet) {
        obj.insert(QString("vmdkDiskMode"), ::OpenAPI::toJsonValue(m_vmdk_disk_mode));
    }
    return obj;
}

QString OAIVmwareDiskConfig::getBackingType() const {
    return m_backing_type;
}
void OAIVmwareDiskConfig::setBackingType(const QString &backing_type) {
    m_backing_type = backing_type;
    m_backing_type_isSet = true;
}

bool OAIVmwareDiskConfig::is_backing_type_Set() const{
    return m_backing_type_isSet;
}

bool OAIVmwareDiskConfig::is_backing_type_Valid() const{
    return m_backing_type_isValid;
}

QString OAIVmwareDiskConfig::getRdmCompatibilityMode() const {
    return m_rdm_compatibility_mode;
}
void OAIVmwareDiskConfig::setRdmCompatibilityMode(const QString &rdm_compatibility_mode) {
    m_rdm_compatibility_mode = rdm_compatibility_mode;
    m_rdm_compatibility_mode_isSet = true;
}

bool OAIVmwareDiskConfig::is_rdm_compatibility_mode_Set() const{
    return m_rdm_compatibility_mode_isSet;
}

bool OAIVmwareDiskConfig::is_rdm_compatibility_mode_Valid() const{
    return m_rdm_compatibility_mode_isValid;
}

bool OAIVmwareDiskConfig::isShared() const {
    return m_shared;
}
void OAIVmwareDiskConfig::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIVmwareDiskConfig::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIVmwareDiskConfig::is_shared_Valid() const{
    return m_shared_isValid;
}

QString OAIVmwareDiskConfig::getVmdkDiskMode() const {
    return m_vmdk_disk_mode;
}
void OAIVmwareDiskConfig::setVmdkDiskMode(const QString &vmdk_disk_mode) {
    m_vmdk_disk_mode = vmdk_disk_mode;
    m_vmdk_disk_mode_isSet = true;
}

bool OAIVmwareDiskConfig::is_vmdk_disk_mode_Set() const{
    return m_vmdk_disk_mode_isSet;
}

bool OAIVmwareDiskConfig::is_vmdk_disk_mode_Valid() const{
    return m_vmdk_disk_mode_isValid;
}

bool OAIVmwareDiskConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdm_compatibility_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmdk_disk_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareDiskConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
