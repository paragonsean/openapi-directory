/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunningService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunningService::OAIRunningService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunningService::OAIRunningService() {
    this->initializeModel();
}

OAIRunningService::~OAIRunningService() {}

void OAIRunningService::initializeModel() {

    m_cmdline_isSet = false;
    m_cmdline_isValid = false;

    m_exe_path_isSet = false;
    m_exe_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_start_mode_isSet = false;
    m_start_mode_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRunningService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunningService::fromJsonObject(QJsonObject json) {

    m_cmdline_isValid = ::OpenAPI::fromJsonValue(m_cmdline, json[QString("cmdline")]);
    m_cmdline_isSet = !json[QString("cmdline")].isNull() && m_cmdline_isValid;

    m_exe_path_isValid = ::OpenAPI::fromJsonValue(m_exe_path, json[QString("exePath")]);
    m_exe_path_isSet = !json[QString("exePath")].isNull() && m_exe_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_start_mode_isValid = ::OpenAPI::fromJsonValue(m_start_mode, json[QString("startMode")]);
    m_start_mode_isSet = !json[QString("startMode")].isNull() && m_start_mode_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRunningService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunningService::asJsonObject() const {
    QJsonObject obj;
    if (m_cmdline_isSet) {
        obj.insert(QString("cmdline"), ::OpenAPI::toJsonValue(m_cmdline));
    }
    if (m_exe_path_isSet) {
        obj.insert(QString("exePath"), ::OpenAPI::toJsonValue(m_exe_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_start_mode_isSet) {
        obj.insert(QString("startMode"), ::OpenAPI::toJsonValue(m_start_mode));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIRunningService::getCmdline() const {
    return m_cmdline;
}
void OAIRunningService::setCmdline(const QString &cmdline) {
    m_cmdline = cmdline;
    m_cmdline_isSet = true;
}

bool OAIRunningService::is_cmdline_Set() const{
    return m_cmdline_isSet;
}

bool OAIRunningService::is_cmdline_Valid() const{
    return m_cmdline_isValid;
}

QString OAIRunningService::getExePath() const {
    return m_exe_path;
}
void OAIRunningService::setExePath(const QString &exe_path) {
    m_exe_path = exe_path;
    m_exe_path_isSet = true;
}

bool OAIRunningService::is_exe_path_Set() const{
    return m_exe_path_isSet;
}

bool OAIRunningService::is_exe_path_Valid() const{
    return m_exe_path_isValid;
}

QString OAIRunningService::getName() const {
    return m_name;
}
void OAIRunningService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRunningService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRunningService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRunningService::getPid() const {
    return m_pid;
}
void OAIRunningService::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIRunningService::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIRunningService::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIRunningService::getStartMode() const {
    return m_start_mode;
}
void OAIRunningService::setStartMode(const QString &start_mode) {
    m_start_mode = start_mode;
    m_start_mode_isSet = true;
}

bool OAIRunningService::is_start_mode_Set() const{
    return m_start_mode_isSet;
}

bool OAIRunningService::is_start_mode_Valid() const{
    return m_start_mode_isValid;
}

QString OAIRunningService::getState() const {
    return m_state;
}
void OAIRunningService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRunningService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRunningService::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRunningService::getStatus() const {
    return m_status;
}
void OAIRunningService::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRunningService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRunningService::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRunningService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cmdline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exe_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunningService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
