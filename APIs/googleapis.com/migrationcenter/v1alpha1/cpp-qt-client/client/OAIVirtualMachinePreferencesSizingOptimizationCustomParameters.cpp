/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachinePreferencesSizingOptimizationCustomParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::OAIVirtualMachinePreferencesSizingOptimizationCustomParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::OAIVirtualMachinePreferencesSizingOptimizationCustomParameters() {
    this->initializeModel();
}

OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::~OAIVirtualMachinePreferencesSizingOptimizationCustomParameters() {}

void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::initializeModel() {

    m_aggregation_method_isSet = false;
    m_aggregation_method_isValid = false;

    m_cpu_usage_percentage_isSet = false;
    m_cpu_usage_percentage_isValid = false;

    m_memory_usage_percentage_isSet = false;
    m_memory_usage_percentage_isValid = false;

    m_storage_multiplier_isSet = false;
    m_storage_multiplier_isValid = false;
}

void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::fromJsonObject(QJsonObject json) {

    m_aggregation_method_isValid = ::OpenAPI::fromJsonValue(m_aggregation_method, json[QString("aggregationMethod")]);
    m_aggregation_method_isSet = !json[QString("aggregationMethod")].isNull() && m_aggregation_method_isValid;

    m_cpu_usage_percentage_isValid = ::OpenAPI::fromJsonValue(m_cpu_usage_percentage, json[QString("cpuUsagePercentage")]);
    m_cpu_usage_percentage_isSet = !json[QString("cpuUsagePercentage")].isNull() && m_cpu_usage_percentage_isValid;

    m_memory_usage_percentage_isValid = ::OpenAPI::fromJsonValue(m_memory_usage_percentage, json[QString("memoryUsagePercentage")]);
    m_memory_usage_percentage_isSet = !json[QString("memoryUsagePercentage")].isNull() && m_memory_usage_percentage_isValid;

    m_storage_multiplier_isValid = ::OpenAPI::fromJsonValue(m_storage_multiplier, json[QString("storageMultiplier")]);
    m_storage_multiplier_isSet = !json[QString("storageMultiplier")].isNull() && m_storage_multiplier_isValid;
}

QString OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_method_isSet) {
        obj.insert(QString("aggregationMethod"), ::OpenAPI::toJsonValue(m_aggregation_method));
    }
    if (m_cpu_usage_percentage_isSet) {
        obj.insert(QString("cpuUsagePercentage"), ::OpenAPI::toJsonValue(m_cpu_usage_percentage));
    }
    if (m_memory_usage_percentage_isSet) {
        obj.insert(QString("memoryUsagePercentage"), ::OpenAPI::toJsonValue(m_memory_usage_percentage));
    }
    if (m_storage_multiplier_isSet) {
        obj.insert(QString("storageMultiplier"), ::OpenAPI::toJsonValue(m_storage_multiplier));
    }
    return obj;
}

QString OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::getAggregationMethod() const {
    return m_aggregation_method;
}
void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::setAggregationMethod(const QString &aggregation_method) {
    m_aggregation_method = aggregation_method;
    m_aggregation_method_isSet = true;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_aggregation_method_Set() const{
    return m_aggregation_method_isSet;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_aggregation_method_Valid() const{
    return m_aggregation_method_isValid;
}

qint32 OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::getCpuUsagePercentage() const {
    return m_cpu_usage_percentage;
}
void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::setCpuUsagePercentage(const qint32 &cpu_usage_percentage) {
    m_cpu_usage_percentage = cpu_usage_percentage;
    m_cpu_usage_percentage_isSet = true;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_cpu_usage_percentage_Set() const{
    return m_cpu_usage_percentage_isSet;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_cpu_usage_percentage_Valid() const{
    return m_cpu_usage_percentage_isValid;
}

qint32 OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::getMemoryUsagePercentage() const {
    return m_memory_usage_percentage;
}
void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::setMemoryUsagePercentage(const qint32 &memory_usage_percentage) {
    m_memory_usage_percentage = memory_usage_percentage;
    m_memory_usage_percentage_isSet = true;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_memory_usage_percentage_Set() const{
    return m_memory_usage_percentage_isSet;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_memory_usage_percentage_Valid() const{
    return m_memory_usage_percentage_isValid;
}

double OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::getStorageMultiplier() const {
    return m_storage_multiplier;
}
void OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::setStorageMultiplier(const double &storage_multiplier) {
    m_storage_multiplier = storage_multiplier;
    m_storage_multiplier_isSet = true;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_storage_multiplier_Set() const{
    return m_storage_multiplier_isSet;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::is_storage_multiplier_Valid() const{
    return m_storage_multiplier_isValid;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_usage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_usage_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachinePreferencesSizingOptimizationCustomParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
