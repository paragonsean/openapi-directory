/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportRowError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportRowError::OAIImportRowError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportRowError::OAIImportRowError() {
    this->initializeModel();
}

OAIImportRowError::~OAIImportRowError() {}

void OAIImportRowError::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_row_number_isSet = false;
    m_row_number_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_vm_uuid_isSet = false;
    m_vm_uuid_isValid = false;
}

void OAIImportRowError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportRowError::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_row_number_isValid = ::OpenAPI::fromJsonValue(m_row_number, json[QString("rowNumber")]);
    m_row_number_isSet = !json[QString("rowNumber")].isNull() && m_row_number_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_vm_uuid_isValid = ::OpenAPI::fromJsonValue(m_vm_uuid, json[QString("vmUuid")]);
    m_vm_uuid_isSet = !json[QString("vmUuid")].isNull() && m_vm_uuid_isValid;
}

QString OAIImportRowError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportRowError::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_row_number_isSet) {
        obj.insert(QString("rowNumber"), ::OpenAPI::toJsonValue(m_row_number));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_vm_uuid_isSet) {
        obj.insert(QString("vmUuid"), ::OpenAPI::toJsonValue(m_vm_uuid));
    }
    return obj;
}

QList<OAIImportError> OAIImportRowError::getErrors() const {
    return m_errors;
}
void OAIImportRowError::setErrors(const QList<OAIImportError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIImportRowError::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIImportRowError::is_errors_Valid() const{
    return m_errors_isValid;
}

qint32 OAIImportRowError::getRowNumber() const {
    return m_row_number;
}
void OAIImportRowError::setRowNumber(const qint32 &row_number) {
    m_row_number = row_number;
    m_row_number_isSet = true;
}

bool OAIImportRowError::is_row_number_Set() const{
    return m_row_number_isSet;
}

bool OAIImportRowError::is_row_number_Valid() const{
    return m_row_number_isValid;
}

QString OAIImportRowError::getVmName() const {
    return m_vm_name;
}
void OAIImportRowError::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIImportRowError::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIImportRowError::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

QString OAIImportRowError::getVmUuid() const {
    return m_vm_uuid;
}
void OAIImportRowError::setVmUuid(const QString &vm_uuid) {
    m_vm_uuid = vm_uuid;
    m_vm_uuid_isSet = true;
}

bool OAIImportRowError::is_vm_uuid_Set() const{
    return m_vm_uuid_isSet;
}

bool OAIImportRowError::is_vm_uuid_Valid() const{
    return m_vm_uuid_isValid;
}

bool OAIImportRowError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportRowError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
