/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunningProcess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunningProcess::OAIRunningProcess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunningProcess::OAIRunningProcess() {
    this->initializeModel();
}

OAIRunningProcess::~OAIRunningProcess() {}

void OAIRunningProcess::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_cmdline_isSet = false;
    m_cmdline_isValid = false;

    m_exe_path_isSet = false;
    m_exe_path_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRunningProcess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunningProcess::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_cmdline_isValid = ::OpenAPI::fromJsonValue(m_cmdline, json[QString("cmdline")]);
    m_cmdline_isSet = !json[QString("cmdline")].isNull() && m_cmdline_isValid;

    m_exe_path_isValid = ::OpenAPI::fromJsonValue(m_exe_path, json[QString("exePath")]);
    m_exe_path_isSet = !json[QString("exePath")].isNull() && m_exe_path_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRunningProcess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunningProcess::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_cmdline_isSet) {
        obj.insert(QString("cmdline"), ::OpenAPI::toJsonValue(m_cmdline));
    }
    if (m_exe_path_isSet) {
        obj.insert(QString("exePath"), ::OpenAPI::toJsonValue(m_exe_path));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QMap<QString, QString> OAIRunningProcess::getAttributes() const {
    return m_attributes;
}
void OAIRunningProcess::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRunningProcess::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRunningProcess::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIRunningProcess::getCmdline() const {
    return m_cmdline;
}
void OAIRunningProcess::setCmdline(const QString &cmdline) {
    m_cmdline = cmdline;
    m_cmdline_isSet = true;
}

bool OAIRunningProcess::is_cmdline_Set() const{
    return m_cmdline_isSet;
}

bool OAIRunningProcess::is_cmdline_Valid() const{
    return m_cmdline_isValid;
}

QString OAIRunningProcess::getExePath() const {
    return m_exe_path;
}
void OAIRunningProcess::setExePath(const QString &exe_path) {
    m_exe_path = exe_path;
    m_exe_path_isSet = true;
}

bool OAIRunningProcess::is_exe_path_Set() const{
    return m_exe_path_isSet;
}

bool OAIRunningProcess::is_exe_path_Valid() const{
    return m_exe_path_isValid;
}

QString OAIRunningProcess::getPid() const {
    return m_pid;
}
void OAIRunningProcess::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAIRunningProcess::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAIRunningProcess::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAIRunningProcess::getUser() const {
    return m_user;
}
void OAIRunningProcess::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRunningProcess::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRunningProcess::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRunningProcess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmdline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exe_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunningProcess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
