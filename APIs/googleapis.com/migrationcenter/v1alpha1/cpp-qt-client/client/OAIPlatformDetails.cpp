/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformDetails::OAIPlatformDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformDetails::OAIPlatformDetails() {
    this->initializeModel();
}

OAIPlatformDetails::~OAIPlatformDetails() {}

void OAIPlatformDetails::initializeModel() {

    m_aws_ec2_details_isSet = false;
    m_aws_ec2_details_isValid = false;

    m_azure_vm_details_isSet = false;
    m_azure_vm_details_isValid = false;

    m_generic_details_isSet = false;
    m_generic_details_isValid = false;

    m_physical_details_isSet = false;
    m_physical_details_isValid = false;

    m_vmware_details_isSet = false;
    m_vmware_details_isValid = false;
}

void OAIPlatformDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformDetails::fromJsonObject(QJsonObject json) {

    m_aws_ec2_details_isValid = ::OpenAPI::fromJsonValue(m_aws_ec2_details, json[QString("awsEc2Details")]);
    m_aws_ec2_details_isSet = !json[QString("awsEc2Details")].isNull() && m_aws_ec2_details_isValid;

    m_azure_vm_details_isValid = ::OpenAPI::fromJsonValue(m_azure_vm_details, json[QString("azureVmDetails")]);
    m_azure_vm_details_isSet = !json[QString("azureVmDetails")].isNull() && m_azure_vm_details_isValid;

    m_generic_details_isValid = ::OpenAPI::fromJsonValue(m_generic_details, json[QString("genericDetails")]);
    m_generic_details_isSet = !json[QString("genericDetails")].isNull() && m_generic_details_isValid;

    m_physical_details_isValid = ::OpenAPI::fromJsonValue(m_physical_details, json[QString("physicalDetails")]);
    m_physical_details_isSet = !json[QString("physicalDetails")].isNull() && m_physical_details_isValid;

    m_vmware_details_isValid = ::OpenAPI::fromJsonValue(m_vmware_details, json[QString("vmwareDetails")]);
    m_vmware_details_isSet = !json[QString("vmwareDetails")].isNull() && m_vmware_details_isValid;
}

QString OAIPlatformDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_ec2_details.isSet()) {
        obj.insert(QString("awsEc2Details"), ::OpenAPI::toJsonValue(m_aws_ec2_details));
    }
    if (m_azure_vm_details.isSet()) {
        obj.insert(QString("azureVmDetails"), ::OpenAPI::toJsonValue(m_azure_vm_details));
    }
    if (m_generic_details.isSet()) {
        obj.insert(QString("genericDetails"), ::OpenAPI::toJsonValue(m_generic_details));
    }
    if (m_physical_details.isSet()) {
        obj.insert(QString("physicalDetails"), ::OpenAPI::toJsonValue(m_physical_details));
    }
    if (m_vmware_details.isSet()) {
        obj.insert(QString("vmwareDetails"), ::OpenAPI::toJsonValue(m_vmware_details));
    }
    return obj;
}

OAIAwsEc2PlatformDetails OAIPlatformDetails::getAwsEc2Details() const {
    return m_aws_ec2_details;
}
void OAIPlatformDetails::setAwsEc2Details(const OAIAwsEc2PlatformDetails &aws_ec2_details) {
    m_aws_ec2_details = aws_ec2_details;
    m_aws_ec2_details_isSet = true;
}

bool OAIPlatformDetails::is_aws_ec2_details_Set() const{
    return m_aws_ec2_details_isSet;
}

bool OAIPlatformDetails::is_aws_ec2_details_Valid() const{
    return m_aws_ec2_details_isValid;
}

OAIAzureVmPlatformDetails OAIPlatformDetails::getAzureVmDetails() const {
    return m_azure_vm_details;
}
void OAIPlatformDetails::setAzureVmDetails(const OAIAzureVmPlatformDetails &azure_vm_details) {
    m_azure_vm_details = azure_vm_details;
    m_azure_vm_details_isSet = true;
}

bool OAIPlatformDetails::is_azure_vm_details_Set() const{
    return m_azure_vm_details_isSet;
}

bool OAIPlatformDetails::is_azure_vm_details_Valid() const{
    return m_azure_vm_details_isValid;
}

OAIGenericPlatformDetails OAIPlatformDetails::getGenericDetails() const {
    return m_generic_details;
}
void OAIPlatformDetails::setGenericDetails(const OAIGenericPlatformDetails &generic_details) {
    m_generic_details = generic_details;
    m_generic_details_isSet = true;
}

bool OAIPlatformDetails::is_generic_details_Set() const{
    return m_generic_details_isSet;
}

bool OAIPlatformDetails::is_generic_details_Valid() const{
    return m_generic_details_isValid;
}

OAIPhysicalPlatformDetails OAIPlatformDetails::getPhysicalDetails() const {
    return m_physical_details;
}
void OAIPlatformDetails::setPhysicalDetails(const OAIPhysicalPlatformDetails &physical_details) {
    m_physical_details = physical_details;
    m_physical_details_isSet = true;
}

bool OAIPlatformDetails::is_physical_details_Set() const{
    return m_physical_details_isSet;
}

bool OAIPlatformDetails::is_physical_details_Valid() const{
    return m_physical_details_isValid;
}

OAIVmwarePlatformDetails OAIPlatformDetails::getVmwareDetails() const {
    return m_vmware_details;
}
void OAIPlatformDetails::setVmwareDetails(const OAIVmwarePlatformDetails &vmware_details) {
    m_vmware_details = vmware_details;
    m_vmware_details_isSet = true;
}

bool OAIPlatformDetails::is_vmware_details_Set() const{
    return m_vmware_details_isSet;
}

bool OAIPlatformDetails::is_vmware_details_Valid() const{
    return m_vmware_details_isValid;
}

bool OAIPlatformDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_ec2_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_vm_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
