/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryUtilizationChartData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryUtilizationChartData::OAIReportSummaryUtilizationChartData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryUtilizationChartData::OAIReportSummaryUtilizationChartData() {
    this->initializeModel();
}

OAIReportSummaryUtilizationChartData::~OAIReportSummaryUtilizationChartData() {}

void OAIReportSummaryUtilizationChartData::initializeModel() {

    m_free_isSet = false;
    m_free_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIReportSummaryUtilizationChartData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryUtilizationChartData::fromJsonObject(QJsonObject json) {

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIReportSummaryUtilizationChartData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryUtilizationChartData::asJsonObject() const {
    QJsonObject obj;
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

QString OAIReportSummaryUtilizationChartData::getFree() const {
    return m_free;
}
void OAIReportSummaryUtilizationChartData::setFree(const QString &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIReportSummaryUtilizationChartData::is_free_Set() const{
    return m_free_isSet;
}

bool OAIReportSummaryUtilizationChartData::is_free_Valid() const{
    return m_free_isValid;
}

QString OAIReportSummaryUtilizationChartData::getUsed() const {
    return m_used;
}
void OAIReportSummaryUtilizationChartData::setUsed(const QString &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIReportSummaryUtilizationChartData::is_used_Set() const{
    return m_used_isSet;
}

bool OAIReportSummaryUtilizationChartData::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIReportSummaryUtilizationChartData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryUtilizationChartData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
