/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualMachineDetails.h
 *
 * Details of a VirtualMachine.
 */

#ifndef OAIVirtualMachineDetails_H
#define OAIVirtualMachineDetails_H

#include <QJsonObject>

#include "OAIGuestOsDetails.h"
#include "OAIPlatformDetails.h"
#include "OAIVirtualMachineArchitectureDetails.h"
#include "OAIVirtualMachineDiskDetails.h"
#include "OAIVirtualMachineNetworkDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGuestOsDetails;
class OAIPlatformDetails;
class OAIVirtualMachineArchitectureDetails;
class OAIVirtualMachineDiskDetails;
class OAIVirtualMachineNetworkDetails;

class OAIVirtualMachineDetails : public OAIObject {
public:
    OAIVirtualMachineDetails();
    OAIVirtualMachineDetails(QString json);
    ~OAIVirtualMachineDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCoreCount() const;
    void setCoreCount(const qint32 &core_count);
    bool is_core_count_Set() const;
    bool is_core_count_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAIGuestOsDetails getGuestOs() const;
    void setGuestOs(const OAIGuestOsDetails &guest_os);
    bool is_guest_os_Set() const;
    bool is_guest_os_Valid() const;

    qint32 getMemoryMb() const;
    void setMemoryMb(const qint32 &memory_mb);
    bool is_memory_mb_Set() const;
    bool is_memory_mb_Valid() const;

    QString getOsFamily() const;
    void setOsFamily(const QString &os_family);
    bool is_os_family_Set() const;
    bool is_os_family_Valid() const;

    QString getOsName() const;
    void setOsName(const QString &os_name);
    bool is_os_name_Set() const;
    bool is_os_name_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    OAIPlatformDetails getPlatform() const;
    void setPlatform(const OAIPlatformDetails &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getPowerState() const;
    void setPowerState(const QString &power_state);
    bool is_power_state_Set() const;
    bool is_power_state_Valid() const;

    QString getVcenterFolder() const;
    void setVcenterFolder(const QString &vcenter_folder);
    bool is_vcenter_folder_Set() const;
    bool is_vcenter_folder_Valid() const;

    QString getVcenterUrl() const;
    void setVcenterUrl(const QString &vcenter_url);
    bool is_vcenter_url_Set() const;
    bool is_vcenter_url_Valid() const;

    QString getVcenterVmId() const;
    void setVcenterVmId(const QString &vcenter_vm_id);
    bool is_vcenter_vm_id_Set() const;
    bool is_vcenter_vm_id_Valid() const;

    OAIVirtualMachineArchitectureDetails getVmArchitecture() const;
    void setVmArchitecture(const OAIVirtualMachineArchitectureDetails &vm_architecture);
    bool is_vm_architecture_Set() const;
    bool is_vm_architecture_Valid() const;

    OAIVirtualMachineDiskDetails getVmDisks() const;
    void setVmDisks(const OAIVirtualMachineDiskDetails &vm_disks);
    bool is_vm_disks_Set() const;
    bool is_vm_disks_Valid() const;

    QString getVmName() const;
    void setVmName(const QString &vm_name);
    bool is_vm_name_Set() const;
    bool is_vm_name_Valid() const;

    OAIVirtualMachineNetworkDetails getVmNetwork() const;
    void setVmNetwork(const OAIVirtualMachineNetworkDetails &vm_network);
    bool is_vm_network_Set() const;
    bool is_vm_network_Valid() const;

    QString getVmUuid() const;
    void setVmUuid(const QString &vm_uuid);
    bool is_vm_uuid_Set() const;
    bool is_vm_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_core_count;
    bool m_core_count_isSet;
    bool m_core_count_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAIGuestOsDetails m_guest_os;
    bool m_guest_os_isSet;
    bool m_guest_os_isValid;

    qint32 m_memory_mb;
    bool m_memory_mb_isSet;
    bool m_memory_mb_isValid;

    QString m_os_family;
    bool m_os_family_isSet;
    bool m_os_family_isValid;

    QString m_os_name;
    bool m_os_name_isSet;
    bool m_os_name_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    OAIPlatformDetails m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_power_state;
    bool m_power_state_isSet;
    bool m_power_state_isValid;

    QString m_vcenter_folder;
    bool m_vcenter_folder_isSet;
    bool m_vcenter_folder_isValid;

    QString m_vcenter_url;
    bool m_vcenter_url_isSet;
    bool m_vcenter_url_isValid;

    QString m_vcenter_vm_id;
    bool m_vcenter_vm_id_isSet;
    bool m_vcenter_vm_id_isValid;

    OAIVirtualMachineArchitectureDetails m_vm_architecture;
    bool m_vm_architecture_isSet;
    bool m_vm_architecture_isValid;

    OAIVirtualMachineDiskDetails m_vm_disks;
    bool m_vm_disks_isSet;
    bool m_vm_disks_isValid;

    QString m_vm_name;
    bool m_vm_name_isSet;
    bool m_vm_name_isValid;

    OAIVirtualMachineNetworkDetails m_vm_network;
    bool m_vm_network_isSet;
    bool m_vm_network_isValid;

    QString m_vm_uuid;
    bool m_vm_uuid_isSet;
    bool m_vm_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualMachineDetails)

#endif // OAIVirtualMachineDetails_H
