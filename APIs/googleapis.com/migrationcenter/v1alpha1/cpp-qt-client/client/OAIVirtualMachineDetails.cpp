/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineDetails::OAIVirtualMachineDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineDetails::OAIVirtualMachineDetails() {
    this->initializeModel();
}

OAIVirtualMachineDetails::~OAIVirtualMachineDetails() {}

void OAIVirtualMachineDetails::initializeModel() {

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_guest_os_isSet = false;
    m_guest_os_isValid = false;

    m_memory_mb_isSet = false;
    m_memory_mb_isValid = false;

    m_os_family_isSet = false;
    m_os_family_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_power_state_isSet = false;
    m_power_state_isValid = false;

    m_vcenter_folder_isSet = false;
    m_vcenter_folder_isValid = false;

    m_vcenter_url_isSet = false;
    m_vcenter_url_isValid = false;

    m_vcenter_vm_id_isSet = false;
    m_vcenter_vm_id_isValid = false;

    m_vm_architecture_isSet = false;
    m_vm_architecture_isValid = false;

    m_vm_disks_isSet = false;
    m_vm_disks_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_vm_network_isSet = false;
    m_vm_network_isValid = false;

    m_vm_uuid_isSet = false;
    m_vm_uuid_isValid = false;
}

void OAIVirtualMachineDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineDetails::fromJsonObject(QJsonObject json) {

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("coreCount")]);
    m_core_count_isSet = !json[QString("coreCount")].isNull() && m_core_count_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_guest_os_isValid = ::OpenAPI::fromJsonValue(m_guest_os, json[QString("guestOs")]);
    m_guest_os_isSet = !json[QString("guestOs")].isNull() && m_guest_os_isValid;

    m_memory_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_mb, json[QString("memoryMb")]);
    m_memory_mb_isSet = !json[QString("memoryMb")].isNull() && m_memory_mb_isValid;

    m_os_family_isValid = ::OpenAPI::fromJsonValue(m_os_family, json[QString("osFamily")]);
    m_os_family_isSet = !json[QString("osFamily")].isNull() && m_os_family_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_power_state_isValid = ::OpenAPI::fromJsonValue(m_power_state, json[QString("powerState")]);
    m_power_state_isSet = !json[QString("powerState")].isNull() && m_power_state_isValid;

    m_vcenter_folder_isValid = ::OpenAPI::fromJsonValue(m_vcenter_folder, json[QString("vcenterFolder")]);
    m_vcenter_folder_isSet = !json[QString("vcenterFolder")].isNull() && m_vcenter_folder_isValid;

    m_vcenter_url_isValid = ::OpenAPI::fromJsonValue(m_vcenter_url, json[QString("vcenterUrl")]);
    m_vcenter_url_isSet = !json[QString("vcenterUrl")].isNull() && m_vcenter_url_isValid;

    m_vcenter_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vcenter_vm_id, json[QString("vcenterVmId")]);
    m_vcenter_vm_id_isSet = !json[QString("vcenterVmId")].isNull() && m_vcenter_vm_id_isValid;

    m_vm_architecture_isValid = ::OpenAPI::fromJsonValue(m_vm_architecture, json[QString("vmArchitecture")]);
    m_vm_architecture_isSet = !json[QString("vmArchitecture")].isNull() && m_vm_architecture_isValid;

    m_vm_disks_isValid = ::OpenAPI::fromJsonValue(m_vm_disks, json[QString("vmDisks")]);
    m_vm_disks_isSet = !json[QString("vmDisks")].isNull() && m_vm_disks_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_vm_network_isValid = ::OpenAPI::fromJsonValue(m_vm_network, json[QString("vmNetwork")]);
    m_vm_network_isSet = !json[QString("vmNetwork")].isNull() && m_vm_network_isValid;

    m_vm_uuid_isValid = ::OpenAPI::fromJsonValue(m_vm_uuid, json[QString("vmUuid")]);
    m_vm_uuid_isSet = !json[QString("vmUuid")].isNull() && m_vm_uuid_isValid;
}

QString OAIVirtualMachineDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_core_count_isSet) {
        obj.insert(QString("coreCount"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_guest_os.isSet()) {
        obj.insert(QString("guestOs"), ::OpenAPI::toJsonValue(m_guest_os));
    }
    if (m_memory_mb_isSet) {
        obj.insert(QString("memoryMb"), ::OpenAPI::toJsonValue(m_memory_mb));
    }
    if (m_os_family_isSet) {
        obj.insert(QString("osFamily"), ::OpenAPI::toJsonValue(m_os_family));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_power_state_isSet) {
        obj.insert(QString("powerState"), ::OpenAPI::toJsonValue(m_power_state));
    }
    if (m_vcenter_folder_isSet) {
        obj.insert(QString("vcenterFolder"), ::OpenAPI::toJsonValue(m_vcenter_folder));
    }
    if (m_vcenter_url_isSet) {
        obj.insert(QString("vcenterUrl"), ::OpenAPI::toJsonValue(m_vcenter_url));
    }
    if (m_vcenter_vm_id_isSet) {
        obj.insert(QString("vcenterVmId"), ::OpenAPI::toJsonValue(m_vcenter_vm_id));
    }
    if (m_vm_architecture.isSet()) {
        obj.insert(QString("vmArchitecture"), ::OpenAPI::toJsonValue(m_vm_architecture));
    }
    if (m_vm_disks.isSet()) {
        obj.insert(QString("vmDisks"), ::OpenAPI::toJsonValue(m_vm_disks));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_vm_network.isSet()) {
        obj.insert(QString("vmNetwork"), ::OpenAPI::toJsonValue(m_vm_network));
    }
    if (m_vm_uuid_isSet) {
        obj.insert(QString("vmUuid"), ::OpenAPI::toJsonValue(m_vm_uuid));
    }
    return obj;
}

qint32 OAIVirtualMachineDetails::getCoreCount() const {
    return m_core_count;
}
void OAIVirtualMachineDetails::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAIVirtualMachineDetails::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAIVirtualMachineDetails::is_core_count_Valid() const{
    return m_core_count_isValid;
}

QString OAIVirtualMachineDetails::getCreateTime() const {
    return m_create_time;
}
void OAIVirtualMachineDetails::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVirtualMachineDetails::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVirtualMachineDetails::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGuestOsDetails OAIVirtualMachineDetails::getGuestOs() const {
    return m_guest_os;
}
void OAIVirtualMachineDetails::setGuestOs(const OAIGuestOsDetails &guest_os) {
    m_guest_os = guest_os;
    m_guest_os_isSet = true;
}

bool OAIVirtualMachineDetails::is_guest_os_Set() const{
    return m_guest_os_isSet;
}

bool OAIVirtualMachineDetails::is_guest_os_Valid() const{
    return m_guest_os_isValid;
}

qint32 OAIVirtualMachineDetails::getMemoryMb() const {
    return m_memory_mb;
}
void OAIVirtualMachineDetails::setMemoryMb(const qint32 &memory_mb) {
    m_memory_mb = memory_mb;
    m_memory_mb_isSet = true;
}

bool OAIVirtualMachineDetails::is_memory_mb_Set() const{
    return m_memory_mb_isSet;
}

bool OAIVirtualMachineDetails::is_memory_mb_Valid() const{
    return m_memory_mb_isValid;
}

QString OAIVirtualMachineDetails::getOsFamily() const {
    return m_os_family;
}
void OAIVirtualMachineDetails::setOsFamily(const QString &os_family) {
    m_os_family = os_family;
    m_os_family_isSet = true;
}

bool OAIVirtualMachineDetails::is_os_family_Set() const{
    return m_os_family_isSet;
}

bool OAIVirtualMachineDetails::is_os_family_Valid() const{
    return m_os_family_isValid;
}

QString OAIVirtualMachineDetails::getOsName() const {
    return m_os_name;
}
void OAIVirtualMachineDetails::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIVirtualMachineDetails::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIVirtualMachineDetails::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIVirtualMachineDetails::getOsVersion() const {
    return m_os_version;
}
void OAIVirtualMachineDetails::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIVirtualMachineDetails::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIVirtualMachineDetails::is_os_version_Valid() const{
    return m_os_version_isValid;
}

OAIPlatformDetails OAIVirtualMachineDetails::getPlatform() const {
    return m_platform;
}
void OAIVirtualMachineDetails::setPlatform(const OAIPlatformDetails &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIVirtualMachineDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIVirtualMachineDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIVirtualMachineDetails::getPowerState() const {
    return m_power_state;
}
void OAIVirtualMachineDetails::setPowerState(const QString &power_state) {
    m_power_state = power_state;
    m_power_state_isSet = true;
}

bool OAIVirtualMachineDetails::is_power_state_Set() const{
    return m_power_state_isSet;
}

bool OAIVirtualMachineDetails::is_power_state_Valid() const{
    return m_power_state_isValid;
}

QString OAIVirtualMachineDetails::getVcenterFolder() const {
    return m_vcenter_folder;
}
void OAIVirtualMachineDetails::setVcenterFolder(const QString &vcenter_folder) {
    m_vcenter_folder = vcenter_folder;
    m_vcenter_folder_isSet = true;
}

bool OAIVirtualMachineDetails::is_vcenter_folder_Set() const{
    return m_vcenter_folder_isSet;
}

bool OAIVirtualMachineDetails::is_vcenter_folder_Valid() const{
    return m_vcenter_folder_isValid;
}

QString OAIVirtualMachineDetails::getVcenterUrl() const {
    return m_vcenter_url;
}
void OAIVirtualMachineDetails::setVcenterUrl(const QString &vcenter_url) {
    m_vcenter_url = vcenter_url;
    m_vcenter_url_isSet = true;
}

bool OAIVirtualMachineDetails::is_vcenter_url_Set() const{
    return m_vcenter_url_isSet;
}

bool OAIVirtualMachineDetails::is_vcenter_url_Valid() const{
    return m_vcenter_url_isValid;
}

QString OAIVirtualMachineDetails::getVcenterVmId() const {
    return m_vcenter_vm_id;
}
void OAIVirtualMachineDetails::setVcenterVmId(const QString &vcenter_vm_id) {
    m_vcenter_vm_id = vcenter_vm_id;
    m_vcenter_vm_id_isSet = true;
}

bool OAIVirtualMachineDetails::is_vcenter_vm_id_Set() const{
    return m_vcenter_vm_id_isSet;
}

bool OAIVirtualMachineDetails::is_vcenter_vm_id_Valid() const{
    return m_vcenter_vm_id_isValid;
}

OAIVirtualMachineArchitectureDetails OAIVirtualMachineDetails::getVmArchitecture() const {
    return m_vm_architecture;
}
void OAIVirtualMachineDetails::setVmArchitecture(const OAIVirtualMachineArchitectureDetails &vm_architecture) {
    m_vm_architecture = vm_architecture;
    m_vm_architecture_isSet = true;
}

bool OAIVirtualMachineDetails::is_vm_architecture_Set() const{
    return m_vm_architecture_isSet;
}

bool OAIVirtualMachineDetails::is_vm_architecture_Valid() const{
    return m_vm_architecture_isValid;
}

OAIVirtualMachineDiskDetails OAIVirtualMachineDetails::getVmDisks() const {
    return m_vm_disks;
}
void OAIVirtualMachineDetails::setVmDisks(const OAIVirtualMachineDiskDetails &vm_disks) {
    m_vm_disks = vm_disks;
    m_vm_disks_isSet = true;
}

bool OAIVirtualMachineDetails::is_vm_disks_Set() const{
    return m_vm_disks_isSet;
}

bool OAIVirtualMachineDetails::is_vm_disks_Valid() const{
    return m_vm_disks_isValid;
}

QString OAIVirtualMachineDetails::getVmName() const {
    return m_vm_name;
}
void OAIVirtualMachineDetails::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIVirtualMachineDetails::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIVirtualMachineDetails::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

OAIVirtualMachineNetworkDetails OAIVirtualMachineDetails::getVmNetwork() const {
    return m_vm_network;
}
void OAIVirtualMachineDetails::setVmNetwork(const OAIVirtualMachineNetworkDetails &vm_network) {
    m_vm_network = vm_network;
    m_vm_network_isSet = true;
}

bool OAIVirtualMachineDetails::is_vm_network_Set() const{
    return m_vm_network_isSet;
}

bool OAIVirtualMachineDetails::is_vm_network_Valid() const{
    return m_vm_network_isValid;
}

QString OAIVirtualMachineDetails::getVmUuid() const {
    return m_vm_uuid;
}
void OAIVirtualMachineDetails::setVmUuid(const QString &vm_uuid) {
    m_vm_uuid = vm_uuid;
    m_vm_uuid_isSet = true;
}

bool OAIVirtualMachineDetails::is_vm_uuid_Set() const{
    return m_vm_uuid_isSet;
}

bool OAIVirtualMachineDetails::is_vm_uuid_Valid() const{
    return m_vm_uuid_isValid;
}

bool OAIVirtualMachineDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
