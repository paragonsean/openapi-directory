/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestRuntimeDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestRuntimeDetails::OAIGuestRuntimeDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestRuntimeDetails::OAIGuestRuntimeDetails() {
    this->initializeModel();
}

OAIGuestRuntimeDetails::~OAIGuestRuntimeDetails() {}

void OAIGuestRuntimeDetails::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_installed_apps_isSet = false;
    m_installed_apps_isValid = false;

    m_last_uptime_isSet = false;
    m_last_uptime_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_network_info_isSet = false;
    m_network_info_isValid = false;

    m_open_file_list_isSet = false;
    m_open_file_list_isValid = false;

    m_processes_isSet = false;
    m_processes_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;
}

void OAIGuestRuntimeDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestRuntimeDetails::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_installed_apps_isValid = ::OpenAPI::fromJsonValue(m_installed_apps, json[QString("installedApps")]);
    m_installed_apps_isSet = !json[QString("installedApps")].isNull() && m_installed_apps_isValid;

    m_last_uptime_isValid = ::OpenAPI::fromJsonValue(m_last_uptime, json[QString("lastUptime")]);
    m_last_uptime_isSet = !json[QString("lastUptime")].isNull() && m_last_uptime_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_network_info_isValid = ::OpenAPI::fromJsonValue(m_network_info, json[QString("networkInfo")]);
    m_network_info_isSet = !json[QString("networkInfo")].isNull() && m_network_info_isValid;

    m_open_file_list_isValid = ::OpenAPI::fromJsonValue(m_open_file_list, json[QString("openFileList")]);
    m_open_file_list_isSet = !json[QString("openFileList")].isNull() && m_open_file_list_isValid;

    m_processes_isValid = ::OpenAPI::fromJsonValue(m_processes, json[QString("processes")]);
    m_processes_isSet = !json[QString("processes")].isNull() && m_processes_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;
}

QString OAIGuestRuntimeDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestRuntimeDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_installed_apps.isSet()) {
        obj.insert(QString("installedApps"), ::OpenAPI::toJsonValue(m_installed_apps));
    }
    if (m_last_uptime.isSet()) {
        obj.insert(QString("lastUptime"), ::OpenAPI::toJsonValue(m_last_uptime));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_network_info.isSet()) {
        obj.insert(QString("networkInfo"), ::OpenAPI::toJsonValue(m_network_info));
    }
    if (m_open_file_list.isSet()) {
        obj.insert(QString("openFileList"), ::OpenAPI::toJsonValue(m_open_file_list));
    }
    if (m_processes.isSet()) {
        obj.insert(QString("processes"), ::OpenAPI::toJsonValue(m_processes));
    }
    if (m_services.isSet()) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    return obj;
}

QString OAIGuestRuntimeDetails::getDomain() const {
    return m_domain;
}
void OAIGuestRuntimeDetails::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGuestRuntimeDetails::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGuestRuntimeDetails::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIGuestInstalledApplicationList OAIGuestRuntimeDetails::getInstalledApps() const {
    return m_installed_apps;
}
void OAIGuestRuntimeDetails::setInstalledApps(const OAIGuestInstalledApplicationList &installed_apps) {
    m_installed_apps = installed_apps;
    m_installed_apps_isSet = true;
}

bool OAIGuestRuntimeDetails::is_installed_apps_Set() const{
    return m_installed_apps_isSet;
}

bool OAIGuestRuntimeDetails::is_installed_apps_Valid() const{
    return m_installed_apps_isValid;
}

OAIDate OAIGuestRuntimeDetails::getLastUptime() const {
    return m_last_uptime;
}
void OAIGuestRuntimeDetails::setLastUptime(const OAIDate &last_uptime) {
    m_last_uptime = last_uptime;
    m_last_uptime_isSet = true;
}

bool OAIGuestRuntimeDetails::is_last_uptime_Set() const{
    return m_last_uptime_isSet;
}

bool OAIGuestRuntimeDetails::is_last_uptime_Valid() const{
    return m_last_uptime_isValid;
}

QString OAIGuestRuntimeDetails::getMachineName() const {
    return m_machine_name;
}
void OAIGuestRuntimeDetails::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIGuestRuntimeDetails::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIGuestRuntimeDetails::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

OAIRuntimeNetworkInfo OAIGuestRuntimeDetails::getNetworkInfo() const {
    return m_network_info;
}
void OAIGuestRuntimeDetails::setNetworkInfo(const OAIRuntimeNetworkInfo &network_info) {
    m_network_info = network_info;
    m_network_info_isSet = true;
}

bool OAIGuestRuntimeDetails::is_network_info_Set() const{
    return m_network_info_isSet;
}

bool OAIGuestRuntimeDetails::is_network_info_Valid() const{
    return m_network_info_isValid;
}

OAIOpenFileList OAIGuestRuntimeDetails::getOpenFileList() const {
    return m_open_file_list;
}
void OAIGuestRuntimeDetails::setOpenFileList(const OAIOpenFileList &open_file_list) {
    m_open_file_list = open_file_list;
    m_open_file_list_isSet = true;
}

bool OAIGuestRuntimeDetails::is_open_file_list_Set() const{
    return m_open_file_list_isSet;
}

bool OAIGuestRuntimeDetails::is_open_file_list_Valid() const{
    return m_open_file_list_isValid;
}

OAIRunningProcessList OAIGuestRuntimeDetails::getProcesses() const {
    return m_processes;
}
void OAIGuestRuntimeDetails::setProcesses(const OAIRunningProcessList &processes) {
    m_processes = processes;
    m_processes_isSet = true;
}

bool OAIGuestRuntimeDetails::is_processes_Set() const{
    return m_processes_isSet;
}

bool OAIGuestRuntimeDetails::is_processes_Valid() const{
    return m_processes_isValid;
}

OAIRunningServiceList OAIGuestRuntimeDetails::getServices() const {
    return m_services;
}
void OAIGuestRuntimeDetails::setServices(const OAIRunningServiceList &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIGuestRuntimeDetails::is_services_Set() const{
    return m_services_isSet;
}

bool OAIGuestRuntimeDetails::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIGuestRuntimeDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_apps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_uptime.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_file_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestRuntimeDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
