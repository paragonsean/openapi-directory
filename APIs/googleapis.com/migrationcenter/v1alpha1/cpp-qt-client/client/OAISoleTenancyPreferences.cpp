/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoleTenancyPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoleTenancyPreferences::OAISoleTenancyPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoleTenancyPreferences::OAISoleTenancyPreferences() {
    this->initializeModel();
}

OAISoleTenancyPreferences::~OAISoleTenancyPreferences() {}

void OAISoleTenancyPreferences::initializeModel() {

    m_commitment_plan_isSet = false;
    m_commitment_plan_isValid = false;

    m_cpu_overcommit_ratio_isSet = false;
    m_cpu_overcommit_ratio_isValid = false;

    m_host_maintenance_policy_isSet = false;
    m_host_maintenance_policy_isValid = false;

    m_node_types_isSet = false;
    m_node_types_isValid = false;
}

void OAISoleTenancyPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoleTenancyPreferences::fromJsonObject(QJsonObject json) {

    m_commitment_plan_isValid = ::OpenAPI::fromJsonValue(m_commitment_plan, json[QString("commitmentPlan")]);
    m_commitment_plan_isSet = !json[QString("commitmentPlan")].isNull() && m_commitment_plan_isValid;

    m_cpu_overcommit_ratio_isValid = ::OpenAPI::fromJsonValue(m_cpu_overcommit_ratio, json[QString("cpuOvercommitRatio")]);
    m_cpu_overcommit_ratio_isSet = !json[QString("cpuOvercommitRatio")].isNull() && m_cpu_overcommit_ratio_isValid;

    m_host_maintenance_policy_isValid = ::OpenAPI::fromJsonValue(m_host_maintenance_policy, json[QString("hostMaintenancePolicy")]);
    m_host_maintenance_policy_isSet = !json[QString("hostMaintenancePolicy")].isNull() && m_host_maintenance_policy_isValid;

    m_node_types_isValid = ::OpenAPI::fromJsonValue(m_node_types, json[QString("nodeTypes")]);
    m_node_types_isSet = !json[QString("nodeTypes")].isNull() && m_node_types_isValid;
}

QString OAISoleTenancyPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoleTenancyPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_plan_isSet) {
        obj.insert(QString("commitmentPlan"), ::OpenAPI::toJsonValue(m_commitment_plan));
    }
    if (m_cpu_overcommit_ratio_isSet) {
        obj.insert(QString("cpuOvercommitRatio"), ::OpenAPI::toJsonValue(m_cpu_overcommit_ratio));
    }
    if (m_host_maintenance_policy_isSet) {
        obj.insert(QString("hostMaintenancePolicy"), ::OpenAPI::toJsonValue(m_host_maintenance_policy));
    }
    if (m_node_types.size() > 0) {
        obj.insert(QString("nodeTypes"), ::OpenAPI::toJsonValue(m_node_types));
    }
    return obj;
}

QString OAISoleTenancyPreferences::getCommitmentPlan() const {
    return m_commitment_plan;
}
void OAISoleTenancyPreferences::setCommitmentPlan(const QString &commitment_plan) {
    m_commitment_plan = commitment_plan;
    m_commitment_plan_isSet = true;
}

bool OAISoleTenancyPreferences::is_commitment_plan_Set() const{
    return m_commitment_plan_isSet;
}

bool OAISoleTenancyPreferences::is_commitment_plan_Valid() const{
    return m_commitment_plan_isValid;
}

double OAISoleTenancyPreferences::getCpuOvercommitRatio() const {
    return m_cpu_overcommit_ratio;
}
void OAISoleTenancyPreferences::setCpuOvercommitRatio(const double &cpu_overcommit_ratio) {
    m_cpu_overcommit_ratio = cpu_overcommit_ratio;
    m_cpu_overcommit_ratio_isSet = true;
}

bool OAISoleTenancyPreferences::is_cpu_overcommit_ratio_Set() const{
    return m_cpu_overcommit_ratio_isSet;
}

bool OAISoleTenancyPreferences::is_cpu_overcommit_ratio_Valid() const{
    return m_cpu_overcommit_ratio_isValid;
}

QString OAISoleTenancyPreferences::getHostMaintenancePolicy() const {
    return m_host_maintenance_policy;
}
void OAISoleTenancyPreferences::setHostMaintenancePolicy(const QString &host_maintenance_policy) {
    m_host_maintenance_policy = host_maintenance_policy;
    m_host_maintenance_policy_isSet = true;
}

bool OAISoleTenancyPreferences::is_host_maintenance_policy_Set() const{
    return m_host_maintenance_policy_isSet;
}

bool OAISoleTenancyPreferences::is_host_maintenance_policy_Valid() const{
    return m_host_maintenance_policy_isValid;
}

QList<OAISoleTenantNodeType> OAISoleTenancyPreferences::getNodeTypes() const {
    return m_node_types;
}
void OAISoleTenancyPreferences::setNodeTypes(const QList<OAISoleTenantNodeType> &node_types) {
    m_node_types = node_types;
    m_node_types_isSet = true;
}

bool OAISoleTenancyPreferences::is_node_types_Set() const{
    return m_node_types_isSet;
}

bool OAISoleTenancyPreferences::is_node_types_Valid() const{
    return m_node_types_isValid;
}

bool OAISoleTenancyPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_overcommit_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_maintenance_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoleTenancyPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
