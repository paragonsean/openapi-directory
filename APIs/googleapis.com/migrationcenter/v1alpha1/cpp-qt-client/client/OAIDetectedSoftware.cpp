/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedSoftware.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedSoftware::OAIDetectedSoftware(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedSoftware::OAIDetectedSoftware() {
    this->initializeModel();
}

OAIDetectedSoftware::~OAIDetectedSoftware() {}

void OAIDetectedSoftware::initializeModel() {

    m_software_family_isSet = false;
    m_software_family_isValid = false;

    m_software_name_isSet = false;
    m_software_name_isValid = false;
}

void OAIDetectedSoftware::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedSoftware::fromJsonObject(QJsonObject json) {

    m_software_family_isValid = ::OpenAPI::fromJsonValue(m_software_family, json[QString("softwareFamily")]);
    m_software_family_isSet = !json[QString("softwareFamily")].isNull() && m_software_family_isValid;

    m_software_name_isValid = ::OpenAPI::fromJsonValue(m_software_name, json[QString("softwareName")]);
    m_software_name_isSet = !json[QString("softwareName")].isNull() && m_software_name_isValid;
}

QString OAIDetectedSoftware::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedSoftware::asJsonObject() const {
    QJsonObject obj;
    if (m_software_family_isSet) {
        obj.insert(QString("softwareFamily"), ::OpenAPI::toJsonValue(m_software_family));
    }
    if (m_software_name_isSet) {
        obj.insert(QString("softwareName"), ::OpenAPI::toJsonValue(m_software_name));
    }
    return obj;
}

QString OAIDetectedSoftware::getSoftwareFamily() const {
    return m_software_family;
}
void OAIDetectedSoftware::setSoftwareFamily(const QString &software_family) {
    m_software_family = software_family;
    m_software_family_isSet = true;
}

bool OAIDetectedSoftware::is_software_family_Set() const{
    return m_software_family_isSet;
}

bool OAIDetectedSoftware::is_software_family_Valid() const{
    return m_software_family_isValid;
}

QString OAIDetectedSoftware::getSoftwareName() const {
    return m_software_name;
}
void OAIDetectedSoftware::setSoftwareName(const QString &software_name) {
    m_software_name = software_name;
    m_software_name_isSet = true;
}

bool OAIDetectedSoftware::is_software_name_Set() const{
    return m_software_name_isSet;
}

bool OAIDetectedSoftware::is_software_name_Valid() const{
    return m_software_name_isValid;
}

bool OAIDetectedSoftware::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_software_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedSoftware::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
