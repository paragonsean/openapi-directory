/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightList::OAIInsightList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightList::OAIInsightList() {
    this->initializeModel();
}

OAIInsightList::~OAIInsightList() {}

void OAIInsightList::initializeModel() {

    m_insights_isSet = false;
    m_insights_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInsightList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightList::fromJsonObject(QJsonObject json) {

    m_insights_isValid = ::OpenAPI::fromJsonValue(m_insights, json[QString("insights")]);
    m_insights_isSet = !json[QString("insights")].isNull() && m_insights_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInsightList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightList::asJsonObject() const {
    QJsonObject obj;
    if (m_insights.size() > 0) {
        obj.insert(QString("insights"), ::OpenAPI::toJsonValue(m_insights));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIInsight> OAIInsightList::getInsights() const {
    return m_insights;
}
void OAIInsightList::setInsights(const QList<OAIInsight> &insights) {
    m_insights = insights;
    m_insights_isSet = true;
}

bool OAIInsightList::is_insights_Set() const{
    return m_insights_isSet;
}

bool OAIInsightList::is_insights_Valid() const{
    return m_insights_isValid;
}

QString OAIInsightList::getUpdateTime() const {
    return m_update_time;
}
void OAIInsightList::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInsightList::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInsightList::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInsightList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
