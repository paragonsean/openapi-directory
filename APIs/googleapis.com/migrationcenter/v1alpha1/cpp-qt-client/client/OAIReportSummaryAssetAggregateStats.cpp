/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryAssetAggregateStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryAssetAggregateStats::OAIReportSummaryAssetAggregateStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryAssetAggregateStats::OAIReportSummaryAssetAggregateStats() {
    this->initializeModel();
}

OAIReportSummaryAssetAggregateStats::~OAIReportSummaryAssetAggregateStats() {}

void OAIReportSummaryAssetAggregateStats::initializeModel() {

    m_asset_age_isSet = false;
    m_asset_age_isValid = false;

    m_core_count_histogram_isSet = false;
    m_core_count_histogram_isValid = false;

    m_memory_bytes_histogram_isSet = false;
    m_memory_bytes_histogram_isValid = false;

    m_memory_utilization_isSet = false;
    m_memory_utilization_isValid = false;

    m_memory_utilization_chart_isSet = false;
    m_memory_utilization_chart_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_storage_bytes_histogram_isSet = false;
    m_storage_bytes_histogram_isValid = false;

    m_storage_utilization_isSet = false;
    m_storage_utilization_isValid = false;

    m_storage_utilization_chart_isSet = false;
    m_storage_utilization_chart_isValid = false;

    m_total_assets_isSet = false;
    m_total_assets_isValid = false;

    m_total_cores_isSet = false;
    m_total_cores_isValid = false;

    m_total_memory_bytes_isSet = false;
    m_total_memory_bytes_isValid = false;

    m_total_storage_bytes_isSet = false;
    m_total_storage_bytes_isValid = false;
}

void OAIReportSummaryAssetAggregateStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryAssetAggregateStats::fromJsonObject(QJsonObject json) {

    m_asset_age_isValid = ::OpenAPI::fromJsonValue(m_asset_age, json[QString("assetAge")]);
    m_asset_age_isSet = !json[QString("assetAge")].isNull() && m_asset_age_isValid;

    m_core_count_histogram_isValid = ::OpenAPI::fromJsonValue(m_core_count_histogram, json[QString("coreCountHistogram")]);
    m_core_count_histogram_isSet = !json[QString("coreCountHistogram")].isNull() && m_core_count_histogram_isValid;

    m_memory_bytes_histogram_isValid = ::OpenAPI::fromJsonValue(m_memory_bytes_histogram, json[QString("memoryBytesHistogram")]);
    m_memory_bytes_histogram_isSet = !json[QString("memoryBytesHistogram")].isNull() && m_memory_bytes_histogram_isValid;

    m_memory_utilization_isValid = ::OpenAPI::fromJsonValue(m_memory_utilization, json[QString("memoryUtilization")]);
    m_memory_utilization_isSet = !json[QString("memoryUtilization")].isNull() && m_memory_utilization_isValid;

    m_memory_utilization_chart_isValid = ::OpenAPI::fromJsonValue(m_memory_utilization_chart, json[QString("memoryUtilizationChart")]);
    m_memory_utilization_chart_isSet = !json[QString("memoryUtilizationChart")].isNull() && m_memory_utilization_chart_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_storage_bytes_histogram_isValid = ::OpenAPI::fromJsonValue(m_storage_bytes_histogram, json[QString("storageBytesHistogram")]);
    m_storage_bytes_histogram_isSet = !json[QString("storageBytesHistogram")].isNull() && m_storage_bytes_histogram_isValid;

    m_storage_utilization_isValid = ::OpenAPI::fromJsonValue(m_storage_utilization, json[QString("storageUtilization")]);
    m_storage_utilization_isSet = !json[QString("storageUtilization")].isNull() && m_storage_utilization_isValid;

    m_storage_utilization_chart_isValid = ::OpenAPI::fromJsonValue(m_storage_utilization_chart, json[QString("storageUtilizationChart")]);
    m_storage_utilization_chart_isSet = !json[QString("storageUtilizationChart")].isNull() && m_storage_utilization_chart_isValid;

    m_total_assets_isValid = ::OpenAPI::fromJsonValue(m_total_assets, json[QString("totalAssets")]);
    m_total_assets_isSet = !json[QString("totalAssets")].isNull() && m_total_assets_isValid;

    m_total_cores_isValid = ::OpenAPI::fromJsonValue(m_total_cores, json[QString("totalCores")]);
    m_total_cores_isSet = !json[QString("totalCores")].isNull() && m_total_cores_isValid;

    m_total_memory_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_memory_bytes, json[QString("totalMemoryBytes")]);
    m_total_memory_bytes_isSet = !json[QString("totalMemoryBytes")].isNull() && m_total_memory_bytes_isValid;

    m_total_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_storage_bytes, json[QString("totalStorageBytes")]);
    m_total_storage_bytes_isSet = !json[QString("totalStorageBytes")].isNull() && m_total_storage_bytes_isValid;
}

QString OAIReportSummaryAssetAggregateStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryAssetAggregateStats::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_age.isSet()) {
        obj.insert(QString("assetAge"), ::OpenAPI::toJsonValue(m_asset_age));
    }
    if (m_core_count_histogram.isSet()) {
        obj.insert(QString("coreCountHistogram"), ::OpenAPI::toJsonValue(m_core_count_histogram));
    }
    if (m_memory_bytes_histogram.isSet()) {
        obj.insert(QString("memoryBytesHistogram"), ::OpenAPI::toJsonValue(m_memory_bytes_histogram));
    }
    if (m_memory_utilization.isSet()) {
        obj.insert(QString("memoryUtilization"), ::OpenAPI::toJsonValue(m_memory_utilization));
    }
    if (m_memory_utilization_chart.isSet()) {
        obj.insert(QString("memoryUtilizationChart"), ::OpenAPI::toJsonValue(m_memory_utilization_chart));
    }
    if (m_operating_system.isSet()) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_storage_bytes_histogram.isSet()) {
        obj.insert(QString("storageBytesHistogram"), ::OpenAPI::toJsonValue(m_storage_bytes_histogram));
    }
    if (m_storage_utilization.isSet()) {
        obj.insert(QString("storageUtilization"), ::OpenAPI::toJsonValue(m_storage_utilization));
    }
    if (m_storage_utilization_chart.isSet()) {
        obj.insert(QString("storageUtilizationChart"), ::OpenAPI::toJsonValue(m_storage_utilization_chart));
    }
    if (m_total_assets_isSet) {
        obj.insert(QString("totalAssets"), ::OpenAPI::toJsonValue(m_total_assets));
    }
    if (m_total_cores_isSet) {
        obj.insert(QString("totalCores"), ::OpenAPI::toJsonValue(m_total_cores));
    }
    if (m_total_memory_bytes_isSet) {
        obj.insert(QString("totalMemoryBytes"), ::OpenAPI::toJsonValue(m_total_memory_bytes));
    }
    if (m_total_storage_bytes_isSet) {
        obj.insert(QString("totalStorageBytes"), ::OpenAPI::toJsonValue(m_total_storage_bytes));
    }
    return obj;
}

OAIReportSummaryChartData OAIReportSummaryAssetAggregateStats::getAssetAge() const {
    return m_asset_age;
}
void OAIReportSummaryAssetAggregateStats::setAssetAge(const OAIReportSummaryChartData &asset_age) {
    m_asset_age = asset_age;
    m_asset_age_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_asset_age_Set() const{
    return m_asset_age_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_asset_age_Valid() const{
    return m_asset_age_isValid;
}

OAIReportSummaryHistogramChartData OAIReportSummaryAssetAggregateStats::getCoreCountHistogram() const {
    return m_core_count_histogram;
}
void OAIReportSummaryAssetAggregateStats::setCoreCountHistogram(const OAIReportSummaryHistogramChartData &core_count_histogram) {
    m_core_count_histogram = core_count_histogram;
    m_core_count_histogram_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_core_count_histogram_Set() const{
    return m_core_count_histogram_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_core_count_histogram_Valid() const{
    return m_core_count_histogram_isValid;
}

OAIReportSummaryHistogramChartData OAIReportSummaryAssetAggregateStats::getMemoryBytesHistogram() const {
    return m_memory_bytes_histogram;
}
void OAIReportSummaryAssetAggregateStats::setMemoryBytesHistogram(const OAIReportSummaryHistogramChartData &memory_bytes_histogram) {
    m_memory_bytes_histogram = memory_bytes_histogram;
    m_memory_bytes_histogram_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_bytes_histogram_Set() const{
    return m_memory_bytes_histogram_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_bytes_histogram_Valid() const{
    return m_memory_bytes_histogram_isValid;
}

OAIReportSummaryChartData OAIReportSummaryAssetAggregateStats::getMemoryUtilization() const {
    return m_memory_utilization;
}
void OAIReportSummaryAssetAggregateStats::setMemoryUtilization(const OAIReportSummaryChartData &memory_utilization) {
    m_memory_utilization = memory_utilization;
    m_memory_utilization_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_utilization_Set() const{
    return m_memory_utilization_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_utilization_Valid() const{
    return m_memory_utilization_isValid;
}

OAIReportSummaryUtilizationChartData OAIReportSummaryAssetAggregateStats::getMemoryUtilizationChart() const {
    return m_memory_utilization_chart;
}
void OAIReportSummaryAssetAggregateStats::setMemoryUtilizationChart(const OAIReportSummaryUtilizationChartData &memory_utilization_chart) {
    m_memory_utilization_chart = memory_utilization_chart;
    m_memory_utilization_chart_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_utilization_chart_Set() const{
    return m_memory_utilization_chart_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_memory_utilization_chart_Valid() const{
    return m_memory_utilization_chart_isValid;
}

OAIReportSummaryChartData OAIReportSummaryAssetAggregateStats::getOperatingSystem() const {
    return m_operating_system;
}
void OAIReportSummaryAssetAggregateStats::setOperatingSystem(const OAIReportSummaryChartData &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

OAIReportSummaryHistogramChartData OAIReportSummaryAssetAggregateStats::getStorageBytesHistogram() const {
    return m_storage_bytes_histogram;
}
void OAIReportSummaryAssetAggregateStats::setStorageBytesHistogram(const OAIReportSummaryHistogramChartData &storage_bytes_histogram) {
    m_storage_bytes_histogram = storage_bytes_histogram;
    m_storage_bytes_histogram_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_bytes_histogram_Set() const{
    return m_storage_bytes_histogram_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_bytes_histogram_Valid() const{
    return m_storage_bytes_histogram_isValid;
}

OAIReportSummaryChartData OAIReportSummaryAssetAggregateStats::getStorageUtilization() const {
    return m_storage_utilization;
}
void OAIReportSummaryAssetAggregateStats::setStorageUtilization(const OAIReportSummaryChartData &storage_utilization) {
    m_storage_utilization = storage_utilization;
    m_storage_utilization_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_utilization_Set() const{
    return m_storage_utilization_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_utilization_Valid() const{
    return m_storage_utilization_isValid;
}

OAIReportSummaryUtilizationChartData OAIReportSummaryAssetAggregateStats::getStorageUtilizationChart() const {
    return m_storage_utilization_chart;
}
void OAIReportSummaryAssetAggregateStats::setStorageUtilizationChart(const OAIReportSummaryUtilizationChartData &storage_utilization_chart) {
    m_storage_utilization_chart = storage_utilization_chart;
    m_storage_utilization_chart_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_utilization_chart_Set() const{
    return m_storage_utilization_chart_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_storage_utilization_chart_Valid() const{
    return m_storage_utilization_chart_isValid;
}

QString OAIReportSummaryAssetAggregateStats::getTotalAssets() const {
    return m_total_assets;
}
void OAIReportSummaryAssetAggregateStats::setTotalAssets(const QString &total_assets) {
    m_total_assets = total_assets;
    m_total_assets_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_total_assets_Set() const{
    return m_total_assets_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_total_assets_Valid() const{
    return m_total_assets_isValid;
}

QString OAIReportSummaryAssetAggregateStats::getTotalCores() const {
    return m_total_cores;
}
void OAIReportSummaryAssetAggregateStats::setTotalCores(const QString &total_cores) {
    m_total_cores = total_cores;
    m_total_cores_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_total_cores_Set() const{
    return m_total_cores_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_total_cores_Valid() const{
    return m_total_cores_isValid;
}

QString OAIReportSummaryAssetAggregateStats::getTotalMemoryBytes() const {
    return m_total_memory_bytes;
}
void OAIReportSummaryAssetAggregateStats::setTotalMemoryBytes(const QString &total_memory_bytes) {
    m_total_memory_bytes = total_memory_bytes;
    m_total_memory_bytes_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_total_memory_bytes_Set() const{
    return m_total_memory_bytes_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_total_memory_bytes_Valid() const{
    return m_total_memory_bytes_isValid;
}

QString OAIReportSummaryAssetAggregateStats::getTotalStorageBytes() const {
    return m_total_storage_bytes;
}
void OAIReportSummaryAssetAggregateStats::setTotalStorageBytes(const QString &total_storage_bytes) {
    m_total_storage_bytes = total_storage_bytes;
    m_total_storage_bytes_isSet = true;
}

bool OAIReportSummaryAssetAggregateStats::is_total_storage_bytes_Set() const{
    return m_total_storage_bytes_isSet;
}

bool OAIReportSummaryAssetAggregateStats::is_total_storage_bytes_Valid() const{
    return m_total_storage_bytes_isValid;
}

bool OAIReportSummaryAssetAggregateStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_age.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_count_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_bytes_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_utilization_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_bytes_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_utilization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_utilization_chart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_assets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_memory_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryAssetAggregateStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
