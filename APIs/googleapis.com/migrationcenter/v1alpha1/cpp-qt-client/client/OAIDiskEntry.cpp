/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskEntry::OAIDiskEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskEntry::OAIDiskEntry() {
    this->initializeModel();
}

OAIDiskEntry::~OAIDiskEntry() {}

void OAIDiskEntry::initializeModel() {

    m_disk_label_isSet = false;
    m_disk_label_isValid = false;

    m_disk_label_type_isSet = false;
    m_disk_label_type_isValid = false;

    m_hw_address_isSet = false;
    m_hw_address_isValid = false;

    m_interface_type_isSet = false;
    m_interface_type_isValid = false;

    m_partitions_isSet = false;
    m_partitions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_capacity_bytes_isSet = false;
    m_total_capacity_bytes_isValid = false;

    m_total_free_bytes_isSet = false;
    m_total_free_bytes_isValid = false;

    m_vmware_config_isSet = false;
    m_vmware_config_isValid = false;
}

void OAIDiskEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskEntry::fromJsonObject(QJsonObject json) {

    m_disk_label_isValid = ::OpenAPI::fromJsonValue(m_disk_label, json[QString("diskLabel")]);
    m_disk_label_isSet = !json[QString("diskLabel")].isNull() && m_disk_label_isValid;

    m_disk_label_type_isValid = ::OpenAPI::fromJsonValue(m_disk_label_type, json[QString("diskLabelType")]);
    m_disk_label_type_isSet = !json[QString("diskLabelType")].isNull() && m_disk_label_type_isValid;

    m_hw_address_isValid = ::OpenAPI::fromJsonValue(m_hw_address, json[QString("hwAddress")]);
    m_hw_address_isSet = !json[QString("hwAddress")].isNull() && m_hw_address_isValid;

    m_interface_type_isValid = ::OpenAPI::fromJsonValue(m_interface_type, json[QString("interfaceType")]);
    m_interface_type_isSet = !json[QString("interfaceType")].isNull() && m_interface_type_isValid;

    m_partitions_isValid = ::OpenAPI::fromJsonValue(m_partitions, json[QString("partitions")]);
    m_partitions_isSet = !json[QString("partitions")].isNull() && m_partitions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_capacity_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_capacity_bytes, json[QString("totalCapacityBytes")]);
    m_total_capacity_bytes_isSet = !json[QString("totalCapacityBytes")].isNull() && m_total_capacity_bytes_isValid;

    m_total_free_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_free_bytes, json[QString("totalFreeBytes")]);
    m_total_free_bytes_isSet = !json[QString("totalFreeBytes")].isNull() && m_total_free_bytes_isValid;

    m_vmware_config_isValid = ::OpenAPI::fromJsonValue(m_vmware_config, json[QString("vmwareConfig")]);
    m_vmware_config_isSet = !json[QString("vmwareConfig")].isNull() && m_vmware_config_isValid;
}

QString OAIDiskEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_label_isSet) {
        obj.insert(QString("diskLabel"), ::OpenAPI::toJsonValue(m_disk_label));
    }
    if (m_disk_label_type_isSet) {
        obj.insert(QString("diskLabelType"), ::OpenAPI::toJsonValue(m_disk_label_type));
    }
    if (m_hw_address_isSet) {
        obj.insert(QString("hwAddress"), ::OpenAPI::toJsonValue(m_hw_address));
    }
    if (m_interface_type_isSet) {
        obj.insert(QString("interfaceType"), ::OpenAPI::toJsonValue(m_interface_type));
    }
    if (m_partitions.isSet()) {
        obj.insert(QString("partitions"), ::OpenAPI::toJsonValue(m_partitions));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_capacity_bytes_isSet) {
        obj.insert(QString("totalCapacityBytes"), ::OpenAPI::toJsonValue(m_total_capacity_bytes));
    }
    if (m_total_free_bytes_isSet) {
        obj.insert(QString("totalFreeBytes"), ::OpenAPI::toJsonValue(m_total_free_bytes));
    }
    if (m_vmware_config.isSet()) {
        obj.insert(QString("vmwareConfig"), ::OpenAPI::toJsonValue(m_vmware_config));
    }
    return obj;
}

QString OAIDiskEntry::getDiskLabel() const {
    return m_disk_label;
}
void OAIDiskEntry::setDiskLabel(const QString &disk_label) {
    m_disk_label = disk_label;
    m_disk_label_isSet = true;
}

bool OAIDiskEntry::is_disk_label_Set() const{
    return m_disk_label_isSet;
}

bool OAIDiskEntry::is_disk_label_Valid() const{
    return m_disk_label_isValid;
}

QString OAIDiskEntry::getDiskLabelType() const {
    return m_disk_label_type;
}
void OAIDiskEntry::setDiskLabelType(const QString &disk_label_type) {
    m_disk_label_type = disk_label_type;
    m_disk_label_type_isSet = true;
}

bool OAIDiskEntry::is_disk_label_type_Set() const{
    return m_disk_label_type_isSet;
}

bool OAIDiskEntry::is_disk_label_type_Valid() const{
    return m_disk_label_type_isValid;
}

QString OAIDiskEntry::getHwAddress() const {
    return m_hw_address;
}
void OAIDiskEntry::setHwAddress(const QString &hw_address) {
    m_hw_address = hw_address;
    m_hw_address_isSet = true;
}

bool OAIDiskEntry::is_hw_address_Set() const{
    return m_hw_address_isSet;
}

bool OAIDiskEntry::is_hw_address_Valid() const{
    return m_hw_address_isValid;
}

QString OAIDiskEntry::getInterfaceType() const {
    return m_interface_type;
}
void OAIDiskEntry::setInterfaceType(const QString &interface_type) {
    m_interface_type = interface_type;
    m_interface_type_isSet = true;
}

bool OAIDiskEntry::is_interface_type_Set() const{
    return m_interface_type_isSet;
}

bool OAIDiskEntry::is_interface_type_Valid() const{
    return m_interface_type_isValid;
}

OAIDiskPartitionList OAIDiskEntry::getPartitions() const {
    return m_partitions;
}
void OAIDiskEntry::setPartitions(const OAIDiskPartitionList &partitions) {
    m_partitions = partitions;
    m_partitions_isSet = true;
}

bool OAIDiskEntry::is_partitions_Set() const{
    return m_partitions_isSet;
}

bool OAIDiskEntry::is_partitions_Valid() const{
    return m_partitions_isValid;
}

QString OAIDiskEntry::getStatus() const {
    return m_status;
}
void OAIDiskEntry::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDiskEntry::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDiskEntry::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDiskEntry::getTotalCapacityBytes() const {
    return m_total_capacity_bytes;
}
void OAIDiskEntry::setTotalCapacityBytes(const QString &total_capacity_bytes) {
    m_total_capacity_bytes = total_capacity_bytes;
    m_total_capacity_bytes_isSet = true;
}

bool OAIDiskEntry::is_total_capacity_bytes_Set() const{
    return m_total_capacity_bytes_isSet;
}

bool OAIDiskEntry::is_total_capacity_bytes_Valid() const{
    return m_total_capacity_bytes_isValid;
}

QString OAIDiskEntry::getTotalFreeBytes() const {
    return m_total_free_bytes;
}
void OAIDiskEntry::setTotalFreeBytes(const QString &total_free_bytes) {
    m_total_free_bytes = total_free_bytes;
    m_total_free_bytes_isSet = true;
}

bool OAIDiskEntry::is_total_free_bytes_Set() const{
    return m_total_free_bytes_isSet;
}

bool OAIDiskEntry::is_total_free_bytes_Valid() const{
    return m_total_free_bytes_isValid;
}

OAIVmwareDiskConfig OAIDiskEntry::getVmwareConfig() const {
    return m_vmware_config;
}
void OAIDiskEntry::setVmwareConfig(const OAIVmwareDiskConfig &vmware_config) {
    m_vmware_config = vmware_config;
    m_vmware_config_isSet = true;
}

bool OAIDiskEntry::is_vmware_config_Set() const{
    return m_vmware_config_isSet;
}

bool OAIDiskEntry::is_vmware_config_Valid() const{
    return m_vmware_config_isValid;
}

bool OAIDiskEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_label_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hw_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_free_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
