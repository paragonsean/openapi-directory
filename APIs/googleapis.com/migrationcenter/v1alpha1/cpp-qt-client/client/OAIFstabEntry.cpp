/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFstabEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFstabEntry::OAIFstabEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFstabEntry::OAIFstabEntry() {
    this->initializeModel();
}

OAIFstabEntry::~OAIFstabEntry() {}

void OAIFstabEntry::initializeModel() {

    m_file_isSet = false;
    m_file_isValid = false;

    m_freq_isSet = false;
    m_freq_isValid = false;

    m_mntops_isSet = false;
    m_mntops_isValid = false;

    m_passno_isSet = false;
    m_passno_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_vfstype_isSet = false;
    m_vfstype_isValid = false;
}

void OAIFstabEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFstabEntry::fromJsonObject(QJsonObject json) {

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_freq_isValid = ::OpenAPI::fromJsonValue(m_freq, json[QString("freq")]);
    m_freq_isSet = !json[QString("freq")].isNull() && m_freq_isValid;

    m_mntops_isValid = ::OpenAPI::fromJsonValue(m_mntops, json[QString("mntops")]);
    m_mntops_isSet = !json[QString("mntops")].isNull() && m_mntops_isValid;

    m_passno_isValid = ::OpenAPI::fromJsonValue(m_passno, json[QString("passno")]);
    m_passno_isSet = !json[QString("passno")].isNull() && m_passno_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_vfstype_isValid = ::OpenAPI::fromJsonValue(m_vfstype, json[QString("vfstype")]);
    m_vfstype_isSet = !json[QString("vfstype")].isNull() && m_vfstype_isValid;
}

QString OAIFstabEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFstabEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_freq_isSet) {
        obj.insert(QString("freq"), ::OpenAPI::toJsonValue(m_freq));
    }
    if (m_mntops_isSet) {
        obj.insert(QString("mntops"), ::OpenAPI::toJsonValue(m_mntops));
    }
    if (m_passno_isSet) {
        obj.insert(QString("passno"), ::OpenAPI::toJsonValue(m_passno));
    }
    if (m_spec_isSet) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_vfstype_isSet) {
        obj.insert(QString("vfstype"), ::OpenAPI::toJsonValue(m_vfstype));
    }
    return obj;
}

QString OAIFstabEntry::getFile() const {
    return m_file;
}
void OAIFstabEntry::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIFstabEntry::is_file_Set() const{
    return m_file_isSet;
}

bool OAIFstabEntry::is_file_Valid() const{
    return m_file_isValid;
}

qint32 OAIFstabEntry::getFreq() const {
    return m_freq;
}
void OAIFstabEntry::setFreq(const qint32 &freq) {
    m_freq = freq;
    m_freq_isSet = true;
}

bool OAIFstabEntry::is_freq_Set() const{
    return m_freq_isSet;
}

bool OAIFstabEntry::is_freq_Valid() const{
    return m_freq_isValid;
}

QString OAIFstabEntry::getMntops() const {
    return m_mntops;
}
void OAIFstabEntry::setMntops(const QString &mntops) {
    m_mntops = mntops;
    m_mntops_isSet = true;
}

bool OAIFstabEntry::is_mntops_Set() const{
    return m_mntops_isSet;
}

bool OAIFstabEntry::is_mntops_Valid() const{
    return m_mntops_isValid;
}

qint32 OAIFstabEntry::getPassno() const {
    return m_passno;
}
void OAIFstabEntry::setPassno(const qint32 &passno) {
    m_passno = passno;
    m_passno_isSet = true;
}

bool OAIFstabEntry::is_passno_Set() const{
    return m_passno_isSet;
}

bool OAIFstabEntry::is_passno_Valid() const{
    return m_passno_isValid;
}

QString OAIFstabEntry::getSpec() const {
    return m_spec;
}
void OAIFstabEntry::setSpec(const QString &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIFstabEntry::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIFstabEntry::is_spec_Valid() const{
    return m_spec_isValid;
}

QString OAIFstabEntry::getVfstype() const {
    return m_vfstype;
}
void OAIFstabEntry::setVfstype(const QString &vfstype) {
    m_vfstype = vfstype;
    m_vfstype_isSet = true;
}

bool OAIFstabEntry::is_vfstype_Set() const{
    return m_vfstype_isSet;
}

bool OAIFstabEntry::is_vfstype_Valid() const{
    return m_vfstype_isValid;
}

bool OAIFstabEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mntops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passno_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vfstype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFstabEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
