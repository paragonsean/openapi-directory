/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorFrame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorFrame::OAIErrorFrame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorFrame::OAIErrorFrame() {
    this->initializeModel();
}

OAIErrorFrame::~OAIErrorFrame() {}

void OAIErrorFrame::initializeModel() {

    m_ingestion_time_isSet = false;
    m_ingestion_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_frame_isSet = false;
    m_original_frame_isValid = false;

    m_violations_isSet = false;
    m_violations_isValid = false;
}

void OAIErrorFrame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorFrame::fromJsonObject(QJsonObject json) {

    m_ingestion_time_isValid = ::OpenAPI::fromJsonValue(m_ingestion_time, json[QString("ingestionTime")]);
    m_ingestion_time_isSet = !json[QString("ingestionTime")].isNull() && m_ingestion_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_frame_isValid = ::OpenAPI::fromJsonValue(m_original_frame, json[QString("originalFrame")]);
    m_original_frame_isSet = !json[QString("originalFrame")].isNull() && m_original_frame_isValid;

    m_violations_isValid = ::OpenAPI::fromJsonValue(m_violations, json[QString("violations")]);
    m_violations_isSet = !json[QString("violations")].isNull() && m_violations_isValid;
}

QString OAIErrorFrame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorFrame::asJsonObject() const {
    QJsonObject obj;
    if (m_ingestion_time_isSet) {
        obj.insert(QString("ingestionTime"), ::OpenAPI::toJsonValue(m_ingestion_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_frame.isSet()) {
        obj.insert(QString("originalFrame"), ::OpenAPI::toJsonValue(m_original_frame));
    }
    if (m_violations.size() > 0) {
        obj.insert(QString("violations"), ::OpenAPI::toJsonValue(m_violations));
    }
    return obj;
}

QString OAIErrorFrame::getIngestionTime() const {
    return m_ingestion_time;
}
void OAIErrorFrame::setIngestionTime(const QString &ingestion_time) {
    m_ingestion_time = ingestion_time;
    m_ingestion_time_isSet = true;
}

bool OAIErrorFrame::is_ingestion_time_Set() const{
    return m_ingestion_time_isSet;
}

bool OAIErrorFrame::is_ingestion_time_Valid() const{
    return m_ingestion_time_isValid;
}

QString OAIErrorFrame::getName() const {
    return m_name;
}
void OAIErrorFrame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIErrorFrame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIErrorFrame::is_name_Valid() const{
    return m_name_isValid;
}

OAIAssetFrame OAIErrorFrame::getOriginalFrame() const {
    return m_original_frame;
}
void OAIErrorFrame::setOriginalFrame(const OAIAssetFrame &original_frame) {
    m_original_frame = original_frame;
    m_original_frame_isSet = true;
}

bool OAIErrorFrame::is_original_frame_Set() const{
    return m_original_frame_isSet;
}

bool OAIErrorFrame::is_original_frame_Valid() const{
    return m_original_frame_isValid;
}

QList<OAIFrameViolationEntry> OAIErrorFrame::getViolations() const {
    return m_violations;
}
void OAIErrorFrame::setViolations(const QList<OAIFrameViolationEntry> &violations) {
    m_violations = violations;
    m_violations_isSet = true;
}

bool OAIErrorFrame::is_violations_Set() const{
    return m_violations_isSet;
}

bool OAIErrorFrame::is_violations_Valid() const{
    return m_violations_isValid;
}

bool OAIErrorFrame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ingestion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_violations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorFrame::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
