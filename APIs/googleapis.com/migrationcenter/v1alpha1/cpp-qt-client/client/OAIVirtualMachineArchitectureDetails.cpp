/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineArchitectureDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineArchitectureDetails::OAIVirtualMachineArchitectureDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineArchitectureDetails::OAIVirtualMachineArchitectureDetails() {
    this->initializeModel();
}

OAIVirtualMachineArchitectureDetails::~OAIVirtualMachineArchitectureDetails() {}

void OAIVirtualMachineArchitectureDetails::initializeModel() {

    m_bios_isSet = false;
    m_bios_isValid = false;

    m_cpu_architecture_isSet = false;
    m_cpu_architecture_isValid = false;

    m_cpu_manufacturer_isSet = false;
    m_cpu_manufacturer_isValid = false;

    m_cpu_name_isSet = false;
    m_cpu_name_isValid = false;

    m_cpu_socket_count_isSet = false;
    m_cpu_socket_count_isValid = false;

    m_cpu_thread_count_isSet = false;
    m_cpu_thread_count_isValid = false;

    m_firmware_isSet = false;
    m_firmware_isValid = false;

    m_hyperthreading_isSet = false;
    m_hyperthreading_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIVirtualMachineArchitectureDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineArchitectureDetails::fromJsonObject(QJsonObject json) {

    m_bios_isValid = ::OpenAPI::fromJsonValue(m_bios, json[QString("bios")]);
    m_bios_isSet = !json[QString("bios")].isNull() && m_bios_isValid;

    m_cpu_architecture_isValid = ::OpenAPI::fromJsonValue(m_cpu_architecture, json[QString("cpuArchitecture")]);
    m_cpu_architecture_isSet = !json[QString("cpuArchitecture")].isNull() && m_cpu_architecture_isValid;

    m_cpu_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_cpu_manufacturer, json[QString("cpuManufacturer")]);
    m_cpu_manufacturer_isSet = !json[QString("cpuManufacturer")].isNull() && m_cpu_manufacturer_isValid;

    m_cpu_name_isValid = ::OpenAPI::fromJsonValue(m_cpu_name, json[QString("cpuName")]);
    m_cpu_name_isSet = !json[QString("cpuName")].isNull() && m_cpu_name_isValid;

    m_cpu_socket_count_isValid = ::OpenAPI::fromJsonValue(m_cpu_socket_count, json[QString("cpuSocketCount")]);
    m_cpu_socket_count_isSet = !json[QString("cpuSocketCount")].isNull() && m_cpu_socket_count_isValid;

    m_cpu_thread_count_isValid = ::OpenAPI::fromJsonValue(m_cpu_thread_count, json[QString("cpuThreadCount")]);
    m_cpu_thread_count_isSet = !json[QString("cpuThreadCount")].isNull() && m_cpu_thread_count_isValid;

    m_firmware_isValid = ::OpenAPI::fromJsonValue(m_firmware, json[QString("firmware")]);
    m_firmware_isSet = !json[QString("firmware")].isNull() && m_firmware_isValid;

    m_hyperthreading_isValid = ::OpenAPI::fromJsonValue(m_hyperthreading, json[QString("hyperthreading")]);
    m_hyperthreading_isSet = !json[QString("hyperthreading")].isNull() && m_hyperthreading_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIVirtualMachineArchitectureDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineArchitectureDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bios.isSet()) {
        obj.insert(QString("bios"), ::OpenAPI::toJsonValue(m_bios));
    }
    if (m_cpu_architecture_isSet) {
        obj.insert(QString("cpuArchitecture"), ::OpenAPI::toJsonValue(m_cpu_architecture));
    }
    if (m_cpu_manufacturer_isSet) {
        obj.insert(QString("cpuManufacturer"), ::OpenAPI::toJsonValue(m_cpu_manufacturer));
    }
    if (m_cpu_name_isSet) {
        obj.insert(QString("cpuName"), ::OpenAPI::toJsonValue(m_cpu_name));
    }
    if (m_cpu_socket_count_isSet) {
        obj.insert(QString("cpuSocketCount"), ::OpenAPI::toJsonValue(m_cpu_socket_count));
    }
    if (m_cpu_thread_count_isSet) {
        obj.insert(QString("cpuThreadCount"), ::OpenAPI::toJsonValue(m_cpu_thread_count));
    }
    if (m_firmware_isSet) {
        obj.insert(QString("firmware"), ::OpenAPI::toJsonValue(m_firmware));
    }
    if (m_hyperthreading_isSet) {
        obj.insert(QString("hyperthreading"), ::OpenAPI::toJsonValue(m_hyperthreading));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

OAIBiosDetails OAIVirtualMachineArchitectureDetails::getBios() const {
    return m_bios;
}
void OAIVirtualMachineArchitectureDetails::setBios(const OAIBiosDetails &bios) {
    m_bios = bios;
    m_bios_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_bios_Set() const{
    return m_bios_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_bios_Valid() const{
    return m_bios_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getCpuArchitecture() const {
    return m_cpu_architecture;
}
void OAIVirtualMachineArchitectureDetails::setCpuArchitecture(const QString &cpu_architecture) {
    m_cpu_architecture = cpu_architecture;
    m_cpu_architecture_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_architecture_Set() const{
    return m_cpu_architecture_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_architecture_Valid() const{
    return m_cpu_architecture_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getCpuManufacturer() const {
    return m_cpu_manufacturer;
}
void OAIVirtualMachineArchitectureDetails::setCpuManufacturer(const QString &cpu_manufacturer) {
    m_cpu_manufacturer = cpu_manufacturer;
    m_cpu_manufacturer_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_manufacturer_Set() const{
    return m_cpu_manufacturer_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_manufacturer_Valid() const{
    return m_cpu_manufacturer_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getCpuName() const {
    return m_cpu_name;
}
void OAIVirtualMachineArchitectureDetails::setCpuName(const QString &cpu_name) {
    m_cpu_name = cpu_name;
    m_cpu_name_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_name_Set() const{
    return m_cpu_name_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_name_Valid() const{
    return m_cpu_name_isValid;
}

qint32 OAIVirtualMachineArchitectureDetails::getCpuSocketCount() const {
    return m_cpu_socket_count;
}
void OAIVirtualMachineArchitectureDetails::setCpuSocketCount(const qint32 &cpu_socket_count) {
    m_cpu_socket_count = cpu_socket_count;
    m_cpu_socket_count_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_socket_count_Set() const{
    return m_cpu_socket_count_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_socket_count_Valid() const{
    return m_cpu_socket_count_isValid;
}

qint32 OAIVirtualMachineArchitectureDetails::getCpuThreadCount() const {
    return m_cpu_thread_count;
}
void OAIVirtualMachineArchitectureDetails::setCpuThreadCount(const qint32 &cpu_thread_count) {
    m_cpu_thread_count = cpu_thread_count;
    m_cpu_thread_count_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_thread_count_Set() const{
    return m_cpu_thread_count_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_cpu_thread_count_Valid() const{
    return m_cpu_thread_count_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getFirmware() const {
    return m_firmware;
}
void OAIVirtualMachineArchitectureDetails::setFirmware(const QString &firmware) {
    m_firmware = firmware;
    m_firmware_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_firmware_Set() const{
    return m_firmware_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_firmware_Valid() const{
    return m_firmware_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getHyperthreading() const {
    return m_hyperthreading;
}
void OAIVirtualMachineArchitectureDetails::setHyperthreading(const QString &hyperthreading) {
    m_hyperthreading = hyperthreading;
    m_hyperthreading_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_hyperthreading_Set() const{
    return m_hyperthreading_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_hyperthreading_Valid() const{
    return m_hyperthreading_isValid;
}

QString OAIVirtualMachineArchitectureDetails::getVendor() const {
    return m_vendor;
}
void OAIVirtualMachineArchitectureDetails::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIVirtualMachineArchitectureDetails::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIVirtualMachineArchitectureDetails::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIVirtualMachineArchitectureDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bios.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_socket_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_thread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyperthreading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineArchitectureDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
