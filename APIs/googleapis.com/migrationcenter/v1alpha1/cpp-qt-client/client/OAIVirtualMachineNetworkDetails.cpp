/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineNetworkDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineNetworkDetails::OAIVirtualMachineNetworkDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineNetworkDetails::OAIVirtualMachineNetworkDetails() {
    this->initializeModel();
}

OAIVirtualMachineNetworkDetails::~OAIVirtualMachineNetworkDetails() {}

void OAIVirtualMachineNetworkDetails::initializeModel() {

    m_default_gw_isSet = false;
    m_default_gw_isValid = false;

    m_network_adapters_isSet = false;
    m_network_adapters_isValid = false;

    m_primary_ip_address_isSet = false;
    m_primary_ip_address_isValid = false;

    m_primary_mac_address_isSet = false;
    m_primary_mac_address_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;
}

void OAIVirtualMachineNetworkDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineNetworkDetails::fromJsonObject(QJsonObject json) {

    m_default_gw_isValid = ::OpenAPI::fromJsonValue(m_default_gw, json[QString("defaultGw")]);
    m_default_gw_isSet = !json[QString("defaultGw")].isNull() && m_default_gw_isValid;

    m_network_adapters_isValid = ::OpenAPI::fromJsonValue(m_network_adapters, json[QString("networkAdapters")]);
    m_network_adapters_isSet = !json[QString("networkAdapters")].isNull() && m_network_adapters_isValid;

    m_primary_ip_address_isValid = ::OpenAPI::fromJsonValue(m_primary_ip_address, json[QString("primaryIpAddress")]);
    m_primary_ip_address_isSet = !json[QString("primaryIpAddress")].isNull() && m_primary_ip_address_isValid;

    m_primary_mac_address_isValid = ::OpenAPI::fromJsonValue(m_primary_mac_address, json[QString("primaryMacAddress")]);
    m_primary_mac_address_isSet = !json[QString("primaryMacAddress")].isNull() && m_primary_mac_address_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIpAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIpAddress")].isNull() && m_public_ip_address_isValid;
}

QString OAIVirtualMachineNetworkDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineNetworkDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gw_isSet) {
        obj.insert(QString("defaultGw"), ::OpenAPI::toJsonValue(m_default_gw));
    }
    if (m_network_adapters.isSet()) {
        obj.insert(QString("networkAdapters"), ::OpenAPI::toJsonValue(m_network_adapters));
    }
    if (m_primary_ip_address_isSet) {
        obj.insert(QString("primaryIpAddress"), ::OpenAPI::toJsonValue(m_primary_ip_address));
    }
    if (m_primary_mac_address_isSet) {
        obj.insert(QString("primaryMacAddress"), ::OpenAPI::toJsonValue(m_primary_mac_address));
    }
    if (m_public_ip_address_isSet) {
        obj.insert(QString("publicIpAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    return obj;
}

QString OAIVirtualMachineNetworkDetails::getDefaultGw() const {
    return m_default_gw;
}
void OAIVirtualMachineNetworkDetails::setDefaultGw(const QString &default_gw) {
    m_default_gw = default_gw;
    m_default_gw_isSet = true;
}

bool OAIVirtualMachineNetworkDetails::is_default_gw_Set() const{
    return m_default_gw_isSet;
}

bool OAIVirtualMachineNetworkDetails::is_default_gw_Valid() const{
    return m_default_gw_isValid;
}

OAINetworkAdapterList OAIVirtualMachineNetworkDetails::getNetworkAdapters() const {
    return m_network_adapters;
}
void OAIVirtualMachineNetworkDetails::setNetworkAdapters(const OAINetworkAdapterList &network_adapters) {
    m_network_adapters = network_adapters;
    m_network_adapters_isSet = true;
}

bool OAIVirtualMachineNetworkDetails::is_network_adapters_Set() const{
    return m_network_adapters_isSet;
}

bool OAIVirtualMachineNetworkDetails::is_network_adapters_Valid() const{
    return m_network_adapters_isValid;
}

QString OAIVirtualMachineNetworkDetails::getPrimaryIpAddress() const {
    return m_primary_ip_address;
}
void OAIVirtualMachineNetworkDetails::setPrimaryIpAddress(const QString &primary_ip_address) {
    m_primary_ip_address = primary_ip_address;
    m_primary_ip_address_isSet = true;
}

bool OAIVirtualMachineNetworkDetails::is_primary_ip_address_Set() const{
    return m_primary_ip_address_isSet;
}

bool OAIVirtualMachineNetworkDetails::is_primary_ip_address_Valid() const{
    return m_primary_ip_address_isValid;
}

QString OAIVirtualMachineNetworkDetails::getPrimaryMacAddress() const {
    return m_primary_mac_address;
}
void OAIVirtualMachineNetworkDetails::setPrimaryMacAddress(const QString &primary_mac_address) {
    m_primary_mac_address = primary_mac_address;
    m_primary_mac_address_isSet = true;
}

bool OAIVirtualMachineNetworkDetails::is_primary_mac_address_Set() const{
    return m_primary_mac_address_isSet;
}

bool OAIVirtualMachineNetworkDetails::is_primary_mac_address_Valid() const{
    return m_primary_mac_address_isValid;
}

QString OAIVirtualMachineNetworkDetails::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIVirtualMachineNetworkDetails::setPublicIpAddress(const QString &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIVirtualMachineNetworkDetails::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIVirtualMachineNetworkDetails::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

bool OAIVirtualMachineNetworkDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_adapters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineNetworkDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
