/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineDiskDetails::OAIVirtualMachineDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineDiskDetails::OAIVirtualMachineDiskDetails() {
    this->initializeModel();
}

OAIVirtualMachineDiskDetails::~OAIVirtualMachineDiskDetails() {}

void OAIVirtualMachineDiskDetails::initializeModel() {

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_hdd_total_capacity_bytes_isSet = false;
    m_hdd_total_capacity_bytes_isValid = false;

    m_hdd_total_free_bytes_isSet = false;
    m_hdd_total_free_bytes_isValid = false;

    m_lsblk_json_isSet = false;
    m_lsblk_json_isValid = false;
}

void OAIVirtualMachineDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineDiskDetails::fromJsonObject(QJsonObject json) {

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_hdd_total_capacity_bytes_isValid = ::OpenAPI::fromJsonValue(m_hdd_total_capacity_bytes, json[QString("hddTotalCapacityBytes")]);
    m_hdd_total_capacity_bytes_isSet = !json[QString("hddTotalCapacityBytes")].isNull() && m_hdd_total_capacity_bytes_isValid;

    m_hdd_total_free_bytes_isValid = ::OpenAPI::fromJsonValue(m_hdd_total_free_bytes, json[QString("hddTotalFreeBytes")]);
    m_hdd_total_free_bytes_isSet = !json[QString("hddTotalFreeBytes")].isNull() && m_hdd_total_free_bytes_isValid;

    m_lsblk_json_isValid = ::OpenAPI::fromJsonValue(m_lsblk_json, json[QString("lsblkJson")]);
    m_lsblk_json_isSet = !json[QString("lsblkJson")].isNull() && m_lsblk_json_isValid;
}

QString OAIVirtualMachineDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disks.isSet()) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_hdd_total_capacity_bytes_isSet) {
        obj.insert(QString("hddTotalCapacityBytes"), ::OpenAPI::toJsonValue(m_hdd_total_capacity_bytes));
    }
    if (m_hdd_total_free_bytes_isSet) {
        obj.insert(QString("hddTotalFreeBytes"), ::OpenAPI::toJsonValue(m_hdd_total_free_bytes));
    }
    if (m_lsblk_json_isSet) {
        obj.insert(QString("lsblkJson"), ::OpenAPI::toJsonValue(m_lsblk_json));
    }
    return obj;
}

OAIDiskEntryList OAIVirtualMachineDiskDetails::getDisks() const {
    return m_disks;
}
void OAIVirtualMachineDiskDetails::setDisks(const OAIDiskEntryList &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIVirtualMachineDiskDetails::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIVirtualMachineDiskDetails::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIVirtualMachineDiskDetails::getHddTotalCapacityBytes() const {
    return m_hdd_total_capacity_bytes;
}
void OAIVirtualMachineDiskDetails::setHddTotalCapacityBytes(const QString &hdd_total_capacity_bytes) {
    m_hdd_total_capacity_bytes = hdd_total_capacity_bytes;
    m_hdd_total_capacity_bytes_isSet = true;
}

bool OAIVirtualMachineDiskDetails::is_hdd_total_capacity_bytes_Set() const{
    return m_hdd_total_capacity_bytes_isSet;
}

bool OAIVirtualMachineDiskDetails::is_hdd_total_capacity_bytes_Valid() const{
    return m_hdd_total_capacity_bytes_isValid;
}

QString OAIVirtualMachineDiskDetails::getHddTotalFreeBytes() const {
    return m_hdd_total_free_bytes;
}
void OAIVirtualMachineDiskDetails::setHddTotalFreeBytes(const QString &hdd_total_free_bytes) {
    m_hdd_total_free_bytes = hdd_total_free_bytes;
    m_hdd_total_free_bytes_isSet = true;
}

bool OAIVirtualMachineDiskDetails::is_hdd_total_free_bytes_Set() const{
    return m_hdd_total_free_bytes_isSet;
}

bool OAIVirtualMachineDiskDetails::is_hdd_total_free_bytes_Valid() const{
    return m_hdd_total_free_bytes_isValid;
}

QString OAIVirtualMachineDiskDetails::getLsblkJson() const {
    return m_lsblk_json;
}
void OAIVirtualMachineDiskDetails::setLsblkJson(const QString &lsblk_json) {
    m_lsblk_json = lsblk_json;
    m_lsblk_json_isSet = true;
}

bool OAIVirtualMachineDiskDetails::is_lsblk_json_Set() const{
    return m_lsblk_json_isSet;
}

bool OAIVirtualMachineDiskDetails::is_lsblk_json_Valid() const{
    return m_lsblk_json_isValid;
}

bool OAIVirtualMachineDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdd_total_capacity_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdd_total_free_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lsblk_json_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
