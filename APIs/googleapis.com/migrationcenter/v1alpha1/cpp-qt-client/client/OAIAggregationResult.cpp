/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationResult::OAIAggregationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationResult::OAIAggregationResult() {
    this->initializeModel();
}

OAIAggregationResult::~OAIAggregationResult() {}

void OAIAggregationResult::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_histogram_isSet = false;
    m_histogram_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;
}

void OAIAggregationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationResult::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_histogram_isValid = ::OpenAPI::fromJsonValue(m_histogram, json[QString("histogram")]);
    m_histogram_isSet = !json[QString("histogram")].isNull() && m_histogram_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;
}

QString OAIAggregationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_count.isSet()) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_histogram.isSet()) {
        obj.insert(QString("histogram"), ::OpenAPI::toJsonValue(m_histogram));
    }
    if (m_sum.isSet()) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    return obj;
}

OAIAggregationResultCount OAIAggregationResult::getCount() const {
    return m_count;
}
void OAIAggregationResult::setCount(const OAIAggregationResultCount &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAggregationResult::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAggregationResult::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIAggregationResult::getField() const {
    return m_field;
}
void OAIAggregationResult::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIAggregationResult::is_field_Set() const{
    return m_field_isSet;
}

bool OAIAggregationResult::is_field_Valid() const{
    return m_field_isValid;
}

OAIAggregationResultFrequency OAIAggregationResult::getFrequency() const {
    return m_frequency;
}
void OAIAggregationResult::setFrequency(const OAIAggregationResultFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIAggregationResult::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIAggregationResult::is_frequency_Valid() const{
    return m_frequency_isValid;
}

OAIAggregationResultHistogram OAIAggregationResult::getHistogram() const {
    return m_histogram;
}
void OAIAggregationResult::setHistogram(const OAIAggregationResultHistogram &histogram) {
    m_histogram = histogram;
    m_histogram_isSet = true;
}

bool OAIAggregationResult::is_histogram_Set() const{
    return m_histogram_isSet;
}

bool OAIAggregationResult::is_histogram_Valid() const{
    return m_histogram_isValid;
}

OAIAggregationResultSum OAIAggregationResult::getSum() const {
    return m_sum;
}
void OAIAggregationResult::setSum(const OAIAggregationResultSum &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIAggregationResult::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIAggregationResult::is_sum_Valid() const{
    return m_sum_isValid;
}

bool OAIAggregationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_histogram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
