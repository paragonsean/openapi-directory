/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuntimeNetworkInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuntimeNetworkInfo::OAIRuntimeNetworkInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuntimeNetworkInfo::OAIRuntimeNetworkInfo() {
    this->initializeModel();
}

OAIRuntimeNetworkInfo::~OAIRuntimeNetworkInfo() {}

void OAIRuntimeNetworkInfo::initializeModel() {

    m_connections_isSet = false;
    m_connections_isValid = false;

    m_netstat_isSet = false;
    m_netstat_isValid = false;

    m_netstat_time_isSet = false;
    m_netstat_time_isValid = false;
}

void OAIRuntimeNetworkInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuntimeNetworkInfo::fromJsonObject(QJsonObject json) {

    m_connections_isValid = ::OpenAPI::fromJsonValue(m_connections, json[QString("connections")]);
    m_connections_isSet = !json[QString("connections")].isNull() && m_connections_isValid;

    m_netstat_isValid = ::OpenAPI::fromJsonValue(m_netstat, json[QString("netstat")]);
    m_netstat_isSet = !json[QString("netstat")].isNull() && m_netstat_isValid;

    m_netstat_time_isValid = ::OpenAPI::fromJsonValue(m_netstat_time, json[QString("netstatTime")]);
    m_netstat_time_isSet = !json[QString("netstatTime")].isNull() && m_netstat_time_isValid;
}

QString OAIRuntimeNetworkInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuntimeNetworkInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_connections.isSet()) {
        obj.insert(QString("connections"), ::OpenAPI::toJsonValue(m_connections));
    }
    if (m_netstat_isSet) {
        obj.insert(QString("netstat"), ::OpenAPI::toJsonValue(m_netstat));
    }
    if (m_netstat_time_isSet) {
        obj.insert(QString("netstatTime"), ::OpenAPI::toJsonValue(m_netstat_time));
    }
    return obj;
}

OAINetworkConnectionList OAIRuntimeNetworkInfo::getConnections() const {
    return m_connections;
}
void OAIRuntimeNetworkInfo::setConnections(const OAINetworkConnectionList &connections) {
    m_connections = connections;
    m_connections_isSet = true;
}

bool OAIRuntimeNetworkInfo::is_connections_Set() const{
    return m_connections_isSet;
}

bool OAIRuntimeNetworkInfo::is_connections_Valid() const{
    return m_connections_isValid;
}

QString OAIRuntimeNetworkInfo::getNetstat() const {
    return m_netstat;
}
void OAIRuntimeNetworkInfo::setNetstat(const QString &netstat) {
    m_netstat = netstat;
    m_netstat_isSet = true;
}

bool OAIRuntimeNetworkInfo::is_netstat_Set() const{
    return m_netstat_isSet;
}

bool OAIRuntimeNetworkInfo::is_netstat_Valid() const{
    return m_netstat_isValid;
}

QDateTime OAIRuntimeNetworkInfo::getNetstatTime() const {
    return m_netstat_time;
}
void OAIRuntimeNetworkInfo::setNetstatTime(const QDateTime &netstat_time) {
    m_netstat_time = netstat_time;
    m_netstat_time_isSet = true;
}

bool OAIRuntimeNetworkInfo::is_netstat_time_Set() const{
    return m_netstat_time_isSet;
}

bool OAIRuntimeNetworkInfo::is_netstat_time_Valid() const{
    return m_netstat_time_isValid;
}

bool OAIRuntimeNetworkInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connections.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_netstat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_netstat_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuntimeNetworkInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
