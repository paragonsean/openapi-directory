/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationReport::OAIValidationReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationReport::OAIValidationReport() {
    this->initializeModel();
}

OAIValidationReport::~OAIValidationReport() {}

void OAIValidationReport::initializeModel() {

    m_file_validations_isSet = false;
    m_file_validations_isValid = false;

    m_job_errors_isSet = false;
    m_job_errors_isValid = false;
}

void OAIValidationReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationReport::fromJsonObject(QJsonObject json) {

    m_file_validations_isValid = ::OpenAPI::fromJsonValue(m_file_validations, json[QString("fileValidations")]);
    m_file_validations_isSet = !json[QString("fileValidations")].isNull() && m_file_validations_isValid;

    m_job_errors_isValid = ::OpenAPI::fromJsonValue(m_job_errors, json[QString("jobErrors")]);
    m_job_errors_isSet = !json[QString("jobErrors")].isNull() && m_job_errors_isValid;
}

QString OAIValidationReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationReport::asJsonObject() const {
    QJsonObject obj;
    if (m_file_validations.size() > 0) {
        obj.insert(QString("fileValidations"), ::OpenAPI::toJsonValue(m_file_validations));
    }
    if (m_job_errors.size() > 0) {
        obj.insert(QString("jobErrors"), ::OpenAPI::toJsonValue(m_job_errors));
    }
    return obj;
}

QList<OAIFileValidationReport> OAIValidationReport::getFileValidations() const {
    return m_file_validations;
}
void OAIValidationReport::setFileValidations(const QList<OAIFileValidationReport> &file_validations) {
    m_file_validations = file_validations;
    m_file_validations_isSet = true;
}

bool OAIValidationReport::is_file_validations_Set() const{
    return m_file_validations_isSet;
}

bool OAIValidationReport::is_file_validations_Valid() const{
    return m_file_validations_isValid;
}

QList<OAIImportError> OAIValidationReport::getJobErrors() const {
    return m_job_errors;
}
void OAIValidationReport::setJobErrors(const QList<OAIImportError> &job_errors) {
    m_job_errors = job_errors;
    m_job_errors_isSet = true;
}

bool OAIValidationReport::is_job_errors_Set() const{
    return m_job_errors_isSet;
}

bool OAIValidationReport::is_job_errors_Valid() const{
    return m_job_errors_isValid;
}

bool OAIValidationReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_validations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
