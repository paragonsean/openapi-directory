/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskPartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskPartition::OAIDiskPartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskPartition::OAIDiskPartition() {
    this->initializeModel();
}

OAIDiskPartition::~OAIDiskPartition() {}

void OAIDiskPartition::initializeModel() {

    m_capacity_bytes_isSet = false;
    m_capacity_bytes_isValid = false;

    m_file_system_isSet = false;
    m_file_system_isValid = false;

    m_free_bytes_isSet = false;
    m_free_bytes_isValid = false;

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;

    m_sub_partitions_isSet = false;
    m_sub_partitions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIDiskPartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskPartition::fromJsonObject(QJsonObject json) {

    m_capacity_bytes_isValid = ::OpenAPI::fromJsonValue(m_capacity_bytes, json[QString("capacityBytes")]);
    m_capacity_bytes_isSet = !json[QString("capacityBytes")].isNull() && m_capacity_bytes_isValid;

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("fileSystem")]);
    m_file_system_isSet = !json[QString("fileSystem")].isNull() && m_file_system_isValid;

    m_free_bytes_isValid = ::OpenAPI::fromJsonValue(m_free_bytes, json[QString("freeBytes")]);
    m_free_bytes_isSet = !json[QString("freeBytes")].isNull() && m_free_bytes_isValid;

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;

    m_sub_partitions_isValid = ::OpenAPI::fromJsonValue(m_sub_partitions, json[QString("subPartitions")]);
    m_sub_partitions_isSet = !json[QString("subPartitions")].isNull() && m_sub_partitions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIDiskPartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskPartition::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_bytes_isSet) {
        obj.insert(QString("capacityBytes"), ::OpenAPI::toJsonValue(m_capacity_bytes));
    }
    if (m_file_system_isSet) {
        obj.insert(QString("fileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    if (m_free_bytes_isSet) {
        obj.insert(QString("freeBytes"), ::OpenAPI::toJsonValue(m_free_bytes));
    }
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    if (m_sub_partitions.isSet()) {
        obj.insert(QString("subPartitions"), ::OpenAPI::toJsonValue(m_sub_partitions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIDiskPartition::getCapacityBytes() const {
    return m_capacity_bytes;
}
void OAIDiskPartition::setCapacityBytes(const QString &capacity_bytes) {
    m_capacity_bytes = capacity_bytes;
    m_capacity_bytes_isSet = true;
}

bool OAIDiskPartition::is_capacity_bytes_Set() const{
    return m_capacity_bytes_isSet;
}

bool OAIDiskPartition::is_capacity_bytes_Valid() const{
    return m_capacity_bytes_isValid;
}

QString OAIDiskPartition::getFileSystem() const {
    return m_file_system;
}
void OAIDiskPartition::setFileSystem(const QString &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAIDiskPartition::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAIDiskPartition::is_file_system_Valid() const{
    return m_file_system_isValid;
}

QString OAIDiskPartition::getFreeBytes() const {
    return m_free_bytes;
}
void OAIDiskPartition::setFreeBytes(const QString &free_bytes) {
    m_free_bytes = free_bytes;
    m_free_bytes_isSet = true;
}

bool OAIDiskPartition::is_free_bytes_Set() const{
    return m_free_bytes_isSet;
}

bool OAIDiskPartition::is_free_bytes_Valid() const{
    return m_free_bytes_isValid;
}

QString OAIDiskPartition::getMountPoint() const {
    return m_mount_point;
}
void OAIDiskPartition::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIDiskPartition::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIDiskPartition::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

OAIDiskPartitionList OAIDiskPartition::getSubPartitions() const {
    return m_sub_partitions;
}
void OAIDiskPartition::setSubPartitions(const OAIDiskPartitionList &sub_partitions) {
    m_sub_partitions = sub_partitions;
    m_sub_partitions_isSet = true;
}

bool OAIDiskPartition::is_sub_partitions_Set() const{
    return m_sub_partitions_isSet;
}

bool OAIDiskPartition::is_sub_partitions_Valid() const{
    return m_sub_partitions_isValid;
}

QString OAIDiskPartition::getType() const {
    return m_type;
}
void OAIDiskPartition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDiskPartition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDiskPartition::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDiskPartition::getUuid() const {
    return m_uuid;
}
void OAIDiskPartition::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIDiskPartition::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIDiskPartition::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIDiskPartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_partitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskPartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
