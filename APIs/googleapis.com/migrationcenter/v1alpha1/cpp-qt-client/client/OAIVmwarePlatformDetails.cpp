/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwarePlatformDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwarePlatformDetails::OAIVmwarePlatformDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwarePlatformDetails::OAIVmwarePlatformDetails() {
    this->initializeModel();
}

OAIVmwarePlatformDetails::~OAIVmwarePlatformDetails() {}

void OAIVmwarePlatformDetails::initializeModel() {

    m_esx_version_isSet = false;
    m_esx_version_isValid = false;

    m_osid_isSet = false;
    m_osid_isValid = false;

    m_vcenter_version_isSet = false;
    m_vcenter_version_isValid = false;
}

void OAIVmwarePlatformDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwarePlatformDetails::fromJsonObject(QJsonObject json) {

    m_esx_version_isValid = ::OpenAPI::fromJsonValue(m_esx_version, json[QString("esxVersion")]);
    m_esx_version_isSet = !json[QString("esxVersion")].isNull() && m_esx_version_isValid;

    m_osid_isValid = ::OpenAPI::fromJsonValue(m_osid, json[QString("osid")]);
    m_osid_isSet = !json[QString("osid")].isNull() && m_osid_isValid;

    m_vcenter_version_isValid = ::OpenAPI::fromJsonValue(m_vcenter_version, json[QString("vcenterVersion")]);
    m_vcenter_version_isSet = !json[QString("vcenterVersion")].isNull() && m_vcenter_version_isValid;
}

QString OAIVmwarePlatformDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwarePlatformDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_esx_version_isSet) {
        obj.insert(QString("esxVersion"), ::OpenAPI::toJsonValue(m_esx_version));
    }
    if (m_osid_isSet) {
        obj.insert(QString("osid"), ::OpenAPI::toJsonValue(m_osid));
    }
    if (m_vcenter_version_isSet) {
        obj.insert(QString("vcenterVersion"), ::OpenAPI::toJsonValue(m_vcenter_version));
    }
    return obj;
}

QString OAIVmwarePlatformDetails::getEsxVersion() const {
    return m_esx_version;
}
void OAIVmwarePlatformDetails::setEsxVersion(const QString &esx_version) {
    m_esx_version = esx_version;
    m_esx_version_isSet = true;
}

bool OAIVmwarePlatformDetails::is_esx_version_Set() const{
    return m_esx_version_isSet;
}

bool OAIVmwarePlatformDetails::is_esx_version_Valid() const{
    return m_esx_version_isValid;
}

QString OAIVmwarePlatformDetails::getOsid() const {
    return m_osid;
}
void OAIVmwarePlatformDetails::setOsid(const QString &osid) {
    m_osid = osid;
    m_osid_isSet = true;
}

bool OAIVmwarePlatformDetails::is_osid_Set() const{
    return m_osid_isSet;
}

bool OAIVmwarePlatformDetails::is_osid_Valid() const{
    return m_osid_isValid;
}

QString OAIVmwarePlatformDetails::getVcenterVersion() const {
    return m_vcenter_version;
}
void OAIVmwarePlatformDetails::setVcenterVersion(const QString &vcenter_version) {
    m_vcenter_version = vcenter_version;
    m_vcenter_version_isSet = true;
}

bool OAIVmwarePlatformDetails::is_vcenter_version_Set() const{
    return m_vcenter_version_isSet;
}

bool OAIVmwarePlatformDetails::is_vcenter_version_Valid() const{
    return m_vcenter_version_isValid;
}

bool OAIVmwarePlatformDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_esx_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwarePlatformDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
