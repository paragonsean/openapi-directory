/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryMachineSeriesAllocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryMachineSeriesAllocation::OAIReportSummaryMachineSeriesAllocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryMachineSeriesAllocation::OAIReportSummaryMachineSeriesAllocation() {
    this->initializeModel();
}

OAIReportSummaryMachineSeriesAllocation::~OAIReportSummaryMachineSeriesAllocation() {}

void OAIReportSummaryMachineSeriesAllocation::initializeModel() {

    m_allocated_asset_count_isSet = false;
    m_allocated_asset_count_isValid = false;

    m_machine_series_isSet = false;
    m_machine_series_isValid = false;
}

void OAIReportSummaryMachineSeriesAllocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryMachineSeriesAllocation::fromJsonObject(QJsonObject json) {

    m_allocated_asset_count_isValid = ::OpenAPI::fromJsonValue(m_allocated_asset_count, json[QString("allocatedAssetCount")]);
    m_allocated_asset_count_isSet = !json[QString("allocatedAssetCount")].isNull() && m_allocated_asset_count_isValid;

    m_machine_series_isValid = ::OpenAPI::fromJsonValue(m_machine_series, json[QString("machineSeries")]);
    m_machine_series_isSet = !json[QString("machineSeries")].isNull() && m_machine_series_isValid;
}

QString OAIReportSummaryMachineSeriesAllocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryMachineSeriesAllocation::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_asset_count_isSet) {
        obj.insert(QString("allocatedAssetCount"), ::OpenAPI::toJsonValue(m_allocated_asset_count));
    }
    if (m_machine_series.isSet()) {
        obj.insert(QString("machineSeries"), ::OpenAPI::toJsonValue(m_machine_series));
    }
    return obj;
}

QString OAIReportSummaryMachineSeriesAllocation::getAllocatedAssetCount() const {
    return m_allocated_asset_count;
}
void OAIReportSummaryMachineSeriesAllocation::setAllocatedAssetCount(const QString &allocated_asset_count) {
    m_allocated_asset_count = allocated_asset_count;
    m_allocated_asset_count_isSet = true;
}

bool OAIReportSummaryMachineSeriesAllocation::is_allocated_asset_count_Set() const{
    return m_allocated_asset_count_isSet;
}

bool OAIReportSummaryMachineSeriesAllocation::is_allocated_asset_count_Valid() const{
    return m_allocated_asset_count_isValid;
}

OAIMachineSeries OAIReportSummaryMachineSeriesAllocation::getMachineSeries() const {
    return m_machine_series;
}
void OAIReportSummaryMachineSeriesAllocation::setMachineSeries(const OAIMachineSeries &machine_series) {
    m_machine_series = machine_series;
    m_machine_series_isSet = true;
}

bool OAIReportSummaryMachineSeriesAllocation::is_machine_series_Set() const{
    return m_machine_series_isSet;
}

bool OAIReportSummaryMachineSeriesAllocation::is_machine_series_Valid() const{
    return m_machine_series_isValid;
}

bool OAIReportSummaryMachineSeriesAllocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_series.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryMachineSeriesAllocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
