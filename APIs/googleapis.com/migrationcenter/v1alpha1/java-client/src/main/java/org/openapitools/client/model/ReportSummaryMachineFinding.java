/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportSummaryMachineSeriesAllocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of findings that applies to assets of type Virtual/Physical Machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportSummaryMachineFinding {
  public static final String SERIALIZED_NAME_ALLOCATED_ASSET_COUNT = "allocatedAssetCount";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_ASSET_COUNT)
  private String allocatedAssetCount;

  /**
   * Gets or Sets allocatedDiskTypes
   */
  @JsonAdapter(AllocatedDiskTypesEnum.Adapter.class)
  public enum AllocatedDiskTypesEnum {
    UNSPECIFIED("PERSISTENT_DISK_TYPE_UNSPECIFIED"),
    
    STANDARD("PERSISTENT_DISK_TYPE_STANDARD"),
    
    BALANCED("PERSISTENT_DISK_TYPE_BALANCED"),
    
    SSD("PERSISTENT_DISK_TYPE_SSD");

    private String value;

    AllocatedDiskTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocatedDiskTypesEnum fromValue(String value) {
      for (AllocatedDiskTypesEnum b : AllocatedDiskTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllocatedDiskTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocatedDiskTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocatedDiskTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllocatedDiskTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllocatedDiskTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOCATED_DISK_TYPES = "allocatedDiskTypes";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_DISK_TYPES)
  private List<AllocatedDiskTypesEnum> allocatedDiskTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOCATED_REGIONS = "allocatedRegions";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_REGIONS)
  private List<String> allocatedRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_SERIES_ALLOCATIONS = "machineSeriesAllocations";
  @SerializedName(SERIALIZED_NAME_MACHINE_SERIES_ALLOCATIONS)
  private List<ReportSummaryMachineSeriesAllocation> machineSeriesAllocations = new ArrayList<>();

  public ReportSummaryMachineFinding() {
  }

  public ReportSummaryMachineFinding allocatedAssetCount(String allocatedAssetCount) {
    this.allocatedAssetCount = allocatedAssetCount;
    return this;
  }

  /**
   * Count of assets which were allocated.
   * @return allocatedAssetCount
   */
  @javax.annotation.Nullable
  public String getAllocatedAssetCount() {
    return allocatedAssetCount;
  }

  public void setAllocatedAssetCount(String allocatedAssetCount) {
    this.allocatedAssetCount = allocatedAssetCount;
  }


  public ReportSummaryMachineFinding allocatedDiskTypes(List<AllocatedDiskTypesEnum> allocatedDiskTypes) {
    this.allocatedDiskTypes = allocatedDiskTypes;
    return this;
  }

  public ReportSummaryMachineFinding addAllocatedDiskTypesItem(AllocatedDiskTypesEnum allocatedDiskTypesItem) {
    if (this.allocatedDiskTypes == null) {
      this.allocatedDiskTypes = new ArrayList<>();
    }
    this.allocatedDiskTypes.add(allocatedDiskTypesItem);
    return this;
  }

  /**
   * Set of disk types allocated to assets.
   * @return allocatedDiskTypes
   */
  @javax.annotation.Nullable
  public List<AllocatedDiskTypesEnum> getAllocatedDiskTypes() {
    return allocatedDiskTypes;
  }

  public void setAllocatedDiskTypes(List<AllocatedDiskTypesEnum> allocatedDiskTypes) {
    this.allocatedDiskTypes = allocatedDiskTypes;
  }


  public ReportSummaryMachineFinding allocatedRegions(List<String> allocatedRegions) {
    this.allocatedRegions = allocatedRegions;
    return this;
  }

  public ReportSummaryMachineFinding addAllocatedRegionsItem(String allocatedRegionsItem) {
    if (this.allocatedRegions == null) {
      this.allocatedRegions = new ArrayList<>();
    }
    this.allocatedRegions.add(allocatedRegionsItem);
    return this;
  }

  /**
   * Set of regions in which the assets were allocated.
   * @return allocatedRegions
   */
  @javax.annotation.Nullable
  public List<String> getAllocatedRegions() {
    return allocatedRegions;
  }

  public void setAllocatedRegions(List<String> allocatedRegions) {
    this.allocatedRegions = allocatedRegions;
  }


  public ReportSummaryMachineFinding machineSeriesAllocations(List<ReportSummaryMachineSeriesAllocation> machineSeriesAllocations) {
    this.machineSeriesAllocations = machineSeriesAllocations;
    return this;
  }

  public ReportSummaryMachineFinding addMachineSeriesAllocationsItem(ReportSummaryMachineSeriesAllocation machineSeriesAllocationsItem) {
    if (this.machineSeriesAllocations == null) {
      this.machineSeriesAllocations = new ArrayList<>();
    }
    this.machineSeriesAllocations.add(machineSeriesAllocationsItem);
    return this;
  }

  /**
   * Distribution of assets based on the Machine Series.
   * @return machineSeriesAllocations
   */
  @javax.annotation.Nullable
  public List<ReportSummaryMachineSeriesAllocation> getMachineSeriesAllocations() {
    return machineSeriesAllocations;
  }

  public void setMachineSeriesAllocations(List<ReportSummaryMachineSeriesAllocation> machineSeriesAllocations) {
    this.machineSeriesAllocations = machineSeriesAllocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSummaryMachineFinding reportSummaryMachineFinding = (ReportSummaryMachineFinding) o;
    return Objects.equals(this.allocatedAssetCount, reportSummaryMachineFinding.allocatedAssetCount) &&
        Objects.equals(this.allocatedDiskTypes, reportSummaryMachineFinding.allocatedDiskTypes) &&
        Objects.equals(this.allocatedRegions, reportSummaryMachineFinding.allocatedRegions) &&
        Objects.equals(this.machineSeriesAllocations, reportSummaryMachineFinding.machineSeriesAllocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedAssetCount, allocatedDiskTypes, allocatedRegions, machineSeriesAllocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSummaryMachineFinding {\n");
    sb.append("    allocatedAssetCount: ").append(toIndentedString(allocatedAssetCount)).append("\n");
    sb.append("    allocatedDiskTypes: ").append(toIndentedString(allocatedDiskTypes)).append("\n");
    sb.append("    allocatedRegions: ").append(toIndentedString(allocatedRegions)).append("\n");
    sb.append("    machineSeriesAllocations: ").append(toIndentedString(machineSeriesAllocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedAssetCount");
    openapiFields.add("allocatedDiskTypes");
    openapiFields.add("allocatedRegions");
    openapiFields.add("machineSeriesAllocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSummaryMachineFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSummaryMachineFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSummaryMachineFinding is not found in the empty JSON string", ReportSummaryMachineFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSummaryMachineFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSummaryMachineFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocatedAssetCount") != null && !jsonObj.get("allocatedAssetCount").isJsonNull()) && !jsonObj.get("allocatedAssetCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedAssetCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocatedAssetCount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allocatedDiskTypes") != null && !jsonObj.get("allocatedDiskTypes").isJsonNull() && !jsonObj.get("allocatedDiskTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedDiskTypes` to be an array in the JSON string but got `%s`", jsonObj.get("allocatedDiskTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allocatedRegions") != null && !jsonObj.get("allocatedRegions").isJsonNull() && !jsonObj.get("allocatedRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedRegions` to be an array in the JSON string but got `%s`", jsonObj.get("allocatedRegions").toString()));
      }
      if (jsonObj.get("machineSeriesAllocations") != null && !jsonObj.get("machineSeriesAllocations").isJsonNull()) {
        JsonArray jsonArraymachineSeriesAllocations = jsonObj.getAsJsonArray("machineSeriesAllocations");
        if (jsonArraymachineSeriesAllocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("machineSeriesAllocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `machineSeriesAllocations` to be an array in the JSON string but got `%s`", jsonObj.get("machineSeriesAllocations").toString()));
          }

          // validate the optional field `machineSeriesAllocations` (array)
          for (int i = 0; i < jsonArraymachineSeriesAllocations.size(); i++) {
            ReportSummaryMachineSeriesAllocation.validateJsonElement(jsonArraymachineSeriesAllocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSummaryMachineFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSummaryMachineFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSummaryMachineFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSummaryMachineFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSummaryMachineFinding>() {
           @Override
           public void write(JsonWriter out, ReportSummaryMachineFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSummaryMachineFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSummaryMachineFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSummaryMachineFinding
   * @throws IOException if the JSON string is invalid with respect to ReportSummaryMachineFinding
   */
  public static ReportSummaryMachineFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSummaryMachineFinding.class);
  }

  /**
   * Convert an instance of ReportSummaryMachineFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

