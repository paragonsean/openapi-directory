/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SoleTenantNodeType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Preferences concerning Sole Tenancy nodes and VMs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoleTenancyPreferences {
  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   */
  @JsonAdapter(CommitmentPlanEnum.Adapter.class)
  public enum CommitmentPlanEnum {
    COMMITMENT_PLAN_UNSPECIFIED("COMMITMENT_PLAN_UNSPECIFIED"),
    
    ON_DEMAND("ON_DEMAND"),
    
    COMMITMENT_1_YEAR("COMMITMENT_1_YEAR"),
    
    COMMITMENT_3_YEAR("COMMITMENT_3_YEAR");

    private String value;

    CommitmentPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommitmentPlanEnum fromValue(String value) {
      for (CommitmentPlanEnum b : CommitmentPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommitmentPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommitmentPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommitmentPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommitmentPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommitmentPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMITMENT_PLAN = "commitmentPlan";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PLAN)
  private CommitmentPlanEnum commitmentPlan;

  public static final String SERIALIZED_NAME_CPU_OVERCOMMIT_RATIO = "cpuOvercommitRatio";
  @SerializedName(SERIALIZED_NAME_CPU_OVERCOMMIT_RATIO)
  private Double cpuOvercommitRatio;

  /**
   * Sole Tenancy nodes maintenance policy.
   */
  @JsonAdapter(HostMaintenancePolicyEnum.Adapter.class)
  public enum HostMaintenancePolicyEnum {
    UNSPECIFIED("HOST_MAINTENANCE_POLICY_UNSPECIFIED"),
    
    DEFAULT("HOST_MAINTENANCE_POLICY_DEFAULT"),
    
    RESTART_IN_PLACE("HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE"),
    
    MIGRATE_WITHIN_NODE_GROUP("HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP");

    private String value;

    HostMaintenancePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostMaintenancePolicyEnum fromValue(String value) {
      for (HostMaintenancePolicyEnum b : HostMaintenancePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostMaintenancePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostMaintenancePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostMaintenancePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostMaintenancePolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostMaintenancePolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_MAINTENANCE_POLICY = "hostMaintenancePolicy";
  @SerializedName(SERIALIZED_NAME_HOST_MAINTENANCE_POLICY)
  private HostMaintenancePolicyEnum hostMaintenancePolicy;

  public static final String SERIALIZED_NAME_NODE_TYPES = "nodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<SoleTenantNodeType> nodeTypes = new ArrayList<>();

  public SoleTenancyPreferences() {
  }

  public SoleTenancyPreferences commitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
    return this;
  }

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   * @return commitmentPlan
   */
  @javax.annotation.Nullable
  public CommitmentPlanEnum getCommitmentPlan() {
    return commitmentPlan;
  }

  public void setCommitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
  }


  public SoleTenancyPreferences cpuOvercommitRatio(Double cpuOvercommitRatio) {
    this.cpuOvercommitRatio = cpuOvercommitRatio;
    return this;
  }

  /**
   * CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.
   * @return cpuOvercommitRatio
   */
  @javax.annotation.Nullable
  public Double getCpuOvercommitRatio() {
    return cpuOvercommitRatio;
  }

  public void setCpuOvercommitRatio(Double cpuOvercommitRatio) {
    this.cpuOvercommitRatio = cpuOvercommitRatio;
  }


  public SoleTenancyPreferences hostMaintenancePolicy(HostMaintenancePolicyEnum hostMaintenancePolicy) {
    this.hostMaintenancePolicy = hostMaintenancePolicy;
    return this;
  }

  /**
   * Sole Tenancy nodes maintenance policy.
   * @return hostMaintenancePolicy
   */
  @javax.annotation.Nullable
  public HostMaintenancePolicyEnum getHostMaintenancePolicy() {
    return hostMaintenancePolicy;
  }

  public void setHostMaintenancePolicy(HostMaintenancePolicyEnum hostMaintenancePolicy) {
    this.hostMaintenancePolicy = hostMaintenancePolicy;
  }


  public SoleTenancyPreferences nodeTypes(List<SoleTenantNodeType> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public SoleTenancyPreferences addNodeTypesItem(SoleTenantNodeType nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * A list of sole tenant node types. An empty list means that all possible node types will be considered.
   * @return nodeTypes
   */
  @javax.annotation.Nullable
  public List<SoleTenantNodeType> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<SoleTenantNodeType> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoleTenancyPreferences soleTenancyPreferences = (SoleTenancyPreferences) o;
    return Objects.equals(this.commitmentPlan, soleTenancyPreferences.commitmentPlan) &&
        Objects.equals(this.cpuOvercommitRatio, soleTenancyPreferences.cpuOvercommitRatio) &&
        Objects.equals(this.hostMaintenancePolicy, soleTenancyPreferences.hostMaintenancePolicy) &&
        Objects.equals(this.nodeTypes, soleTenancyPreferences.nodeTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitmentPlan, cpuOvercommitRatio, hostMaintenancePolicy, nodeTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoleTenancyPreferences {\n");
    sb.append("    commitmentPlan: ").append(toIndentedString(commitmentPlan)).append("\n");
    sb.append("    cpuOvercommitRatio: ").append(toIndentedString(cpuOvercommitRatio)).append("\n");
    sb.append("    hostMaintenancePolicy: ").append(toIndentedString(hostMaintenancePolicy)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitmentPlan");
    openapiFields.add("cpuOvercommitRatio");
    openapiFields.add("hostMaintenancePolicy");
    openapiFields.add("nodeTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoleTenancyPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoleTenancyPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoleTenancyPreferences is not found in the empty JSON string", SoleTenancyPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoleTenancyPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoleTenancyPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) && !jsonObj.get("commitmentPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentPlan").toString()));
      }
      // validate the optional field `commitmentPlan`
      if (jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) {
        CommitmentPlanEnum.validateJsonElement(jsonObj.get("commitmentPlan"));
      }
      if ((jsonObj.get("hostMaintenancePolicy") != null && !jsonObj.get("hostMaintenancePolicy").isJsonNull()) && !jsonObj.get("hostMaintenancePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostMaintenancePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostMaintenancePolicy").toString()));
      }
      // validate the optional field `hostMaintenancePolicy`
      if (jsonObj.get("hostMaintenancePolicy") != null && !jsonObj.get("hostMaintenancePolicy").isJsonNull()) {
        HostMaintenancePolicyEnum.validateJsonElement(jsonObj.get("hostMaintenancePolicy"));
      }
      if (jsonObj.get("nodeTypes") != null && !jsonObj.get("nodeTypes").isJsonNull()) {
        JsonArray jsonArraynodeTypes = jsonObj.getAsJsonArray("nodeTypes");
        if (jsonArraynodeTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodeTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeTypes").toString()));
          }

          // validate the optional field `nodeTypes` (array)
          for (int i = 0; i < jsonArraynodeTypes.size(); i++) {
            SoleTenantNodeType.validateJsonElement(jsonArraynodeTypes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoleTenancyPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoleTenancyPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoleTenancyPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoleTenancyPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<SoleTenancyPreferences>() {
           @Override
           public void write(JsonWriter out, SoleTenancyPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoleTenancyPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoleTenancyPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoleTenancyPreferences
   * @throws IOException if the JSON string is invalid with respect to SoleTenancyPreferences
   */
  public static SoleTenancyPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoleTenancyPreferences.class);
  }

  /**
   * Convert an instance of SoleTenancyPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

