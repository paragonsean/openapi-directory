/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Histogram of bucketed assets counts by field value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregationHistogram {
  public static final String SERIALIZED_NAME_LOWER_BOUNDS = "lowerBounds";
  @SerializedName(SERIALIZED_NAME_LOWER_BOUNDS)
  private List<Double> lowerBounds = new ArrayList<>();

  public AggregationHistogram() {
  }

  public AggregationHistogram lowerBounds(List<Double> lowerBounds) {
    this.lowerBounds = lowerBounds;
    return this;
  }

  public AggregationHistogram addLowerBoundsItem(Double lowerBoundsItem) {
    if (this.lowerBounds == null) {
      this.lowerBounds = new ArrayList<>();
    }
    this.lowerBounds.add(lowerBoundsItem);
    return this;
  }

  /**
   * Lower bounds of buckets. The response will contain &#x60;n+1&#x60; buckets for &#x60;n&#x60; bounds. The first bucket will count all assets for which the field value is smaller than the first bound. Subsequent buckets will count assets for which the field value is greater or equal to a lower bound and smaller than the next one. The last bucket will count assets for which the field value is greater or equal to the final lower bound. You can define up to 20 lower bounds.
   * @return lowerBounds
   */
  @javax.annotation.Nullable
  public List<Double> getLowerBounds() {
    return lowerBounds;
  }

  public void setLowerBounds(List<Double> lowerBounds) {
    this.lowerBounds = lowerBounds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationHistogram aggregationHistogram = (AggregationHistogram) o;
    return Objects.equals(this.lowerBounds, aggregationHistogram.lowerBounds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lowerBounds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationHistogram {\n");
    sb.append("    lowerBounds: ").append(toIndentedString(lowerBounds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lowerBounds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregationHistogram
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationHistogram.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationHistogram is not found in the empty JSON string", AggregationHistogram.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregationHistogram.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationHistogram` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("lowerBounds") != null && !jsonObj.get("lowerBounds").isJsonNull() && !jsonObj.get("lowerBounds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowerBounds` to be an array in the JSON string but got `%s`", jsonObj.get("lowerBounds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationHistogram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationHistogram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationHistogram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationHistogram.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationHistogram>() {
           @Override
           public void write(JsonWriter out, AggregationHistogram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationHistogram read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregationHistogram given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregationHistogram
   * @throws IOException if the JSON string is invalid with respect to AggregationHistogram
   */
  public static AggregationHistogram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationHistogram.class);
  }

  /**
   * Convert an instance of AggregationHistogram to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

