/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FstabEntryList;
import org.openapitools.client.model.HostsEntryList;
import org.openapitools.client.model.NfsExportList;
import org.openapitools.client.model.Selinux;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guest OS config information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuestConfigDetails {
  public static final String SERIALIZED_NAME_FSTAB = "fstab";
  @SerializedName(SERIALIZED_NAME_FSTAB)
  private FstabEntryList fstab;

  public static final String SERIALIZED_NAME_HOSTS = "hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  private HostsEntryList hosts;

  public static final String SERIALIZED_NAME_ISSUE = "issue";
  @SerializedName(SERIALIZED_NAME_ISSUE)
  private String issue;

  public static final String SERIALIZED_NAME_NFS_EXPORTS = "nfsExports";
  @SerializedName(SERIALIZED_NAME_NFS_EXPORTS)
  private NfsExportList nfsExports;

  public static final String SERIALIZED_NAME_SELINUX = "selinux";
  @SerializedName(SERIALIZED_NAME_SELINUX)
  private Selinux selinux;

  public GuestConfigDetails() {
  }

  public GuestConfigDetails fstab(FstabEntryList fstab) {
    this.fstab = fstab;
    return this;
  }

  /**
   * Get fstab
   * @return fstab
   */
  @javax.annotation.Nullable
  public FstabEntryList getFstab() {
    return fstab;
  }

  public void setFstab(FstabEntryList fstab) {
    this.fstab = fstab;
  }


  public GuestConfigDetails hosts(HostsEntryList hosts) {
    this.hosts = hosts;
    return this;
  }

  /**
   * Get hosts
   * @return hosts
   */
  @javax.annotation.Nullable
  public HostsEntryList getHosts() {
    return hosts;
  }

  public void setHosts(HostsEntryList hosts) {
    this.hosts = hosts;
  }


  public GuestConfigDetails issue(String issue) {
    this.issue = issue;
    return this;
  }

  /**
   * OS issue (typically /etc/issue in Linux).
   * @return issue
   */
  @javax.annotation.Nullable
  public String getIssue() {
    return issue;
  }

  public void setIssue(String issue) {
    this.issue = issue;
  }


  public GuestConfigDetails nfsExports(NfsExportList nfsExports) {
    this.nfsExports = nfsExports;
    return this;
  }

  /**
   * Get nfsExports
   * @return nfsExports
   */
  @javax.annotation.Nullable
  public NfsExportList getNfsExports() {
    return nfsExports;
  }

  public void setNfsExports(NfsExportList nfsExports) {
    this.nfsExports = nfsExports;
  }


  public GuestConfigDetails selinux(Selinux selinux) {
    this.selinux = selinux;
    return this;
  }

  /**
   * Get selinux
   * @return selinux
   */
  @javax.annotation.Nullable
  public Selinux getSelinux() {
    return selinux;
  }

  public void setSelinux(Selinux selinux) {
    this.selinux = selinux;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuestConfigDetails guestConfigDetails = (GuestConfigDetails) o;
    return Objects.equals(this.fstab, guestConfigDetails.fstab) &&
        Objects.equals(this.hosts, guestConfigDetails.hosts) &&
        Objects.equals(this.issue, guestConfigDetails.issue) &&
        Objects.equals(this.nfsExports, guestConfigDetails.nfsExports) &&
        Objects.equals(this.selinux, guestConfigDetails.selinux);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fstab, hosts, issue, nfsExports, selinux);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuestConfigDetails {\n");
    sb.append("    fstab: ").append(toIndentedString(fstab)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    nfsExports: ").append(toIndentedString(nfsExports)).append("\n");
    sb.append("    selinux: ").append(toIndentedString(selinux)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fstab");
    openapiFields.add("hosts");
    openapiFields.add("issue");
    openapiFields.add("nfsExports");
    openapiFields.add("selinux");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuestConfigDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuestConfigDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuestConfigDetails is not found in the empty JSON string", GuestConfigDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuestConfigDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuestConfigDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fstab`
      if (jsonObj.get("fstab") != null && !jsonObj.get("fstab").isJsonNull()) {
        FstabEntryList.validateJsonElement(jsonObj.get("fstab"));
      }
      // validate the optional field `hosts`
      if (jsonObj.get("hosts") != null && !jsonObj.get("hosts").isJsonNull()) {
        HostsEntryList.validateJsonElement(jsonObj.get("hosts"));
      }
      if ((jsonObj.get("issue") != null && !jsonObj.get("issue").isJsonNull()) && !jsonObj.get("issue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue").toString()));
      }
      // validate the optional field `nfsExports`
      if (jsonObj.get("nfsExports") != null && !jsonObj.get("nfsExports").isJsonNull()) {
        NfsExportList.validateJsonElement(jsonObj.get("nfsExports"));
      }
      // validate the optional field `selinux`
      if (jsonObj.get("selinux") != null && !jsonObj.get("selinux").isJsonNull()) {
        Selinux.validateJsonElement(jsonObj.get("selinux"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuestConfigDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuestConfigDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuestConfigDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuestConfigDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GuestConfigDetails>() {
           @Override
           public void write(JsonWriter out, GuestConfigDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuestConfigDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuestConfigDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuestConfigDetails
   * @throws IOException if the JSON string is invalid with respect to GuestConfigDetails
   */
  public static GuestConfigDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuestConfigDetails.class);
  }

  /**
   * Convert an instance of GuestConfigDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

