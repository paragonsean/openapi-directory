/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VMware disk config details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareDiskConfig {
  /**
   * VMDK backing type.
   */
  @JsonAdapter(BackingTypeEnum.Adapter.class)
  public enum BackingTypeEnum {
    UNSPECIFIED("BACKING_TYPE_UNSPECIFIED"),
    
    FLAT_V1("BACKING_TYPE_FLAT_V1"),
    
    FLAT_V2("BACKING_TYPE_FLAT_V2"),
    
    PMEM("BACKING_TYPE_PMEM"),
    
    RDM_V1("BACKING_TYPE_RDM_V1"),
    
    RDM_V2("BACKING_TYPE_RDM_V2"),
    
    SESPARSE("BACKING_TYPE_SESPARSE"),
    
    SESPARSE_V1("BACKING_TYPE_SESPARSE_V1"),
    
    SESPARSE_V2("BACKING_TYPE_SESPARSE_V2");

    private String value;

    BackingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackingTypeEnum fromValue(String value) {
      for (BackingTypeEnum b : BackingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKING_TYPE = "backingType";
  @SerializedName(SERIALIZED_NAME_BACKING_TYPE)
  private BackingTypeEnum backingType;

  public static final String SERIALIZED_NAME_RDM_COMPATIBILITY_MODE = "rdmCompatibilityMode";
  @SerializedName(SERIALIZED_NAME_RDM_COMPATIBILITY_MODE)
  private String rdmCompatibilityMode;

  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private Boolean shared;

  public static final String SERIALIZED_NAME_VMDK_DISK_MODE = "vmdkDiskMode";
  @SerializedName(SERIALIZED_NAME_VMDK_DISK_MODE)
  private String vmdkDiskMode;

  public VmwareDiskConfig() {
  }

  public VmwareDiskConfig backingType(BackingTypeEnum backingType) {
    this.backingType = backingType;
    return this;
  }

  /**
   * VMDK backing type.
   * @return backingType
   */
  @javax.annotation.Nullable
  public BackingTypeEnum getBackingType() {
    return backingType;
  }

  public void setBackingType(BackingTypeEnum backingType) {
    this.backingType = backingType;
  }


  public VmwareDiskConfig rdmCompatibilityMode(String rdmCompatibilityMode) {
    this.rdmCompatibilityMode = rdmCompatibilityMode;
    return this;
  }

  /**
   * RDM compatibility mode.
   * @return rdmCompatibilityMode
   */
  @javax.annotation.Nullable
  public String getRdmCompatibilityMode() {
    return rdmCompatibilityMode;
  }

  public void setRdmCompatibilityMode(String rdmCompatibilityMode) {
    this.rdmCompatibilityMode = rdmCompatibilityMode;
  }


  public VmwareDiskConfig shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  /**
   * Is VMDK shared with other VMs.
   * @return shared
   */
  @javax.annotation.Nullable
  public Boolean getShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public VmwareDiskConfig vmdkDiskMode(String vmdkDiskMode) {
    this.vmdkDiskMode = vmdkDiskMode;
    return this;
  }

  /**
   * VMDK disk mode.
   * @return vmdkDiskMode
   */
  @javax.annotation.Nullable
  public String getVmdkDiskMode() {
    return vmdkDiskMode;
  }

  public void setVmdkDiskMode(String vmdkDiskMode) {
    this.vmdkDiskMode = vmdkDiskMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareDiskConfig vmwareDiskConfig = (VmwareDiskConfig) o;
    return Objects.equals(this.backingType, vmwareDiskConfig.backingType) &&
        Objects.equals(this.rdmCompatibilityMode, vmwareDiskConfig.rdmCompatibilityMode) &&
        Objects.equals(this.shared, vmwareDiskConfig.shared) &&
        Objects.equals(this.vmdkDiskMode, vmwareDiskConfig.vmdkDiskMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backingType, rdmCompatibilityMode, shared, vmdkDiskMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareDiskConfig {\n");
    sb.append("    backingType: ").append(toIndentedString(backingType)).append("\n");
    sb.append("    rdmCompatibilityMode: ").append(toIndentedString(rdmCompatibilityMode)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    vmdkDiskMode: ").append(toIndentedString(vmdkDiskMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backingType");
    openapiFields.add("rdmCompatibilityMode");
    openapiFields.add("shared");
    openapiFields.add("vmdkDiskMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareDiskConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareDiskConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareDiskConfig is not found in the empty JSON string", VmwareDiskConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareDiskConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareDiskConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backingType") != null && !jsonObj.get("backingType").isJsonNull()) && !jsonObj.get("backingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backingType").toString()));
      }
      // validate the optional field `backingType`
      if (jsonObj.get("backingType") != null && !jsonObj.get("backingType").isJsonNull()) {
        BackingTypeEnum.validateJsonElement(jsonObj.get("backingType"));
      }
      if ((jsonObj.get("rdmCompatibilityMode") != null && !jsonObj.get("rdmCompatibilityMode").isJsonNull()) && !jsonObj.get("rdmCompatibilityMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdmCompatibilityMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdmCompatibilityMode").toString()));
      }
      if ((jsonObj.get("vmdkDiskMode") != null && !jsonObj.get("vmdkDiskMode").isJsonNull()) && !jsonObj.get("vmdkDiskMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmdkDiskMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmdkDiskMode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareDiskConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareDiskConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareDiskConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareDiskConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareDiskConfig>() {
           @Override
           public void write(JsonWriter out, VmwareDiskConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareDiskConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareDiskConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareDiskConfig
   * @throws IOException if the JSON string is invalid with respect to VmwareDiskConfig
   */
  public static VmwareDiskConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareDiskConfig.class);
  }

  /**
   * Convert an instance of VmwareDiskConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

