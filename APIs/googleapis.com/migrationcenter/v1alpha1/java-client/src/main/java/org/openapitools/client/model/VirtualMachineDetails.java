/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GuestOsDetails;
import org.openapitools.client.model.PlatformDetails;
import org.openapitools.client.model.VirtualMachineArchitectureDetails;
import org.openapitools.client.model.VirtualMachineDiskDetails;
import org.openapitools.client.model.VirtualMachineNetworkDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a VirtualMachine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineDetails {
  public static final String SERIALIZED_NAME_CORE_COUNT = "coreCount";
  @SerializedName(SERIALIZED_NAME_CORE_COUNT)
  private Integer coreCount;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_GUEST_OS = "guestOs";
  @SerializedName(SERIALIZED_NAME_GUEST_OS)
  private GuestOsDetails guestOs;

  public static final String SERIALIZED_NAME_MEMORY_MB = "memoryMb";
  @SerializedName(SERIALIZED_NAME_MEMORY_MB)
  private Integer memoryMb;

  /**
   * What family the OS belong to, if known.
   */
  @JsonAdapter(OsFamilyEnum.Adapter.class)
  public enum OsFamilyEnum {
    UNKNOWN("OS_FAMILY_UNKNOWN"),
    
    WINDOWS("OS_FAMILY_WINDOWS"),
    
    LINUX("OS_FAMILY_LINUX"),
    
    UNIX("OS_FAMILY_UNIX");

    private String value;

    OsFamilyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsFamilyEnum fromValue(String value) {
      for (OsFamilyEnum b : OsFamilyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsFamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsFamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsFamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsFamilyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsFamilyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_FAMILY = "osFamily";
  @SerializedName(SERIALIZED_NAME_OS_FAMILY)
  private OsFamilyEnum osFamily;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformDetails platform;

  public static final String SERIALIZED_NAME_POWER_STATE = "powerState";
  @SerializedName(SERIALIZED_NAME_POWER_STATE)
  private String powerState;

  public static final String SERIALIZED_NAME_VCENTER_FOLDER = "vcenterFolder";
  @SerializedName(SERIALIZED_NAME_VCENTER_FOLDER)
  private String vcenterFolder;

  public static final String SERIALIZED_NAME_VCENTER_URL = "vcenterUrl";
  @SerializedName(SERIALIZED_NAME_VCENTER_URL)
  private String vcenterUrl;

  public static final String SERIALIZED_NAME_VCENTER_VM_ID = "vcenterVmId";
  @SerializedName(SERIALIZED_NAME_VCENTER_VM_ID)
  private String vcenterVmId;

  public static final String SERIALIZED_NAME_VM_ARCHITECTURE = "vmArchitecture";
  @SerializedName(SERIALIZED_NAME_VM_ARCHITECTURE)
  private VirtualMachineArchitectureDetails vmArchitecture;

  public static final String SERIALIZED_NAME_VM_DISKS = "vmDisks";
  @SerializedName(SERIALIZED_NAME_VM_DISKS)
  private VirtualMachineDiskDetails vmDisks;

  public static final String SERIALIZED_NAME_VM_NAME = "vmName";
  @SerializedName(SERIALIZED_NAME_VM_NAME)
  private String vmName;

  public static final String SERIALIZED_NAME_VM_NETWORK = "vmNetwork";
  @SerializedName(SERIALIZED_NAME_VM_NETWORK)
  private VirtualMachineNetworkDetails vmNetwork;

  public static final String SERIALIZED_NAME_VM_UUID = "vmUuid";
  @SerializedName(SERIALIZED_NAME_VM_UUID)
  private String vmUuid;

  public VirtualMachineDetails() {
  }

  public VirtualMachineDetails coreCount(Integer coreCount) {
    this.coreCount = coreCount;
    return this;
  }

  /**
   * Number of CPU cores in the VirtualMachine. Must be non-negative.
   * @return coreCount
   */
  @javax.annotation.Nullable
  public Integer getCoreCount() {
    return coreCount;
  }

  public void setCoreCount(Integer coreCount) {
    this.coreCount = coreCount;
  }


  public VirtualMachineDetails createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * VM creation timestamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public VirtualMachineDetails guestOs(GuestOsDetails guestOs) {
    this.guestOs = guestOs;
    return this;
  }

  /**
   * Get guestOs
   * @return guestOs
   */
  @javax.annotation.Nullable
  public GuestOsDetails getGuestOs() {
    return guestOs;
  }

  public void setGuestOs(GuestOsDetails guestOs) {
    this.guestOs = guestOs;
  }


  public VirtualMachineDetails memoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * The amount of memory in the VirtualMachine. Must be non-negative.
   * @return memoryMb
   */
  @javax.annotation.Nullable
  public Integer getMemoryMb() {
    return memoryMb;
  }

  public void setMemoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
  }


  public VirtualMachineDetails osFamily(OsFamilyEnum osFamily) {
    this.osFamily = osFamily;
    return this;
  }

  /**
   * What family the OS belong to, if known.
   * @return osFamily
   */
  @javax.annotation.Nullable
  public OsFamilyEnum getOsFamily() {
    return osFamily;
  }

  public void setOsFamily(OsFamilyEnum osFamily) {
    this.osFamily = osFamily;
  }


  public VirtualMachineDetails osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * The name of the operating system running on the VirtualMachine.
   * @return osName
   */
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public VirtualMachineDetails osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The version of the operating system running on the virtual machine.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public VirtualMachineDetails platform(PlatformDetails platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformDetails getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformDetails platform) {
    this.platform = platform;
  }


  public VirtualMachineDetails powerState(String powerState) {
    this.powerState = powerState;
    return this;
  }

  /**
   * Power state of VM (poweredOn or poweredOff).
   * @return powerState
   */
  @javax.annotation.Nullable
  public String getPowerState() {
    return powerState;
  }

  public void setPowerState(String powerState) {
    this.powerState = powerState;
  }


  public VirtualMachineDetails vcenterFolder(String vcenterFolder) {
    this.vcenterFolder = vcenterFolder;
    return this;
  }

  /**
   * Folder name in vCenter where asset resides.
   * @return vcenterFolder
   */
  @javax.annotation.Nullable
  public String getVcenterFolder() {
    return vcenterFolder;
  }

  public void setVcenterFolder(String vcenterFolder) {
    this.vcenterFolder = vcenterFolder;
  }


  public VirtualMachineDetails vcenterUrl(String vcenterUrl) {
    this.vcenterUrl = vcenterUrl;
    return this;
  }

  /**
   * vCenter URL used in collection.
   * @return vcenterUrl
   */
  @javax.annotation.Nullable
  public String getVcenterUrl() {
    return vcenterUrl;
  }

  public void setVcenterUrl(String vcenterUrl) {
    this.vcenterUrl = vcenterUrl;
  }


  public VirtualMachineDetails vcenterVmId(String vcenterVmId) {
    this.vcenterVmId = vcenterVmId;
    return this;
  }

  /**
   * vCenter VM ID.
   * @return vcenterVmId
   */
  @javax.annotation.Nullable
  public String getVcenterVmId() {
    return vcenterVmId;
  }

  public void setVcenterVmId(String vcenterVmId) {
    this.vcenterVmId = vcenterVmId;
  }


  public VirtualMachineDetails vmArchitecture(VirtualMachineArchitectureDetails vmArchitecture) {
    this.vmArchitecture = vmArchitecture;
    return this;
  }

  /**
   * Get vmArchitecture
   * @return vmArchitecture
   */
  @javax.annotation.Nullable
  public VirtualMachineArchitectureDetails getVmArchitecture() {
    return vmArchitecture;
  }

  public void setVmArchitecture(VirtualMachineArchitectureDetails vmArchitecture) {
    this.vmArchitecture = vmArchitecture;
  }


  public VirtualMachineDetails vmDisks(VirtualMachineDiskDetails vmDisks) {
    this.vmDisks = vmDisks;
    return this;
  }

  /**
   * Get vmDisks
   * @return vmDisks
   */
  @javax.annotation.Nullable
  public VirtualMachineDiskDetails getVmDisks() {
    return vmDisks;
  }

  public void setVmDisks(VirtualMachineDiskDetails vmDisks) {
    this.vmDisks = vmDisks;
  }


  public VirtualMachineDetails vmName(String vmName) {
    this.vmName = vmName;
    return this;
  }

  /**
   * Virtual Machine display name.
   * @return vmName
   */
  @javax.annotation.Nullable
  public String getVmName() {
    return vmName;
  }

  public void setVmName(String vmName) {
    this.vmName = vmName;
  }


  public VirtualMachineDetails vmNetwork(VirtualMachineNetworkDetails vmNetwork) {
    this.vmNetwork = vmNetwork;
    return this;
  }

  /**
   * Get vmNetwork
   * @return vmNetwork
   */
  @javax.annotation.Nullable
  public VirtualMachineNetworkDetails getVmNetwork() {
    return vmNetwork;
  }

  public void setVmNetwork(VirtualMachineNetworkDetails vmNetwork) {
    this.vmNetwork = vmNetwork;
  }


  public VirtualMachineDetails vmUuid(String vmUuid) {
    this.vmUuid = vmUuid;
    return this;
  }

  /**
   * Virtual Machine unique identifier.
   * @return vmUuid
   */
  @javax.annotation.Nullable
  public String getVmUuid() {
    return vmUuid;
  }

  public void setVmUuid(String vmUuid) {
    this.vmUuid = vmUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineDetails virtualMachineDetails = (VirtualMachineDetails) o;
    return Objects.equals(this.coreCount, virtualMachineDetails.coreCount) &&
        Objects.equals(this.createTime, virtualMachineDetails.createTime) &&
        Objects.equals(this.guestOs, virtualMachineDetails.guestOs) &&
        Objects.equals(this.memoryMb, virtualMachineDetails.memoryMb) &&
        Objects.equals(this.osFamily, virtualMachineDetails.osFamily) &&
        Objects.equals(this.osName, virtualMachineDetails.osName) &&
        Objects.equals(this.osVersion, virtualMachineDetails.osVersion) &&
        Objects.equals(this.platform, virtualMachineDetails.platform) &&
        Objects.equals(this.powerState, virtualMachineDetails.powerState) &&
        Objects.equals(this.vcenterFolder, virtualMachineDetails.vcenterFolder) &&
        Objects.equals(this.vcenterUrl, virtualMachineDetails.vcenterUrl) &&
        Objects.equals(this.vcenterVmId, virtualMachineDetails.vcenterVmId) &&
        Objects.equals(this.vmArchitecture, virtualMachineDetails.vmArchitecture) &&
        Objects.equals(this.vmDisks, virtualMachineDetails.vmDisks) &&
        Objects.equals(this.vmName, virtualMachineDetails.vmName) &&
        Objects.equals(this.vmNetwork, virtualMachineDetails.vmNetwork) &&
        Objects.equals(this.vmUuid, virtualMachineDetails.vmUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coreCount, createTime, guestOs, memoryMb, osFamily, osName, osVersion, platform, powerState, vcenterFolder, vcenterUrl, vcenterVmId, vmArchitecture, vmDisks, vmName, vmNetwork, vmUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineDetails {\n");
    sb.append("    coreCount: ").append(toIndentedString(coreCount)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    guestOs: ").append(toIndentedString(guestOs)).append("\n");
    sb.append("    memoryMb: ").append(toIndentedString(memoryMb)).append("\n");
    sb.append("    osFamily: ").append(toIndentedString(osFamily)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    powerState: ").append(toIndentedString(powerState)).append("\n");
    sb.append("    vcenterFolder: ").append(toIndentedString(vcenterFolder)).append("\n");
    sb.append("    vcenterUrl: ").append(toIndentedString(vcenterUrl)).append("\n");
    sb.append("    vcenterVmId: ").append(toIndentedString(vcenterVmId)).append("\n");
    sb.append("    vmArchitecture: ").append(toIndentedString(vmArchitecture)).append("\n");
    sb.append("    vmDisks: ").append(toIndentedString(vmDisks)).append("\n");
    sb.append("    vmName: ").append(toIndentedString(vmName)).append("\n");
    sb.append("    vmNetwork: ").append(toIndentedString(vmNetwork)).append("\n");
    sb.append("    vmUuid: ").append(toIndentedString(vmUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coreCount");
    openapiFields.add("createTime");
    openapiFields.add("guestOs");
    openapiFields.add("memoryMb");
    openapiFields.add("osFamily");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("platform");
    openapiFields.add("powerState");
    openapiFields.add("vcenterFolder");
    openapiFields.add("vcenterUrl");
    openapiFields.add("vcenterVmId");
    openapiFields.add("vmArchitecture");
    openapiFields.add("vmDisks");
    openapiFields.add("vmName");
    openapiFields.add("vmNetwork");
    openapiFields.add("vmUuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineDetails is not found in the empty JSON string", VirtualMachineDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `guestOs`
      if (jsonObj.get("guestOs") != null && !jsonObj.get("guestOs").isJsonNull()) {
        GuestOsDetails.validateJsonElement(jsonObj.get("guestOs"));
      }
      if ((jsonObj.get("osFamily") != null && !jsonObj.get("osFamily").isJsonNull()) && !jsonObj.get("osFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osFamily").toString()));
      }
      // validate the optional field `osFamily`
      if (jsonObj.get("osFamily") != null && !jsonObj.get("osFamily").isJsonNull()) {
        OsFamilyEnum.validateJsonElement(jsonObj.get("osFamily"));
      }
      if ((jsonObj.get("osName") != null && !jsonObj.get("osName").isJsonNull()) && !jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformDetails.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("powerState") != null && !jsonObj.get("powerState").isJsonNull()) && !jsonObj.get("powerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerState").toString()));
      }
      if ((jsonObj.get("vcenterFolder") != null && !jsonObj.get("vcenterFolder").isJsonNull()) && !jsonObj.get("vcenterFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcenterFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcenterFolder").toString()));
      }
      if ((jsonObj.get("vcenterUrl") != null && !jsonObj.get("vcenterUrl").isJsonNull()) && !jsonObj.get("vcenterUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcenterUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcenterUrl").toString()));
      }
      if ((jsonObj.get("vcenterVmId") != null && !jsonObj.get("vcenterVmId").isJsonNull()) && !jsonObj.get("vcenterVmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcenterVmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcenterVmId").toString()));
      }
      // validate the optional field `vmArchitecture`
      if (jsonObj.get("vmArchitecture") != null && !jsonObj.get("vmArchitecture").isJsonNull()) {
        VirtualMachineArchitectureDetails.validateJsonElement(jsonObj.get("vmArchitecture"));
      }
      // validate the optional field `vmDisks`
      if (jsonObj.get("vmDisks") != null && !jsonObj.get("vmDisks").isJsonNull()) {
        VirtualMachineDiskDetails.validateJsonElement(jsonObj.get("vmDisks"));
      }
      if ((jsonObj.get("vmName") != null && !jsonObj.get("vmName").isJsonNull()) && !jsonObj.get("vmName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmName").toString()));
      }
      // validate the optional field `vmNetwork`
      if (jsonObj.get("vmNetwork") != null && !jsonObj.get("vmNetwork").isJsonNull()) {
        VirtualMachineNetworkDetails.validateJsonElement(jsonObj.get("vmNetwork"));
      }
      if ((jsonObj.get("vmUuid") != null && !jsonObj.get("vmUuid").isJsonNull()) && !jsonObj.get("vmUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineDetails>() {
           @Override
           public void write(JsonWriter out, VirtualMachineDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineDetails
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineDetails
   */
  public static VirtualMachineDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineDetails.class);
  }

  /**
   * Convert an instance of VirtualMachineDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

