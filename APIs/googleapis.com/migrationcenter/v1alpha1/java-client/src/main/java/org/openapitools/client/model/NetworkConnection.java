/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NetworkConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConnection {
  public static final String SERIALIZED_NAME_LOCAL_IP_ADDRESS = "localIpAddress";
  @SerializedName(SERIALIZED_NAME_LOCAL_IP_ADDRESS)
  private String localIpAddress;

  public static final String SERIALIZED_NAME_LOCAL_PORT = "localPort";
  @SerializedName(SERIALIZED_NAME_LOCAL_PORT)
  private Integer localPort;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_PROCESS_NAME = "processName";
  @SerializedName(SERIALIZED_NAME_PROCESS_NAME)
  private String processName;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_REMOTE_IP_ADDRESS = "remoteIpAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_IP_ADDRESS)
  private String remoteIpAddress;

  public static final String SERIALIZED_NAME_REMOTE_PORT = "remotePort";
  @SerializedName(SERIALIZED_NAME_REMOTE_PORT)
  private Integer remotePort;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public NetworkConnection() {
  }

  public NetworkConnection localIpAddress(String localIpAddress) {
    this.localIpAddress = localIpAddress;
    return this;
  }

  /**
   * Local IP address.
   * @return localIpAddress
   */
  @javax.annotation.Nullable
  public String getLocalIpAddress() {
    return localIpAddress;
  }

  public void setLocalIpAddress(String localIpAddress) {
    this.localIpAddress = localIpAddress;
  }


  public NetworkConnection localPort(Integer localPort) {
    this.localPort = localPort;
    return this;
  }

  /**
   * Local port.
   * @return localPort
   */
  @javax.annotation.Nullable
  public Integer getLocalPort() {
    return localPort;
  }

  public void setLocalPort(Integer localPort) {
    this.localPort = localPort;
  }


  public NetworkConnection pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Process ID.
   * @return pid
   */
  @javax.annotation.Nullable
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public NetworkConnection processName(String processName) {
    this.processName = processName;
    return this;
  }

  /**
   * Process or service name.
   * @return processName
   */
  @javax.annotation.Nullable
  public String getProcessName() {
    return processName;
  }

  public void setProcessName(String processName) {
    this.processName = processName;
  }


  public NetworkConnection protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Connection protocol (e.g. TCP/UDP).
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public NetworkConnection remoteIpAddress(String remoteIpAddress) {
    this.remoteIpAddress = remoteIpAddress;
    return this;
  }

  /**
   * Remote IP address.
   * @return remoteIpAddress
   */
  @javax.annotation.Nullable
  public String getRemoteIpAddress() {
    return remoteIpAddress;
  }

  public void setRemoteIpAddress(String remoteIpAddress) {
    this.remoteIpAddress = remoteIpAddress;
  }


  public NetworkConnection remotePort(Integer remotePort) {
    this.remotePort = remotePort;
    return this;
  }

  /**
   * Remote port.
   * @return remotePort
   */
  @javax.annotation.Nullable
  public Integer getRemotePort() {
    return remotePort;
  }

  public void setRemotePort(Integer remotePort) {
    this.remotePort = remotePort;
  }


  public NetworkConnection state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Connection state (e.g. CONNECTED).
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConnection networkConnection = (NetworkConnection) o;
    return Objects.equals(this.localIpAddress, networkConnection.localIpAddress) &&
        Objects.equals(this.localPort, networkConnection.localPort) &&
        Objects.equals(this.pid, networkConnection.pid) &&
        Objects.equals(this.processName, networkConnection.processName) &&
        Objects.equals(this.protocol, networkConnection.protocol) &&
        Objects.equals(this.remoteIpAddress, networkConnection.remoteIpAddress) &&
        Objects.equals(this.remotePort, networkConnection.remotePort) &&
        Objects.equals(this.state, networkConnection.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localIpAddress, localPort, pid, processName, protocol, remoteIpAddress, remotePort, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConnection {\n");
    sb.append("    localIpAddress: ").append(toIndentedString(localIpAddress)).append("\n");
    sb.append("    localPort: ").append(toIndentedString(localPort)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteIpAddress: ").append(toIndentedString(remoteIpAddress)).append("\n");
    sb.append("    remotePort: ").append(toIndentedString(remotePort)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localIpAddress");
    openapiFields.add("localPort");
    openapiFields.add("pid");
    openapiFields.add("processName");
    openapiFields.add("protocol");
    openapiFields.add("remoteIpAddress");
    openapiFields.add("remotePort");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConnection is not found in the empty JSON string", NetworkConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("localIpAddress") != null && !jsonObj.get("localIpAddress").isJsonNull()) && !jsonObj.get("localIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localIpAddress").toString()));
      }
      if ((jsonObj.get("pid") != null && !jsonObj.get("pid").isJsonNull()) && !jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if ((jsonObj.get("processName") != null && !jsonObj.get("processName").isJsonNull()) && !jsonObj.get("processName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processName").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("remoteIpAddress") != null && !jsonObj.get("remoteIpAddress").isJsonNull()) && !jsonObj.get("remoteIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteIpAddress").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConnection>() {
           @Override
           public void write(JsonWriter out, NetworkConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConnection
   * @throws IOException if the JSON string is invalid with respect to NetworkConnection
   */
  public static NetworkConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConnection.class);
  }

  /**
   * Convert an instance of NetworkConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

