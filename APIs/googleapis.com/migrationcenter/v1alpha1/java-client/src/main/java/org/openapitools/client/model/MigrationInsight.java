/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComputeEngineMigrationTarget;
import org.openapitools.client.model.FitDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An insight about potential migrations for an asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationInsight {
  public static final String SERIALIZED_NAME_COMPUTE_ENGINE_SOLE_TENANT_TARGET = "computeEngineSoleTenantTarget";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ENGINE_SOLE_TENANT_TARGET)
  private Object computeEngineSoleTenantTarget;

  public static final String SERIALIZED_NAME_COMPUTE_ENGINE_TARGET = "computeEngineTarget";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ENGINE_TARGET)
  private ComputeEngineMigrationTarget computeEngineTarget;

  public static final String SERIALIZED_NAME_FIT = "fit";
  @SerializedName(SERIALIZED_NAME_FIT)
  private FitDescriptor fit;

  public static final String SERIALIZED_NAME_GKE_TARGET = "gkeTarget";
  @SerializedName(SERIALIZED_NAME_GKE_TARGET)
  private Object gkeTarget;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_TARGET = "vmwareEngineTarget";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_TARGET)
  private Object vmwareEngineTarget;

  public MigrationInsight() {
  }

  public MigrationInsight computeEngineSoleTenantTarget(Object computeEngineSoleTenantTarget) {
    this.computeEngineSoleTenantTarget = computeEngineSoleTenantTarget;
    return this;
  }

  /**
   * Compute engine sole tenant migration target.
   * @return computeEngineSoleTenantTarget
   */
  @javax.annotation.Nullable
  public Object getComputeEngineSoleTenantTarget() {
    return computeEngineSoleTenantTarget;
  }

  public void setComputeEngineSoleTenantTarget(Object computeEngineSoleTenantTarget) {
    this.computeEngineSoleTenantTarget = computeEngineSoleTenantTarget;
  }


  public MigrationInsight computeEngineTarget(ComputeEngineMigrationTarget computeEngineTarget) {
    this.computeEngineTarget = computeEngineTarget;
    return this;
  }

  /**
   * Get computeEngineTarget
   * @return computeEngineTarget
   */
  @javax.annotation.Nullable
  public ComputeEngineMigrationTarget getComputeEngineTarget() {
    return computeEngineTarget;
  }

  public void setComputeEngineTarget(ComputeEngineMigrationTarget computeEngineTarget) {
    this.computeEngineTarget = computeEngineTarget;
  }


  public MigrationInsight fit(FitDescriptor fit) {
    this.fit = fit;
    return this;
  }

  /**
   * Get fit
   * @return fit
   */
  @javax.annotation.Nullable
  public FitDescriptor getFit() {
    return fit;
  }

  public void setFit(FitDescriptor fit) {
    this.fit = fit;
  }


  public MigrationInsight gkeTarget(Object gkeTarget) {
    this.gkeTarget = gkeTarget;
    return this;
  }

  /**
   * GKE migration target.
   * @return gkeTarget
   */
  @javax.annotation.Nullable
  public Object getGkeTarget() {
    return gkeTarget;
  }

  public void setGkeTarget(Object gkeTarget) {
    this.gkeTarget = gkeTarget;
  }


  public MigrationInsight vmwareEngineTarget(Object vmwareEngineTarget) {
    this.vmwareEngineTarget = vmwareEngineTarget;
    return this;
  }

  /**
   * VMWare engine migration target.
   * @return vmwareEngineTarget
   */
  @javax.annotation.Nullable
  public Object getVmwareEngineTarget() {
    return vmwareEngineTarget;
  }

  public void setVmwareEngineTarget(Object vmwareEngineTarget) {
    this.vmwareEngineTarget = vmwareEngineTarget;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationInsight migrationInsight = (MigrationInsight) o;
    return Objects.equals(this.computeEngineSoleTenantTarget, migrationInsight.computeEngineSoleTenantTarget) &&
        Objects.equals(this.computeEngineTarget, migrationInsight.computeEngineTarget) &&
        Objects.equals(this.fit, migrationInsight.fit) &&
        Objects.equals(this.gkeTarget, migrationInsight.gkeTarget) &&
        Objects.equals(this.vmwareEngineTarget, migrationInsight.vmwareEngineTarget);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeEngineSoleTenantTarget, computeEngineTarget, fit, gkeTarget, vmwareEngineTarget);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationInsight {\n");
    sb.append("    computeEngineSoleTenantTarget: ").append(toIndentedString(computeEngineSoleTenantTarget)).append("\n");
    sb.append("    computeEngineTarget: ").append(toIndentedString(computeEngineTarget)).append("\n");
    sb.append("    fit: ").append(toIndentedString(fit)).append("\n");
    sb.append("    gkeTarget: ").append(toIndentedString(gkeTarget)).append("\n");
    sb.append("    vmwareEngineTarget: ").append(toIndentedString(vmwareEngineTarget)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeEngineSoleTenantTarget");
    openapiFields.add("computeEngineTarget");
    openapiFields.add("fit");
    openapiFields.add("gkeTarget");
    openapiFields.add("vmwareEngineTarget");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationInsight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationInsight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationInsight is not found in the empty JSON string", MigrationInsight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationInsight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationInsight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `computeEngineTarget`
      if (jsonObj.get("computeEngineTarget") != null && !jsonObj.get("computeEngineTarget").isJsonNull()) {
        ComputeEngineMigrationTarget.validateJsonElement(jsonObj.get("computeEngineTarget"));
      }
      // validate the optional field `fit`
      if (jsonObj.get("fit") != null && !jsonObj.get("fit").isJsonNull()) {
        FitDescriptor.validateJsonElement(jsonObj.get("fit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationInsight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationInsight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationInsight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationInsight.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationInsight>() {
           @Override
           public void write(JsonWriter out, MigrationInsight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationInsight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationInsight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationInsight
   * @throws IOException if the JSON string is invalid with respect to MigrationInsight
   */
  public static MigrationInsight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationInsight.class);
  }

  /**
   * Convert an instance of MigrationInsight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

