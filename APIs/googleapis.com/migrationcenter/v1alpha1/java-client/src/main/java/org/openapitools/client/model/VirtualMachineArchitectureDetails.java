/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BiosDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the VM architecture.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineArchitectureDetails {
  public static final String SERIALIZED_NAME_BIOS = "bios";
  @SerializedName(SERIALIZED_NAME_BIOS)
  private BiosDetails bios;

  public static final String SERIALIZED_NAME_CPU_ARCHITECTURE = "cpuArchitecture";
  @SerializedName(SERIALIZED_NAME_CPU_ARCHITECTURE)
  private String cpuArchitecture;

  public static final String SERIALIZED_NAME_CPU_MANUFACTURER = "cpuManufacturer";
  @SerializedName(SERIALIZED_NAME_CPU_MANUFACTURER)
  private String cpuManufacturer;

  public static final String SERIALIZED_NAME_CPU_NAME = "cpuName";
  @SerializedName(SERIALIZED_NAME_CPU_NAME)
  private String cpuName;

  public static final String SERIALIZED_NAME_CPU_SOCKET_COUNT = "cpuSocketCount";
  @SerializedName(SERIALIZED_NAME_CPU_SOCKET_COUNT)
  private Integer cpuSocketCount;

  public static final String SERIALIZED_NAME_CPU_THREAD_COUNT = "cpuThreadCount";
  @SerializedName(SERIALIZED_NAME_CPU_THREAD_COUNT)
  private Integer cpuThreadCount;

  public static final String SERIALIZED_NAME_FIRMWARE = "firmware";
  @SerializedName(SERIALIZED_NAME_FIRMWARE)
  private String firmware;

  /**
   * CPU hyperthreading support.
   */
  @JsonAdapter(HyperthreadingEnum.Adapter.class)
  public enum HyperthreadingEnum {
    UNSPECIFIED("HYPER_THREADING_UNSPECIFIED"),
    
    DISABLED("HYPER_THREADING_DISABLED"),
    
    ENABLED("HYPER_THREADING_ENABLED");

    private String value;

    HyperthreadingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HyperthreadingEnum fromValue(String value) {
      for (HyperthreadingEnum b : HyperthreadingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HyperthreadingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HyperthreadingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HyperthreadingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HyperthreadingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HyperthreadingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HYPERTHREADING = "hyperthreading";
  @SerializedName(SERIALIZED_NAME_HYPERTHREADING)
  private HyperthreadingEnum hyperthreading;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public VirtualMachineArchitectureDetails() {
  }

  public VirtualMachineArchitectureDetails bios(BiosDetails bios) {
    this.bios = bios;
    return this;
  }

  /**
   * Get bios
   * @return bios
   */
  @javax.annotation.Nullable
  public BiosDetails getBios() {
    return bios;
  }

  public void setBios(BiosDetails bios) {
    this.bios = bios;
  }


  public VirtualMachineArchitectureDetails cpuArchitecture(String cpuArchitecture) {
    this.cpuArchitecture = cpuArchitecture;
    return this;
  }

  /**
   * CPU architecture, e.g., \&quot;x64-based PC\&quot;, \&quot;x86_64\&quot;, \&quot;i686\&quot; etc.
   * @return cpuArchitecture
   */
  @javax.annotation.Nullable
  public String getCpuArchitecture() {
    return cpuArchitecture;
  }

  public void setCpuArchitecture(String cpuArchitecture) {
    this.cpuArchitecture = cpuArchitecture;
  }


  public VirtualMachineArchitectureDetails cpuManufacturer(String cpuManufacturer) {
    this.cpuManufacturer = cpuManufacturer;
    return this;
  }

  /**
   * CPU manufacturer, e.g., \&quot;Intel\&quot;, \&quot;AMD\&quot;.
   * @return cpuManufacturer
   */
  @javax.annotation.Nullable
  public String getCpuManufacturer() {
    return cpuManufacturer;
  }

  public void setCpuManufacturer(String cpuManufacturer) {
    this.cpuManufacturer = cpuManufacturer;
  }


  public VirtualMachineArchitectureDetails cpuName(String cpuName) {
    this.cpuName = cpuName;
    return this;
  }

  /**
   * CPU name, e.g., \&quot;Intel Xeon E5-2690\&quot;, \&quot;AMD EPYC 7571\&quot; etc.
   * @return cpuName
   */
  @javax.annotation.Nullable
  public String getCpuName() {
    return cpuName;
  }

  public void setCpuName(String cpuName) {
    this.cpuName = cpuName;
  }


  public VirtualMachineArchitectureDetails cpuSocketCount(Integer cpuSocketCount) {
    this.cpuSocketCount = cpuSocketCount;
    return this;
  }

  /**
   * Number of processor sockets allocated to the machine.
   * @return cpuSocketCount
   */
  @javax.annotation.Nullable
  public Integer getCpuSocketCount() {
    return cpuSocketCount;
  }

  public void setCpuSocketCount(Integer cpuSocketCount) {
    this.cpuSocketCount = cpuSocketCount;
  }


  public VirtualMachineArchitectureDetails cpuThreadCount(Integer cpuThreadCount) {
    this.cpuThreadCount = cpuThreadCount;
    return this;
  }

  /**
   * Number of CPU threads allocated to the machine.
   * @return cpuThreadCount
   */
  @javax.annotation.Nullable
  public Integer getCpuThreadCount() {
    return cpuThreadCount;
  }

  public void setCpuThreadCount(Integer cpuThreadCount) {
    this.cpuThreadCount = cpuThreadCount;
  }


  public VirtualMachineArchitectureDetails firmware(String firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Firmware (BIOS/efi).
   * @return firmware
   */
  @javax.annotation.Nullable
  public String getFirmware() {
    return firmware;
  }

  public void setFirmware(String firmware) {
    this.firmware = firmware;
  }


  public VirtualMachineArchitectureDetails hyperthreading(HyperthreadingEnum hyperthreading) {
    this.hyperthreading = hyperthreading;
    return this;
  }

  /**
   * CPU hyperthreading support.
   * @return hyperthreading
   */
  @javax.annotation.Nullable
  public HyperthreadingEnum getHyperthreading() {
    return hyperthreading;
  }

  public void setHyperthreading(HyperthreadingEnum hyperthreading) {
    this.hyperthreading = hyperthreading;
  }


  public VirtualMachineArchitectureDetails vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Hardware vendor.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineArchitectureDetails virtualMachineArchitectureDetails = (VirtualMachineArchitectureDetails) o;
    return Objects.equals(this.bios, virtualMachineArchitectureDetails.bios) &&
        Objects.equals(this.cpuArchitecture, virtualMachineArchitectureDetails.cpuArchitecture) &&
        Objects.equals(this.cpuManufacturer, virtualMachineArchitectureDetails.cpuManufacturer) &&
        Objects.equals(this.cpuName, virtualMachineArchitectureDetails.cpuName) &&
        Objects.equals(this.cpuSocketCount, virtualMachineArchitectureDetails.cpuSocketCount) &&
        Objects.equals(this.cpuThreadCount, virtualMachineArchitectureDetails.cpuThreadCount) &&
        Objects.equals(this.firmware, virtualMachineArchitectureDetails.firmware) &&
        Objects.equals(this.hyperthreading, virtualMachineArchitectureDetails.hyperthreading) &&
        Objects.equals(this.vendor, virtualMachineArchitectureDetails.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bios, cpuArchitecture, cpuManufacturer, cpuName, cpuSocketCount, cpuThreadCount, firmware, hyperthreading, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineArchitectureDetails {\n");
    sb.append("    bios: ").append(toIndentedString(bios)).append("\n");
    sb.append("    cpuArchitecture: ").append(toIndentedString(cpuArchitecture)).append("\n");
    sb.append("    cpuManufacturer: ").append(toIndentedString(cpuManufacturer)).append("\n");
    sb.append("    cpuName: ").append(toIndentedString(cpuName)).append("\n");
    sb.append("    cpuSocketCount: ").append(toIndentedString(cpuSocketCount)).append("\n");
    sb.append("    cpuThreadCount: ").append(toIndentedString(cpuThreadCount)).append("\n");
    sb.append("    firmware: ").append(toIndentedString(firmware)).append("\n");
    sb.append("    hyperthreading: ").append(toIndentedString(hyperthreading)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bios");
    openapiFields.add("cpuArchitecture");
    openapiFields.add("cpuManufacturer");
    openapiFields.add("cpuName");
    openapiFields.add("cpuSocketCount");
    openapiFields.add("cpuThreadCount");
    openapiFields.add("firmware");
    openapiFields.add("hyperthreading");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineArchitectureDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineArchitectureDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineArchitectureDetails is not found in the empty JSON string", VirtualMachineArchitectureDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineArchitectureDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineArchitectureDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bios`
      if (jsonObj.get("bios") != null && !jsonObj.get("bios").isJsonNull()) {
        BiosDetails.validateJsonElement(jsonObj.get("bios"));
      }
      if ((jsonObj.get("cpuArchitecture") != null && !jsonObj.get("cpuArchitecture").isJsonNull()) && !jsonObj.get("cpuArchitecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuArchitecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuArchitecture").toString()));
      }
      if ((jsonObj.get("cpuManufacturer") != null && !jsonObj.get("cpuManufacturer").isJsonNull()) && !jsonObj.get("cpuManufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuManufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuManufacturer").toString()));
      }
      if ((jsonObj.get("cpuName") != null && !jsonObj.get("cpuName").isJsonNull()) && !jsonObj.get("cpuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuName").toString()));
      }
      if ((jsonObj.get("firmware") != null && !jsonObj.get("firmware").isJsonNull()) && !jsonObj.get("firmware").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmware` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmware").toString()));
      }
      if ((jsonObj.get("hyperthreading") != null && !jsonObj.get("hyperthreading").isJsonNull()) && !jsonObj.get("hyperthreading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperthreading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperthreading").toString()));
      }
      // validate the optional field `hyperthreading`
      if (jsonObj.get("hyperthreading") != null && !jsonObj.get("hyperthreading").isJsonNull()) {
        HyperthreadingEnum.validateJsonElement(jsonObj.get("hyperthreading"));
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineArchitectureDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineArchitectureDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineArchitectureDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineArchitectureDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineArchitectureDetails>() {
           @Override
           public void write(JsonWriter out, VirtualMachineArchitectureDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineArchitectureDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineArchitectureDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineArchitectureDetails
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineArchitectureDetails
   */
  public static VirtualMachineArchitectureDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineArchitectureDetails.class);
  }

  /**
   * Convert an instance of VirtualMachineArchitectureDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

