/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MachinePreferences;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The user preferences relating to Compute Engine target platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputeEnginePreferences {
  /**
   * License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    UNSPECIFIED("LICENSE_TYPE_UNSPECIFIED"),
    
    DEFAULT("LICENSE_TYPE_DEFAULT"),
    
    BRING_YOUR_OWN_LICENSE("LICENSE_TYPE_BRING_YOUR_OWN_LICENSE");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String value) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseTypeEnum licenseType;

  public static final String SERIALIZED_NAME_MACHINE_PREFERENCES = "machinePreferences";
  @SerializedName(SERIALIZED_NAME_MACHINE_PREFERENCES)
  private MachinePreferences machinePreferences;

  /**
   * Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
   */
  @JsonAdapter(PersistentDiskTypeEnum.Adapter.class)
  public enum PersistentDiskTypeEnum {
    UNSPECIFIED("PERSISTENT_DISK_TYPE_UNSPECIFIED"),
    
    STANDARD("PERSISTENT_DISK_TYPE_STANDARD"),
    
    BALANCED("PERSISTENT_DISK_TYPE_BALANCED"),
    
    SSD("PERSISTENT_DISK_TYPE_SSD");

    private String value;

    PersistentDiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PersistentDiskTypeEnum fromValue(String value) {
      for (PersistentDiskTypeEnum b : PersistentDiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PersistentDiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PersistentDiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PersistentDiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PersistentDiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PersistentDiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERSISTENT_DISK_TYPE = "persistentDiskType";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_DISK_TYPE)
  private PersistentDiskTypeEnum persistentDiskType;

  public ComputeEnginePreferences() {
  }

  public ComputeEnginePreferences licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  public ComputeEnginePreferences machinePreferences(MachinePreferences machinePreferences) {
    this.machinePreferences = machinePreferences;
    return this;
  }

  /**
   * Get machinePreferences
   * @return machinePreferences
   */
  @javax.annotation.Nullable
  public MachinePreferences getMachinePreferences() {
    return machinePreferences;
  }

  public void setMachinePreferences(MachinePreferences machinePreferences) {
    this.machinePreferences = machinePreferences;
  }


  public ComputeEnginePreferences persistentDiskType(PersistentDiskTypeEnum persistentDiskType) {
    this.persistentDiskType = persistentDiskType;
    return this;
  }

  /**
   * Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
   * @return persistentDiskType
   */
  @javax.annotation.Nullable
  public PersistentDiskTypeEnum getPersistentDiskType() {
    return persistentDiskType;
  }

  public void setPersistentDiskType(PersistentDiskTypeEnum persistentDiskType) {
    this.persistentDiskType = persistentDiskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputeEnginePreferences computeEnginePreferences = (ComputeEnginePreferences) o;
    return Objects.equals(this.licenseType, computeEnginePreferences.licenseType) &&
        Objects.equals(this.machinePreferences, computeEnginePreferences.machinePreferences) &&
        Objects.equals(this.persistentDiskType, computeEnginePreferences.persistentDiskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseType, machinePreferences, persistentDiskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputeEnginePreferences {\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    machinePreferences: ").append(toIndentedString(machinePreferences)).append("\n");
    sb.append("    persistentDiskType: ").append(toIndentedString(persistentDiskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("licenseType");
    openapiFields.add("machinePreferences");
    openapiFields.add("persistentDiskType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputeEnginePreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputeEnginePreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputeEnginePreferences is not found in the empty JSON string", ComputeEnginePreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputeEnginePreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputeEnginePreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LicenseTypeEnum.validateJsonElement(jsonObj.get("licenseType"));
      }
      // validate the optional field `machinePreferences`
      if (jsonObj.get("machinePreferences") != null && !jsonObj.get("machinePreferences").isJsonNull()) {
        MachinePreferences.validateJsonElement(jsonObj.get("machinePreferences"));
      }
      if ((jsonObj.get("persistentDiskType") != null && !jsonObj.get("persistentDiskType").isJsonNull()) && !jsonObj.get("persistentDiskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `persistentDiskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("persistentDiskType").toString()));
      }
      // validate the optional field `persistentDiskType`
      if (jsonObj.get("persistentDiskType") != null && !jsonObj.get("persistentDiskType").isJsonNull()) {
        PersistentDiskTypeEnum.validateJsonElement(jsonObj.get("persistentDiskType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputeEnginePreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputeEnginePreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputeEnginePreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputeEnginePreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputeEnginePreferences>() {
           @Override
           public void write(JsonWriter out, ComputeEnginePreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputeEnginePreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputeEnginePreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputeEnginePreferences
   * @throws IOException if the JSON string is invalid with respect to ComputeEnginePreferences
   */
  public static ComputeEnginePreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputeEnginePreferences.class);
  }

  /**
   * Convert an instance of ComputeEnginePreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

