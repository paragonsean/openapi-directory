/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FileValidationReport;
import org.openapitools.client.model.ImportError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource that aggregates errors across import job files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidationReport {
  public static final String SERIALIZED_NAME_FILE_VALIDATIONS = "fileValidations";
  @SerializedName(SERIALIZED_NAME_FILE_VALIDATIONS)
  private List<FileValidationReport> fileValidations = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_ERRORS = "jobErrors";
  @SerializedName(SERIALIZED_NAME_JOB_ERRORS)
  private List<ImportError> jobErrors = new ArrayList<>();

  public ValidationReport() {
  }

  public ValidationReport fileValidations(List<FileValidationReport> fileValidations) {
    this.fileValidations = fileValidations;
    return this;
  }

  public ValidationReport addFileValidationsItem(FileValidationReport fileValidationsItem) {
    if (this.fileValidations == null) {
      this.fileValidations = new ArrayList<>();
    }
    this.fileValidations.add(fileValidationsItem);
    return this;
  }

  /**
   * List of errors found in files.
   * @return fileValidations
   */
  @javax.annotation.Nullable
  public List<FileValidationReport> getFileValidations() {
    return fileValidations;
  }

  public void setFileValidations(List<FileValidationReport> fileValidations) {
    this.fileValidations = fileValidations;
  }


  public ValidationReport jobErrors(List<ImportError> jobErrors) {
    this.jobErrors = jobErrors;
    return this;
  }

  public ValidationReport addJobErrorsItem(ImportError jobErrorsItem) {
    if (this.jobErrors == null) {
      this.jobErrors = new ArrayList<>();
    }
    this.jobErrors.add(jobErrorsItem);
    return this;
  }

  /**
   * List of job level errors.
   * @return jobErrors
   */
  @javax.annotation.Nullable
  public List<ImportError> getJobErrors() {
    return jobErrors;
  }

  public void setJobErrors(List<ImportError> jobErrors) {
    this.jobErrors = jobErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidationReport validationReport = (ValidationReport) o;
    return Objects.equals(this.fileValidations, validationReport.fileValidations) &&
        Objects.equals(this.jobErrors, validationReport.jobErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileValidations, jobErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidationReport {\n");
    sb.append("    fileValidations: ").append(toIndentedString(fileValidations)).append("\n");
    sb.append("    jobErrors: ").append(toIndentedString(jobErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileValidations");
    openapiFields.add("jobErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidationReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidationReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidationReport is not found in the empty JSON string", ValidationReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidationReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidationReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fileValidations") != null && !jsonObj.get("fileValidations").isJsonNull()) {
        JsonArray jsonArrayfileValidations = jsonObj.getAsJsonArray("fileValidations");
        if (jsonArrayfileValidations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fileValidations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fileValidations` to be an array in the JSON string but got `%s`", jsonObj.get("fileValidations").toString()));
          }

          // validate the optional field `fileValidations` (array)
          for (int i = 0; i < jsonArrayfileValidations.size(); i++) {
            FileValidationReport.validateJsonElement(jsonArrayfileValidations.get(i));
          };
        }
      }
      if (jsonObj.get("jobErrors") != null && !jsonObj.get("jobErrors").isJsonNull()) {
        JsonArray jsonArrayjobErrors = jsonObj.getAsJsonArray("jobErrors");
        if (jsonArrayjobErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobErrors` to be an array in the JSON string but got `%s`", jsonObj.get("jobErrors").toString()));
          }

          // validate the optional field `jobErrors` (array)
          for (int i = 0; i < jsonArrayjobErrors.size(); i++) {
            ImportError.validateJsonElement(jsonArrayjobErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidationReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidationReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidationReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidationReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidationReport>() {
           @Override
           public void write(JsonWriter out, ValidationReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidationReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidationReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidationReport
   * @throws IOException if the JSON string is invalid with respect to ValidationReport
   */
  public static ValidationReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidationReport.class);
  }

  /**
   * Convert an instance of ValidationReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

