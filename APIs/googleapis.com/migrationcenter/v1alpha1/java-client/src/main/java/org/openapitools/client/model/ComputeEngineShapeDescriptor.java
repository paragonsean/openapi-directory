/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComputeStorageDescriptor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compute Engine target shape descriptor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComputeEngineShapeDescriptor {
  public static final String SERIALIZED_NAME_LOGICAL_CORE_COUNT = "logicalCoreCount";
  @SerializedName(SERIALIZED_NAME_LOGICAL_CORE_COUNT)
  private Integer logicalCoreCount;

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_MEMORY_MB = "memoryMb";
  @SerializedName(SERIALIZED_NAME_MEMORY_MB)
  private Integer memoryMb;

  public static final String SERIALIZED_NAME_PHYSICAL_CORE_COUNT = "physicalCoreCount";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_CORE_COUNT)
  private Integer physicalCoreCount;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private String series;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private List<ComputeStorageDescriptor> storage = new ArrayList<>();

  public ComputeEngineShapeDescriptor() {
  }

  public ComputeEngineShapeDescriptor logicalCoreCount(Integer logicalCoreCount) {
    this.logicalCoreCount = logicalCoreCount;
    return this;
  }

  /**
   * Number of logical cores.
   * @return logicalCoreCount
   */
  @javax.annotation.Nullable
  public Integer getLogicalCoreCount() {
    return logicalCoreCount;
  }

  public void setLogicalCoreCount(Integer logicalCoreCount) {
    this.logicalCoreCount = logicalCoreCount;
  }


  public ComputeEngineShapeDescriptor machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Compute Engine machine type.
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public ComputeEngineShapeDescriptor memoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * Memory in mebibytes.
   * @return memoryMb
   */
  @javax.annotation.Nullable
  public Integer getMemoryMb() {
    return memoryMb;
  }

  public void setMemoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
  }


  public ComputeEngineShapeDescriptor physicalCoreCount(Integer physicalCoreCount) {
    this.physicalCoreCount = physicalCoreCount;
    return this;
  }

  /**
   * Number of physical cores.
   * @return physicalCoreCount
   */
  @javax.annotation.Nullable
  public Integer getPhysicalCoreCount() {
    return physicalCoreCount;
  }

  public void setPhysicalCoreCount(Integer physicalCoreCount) {
    this.physicalCoreCount = physicalCoreCount;
  }


  public ComputeEngineShapeDescriptor series(String series) {
    this.series = series;
    return this;
  }

  /**
   * Compute Engine machine series.
   * @return series
   */
  @javax.annotation.Nullable
  public String getSeries() {
    return series;
  }

  public void setSeries(String series) {
    this.series = series;
  }


  public ComputeEngineShapeDescriptor storage(List<ComputeStorageDescriptor> storage) {
    this.storage = storage;
    return this;
  }

  public ComputeEngineShapeDescriptor addStorageItem(ComputeStorageDescriptor storageItem) {
    if (this.storage == null) {
      this.storage = new ArrayList<>();
    }
    this.storage.add(storageItem);
    return this;
  }

  /**
   * Compute Engine storage. Never empty.
   * @return storage
   */
  @javax.annotation.Nullable
  public List<ComputeStorageDescriptor> getStorage() {
    return storage;
  }

  public void setStorage(List<ComputeStorageDescriptor> storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComputeEngineShapeDescriptor computeEngineShapeDescriptor = (ComputeEngineShapeDescriptor) o;
    return Objects.equals(this.logicalCoreCount, computeEngineShapeDescriptor.logicalCoreCount) &&
        Objects.equals(this.machineType, computeEngineShapeDescriptor.machineType) &&
        Objects.equals(this.memoryMb, computeEngineShapeDescriptor.memoryMb) &&
        Objects.equals(this.physicalCoreCount, computeEngineShapeDescriptor.physicalCoreCount) &&
        Objects.equals(this.series, computeEngineShapeDescriptor.series) &&
        Objects.equals(this.storage, computeEngineShapeDescriptor.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logicalCoreCount, machineType, memoryMb, physicalCoreCount, series, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComputeEngineShapeDescriptor {\n");
    sb.append("    logicalCoreCount: ").append(toIndentedString(logicalCoreCount)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    memoryMb: ").append(toIndentedString(memoryMb)).append("\n");
    sb.append("    physicalCoreCount: ").append(toIndentedString(physicalCoreCount)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logicalCoreCount");
    openapiFields.add("machineType");
    openapiFields.add("memoryMb");
    openapiFields.add("physicalCoreCount");
    openapiFields.add("series");
    openapiFields.add("storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComputeEngineShapeDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComputeEngineShapeDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComputeEngineShapeDescriptor is not found in the empty JSON string", ComputeEngineShapeDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComputeEngineShapeDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComputeEngineShapeDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) && !jsonObj.get("series").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `series` to be a primitive type in the JSON string but got `%s`", jsonObj.get("series").toString()));
      }
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        JsonArray jsonArraystorage = jsonObj.getAsJsonArray("storage");
        if (jsonArraystorage != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage` to be an array in the JSON string but got `%s`", jsonObj.get("storage").toString()));
          }

          // validate the optional field `storage` (array)
          for (int i = 0; i < jsonArraystorage.size(); i++) {
            ComputeStorageDescriptor.validateJsonElement(jsonArraystorage.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComputeEngineShapeDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComputeEngineShapeDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComputeEngineShapeDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComputeEngineShapeDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<ComputeEngineShapeDescriptor>() {
           @Override
           public void write(JsonWriter out, ComputeEngineShapeDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComputeEngineShapeDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComputeEngineShapeDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComputeEngineShapeDescriptor
   * @throws IOException if the JSON string is invalid with respect to ComputeEngineShapeDescriptor
   */
  public static ComputeEngineShapeDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComputeEngineShapeDescriptor.class);
  }

  /**
   * Convert an instance of ComputeEngineShapeDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

