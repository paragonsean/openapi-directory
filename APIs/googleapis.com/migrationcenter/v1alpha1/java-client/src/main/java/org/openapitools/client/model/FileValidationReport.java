/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImportError;
import org.openapitools.client.model.ImportRowError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource that aggregates the validation errors found in an import job file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileValidationReport {
  public static final String SERIALIZED_NAME_FILE_ERRORS = "fileErrors";
  @SerializedName(SERIALIZED_NAME_FILE_ERRORS)
  private List<ImportError> fileErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_PARTIAL_REPORT = "partialReport";
  @SerializedName(SERIALIZED_NAME_PARTIAL_REPORT)
  private Boolean partialReport;

  public static final String SERIALIZED_NAME_ROW_ERRORS = "rowErrors";
  @SerializedName(SERIALIZED_NAME_ROW_ERRORS)
  private List<ImportRowError> rowErrors = new ArrayList<>();

  public FileValidationReport() {
  }

  public FileValidationReport fileErrors(List<ImportError> fileErrors) {
    this.fileErrors = fileErrors;
    return this;
  }

  public FileValidationReport addFileErrorsItem(ImportError fileErrorsItem) {
    if (this.fileErrors == null) {
      this.fileErrors = new ArrayList<>();
    }
    this.fileErrors.add(fileErrorsItem);
    return this;
  }

  /**
   * List of file level errors.
   * @return fileErrors
   */
  @javax.annotation.Nullable
  public List<ImportError> getFileErrors() {
    return fileErrors;
  }

  public void setFileErrors(List<ImportError> fileErrors) {
    this.fileErrors = fileErrors;
  }


  public FileValidationReport fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the file.
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public FileValidationReport partialReport(Boolean partialReport) {
    this.partialReport = partialReport;
    return this;
  }

  /**
   * Flag indicating that processing was aborted due to maximum number of errors.
   * @return partialReport
   */
  @javax.annotation.Nullable
  public Boolean getPartialReport() {
    return partialReport;
  }

  public void setPartialReport(Boolean partialReport) {
    this.partialReport = partialReport;
  }


  public FileValidationReport rowErrors(List<ImportRowError> rowErrors) {
    this.rowErrors = rowErrors;
    return this;
  }

  public FileValidationReport addRowErrorsItem(ImportRowError rowErrorsItem) {
    if (this.rowErrors == null) {
      this.rowErrors = new ArrayList<>();
    }
    this.rowErrors.add(rowErrorsItem);
    return this;
  }

  /**
   * Partial list of rows that encountered validation error.
   * @return rowErrors
   */
  @javax.annotation.Nullable
  public List<ImportRowError> getRowErrors() {
    return rowErrors;
  }

  public void setRowErrors(List<ImportRowError> rowErrors) {
    this.rowErrors = rowErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileValidationReport fileValidationReport = (FileValidationReport) o;
    return Objects.equals(this.fileErrors, fileValidationReport.fileErrors) &&
        Objects.equals(this.fileName, fileValidationReport.fileName) &&
        Objects.equals(this.partialReport, fileValidationReport.partialReport) &&
        Objects.equals(this.rowErrors, fileValidationReport.rowErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileErrors, fileName, partialReport, rowErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileValidationReport {\n");
    sb.append("    fileErrors: ").append(toIndentedString(fileErrors)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    partialReport: ").append(toIndentedString(partialReport)).append("\n");
    sb.append("    rowErrors: ").append(toIndentedString(rowErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileErrors");
    openapiFields.add("fileName");
    openapiFields.add("partialReport");
    openapiFields.add("rowErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileValidationReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileValidationReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileValidationReport is not found in the empty JSON string", FileValidationReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileValidationReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileValidationReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fileErrors") != null && !jsonObj.get("fileErrors").isJsonNull()) {
        JsonArray jsonArrayfileErrors = jsonObj.getAsJsonArray("fileErrors");
        if (jsonArrayfileErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fileErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fileErrors` to be an array in the JSON string but got `%s`", jsonObj.get("fileErrors").toString()));
          }

          // validate the optional field `fileErrors` (array)
          for (int i = 0; i < jsonArrayfileErrors.size(); i++) {
            ImportError.validateJsonElement(jsonArrayfileErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if (jsonObj.get("rowErrors") != null && !jsonObj.get("rowErrors").isJsonNull()) {
        JsonArray jsonArrayrowErrors = jsonObj.getAsJsonArray("rowErrors");
        if (jsonArrayrowErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rowErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rowErrors` to be an array in the JSON string but got `%s`", jsonObj.get("rowErrors").toString()));
          }

          // validate the optional field `rowErrors` (array)
          for (int i = 0; i < jsonArrayrowErrors.size(); i++) {
            ImportRowError.validateJsonElement(jsonArrayrowErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileValidationReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileValidationReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileValidationReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileValidationReport.class));

       return (TypeAdapter<T>) new TypeAdapter<FileValidationReport>() {
           @Override
           public void write(JsonWriter out, FileValidationReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileValidationReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileValidationReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileValidationReport
   * @throws IOException if the JSON string is invalid with respect to FileValidationReport
   */
  public static FileValidationReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileValidationReport.class);
  }

  /**
   * Convert an instance of FileValidationReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

