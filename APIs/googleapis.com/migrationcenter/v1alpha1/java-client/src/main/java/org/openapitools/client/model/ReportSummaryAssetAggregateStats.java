/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReportSummaryChartData;
import org.openapitools.client.model.ReportSummaryHistogramChartData;
import org.openapitools.client.model.ReportSummaryUtilizationChartData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aggregate statistics for a collection of assets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportSummaryAssetAggregateStats {
  public static final String SERIALIZED_NAME_ASSET_AGE = "assetAge";
  @SerializedName(SERIALIZED_NAME_ASSET_AGE)
  private ReportSummaryChartData assetAge;

  public static final String SERIALIZED_NAME_CORE_COUNT_HISTOGRAM = "coreCountHistogram";
  @SerializedName(SERIALIZED_NAME_CORE_COUNT_HISTOGRAM)
  private ReportSummaryHistogramChartData coreCountHistogram;

  public static final String SERIALIZED_NAME_MEMORY_BYTES_HISTOGRAM = "memoryBytesHistogram";
  @SerializedName(SERIALIZED_NAME_MEMORY_BYTES_HISTOGRAM)
  private ReportSummaryHistogramChartData memoryBytesHistogram;

  public static final String SERIALIZED_NAME_MEMORY_UTILIZATION = "memoryUtilization";
  @SerializedName(SERIALIZED_NAME_MEMORY_UTILIZATION)
  private ReportSummaryChartData memoryUtilization;

  public static final String SERIALIZED_NAME_MEMORY_UTILIZATION_CHART = "memoryUtilizationChart";
  @SerializedName(SERIALIZED_NAME_MEMORY_UTILIZATION_CHART)
  private ReportSummaryUtilizationChartData memoryUtilizationChart;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private ReportSummaryChartData operatingSystem;

  public static final String SERIALIZED_NAME_STORAGE_BYTES_HISTOGRAM = "storageBytesHistogram";
  @SerializedName(SERIALIZED_NAME_STORAGE_BYTES_HISTOGRAM)
  private ReportSummaryHistogramChartData storageBytesHistogram;

  public static final String SERIALIZED_NAME_STORAGE_UTILIZATION = "storageUtilization";
  @SerializedName(SERIALIZED_NAME_STORAGE_UTILIZATION)
  private ReportSummaryChartData storageUtilization;

  public static final String SERIALIZED_NAME_STORAGE_UTILIZATION_CHART = "storageUtilizationChart";
  @SerializedName(SERIALIZED_NAME_STORAGE_UTILIZATION_CHART)
  private ReportSummaryUtilizationChartData storageUtilizationChart;

  public static final String SERIALIZED_NAME_TOTAL_ASSETS = "totalAssets";
  @SerializedName(SERIALIZED_NAME_TOTAL_ASSETS)
  private String totalAssets;

  public static final String SERIALIZED_NAME_TOTAL_CORES = "totalCores";
  @SerializedName(SERIALIZED_NAME_TOTAL_CORES)
  private String totalCores;

  public static final String SERIALIZED_NAME_TOTAL_MEMORY_BYTES = "totalMemoryBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_MEMORY_BYTES)
  private String totalMemoryBytes;

  public static final String SERIALIZED_NAME_TOTAL_STORAGE_BYTES = "totalStorageBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_STORAGE_BYTES)
  private String totalStorageBytes;

  public ReportSummaryAssetAggregateStats() {
  }

  public ReportSummaryAssetAggregateStats assetAge(ReportSummaryChartData assetAge) {
    this.assetAge = assetAge;
    return this;
  }

  /**
   * Get assetAge
   * @return assetAge
   */
  @javax.annotation.Nullable
  public ReportSummaryChartData getAssetAge() {
    return assetAge;
  }

  public void setAssetAge(ReportSummaryChartData assetAge) {
    this.assetAge = assetAge;
  }


  public ReportSummaryAssetAggregateStats coreCountHistogram(ReportSummaryHistogramChartData coreCountHistogram) {
    this.coreCountHistogram = coreCountHistogram;
    return this;
  }

  /**
   * Get coreCountHistogram
   * @return coreCountHistogram
   */
  @javax.annotation.Nullable
  public ReportSummaryHistogramChartData getCoreCountHistogram() {
    return coreCountHistogram;
  }

  public void setCoreCountHistogram(ReportSummaryHistogramChartData coreCountHistogram) {
    this.coreCountHistogram = coreCountHistogram;
  }


  public ReportSummaryAssetAggregateStats memoryBytesHistogram(ReportSummaryHistogramChartData memoryBytesHistogram) {
    this.memoryBytesHistogram = memoryBytesHistogram;
    return this;
  }

  /**
   * Get memoryBytesHistogram
   * @return memoryBytesHistogram
   */
  @javax.annotation.Nullable
  public ReportSummaryHistogramChartData getMemoryBytesHistogram() {
    return memoryBytesHistogram;
  }

  public void setMemoryBytesHistogram(ReportSummaryHistogramChartData memoryBytesHistogram) {
    this.memoryBytesHistogram = memoryBytesHistogram;
  }


  public ReportSummaryAssetAggregateStats memoryUtilization(ReportSummaryChartData memoryUtilization) {
    this.memoryUtilization = memoryUtilization;
    return this;
  }

  /**
   * Get memoryUtilization
   * @return memoryUtilization
   */
  @javax.annotation.Nullable
  public ReportSummaryChartData getMemoryUtilization() {
    return memoryUtilization;
  }

  public void setMemoryUtilization(ReportSummaryChartData memoryUtilization) {
    this.memoryUtilization = memoryUtilization;
  }


  public ReportSummaryAssetAggregateStats memoryUtilizationChart(ReportSummaryUtilizationChartData memoryUtilizationChart) {
    this.memoryUtilizationChart = memoryUtilizationChart;
    return this;
  }

  /**
   * Get memoryUtilizationChart
   * @return memoryUtilizationChart
   */
  @javax.annotation.Nullable
  public ReportSummaryUtilizationChartData getMemoryUtilizationChart() {
    return memoryUtilizationChart;
  }

  public void setMemoryUtilizationChart(ReportSummaryUtilizationChartData memoryUtilizationChart) {
    this.memoryUtilizationChart = memoryUtilizationChart;
  }


  public ReportSummaryAssetAggregateStats operatingSystem(ReportSummaryChartData operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Get operatingSystem
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public ReportSummaryChartData getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(ReportSummaryChartData operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public ReportSummaryAssetAggregateStats storageBytesHistogram(ReportSummaryHistogramChartData storageBytesHistogram) {
    this.storageBytesHistogram = storageBytesHistogram;
    return this;
  }

  /**
   * Get storageBytesHistogram
   * @return storageBytesHistogram
   */
  @javax.annotation.Nullable
  public ReportSummaryHistogramChartData getStorageBytesHistogram() {
    return storageBytesHistogram;
  }

  public void setStorageBytesHistogram(ReportSummaryHistogramChartData storageBytesHistogram) {
    this.storageBytesHistogram = storageBytesHistogram;
  }


  public ReportSummaryAssetAggregateStats storageUtilization(ReportSummaryChartData storageUtilization) {
    this.storageUtilization = storageUtilization;
    return this;
  }

  /**
   * Get storageUtilization
   * @return storageUtilization
   */
  @javax.annotation.Nullable
  public ReportSummaryChartData getStorageUtilization() {
    return storageUtilization;
  }

  public void setStorageUtilization(ReportSummaryChartData storageUtilization) {
    this.storageUtilization = storageUtilization;
  }


  public ReportSummaryAssetAggregateStats storageUtilizationChart(ReportSummaryUtilizationChartData storageUtilizationChart) {
    this.storageUtilizationChart = storageUtilizationChart;
    return this;
  }

  /**
   * Get storageUtilizationChart
   * @return storageUtilizationChart
   */
  @javax.annotation.Nullable
  public ReportSummaryUtilizationChartData getStorageUtilizationChart() {
    return storageUtilizationChart;
  }

  public void setStorageUtilizationChart(ReportSummaryUtilizationChartData storageUtilizationChart) {
    this.storageUtilizationChart = storageUtilizationChart;
  }


  public ReportSummaryAssetAggregateStats totalAssets(String totalAssets) {
    this.totalAssets = totalAssets;
    return this;
  }

  /**
   * Count of the number of unique assets in this collection.
   * @return totalAssets
   */
  @javax.annotation.Nullable
  public String getTotalAssets() {
    return totalAssets;
  }

  public void setTotalAssets(String totalAssets) {
    this.totalAssets = totalAssets;
  }


  public ReportSummaryAssetAggregateStats totalCores(String totalCores) {
    this.totalCores = totalCores;
    return this;
  }

  /**
   * Sum of the CPU core count of all the assets in this collection.
   * @return totalCores
   */
  @javax.annotation.Nullable
  public String getTotalCores() {
    return totalCores;
  }

  public void setTotalCores(String totalCores) {
    this.totalCores = totalCores;
  }


  public ReportSummaryAssetAggregateStats totalMemoryBytes(String totalMemoryBytes) {
    this.totalMemoryBytes = totalMemoryBytes;
    return this;
  }

  /**
   * Sum of the memory in bytes of all the assets in this collection.
   * @return totalMemoryBytes
   */
  @javax.annotation.Nullable
  public String getTotalMemoryBytes() {
    return totalMemoryBytes;
  }

  public void setTotalMemoryBytes(String totalMemoryBytes) {
    this.totalMemoryBytes = totalMemoryBytes;
  }


  public ReportSummaryAssetAggregateStats totalStorageBytes(String totalStorageBytes) {
    this.totalStorageBytes = totalStorageBytes;
    return this;
  }

  /**
   * Sum of persistent storage in bytes of all the assets in this collection.
   * @return totalStorageBytes
   */
  @javax.annotation.Nullable
  public String getTotalStorageBytes() {
    return totalStorageBytes;
  }

  public void setTotalStorageBytes(String totalStorageBytes) {
    this.totalStorageBytes = totalStorageBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSummaryAssetAggregateStats reportSummaryAssetAggregateStats = (ReportSummaryAssetAggregateStats) o;
    return Objects.equals(this.assetAge, reportSummaryAssetAggregateStats.assetAge) &&
        Objects.equals(this.coreCountHistogram, reportSummaryAssetAggregateStats.coreCountHistogram) &&
        Objects.equals(this.memoryBytesHistogram, reportSummaryAssetAggregateStats.memoryBytesHistogram) &&
        Objects.equals(this.memoryUtilization, reportSummaryAssetAggregateStats.memoryUtilization) &&
        Objects.equals(this.memoryUtilizationChart, reportSummaryAssetAggregateStats.memoryUtilizationChart) &&
        Objects.equals(this.operatingSystem, reportSummaryAssetAggregateStats.operatingSystem) &&
        Objects.equals(this.storageBytesHistogram, reportSummaryAssetAggregateStats.storageBytesHistogram) &&
        Objects.equals(this.storageUtilization, reportSummaryAssetAggregateStats.storageUtilization) &&
        Objects.equals(this.storageUtilizationChart, reportSummaryAssetAggregateStats.storageUtilizationChart) &&
        Objects.equals(this.totalAssets, reportSummaryAssetAggregateStats.totalAssets) &&
        Objects.equals(this.totalCores, reportSummaryAssetAggregateStats.totalCores) &&
        Objects.equals(this.totalMemoryBytes, reportSummaryAssetAggregateStats.totalMemoryBytes) &&
        Objects.equals(this.totalStorageBytes, reportSummaryAssetAggregateStats.totalStorageBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetAge, coreCountHistogram, memoryBytesHistogram, memoryUtilization, memoryUtilizationChart, operatingSystem, storageBytesHistogram, storageUtilization, storageUtilizationChart, totalAssets, totalCores, totalMemoryBytes, totalStorageBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSummaryAssetAggregateStats {\n");
    sb.append("    assetAge: ").append(toIndentedString(assetAge)).append("\n");
    sb.append("    coreCountHistogram: ").append(toIndentedString(coreCountHistogram)).append("\n");
    sb.append("    memoryBytesHistogram: ").append(toIndentedString(memoryBytesHistogram)).append("\n");
    sb.append("    memoryUtilization: ").append(toIndentedString(memoryUtilization)).append("\n");
    sb.append("    memoryUtilizationChart: ").append(toIndentedString(memoryUtilizationChart)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    storageBytesHistogram: ").append(toIndentedString(storageBytesHistogram)).append("\n");
    sb.append("    storageUtilization: ").append(toIndentedString(storageUtilization)).append("\n");
    sb.append("    storageUtilizationChart: ").append(toIndentedString(storageUtilizationChart)).append("\n");
    sb.append("    totalAssets: ").append(toIndentedString(totalAssets)).append("\n");
    sb.append("    totalCores: ").append(toIndentedString(totalCores)).append("\n");
    sb.append("    totalMemoryBytes: ").append(toIndentedString(totalMemoryBytes)).append("\n");
    sb.append("    totalStorageBytes: ").append(toIndentedString(totalStorageBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetAge");
    openapiFields.add("coreCountHistogram");
    openapiFields.add("memoryBytesHistogram");
    openapiFields.add("memoryUtilization");
    openapiFields.add("memoryUtilizationChart");
    openapiFields.add("operatingSystem");
    openapiFields.add("storageBytesHistogram");
    openapiFields.add("storageUtilization");
    openapiFields.add("storageUtilizationChart");
    openapiFields.add("totalAssets");
    openapiFields.add("totalCores");
    openapiFields.add("totalMemoryBytes");
    openapiFields.add("totalStorageBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSummaryAssetAggregateStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSummaryAssetAggregateStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSummaryAssetAggregateStats is not found in the empty JSON string", ReportSummaryAssetAggregateStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSummaryAssetAggregateStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSummaryAssetAggregateStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetAge`
      if (jsonObj.get("assetAge") != null && !jsonObj.get("assetAge").isJsonNull()) {
        ReportSummaryChartData.validateJsonElement(jsonObj.get("assetAge"));
      }
      // validate the optional field `coreCountHistogram`
      if (jsonObj.get("coreCountHistogram") != null && !jsonObj.get("coreCountHistogram").isJsonNull()) {
        ReportSummaryHistogramChartData.validateJsonElement(jsonObj.get("coreCountHistogram"));
      }
      // validate the optional field `memoryBytesHistogram`
      if (jsonObj.get("memoryBytesHistogram") != null && !jsonObj.get("memoryBytesHistogram").isJsonNull()) {
        ReportSummaryHistogramChartData.validateJsonElement(jsonObj.get("memoryBytesHistogram"));
      }
      // validate the optional field `memoryUtilization`
      if (jsonObj.get("memoryUtilization") != null && !jsonObj.get("memoryUtilization").isJsonNull()) {
        ReportSummaryChartData.validateJsonElement(jsonObj.get("memoryUtilization"));
      }
      // validate the optional field `memoryUtilizationChart`
      if (jsonObj.get("memoryUtilizationChart") != null && !jsonObj.get("memoryUtilizationChart").isJsonNull()) {
        ReportSummaryUtilizationChartData.validateJsonElement(jsonObj.get("memoryUtilizationChart"));
      }
      // validate the optional field `operatingSystem`
      if (jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) {
        ReportSummaryChartData.validateJsonElement(jsonObj.get("operatingSystem"));
      }
      // validate the optional field `storageBytesHistogram`
      if (jsonObj.get("storageBytesHistogram") != null && !jsonObj.get("storageBytesHistogram").isJsonNull()) {
        ReportSummaryHistogramChartData.validateJsonElement(jsonObj.get("storageBytesHistogram"));
      }
      // validate the optional field `storageUtilization`
      if (jsonObj.get("storageUtilization") != null && !jsonObj.get("storageUtilization").isJsonNull()) {
        ReportSummaryChartData.validateJsonElement(jsonObj.get("storageUtilization"));
      }
      // validate the optional field `storageUtilizationChart`
      if (jsonObj.get("storageUtilizationChart") != null && !jsonObj.get("storageUtilizationChart").isJsonNull()) {
        ReportSummaryUtilizationChartData.validateJsonElement(jsonObj.get("storageUtilizationChart"));
      }
      if ((jsonObj.get("totalAssets") != null && !jsonObj.get("totalAssets").isJsonNull()) && !jsonObj.get("totalAssets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAssets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAssets").toString()));
      }
      if ((jsonObj.get("totalCores") != null && !jsonObj.get("totalCores").isJsonNull()) && !jsonObj.get("totalCores").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCores` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCores").toString()));
      }
      if ((jsonObj.get("totalMemoryBytes") != null && !jsonObj.get("totalMemoryBytes").isJsonNull()) && !jsonObj.get("totalMemoryBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalMemoryBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalMemoryBytes").toString()));
      }
      if ((jsonObj.get("totalStorageBytes") != null && !jsonObj.get("totalStorageBytes").isJsonNull()) && !jsonObj.get("totalStorageBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalStorageBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalStorageBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSummaryAssetAggregateStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSummaryAssetAggregateStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSummaryAssetAggregateStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSummaryAssetAggregateStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSummaryAssetAggregateStats>() {
           @Override
           public void write(JsonWriter out, ReportSummaryAssetAggregateStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSummaryAssetAggregateStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSummaryAssetAggregateStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSummaryAssetAggregateStats
   * @throws IOException if the JSON string is invalid with respect to ReportSummaryAssetAggregateStats
   */
  public static ReportSummaryAssetAggregateStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSummaryAssetAggregateStats.class);
  }

  /**
   * Convert an instance of ReportSummaryAssetAggregateStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

