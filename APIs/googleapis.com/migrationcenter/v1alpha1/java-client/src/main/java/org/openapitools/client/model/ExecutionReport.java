/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImportError;
import org.openapitools.client.model.ValidationReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource that reports result of the import job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecutionReport {
  public static final String SERIALIZED_NAME_EXECUTION_ERRORS = "executionErrors";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ERRORS)
  private ValidationReport executionErrors;

  public static final String SERIALIZED_NAME_FRAMES_REPORTED = "framesReported";
  @SerializedName(SERIALIZED_NAME_FRAMES_REPORTED)
  private Integer framesReported;

  public static final String SERIALIZED_NAME_JOB_ERRORS = "jobErrors";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_JOB_ERRORS)
  private List<ImportError> jobErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_ROWS_COUNT = "totalRowsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROWS_COUNT)
  private Integer totalRowsCount;

  public ExecutionReport() {
  }

  public ExecutionReport executionErrors(ValidationReport executionErrors) {
    this.executionErrors = executionErrors;
    return this;
  }

  /**
   * Get executionErrors
   * @return executionErrors
   */
  @javax.annotation.Nullable
  public ValidationReport getExecutionErrors() {
    return executionErrors;
  }

  public void setExecutionErrors(ValidationReport executionErrors) {
    this.executionErrors = executionErrors;
  }


  public ExecutionReport framesReported(Integer framesReported) {
    this.framesReported = framesReported;
    return this;
  }

  /**
   * Total number of asset frames reported for the import job.
   * @return framesReported
   */
  @javax.annotation.Nullable
  public Integer getFramesReported() {
    return framesReported;
  }

  public void setFramesReported(Integer framesReported) {
    this.framesReported = framesReported;
  }


  @Deprecated
  public ExecutionReport jobErrors(List<ImportError> jobErrors) {
    this.jobErrors = jobErrors;
    return this;
  }

  public ExecutionReport addJobErrorsItem(ImportError jobErrorsItem) {
    if (this.jobErrors == null) {
      this.jobErrors = new ArrayList<>();
    }
    this.jobErrors.add(jobErrorsItem);
    return this;
  }

  /**
   * List of job-level errors. Deprecated, use the job errors under execution_errors instead.
   * @return jobErrors
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<ImportError> getJobErrors() {
    return jobErrors;
  }

  @Deprecated
  public void setJobErrors(List<ImportError> jobErrors) {
    this.jobErrors = jobErrors;
  }


  public ExecutionReport totalRowsCount(Integer totalRowsCount) {
    this.totalRowsCount = totalRowsCount;
    return this;
  }

  /**
   * Total number of rows in the import job.
   * @return totalRowsCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRowsCount() {
    return totalRowsCount;
  }

  public void setTotalRowsCount(Integer totalRowsCount) {
    this.totalRowsCount = totalRowsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionReport executionReport = (ExecutionReport) o;
    return Objects.equals(this.executionErrors, executionReport.executionErrors) &&
        Objects.equals(this.framesReported, executionReport.framesReported) &&
        Objects.equals(this.jobErrors, executionReport.jobErrors) &&
        Objects.equals(this.totalRowsCount, executionReport.totalRowsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionErrors, framesReported, jobErrors, totalRowsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionReport {\n");
    sb.append("    executionErrors: ").append(toIndentedString(executionErrors)).append("\n");
    sb.append("    framesReported: ").append(toIndentedString(framesReported)).append("\n");
    sb.append("    jobErrors: ").append(toIndentedString(jobErrors)).append("\n");
    sb.append("    totalRowsCount: ").append(toIndentedString(totalRowsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionErrors");
    openapiFields.add("framesReported");
    openapiFields.add("jobErrors");
    openapiFields.add("totalRowsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecutionReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionReport is not found in the empty JSON string", ExecutionReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `executionErrors`
      if (jsonObj.get("executionErrors") != null && !jsonObj.get("executionErrors").isJsonNull()) {
        ValidationReport.validateJsonElement(jsonObj.get("executionErrors"));
      }
      if (jsonObj.get("jobErrors") != null && !jsonObj.get("jobErrors").isJsonNull()) {
        JsonArray jsonArrayjobErrors = jsonObj.getAsJsonArray("jobErrors");
        if (jsonArrayjobErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobErrors` to be an array in the JSON string but got `%s`", jsonObj.get("jobErrors").toString()));
          }

          // validate the optional field `jobErrors` (array)
          for (int i = 0; i < jsonArrayjobErrors.size(); i++) {
            ImportError.validateJsonElement(jsonArrayjobErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionReport>() {
           @Override
           public void write(JsonWriter out, ExecutionReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecutionReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecutionReport
   * @throws IOException if the JSON string is invalid with respect to ExecutionReport
   */
  public static ExecutionReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionReport.class);
  }

  /**
   * Convert an instance of ExecutionReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

