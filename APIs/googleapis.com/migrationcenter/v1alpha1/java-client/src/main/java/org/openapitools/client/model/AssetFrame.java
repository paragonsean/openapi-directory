/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PerformanceSample;
import org.openapitools.client.model.VirtualMachineDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains data reported from an inventory source on an asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.928675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetFrame {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_PERFORMANCE_SAMPLES = "performanceSamples";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_SAMPLES)
  private List<PerformanceSample> performanceSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_TIME = "reportTime";
  @SerializedName(SERIALIZED_NAME_REPORT_TIME)
  private String reportTime;

  public static final String SERIALIZED_NAME_TRACE_TOKEN = "traceToken";
  @SerializedName(SERIALIZED_NAME_TRACE_TOKEN)
  private String traceToken;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE_DETAILS = "virtualMachineDetails";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE_DETAILS)
  private VirtualMachineDetails virtualMachineDetails;

  public AssetFrame() {
  }

  public AssetFrame attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public AssetFrame putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Generic asset attributes.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public AssetFrame labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public AssetFrame putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public AssetFrame performanceSamples(List<PerformanceSample> performanceSamples) {
    this.performanceSamples = performanceSamples;
    return this;
  }

  public AssetFrame addPerformanceSamplesItem(PerformanceSample performanceSamplesItem) {
    if (this.performanceSamples == null) {
      this.performanceSamples = new ArrayList<>();
    }
    this.performanceSamples.add(performanceSamplesItem);
    return this;
  }

  /**
   * Asset performance data samples. Samples that are from more than 40 days ago or after tomorrow are ignored.
   * @return performanceSamples
   */
  @javax.annotation.Nullable
  public List<PerformanceSample> getPerformanceSamples() {
    return performanceSamples;
  }

  public void setPerformanceSamples(List<PerformanceSample> performanceSamples) {
    this.performanceSamples = performanceSamples;
  }


  public AssetFrame reportTime(String reportTime) {
    this.reportTime = reportTime;
    return this;
  }

  /**
   * The time the data was reported.
   * @return reportTime
   */
  @javax.annotation.Nullable
  public String getReportTime() {
    return reportTime;
  }

  public void setReportTime(String reportTime) {
    this.reportTime = reportTime;
  }


  public AssetFrame traceToken(String traceToken) {
    this.traceToken = traceToken;
    return this;
  }

  /**
   * Optional. Trace token is optionally provided to assist with debugging and traceability.
   * @return traceToken
   */
  @javax.annotation.Nullable
  public String getTraceToken() {
    return traceToken;
  }

  public void setTraceToken(String traceToken) {
    this.traceToken = traceToken;
  }


  public AssetFrame virtualMachineDetails(VirtualMachineDetails virtualMachineDetails) {
    this.virtualMachineDetails = virtualMachineDetails;
    return this;
  }

  /**
   * Get virtualMachineDetails
   * @return virtualMachineDetails
   */
  @javax.annotation.Nullable
  public VirtualMachineDetails getVirtualMachineDetails() {
    return virtualMachineDetails;
  }

  public void setVirtualMachineDetails(VirtualMachineDetails virtualMachineDetails) {
    this.virtualMachineDetails = virtualMachineDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetFrame assetFrame = (AssetFrame) o;
    return Objects.equals(this.attributes, assetFrame.attributes) &&
        Objects.equals(this.labels, assetFrame.labels) &&
        Objects.equals(this.performanceSamples, assetFrame.performanceSamples) &&
        Objects.equals(this.reportTime, assetFrame.reportTime) &&
        Objects.equals(this.traceToken, assetFrame.traceToken) &&
        Objects.equals(this.virtualMachineDetails, assetFrame.virtualMachineDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, labels, performanceSamples, reportTime, traceToken, virtualMachineDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetFrame {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    performanceSamples: ").append(toIndentedString(performanceSamples)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    traceToken: ").append(toIndentedString(traceToken)).append("\n");
    sb.append("    virtualMachineDetails: ").append(toIndentedString(virtualMachineDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("labels");
    openapiFields.add("performanceSamples");
    openapiFields.add("reportTime");
    openapiFields.add("traceToken");
    openapiFields.add("virtualMachineDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetFrame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetFrame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetFrame is not found in the empty JSON string", AssetFrame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetFrame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetFrame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("performanceSamples") != null && !jsonObj.get("performanceSamples").isJsonNull()) {
        JsonArray jsonArrayperformanceSamples = jsonObj.getAsJsonArray("performanceSamples");
        if (jsonArrayperformanceSamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("performanceSamples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `performanceSamples` to be an array in the JSON string but got `%s`", jsonObj.get("performanceSamples").toString()));
          }

          // validate the optional field `performanceSamples` (array)
          for (int i = 0; i < jsonArrayperformanceSamples.size(); i++) {
            PerformanceSample.validateJsonElement(jsonArrayperformanceSamples.get(i));
          };
        }
      }
      if ((jsonObj.get("reportTime") != null && !jsonObj.get("reportTime").isJsonNull()) && !jsonObj.get("reportTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportTime").toString()));
      }
      if ((jsonObj.get("traceToken") != null && !jsonObj.get("traceToken").isJsonNull()) && !jsonObj.get("traceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceToken").toString()));
      }
      // validate the optional field `virtualMachineDetails`
      if (jsonObj.get("virtualMachineDetails") != null && !jsonObj.get("virtualMachineDetails").isJsonNull()) {
        VirtualMachineDetails.validateJsonElement(jsonObj.get("virtualMachineDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetFrame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetFrame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetFrame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetFrame.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetFrame>() {
           @Override
           public void write(JsonWriter out, AssetFrame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetFrame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetFrame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetFrame
   * @throws IOException if the JSON string is invalid with respect to AssetFrame
   */
  public static AssetFrame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetFrame.class);
  }

  /**
   * Convert an instance of AssetFrame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

