# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_summary_vm_ware_node import ReportSummaryVMWareNode
from openapi_server import util


class ReportSummaryVMWareNodeAllocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_asset_count: str=None, node_count: str=None, vmware_node: ReportSummaryVMWareNode=None):
        """ReportSummaryVMWareNodeAllocation - a model defined in OpenAPI

        :param allocated_asset_count: The allocated_asset_count of this ReportSummaryVMWareNodeAllocation.
        :param node_count: The node_count of this ReportSummaryVMWareNodeAllocation.
        :param vmware_node: The vmware_node of this ReportSummaryVMWareNodeAllocation.
        """
        self.openapi_types = {
            'allocated_asset_count': str,
            'node_count': str,
            'vmware_node': ReportSummaryVMWareNode
        }

        self.attribute_map = {
            'allocated_asset_count': 'allocatedAssetCount',
            'node_count': 'nodeCount',
            'vmware_node': 'vmwareNode'
        }

        self._allocated_asset_count = allocated_asset_count
        self._node_count = node_count
        self._vmware_node = vmware_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSummaryVMWareNodeAllocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSummaryVMWareNodeAllocation of this ReportSummaryVMWareNodeAllocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_asset_count(self):
        """Gets the allocated_asset_count of this ReportSummaryVMWareNodeAllocation.

        Count of assets allocated to these nodes

        :return: The allocated_asset_count of this ReportSummaryVMWareNodeAllocation.
        :rtype: str
        """
        return self._allocated_asset_count

    @allocated_asset_count.setter
    def allocated_asset_count(self, allocated_asset_count):
        """Sets the allocated_asset_count of this ReportSummaryVMWareNodeAllocation.

        Count of assets allocated to these nodes

        :param allocated_asset_count: The allocated_asset_count of this ReportSummaryVMWareNodeAllocation.
        :type allocated_asset_count: str
        """

        self._allocated_asset_count = allocated_asset_count

    @property
    def node_count(self):
        """Gets the node_count of this ReportSummaryVMWareNodeAllocation.

        Count of this node type to be provisioned

        :return: The node_count of this ReportSummaryVMWareNodeAllocation.
        :rtype: str
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ReportSummaryVMWareNodeAllocation.

        Count of this node type to be provisioned

        :param node_count: The node_count of this ReportSummaryVMWareNodeAllocation.
        :type node_count: str
        """

        self._node_count = node_count

    @property
    def vmware_node(self):
        """Gets the vmware_node of this ReportSummaryVMWareNodeAllocation.


        :return: The vmware_node of this ReportSummaryVMWareNodeAllocation.
        :rtype: ReportSummaryVMWareNode
        """
        return self._vmware_node

    @vmware_node.setter
    def vmware_node(self, vmware_node):
        """Sets the vmware_node of this ReportSummaryVMWareNodeAllocation.


        :param vmware_node: The vmware_node of this ReportSummaryVMWareNodeAllocation.
        :type vmware_node: ReportSummaryVMWareNode
        """

        self._vmware_node = vmware_node
