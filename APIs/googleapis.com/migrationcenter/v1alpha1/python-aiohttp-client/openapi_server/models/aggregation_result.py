# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_result_count import AggregationResultCount
from openapi_server.models.aggregation_result_frequency import AggregationResultFrequency
from openapi_server.models.aggregation_result_histogram import AggregationResultHistogram
from openapi_server.models.aggregation_result_sum import AggregationResultSum
from openapi_server import util


class AggregationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: AggregationResultCount=None, _field: str=None, frequency: AggregationResultFrequency=None, histogram: AggregationResultHistogram=None, sum: AggregationResultSum=None):
        """AggregationResult - a model defined in OpenAPI

        :param count: The count of this AggregationResult.
        :param _field: The _field of this AggregationResult.
        :param frequency: The frequency of this AggregationResult.
        :param histogram: The histogram of this AggregationResult.
        :param sum: The sum of this AggregationResult.
        """
        self.openapi_types = {
            'count': AggregationResultCount,
            '_field': str,
            'frequency': AggregationResultFrequency,
            'histogram': AggregationResultHistogram,
            'sum': AggregationResultSum
        }

        self.attribute_map = {
            'count': 'count',
            '_field': 'field',
            'frequency': 'frequency',
            'histogram': 'histogram',
            'sum': 'sum'
        }

        self._count = count
        self.__field = _field
        self._frequency = frequency
        self._histogram = histogram
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationResult of this AggregationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AggregationResult.


        :return: The count of this AggregationResult.
        :rtype: AggregationResultCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AggregationResult.


        :param count: The count of this AggregationResult.
        :type count: AggregationResultCount
        """

        self._count = count

    @property
    def _field(self):
        """Gets the _field of this AggregationResult.


        :return: The _field of this AggregationResult.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this AggregationResult.


        :param _field: The _field of this AggregationResult.
        :type _field: str
        """

        self.__field = _field

    @property
    def frequency(self):
        """Gets the frequency of this AggregationResult.


        :return: The frequency of this AggregationResult.
        :rtype: AggregationResultFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this AggregationResult.


        :param frequency: The frequency of this AggregationResult.
        :type frequency: AggregationResultFrequency
        """

        self._frequency = frequency

    @property
    def histogram(self):
        """Gets the histogram of this AggregationResult.


        :return: The histogram of this AggregationResult.
        :rtype: AggregationResultHistogram
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this AggregationResult.


        :param histogram: The histogram of this AggregationResult.
        :type histogram: AggregationResultHistogram
        """

        self._histogram = histogram

    @property
    def sum(self):
        """Gets the sum of this AggregationResult.


        :return: The sum of this AggregationResult.
        :rtype: AggregationResultSum
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this AggregationResult.


        :param sum: The sum of this AggregationResult.
        :type sum: AggregationResultSum
        """

        self._sum = sum
