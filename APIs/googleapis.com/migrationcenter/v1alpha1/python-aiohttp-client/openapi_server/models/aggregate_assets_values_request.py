# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation import Aggregation
from openapi_server import util


class AggregateAssetsValuesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregations: List[Aggregation]=None, filter: str=None, show_hidden: bool=None):
        """AggregateAssetsValuesRequest - a model defined in OpenAPI

        :param aggregations: The aggregations of this AggregateAssetsValuesRequest.
        :param filter: The filter of this AggregateAssetsValuesRequest.
        :param show_hidden: The show_hidden of this AggregateAssetsValuesRequest.
        """
        self.openapi_types = {
            'aggregations': List[Aggregation],
            'filter': str,
            'show_hidden': bool
        }

        self.attribute_map = {
            'aggregations': 'aggregations',
            'filter': 'filter',
            'show_hidden': 'showHidden'
        }

        self._aggregations = aggregations
        self._filter = filter
        self._show_hidden = show_hidden

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateAssetsValuesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateAssetsValuesRequest of this AggregateAssetsValuesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregations(self):
        """Gets the aggregations of this AggregateAssetsValuesRequest.

        Array of aggregations to perform. Up to 25 aggregations can be defined.

        :return: The aggregations of this AggregateAssetsValuesRequest.
        :rtype: List[Aggregation]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this AggregateAssetsValuesRequest.

        Array of aggregations to perform. Up to 25 aggregations can be defined.

        :param aggregations: The aggregations of this AggregateAssetsValuesRequest.
        :type aggregations: List[Aggregation]
        """

        self._aggregations = aggregations

    @property
    def filter(self):
        """Gets the filter of this AggregateAssetsValuesRequest.

        The aggregation will be performed on assets that match the provided filter.

        :return: The filter of this AggregateAssetsValuesRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this AggregateAssetsValuesRequest.

        The aggregation will be performed on assets that match the provided filter.

        :param filter: The filter of this AggregateAssetsValuesRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def show_hidden(self):
        """Gets the show_hidden of this AggregateAssetsValuesRequest.

        Optional. When this value is set to 'true' the response will include all assets, including those that are hidden.

        :return: The show_hidden of this AggregateAssetsValuesRequest.
        :rtype: bool
        """
        return self._show_hidden

    @show_hidden.setter
    def show_hidden(self, show_hidden):
        """Sets the show_hidden of this AggregateAssetsValuesRequest.

        Optional. When this value is set to 'true' the response will include all assets, including those that are hidden.

        :param show_hidden: The show_hidden of this AggregateAssetsValuesRequest.
        :type show_hidden: bool
        """

        self._show_hidden = show_hidden
