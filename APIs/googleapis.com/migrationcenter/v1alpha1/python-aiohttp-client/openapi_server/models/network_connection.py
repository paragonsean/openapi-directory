# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_ip_address: str=None, local_port: int=None, pid: str=None, process_name: str=None, protocol: str=None, remote_ip_address: str=None, remote_port: int=None, state: str=None):
        """NetworkConnection - a model defined in OpenAPI

        :param local_ip_address: The local_ip_address of this NetworkConnection.
        :param local_port: The local_port of this NetworkConnection.
        :param pid: The pid of this NetworkConnection.
        :param process_name: The process_name of this NetworkConnection.
        :param protocol: The protocol of this NetworkConnection.
        :param remote_ip_address: The remote_ip_address of this NetworkConnection.
        :param remote_port: The remote_port of this NetworkConnection.
        :param state: The state of this NetworkConnection.
        """
        self.openapi_types = {
            'local_ip_address': str,
            'local_port': int,
            'pid': str,
            'process_name': str,
            'protocol': str,
            'remote_ip_address': str,
            'remote_port': int,
            'state': str
        }

        self.attribute_map = {
            'local_ip_address': 'localIpAddress',
            'local_port': 'localPort',
            'pid': 'pid',
            'process_name': 'processName',
            'protocol': 'protocol',
            'remote_ip_address': 'remoteIpAddress',
            'remote_port': 'remotePort',
            'state': 'state'
        }

        self._local_ip_address = local_ip_address
        self._local_port = local_port
        self._pid = pid
        self._process_name = process_name
        self._protocol = protocol
        self._remote_ip_address = remote_ip_address
        self._remote_port = remote_port
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConnection of this NetworkConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_ip_address(self):
        """Gets the local_ip_address of this NetworkConnection.

        Local IP address.

        :return: The local_ip_address of this NetworkConnection.
        :rtype: str
        """
        return self._local_ip_address

    @local_ip_address.setter
    def local_ip_address(self, local_ip_address):
        """Sets the local_ip_address of this NetworkConnection.

        Local IP address.

        :param local_ip_address: The local_ip_address of this NetworkConnection.
        :type local_ip_address: str
        """

        self._local_ip_address = local_ip_address

    @property
    def local_port(self):
        """Gets the local_port of this NetworkConnection.

        Local port.

        :return: The local_port of this NetworkConnection.
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this NetworkConnection.

        Local port.

        :param local_port: The local_port of this NetworkConnection.
        :type local_port: int
        """

        self._local_port = local_port

    @property
    def pid(self):
        """Gets the pid of this NetworkConnection.

        Process ID.

        :return: The pid of this NetworkConnection.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this NetworkConnection.

        Process ID.

        :param pid: The pid of this NetworkConnection.
        :type pid: str
        """

        self._pid = pid

    @property
    def process_name(self):
        """Gets the process_name of this NetworkConnection.

        Process or service name.

        :return: The process_name of this NetworkConnection.
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this NetworkConnection.

        Process or service name.

        :param process_name: The process_name of this NetworkConnection.
        :type process_name: str
        """

        self._process_name = process_name

    @property
    def protocol(self):
        """Gets the protocol of this NetworkConnection.

        Connection protocol (e.g. TCP/UDP).

        :return: The protocol of this NetworkConnection.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NetworkConnection.

        Connection protocol (e.g. TCP/UDP).

        :param protocol: The protocol of this NetworkConnection.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def remote_ip_address(self):
        """Gets the remote_ip_address of this NetworkConnection.

        Remote IP address.

        :return: The remote_ip_address of this NetworkConnection.
        :rtype: str
        """
        return self._remote_ip_address

    @remote_ip_address.setter
    def remote_ip_address(self, remote_ip_address):
        """Sets the remote_ip_address of this NetworkConnection.

        Remote IP address.

        :param remote_ip_address: The remote_ip_address of this NetworkConnection.
        :type remote_ip_address: str
        """

        self._remote_ip_address = remote_ip_address

    @property
    def remote_port(self):
        """Gets the remote_port of this NetworkConnection.

        Remote port.

        :return: The remote_port of this NetworkConnection.
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this NetworkConnection.

        Remote port.

        :param remote_port: The remote_port of this NetworkConnection.
        :type remote_port: int
        """

        self._remote_port = remote_port

    @property
    def state(self):
        """Gets the state of this NetworkConnection.

        Connection state (e.g. CONNECTED).

        :return: The state of this NetworkConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NetworkConnection.

        Connection state (e.g. CONNECTED).

        :param state: The state of this NetworkConnection.
        :type state: str
        """

        self._state = state
