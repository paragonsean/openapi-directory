# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_details: str=None, severity: str=None):
        """ImportError - a model defined in OpenAPI

        :param error_details: The error_details of this ImportError.
        :param severity: The severity of this ImportError.
        """
        self.openapi_types = {
            'error_details': str,
            'severity': str
        }

        self.attribute_map = {
            'error_details': 'errorDetails',
            'severity': 'severity'
        }

        self._error_details = error_details
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportError of this ImportError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_details(self):
        """Gets the error_details of this ImportError.

        The error information.

        :return: The error_details of this ImportError.
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this ImportError.

        The error information.

        :param error_details: The error_details of this ImportError.
        :type error_details: str
        """

        self._error_details = error_details

    @property
    def severity(self):
        """Gets the severity of this ImportError.

        The severity of the error.

        :return: The severity of this ImportError.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ImportError.

        The severity of the error.

        :param severity: The severity of this ImportError.
        :type severity: str
        """
        allowed_values = ["SEVERITY_UNSPECIFIED", "ERROR", "WARNING", "INFO"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
