# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sole_tenant_node_type import SoleTenantNodeType
from openapi_server import util


class SoleTenancyPreferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_plan: str=None, cpu_overcommit_ratio: float=None, host_maintenance_policy: str=None, node_types: List[SoleTenantNodeType]=None):
        """SoleTenancyPreferences - a model defined in OpenAPI

        :param commitment_plan: The commitment_plan of this SoleTenancyPreferences.
        :param cpu_overcommit_ratio: The cpu_overcommit_ratio of this SoleTenancyPreferences.
        :param host_maintenance_policy: The host_maintenance_policy of this SoleTenancyPreferences.
        :param node_types: The node_types of this SoleTenancyPreferences.
        """
        self.openapi_types = {
            'commitment_plan': str,
            'cpu_overcommit_ratio': float,
            'host_maintenance_policy': str,
            'node_types': List[SoleTenantNodeType]
        }

        self.attribute_map = {
            'commitment_plan': 'commitmentPlan',
            'cpu_overcommit_ratio': 'cpuOvercommitRatio',
            'host_maintenance_policy': 'hostMaintenancePolicy',
            'node_types': 'nodeTypes'
        }

        self._commitment_plan = commitment_plan
        self._cpu_overcommit_ratio = cpu_overcommit_ratio
        self._host_maintenance_policy = host_maintenance_policy
        self._node_types = node_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoleTenancyPreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoleTenancyPreferences of this SoleTenancyPreferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_plan(self):
        """Gets the commitment_plan of this SoleTenancyPreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :return: The commitment_plan of this SoleTenancyPreferences.
        :rtype: str
        """
        return self._commitment_plan

    @commitment_plan.setter
    def commitment_plan(self, commitment_plan):
        """Sets the commitment_plan of this SoleTenancyPreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :param commitment_plan: The commitment_plan of this SoleTenancyPreferences.
        :type commitment_plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "ON_DEMAND", "COMMITMENT_1_YEAR", "COMMITMENT_3_YEAR"]  # noqa: E501
        if commitment_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment_plan` ({0}), must be one of {1}"
                .format(commitment_plan, allowed_values)
            )

        self._commitment_plan = commitment_plan

    @property
    def cpu_overcommit_ratio(self):
        """Gets the cpu_overcommit_ratio of this SoleTenancyPreferences.

        CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.

        :return: The cpu_overcommit_ratio of this SoleTenancyPreferences.
        :rtype: float
        """
        return self._cpu_overcommit_ratio

    @cpu_overcommit_ratio.setter
    def cpu_overcommit_ratio(self, cpu_overcommit_ratio):
        """Sets the cpu_overcommit_ratio of this SoleTenancyPreferences.

        CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.

        :param cpu_overcommit_ratio: The cpu_overcommit_ratio of this SoleTenancyPreferences.
        :type cpu_overcommit_ratio: float
        """

        self._cpu_overcommit_ratio = cpu_overcommit_ratio

    @property
    def host_maintenance_policy(self):
        """Gets the host_maintenance_policy of this SoleTenancyPreferences.

        Sole Tenancy nodes maintenance policy.

        :return: The host_maintenance_policy of this SoleTenancyPreferences.
        :rtype: str
        """
        return self._host_maintenance_policy

    @host_maintenance_policy.setter
    def host_maintenance_policy(self, host_maintenance_policy):
        """Sets the host_maintenance_policy of this SoleTenancyPreferences.

        Sole Tenancy nodes maintenance policy.

        :param host_maintenance_policy: The host_maintenance_policy of this SoleTenancyPreferences.
        :type host_maintenance_policy: str
        """
        allowed_values = ["HOST_MAINTENANCE_POLICY_UNSPECIFIED", "HOST_MAINTENANCE_POLICY_DEFAULT", "HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE", "HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP"]  # noqa: E501
        if host_maintenance_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `host_maintenance_policy` ({0}), must be one of {1}"
                .format(host_maintenance_policy, allowed_values)
            )

        self._host_maintenance_policy = host_maintenance_policy

    @property
    def node_types(self):
        """Gets the node_types of this SoleTenancyPreferences.

        A list of sole tenant node types. An empty list means that all possible node types will be considered.

        :return: The node_types of this SoleTenancyPreferences.
        :rtype: List[SoleTenantNodeType]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this SoleTenancyPreferences.

        A list of sole tenant node types. An empty list means that all possible node types will be considered.

        :param node_types: The node_types of this SoleTenancyPreferences.
        :type node_types: List[SoleTenantNodeType]
        """

        self._node_types = node_types
