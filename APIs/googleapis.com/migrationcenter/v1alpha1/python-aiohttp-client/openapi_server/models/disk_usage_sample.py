# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiskUsageSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_iops: float=None):
        """DiskUsageSample - a model defined in OpenAPI

        :param average_iops: The average_iops of this DiskUsageSample.
        """
        self.openapi_types = {
            'average_iops': float
        }

        self.attribute_map = {
            'average_iops': 'averageIops'
        }

        self._average_iops = average_iops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskUsageSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskUsageSample of this DiskUsageSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_iops(self):
        """Gets the average_iops of this DiskUsageSample.

        Average IOPS sampled over a short window. Must be non-negative. Must be equal to the sum of read and write if one of them is positive. if both read and write are zero they are ignored.

        :return: The average_iops of this DiskUsageSample.
        :rtype: float
        """
        return self._average_iops

    @average_iops.setter
    def average_iops(self, average_iops):
        """Sets the average_iops of this DiskUsageSample.

        Average IOPS sampled over a short window. Must be non-negative. Must be equal to the sum of read and write if one of them is positive. if both read and write are zero they are ignored.

        :param average_iops: The average_iops of this DiskUsageSample.
        :type average_iops: float
        """

        self._average_iops = average_iops
