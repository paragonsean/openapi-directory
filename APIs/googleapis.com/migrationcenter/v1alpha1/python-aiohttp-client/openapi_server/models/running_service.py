# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunningService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cmdline: str=None, exe_path: str=None, name: str=None, pid: str=None, start_mode: str=None, state: str=None, status: str=None):
        """RunningService - a model defined in OpenAPI

        :param cmdline: The cmdline of this RunningService.
        :param exe_path: The exe_path of this RunningService.
        :param name: The name of this RunningService.
        :param pid: The pid of this RunningService.
        :param start_mode: The start_mode of this RunningService.
        :param state: The state of this RunningService.
        :param status: The status of this RunningService.
        """
        self.openapi_types = {
            'cmdline': str,
            'exe_path': str,
            'name': str,
            'pid': str,
            'start_mode': str,
            'state': str,
            'status': str
        }

        self.attribute_map = {
            'cmdline': 'cmdline',
            'exe_path': 'exePath',
            'name': 'name',
            'pid': 'pid',
            'start_mode': 'startMode',
            'state': 'state',
            'status': 'status'
        }

        self._cmdline = cmdline
        self._exe_path = exe_path
        self._name = name
        self._pid = pid
        self._start_mode = start_mode
        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunningService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunningService of this RunningService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cmdline(self):
        """Gets the cmdline of this RunningService.

        Service command line.

        :return: The cmdline of this RunningService.
        :rtype: str
        """
        return self._cmdline

    @cmdline.setter
    def cmdline(self, cmdline):
        """Sets the cmdline of this RunningService.

        Service command line.

        :param cmdline: The cmdline of this RunningService.
        :type cmdline: str
        """

        self._cmdline = cmdline

    @property
    def exe_path(self):
        """Gets the exe_path of this RunningService.

        Service binary path.

        :return: The exe_path of this RunningService.
        :rtype: str
        """
        return self._exe_path

    @exe_path.setter
    def exe_path(self, exe_path):
        """Sets the exe_path of this RunningService.

        Service binary path.

        :param exe_path: The exe_path of this RunningService.
        :type exe_path: str
        """

        self._exe_path = exe_path

    @property
    def name(self):
        """Gets the name of this RunningService.

        Service name.

        :return: The name of this RunningService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunningService.

        Service name.

        :param name: The name of this RunningService.
        :type name: str
        """

        self._name = name

    @property
    def pid(self):
        """Gets the pid of this RunningService.

        Service pid.

        :return: The pid of this RunningService.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this RunningService.

        Service pid.

        :param pid: The pid of this RunningService.
        :type pid: str
        """

        self._pid = pid

    @property
    def start_mode(self):
        """Gets the start_mode of this RunningService.

        Service start mode (raw, OS-agnostic).

        :return: The start_mode of this RunningService.
        :rtype: str
        """
        return self._start_mode

    @start_mode.setter
    def start_mode(self, start_mode):
        """Sets the start_mode of this RunningService.

        Service start mode (raw, OS-agnostic).

        :param start_mode: The start_mode of this RunningService.
        :type start_mode: str
        """

        self._start_mode = start_mode

    @property
    def state(self):
        """Gets the state of this RunningService.

        Service state (raw, OS-agnostic).

        :return: The state of this RunningService.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunningService.

        Service state (raw, OS-agnostic).

        :param state: The state of this RunningService.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this RunningService.

        Service status.

        :return: The status of this RunningService.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunningService.

        Service status.

        :param status: The status of this RunningService.
        :type status: str
        """

        self._status = status
