# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachinePreferencesSizingOptimizationCustomParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_method: str=None, cpu_usage_percentage: int=None, memory_usage_percentage: int=None, storage_multiplier: float=None):
        """VirtualMachinePreferencesSizingOptimizationCustomParameters - a model defined in OpenAPI

        :param aggregation_method: The aggregation_method of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :param cpu_usage_percentage: The cpu_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :param memory_usage_percentage: The memory_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :param storage_multiplier: The storage_multiplier of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        """
        self.openapi_types = {
            'aggregation_method': str,
            'cpu_usage_percentage': int,
            'memory_usage_percentage': int,
            'storage_multiplier': float
        }

        self.attribute_map = {
            'aggregation_method': 'aggregationMethod',
            'cpu_usage_percentage': 'cpuUsagePercentage',
            'memory_usage_percentage': 'memoryUsagePercentage',
            'storage_multiplier': 'storageMultiplier'
        }

        self._aggregation_method = aggregation_method
        self._cpu_usage_percentage = cpu_usage_percentage
        self._memory_usage_percentage = memory_usage_percentage
        self._storage_multiplier = storage_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachinePreferencesSizingOptimizationCustomParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachinePreferencesSizingOptimizationCustomParameters of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_method(self):
        """Gets the aggregation_method of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Type of statistical aggregation of a resource utilization data, on which to base the sizing metrics.

        :return: The aggregation_method of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :rtype: str
        """
        return self._aggregation_method

    @aggregation_method.setter
    def aggregation_method(self, aggregation_method):
        """Sets the aggregation_method of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Type of statistical aggregation of a resource utilization data, on which to base the sizing metrics.

        :param aggregation_method: The aggregation_method of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :type aggregation_method: str
        """
        allowed_values = ["AGGREGATION_METHOD_UNSPECIFIED", "AGGREGATION_METHOD_AVERAGE", "AGGREGATION_METHOD_MEDIAN", "AGGREGATION_METHOD_NINETY_FIFTH_PERCENTILE", "AGGREGATION_METHOD_PEAK"]  # noqa: E501
        if aggregation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_method` ({0}), must be one of {1}"
                .format(aggregation_method, allowed_values)
            )

        self._aggregation_method = aggregation_method

    @property
    def cpu_usage_percentage(self):
        """Gets the cpu_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired percentage of CPU usage. Must be in the interval [1, 100] (or 0 for default value).

        :return: The cpu_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :rtype: int
        """
        return self._cpu_usage_percentage

    @cpu_usage_percentage.setter
    def cpu_usage_percentage(self, cpu_usage_percentage):
        """Sets the cpu_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired percentage of CPU usage. Must be in the interval [1, 100] (or 0 for default value).

        :param cpu_usage_percentage: The cpu_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :type cpu_usage_percentage: int
        """

        self._cpu_usage_percentage = cpu_usage_percentage

    @property
    def memory_usage_percentage(self):
        """Gets the memory_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired percentage of memory usage. Must be in the interval [1, 100] (or 0 for default value).

        :return: The memory_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :rtype: int
        """
        return self._memory_usage_percentage

    @memory_usage_percentage.setter
    def memory_usage_percentage(self, memory_usage_percentage):
        """Sets the memory_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired percentage of memory usage. Must be in the interval [1, 100] (or 0 for default value).

        :param memory_usage_percentage: The memory_usage_percentage of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :type memory_usage_percentage: int
        """

        self._memory_usage_percentage = memory_usage_percentage

    @property
    def storage_multiplier(self):
        """Gets the storage_multiplier of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired increase factor of storage, relative to currently used storage. Must be in the interval [1.0, 2.0] (or 0 for default value).

        :return: The storage_multiplier of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :rtype: float
        """
        return self._storage_multiplier

    @storage_multiplier.setter
    def storage_multiplier(self, storage_multiplier):
        """Sets the storage_multiplier of this VirtualMachinePreferencesSizingOptimizationCustomParameters.

        Optional. Desired increase factor of storage, relative to currently used storage. Must be in the interval [1.0, 2.0] (or 0 for default value).

        :param storage_multiplier: The storage_multiplier of this VirtualMachinePreferencesSizingOptimizationCustomParameters.
        :type storage_multiplier: float
        """

        self._storage_multiplier = storage_multiplier
