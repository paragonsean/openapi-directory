# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset import Asset
from openapi_server import util


class UpdateAssetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: Asset=None, request_id: str=None, update_mask: str=None):
        """UpdateAssetRequest - a model defined in OpenAPI

        :param asset: The asset of this UpdateAssetRequest.
        :param request_id: The request_id of this UpdateAssetRequest.
        :param update_mask: The update_mask of this UpdateAssetRequest.
        """
        self.openapi_types = {
            'asset': Asset,
            'request_id': str,
            'update_mask': str
        }

        self.attribute_map = {
            'asset': 'asset',
            'request_id': 'requestId',
            'update_mask': 'updateMask'
        }

        self._asset = asset
        self._request_id = request_id
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssetRequest of this UpdateAssetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this UpdateAssetRequest.


        :return: The asset of this UpdateAssetRequest.
        :rtype: Asset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this UpdateAssetRequest.


        :param asset: The asset of this UpdateAssetRequest.
        :type asset: Asset
        """

        self._asset = asset

    @property
    def request_id(self):
        """Gets the request_id of this UpdateAssetRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this UpdateAssetRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this UpdateAssetRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this UpdateAssetRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateAssetRequest.

        Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.

        :return: The update_mask of this UpdateAssetRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateAssetRequest.

        Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.

        :param update_mask: The update_mask of this UpdateAssetRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
