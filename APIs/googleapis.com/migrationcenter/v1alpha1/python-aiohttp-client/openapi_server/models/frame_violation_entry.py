# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrameViolationEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, violation: str=None):
        """FrameViolationEntry - a model defined in OpenAPI

        :param _field: The _field of this FrameViolationEntry.
        :param violation: The violation of this FrameViolationEntry.
        """
        self.openapi_types = {
            '_field': str,
            'violation': str
        }

        self.attribute_map = {
            '_field': 'field',
            'violation': 'violation'
        }

        self.__field = _field
        self._violation = violation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrameViolationEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrameViolationEntry of this FrameViolationEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FrameViolationEntry.

        The field of the original frame where the violation occurred.

        :return: The _field of this FrameViolationEntry.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FrameViolationEntry.

        The field of the original frame where the violation occurred.

        :param _field: The _field of this FrameViolationEntry.
        :type _field: str
        """

        self.__field = _field

    @property
    def violation(self):
        """Gets the violation of this FrameViolationEntry.

        A message describing the violation.

        :return: The violation of this FrameViolationEntry.
        :rtype: str
        """
        return self._violation

    @violation.setter
    def violation(self, violation):
        """Sets the violation of this FrameViolationEntry.

        A message describing the violation.

        :param violation: The violation of this FrameViolationEntry.
        :type violation: str
        """

        self._violation = violation
