# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDeleteAssetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_missing: bool=None, names: List[str]=None):
        """BatchDeleteAssetsRequest - a model defined in OpenAPI

        :param allow_missing: The allow_missing of this BatchDeleteAssetsRequest.
        :param names: The names of this BatchDeleteAssetsRequest.
        """
        self.openapi_types = {
            'allow_missing': bool,
            'names': List[str]
        }

        self.attribute_map = {
            'allow_missing': 'allowMissing',
            'names': 'names'
        }

        self._allow_missing = allow_missing
        self._names = names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteAssetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteAssetsRequest of this BatchDeleteAssetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_missing(self):
        """Gets the allow_missing of this BatchDeleteAssetsRequest.

        Optional. When this value is set to `true` the request is a no-op for non-existing assets. See https://google.aip.dev/135#delete-if-existing for additional details. Default value is `false`.

        :return: The allow_missing of this BatchDeleteAssetsRequest.
        :rtype: bool
        """
        return self._allow_missing

    @allow_missing.setter
    def allow_missing(self, allow_missing):
        """Sets the allow_missing of this BatchDeleteAssetsRequest.

        Optional. When this value is set to `true` the request is a no-op for non-existing assets. See https://google.aip.dev/135#delete-if-existing for additional details. Default value is `false`.

        :param allow_missing: The allow_missing of this BatchDeleteAssetsRequest.
        :type allow_missing: bool
        """

        self._allow_missing = allow_missing

    @property
    def names(self):
        """Gets the names of this BatchDeleteAssetsRequest.

        Required. The IDs of the assets to delete. A maximum of 1000 assets can be deleted in a batch. Format: projects/{project}/locations/{location}/assets/{name}.

        :return: The names of this BatchDeleteAssetsRequest.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this BatchDeleteAssetsRequest.

        Required. The IDs of the assets to delete. A maximum of 1000 assets can be deleted in a batch. Format: projects/{project}/locations/{location}/assets/{name}.

        :param names: The names of this BatchDeleteAssetsRequest.
        :type names: List[str]
        """

        self._names = names
