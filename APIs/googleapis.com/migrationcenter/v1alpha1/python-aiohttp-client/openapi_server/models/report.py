# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_summary import ReportSummary
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, name: str=None, state: str=None, summary: ReportSummary=None, type: str=None, update_time: str=None):
        """Report - a model defined in OpenAPI

        :param create_time: The create_time of this Report.
        :param description: The description of this Report.
        :param display_name: The display_name of this Report.
        :param name: The name of this Report.
        :param state: The state of this Report.
        :param summary: The summary of this Report.
        :param type: The type of this Report.
        :param update_time: The update_time of this Report.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'name': str,
            'state': str,
            'summary': ReportSummary,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name',
            'state': 'state',
            'summary': 'summary',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._name = name
        self._state = state
        self._summary = summary
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Report.

        Output only. Creation timestamp.

        :return: The create_time of this Report.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Report.

        Output only. Creation timestamp.

        :param create_time: The create_time of this Report.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Report.

        Free-text description.

        :return: The description of this Report.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Report.

        Free-text description.

        :param description: The description of this Report.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Report.

        User-friendly display name. Maximum length is 63 characters.

        :return: The display_name of this Report.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Report.

        User-friendly display name. Maximum length is 63 characters.

        :param display_name: The display_name of this Report.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this Report.

        Output only. Name of resource.

        :return: The name of this Report.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        Output only. Name of resource.

        :param name: The name of this Report.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Report.

        Report creation state.

        :return: The state of this Report.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Report.

        Report creation state.

        :param state: The state of this Report.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def summary(self):
        """Gets the summary of this Report.


        :return: The summary of this Report.
        :rtype: ReportSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Report.


        :param summary: The summary of this Report.
        :type summary: ReportSummary
        """

        self._summary = summary

    @property
    def type(self):
        """Gets the type of this Report.

        Report type.

        :return: The type of this Report.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Report.

        Report type.

        :param type: The type of this Report.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TOTAL_COST_OF_OWNERSHIP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Report.

        Output only. Last update timestamp.

        :return: The update_time of this Report.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Report.

        Output only. Last update timestamp.

        :param update_time: The update_time of this Report.
        :type update_time: str
        """

        self._update_time = update_time
