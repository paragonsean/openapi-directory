# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_performance_data import AssetPerformanceData
from openapi_server.models.insight_list import InsightList
from openapi_server.models.virtual_machine_details import VirtualMachineDetails
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_groups: List[str]=None, attributes: Dict[str, str]=None, create_time: str=None, hidden: bool=None, hide_reason: str=None, hide_time: str=None, insight_list: InsightList=None, labels: Dict[str, str]=None, name: str=None, performance_data: AssetPerformanceData=None, sources: List[str]=None, update_time: str=None, virtual_machine_details: VirtualMachineDetails=None):
        """Asset - a model defined in OpenAPI

        :param assigned_groups: The assigned_groups of this Asset.
        :param attributes: The attributes of this Asset.
        :param create_time: The create_time of this Asset.
        :param hidden: The hidden of this Asset.
        :param hide_reason: The hide_reason of this Asset.
        :param hide_time: The hide_time of this Asset.
        :param insight_list: The insight_list of this Asset.
        :param labels: The labels of this Asset.
        :param name: The name of this Asset.
        :param performance_data: The performance_data of this Asset.
        :param sources: The sources of this Asset.
        :param update_time: The update_time of this Asset.
        :param virtual_machine_details: The virtual_machine_details of this Asset.
        """
        self.openapi_types = {
            'assigned_groups': List[str],
            'attributes': Dict[str, str],
            'create_time': str,
            'hidden': bool,
            'hide_reason': str,
            'hide_time': str,
            'insight_list': InsightList,
            'labels': Dict[str, str],
            'name': str,
            'performance_data': AssetPerformanceData,
            'sources': List[str],
            'update_time': str,
            'virtual_machine_details': VirtualMachineDetails
        }

        self.attribute_map = {
            'assigned_groups': 'assignedGroups',
            'attributes': 'attributes',
            'create_time': 'createTime',
            'hidden': 'hidden',
            'hide_reason': 'hideReason',
            'hide_time': 'hideTime',
            'insight_list': 'insightList',
            'labels': 'labels',
            'name': 'name',
            'performance_data': 'performanceData',
            'sources': 'sources',
            'update_time': 'updateTime',
            'virtual_machine_details': 'virtualMachineDetails'
        }

        self._assigned_groups = assigned_groups
        self._attributes = attributes
        self._create_time = create_time
        self._hidden = hidden
        self._hide_reason = hide_reason
        self._hide_time = hide_time
        self._insight_list = insight_list
        self._labels = labels
        self._name = name
        self._performance_data = performance_data
        self._sources = sources
        self._update_time = update_time
        self._virtual_machine_details = virtual_machine_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_groups(self):
        """Gets the assigned_groups of this Asset.

        Output only. The list of groups that the asset is assigned to.

        :return: The assigned_groups of this Asset.
        :rtype: List[str]
        """
        return self._assigned_groups

    @assigned_groups.setter
    def assigned_groups(self, assigned_groups):
        """Sets the assigned_groups of this Asset.

        Output only. The list of groups that the asset is assigned to.

        :param assigned_groups: The assigned_groups of this Asset.
        :type assigned_groups: List[str]
        """

        self._assigned_groups = assigned_groups

    @property
    def attributes(self):
        """Gets the attributes of this Asset.

        Generic asset attributes.

        :return: The attributes of this Asset.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Asset.

        Generic asset attributes.

        :param attributes: The attributes of this Asset.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def create_time(self):
        """Gets the create_time of this Asset.

        Output only. The timestamp when the asset was created.

        :return: The create_time of this Asset.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Asset.

        Output only. The timestamp when the asset was created.

        :param create_time: The create_time of this Asset.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def hidden(self):
        """Gets the hidden of this Asset.

        Optional. Indicates if the asset is hidden.

        :return: The hidden of this Asset.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Asset.

        Optional. Indicates if the asset is hidden.

        :param hidden: The hidden of this Asset.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def hide_reason(self):
        """Gets the hide_reason of this Asset.

        Optional. An optional reason for marking this asset as hidden.

        :return: The hide_reason of this Asset.
        :rtype: str
        """
        return self._hide_reason

    @hide_reason.setter
    def hide_reason(self, hide_reason):
        """Sets the hide_reason of this Asset.

        Optional. An optional reason for marking this asset as hidden.

        :param hide_reason: The hide_reason of this Asset.
        :type hide_reason: str
        """

        self._hide_reason = hide_reason

    @property
    def hide_time(self):
        """Gets the hide_time of this Asset.

        Output only. The timestamp when the asset was marked as hidden.

        :return: The hide_time of this Asset.
        :rtype: str
        """
        return self._hide_time

    @hide_time.setter
    def hide_time(self, hide_time):
        """Sets the hide_time of this Asset.

        Output only. The timestamp when the asset was marked as hidden.

        :param hide_time: The hide_time of this Asset.
        :type hide_time: str
        """

        self._hide_time = hide_time

    @property
    def insight_list(self):
        """Gets the insight_list of this Asset.


        :return: The insight_list of this Asset.
        :rtype: InsightList
        """
        return self._insight_list

    @insight_list.setter
    def insight_list(self, insight_list):
        """Sets the insight_list of this Asset.


        :param insight_list: The insight_list of this Asset.
        :type insight_list: InsightList
        """

        self._insight_list = insight_list

    @property
    def labels(self):
        """Gets the labels of this Asset.

        Labels as key value pairs.

        :return: The labels of this Asset.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Asset.

        Labels as key value pairs.

        :param labels: The labels of this Asset.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Asset.

        Output only. The full name of the asset.

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.

        Output only. The full name of the asset.

        :param name: The name of this Asset.
        :type name: str
        """

        self._name = name

    @property
    def performance_data(self):
        """Gets the performance_data of this Asset.


        :return: The performance_data of this Asset.
        :rtype: AssetPerformanceData
        """
        return self._performance_data

    @performance_data.setter
    def performance_data(self, performance_data):
        """Sets the performance_data of this Asset.


        :param performance_data: The performance_data of this Asset.
        :type performance_data: AssetPerformanceData
        """

        self._performance_data = performance_data

    @property
    def sources(self):
        """Gets the sources of this Asset.

        Output only. The list of sources contributing to the asset.

        :return: The sources of this Asset.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Asset.

        Output only. The list of sources contributing to the asset.

        :param sources: The sources of this Asset.
        :type sources: List[str]
        """

        self._sources = sources

    @property
    def update_time(self):
        """Gets the update_time of this Asset.

        Output only. The timestamp when the asset was last updated.

        :return: The update_time of this Asset.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Asset.

        Output only. The timestamp when the asset was last updated.

        :param update_time: The update_time of this Asset.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def virtual_machine_details(self):
        """Gets the virtual_machine_details of this Asset.


        :return: The virtual_machine_details of this Asset.
        :rtype: VirtualMachineDetails
        """
        return self._virtual_machine_details

    @virtual_machine_details.setter
    def virtual_machine_details(self, virtual_machine_details):
        """Sets the virtual_machine_details of this Asset.


        :param virtual_machine_details: The virtual_machine_details of this Asset.
        :type virtual_machine_details: VirtualMachineDetails
        """

        self._virtual_machine_details = virtual_machine_details
