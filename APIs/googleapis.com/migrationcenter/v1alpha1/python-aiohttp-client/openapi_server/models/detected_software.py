# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectedSoftware(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, software_family: str=None, software_name: str=None):
        """DetectedSoftware - a model defined in OpenAPI

        :param software_family: The software_family of this DetectedSoftware.
        :param software_name: The software_name of this DetectedSoftware.
        """
        self.openapi_types = {
            'software_family': str,
            'software_name': str
        }

        self.attribute_map = {
            'software_family': 'softwareFamily',
            'software_name': 'softwareName'
        }

        self._software_family = software_family
        self._software_name = software_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedSoftware':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedSoftware of this DetectedSoftware.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def software_family(self):
        """Gets the software_family of this DetectedSoftware.

        Output only. Software family of the detected software, e.g. Database, SAP family.

        :return: The software_family of this DetectedSoftware.
        :rtype: str
        """
        return self._software_family

    @software_family.setter
    def software_family(self, software_family):
        """Sets the software_family of this DetectedSoftware.

        Output only. Software family of the detected software, e.g. Database, SAP family.

        :param software_family: The software_family of this DetectedSoftware.
        :type software_family: str
        """

        self._software_family = software_family

    @property
    def software_name(self):
        """Gets the software_name of this DetectedSoftware.

        Output only. Software's name.

        :return: The software_name of this DetectedSoftware.
        :rtype: str
        """
        return self._software_name

    @software_name.setter
    def software_name(self, software_name):
        """Sets the software_name of this DetectedSoftware.

        Output only. Software's name.

        :param software_name: The software_name of this DetectedSoftware.
        :type software_name: str
        """

        self._software_name = software_name
