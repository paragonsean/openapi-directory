# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_os_details import GuestOsDetails
from openapi_server.models.platform_details import PlatformDetails
from openapi_server.models.virtual_machine_architecture_details import VirtualMachineArchitectureDetails
from openapi_server.models.virtual_machine_disk_details import VirtualMachineDiskDetails
from openapi_server.models.virtual_machine_network_details import VirtualMachineNetworkDetails
from openapi_server import util


class VirtualMachineDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, core_count: int=None, create_time: str=None, guest_os: GuestOsDetails=None, memory_mb: int=None, os_family: str=None, os_name: str=None, os_version: str=None, platform: PlatformDetails=None, power_state: str=None, vcenter_folder: str=None, vcenter_url: str=None, vcenter_vm_id: str=None, vm_architecture: VirtualMachineArchitectureDetails=None, vm_disks: VirtualMachineDiskDetails=None, vm_name: str=None, vm_network: VirtualMachineNetworkDetails=None, vm_uuid: str=None):
        """VirtualMachineDetails - a model defined in OpenAPI

        :param core_count: The core_count of this VirtualMachineDetails.
        :param create_time: The create_time of this VirtualMachineDetails.
        :param guest_os: The guest_os of this VirtualMachineDetails.
        :param memory_mb: The memory_mb of this VirtualMachineDetails.
        :param os_family: The os_family of this VirtualMachineDetails.
        :param os_name: The os_name of this VirtualMachineDetails.
        :param os_version: The os_version of this VirtualMachineDetails.
        :param platform: The platform of this VirtualMachineDetails.
        :param power_state: The power_state of this VirtualMachineDetails.
        :param vcenter_folder: The vcenter_folder of this VirtualMachineDetails.
        :param vcenter_url: The vcenter_url of this VirtualMachineDetails.
        :param vcenter_vm_id: The vcenter_vm_id of this VirtualMachineDetails.
        :param vm_architecture: The vm_architecture of this VirtualMachineDetails.
        :param vm_disks: The vm_disks of this VirtualMachineDetails.
        :param vm_name: The vm_name of this VirtualMachineDetails.
        :param vm_network: The vm_network of this VirtualMachineDetails.
        :param vm_uuid: The vm_uuid of this VirtualMachineDetails.
        """
        self.openapi_types = {
            'core_count': int,
            'create_time': str,
            'guest_os': GuestOsDetails,
            'memory_mb': int,
            'os_family': str,
            'os_name': str,
            'os_version': str,
            'platform': PlatformDetails,
            'power_state': str,
            'vcenter_folder': str,
            'vcenter_url': str,
            'vcenter_vm_id': str,
            'vm_architecture': VirtualMachineArchitectureDetails,
            'vm_disks': VirtualMachineDiskDetails,
            'vm_name': str,
            'vm_network': VirtualMachineNetworkDetails,
            'vm_uuid': str
        }

        self.attribute_map = {
            'core_count': 'coreCount',
            'create_time': 'createTime',
            'guest_os': 'guestOs',
            'memory_mb': 'memoryMb',
            'os_family': 'osFamily',
            'os_name': 'osName',
            'os_version': 'osVersion',
            'platform': 'platform',
            'power_state': 'powerState',
            'vcenter_folder': 'vcenterFolder',
            'vcenter_url': 'vcenterUrl',
            'vcenter_vm_id': 'vcenterVmId',
            'vm_architecture': 'vmArchitecture',
            'vm_disks': 'vmDisks',
            'vm_name': 'vmName',
            'vm_network': 'vmNetwork',
            'vm_uuid': 'vmUuid'
        }

        self._core_count = core_count
        self._create_time = create_time
        self._guest_os = guest_os
        self._memory_mb = memory_mb
        self._os_family = os_family
        self._os_name = os_name
        self._os_version = os_version
        self._platform = platform
        self._power_state = power_state
        self._vcenter_folder = vcenter_folder
        self._vcenter_url = vcenter_url
        self._vcenter_vm_id = vcenter_vm_id
        self._vm_architecture = vm_architecture
        self._vm_disks = vm_disks
        self._vm_name = vm_name
        self._vm_network = vm_network
        self._vm_uuid = vm_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineDetails of this VirtualMachineDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def core_count(self):
        """Gets the core_count of this VirtualMachineDetails.

        Number of CPU cores in the VirtualMachine. Must be non-negative.

        :return: The core_count of this VirtualMachineDetails.
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count):
        """Sets the core_count of this VirtualMachineDetails.

        Number of CPU cores in the VirtualMachine. Must be non-negative.

        :param core_count: The core_count of this VirtualMachineDetails.
        :type core_count: int
        """

        self._core_count = core_count

    @property
    def create_time(self):
        """Gets the create_time of this VirtualMachineDetails.

        VM creation timestamp.

        :return: The create_time of this VirtualMachineDetails.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this VirtualMachineDetails.

        VM creation timestamp.

        :param create_time: The create_time of this VirtualMachineDetails.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def guest_os(self):
        """Gets the guest_os of this VirtualMachineDetails.


        :return: The guest_os of this VirtualMachineDetails.
        :rtype: GuestOsDetails
        """
        return self._guest_os

    @guest_os.setter
    def guest_os(self, guest_os):
        """Sets the guest_os of this VirtualMachineDetails.


        :param guest_os: The guest_os of this VirtualMachineDetails.
        :type guest_os: GuestOsDetails
        """

        self._guest_os = guest_os

    @property
    def memory_mb(self):
        """Gets the memory_mb of this VirtualMachineDetails.

        The amount of memory in the VirtualMachine. Must be non-negative.

        :return: The memory_mb of this VirtualMachineDetails.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this VirtualMachineDetails.

        The amount of memory in the VirtualMachine. Must be non-negative.

        :param memory_mb: The memory_mb of this VirtualMachineDetails.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def os_family(self):
        """Gets the os_family of this VirtualMachineDetails.

        What family the OS belong to, if known.

        :return: The os_family of this VirtualMachineDetails.
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this VirtualMachineDetails.

        What family the OS belong to, if known.

        :param os_family: The os_family of this VirtualMachineDetails.
        :type os_family: str
        """
        allowed_values = ["OS_FAMILY_UNKNOWN", "OS_FAMILY_WINDOWS", "OS_FAMILY_LINUX", "OS_FAMILY_UNIX"]  # noqa: E501
        if os_family not in allowed_values:
            raise ValueError(
                "Invalid value for `os_family` ({0}), must be one of {1}"
                .format(os_family, allowed_values)
            )

        self._os_family = os_family

    @property
    def os_name(self):
        """Gets the os_name of this VirtualMachineDetails.

        The name of the operating system running on the VirtualMachine.

        :return: The os_name of this VirtualMachineDetails.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this VirtualMachineDetails.

        The name of the operating system running on the VirtualMachine.

        :param os_name: The os_name of this VirtualMachineDetails.
        :type os_name: str
        """

        self._os_name = os_name

    @property
    def os_version(self):
        """Gets the os_version of this VirtualMachineDetails.

        The version of the operating system running on the virtual machine.

        :return: The os_version of this VirtualMachineDetails.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this VirtualMachineDetails.

        The version of the operating system running on the virtual machine.

        :param os_version: The os_version of this VirtualMachineDetails.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def platform(self):
        """Gets the platform of this VirtualMachineDetails.


        :return: The platform of this VirtualMachineDetails.
        :rtype: PlatformDetails
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VirtualMachineDetails.


        :param platform: The platform of this VirtualMachineDetails.
        :type platform: PlatformDetails
        """

        self._platform = platform

    @property
    def power_state(self):
        """Gets the power_state of this VirtualMachineDetails.

        Power state of VM (poweredOn or poweredOff).

        :return: The power_state of this VirtualMachineDetails.
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this VirtualMachineDetails.

        Power state of VM (poweredOn or poweredOff).

        :param power_state: The power_state of this VirtualMachineDetails.
        :type power_state: str
        """

        self._power_state = power_state

    @property
    def vcenter_folder(self):
        """Gets the vcenter_folder of this VirtualMachineDetails.

        Folder name in vCenter where asset resides.

        :return: The vcenter_folder of this VirtualMachineDetails.
        :rtype: str
        """
        return self._vcenter_folder

    @vcenter_folder.setter
    def vcenter_folder(self, vcenter_folder):
        """Sets the vcenter_folder of this VirtualMachineDetails.

        Folder name in vCenter where asset resides.

        :param vcenter_folder: The vcenter_folder of this VirtualMachineDetails.
        :type vcenter_folder: str
        """

        self._vcenter_folder = vcenter_folder

    @property
    def vcenter_url(self):
        """Gets the vcenter_url of this VirtualMachineDetails.

        vCenter URL used in collection.

        :return: The vcenter_url of this VirtualMachineDetails.
        :rtype: str
        """
        return self._vcenter_url

    @vcenter_url.setter
    def vcenter_url(self, vcenter_url):
        """Sets the vcenter_url of this VirtualMachineDetails.

        vCenter URL used in collection.

        :param vcenter_url: The vcenter_url of this VirtualMachineDetails.
        :type vcenter_url: str
        """

        self._vcenter_url = vcenter_url

    @property
    def vcenter_vm_id(self):
        """Gets the vcenter_vm_id of this VirtualMachineDetails.

        vCenter VM ID.

        :return: The vcenter_vm_id of this VirtualMachineDetails.
        :rtype: str
        """
        return self._vcenter_vm_id

    @vcenter_vm_id.setter
    def vcenter_vm_id(self, vcenter_vm_id):
        """Sets the vcenter_vm_id of this VirtualMachineDetails.

        vCenter VM ID.

        :param vcenter_vm_id: The vcenter_vm_id of this VirtualMachineDetails.
        :type vcenter_vm_id: str
        """

        self._vcenter_vm_id = vcenter_vm_id

    @property
    def vm_architecture(self):
        """Gets the vm_architecture of this VirtualMachineDetails.


        :return: The vm_architecture of this VirtualMachineDetails.
        :rtype: VirtualMachineArchitectureDetails
        """
        return self._vm_architecture

    @vm_architecture.setter
    def vm_architecture(self, vm_architecture):
        """Sets the vm_architecture of this VirtualMachineDetails.


        :param vm_architecture: The vm_architecture of this VirtualMachineDetails.
        :type vm_architecture: VirtualMachineArchitectureDetails
        """

        self._vm_architecture = vm_architecture

    @property
    def vm_disks(self):
        """Gets the vm_disks of this VirtualMachineDetails.


        :return: The vm_disks of this VirtualMachineDetails.
        :rtype: VirtualMachineDiskDetails
        """
        return self._vm_disks

    @vm_disks.setter
    def vm_disks(self, vm_disks):
        """Sets the vm_disks of this VirtualMachineDetails.


        :param vm_disks: The vm_disks of this VirtualMachineDetails.
        :type vm_disks: VirtualMachineDiskDetails
        """

        self._vm_disks = vm_disks

    @property
    def vm_name(self):
        """Gets the vm_name of this VirtualMachineDetails.

        Virtual Machine display name.

        :return: The vm_name of this VirtualMachineDetails.
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this VirtualMachineDetails.

        Virtual Machine display name.

        :param vm_name: The vm_name of this VirtualMachineDetails.
        :type vm_name: str
        """

        self._vm_name = vm_name

    @property
    def vm_network(self):
        """Gets the vm_network of this VirtualMachineDetails.


        :return: The vm_network of this VirtualMachineDetails.
        :rtype: VirtualMachineNetworkDetails
        """
        return self._vm_network

    @vm_network.setter
    def vm_network(self, vm_network):
        """Sets the vm_network of this VirtualMachineDetails.


        :param vm_network: The vm_network of this VirtualMachineDetails.
        :type vm_network: VirtualMachineNetworkDetails
        """

        self._vm_network = vm_network

    @property
    def vm_uuid(self):
        """Gets the vm_uuid of this VirtualMachineDetails.

        Virtual Machine unique identifier.

        :return: The vm_uuid of this VirtualMachineDetails.
        :rtype: str
        """
        return self._vm_uuid

    @vm_uuid.setter
    def vm_uuid(self, vm_uuid):
        """Sets the vm_uuid of this VirtualMachineDetails.

        Virtual Machine unique identifier.

        :param vm_uuid: The vm_uuid of this VirtualMachineDetails.
        :type vm_uuid: str
        """

        self._vm_uuid = vm_uuid
