# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunningProcess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, cmdline: str=None, exe_path: str=None, pid: str=None, user: str=None):
        """RunningProcess - a model defined in OpenAPI

        :param attributes: The attributes of this RunningProcess.
        :param cmdline: The cmdline of this RunningProcess.
        :param exe_path: The exe_path of this RunningProcess.
        :param pid: The pid of this RunningProcess.
        :param user: The user of this RunningProcess.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'cmdline': str,
            'exe_path': str,
            'pid': str,
            'user': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'cmdline': 'cmdline',
            'exe_path': 'exePath',
            'pid': 'pid',
            'user': 'user'
        }

        self._attributes = attributes
        self._cmdline = cmdline
        self._exe_path = exe_path
        self._pid = pid
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunningProcess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunningProcess of this RunningProcess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this RunningProcess.

        Process extended attributes.

        :return: The attributes of this RunningProcess.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RunningProcess.

        Process extended attributes.

        :param attributes: The attributes of this RunningProcess.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def cmdline(self):
        """Gets the cmdline of this RunningProcess.

        Process full command line.

        :return: The cmdline of this RunningProcess.
        :rtype: str
        """
        return self._cmdline

    @cmdline.setter
    def cmdline(self, cmdline):
        """Sets the cmdline of this RunningProcess.

        Process full command line.

        :param cmdline: The cmdline of this RunningProcess.
        :type cmdline: str
        """

        self._cmdline = cmdline

    @property
    def exe_path(self):
        """Gets the exe_path of this RunningProcess.

        Process binary path.

        :return: The exe_path of this RunningProcess.
        :rtype: str
        """
        return self._exe_path

    @exe_path.setter
    def exe_path(self, exe_path):
        """Sets the exe_path of this RunningProcess.

        Process binary path.

        :param exe_path: The exe_path of this RunningProcess.
        :type exe_path: str
        """

        self._exe_path = exe_path

    @property
    def pid(self):
        """Gets the pid of this RunningProcess.

        Process ID.

        :return: The pid of this RunningProcess.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this RunningProcess.

        Process ID.

        :param pid: The pid of this RunningProcess.
        :type pid: str
        """

        self._pid = pid

    @property
    def user(self):
        """Gets the user of this RunningProcess.

        User running the process.

        :return: The user of this RunningProcess.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RunningProcess.

        User running the process.

        :param user: The user of this RunningProcess.
        :type user: str
        """

        self._user = user
