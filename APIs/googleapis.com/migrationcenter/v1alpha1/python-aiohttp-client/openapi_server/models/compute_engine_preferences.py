# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.machine_preferences import MachinePreferences
from openapi_server import util


class ComputeEnginePreferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_type: str=None, machine_preferences: MachinePreferences=None, persistent_disk_type: str=None):
        """ComputeEnginePreferences - a model defined in OpenAPI

        :param license_type: The license_type of this ComputeEnginePreferences.
        :param machine_preferences: The machine_preferences of this ComputeEnginePreferences.
        :param persistent_disk_type: The persistent_disk_type of this ComputeEnginePreferences.
        """
        self.openapi_types = {
            'license_type': str,
            'machine_preferences': MachinePreferences,
            'persistent_disk_type': str
        }

        self.attribute_map = {
            'license_type': 'licenseType',
            'machine_preferences': 'machinePreferences',
            'persistent_disk_type': 'persistentDiskType'
        }

        self._license_type = license_type
        self._machine_preferences = machine_preferences
        self._persistent_disk_type = persistent_disk_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeEnginePreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeEnginePreferences of this ComputeEnginePreferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_type(self):
        """Gets the license_type of this ComputeEnginePreferences.

        License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.

        :return: The license_type of this ComputeEnginePreferences.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ComputeEnginePreferences.

        License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.

        :param license_type: The license_type of this ComputeEnginePreferences.
        :type license_type: str
        """
        allowed_values = ["LICENSE_TYPE_UNSPECIFIED", "LICENSE_TYPE_DEFAULT", "LICENSE_TYPE_BRING_YOUR_OWN_LICENSE"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def machine_preferences(self):
        """Gets the machine_preferences of this ComputeEnginePreferences.


        :return: The machine_preferences of this ComputeEnginePreferences.
        :rtype: MachinePreferences
        """
        return self._machine_preferences

    @machine_preferences.setter
    def machine_preferences(self, machine_preferences):
        """Sets the machine_preferences of this ComputeEnginePreferences.


        :param machine_preferences: The machine_preferences of this ComputeEnginePreferences.
        :type machine_preferences: MachinePreferences
        """

        self._machine_preferences = machine_preferences

    @property
    def persistent_disk_type(self):
        """Gets the persistent_disk_type of this ComputeEnginePreferences.

        Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.

        :return: The persistent_disk_type of this ComputeEnginePreferences.
        :rtype: str
        """
        return self._persistent_disk_type

    @persistent_disk_type.setter
    def persistent_disk_type(self, persistent_disk_type):
        """Sets the persistent_disk_type of this ComputeEnginePreferences.

        Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.

        :param persistent_disk_type: The persistent_disk_type of this ComputeEnginePreferences.
        :type persistent_disk_type: str
        """
        allowed_values = ["PERSISTENT_DISK_TYPE_UNSPECIFIED", "PERSISTENT_DISK_TYPE_STANDARD", "PERSISTENT_DISK_TYPE_BALANCED", "PERSISTENT_DISK_TYPE_SSD"]  # noqa: E501
        if persistent_disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `persistent_disk_type` ({0}), must be one of {1}"
                .format(persistent_disk_type, allowed_values)
            )

        self._persistent_disk_type = persistent_disk_type
