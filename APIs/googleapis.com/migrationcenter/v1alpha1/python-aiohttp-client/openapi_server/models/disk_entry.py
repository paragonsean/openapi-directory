# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_partition_list import DiskPartitionList
from openapi_server.models.vmware_disk_config import VmwareDiskConfig
from openapi_server import util


class DiskEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_label: str=None, disk_label_type: str=None, hw_address: str=None, interface_type: str=None, partitions: DiskPartitionList=None, status: str=None, total_capacity_bytes: str=None, total_free_bytes: str=None, vmware_config: VmwareDiskConfig=None):
        """DiskEntry - a model defined in OpenAPI

        :param disk_label: The disk_label of this DiskEntry.
        :param disk_label_type: The disk_label_type of this DiskEntry.
        :param hw_address: The hw_address of this DiskEntry.
        :param interface_type: The interface_type of this DiskEntry.
        :param partitions: The partitions of this DiskEntry.
        :param status: The status of this DiskEntry.
        :param total_capacity_bytes: The total_capacity_bytes of this DiskEntry.
        :param total_free_bytes: The total_free_bytes of this DiskEntry.
        :param vmware_config: The vmware_config of this DiskEntry.
        """
        self.openapi_types = {
            'disk_label': str,
            'disk_label_type': str,
            'hw_address': str,
            'interface_type': str,
            'partitions': DiskPartitionList,
            'status': str,
            'total_capacity_bytes': str,
            'total_free_bytes': str,
            'vmware_config': VmwareDiskConfig
        }

        self.attribute_map = {
            'disk_label': 'diskLabel',
            'disk_label_type': 'diskLabelType',
            'hw_address': 'hwAddress',
            'interface_type': 'interfaceType',
            'partitions': 'partitions',
            'status': 'status',
            'total_capacity_bytes': 'totalCapacityBytes',
            'total_free_bytes': 'totalFreeBytes',
            'vmware_config': 'vmwareConfig'
        }

        self._disk_label = disk_label
        self._disk_label_type = disk_label_type
        self._hw_address = hw_address
        self._interface_type = interface_type
        self._partitions = partitions
        self._status = status
        self._total_capacity_bytes = total_capacity_bytes
        self._total_free_bytes = total_free_bytes
        self._vmware_config = vmware_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskEntry of this DiskEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_label(self):
        """Gets the disk_label of this DiskEntry.

        Disk label.

        :return: The disk_label of this DiskEntry.
        :rtype: str
        """
        return self._disk_label

    @disk_label.setter
    def disk_label(self, disk_label):
        """Sets the disk_label of this DiskEntry.

        Disk label.

        :param disk_label: The disk_label of this DiskEntry.
        :type disk_label: str
        """

        self._disk_label = disk_label

    @property
    def disk_label_type(self):
        """Gets the disk_label_type of this DiskEntry.

        Disk label type (e.g. BIOS/GPT)

        :return: The disk_label_type of this DiskEntry.
        :rtype: str
        """
        return self._disk_label_type

    @disk_label_type.setter
    def disk_label_type(self, disk_label_type):
        """Sets the disk_label_type of this DiskEntry.

        Disk label type (e.g. BIOS/GPT)

        :param disk_label_type: The disk_label_type of this DiskEntry.
        :type disk_label_type: str
        """

        self._disk_label_type = disk_label_type

    @property
    def hw_address(self):
        """Gets the hw_address of this DiskEntry.

        Disk hardware address (e.g. 0:1 for SCSI).

        :return: The hw_address of this DiskEntry.
        :rtype: str
        """
        return self._hw_address

    @hw_address.setter
    def hw_address(self, hw_address):
        """Sets the hw_address of this DiskEntry.

        Disk hardware address (e.g. 0:1 for SCSI).

        :param hw_address: The hw_address of this DiskEntry.
        :type hw_address: str
        """

        self._hw_address = hw_address

    @property
    def interface_type(self):
        """Gets the interface_type of this DiskEntry.

        Disks interface type (e.g. SATA/SCSI)

        :return: The interface_type of this DiskEntry.
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this DiskEntry.

        Disks interface type (e.g. SATA/SCSI)

        :param interface_type: The interface_type of this DiskEntry.
        :type interface_type: str
        """

        self._interface_type = interface_type

    @property
    def partitions(self):
        """Gets the partitions of this DiskEntry.


        :return: The partitions of this DiskEntry.
        :rtype: DiskPartitionList
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this DiskEntry.


        :param partitions: The partitions of this DiskEntry.
        :type partitions: DiskPartitionList
        """

        self._partitions = partitions

    @property
    def status(self):
        """Gets the status of this DiskEntry.

        Disk status (e.g. online).

        :return: The status of this DiskEntry.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DiskEntry.

        Disk status (e.g. online).

        :param status: The status of this DiskEntry.
        :type status: str
        """

        self._status = status

    @property
    def total_capacity_bytes(self):
        """Gets the total_capacity_bytes of this DiskEntry.

        Disk capacity.

        :return: The total_capacity_bytes of this DiskEntry.
        :rtype: str
        """
        return self._total_capacity_bytes

    @total_capacity_bytes.setter
    def total_capacity_bytes(self, total_capacity_bytes):
        """Sets the total_capacity_bytes of this DiskEntry.

        Disk capacity.

        :param total_capacity_bytes: The total_capacity_bytes of this DiskEntry.
        :type total_capacity_bytes: str
        """

        self._total_capacity_bytes = total_capacity_bytes

    @property
    def total_free_bytes(self):
        """Gets the total_free_bytes of this DiskEntry.

        Disk free space.

        :return: The total_free_bytes of this DiskEntry.
        :rtype: str
        """
        return self._total_free_bytes

    @total_free_bytes.setter
    def total_free_bytes(self, total_free_bytes):
        """Sets the total_free_bytes of this DiskEntry.

        Disk free space.

        :param total_free_bytes: The total_free_bytes of this DiskEntry.
        :type total_free_bytes: str
        """

        self._total_free_bytes = total_free_bytes

    @property
    def vmware_config(self):
        """Gets the vmware_config of this DiskEntry.


        :return: The vmware_config of this DiskEntry.
        :rtype: VmwareDiskConfig
        """
        return self._vmware_config

    @vmware_config.setter
    def vmware_config(self, vmware_config):
        """Sets the vmware_config of this DiskEntry.


        :param vmware_config: The vmware_config of this DiskEntry.
        :type vmware_config: VmwareDiskConfig
        """

        self._vmware_config = vmware_config
