# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_list import AssetList
from openapi_server import util


class RemoveAssetsFromGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_missing: bool=None, assets: AssetList=None, request_id: str=None):
        """RemoveAssetsFromGroupRequest - a model defined in OpenAPI

        :param allow_missing: The allow_missing of this RemoveAssetsFromGroupRequest.
        :param assets: The assets of this RemoveAssetsFromGroupRequest.
        :param request_id: The request_id of this RemoveAssetsFromGroupRequest.
        """
        self.openapi_types = {
            'allow_missing': bool,
            'assets': AssetList,
            'request_id': str
        }

        self.attribute_map = {
            'allow_missing': 'allowMissing',
            'assets': 'assets',
            'request_id': 'requestId'
        }

        self._allow_missing = allow_missing
        self._assets = assets
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveAssetsFromGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveAssetsFromGroupRequest of this RemoveAssetsFromGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_missing(self):
        """Gets the allow_missing of this RemoveAssetsFromGroupRequest.

        Optional. When this value is set to `false` and one of the given assets is not an existing member of the group, the operation fails with a `Not Found` error. When set to `true` this situation is silently ignored by the server. Default value is `false`.

        :return: The allow_missing of this RemoveAssetsFromGroupRequest.
        :rtype: bool
        """
        return self._allow_missing

    @allow_missing.setter
    def allow_missing(self, allow_missing):
        """Sets the allow_missing of this RemoveAssetsFromGroupRequest.

        Optional. When this value is set to `false` and one of the given assets is not an existing member of the group, the operation fails with a `Not Found` error. When set to `true` this situation is silently ignored by the server. Default value is `false`.

        :param allow_missing: The allow_missing of this RemoveAssetsFromGroupRequest.
        :type allow_missing: bool
        """

        self._allow_missing = allow_missing

    @property
    def assets(self):
        """Gets the assets of this RemoveAssetsFromGroupRequest.


        :return: The assets of this RemoveAssetsFromGroupRequest.
        :rtype: AssetList
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this RemoveAssetsFromGroupRequest.


        :param assets: The assets of this RemoveAssetsFromGroupRequest.
        :type assets: AssetList
        """

        self._assets = assets

    @property
    def request_id(self):
        """Gets the request_id of this RemoveAssetsFromGroupRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this RemoveAssetsFromGroupRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RemoveAssetsFromGroupRequest.

        Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this RemoveAssetsFromGroupRequest.
        :type request_id: str
        """

        self._request_id = request_id
