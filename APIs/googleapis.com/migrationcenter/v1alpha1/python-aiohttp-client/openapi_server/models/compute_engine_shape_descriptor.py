# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_storage_descriptor import ComputeStorageDescriptor
from openapi_server import util


class ComputeEngineShapeDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logical_core_count: int=None, machine_type: str=None, memory_mb: int=None, physical_core_count: int=None, series: str=None, storage: List[ComputeStorageDescriptor]=None):
        """ComputeEngineShapeDescriptor - a model defined in OpenAPI

        :param logical_core_count: The logical_core_count of this ComputeEngineShapeDescriptor.
        :param machine_type: The machine_type of this ComputeEngineShapeDescriptor.
        :param memory_mb: The memory_mb of this ComputeEngineShapeDescriptor.
        :param physical_core_count: The physical_core_count of this ComputeEngineShapeDescriptor.
        :param series: The series of this ComputeEngineShapeDescriptor.
        :param storage: The storage of this ComputeEngineShapeDescriptor.
        """
        self.openapi_types = {
            'logical_core_count': int,
            'machine_type': str,
            'memory_mb': int,
            'physical_core_count': int,
            'series': str,
            'storage': List[ComputeStorageDescriptor]
        }

        self.attribute_map = {
            'logical_core_count': 'logicalCoreCount',
            'machine_type': 'machineType',
            'memory_mb': 'memoryMb',
            'physical_core_count': 'physicalCoreCount',
            'series': 'series',
            'storage': 'storage'
        }

        self._logical_core_count = logical_core_count
        self._machine_type = machine_type
        self._memory_mb = memory_mb
        self._physical_core_count = physical_core_count
        self._series = series
        self._storage = storage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeEngineShapeDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeEngineShapeDescriptor of this ComputeEngineShapeDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logical_core_count(self):
        """Gets the logical_core_count of this ComputeEngineShapeDescriptor.

        Number of logical cores.

        :return: The logical_core_count of this ComputeEngineShapeDescriptor.
        :rtype: int
        """
        return self._logical_core_count

    @logical_core_count.setter
    def logical_core_count(self, logical_core_count):
        """Sets the logical_core_count of this ComputeEngineShapeDescriptor.

        Number of logical cores.

        :param logical_core_count: The logical_core_count of this ComputeEngineShapeDescriptor.
        :type logical_core_count: int
        """

        self._logical_core_count = logical_core_count

    @property
    def machine_type(self):
        """Gets the machine_type of this ComputeEngineShapeDescriptor.

        Compute Engine machine type.

        :return: The machine_type of this ComputeEngineShapeDescriptor.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this ComputeEngineShapeDescriptor.

        Compute Engine machine type.

        :param machine_type: The machine_type of this ComputeEngineShapeDescriptor.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def memory_mb(self):
        """Gets the memory_mb of this ComputeEngineShapeDescriptor.

        Memory in mebibytes.

        :return: The memory_mb of this ComputeEngineShapeDescriptor.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this ComputeEngineShapeDescriptor.

        Memory in mebibytes.

        :param memory_mb: The memory_mb of this ComputeEngineShapeDescriptor.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def physical_core_count(self):
        """Gets the physical_core_count of this ComputeEngineShapeDescriptor.

        Number of physical cores.

        :return: The physical_core_count of this ComputeEngineShapeDescriptor.
        :rtype: int
        """
        return self._physical_core_count

    @physical_core_count.setter
    def physical_core_count(self, physical_core_count):
        """Sets the physical_core_count of this ComputeEngineShapeDescriptor.

        Number of physical cores.

        :param physical_core_count: The physical_core_count of this ComputeEngineShapeDescriptor.
        :type physical_core_count: int
        """

        self._physical_core_count = physical_core_count

    @property
    def series(self):
        """Gets the series of this ComputeEngineShapeDescriptor.

        Compute Engine machine series.

        :return: The series of this ComputeEngineShapeDescriptor.
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this ComputeEngineShapeDescriptor.

        Compute Engine machine series.

        :param series: The series of this ComputeEngineShapeDescriptor.
        :type series: str
        """

        self._series = series

    @property
    def storage(self):
        """Gets the storage of this ComputeEngineShapeDescriptor.

        Compute Engine storage. Never empty.

        :return: The storage of this ComputeEngineShapeDescriptor.
        :rtype: List[ComputeStorageDescriptor]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ComputeEngineShapeDescriptor.

        Compute Engine storage. Never empty.

        :param storage: The storage of this ComputeEngineShapeDescriptor.
        :type storage: List[ComputeStorageDescriptor]
        """

        self._storage = storage
