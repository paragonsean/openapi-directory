/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadFileInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadFileInfo::OAIUploadFileInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadFileInfo::OAIUploadFileInfo() {
    this->initializeModel();
}

OAIUploadFileInfo::~OAIUploadFileInfo() {}

void OAIUploadFileInfo::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_signed_uri_isSet = false;
    m_signed_uri_isValid = false;

    m_uri_expiration_time_isSet = false;
    m_uri_expiration_time_isValid = false;
}

void OAIUploadFileInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadFileInfo::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_signed_uri_isValid = ::OpenAPI::fromJsonValue(m_signed_uri, json[QString("signedUri")]);
    m_signed_uri_isSet = !json[QString("signedUri")].isNull() && m_signed_uri_isValid;

    m_uri_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_uri_expiration_time, json[QString("uriExpirationTime")]);
    m_uri_expiration_time_isSet = !json[QString("uriExpirationTime")].isNull() && m_uri_expiration_time_isValid;
}

QString OAIUploadFileInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadFileInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_signed_uri_isSet) {
        obj.insert(QString("signedUri"), ::OpenAPI::toJsonValue(m_signed_uri));
    }
    if (m_uri_expiration_time_isSet) {
        obj.insert(QString("uriExpirationTime"), ::OpenAPI::toJsonValue(m_uri_expiration_time));
    }
    return obj;
}

QMap<QString, QString> OAIUploadFileInfo::getHeaders() const {
    return m_headers;
}
void OAIUploadFileInfo::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIUploadFileInfo::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIUploadFileInfo::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIUploadFileInfo::getSignedUri() const {
    return m_signed_uri;
}
void OAIUploadFileInfo::setSignedUri(const QString &signed_uri) {
    m_signed_uri = signed_uri;
    m_signed_uri_isSet = true;
}

bool OAIUploadFileInfo::is_signed_uri_Set() const{
    return m_signed_uri_isSet;
}

bool OAIUploadFileInfo::is_signed_uri_Valid() const{
    return m_signed_uri_isValid;
}

QString OAIUploadFileInfo::getUriExpirationTime() const {
    return m_uri_expiration_time;
}
void OAIUploadFileInfo::setUriExpirationTime(const QString &uri_expiration_time) {
    m_uri_expiration_time = uri_expiration_time;
    m_uri_expiration_time_isSet = true;
}

bool OAIUploadFileInfo::is_uri_expiration_time_Set() const{
    return m_uri_expiration_time_isSet;
}

bool OAIUploadFileInfo::is_uri_expiration_time_Valid() const{
    return m_uri_expiration_time_isValid;
}

bool OAIUploadFileInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadFileInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
