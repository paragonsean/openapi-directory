/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileValidationReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileValidationReport::OAIFileValidationReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileValidationReport::OAIFileValidationReport() {
    this->initializeModel();
}

OAIFileValidationReport::~OAIFileValidationReport() {}

void OAIFileValidationReport::initializeModel() {

    m_file_errors_isSet = false;
    m_file_errors_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_partial_report_isSet = false;
    m_partial_report_isValid = false;

    m_row_errors_isSet = false;
    m_row_errors_isValid = false;
}

void OAIFileValidationReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileValidationReport::fromJsonObject(QJsonObject json) {

    m_file_errors_isValid = ::OpenAPI::fromJsonValue(m_file_errors, json[QString("fileErrors")]);
    m_file_errors_isSet = !json[QString("fileErrors")].isNull() && m_file_errors_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_partial_report_isValid = ::OpenAPI::fromJsonValue(m_partial_report, json[QString("partialReport")]);
    m_partial_report_isSet = !json[QString("partialReport")].isNull() && m_partial_report_isValid;

    m_row_errors_isValid = ::OpenAPI::fromJsonValue(m_row_errors, json[QString("rowErrors")]);
    m_row_errors_isSet = !json[QString("rowErrors")].isNull() && m_row_errors_isValid;
}

QString OAIFileValidationReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileValidationReport::asJsonObject() const {
    QJsonObject obj;
    if (m_file_errors.size() > 0) {
        obj.insert(QString("fileErrors"), ::OpenAPI::toJsonValue(m_file_errors));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_partial_report_isSet) {
        obj.insert(QString("partialReport"), ::OpenAPI::toJsonValue(m_partial_report));
    }
    if (m_row_errors.size() > 0) {
        obj.insert(QString("rowErrors"), ::OpenAPI::toJsonValue(m_row_errors));
    }
    return obj;
}

QList<OAIImportError> OAIFileValidationReport::getFileErrors() const {
    return m_file_errors;
}
void OAIFileValidationReport::setFileErrors(const QList<OAIImportError> &file_errors) {
    m_file_errors = file_errors;
    m_file_errors_isSet = true;
}

bool OAIFileValidationReport::is_file_errors_Set() const{
    return m_file_errors_isSet;
}

bool OAIFileValidationReport::is_file_errors_Valid() const{
    return m_file_errors_isValid;
}

QString OAIFileValidationReport::getFileName() const {
    return m_file_name;
}
void OAIFileValidationReport::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFileValidationReport::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFileValidationReport::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAIFileValidationReport::isPartialReport() const {
    return m_partial_report;
}
void OAIFileValidationReport::setPartialReport(const bool &partial_report) {
    m_partial_report = partial_report;
    m_partial_report_isSet = true;
}

bool OAIFileValidationReport::is_partial_report_Set() const{
    return m_partial_report_isSet;
}

bool OAIFileValidationReport::is_partial_report_Valid() const{
    return m_partial_report_isValid;
}

QList<OAIImportRowError> OAIFileValidationReport::getRowErrors() const {
    return m_row_errors;
}
void OAIFileValidationReport::setRowErrors(const QList<OAIImportRowError> &row_errors) {
    m_row_errors = row_errors;
    m_row_errors_isSet = true;
}

bool OAIFileValidationReport::is_row_errors_Set() const{
    return m_row_errors_isSet;
}

bool OAIFileValidationReport::is_row_errors_Valid() const{
    return m_row_errors_isValid;
}

bool OAIFileValidationReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileValidationReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
