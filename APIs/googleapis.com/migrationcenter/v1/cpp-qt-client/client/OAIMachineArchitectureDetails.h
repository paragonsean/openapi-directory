/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMachineArchitectureDetails.h
 *
 * Details of the machine architecture.
 */

#ifndef OAIMachineArchitectureDetails_H
#define OAIMachineArchitectureDetails_H

#include <QJsonObject>

#include "OAIBiosDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBiosDetails;

class OAIMachineArchitectureDetails : public OAIObject {
public:
    OAIMachineArchitectureDetails();
    OAIMachineArchitectureDetails(QString json);
    ~OAIMachineArchitectureDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBiosDetails getBios() const;
    void setBios(const OAIBiosDetails &bios);
    bool is_bios_Set() const;
    bool is_bios_Valid() const;

    QString getCpuArchitecture() const;
    void setCpuArchitecture(const QString &cpu_architecture);
    bool is_cpu_architecture_Set() const;
    bool is_cpu_architecture_Valid() const;

    QString getCpuName() const;
    void setCpuName(const QString &cpu_name);
    bool is_cpu_name_Set() const;
    bool is_cpu_name_Valid() const;

    qint32 getCpuSocketCount() const;
    void setCpuSocketCount(const qint32 &cpu_socket_count);
    bool is_cpu_socket_count_Set() const;
    bool is_cpu_socket_count_Valid() const;

    qint32 getCpuThreadCount() const;
    void setCpuThreadCount(const qint32 &cpu_thread_count);
    bool is_cpu_thread_count_Set() const;
    bool is_cpu_thread_count_Valid() const;

    QString getFirmwareType() const;
    void setFirmwareType(const QString &firmware_type);
    bool is_firmware_type_Set() const;
    bool is_firmware_type_Valid() const;

    QString getHyperthreading() const;
    void setHyperthreading(const QString &hyperthreading);
    bool is_hyperthreading_Set() const;
    bool is_hyperthreading_Valid() const;

    QString getVendor() const;
    void setVendor(const QString &vendor);
    bool is_vendor_Set() const;
    bool is_vendor_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBiosDetails m_bios;
    bool m_bios_isSet;
    bool m_bios_isValid;

    QString m_cpu_architecture;
    bool m_cpu_architecture_isSet;
    bool m_cpu_architecture_isValid;

    QString m_cpu_name;
    bool m_cpu_name_isSet;
    bool m_cpu_name_isValid;

    qint32 m_cpu_socket_count;
    bool m_cpu_socket_count_isSet;
    bool m_cpu_socket_count_isValid;

    qint32 m_cpu_thread_count;
    bool m_cpu_thread_count_isSet;
    bool m_cpu_thread_count_isValid;

    QString m_firmware_type;
    bool m_firmware_type_isSet;
    bool m_firmware_type_isValid;

    QString m_hyperthreading;
    bool m_hyperthreading_isSet;
    bool m_hyperthreading_isValid;

    QString m_vendor;
    bool m_vendor_isSet;
    bool m_vendor_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMachineArchitectureDetails)

#endif // OAIMachineArchitectureDetails_H
