/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_frame_count_isSet = false;
    m_error_frame_count_isValid = false;

    m_managed_isSet = false;
    m_managed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_frame_count_isSet = false;
    m_pending_frame_count_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_frame_count_isValid = ::OpenAPI::fromJsonValue(m_error_frame_count, json[QString("errorFrameCount")]);
    m_error_frame_count_isSet = !json[QString("errorFrameCount")].isNull() && m_error_frame_count_isValid;

    m_managed_isValid = ::OpenAPI::fromJsonValue(m_managed, json[QString("managed")]);
    m_managed_isSet = !json[QString("managed")].isNull() && m_managed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_frame_count_isValid = ::OpenAPI::fromJsonValue(m_pending_frame_count, json[QString("pendingFrameCount")]);
    m_pending_frame_count_isSet = !json[QString("pendingFrameCount")].isNull() && m_pending_frame_count_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error_frame_count_isSet) {
        obj.insert(QString("errorFrameCount"), ::OpenAPI::toJsonValue(m_error_frame_count));
    }
    if (m_managed_isSet) {
        obj.insert(QString("managed"), ::OpenAPI::toJsonValue(m_managed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_frame_count_isSet) {
        obj.insert(QString("pendingFrameCount"), ::OpenAPI::toJsonValue(m_pending_frame_count));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAISource::getCreateTime() const {
    return m_create_time;
}
void OAISource::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISource::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISource::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISource::getDescription() const {
    return m_description;
}
void OAISource::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISource::is_description_Set() const{
    return m_description_isSet;
}

bool OAISource::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISource::getDisplayName() const {
    return m_display_name;
}
void OAISource::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISource::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISource::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAISource::getErrorFrameCount() const {
    return m_error_frame_count;
}
void OAISource::setErrorFrameCount(const qint32 &error_frame_count) {
    m_error_frame_count = error_frame_count;
    m_error_frame_count_isSet = true;
}

bool OAISource::is_error_frame_count_Set() const{
    return m_error_frame_count_isSet;
}

bool OAISource::is_error_frame_count_Valid() const{
    return m_error_frame_count_isValid;
}

bool OAISource::isManaged() const {
    return m_managed;
}
void OAISource::setManaged(const bool &managed) {
    m_managed = managed;
    m_managed_isSet = true;
}

bool OAISource::is_managed_Set() const{
    return m_managed_isSet;
}

bool OAISource::is_managed_Valid() const{
    return m_managed_isValid;
}

QString OAISource::getName() const {
    return m_name;
}
void OAISource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISource::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISource::getPendingFrameCount() const {
    return m_pending_frame_count;
}
void OAISource::setPendingFrameCount(const qint32 &pending_frame_count) {
    m_pending_frame_count = pending_frame_count;
    m_pending_frame_count_isSet = true;
}

bool OAISource::is_pending_frame_count_Set() const{
    return m_pending_frame_count_isSet;
}

bool OAISource::is_pending_frame_count_Valid() const{
    return m_pending_frame_count_isValid;
}

qint32 OAISource::getPriority() const {
    return m_priority;
}
void OAISource::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAISource::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAISource::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAISource::getState() const {
    return m_state;
}
void OAISource::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISource::is_state_Set() const{
    return m_state_isSet;
}

bool OAISource::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISource::getType() const {
    return m_type;
}
void OAISource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISource::is_type_Set() const{
    return m_type_isSet;
}

bool OAISource::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISource::getUpdateTime() const {
    return m_update_time;
}
void OAISource::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISource::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISource::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_frame_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_frame_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
