/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMachineDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMachineDetails::OAIMachineDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMachineDetails::OAIMachineDetails() {
    this->initializeModel();
}

OAIMachineDetails::~OAIMachineDetails() {}

void OAIMachineDetails::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_core_count_isSet = false;
    m_core_count_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_guest_os_isSet = false;
    m_guest_os_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_memory_mb_isSet = false;
    m_memory_mb_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_power_state_isSet = false;
    m_power_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIMachineDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMachineDetails::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_core_count_isValid = ::OpenAPI::fromJsonValue(m_core_count, json[QString("coreCount")]);
    m_core_count_isSet = !json[QString("coreCount")].isNull() && m_core_count_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_guest_os_isValid = ::OpenAPI::fromJsonValue(m_guest_os, json[QString("guestOs")]);
    m_guest_os_isSet = !json[QString("guestOs")].isNull() && m_guest_os_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_memory_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_mb, json[QString("memoryMb")]);
    m_memory_mb_isSet = !json[QString("memoryMb")].isNull() && m_memory_mb_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_power_state_isValid = ::OpenAPI::fromJsonValue(m_power_state, json[QString("powerState")]);
    m_power_state_isSet = !json[QString("powerState")].isNull() && m_power_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIMachineDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMachineDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture.isSet()) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_core_count_isSet) {
        obj.insert(QString("coreCount"), ::OpenAPI::toJsonValue(m_core_count));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_disks.isSet()) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_guest_os.isSet()) {
        obj.insert(QString("guestOs"), ::OpenAPI::toJsonValue(m_guest_os));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_memory_mb_isSet) {
        obj.insert(QString("memoryMb"), ::OpenAPI::toJsonValue(m_memory_mb));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_power_state_isSet) {
        obj.insert(QString("powerState"), ::OpenAPI::toJsonValue(m_power_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAIMachineArchitectureDetails OAIMachineDetails::getArchitecture() const {
    return m_architecture;
}
void OAIMachineDetails::setArchitecture(const OAIMachineArchitectureDetails &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIMachineDetails::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIMachineDetails::is_architecture_Valid() const{
    return m_architecture_isValid;
}

qint32 OAIMachineDetails::getCoreCount() const {
    return m_core_count;
}
void OAIMachineDetails::setCoreCount(const qint32 &core_count) {
    m_core_count = core_count;
    m_core_count_isSet = true;
}

bool OAIMachineDetails::is_core_count_Set() const{
    return m_core_count_isSet;
}

bool OAIMachineDetails::is_core_count_Valid() const{
    return m_core_count_isValid;
}

QString OAIMachineDetails::getCreateTime() const {
    return m_create_time;
}
void OAIMachineDetails::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMachineDetails::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMachineDetails::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIMachineDiskDetails OAIMachineDetails::getDisks() const {
    return m_disks;
}
void OAIMachineDetails::setDisks(const OAIMachineDiskDetails &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIMachineDetails::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIMachineDetails::is_disks_Valid() const{
    return m_disks_isValid;
}

OAIGuestOsDetails OAIMachineDetails::getGuestOs() const {
    return m_guest_os;
}
void OAIMachineDetails::setGuestOs(const OAIGuestOsDetails &guest_os) {
    m_guest_os = guest_os;
    m_guest_os_isSet = true;
}

bool OAIMachineDetails::is_guest_os_Set() const{
    return m_guest_os_isSet;
}

bool OAIMachineDetails::is_guest_os_Valid() const{
    return m_guest_os_isValid;
}

QString OAIMachineDetails::getMachineName() const {
    return m_machine_name;
}
void OAIMachineDetails::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIMachineDetails::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIMachineDetails::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

qint32 OAIMachineDetails::getMemoryMb() const {
    return m_memory_mb;
}
void OAIMachineDetails::setMemoryMb(const qint32 &memory_mb) {
    m_memory_mb = memory_mb;
    m_memory_mb_isSet = true;
}

bool OAIMachineDetails::is_memory_mb_Set() const{
    return m_memory_mb_isSet;
}

bool OAIMachineDetails::is_memory_mb_Valid() const{
    return m_memory_mb_isValid;
}

OAIMachineNetworkDetails OAIMachineDetails::getNetwork() const {
    return m_network;
}
void OAIMachineDetails::setNetwork(const OAIMachineNetworkDetails &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIMachineDetails::is_network_Set() const{
    return m_network_isSet;
}

bool OAIMachineDetails::is_network_Valid() const{
    return m_network_isValid;
}

OAIPlatformDetails OAIMachineDetails::getPlatform() const {
    return m_platform;
}
void OAIMachineDetails::setPlatform(const OAIPlatformDetails &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIMachineDetails::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIMachineDetails::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIMachineDetails::getPowerState() const {
    return m_power_state;
}
void OAIMachineDetails::setPowerState(const QString &power_state) {
    m_power_state = power_state;
    m_power_state_isSet = true;
}

bool OAIMachineDetails::is_power_state_Set() const{
    return m_power_state_isSet;
}

bool OAIMachineDetails::is_power_state_Valid() const{
    return m_power_state_isValid;
}

QString OAIMachineDetails::getUuid() const {
    return m_uuid;
}
void OAIMachineDetails::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIMachineDetails::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIMachineDetails::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIMachineDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMachineDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
