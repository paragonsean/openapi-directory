/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationInsight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationInsight::OAIMigrationInsight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationInsight::OAIMigrationInsight() {
    this->initializeModel();
}

OAIMigrationInsight::~OAIMigrationInsight() {}

void OAIMigrationInsight::initializeModel() {

    m_compute_engine_target_isSet = false;
    m_compute_engine_target_isValid = false;

    m_fit_isSet = false;
    m_fit_isValid = false;
}

void OAIMigrationInsight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationInsight::fromJsonObject(QJsonObject json) {

    m_compute_engine_target_isValid = ::OpenAPI::fromJsonValue(m_compute_engine_target, json[QString("computeEngineTarget")]);
    m_compute_engine_target_isSet = !json[QString("computeEngineTarget")].isNull() && m_compute_engine_target_isValid;

    m_fit_isValid = ::OpenAPI::fromJsonValue(m_fit, json[QString("fit")]);
    m_fit_isSet = !json[QString("fit")].isNull() && m_fit_isValid;
}

QString OAIMigrationInsight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationInsight::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_engine_target.isSet()) {
        obj.insert(QString("computeEngineTarget"), ::OpenAPI::toJsonValue(m_compute_engine_target));
    }
    if (m_fit.isSet()) {
        obj.insert(QString("fit"), ::OpenAPI::toJsonValue(m_fit));
    }
    return obj;
}

OAIComputeEngineMigrationTarget OAIMigrationInsight::getComputeEngineTarget() const {
    return m_compute_engine_target;
}
void OAIMigrationInsight::setComputeEngineTarget(const OAIComputeEngineMigrationTarget &compute_engine_target) {
    m_compute_engine_target = compute_engine_target;
    m_compute_engine_target_isSet = true;
}

bool OAIMigrationInsight::is_compute_engine_target_Set() const{
    return m_compute_engine_target_isSet;
}

bool OAIMigrationInsight::is_compute_engine_target_Valid() const{
    return m_compute_engine_target_isValid;
}

OAIFitDescriptor OAIMigrationInsight::getFit() const {
    return m_fit;
}
void OAIMigrationInsight::setFit(const OAIFitDescriptor &fit) {
    m_fit = fit;
    m_fit_isSet = true;
}

bool OAIMigrationInsight::is_fit_Set() const{
    return m_fit_isSet;
}

bool OAIMigrationInsight::is_fit_Valid() const{
    return m_fit_isValid;
}

bool OAIMigrationInsight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_engine_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationInsight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
