/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAddress::OAINetworkAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAddress::OAINetworkAddress() {
    this->initializeModel();
}

OAINetworkAddress::~OAINetworkAddress() {}

void OAINetworkAddress::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_bcast_isSet = false;
    m_bcast_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_subnet_mask_isSet = false;
    m_subnet_mask_isValid = false;
}

void OAINetworkAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAddress::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_bcast_isValid = ::OpenAPI::fromJsonValue(m_bcast, json[QString("bcast")]);
    m_bcast_isSet = !json[QString("bcast")].isNull() && m_bcast_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_subnet_mask_isValid = ::OpenAPI::fromJsonValue(m_subnet_mask, json[QString("subnetMask")]);
    m_subnet_mask_isSet = !json[QString("subnetMask")].isNull() && m_subnet_mask_isValid;
}

QString OAINetworkAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_isSet) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_bcast_isSet) {
        obj.insert(QString("bcast"), ::OpenAPI::toJsonValue(m_bcast));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_subnet_mask_isSet) {
        obj.insert(QString("subnetMask"), ::OpenAPI::toJsonValue(m_subnet_mask));
    }
    return obj;
}

QString OAINetworkAddress::getAssignment() const {
    return m_assignment;
}
void OAINetworkAddress::setAssignment(const QString &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAINetworkAddress::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAINetworkAddress::is_assignment_Valid() const{
    return m_assignment_isValid;
}

QString OAINetworkAddress::getBcast() const {
    return m_bcast;
}
void OAINetworkAddress::setBcast(const QString &bcast) {
    m_bcast = bcast;
    m_bcast_isSet = true;
}

bool OAINetworkAddress::is_bcast_Set() const{
    return m_bcast_isSet;
}

bool OAINetworkAddress::is_bcast_Valid() const{
    return m_bcast_isValid;
}

QString OAINetworkAddress::getFqdn() const {
    return m_fqdn;
}
void OAINetworkAddress::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAINetworkAddress::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAINetworkAddress::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAINetworkAddress::getIpAddress() const {
    return m_ip_address;
}
void OAINetworkAddress::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINetworkAddress::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINetworkAddress::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAINetworkAddress::getSubnetMask() const {
    return m_subnet_mask;
}
void OAINetworkAddress::setSubnetMask(const QString &subnet_mask) {
    m_subnet_mask = subnet_mask;
    m_subnet_mask_isSet = true;
}

bool OAINetworkAddress::is_subnet_mask_Set() const{
    return m_subnet_mask_isSet;
}

bool OAINetworkAddress::is_subnet_mask_Valid() const{
    return m_subnet_mask_isValid;
}

bool OAINetworkAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
