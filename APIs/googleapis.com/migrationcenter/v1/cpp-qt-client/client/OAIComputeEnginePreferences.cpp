/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeEnginePreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeEnginePreferences::OAIComputeEnginePreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeEnginePreferences::OAIComputeEnginePreferences() {
    this->initializeModel();
}

OAIComputeEnginePreferences::~OAIComputeEnginePreferences() {}

void OAIComputeEnginePreferences::initializeModel() {

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_machine_preferences_isSet = false;
    m_machine_preferences_isValid = false;

    m_persistent_disk_type_isSet = false;
    m_persistent_disk_type_isValid = false;
}

void OAIComputeEnginePreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeEnginePreferences::fromJsonObject(QJsonObject json) {

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_machine_preferences_isValid = ::OpenAPI::fromJsonValue(m_machine_preferences, json[QString("machinePreferences")]);
    m_machine_preferences_isSet = !json[QString("machinePreferences")].isNull() && m_machine_preferences_isValid;

    m_persistent_disk_type_isValid = ::OpenAPI::fromJsonValue(m_persistent_disk_type, json[QString("persistentDiskType")]);
    m_persistent_disk_type_isSet = !json[QString("persistentDiskType")].isNull() && m_persistent_disk_type_isValid;
}

QString OAIComputeEnginePreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeEnginePreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_machine_preferences.isSet()) {
        obj.insert(QString("machinePreferences"), ::OpenAPI::toJsonValue(m_machine_preferences));
    }
    if (m_persistent_disk_type_isSet) {
        obj.insert(QString("persistentDiskType"), ::OpenAPI::toJsonValue(m_persistent_disk_type));
    }
    return obj;
}

QString OAIComputeEnginePreferences::getLicenseType() const {
    return m_license_type;
}
void OAIComputeEnginePreferences::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIComputeEnginePreferences::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIComputeEnginePreferences::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIMachinePreferences OAIComputeEnginePreferences::getMachinePreferences() const {
    return m_machine_preferences;
}
void OAIComputeEnginePreferences::setMachinePreferences(const OAIMachinePreferences &machine_preferences) {
    m_machine_preferences = machine_preferences;
    m_machine_preferences_isSet = true;
}

bool OAIComputeEnginePreferences::is_machine_preferences_Set() const{
    return m_machine_preferences_isSet;
}

bool OAIComputeEnginePreferences::is_machine_preferences_Valid() const{
    return m_machine_preferences_isValid;
}

QString OAIComputeEnginePreferences::getPersistentDiskType() const {
    return m_persistent_disk_type;
}
void OAIComputeEnginePreferences::setPersistentDiskType(const QString &persistent_disk_type) {
    m_persistent_disk_type = persistent_disk_type;
    m_persistent_disk_type_isSet = true;
}

bool OAIComputeEnginePreferences::is_persistent_disk_type_Set() const{
    return m_persistent_disk_type_isSet;
}

bool OAIComputeEnginePreferences::is_persistent_disk_type_Valid() const{
    return m_persistent_disk_type_isValid;
}

bool OAIComputeEnginePreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeEnginePreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
