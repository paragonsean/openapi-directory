/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryComputeEngineFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryComputeEngineFinding::OAIReportSummaryComputeEngineFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryComputeEngineFinding::OAIReportSummaryComputeEngineFinding() {
    this->initializeModel();
}

OAIReportSummaryComputeEngineFinding::~OAIReportSummaryComputeEngineFinding() {}

void OAIReportSummaryComputeEngineFinding::initializeModel() {

    m_allocated_asset_count_isSet = false;
    m_allocated_asset_count_isValid = false;

    m_allocated_disk_types_isSet = false;
    m_allocated_disk_types_isValid = false;

    m_allocated_regions_isSet = false;
    m_allocated_regions_isValid = false;

    m_machine_series_allocations_isSet = false;
    m_machine_series_allocations_isValid = false;
}

void OAIReportSummaryComputeEngineFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryComputeEngineFinding::fromJsonObject(QJsonObject json) {

    m_allocated_asset_count_isValid = ::OpenAPI::fromJsonValue(m_allocated_asset_count, json[QString("allocatedAssetCount")]);
    m_allocated_asset_count_isSet = !json[QString("allocatedAssetCount")].isNull() && m_allocated_asset_count_isValid;

    m_allocated_disk_types_isValid = ::OpenAPI::fromJsonValue(m_allocated_disk_types, json[QString("allocatedDiskTypes")]);
    m_allocated_disk_types_isSet = !json[QString("allocatedDiskTypes")].isNull() && m_allocated_disk_types_isValid;

    m_allocated_regions_isValid = ::OpenAPI::fromJsonValue(m_allocated_regions, json[QString("allocatedRegions")]);
    m_allocated_regions_isSet = !json[QString("allocatedRegions")].isNull() && m_allocated_regions_isValid;

    m_machine_series_allocations_isValid = ::OpenAPI::fromJsonValue(m_machine_series_allocations, json[QString("machineSeriesAllocations")]);
    m_machine_series_allocations_isSet = !json[QString("machineSeriesAllocations")].isNull() && m_machine_series_allocations_isValid;
}

QString OAIReportSummaryComputeEngineFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryComputeEngineFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_asset_count_isSet) {
        obj.insert(QString("allocatedAssetCount"), ::OpenAPI::toJsonValue(m_allocated_asset_count));
    }
    if (m_allocated_disk_types.size() > 0) {
        obj.insert(QString("allocatedDiskTypes"), ::OpenAPI::toJsonValue(m_allocated_disk_types));
    }
    if (m_allocated_regions.size() > 0) {
        obj.insert(QString("allocatedRegions"), ::OpenAPI::toJsonValue(m_allocated_regions));
    }
    if (m_machine_series_allocations.size() > 0) {
        obj.insert(QString("machineSeriesAllocations"), ::OpenAPI::toJsonValue(m_machine_series_allocations));
    }
    return obj;
}

QString OAIReportSummaryComputeEngineFinding::getAllocatedAssetCount() const {
    return m_allocated_asset_count;
}
void OAIReportSummaryComputeEngineFinding::setAllocatedAssetCount(const QString &allocated_asset_count) {
    m_allocated_asset_count = allocated_asset_count;
    m_allocated_asset_count_isSet = true;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_asset_count_Set() const{
    return m_allocated_asset_count_isSet;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_asset_count_Valid() const{
    return m_allocated_asset_count_isValid;
}

QList<QString> OAIReportSummaryComputeEngineFinding::getAllocatedDiskTypes() const {
    return m_allocated_disk_types;
}
void OAIReportSummaryComputeEngineFinding::setAllocatedDiskTypes(const QList<QString> &allocated_disk_types) {
    m_allocated_disk_types = allocated_disk_types;
    m_allocated_disk_types_isSet = true;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_disk_types_Set() const{
    return m_allocated_disk_types_isSet;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_disk_types_Valid() const{
    return m_allocated_disk_types_isValid;
}

QList<QString> OAIReportSummaryComputeEngineFinding::getAllocatedRegions() const {
    return m_allocated_regions;
}
void OAIReportSummaryComputeEngineFinding::setAllocatedRegions(const QList<QString> &allocated_regions) {
    m_allocated_regions = allocated_regions;
    m_allocated_regions_isSet = true;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_regions_Set() const{
    return m_allocated_regions_isSet;
}

bool OAIReportSummaryComputeEngineFinding::is_allocated_regions_Valid() const{
    return m_allocated_regions_isValid;
}

QList<OAIReportSummaryMachineSeriesAllocation> OAIReportSummaryComputeEngineFinding::getMachineSeriesAllocations() const {
    return m_machine_series_allocations;
}
void OAIReportSummaryComputeEngineFinding::setMachineSeriesAllocations(const QList<OAIReportSummaryMachineSeriesAllocation> &machine_series_allocations) {
    m_machine_series_allocations = machine_series_allocations;
    m_machine_series_allocations_isSet = true;
}

bool OAIReportSummaryComputeEngineFinding::is_machine_series_allocations_Set() const{
    return m_machine_series_allocations_isSet;
}

bool OAIReportSummaryComputeEngineFinding::is_machine_series_allocations_Valid() const{
    return m_machine_series_allocations_isValid;
}

bool OAIReportSummaryComputeEngineFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_disk_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_series_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryComputeEngineFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
