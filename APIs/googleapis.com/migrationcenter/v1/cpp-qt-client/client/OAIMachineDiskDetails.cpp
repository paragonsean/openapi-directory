/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMachineDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMachineDiskDetails::OAIMachineDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMachineDiskDetails::OAIMachineDiskDetails() {
    this->initializeModel();
}

OAIMachineDiskDetails::~OAIMachineDiskDetails() {}

void OAIMachineDiskDetails::initializeModel() {

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_total_capacity_bytes_isSet = false;
    m_total_capacity_bytes_isValid = false;

    m_total_free_bytes_isSet = false;
    m_total_free_bytes_isValid = false;
}

void OAIMachineDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMachineDiskDetails::fromJsonObject(QJsonObject json) {

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_total_capacity_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_capacity_bytes, json[QString("totalCapacityBytes")]);
    m_total_capacity_bytes_isSet = !json[QString("totalCapacityBytes")].isNull() && m_total_capacity_bytes_isValid;

    m_total_free_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_free_bytes, json[QString("totalFreeBytes")]);
    m_total_free_bytes_isSet = !json[QString("totalFreeBytes")].isNull() && m_total_free_bytes_isValid;
}

QString OAIMachineDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMachineDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disks.isSet()) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_total_capacity_bytes_isSet) {
        obj.insert(QString("totalCapacityBytes"), ::OpenAPI::toJsonValue(m_total_capacity_bytes));
    }
    if (m_total_free_bytes_isSet) {
        obj.insert(QString("totalFreeBytes"), ::OpenAPI::toJsonValue(m_total_free_bytes));
    }
    return obj;
}

OAIDiskEntryList OAIMachineDiskDetails::getDisks() const {
    return m_disks;
}
void OAIMachineDiskDetails::setDisks(const OAIDiskEntryList &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIMachineDiskDetails::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIMachineDiskDetails::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIMachineDiskDetails::getTotalCapacityBytes() const {
    return m_total_capacity_bytes;
}
void OAIMachineDiskDetails::setTotalCapacityBytes(const QString &total_capacity_bytes) {
    m_total_capacity_bytes = total_capacity_bytes;
    m_total_capacity_bytes_isSet = true;
}

bool OAIMachineDiskDetails::is_total_capacity_bytes_Set() const{
    return m_total_capacity_bytes_isSet;
}

bool OAIMachineDiskDetails::is_total_capacity_bytes_Valid() const{
    return m_total_capacity_bytes_isValid;
}

QString OAIMachineDiskDetails::getTotalFreeBytes() const {
    return m_total_free_bytes;
}
void OAIMachineDiskDetails::setTotalFreeBytes(const QString &total_free_bytes) {
    m_total_free_bytes = total_free_bytes;
    m_total_free_bytes_isSet = true;
}

bool OAIMachineDiskDetails::is_total_free_bytes_Set() const{
    return m_total_free_bytes_isSet;
}

bool OAIMachineDiskDetails::is_total_free_bytes_Valid() const{
    return m_total_free_bytes_isValid;
}

bool OAIMachineDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_free_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMachineDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
