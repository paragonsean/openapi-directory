/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmwareEnginePreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmwareEnginePreferences::OAIVmwareEnginePreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmwareEnginePreferences::OAIVmwareEnginePreferences() {
    this->initializeModel();
}

OAIVmwareEnginePreferences::~OAIVmwareEnginePreferences() {}

void OAIVmwareEnginePreferences::initializeModel() {

    m_commitment_plan_isSet = false;
    m_commitment_plan_isValid = false;

    m_cpu_overcommit_ratio_isSet = false;
    m_cpu_overcommit_ratio_isValid = false;

    m_memory_overcommit_ratio_isSet = false;
    m_memory_overcommit_ratio_isValid = false;

    m_storage_deduplication_compression_ratio_isSet = false;
    m_storage_deduplication_compression_ratio_isValid = false;
}

void OAIVmwareEnginePreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmwareEnginePreferences::fromJsonObject(QJsonObject json) {

    m_commitment_plan_isValid = ::OpenAPI::fromJsonValue(m_commitment_plan, json[QString("commitmentPlan")]);
    m_commitment_plan_isSet = !json[QString("commitmentPlan")].isNull() && m_commitment_plan_isValid;

    m_cpu_overcommit_ratio_isValid = ::OpenAPI::fromJsonValue(m_cpu_overcommit_ratio, json[QString("cpuOvercommitRatio")]);
    m_cpu_overcommit_ratio_isSet = !json[QString("cpuOvercommitRatio")].isNull() && m_cpu_overcommit_ratio_isValid;

    m_memory_overcommit_ratio_isValid = ::OpenAPI::fromJsonValue(m_memory_overcommit_ratio, json[QString("memoryOvercommitRatio")]);
    m_memory_overcommit_ratio_isSet = !json[QString("memoryOvercommitRatio")].isNull() && m_memory_overcommit_ratio_isValid;

    m_storage_deduplication_compression_ratio_isValid = ::OpenAPI::fromJsonValue(m_storage_deduplication_compression_ratio, json[QString("storageDeduplicationCompressionRatio")]);
    m_storage_deduplication_compression_ratio_isSet = !json[QString("storageDeduplicationCompressionRatio")].isNull() && m_storage_deduplication_compression_ratio_isValid;
}

QString OAIVmwareEnginePreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmwareEnginePreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_plan_isSet) {
        obj.insert(QString("commitmentPlan"), ::OpenAPI::toJsonValue(m_commitment_plan));
    }
    if (m_cpu_overcommit_ratio_isSet) {
        obj.insert(QString("cpuOvercommitRatio"), ::OpenAPI::toJsonValue(m_cpu_overcommit_ratio));
    }
    if (m_memory_overcommit_ratio_isSet) {
        obj.insert(QString("memoryOvercommitRatio"), ::OpenAPI::toJsonValue(m_memory_overcommit_ratio));
    }
    if (m_storage_deduplication_compression_ratio_isSet) {
        obj.insert(QString("storageDeduplicationCompressionRatio"), ::OpenAPI::toJsonValue(m_storage_deduplication_compression_ratio));
    }
    return obj;
}

QString OAIVmwareEnginePreferences::getCommitmentPlan() const {
    return m_commitment_plan;
}
void OAIVmwareEnginePreferences::setCommitmentPlan(const QString &commitment_plan) {
    m_commitment_plan = commitment_plan;
    m_commitment_plan_isSet = true;
}

bool OAIVmwareEnginePreferences::is_commitment_plan_Set() const{
    return m_commitment_plan_isSet;
}

bool OAIVmwareEnginePreferences::is_commitment_plan_Valid() const{
    return m_commitment_plan_isValid;
}

double OAIVmwareEnginePreferences::getCpuOvercommitRatio() const {
    return m_cpu_overcommit_ratio;
}
void OAIVmwareEnginePreferences::setCpuOvercommitRatio(const double &cpu_overcommit_ratio) {
    m_cpu_overcommit_ratio = cpu_overcommit_ratio;
    m_cpu_overcommit_ratio_isSet = true;
}

bool OAIVmwareEnginePreferences::is_cpu_overcommit_ratio_Set() const{
    return m_cpu_overcommit_ratio_isSet;
}

bool OAIVmwareEnginePreferences::is_cpu_overcommit_ratio_Valid() const{
    return m_cpu_overcommit_ratio_isValid;
}

double OAIVmwareEnginePreferences::getMemoryOvercommitRatio() const {
    return m_memory_overcommit_ratio;
}
void OAIVmwareEnginePreferences::setMemoryOvercommitRatio(const double &memory_overcommit_ratio) {
    m_memory_overcommit_ratio = memory_overcommit_ratio;
    m_memory_overcommit_ratio_isSet = true;
}

bool OAIVmwareEnginePreferences::is_memory_overcommit_ratio_Set() const{
    return m_memory_overcommit_ratio_isSet;
}

bool OAIVmwareEnginePreferences::is_memory_overcommit_ratio_Valid() const{
    return m_memory_overcommit_ratio_isValid;
}

double OAIVmwareEnginePreferences::getStorageDeduplicationCompressionRatio() const {
    return m_storage_deduplication_compression_ratio;
}
void OAIVmwareEnginePreferences::setStorageDeduplicationCompressionRatio(const double &storage_deduplication_compression_ratio) {
    m_storage_deduplication_compression_ratio = storage_deduplication_compression_ratio;
    m_storage_deduplication_compression_ratio_isSet = true;
}

bool OAIVmwareEnginePreferences::is_storage_deduplication_compression_ratio_Set() const{
    return m_storage_deduplication_compression_ratio_isSet;
}

bool OAIVmwareEnginePreferences::is_storage_deduplication_compression_ratio_Valid() const{
    return m_storage_deduplication_compression_ratio_isValid;
}

bool OAIVmwareEnginePreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_overcommit_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_overcommit_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_deduplication_compression_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmwareEnginePreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
