/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_disable_cloud_logging_isSet = false;
    m_disable_cloud_logging_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preference_set_isSet = false;
    m_preference_set_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_disable_cloud_logging_isValid = ::OpenAPI::fromJsonValue(m_disable_cloud_logging, json[QString("disableCloudLogging")]);
    m_disable_cloud_logging_isSet = !json[QString("disableCloudLogging")].isNull() && m_disable_cloud_logging_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preference_set_isValid = ::OpenAPI::fromJsonValue(m_preference_set, json[QString("preferenceSet")]);
    m_preference_set_isSet = !json[QString("preferenceSet")].isNull() && m_preference_set_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_cloud_logging_isSet) {
        obj.insert(QString("disableCloudLogging"), ::OpenAPI::toJsonValue(m_disable_cloud_logging));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preference_set_isSet) {
        obj.insert(QString("preferenceSet"), ::OpenAPI::toJsonValue(m_preference_set));
    }
    return obj;
}

bool OAISettings::isDisableCloudLogging() const {
    return m_disable_cloud_logging;
}
void OAISettings::setDisableCloudLogging(const bool &disable_cloud_logging) {
    m_disable_cloud_logging = disable_cloud_logging;
    m_disable_cloud_logging_isSet = true;
}

bool OAISettings::is_disable_cloud_logging_Set() const{
    return m_disable_cloud_logging_isSet;
}

bool OAISettings::is_disable_cloud_logging_Valid() const{
    return m_disable_cloud_logging_isValid;
}

QString OAISettings::getName() const {
    return m_name;
}
void OAISettings::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISettings::is_name_Set() const{
    return m_name_isSet;
}

bool OAISettings::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISettings::getPreferenceSet() const {
    return m_preference_set;
}
void OAISettings::setPreferenceSet(const QString &preference_set) {
    m_preference_set = preference_set;
    m_preference_set_isSet = true;
}

bool OAISettings::is_preference_set_Set() const{
    return m_preference_set_isSet;
}

bool OAISettings::is_preference_set_Valid() const{
    return m_preference_set_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_cloud_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preference_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
