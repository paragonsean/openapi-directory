/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportDataFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportDataFile::OAIImportDataFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportDataFile::OAIImportDataFile() {
    this->initializeModel();
}

OAIImportDataFile::~OAIImportDataFile() {}

void OAIImportDataFile::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_upload_file_info_isSet = false;
    m_upload_file_info_isValid = false;
}

void OAIImportDataFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportDataFile::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_upload_file_info_isValid = ::OpenAPI::fromJsonValue(m_upload_file_info, json[QString("uploadFileInfo")]);
    m_upload_file_info_isSet = !json[QString("uploadFileInfo")].isNull() && m_upload_file_info_isValid;
}

QString OAIImportDataFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportDataFile::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_upload_file_info.isSet()) {
        obj.insert(QString("uploadFileInfo"), ::OpenAPI::toJsonValue(m_upload_file_info));
    }
    return obj;
}

QString OAIImportDataFile::getCreateTime() const {
    return m_create_time;
}
void OAIImportDataFile::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIImportDataFile::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIImportDataFile::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIImportDataFile::getDisplayName() const {
    return m_display_name;
}
void OAIImportDataFile::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImportDataFile::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImportDataFile::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIImportDataFile::getFormat() const {
    return m_format;
}
void OAIImportDataFile::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImportDataFile::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImportDataFile::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIImportDataFile::getName() const {
    return m_name;
}
void OAIImportDataFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportDataFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportDataFile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportDataFile::getState() const {
    return m_state;
}
void OAIImportDataFile::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImportDataFile::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImportDataFile::is_state_Valid() const{
    return m_state_isValid;
}

OAIUploadFileInfo OAIImportDataFile::getUploadFileInfo() const {
    return m_upload_file_info;
}
void OAIImportDataFile::setUploadFileInfo(const OAIUploadFileInfo &upload_file_info) {
    m_upload_file_info = upload_file_info;
    m_upload_file_info_isSet = true;
}

bool OAIImportDataFile::is_upload_file_info_Set() const{
    return m_upload_file_info_isSet;
}

bool OAIImportDataFile::is_upload_file_info_Valid() const{
    return m_upload_file_info_isValid;
}

bool OAIImportDataFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_file_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportDataFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
