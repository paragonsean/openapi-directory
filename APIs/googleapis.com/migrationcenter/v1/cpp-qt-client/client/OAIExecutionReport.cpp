/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecutionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecutionReport::OAIExecutionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecutionReport::OAIExecutionReport() {
    this->initializeModel();
}

OAIExecutionReport::~OAIExecutionReport() {}

void OAIExecutionReport::initializeModel() {

    m_execution_errors_isSet = false;
    m_execution_errors_isValid = false;

    m_frames_reported_isSet = false;
    m_frames_reported_isValid = false;

    m_total_rows_count_isSet = false;
    m_total_rows_count_isValid = false;
}

void OAIExecutionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecutionReport::fromJsonObject(QJsonObject json) {

    m_execution_errors_isValid = ::OpenAPI::fromJsonValue(m_execution_errors, json[QString("executionErrors")]);
    m_execution_errors_isSet = !json[QString("executionErrors")].isNull() && m_execution_errors_isValid;

    m_frames_reported_isValid = ::OpenAPI::fromJsonValue(m_frames_reported, json[QString("framesReported")]);
    m_frames_reported_isSet = !json[QString("framesReported")].isNull() && m_frames_reported_isValid;

    m_total_rows_count_isValid = ::OpenAPI::fromJsonValue(m_total_rows_count, json[QString("totalRowsCount")]);
    m_total_rows_count_isSet = !json[QString("totalRowsCount")].isNull() && m_total_rows_count_isValid;
}

QString OAIExecutionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecutionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_errors.isSet()) {
        obj.insert(QString("executionErrors"), ::OpenAPI::toJsonValue(m_execution_errors));
    }
    if (m_frames_reported_isSet) {
        obj.insert(QString("framesReported"), ::OpenAPI::toJsonValue(m_frames_reported));
    }
    if (m_total_rows_count_isSet) {
        obj.insert(QString("totalRowsCount"), ::OpenAPI::toJsonValue(m_total_rows_count));
    }
    return obj;
}

OAIValidationReport OAIExecutionReport::getExecutionErrors() const {
    return m_execution_errors;
}
void OAIExecutionReport::setExecutionErrors(const OAIValidationReport &execution_errors) {
    m_execution_errors = execution_errors;
    m_execution_errors_isSet = true;
}

bool OAIExecutionReport::is_execution_errors_Set() const{
    return m_execution_errors_isSet;
}

bool OAIExecutionReport::is_execution_errors_Valid() const{
    return m_execution_errors_isValid;
}

qint32 OAIExecutionReport::getFramesReported() const {
    return m_frames_reported;
}
void OAIExecutionReport::setFramesReported(const qint32 &frames_reported) {
    m_frames_reported = frames_reported;
    m_frames_reported_isSet = true;
}

bool OAIExecutionReport::is_frames_reported_Set() const{
    return m_frames_reported_isSet;
}

bool OAIExecutionReport::is_frames_reported_Valid() const{
    return m_frames_reported_isValid;
}

qint32 OAIExecutionReport::getTotalRowsCount() const {
    return m_total_rows_count;
}
void OAIExecutionReport::setTotalRowsCount(const qint32 &total_rows_count) {
    m_total_rows_count = total_rows_count;
    m_total_rows_count_isSet = true;
}

bool OAIExecutionReport::is_total_rows_count_Set() const{
    return m_total_rows_count_isSet;
}

bool OAIExecutionReport::is_total_rows_count_Valid() const{
    return m_total_rows_count_isValid;
}

bool OAIExecutionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frames_reported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecutionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
