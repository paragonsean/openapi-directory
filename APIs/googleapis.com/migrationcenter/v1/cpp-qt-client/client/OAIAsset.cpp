/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_assigned_groups_isSet = false;
    m_assigned_groups_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_insight_list_isSet = false;
    m_insight_list_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_machine_details_isSet = false;
    m_machine_details_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_performance_data_isSet = false;
    m_performance_data_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_assigned_groups_isValid = ::OpenAPI::fromJsonValue(m_assigned_groups, json[QString("assignedGroups")]);
    m_assigned_groups_isSet = !json[QString("assignedGroups")].isNull() && m_assigned_groups_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_insight_list_isValid = ::OpenAPI::fromJsonValue(m_insight_list, json[QString("insightList")]);
    m_insight_list_isSet = !json[QString("insightList")].isNull() && m_insight_list_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_machine_details_isValid = ::OpenAPI::fromJsonValue(m_machine_details, json[QString("machineDetails")]);
    m_machine_details_isSet = !json[QString("machineDetails")].isNull() && m_machine_details_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_performance_data_isValid = ::OpenAPI::fromJsonValue(m_performance_data, json[QString("performanceData")]);
    m_performance_data_isSet = !json[QString("performanceData")].isNull() && m_performance_data_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_groups.size() > 0) {
        obj.insert(QString("assignedGroups"), ::OpenAPI::toJsonValue(m_assigned_groups));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_insight_list.isSet()) {
        obj.insert(QString("insightList"), ::OpenAPI::toJsonValue(m_insight_list));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_machine_details.isSet()) {
        obj.insert(QString("machineDetails"), ::OpenAPI::toJsonValue(m_machine_details));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_performance_data.isSet()) {
        obj.insert(QString("performanceData"), ::OpenAPI::toJsonValue(m_performance_data));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<QString> OAIAsset::getAssignedGroups() const {
    return m_assigned_groups;
}
void OAIAsset::setAssignedGroups(const QList<QString> &assigned_groups) {
    m_assigned_groups = assigned_groups;
    m_assigned_groups_isSet = true;
}

bool OAIAsset::is_assigned_groups_Set() const{
    return m_assigned_groups_isSet;
}

bool OAIAsset::is_assigned_groups_Valid() const{
    return m_assigned_groups_isValid;
}

QMap<QString, QString> OAIAsset::getAttributes() const {
    return m_attributes;
}
void OAIAsset::setAttributes(const QMap<QString, QString> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIAsset::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIAsset::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIAsset::getCreateTime() const {
    return m_create_time;
}
void OAIAsset::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAsset::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAsset::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIInsightList OAIAsset::getInsightList() const {
    return m_insight_list;
}
void OAIAsset::setInsightList(const OAIInsightList &insight_list) {
    m_insight_list = insight_list;
    m_insight_list_isSet = true;
}

bool OAIAsset::is_insight_list_Set() const{
    return m_insight_list_isSet;
}

bool OAIAsset::is_insight_list_Valid() const{
    return m_insight_list_isValid;
}

QMap<QString, QString> OAIAsset::getLabels() const {
    return m_labels;
}
void OAIAsset::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAsset::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAsset::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIMachineDetails OAIAsset::getMachineDetails() const {
    return m_machine_details;
}
void OAIAsset::setMachineDetails(const OAIMachineDetails &machine_details) {
    m_machine_details = machine_details;
    m_machine_details_isSet = true;
}

bool OAIAsset::is_machine_details_Set() const{
    return m_machine_details_isSet;
}

bool OAIAsset::is_machine_details_Valid() const{
    return m_machine_details_isValid;
}

QString OAIAsset::getName() const {
    return m_name;
}
void OAIAsset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsset::is_name_Valid() const{
    return m_name_isValid;
}

OAIAssetPerformanceData OAIAsset::getPerformanceData() const {
    return m_performance_data;
}
void OAIAsset::setPerformanceData(const OAIAssetPerformanceData &performance_data) {
    m_performance_data = performance_data;
    m_performance_data_isSet = true;
}

bool OAIAsset::is_performance_data_Set() const{
    return m_performance_data_isSet;
}

bool OAIAsset::is_performance_data_Valid() const{
    return m_performance_data_isValid;
}

QList<QString> OAIAsset::getSources() const {
    return m_sources;
}
void OAIAsset::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIAsset::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIAsset::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIAsset::getUpdateTime() const {
    return m_update_time;
}
void OAIAsset::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAsset::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAsset::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
