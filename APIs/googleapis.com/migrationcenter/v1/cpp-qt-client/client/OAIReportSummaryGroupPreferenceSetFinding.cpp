/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryGroupPreferenceSetFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryGroupPreferenceSetFinding::OAIReportSummaryGroupPreferenceSetFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryGroupPreferenceSetFinding::OAIReportSummaryGroupPreferenceSetFinding() {
    this->initializeModel();
}

OAIReportSummaryGroupPreferenceSetFinding::~OAIReportSummaryGroupPreferenceSetFinding() {}

void OAIReportSummaryGroupPreferenceSetFinding::initializeModel() {

    m_compute_engine_finding_isSet = false;
    m_compute_engine_finding_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_machine_preferences_isSet = false;
    m_machine_preferences_isValid = false;

    m_monthly_cost_compute_isSet = false;
    m_monthly_cost_compute_isValid = false;

    m_monthly_cost_network_egress_isSet = false;
    m_monthly_cost_network_egress_isValid = false;

    m_monthly_cost_os_license_isSet = false;
    m_monthly_cost_os_license_isValid = false;

    m_monthly_cost_other_isSet = false;
    m_monthly_cost_other_isValid = false;

    m_monthly_cost_storage_isSet = false;
    m_monthly_cost_storage_isValid = false;

    m_monthly_cost_total_isSet = false;
    m_monthly_cost_total_isValid = false;

    m_sole_tenant_finding_isSet = false;
    m_sole_tenant_finding_isValid = false;

    m_vmware_engine_finding_isSet = false;
    m_vmware_engine_finding_isValid = false;
}

void OAIReportSummaryGroupPreferenceSetFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryGroupPreferenceSetFinding::fromJsonObject(QJsonObject json) {

    m_compute_engine_finding_isValid = ::OpenAPI::fromJsonValue(m_compute_engine_finding, json[QString("computeEngineFinding")]);
    m_compute_engine_finding_isSet = !json[QString("computeEngineFinding")].isNull() && m_compute_engine_finding_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_machine_preferences_isValid = ::OpenAPI::fromJsonValue(m_machine_preferences, json[QString("machinePreferences")]);
    m_machine_preferences_isSet = !json[QString("machinePreferences")].isNull() && m_machine_preferences_isValid;

    m_monthly_cost_compute_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_compute, json[QString("monthlyCostCompute")]);
    m_monthly_cost_compute_isSet = !json[QString("monthlyCostCompute")].isNull() && m_monthly_cost_compute_isValid;

    m_monthly_cost_network_egress_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_network_egress, json[QString("monthlyCostNetworkEgress")]);
    m_monthly_cost_network_egress_isSet = !json[QString("monthlyCostNetworkEgress")].isNull() && m_monthly_cost_network_egress_isValid;

    m_monthly_cost_os_license_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_os_license, json[QString("monthlyCostOsLicense")]);
    m_monthly_cost_os_license_isSet = !json[QString("monthlyCostOsLicense")].isNull() && m_monthly_cost_os_license_isValid;

    m_monthly_cost_other_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_other, json[QString("monthlyCostOther")]);
    m_monthly_cost_other_isSet = !json[QString("monthlyCostOther")].isNull() && m_monthly_cost_other_isValid;

    m_monthly_cost_storage_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_storage, json[QString("monthlyCostStorage")]);
    m_monthly_cost_storage_isSet = !json[QString("monthlyCostStorage")].isNull() && m_monthly_cost_storage_isValid;

    m_monthly_cost_total_isValid = ::OpenAPI::fromJsonValue(m_monthly_cost_total, json[QString("monthlyCostTotal")]);
    m_monthly_cost_total_isSet = !json[QString("monthlyCostTotal")].isNull() && m_monthly_cost_total_isValid;

    m_sole_tenant_finding_isValid = ::OpenAPI::fromJsonValue(m_sole_tenant_finding, json[QString("soleTenantFinding")]);
    m_sole_tenant_finding_isSet = !json[QString("soleTenantFinding")].isNull() && m_sole_tenant_finding_isValid;

    m_vmware_engine_finding_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_finding, json[QString("vmwareEngineFinding")]);
    m_vmware_engine_finding_isSet = !json[QString("vmwareEngineFinding")].isNull() && m_vmware_engine_finding_isValid;
}

QString OAIReportSummaryGroupPreferenceSetFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryGroupPreferenceSetFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_engine_finding.isSet()) {
        obj.insert(QString("computeEngineFinding"), ::OpenAPI::toJsonValue(m_compute_engine_finding));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_machine_preferences.isSet()) {
        obj.insert(QString("machinePreferences"), ::OpenAPI::toJsonValue(m_machine_preferences));
    }
    if (m_monthly_cost_compute.isSet()) {
        obj.insert(QString("monthlyCostCompute"), ::OpenAPI::toJsonValue(m_monthly_cost_compute));
    }
    if (m_monthly_cost_network_egress.isSet()) {
        obj.insert(QString("monthlyCostNetworkEgress"), ::OpenAPI::toJsonValue(m_monthly_cost_network_egress));
    }
    if (m_monthly_cost_os_license.isSet()) {
        obj.insert(QString("monthlyCostOsLicense"), ::OpenAPI::toJsonValue(m_monthly_cost_os_license));
    }
    if (m_monthly_cost_other.isSet()) {
        obj.insert(QString("monthlyCostOther"), ::OpenAPI::toJsonValue(m_monthly_cost_other));
    }
    if (m_monthly_cost_storage.isSet()) {
        obj.insert(QString("monthlyCostStorage"), ::OpenAPI::toJsonValue(m_monthly_cost_storage));
    }
    if (m_monthly_cost_total.isSet()) {
        obj.insert(QString("monthlyCostTotal"), ::OpenAPI::toJsonValue(m_monthly_cost_total));
    }
    if (m_sole_tenant_finding.isSet()) {
        obj.insert(QString("soleTenantFinding"), ::OpenAPI::toJsonValue(m_sole_tenant_finding));
    }
    if (m_vmware_engine_finding.isSet()) {
        obj.insert(QString("vmwareEngineFinding"), ::OpenAPI::toJsonValue(m_vmware_engine_finding));
    }
    return obj;
}

OAIReportSummaryComputeEngineFinding OAIReportSummaryGroupPreferenceSetFinding::getComputeEngineFinding() const {
    return m_compute_engine_finding;
}
void OAIReportSummaryGroupPreferenceSetFinding::setComputeEngineFinding(const OAIReportSummaryComputeEngineFinding &compute_engine_finding) {
    m_compute_engine_finding = compute_engine_finding;
    m_compute_engine_finding_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_compute_engine_finding_Set() const{
    return m_compute_engine_finding_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_compute_engine_finding_Valid() const{
    return m_compute_engine_finding_isValid;
}

QString OAIReportSummaryGroupPreferenceSetFinding::getDescription() const {
    return m_description;
}
void OAIReportSummaryGroupPreferenceSetFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReportSummaryGroupPreferenceSetFinding::getDisplayName() const {
    return m_display_name;
}
void OAIReportSummaryGroupPreferenceSetFinding::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIVirtualMachinePreferences OAIReportSummaryGroupPreferenceSetFinding::getMachinePreferences() const {
    return m_machine_preferences;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMachinePreferences(const OAIVirtualMachinePreferences &machine_preferences) {
    m_machine_preferences = machine_preferences;
    m_machine_preferences_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_machine_preferences_Set() const{
    return m_machine_preferences_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_machine_preferences_Valid() const{
    return m_machine_preferences_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostCompute() const {
    return m_monthly_cost_compute;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostCompute(const OAIMoney &monthly_cost_compute) {
    m_monthly_cost_compute = monthly_cost_compute;
    m_monthly_cost_compute_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_compute_Set() const{
    return m_monthly_cost_compute_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_compute_Valid() const{
    return m_monthly_cost_compute_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostNetworkEgress() const {
    return m_monthly_cost_network_egress;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostNetworkEgress(const OAIMoney &monthly_cost_network_egress) {
    m_monthly_cost_network_egress = monthly_cost_network_egress;
    m_monthly_cost_network_egress_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_network_egress_Set() const{
    return m_monthly_cost_network_egress_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_network_egress_Valid() const{
    return m_monthly_cost_network_egress_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostOsLicense() const {
    return m_monthly_cost_os_license;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostOsLicense(const OAIMoney &monthly_cost_os_license) {
    m_monthly_cost_os_license = monthly_cost_os_license;
    m_monthly_cost_os_license_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_os_license_Set() const{
    return m_monthly_cost_os_license_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_os_license_Valid() const{
    return m_monthly_cost_os_license_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostOther() const {
    return m_monthly_cost_other;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostOther(const OAIMoney &monthly_cost_other) {
    m_monthly_cost_other = monthly_cost_other;
    m_monthly_cost_other_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_other_Set() const{
    return m_monthly_cost_other_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_other_Valid() const{
    return m_monthly_cost_other_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostStorage() const {
    return m_monthly_cost_storage;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostStorage(const OAIMoney &monthly_cost_storage) {
    m_monthly_cost_storage = monthly_cost_storage;
    m_monthly_cost_storage_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_storage_Set() const{
    return m_monthly_cost_storage_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_storage_Valid() const{
    return m_monthly_cost_storage_isValid;
}

OAIMoney OAIReportSummaryGroupPreferenceSetFinding::getMonthlyCostTotal() const {
    return m_monthly_cost_total;
}
void OAIReportSummaryGroupPreferenceSetFinding::setMonthlyCostTotal(const OAIMoney &monthly_cost_total) {
    m_monthly_cost_total = monthly_cost_total;
    m_monthly_cost_total_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_total_Set() const{
    return m_monthly_cost_total_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_monthly_cost_total_Valid() const{
    return m_monthly_cost_total_isValid;
}

OAIReportSummarySoleTenantFinding OAIReportSummaryGroupPreferenceSetFinding::getSoleTenantFinding() const {
    return m_sole_tenant_finding;
}
void OAIReportSummaryGroupPreferenceSetFinding::setSoleTenantFinding(const OAIReportSummarySoleTenantFinding &sole_tenant_finding) {
    m_sole_tenant_finding = sole_tenant_finding;
    m_sole_tenant_finding_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_sole_tenant_finding_Set() const{
    return m_sole_tenant_finding_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_sole_tenant_finding_Valid() const{
    return m_sole_tenant_finding_isValid;
}

OAIReportSummaryVmwareEngineFinding OAIReportSummaryGroupPreferenceSetFinding::getVmwareEngineFinding() const {
    return m_vmware_engine_finding;
}
void OAIReportSummaryGroupPreferenceSetFinding::setVmwareEngineFinding(const OAIReportSummaryVmwareEngineFinding &vmware_engine_finding) {
    m_vmware_engine_finding = vmware_engine_finding;
    m_vmware_engine_finding_isSet = true;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_vmware_engine_finding_Set() const{
    return m_vmware_engine_finding_isSet;
}

bool OAIReportSummaryGroupPreferenceSetFinding::is_vmware_engine_finding_Valid() const{
    return m_vmware_engine_finding_isValid;
}

bool OAIReportSummaryGroupPreferenceSetFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_engine_finding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_compute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_network_egress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_os_license.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_other.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_cost_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sole_tenant_finding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_finding.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryGroupPreferenceSetFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
