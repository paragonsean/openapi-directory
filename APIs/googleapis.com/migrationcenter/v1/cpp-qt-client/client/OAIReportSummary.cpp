/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummary::OAIReportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummary::OAIReportSummary() {
    this->initializeModel();
}

OAIReportSummary::~OAIReportSummary() {}

void OAIReportSummary::initializeModel() {

    m_all_assets_stats_isSet = false;
    m_all_assets_stats_isValid = false;

    m_group_findings_isSet = false;
    m_group_findings_isValid = false;
}

void OAIReportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummary::fromJsonObject(QJsonObject json) {

    m_all_assets_stats_isValid = ::OpenAPI::fromJsonValue(m_all_assets_stats, json[QString("allAssetsStats")]);
    m_all_assets_stats_isSet = !json[QString("allAssetsStats")].isNull() && m_all_assets_stats_isValid;

    m_group_findings_isValid = ::OpenAPI::fromJsonValue(m_group_findings, json[QString("groupFindings")]);
    m_group_findings_isSet = !json[QString("groupFindings")].isNull() && m_group_findings_isValid;
}

QString OAIReportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_all_assets_stats.isSet()) {
        obj.insert(QString("allAssetsStats"), ::OpenAPI::toJsonValue(m_all_assets_stats));
    }
    if (m_group_findings.size() > 0) {
        obj.insert(QString("groupFindings"), ::OpenAPI::toJsonValue(m_group_findings));
    }
    return obj;
}

OAIReportSummaryAssetAggregateStats OAIReportSummary::getAllAssetsStats() const {
    return m_all_assets_stats;
}
void OAIReportSummary::setAllAssetsStats(const OAIReportSummaryAssetAggregateStats &all_assets_stats) {
    m_all_assets_stats = all_assets_stats;
    m_all_assets_stats_isSet = true;
}

bool OAIReportSummary::is_all_assets_stats_Set() const{
    return m_all_assets_stats_isSet;
}

bool OAIReportSummary::is_all_assets_stats_Valid() const{
    return m_all_assets_stats_isValid;
}

QList<OAIReportSummaryGroupFinding> OAIReportSummary::getGroupFindings() const {
    return m_group_findings;
}
void OAIReportSummary::setGroupFindings(const QList<OAIReportSummaryGroupFinding> &group_findings) {
    m_group_findings = group_findings;
    m_group_findings_isSet = true;
}

bool OAIReportSummary::is_group_findings_Set() const{
    return m_group_findings_isSet;
}

bool OAIReportSummary::is_group_findings_Valid() const{
    return m_group_findings_isValid;
}

bool OAIReportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_assets_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_findings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
