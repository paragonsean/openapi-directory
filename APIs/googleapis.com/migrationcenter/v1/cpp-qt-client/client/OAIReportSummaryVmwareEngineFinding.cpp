/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummaryVmwareEngineFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummaryVmwareEngineFinding::OAIReportSummaryVmwareEngineFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummaryVmwareEngineFinding::OAIReportSummaryVmwareEngineFinding() {
    this->initializeModel();
}

OAIReportSummaryVmwareEngineFinding::~OAIReportSummaryVmwareEngineFinding() {}

void OAIReportSummaryVmwareEngineFinding::initializeModel() {

    m_allocated_asset_count_isSet = false;
    m_allocated_asset_count_isValid = false;

    m_allocated_regions_isSet = false;
    m_allocated_regions_isValid = false;

    m_node_allocations_isSet = false;
    m_node_allocations_isValid = false;
}

void OAIReportSummaryVmwareEngineFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummaryVmwareEngineFinding::fromJsonObject(QJsonObject json) {

    m_allocated_asset_count_isValid = ::OpenAPI::fromJsonValue(m_allocated_asset_count, json[QString("allocatedAssetCount")]);
    m_allocated_asset_count_isSet = !json[QString("allocatedAssetCount")].isNull() && m_allocated_asset_count_isValid;

    m_allocated_regions_isValid = ::OpenAPI::fromJsonValue(m_allocated_regions, json[QString("allocatedRegions")]);
    m_allocated_regions_isSet = !json[QString("allocatedRegions")].isNull() && m_allocated_regions_isValid;

    m_node_allocations_isValid = ::OpenAPI::fromJsonValue(m_node_allocations, json[QString("nodeAllocations")]);
    m_node_allocations_isSet = !json[QString("nodeAllocations")].isNull() && m_node_allocations_isValid;
}

QString OAIReportSummaryVmwareEngineFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummaryVmwareEngineFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_asset_count_isSet) {
        obj.insert(QString("allocatedAssetCount"), ::OpenAPI::toJsonValue(m_allocated_asset_count));
    }
    if (m_allocated_regions.size() > 0) {
        obj.insert(QString("allocatedRegions"), ::OpenAPI::toJsonValue(m_allocated_regions));
    }
    if (m_node_allocations.size() > 0) {
        obj.insert(QString("nodeAllocations"), ::OpenAPI::toJsonValue(m_node_allocations));
    }
    return obj;
}

QString OAIReportSummaryVmwareEngineFinding::getAllocatedAssetCount() const {
    return m_allocated_asset_count;
}
void OAIReportSummaryVmwareEngineFinding::setAllocatedAssetCount(const QString &allocated_asset_count) {
    m_allocated_asset_count = allocated_asset_count;
    m_allocated_asset_count_isSet = true;
}

bool OAIReportSummaryVmwareEngineFinding::is_allocated_asset_count_Set() const{
    return m_allocated_asset_count_isSet;
}

bool OAIReportSummaryVmwareEngineFinding::is_allocated_asset_count_Valid() const{
    return m_allocated_asset_count_isValid;
}

QList<QString> OAIReportSummaryVmwareEngineFinding::getAllocatedRegions() const {
    return m_allocated_regions;
}
void OAIReportSummaryVmwareEngineFinding::setAllocatedRegions(const QList<QString> &allocated_regions) {
    m_allocated_regions = allocated_regions;
    m_allocated_regions_isSet = true;
}

bool OAIReportSummaryVmwareEngineFinding::is_allocated_regions_Set() const{
    return m_allocated_regions_isSet;
}

bool OAIReportSummaryVmwareEngineFinding::is_allocated_regions_Valid() const{
    return m_allocated_regions_isValid;
}

QList<OAIReportSummaryVmwareNodeAllocation> OAIReportSummaryVmwareEngineFinding::getNodeAllocations() const {
    return m_node_allocations;
}
void OAIReportSummaryVmwareEngineFinding::setNodeAllocations(const QList<OAIReportSummaryVmwareNodeAllocation> &node_allocations) {
    m_node_allocations = node_allocations;
    m_node_allocations_isSet = true;
}

bool OAIReportSummaryVmwareEngineFinding::is_node_allocations_Set() const{
    return m_node_allocations_isSet;
}

bool OAIReportSummaryVmwareEngineFinding::is_node_allocations_Valid() const{
    return m_node_allocations_isValid;
}

bool OAIReportSummaryVmwareEngineFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocated_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummaryVmwareEngineFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
