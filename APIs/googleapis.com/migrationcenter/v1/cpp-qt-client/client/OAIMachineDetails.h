/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMachineDetails.h
 *
 * Details of a machine.
 */

#ifndef OAIMachineDetails_H
#define OAIMachineDetails_H

#include <QJsonObject>

#include "OAIGuestOsDetails.h"
#include "OAIMachineArchitectureDetails.h"
#include "OAIMachineDiskDetails.h"
#include "OAIMachineNetworkDetails.h"
#include "OAIPlatformDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMachineArchitectureDetails;
class OAIMachineDiskDetails;
class OAIGuestOsDetails;
class OAIMachineNetworkDetails;
class OAIPlatformDetails;

class OAIMachineDetails : public OAIObject {
public:
    OAIMachineDetails();
    OAIMachineDetails(QString json);
    ~OAIMachineDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMachineArchitectureDetails getArchitecture() const;
    void setArchitecture(const OAIMachineArchitectureDetails &architecture);
    bool is_architecture_Set() const;
    bool is_architecture_Valid() const;

    qint32 getCoreCount() const;
    void setCoreCount(const qint32 &core_count);
    bool is_core_count_Set() const;
    bool is_core_count_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAIMachineDiskDetails getDisks() const;
    void setDisks(const OAIMachineDiskDetails &disks);
    bool is_disks_Set() const;
    bool is_disks_Valid() const;

    OAIGuestOsDetails getGuestOs() const;
    void setGuestOs(const OAIGuestOsDetails &guest_os);
    bool is_guest_os_Set() const;
    bool is_guest_os_Valid() const;

    QString getMachineName() const;
    void setMachineName(const QString &machine_name);
    bool is_machine_name_Set() const;
    bool is_machine_name_Valid() const;

    qint32 getMemoryMb() const;
    void setMemoryMb(const qint32 &memory_mb);
    bool is_memory_mb_Set() const;
    bool is_memory_mb_Valid() const;

    OAIMachineNetworkDetails getNetwork() const;
    void setNetwork(const OAIMachineNetworkDetails &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    OAIPlatformDetails getPlatform() const;
    void setPlatform(const OAIPlatformDetails &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getPowerState() const;
    void setPowerState(const QString &power_state);
    bool is_power_state_Set() const;
    bool is_power_state_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMachineArchitectureDetails m_architecture;
    bool m_architecture_isSet;
    bool m_architecture_isValid;

    qint32 m_core_count;
    bool m_core_count_isSet;
    bool m_core_count_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAIMachineDiskDetails m_disks;
    bool m_disks_isSet;
    bool m_disks_isValid;

    OAIGuestOsDetails m_guest_os;
    bool m_guest_os_isSet;
    bool m_guest_os_isValid;

    QString m_machine_name;
    bool m_machine_name_isSet;
    bool m_machine_name_isValid;

    qint32 m_memory_mb;
    bool m_memory_mb_isSet;
    bool m_memory_mb_isValid;

    OAIMachineNetworkDetails m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    OAIPlatformDetails m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_power_state;
    bool m_power_state_isSet;
    bool m_power_state_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMachineDetails)

#endif // OAIMachineDetails_H
