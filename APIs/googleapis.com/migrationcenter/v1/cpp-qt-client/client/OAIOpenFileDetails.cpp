/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenFileDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenFileDetails::OAIOpenFileDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenFileDetails::OAIOpenFileDetails() {
    this->initializeModel();
}

OAIOpenFileDetails::~OAIOpenFileDetails() {}

void OAIOpenFileDetails::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOpenFileDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenFileDetails::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOpenFileDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenFileDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIOpenFileDetails::getCommand() const {
    return m_command;
}
void OAIOpenFileDetails::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIOpenFileDetails::is_command_Set() const{
    return m_command_isSet;
}

bool OAIOpenFileDetails::is_command_Valid() const{
    return m_command_isValid;
}

QString OAIOpenFileDetails::getFilePath() const {
    return m_file_path;
}
void OAIOpenFileDetails::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIOpenFileDetails::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIOpenFileDetails::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIOpenFileDetails::getFileType() const {
    return m_file_type;
}
void OAIOpenFileDetails::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIOpenFileDetails::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIOpenFileDetails::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAIOpenFileDetails::getUser() const {
    return m_user;
}
void OAIOpenFileDetails::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOpenFileDetails::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOpenFileDetails::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOpenFileDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenFileDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
