/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestConfigDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestConfigDetails::OAIGuestConfigDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestConfigDetails::OAIGuestConfigDetails() {
    this->initializeModel();
}

OAIGuestConfigDetails::~OAIGuestConfigDetails() {}

void OAIGuestConfigDetails::initializeModel() {

    m_fstab_isSet = false;
    m_fstab_isValid = false;

    m_hosts_isSet = false;
    m_hosts_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_nfs_exports_isSet = false;
    m_nfs_exports_isValid = false;

    m_selinux_mode_isSet = false;
    m_selinux_mode_isValid = false;
}

void OAIGuestConfigDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestConfigDetails::fromJsonObject(QJsonObject json) {

    m_fstab_isValid = ::OpenAPI::fromJsonValue(m_fstab, json[QString("fstab")]);
    m_fstab_isSet = !json[QString("fstab")].isNull() && m_fstab_isValid;

    m_hosts_isValid = ::OpenAPI::fromJsonValue(m_hosts, json[QString("hosts")]);
    m_hosts_isSet = !json[QString("hosts")].isNull() && m_hosts_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_nfs_exports_isValid = ::OpenAPI::fromJsonValue(m_nfs_exports, json[QString("nfsExports")]);
    m_nfs_exports_isSet = !json[QString("nfsExports")].isNull() && m_nfs_exports_isValid;

    m_selinux_mode_isValid = ::OpenAPI::fromJsonValue(m_selinux_mode, json[QString("selinuxMode")]);
    m_selinux_mode_isSet = !json[QString("selinuxMode")].isNull() && m_selinux_mode_isValid;
}

QString OAIGuestConfigDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestConfigDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_fstab.isSet()) {
        obj.insert(QString("fstab"), ::OpenAPI::toJsonValue(m_fstab));
    }
    if (m_hosts.isSet()) {
        obj.insert(QString("hosts"), ::OpenAPI::toJsonValue(m_hosts));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_nfs_exports.isSet()) {
        obj.insert(QString("nfsExports"), ::OpenAPI::toJsonValue(m_nfs_exports));
    }
    if (m_selinux_mode_isSet) {
        obj.insert(QString("selinuxMode"), ::OpenAPI::toJsonValue(m_selinux_mode));
    }
    return obj;
}

OAIFstabEntryList OAIGuestConfigDetails::getFstab() const {
    return m_fstab;
}
void OAIGuestConfigDetails::setFstab(const OAIFstabEntryList &fstab) {
    m_fstab = fstab;
    m_fstab_isSet = true;
}

bool OAIGuestConfigDetails::is_fstab_Set() const{
    return m_fstab_isSet;
}

bool OAIGuestConfigDetails::is_fstab_Valid() const{
    return m_fstab_isValid;
}

OAIHostsEntryList OAIGuestConfigDetails::getHosts() const {
    return m_hosts;
}
void OAIGuestConfigDetails::setHosts(const OAIHostsEntryList &hosts) {
    m_hosts = hosts;
    m_hosts_isSet = true;
}

bool OAIGuestConfigDetails::is_hosts_Set() const{
    return m_hosts_isSet;
}

bool OAIGuestConfigDetails::is_hosts_Valid() const{
    return m_hosts_isValid;
}

QString OAIGuestConfigDetails::getIssue() const {
    return m_issue;
}
void OAIGuestConfigDetails::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIGuestConfigDetails::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIGuestConfigDetails::is_issue_Valid() const{
    return m_issue_isValid;
}

OAINfsExportList OAIGuestConfigDetails::getNfsExports() const {
    return m_nfs_exports;
}
void OAIGuestConfigDetails::setNfsExports(const OAINfsExportList &nfs_exports) {
    m_nfs_exports = nfs_exports;
    m_nfs_exports_isSet = true;
}

bool OAIGuestConfigDetails::is_nfs_exports_Set() const{
    return m_nfs_exports_isSet;
}

bool OAIGuestConfigDetails::is_nfs_exports_Valid() const{
    return m_nfs_exports_isValid;
}

QString OAIGuestConfigDetails::getSelinuxMode() const {
    return m_selinux_mode;
}
void OAIGuestConfigDetails::setSelinuxMode(const QString &selinux_mode) {
    m_selinux_mode = selinux_mode;
    m_selinux_mode_isSet = true;
}

bool OAIGuestConfigDetails::is_selinux_mode_Set() const{
    return m_selinux_mode_isSet;
}

bool OAIGuestConfigDetails::is_selinux_mode_Valid() const{
    return m_selinux_mode_isValid;
}

bool OAIGuestConfigDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fstab.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selinux_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestConfigDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
