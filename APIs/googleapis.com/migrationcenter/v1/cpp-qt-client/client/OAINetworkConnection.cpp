/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConnection::OAINetworkConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConnection::OAINetworkConnection() {
    this->initializeModel();
}

OAINetworkConnection::~OAINetworkConnection() {}

void OAINetworkConnection::initializeModel() {

    m_local_ip_address_isSet = false;
    m_local_ip_address_isValid = false;

    m_local_port_isSet = false;
    m_local_port_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_process_name_isSet = false;
    m_process_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_ip_address_isSet = false;
    m_remote_ip_address_isValid = false;

    m_remote_port_isSet = false;
    m_remote_port_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAINetworkConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConnection::fromJsonObject(QJsonObject json) {

    m_local_ip_address_isValid = ::OpenAPI::fromJsonValue(m_local_ip_address, json[QString("localIpAddress")]);
    m_local_ip_address_isSet = !json[QString("localIpAddress")].isNull() && m_local_ip_address_isValid;

    m_local_port_isValid = ::OpenAPI::fromJsonValue(m_local_port, json[QString("localPort")]);
    m_local_port_isSet = !json[QString("localPort")].isNull() && m_local_port_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_process_name_isValid = ::OpenAPI::fromJsonValue(m_process_name, json[QString("processName")]);
    m_process_name_isSet = !json[QString("processName")].isNull() && m_process_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_remote_ip_address_isValid = ::OpenAPI::fromJsonValue(m_remote_ip_address, json[QString("remoteIpAddress")]);
    m_remote_ip_address_isSet = !json[QString("remoteIpAddress")].isNull() && m_remote_ip_address_isValid;

    m_remote_port_isValid = ::OpenAPI::fromJsonValue(m_remote_port, json[QString("remotePort")]);
    m_remote_port_isSet = !json[QString("remotePort")].isNull() && m_remote_port_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAINetworkConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_local_ip_address_isSet) {
        obj.insert(QString("localIpAddress"), ::OpenAPI::toJsonValue(m_local_ip_address));
    }
    if (m_local_port_isSet) {
        obj.insert(QString("localPort"), ::OpenAPI::toJsonValue(m_local_port));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_process_name_isSet) {
        obj.insert(QString("processName"), ::OpenAPI::toJsonValue(m_process_name));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_ip_address_isSet) {
        obj.insert(QString("remoteIpAddress"), ::OpenAPI::toJsonValue(m_remote_ip_address));
    }
    if (m_remote_port_isSet) {
        obj.insert(QString("remotePort"), ::OpenAPI::toJsonValue(m_remote_port));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAINetworkConnection::getLocalIpAddress() const {
    return m_local_ip_address;
}
void OAINetworkConnection::setLocalIpAddress(const QString &local_ip_address) {
    m_local_ip_address = local_ip_address;
    m_local_ip_address_isSet = true;
}

bool OAINetworkConnection::is_local_ip_address_Set() const{
    return m_local_ip_address_isSet;
}

bool OAINetworkConnection::is_local_ip_address_Valid() const{
    return m_local_ip_address_isValid;
}

qint32 OAINetworkConnection::getLocalPort() const {
    return m_local_port;
}
void OAINetworkConnection::setLocalPort(const qint32 &local_port) {
    m_local_port = local_port;
    m_local_port_isSet = true;
}

bool OAINetworkConnection::is_local_port_Set() const{
    return m_local_port_isSet;
}

bool OAINetworkConnection::is_local_port_Valid() const{
    return m_local_port_isValid;
}

QString OAINetworkConnection::getPid() const {
    return m_pid;
}
void OAINetworkConnection::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAINetworkConnection::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAINetworkConnection::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAINetworkConnection::getProcessName() const {
    return m_process_name;
}
void OAINetworkConnection::setProcessName(const QString &process_name) {
    m_process_name = process_name;
    m_process_name_isSet = true;
}

bool OAINetworkConnection::is_process_name_Set() const{
    return m_process_name_isSet;
}

bool OAINetworkConnection::is_process_name_Valid() const{
    return m_process_name_isValid;
}

QString OAINetworkConnection::getProtocol() const {
    return m_protocol;
}
void OAINetworkConnection::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAINetworkConnection::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAINetworkConnection::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAINetworkConnection::getRemoteIpAddress() const {
    return m_remote_ip_address;
}
void OAINetworkConnection::setRemoteIpAddress(const QString &remote_ip_address) {
    m_remote_ip_address = remote_ip_address;
    m_remote_ip_address_isSet = true;
}

bool OAINetworkConnection::is_remote_ip_address_Set() const{
    return m_remote_ip_address_isSet;
}

bool OAINetworkConnection::is_remote_ip_address_Valid() const{
    return m_remote_ip_address_isValid;
}

qint32 OAINetworkConnection::getRemotePort() const {
    return m_remote_port;
}
void OAINetworkConnection::setRemotePort(const qint32 &remote_port) {
    m_remote_port = remote_port;
    m_remote_port_isSet = true;
}

bool OAINetworkConnection::is_remote_port_Set() const{
    return m_remote_port_isSet;
}

bool OAINetworkConnection::is_remote_port_Valid() const{
    return m_remote_port_isValid;
}

QString OAINetworkConnection::getState() const {
    return m_state;
}
void OAINetworkConnection::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINetworkConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAINetworkConnection::is_state_Valid() const{
    return m_state_isValid;
}

bool OAINetworkConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
