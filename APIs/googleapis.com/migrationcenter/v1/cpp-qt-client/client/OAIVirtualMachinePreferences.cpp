/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachinePreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachinePreferences::OAIVirtualMachinePreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachinePreferences::OAIVirtualMachinePreferences() {
    this->initializeModel();
}

OAIVirtualMachinePreferences::~OAIVirtualMachinePreferences() {}

void OAIVirtualMachinePreferences::initializeModel() {

    m_commitment_plan_isSet = false;
    m_commitment_plan_isValid = false;

    m_compute_engine_preferences_isSet = false;
    m_compute_engine_preferences_isValid = false;

    m_region_preferences_isSet = false;
    m_region_preferences_isValid = false;

    m_sizing_optimization_strategy_isSet = false;
    m_sizing_optimization_strategy_isValid = false;

    m_sole_tenancy_preferences_isSet = false;
    m_sole_tenancy_preferences_isValid = false;

    m_target_product_isSet = false;
    m_target_product_isValid = false;

    m_vmware_engine_preferences_isSet = false;
    m_vmware_engine_preferences_isValid = false;
}

void OAIVirtualMachinePreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachinePreferences::fromJsonObject(QJsonObject json) {

    m_commitment_plan_isValid = ::OpenAPI::fromJsonValue(m_commitment_plan, json[QString("commitmentPlan")]);
    m_commitment_plan_isSet = !json[QString("commitmentPlan")].isNull() && m_commitment_plan_isValid;

    m_compute_engine_preferences_isValid = ::OpenAPI::fromJsonValue(m_compute_engine_preferences, json[QString("computeEnginePreferences")]);
    m_compute_engine_preferences_isSet = !json[QString("computeEnginePreferences")].isNull() && m_compute_engine_preferences_isValid;

    m_region_preferences_isValid = ::OpenAPI::fromJsonValue(m_region_preferences, json[QString("regionPreferences")]);
    m_region_preferences_isSet = !json[QString("regionPreferences")].isNull() && m_region_preferences_isValid;

    m_sizing_optimization_strategy_isValid = ::OpenAPI::fromJsonValue(m_sizing_optimization_strategy, json[QString("sizingOptimizationStrategy")]);
    m_sizing_optimization_strategy_isSet = !json[QString("sizingOptimizationStrategy")].isNull() && m_sizing_optimization_strategy_isValid;

    m_sole_tenancy_preferences_isValid = ::OpenAPI::fromJsonValue(m_sole_tenancy_preferences, json[QString("soleTenancyPreferences")]);
    m_sole_tenancy_preferences_isSet = !json[QString("soleTenancyPreferences")].isNull() && m_sole_tenancy_preferences_isValid;

    m_target_product_isValid = ::OpenAPI::fromJsonValue(m_target_product, json[QString("targetProduct")]);
    m_target_product_isSet = !json[QString("targetProduct")].isNull() && m_target_product_isValid;

    m_vmware_engine_preferences_isValid = ::OpenAPI::fromJsonValue(m_vmware_engine_preferences, json[QString("vmwareEnginePreferences")]);
    m_vmware_engine_preferences_isSet = !json[QString("vmwareEnginePreferences")].isNull() && m_vmware_engine_preferences_isValid;
}

QString OAIVirtualMachinePreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachinePreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_plan_isSet) {
        obj.insert(QString("commitmentPlan"), ::OpenAPI::toJsonValue(m_commitment_plan));
    }
    if (m_compute_engine_preferences.isSet()) {
        obj.insert(QString("computeEnginePreferences"), ::OpenAPI::toJsonValue(m_compute_engine_preferences));
    }
    if (m_region_preferences.isSet()) {
        obj.insert(QString("regionPreferences"), ::OpenAPI::toJsonValue(m_region_preferences));
    }
    if (m_sizing_optimization_strategy_isSet) {
        obj.insert(QString("sizingOptimizationStrategy"), ::OpenAPI::toJsonValue(m_sizing_optimization_strategy));
    }
    if (m_sole_tenancy_preferences.isSet()) {
        obj.insert(QString("soleTenancyPreferences"), ::OpenAPI::toJsonValue(m_sole_tenancy_preferences));
    }
    if (m_target_product_isSet) {
        obj.insert(QString("targetProduct"), ::OpenAPI::toJsonValue(m_target_product));
    }
    if (m_vmware_engine_preferences.isSet()) {
        obj.insert(QString("vmwareEnginePreferences"), ::OpenAPI::toJsonValue(m_vmware_engine_preferences));
    }
    return obj;
}

QString OAIVirtualMachinePreferences::getCommitmentPlan() const {
    return m_commitment_plan;
}
void OAIVirtualMachinePreferences::setCommitmentPlan(const QString &commitment_plan) {
    m_commitment_plan = commitment_plan;
    m_commitment_plan_isSet = true;
}

bool OAIVirtualMachinePreferences::is_commitment_plan_Set() const{
    return m_commitment_plan_isSet;
}

bool OAIVirtualMachinePreferences::is_commitment_plan_Valid() const{
    return m_commitment_plan_isValid;
}

OAIComputeEnginePreferences OAIVirtualMachinePreferences::getComputeEnginePreferences() const {
    return m_compute_engine_preferences;
}
void OAIVirtualMachinePreferences::setComputeEnginePreferences(const OAIComputeEnginePreferences &compute_engine_preferences) {
    m_compute_engine_preferences = compute_engine_preferences;
    m_compute_engine_preferences_isSet = true;
}

bool OAIVirtualMachinePreferences::is_compute_engine_preferences_Set() const{
    return m_compute_engine_preferences_isSet;
}

bool OAIVirtualMachinePreferences::is_compute_engine_preferences_Valid() const{
    return m_compute_engine_preferences_isValid;
}

OAIRegionPreferences OAIVirtualMachinePreferences::getRegionPreferences() const {
    return m_region_preferences;
}
void OAIVirtualMachinePreferences::setRegionPreferences(const OAIRegionPreferences &region_preferences) {
    m_region_preferences = region_preferences;
    m_region_preferences_isSet = true;
}

bool OAIVirtualMachinePreferences::is_region_preferences_Set() const{
    return m_region_preferences_isSet;
}

bool OAIVirtualMachinePreferences::is_region_preferences_Valid() const{
    return m_region_preferences_isValid;
}

QString OAIVirtualMachinePreferences::getSizingOptimizationStrategy() const {
    return m_sizing_optimization_strategy;
}
void OAIVirtualMachinePreferences::setSizingOptimizationStrategy(const QString &sizing_optimization_strategy) {
    m_sizing_optimization_strategy = sizing_optimization_strategy;
    m_sizing_optimization_strategy_isSet = true;
}

bool OAIVirtualMachinePreferences::is_sizing_optimization_strategy_Set() const{
    return m_sizing_optimization_strategy_isSet;
}

bool OAIVirtualMachinePreferences::is_sizing_optimization_strategy_Valid() const{
    return m_sizing_optimization_strategy_isValid;
}

OAISoleTenancyPreferences OAIVirtualMachinePreferences::getSoleTenancyPreferences() const {
    return m_sole_tenancy_preferences;
}
void OAIVirtualMachinePreferences::setSoleTenancyPreferences(const OAISoleTenancyPreferences &sole_tenancy_preferences) {
    m_sole_tenancy_preferences = sole_tenancy_preferences;
    m_sole_tenancy_preferences_isSet = true;
}

bool OAIVirtualMachinePreferences::is_sole_tenancy_preferences_Set() const{
    return m_sole_tenancy_preferences_isSet;
}

bool OAIVirtualMachinePreferences::is_sole_tenancy_preferences_Valid() const{
    return m_sole_tenancy_preferences_isValid;
}

QString OAIVirtualMachinePreferences::getTargetProduct() const {
    return m_target_product;
}
void OAIVirtualMachinePreferences::setTargetProduct(const QString &target_product) {
    m_target_product = target_product;
    m_target_product_isSet = true;
}

bool OAIVirtualMachinePreferences::is_target_product_Set() const{
    return m_target_product_isSet;
}

bool OAIVirtualMachinePreferences::is_target_product_Valid() const{
    return m_target_product_isValid;
}

OAIVmwareEnginePreferences OAIVirtualMachinePreferences::getVmwareEnginePreferences() const {
    return m_vmware_engine_preferences;
}
void OAIVirtualMachinePreferences::setVmwareEnginePreferences(const OAIVmwareEnginePreferences &vmware_engine_preferences) {
    m_vmware_engine_preferences = vmware_engine_preferences;
    m_vmware_engine_preferences_isSet = true;
}

bool OAIVirtualMachinePreferences::is_vmware_engine_preferences_Set() const{
    return m_vmware_engine_preferences_isSet;
}

bool OAIVirtualMachinePreferences::is_vmware_engine_preferences_Valid() const{
    return m_vmware_engine_preferences_isValid;
}

bool OAIVirtualMachinePreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_engine_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sizing_optimization_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sole_tenancy_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_engine_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachinePreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
