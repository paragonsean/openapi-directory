/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBiosDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBiosDetails::OAIBiosDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBiosDetails::OAIBiosDetails() {
    this->initializeModel();
}

OAIBiosDetails::~OAIBiosDetails() {}

void OAIBiosDetails::initializeModel() {

    m_bios_name_isSet = false;
    m_bios_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_smbios_uuid_isSet = false;
    m_smbios_uuid_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBiosDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBiosDetails::fromJsonObject(QJsonObject json) {

    m_bios_name_isValid = ::OpenAPI::fromJsonValue(m_bios_name, json[QString("biosName")]);
    m_bios_name_isSet = !json[QString("biosName")].isNull() && m_bios_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_smbios_uuid_isValid = ::OpenAPI::fromJsonValue(m_smbios_uuid, json[QString("smbiosUuid")]);
    m_smbios_uuid_isSet = !json[QString("smbiosUuid")].isNull() && m_smbios_uuid_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBiosDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBiosDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bios_name_isSet) {
        obj.insert(QString("biosName"), ::OpenAPI::toJsonValue(m_bios_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_release_date.isSet()) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_smbios_uuid_isSet) {
        obj.insert(QString("smbiosUuid"), ::OpenAPI::toJsonValue(m_smbios_uuid));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIBiosDetails::getBiosName() const {
    return m_bios_name;
}
void OAIBiosDetails::setBiosName(const QString &bios_name) {
    m_bios_name = bios_name;
    m_bios_name_isSet = true;
}

bool OAIBiosDetails::is_bios_name_Set() const{
    return m_bios_name_isSet;
}

bool OAIBiosDetails::is_bios_name_Valid() const{
    return m_bios_name_isValid;
}

QString OAIBiosDetails::getId() const {
    return m_id;
}
void OAIBiosDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBiosDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBiosDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBiosDetails::getManufacturer() const {
    return m_manufacturer;
}
void OAIBiosDetails::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIBiosDetails::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIBiosDetails::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

OAIDate OAIBiosDetails::getReleaseDate() const {
    return m_release_date;
}
void OAIBiosDetails::setReleaseDate(const OAIDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIBiosDetails::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIBiosDetails::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QString OAIBiosDetails::getSmbiosUuid() const {
    return m_smbios_uuid;
}
void OAIBiosDetails::setSmbiosUuid(const QString &smbios_uuid) {
    m_smbios_uuid = smbios_uuid;
    m_smbios_uuid_isSet = true;
}

bool OAIBiosDetails::is_smbios_uuid_Set() const{
    return m_smbios_uuid_isSet;
}

bool OAIBiosDetails::is_smbios_uuid_Valid() const{
    return m_smbios_uuid_isValid;
}

QString OAIBiosDetails::getVersion() const {
    return m_version;
}
void OAIBiosDetails::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBiosDetails::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBiosDetails::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBiosDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bios_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_smbios_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBiosDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
