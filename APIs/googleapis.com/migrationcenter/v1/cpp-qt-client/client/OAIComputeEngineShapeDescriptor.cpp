/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeEngineShapeDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeEngineShapeDescriptor::OAIComputeEngineShapeDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeEngineShapeDescriptor::OAIComputeEngineShapeDescriptor() {
    this->initializeModel();
}

OAIComputeEngineShapeDescriptor::~OAIComputeEngineShapeDescriptor() {}

void OAIComputeEngineShapeDescriptor::initializeModel() {

    m_logical_core_count_isSet = false;
    m_logical_core_count_isValid = false;

    m_machine_type_isSet = false;
    m_machine_type_isValid = false;

    m_memory_mb_isSet = false;
    m_memory_mb_isValid = false;

    m_physical_core_count_isSet = false;
    m_physical_core_count_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;
}

void OAIComputeEngineShapeDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeEngineShapeDescriptor::fromJsonObject(QJsonObject json) {

    m_logical_core_count_isValid = ::OpenAPI::fromJsonValue(m_logical_core_count, json[QString("logicalCoreCount")]);
    m_logical_core_count_isSet = !json[QString("logicalCoreCount")].isNull() && m_logical_core_count_isValid;

    m_machine_type_isValid = ::OpenAPI::fromJsonValue(m_machine_type, json[QString("machineType")]);
    m_machine_type_isSet = !json[QString("machineType")].isNull() && m_machine_type_isValid;

    m_memory_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_mb, json[QString("memoryMb")]);
    m_memory_mb_isSet = !json[QString("memoryMb")].isNull() && m_memory_mb_isValid;

    m_physical_core_count_isValid = ::OpenAPI::fromJsonValue(m_physical_core_count, json[QString("physicalCoreCount")]);
    m_physical_core_count_isSet = !json[QString("physicalCoreCount")].isNull() && m_physical_core_count_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("storage")]);
    m_storage_isSet = !json[QString("storage")].isNull() && m_storage_isValid;
}

QString OAIComputeEngineShapeDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeEngineShapeDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_logical_core_count_isSet) {
        obj.insert(QString("logicalCoreCount"), ::OpenAPI::toJsonValue(m_logical_core_count));
    }
    if (m_machine_type_isSet) {
        obj.insert(QString("machineType"), ::OpenAPI::toJsonValue(m_machine_type));
    }
    if (m_memory_mb_isSet) {
        obj.insert(QString("memoryMb"), ::OpenAPI::toJsonValue(m_memory_mb));
    }
    if (m_physical_core_count_isSet) {
        obj.insert(QString("physicalCoreCount"), ::OpenAPI::toJsonValue(m_physical_core_count));
    }
    if (m_series_isSet) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_storage.size() > 0) {
        obj.insert(QString("storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    return obj;
}

qint32 OAIComputeEngineShapeDescriptor::getLogicalCoreCount() const {
    return m_logical_core_count;
}
void OAIComputeEngineShapeDescriptor::setLogicalCoreCount(const qint32 &logical_core_count) {
    m_logical_core_count = logical_core_count;
    m_logical_core_count_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_logical_core_count_Set() const{
    return m_logical_core_count_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_logical_core_count_Valid() const{
    return m_logical_core_count_isValid;
}

QString OAIComputeEngineShapeDescriptor::getMachineType() const {
    return m_machine_type;
}
void OAIComputeEngineShapeDescriptor::setMachineType(const QString &machine_type) {
    m_machine_type = machine_type;
    m_machine_type_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_machine_type_Set() const{
    return m_machine_type_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_machine_type_Valid() const{
    return m_machine_type_isValid;
}

qint32 OAIComputeEngineShapeDescriptor::getMemoryMb() const {
    return m_memory_mb;
}
void OAIComputeEngineShapeDescriptor::setMemoryMb(const qint32 &memory_mb) {
    m_memory_mb = memory_mb;
    m_memory_mb_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_memory_mb_Set() const{
    return m_memory_mb_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_memory_mb_Valid() const{
    return m_memory_mb_isValid;
}

qint32 OAIComputeEngineShapeDescriptor::getPhysicalCoreCount() const {
    return m_physical_core_count;
}
void OAIComputeEngineShapeDescriptor::setPhysicalCoreCount(const qint32 &physical_core_count) {
    m_physical_core_count = physical_core_count;
    m_physical_core_count_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_physical_core_count_Set() const{
    return m_physical_core_count_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_physical_core_count_Valid() const{
    return m_physical_core_count_isValid;
}

QString OAIComputeEngineShapeDescriptor::getSeries() const {
    return m_series;
}
void OAIComputeEngineShapeDescriptor::setSeries(const QString &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_series_Set() const{
    return m_series_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_series_Valid() const{
    return m_series_isValid;
}

QList<OAIComputeStorageDescriptor> OAIComputeEngineShapeDescriptor::getStorage() const {
    return m_storage;
}
void OAIComputeEngineShapeDescriptor::setStorage(const QList<OAIComputeStorageDescriptor> &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIComputeEngineShapeDescriptor::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIComputeEngineShapeDescriptor::is_storage_Valid() const{
    return m_storage_isValid;
}

bool OAIComputeEngineShapeDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logical_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_core_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeEngineShapeDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
