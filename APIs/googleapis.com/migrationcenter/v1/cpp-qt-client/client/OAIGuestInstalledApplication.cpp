/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestInstalledApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestInstalledApplication::OAIGuestInstalledApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestInstalledApplication::OAIGuestInstalledApplication() {
    this->initializeModel();
}

OAIGuestInstalledApplication::~OAIGuestInstalledApplication() {}

void OAIGuestInstalledApplication::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_install_time_isSet = false;
    m_install_time_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGuestInstalledApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestInstalledApplication::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("applicationName")]);
    m_application_name_isSet = !json[QString("applicationName")].isNull() && m_application_name_isValid;

    m_install_time_isValid = ::OpenAPI::fromJsonValue(m_install_time, json[QString("installTime")]);
    m_install_time_isSet = !json[QString("installTime")].isNull() && m_install_time_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGuestInstalledApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestInstalledApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("applicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_install_time_isSet) {
        obj.insert(QString("installTime"), ::OpenAPI::toJsonValue(m_install_time));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGuestInstalledApplication::getApplicationName() const {
    return m_application_name;
}
void OAIGuestInstalledApplication::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAIGuestInstalledApplication::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAIGuestInstalledApplication::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAIGuestInstalledApplication::getInstallTime() const {
    return m_install_time;
}
void OAIGuestInstalledApplication::setInstallTime(const QString &install_time) {
    m_install_time = install_time;
    m_install_time_isSet = true;
}

bool OAIGuestInstalledApplication::is_install_time_Set() const{
    return m_install_time_isSet;
}

bool OAIGuestInstalledApplication::is_install_time_Valid() const{
    return m_install_time_isValid;
}

QList<QString> OAIGuestInstalledApplication::getLicenses() const {
    return m_licenses;
}
void OAIGuestInstalledApplication::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIGuestInstalledApplication::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIGuestInstalledApplication::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QString OAIGuestInstalledApplication::getPath() const {
    return m_path;
}
void OAIGuestInstalledApplication::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGuestInstalledApplication::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGuestInstalledApplication::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGuestInstalledApplication::getVendor() const {
    return m_vendor;
}
void OAIGuestInstalledApplication::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIGuestInstalledApplication::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIGuestInstalledApplication::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QString OAIGuestInstalledApplication::getVersion() const {
    return m_version;
}
void OAIGuestInstalledApplication::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGuestInstalledApplication::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGuestInstalledApplication::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGuestInstalledApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestInstalledApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
