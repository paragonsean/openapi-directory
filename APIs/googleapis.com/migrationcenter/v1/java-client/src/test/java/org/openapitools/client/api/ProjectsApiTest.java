/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddAssetsToGroupRequest;
import org.openapitools.client.model.AggregateAssetsValuesRequest;
import org.openapitools.client.model.AggregateAssetsValuesResponse;
import org.openapitools.client.model.BatchDeleteAssetsRequest;
import org.openapitools.client.model.BatchUpdateAssetsRequest;
import org.openapitools.client.model.BatchUpdateAssetsResponse;
import org.openapitools.client.model.ErrorFrame;
import org.openapitools.client.model.Frames;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.ImportDataFile;
import org.openapitools.client.model.ImportJob;
import org.openapitools.client.model.ListAssetsResponse;
import org.openapitools.client.model.ListErrorFramesResponse;
import org.openapitools.client.model.ListGroupsResponse;
import org.openapitools.client.model.ListImportDataFilesResponse;
import org.openapitools.client.model.ListImportJobsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListPreferenceSetsResponse;
import org.openapitools.client.model.ListReportConfigsResponse;
import org.openapitools.client.model.ListReportsResponse;
import org.openapitools.client.model.ListSourcesResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PreferenceSet;
import org.openapitools.client.model.RemoveAssetsFromGroupRequest;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportConfig;
import org.openapitools.client.model.RunImportJobRequest;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.ValidateImportJobRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Aggregates the requested fields based on provided function.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsAssetsAggregateValuesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AggregateAssetsValuesRequest aggregateAssetsValuesRequest = null;
        AggregateAssetsValuesResponse response = api.migrationcenterProjectsLocationsAssetsAggregateValues(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, aggregateAssetsValuesRequest);
        // TODO: test validations
    }

    /**
     * Deletes list of Assets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsAssetsBatchDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeleteAssetsRequest batchDeleteAssetsRequest = null;
        Object response = api.migrationcenterProjectsLocationsAssetsBatchDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeleteAssetsRequest);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a list of assets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsAssetsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateAssetsRequest batchUpdateAssetsRequest = null;
        BatchUpdateAssetsResponse response = api.migrationcenterProjectsLocationsAssetsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateAssetsRequest);
        // TODO: test validations
    }

    /**
     * Lists all the assets in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsAssetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListAssetsResponse response = api.migrationcenterProjectsLocationsAssetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Reports a set of frames.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsAssetsReportAssetFramesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String source = null;
        Frames frames = null;
        Object response = api.migrationcenterProjectsLocationsAssetsReportAssetFrames(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, source, frames);
        // TODO: test validations
    }

    /**
     * Adds assets to a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsGroupsAddAssetsTest() throws ApiException {
        String group = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddAssetsToGroupRequest addAssetsToGroupRequest = null;
        Operation response = api.migrationcenterProjectsLocationsGroupsAddAssets(group, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addAssetsToGroupRequest);
        // TODO: test validations
    }

    /**
     * Creates a new group in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String groupId = null;
        String requestId = null;
        Group group = null;
        Operation response = api.migrationcenterProjectsLocationsGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, groupId, requestId, group);
        // TODO: test validations
    }

    /**
     * Lists all groups in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGroupsResponse response = api.migrationcenterProjectsLocationsGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes assets from a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsGroupsRemoveAssetsTest() throws ApiException {
        String group = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveAssetsFromGroupRequest removeAssetsFromGroupRequest = null;
        Operation response = api.migrationcenterProjectsLocationsGroupsRemoveAssets(group, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeAssetsFromGroupRequest);
        // TODO: test validations
    }

    /**
     * Creates an import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String importJobId = null;
        String requestId = null;
        ImportJob importJob = null;
        Operation response = api.migrationcenterProjectsLocationsImportJobsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importJobId, requestId, importJob);
        // TODO: test validations
    }

    /**
     * Creates an import data file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsImportDataFilesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String importDataFileId = null;
        String requestId = null;
        ImportDataFile importDataFile = null;
        Operation response = api.migrationcenterProjectsLocationsImportJobsImportDataFilesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importDataFileId, requestId, importDataFile);
        // TODO: test validations
    }

    /**
     * List import data files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsImportDataFilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListImportDataFilesResponse response = api.migrationcenterProjectsLocationsImportJobsImportDataFilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListImportJobsResponse response = api.migrationcenterProjectsLocationsImportJobsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Runs an import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsRunTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RunImportJobRequest runImportJobRequest = null;
        Operation response = api.migrationcenterProjectsLocationsImportJobsRun(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, runImportJobRequest);
        // TODO: test validations
    }

    /**
     * Validates an import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsImportJobsValidateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ValidateImportJobRequest validateImportJobRequest = null;
        Operation response = api.migrationcenterProjectsLocationsImportJobsValidate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, validateImportJobRequest);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.migrationcenterProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.migrationcenterProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.migrationcenterProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new preference set in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsPreferenceSetsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String preferenceSetId = null;
        String requestId = null;
        PreferenceSet preferenceSet = null;
        Operation response = api.migrationcenterProjectsLocationsPreferenceSetsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, preferenceSetId, requestId, preferenceSet);
        // TODO: test validations
    }

    /**
     * Lists all the preference sets in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsPreferenceSetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPreferenceSetsResponse response = api.migrationcenterProjectsLocationsPreferenceSetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a report configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsReportConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String reportConfigId = null;
        String requestId = null;
        ReportConfig reportConfig = null;
        Operation response = api.migrationcenterProjectsLocationsReportConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportConfigId, requestId, reportConfig);
        // TODO: test validations
    }

    /**
     * Lists ReportConfigs in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsReportConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReportConfigsResponse response = api.migrationcenterProjectsLocationsReportConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsReportConfigsReportsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String reportId = null;
        String requestId = null;
        Report report = null;
        Operation response = api.migrationcenterProjectsLocationsReportConfigsReportsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportId, requestId, report);
        // TODO: test validations
    }

    /**
     * Lists Reports in a given ReportConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsReportConfigsReportsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListReportsResponse response = api.migrationcenterProjectsLocationsReportConfigsReportsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Creates a new source in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String sourceId = null;
        Source source = null;
        Operation response = api.migrationcenterProjectsLocationsSourcesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, sourceId, source);
        // TODO: test validations
    }

    /**
     * Deletes a source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        Operation response = api.migrationcenterProjectsLocationsSourcesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Gets the details of an error frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesErrorFramesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        ErrorFrame response = api.migrationcenterProjectsLocationsSourcesErrorFramesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists all error frames in a given source and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesErrorFramesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListErrorFramesResponse response = api.migrationcenterProjectsLocationsSourcesErrorFramesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Lists all the sources in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSourcesResponse response = api.migrationcenterProjectsLocationsSourcesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void migrationcenterProjectsLocationsSourcesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String updateMask = null;
        Source source = null;
        Operation response = api.migrationcenterProjectsLocationsSourcesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, updateMask, source);
        // TODO: test validations
    }

}
