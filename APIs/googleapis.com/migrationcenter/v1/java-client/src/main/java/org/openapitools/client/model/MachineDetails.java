/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GuestOsDetails;
import org.openapitools.client.model.MachineArchitectureDetails;
import org.openapitools.client.model.MachineDiskDetails;
import org.openapitools.client.model.MachineNetworkDetails;
import org.openapitools.client.model.PlatformDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of a machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MachineDetails {
  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private MachineArchitectureDetails architecture;

  public static final String SERIALIZED_NAME_CORE_COUNT = "coreCount";
  @SerializedName(SERIALIZED_NAME_CORE_COUNT)
  private Integer coreCount;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private MachineDiskDetails disks;

  public static final String SERIALIZED_NAME_GUEST_OS = "guestOs";
  @SerializedName(SERIALIZED_NAME_GUEST_OS)
  private GuestOsDetails guestOs;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "machineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  public static final String SERIALIZED_NAME_MEMORY_MB = "memoryMb";
  @SerializedName(SERIALIZED_NAME_MEMORY_MB)
  private Integer memoryMb;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private MachineNetworkDetails network;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformDetails platform;

  /**
   * Power state of the machine.
   */
  @JsonAdapter(PowerStateEnum.Adapter.class)
  public enum PowerStateEnum {
    POWER_STATE_UNSPECIFIED("POWER_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDING("SUSPENDING"),
    
    SUSPENDED("SUSPENDED"),
    
    DELETING("DELETING"),
    
    DELETED("DELETED");

    private String value;

    PowerStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerStateEnum fromValue(String value) {
      for (PowerStateEnum b : PowerStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PowerStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PowerStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PowerStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POWER_STATE = "powerState";
  @SerializedName(SERIALIZED_NAME_POWER_STATE)
  private PowerStateEnum powerState;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public MachineDetails() {
  }

  public MachineDetails architecture(MachineArchitectureDetails architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public MachineArchitectureDetails getArchitecture() {
    return architecture;
  }

  public void setArchitecture(MachineArchitectureDetails architecture) {
    this.architecture = architecture;
  }


  public MachineDetails coreCount(Integer coreCount) {
    this.coreCount = coreCount;
    return this;
  }

  /**
   * Number of CPU cores in the machine. Must be non-negative.
   * @return coreCount
   */
  @javax.annotation.Nullable
  public Integer getCoreCount() {
    return coreCount;
  }

  public void setCoreCount(Integer coreCount) {
    this.coreCount = coreCount;
  }


  public MachineDetails createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Machine creation time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public MachineDetails disks(MachineDiskDetails disks) {
    this.disks = disks;
    return this;
  }

  /**
   * Get disks
   * @return disks
   */
  @javax.annotation.Nullable
  public MachineDiskDetails getDisks() {
    return disks;
  }

  public void setDisks(MachineDiskDetails disks) {
    this.disks = disks;
  }


  public MachineDetails guestOs(GuestOsDetails guestOs) {
    this.guestOs = guestOs;
    return this;
  }

  /**
   * Get guestOs
   * @return guestOs
   */
  @javax.annotation.Nullable
  public GuestOsDetails getGuestOs() {
    return guestOs;
  }

  public void setGuestOs(GuestOsDetails guestOs) {
    this.guestOs = guestOs;
  }


  public MachineDetails machineName(String machineName) {
    this.machineName = machineName;
    return this;
  }

  /**
   * Machine name.
   * @return machineName
   */
  @javax.annotation.Nullable
  public String getMachineName() {
    return machineName;
  }

  public void setMachineName(String machineName) {
    this.machineName = machineName;
  }


  public MachineDetails memoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * The amount of memory in the machine. Must be non-negative.
   * @return memoryMb
   */
  @javax.annotation.Nullable
  public Integer getMemoryMb() {
    return memoryMb;
  }

  public void setMemoryMb(Integer memoryMb) {
    this.memoryMb = memoryMb;
  }


  public MachineDetails network(MachineNetworkDetails network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nullable
  public MachineNetworkDetails getNetwork() {
    return network;
  }

  public void setNetwork(MachineNetworkDetails network) {
    this.network = network;
  }


  public MachineDetails platform(PlatformDetails platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformDetails getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformDetails platform) {
    this.platform = platform;
  }


  public MachineDetails powerState(PowerStateEnum powerState) {
    this.powerState = powerState;
    return this;
  }

  /**
   * Power state of the machine.
   * @return powerState
   */
  @javax.annotation.Nullable
  public PowerStateEnum getPowerState() {
    return powerState;
  }

  public void setPowerState(PowerStateEnum powerState) {
    this.powerState = powerState;
  }


  public MachineDetails uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Machine unique identifier.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineDetails machineDetails = (MachineDetails) o;
    return Objects.equals(this.architecture, machineDetails.architecture) &&
        Objects.equals(this.coreCount, machineDetails.coreCount) &&
        Objects.equals(this.createTime, machineDetails.createTime) &&
        Objects.equals(this.disks, machineDetails.disks) &&
        Objects.equals(this.guestOs, machineDetails.guestOs) &&
        Objects.equals(this.machineName, machineDetails.machineName) &&
        Objects.equals(this.memoryMb, machineDetails.memoryMb) &&
        Objects.equals(this.network, machineDetails.network) &&
        Objects.equals(this.platform, machineDetails.platform) &&
        Objects.equals(this.powerState, machineDetails.powerState) &&
        Objects.equals(this.uuid, machineDetails.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, coreCount, createTime, disks, guestOs, machineName, memoryMb, network, platform, powerState, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineDetails {\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    coreCount: ").append(toIndentedString(coreCount)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    guestOs: ").append(toIndentedString(guestOs)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    memoryMb: ").append(toIndentedString(memoryMb)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    powerState: ").append(toIndentedString(powerState)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("architecture");
    openapiFields.add("coreCount");
    openapiFields.add("createTime");
    openapiFields.add("disks");
    openapiFields.add("guestOs");
    openapiFields.add("machineName");
    openapiFields.add("memoryMb");
    openapiFields.add("network");
    openapiFields.add("platform");
    openapiFields.add("powerState");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MachineDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MachineDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MachineDetails is not found in the empty JSON string", MachineDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MachineDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MachineDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `architecture`
      if (jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) {
        MachineArchitectureDetails.validateJsonElement(jsonObj.get("architecture"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `disks`
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        MachineDiskDetails.validateJsonElement(jsonObj.get("disks"));
      }
      // validate the optional field `guestOs`
      if (jsonObj.get("guestOs") != null && !jsonObj.get("guestOs").isJsonNull()) {
        GuestOsDetails.validateJsonElement(jsonObj.get("guestOs"));
      }
      if ((jsonObj.get("machineName") != null && !jsonObj.get("machineName").isJsonNull()) && !jsonObj.get("machineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineName").toString()));
      }
      // validate the optional field `network`
      if (jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) {
        MachineNetworkDetails.validateJsonElement(jsonObj.get("network"));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformDetails.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("powerState") != null && !jsonObj.get("powerState").isJsonNull()) && !jsonObj.get("powerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerState").toString()));
      }
      // validate the optional field `powerState`
      if (jsonObj.get("powerState") != null && !jsonObj.get("powerState").isJsonNull()) {
        PowerStateEnum.validateJsonElement(jsonObj.get("powerState"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MachineDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MachineDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MachineDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MachineDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MachineDetails>() {
           @Override
           public void write(JsonWriter out, MachineDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MachineDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MachineDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MachineDetails
   * @throws IOException if the JSON string is invalid with respect to MachineDetails
   */
  public static MachineDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MachineDetails.class);
  }

  /**
   * Convert an instance of MachineDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

