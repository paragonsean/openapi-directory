/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AssetPerformanceData;
import org.openapitools.client.model.InsightList;
import org.openapitools.client.model.MachineDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An asset represents a resource in your environment. Asset types include virtual machines and databases.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Asset {
  public static final String SERIALIZED_NAME_ASSIGNED_GROUPS = "assignedGroups";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_GROUPS)
  private List<String> assignedGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_INSIGHT_LIST = "insightList";
  @SerializedName(SERIALIZED_NAME_INSIGHT_LIST)
  private InsightList insightList;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MACHINE_DETAILS = "machineDetails";
  @SerializedName(SERIALIZED_NAME_MACHINE_DETAILS)
  private MachineDetails machineDetails;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERFORMANCE_DATA = "performanceData";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_DATA)
  private AssetPerformanceData performanceData;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Asset() {
  }

  public Asset(
     List<String> assignedGroups, 
     String createTime, 
     String name, 
     List<String> sources, 
     String updateTime
  ) {
    this();
    this.assignedGroups = assignedGroups;
    this.createTime = createTime;
    this.name = name;
    this.sources = sources;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The list of groups that the asset is assigned to.
   * @return assignedGroups
   */
  @javax.annotation.Nullable
  public List<String> getAssignedGroups() {
    return assignedGroups;
  }



  public Asset attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Asset putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Generic asset attributes.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  /**
   * Output only. The timestamp when the asset was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Asset insightList(InsightList insightList) {
    this.insightList = insightList;
    return this;
  }

  /**
   * Get insightList
   * @return insightList
   */
  @javax.annotation.Nullable
  public InsightList getInsightList() {
    return insightList;
  }

  public void setInsightList(InsightList insightList) {
    this.insightList = insightList;
  }


  public Asset labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Asset putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Asset machineDetails(MachineDetails machineDetails) {
    this.machineDetails = machineDetails;
    return this;
  }

  /**
   * Get machineDetails
   * @return machineDetails
   */
  @javax.annotation.Nullable
  public MachineDetails getMachineDetails() {
    return machineDetails;
  }

  public void setMachineDetails(MachineDetails machineDetails) {
    this.machineDetails = machineDetails;
  }


  /**
   * Output only. The full name of the asset.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Asset performanceData(AssetPerformanceData performanceData) {
    this.performanceData = performanceData;
    return this;
  }

  /**
   * Get performanceData
   * @return performanceData
   */
  @javax.annotation.Nullable
  public AssetPerformanceData getPerformanceData() {
    return performanceData;
  }

  public void setPerformanceData(AssetPerformanceData performanceData) {
    this.performanceData = performanceData;
  }


  /**
   * Output only. The list of sources contributing to the asset.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<String> getSources() {
    return sources;
  }



  /**
   * Output only. The timestamp when the asset was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.assignedGroups, asset.assignedGroups) &&
        Objects.equals(this.attributes, asset.attributes) &&
        Objects.equals(this.createTime, asset.createTime) &&
        Objects.equals(this.insightList, asset.insightList) &&
        Objects.equals(this.labels, asset.labels) &&
        Objects.equals(this.machineDetails, asset.machineDetails) &&
        Objects.equals(this.name, asset.name) &&
        Objects.equals(this.performanceData, asset.performanceData) &&
        Objects.equals(this.sources, asset.sources) &&
        Objects.equals(this.updateTime, asset.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedGroups, attributes, createTime, insightList, labels, machineDetails, name, performanceData, sources, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    assignedGroups: ").append(toIndentedString(assignedGroups)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    insightList: ").append(toIndentedString(insightList)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    machineDetails: ").append(toIndentedString(machineDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    performanceData: ").append(toIndentedString(performanceData)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignedGroups");
    openapiFields.add("attributes");
    openapiFields.add("createTime");
    openapiFields.add("insightList");
    openapiFields.add("labels");
    openapiFields.add("machineDetails");
    openapiFields.add("name");
    openapiFields.add("performanceData");
    openapiFields.add("sources");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Asset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Asset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Asset is not found in the empty JSON string", Asset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Asset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Asset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assignedGroups") != null && !jsonObj.get("assignedGroups").isJsonNull() && !jsonObj.get("assignedGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedGroups` to be an array in the JSON string but got `%s`", jsonObj.get("assignedGroups").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `insightList`
      if (jsonObj.get("insightList") != null && !jsonObj.get("insightList").isJsonNull()) {
        InsightList.validateJsonElement(jsonObj.get("insightList"));
      }
      // validate the optional field `machineDetails`
      if (jsonObj.get("machineDetails") != null && !jsonObj.get("machineDetails").isJsonNull()) {
        MachineDetails.validateJsonElement(jsonObj.get("machineDetails"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `performanceData`
      if (jsonObj.get("performanceData") != null && !jsonObj.get("performanceData").isJsonNull()) {
        AssetPerformanceData.validateJsonElement(jsonObj.get("performanceData"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Asset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Asset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Asset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Asset.class));

       return (TypeAdapter<T>) new TypeAdapter<Asset>() {
           @Override
           public void write(JsonWriter out, Asset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Asset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Asset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Asset
   * @throws IOException if the JSON string is invalid with respect to Asset
   */
  public static Asset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Asset.class);
  }

  /**
   * Convert an instance of Asset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

