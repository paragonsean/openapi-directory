/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskPartitionList;
import org.openapitools.client.model.VmwareDiskConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single disk entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskEntry {
  public static final String SERIALIZED_NAME_CAPACITY_BYTES = "capacityBytes";
  @SerializedName(SERIALIZED_NAME_CAPACITY_BYTES)
  private String capacityBytes;

  public static final String SERIALIZED_NAME_DISK_LABEL = "diskLabel";
  @SerializedName(SERIALIZED_NAME_DISK_LABEL)
  private String diskLabel;

  public static final String SERIALIZED_NAME_DISK_LABEL_TYPE = "diskLabelType";
  @SerializedName(SERIALIZED_NAME_DISK_LABEL_TYPE)
  private String diskLabelType;

  public static final String SERIALIZED_NAME_FREE_BYTES = "freeBytes";
  @SerializedName(SERIALIZED_NAME_FREE_BYTES)
  private String freeBytes;

  public static final String SERIALIZED_NAME_HW_ADDRESS = "hwAddress";
  @SerializedName(SERIALIZED_NAME_HW_ADDRESS)
  private String hwAddress;

  /**
   * Disks interface type.
   */
  @JsonAdapter(InterfaceTypeEnum.Adapter.class)
  public enum InterfaceTypeEnum {
    INTERFACE_TYPE_UNSPECIFIED("INTERFACE_TYPE_UNSPECIFIED"),
    
    IDE("IDE"),
    
    SATA("SATA"),
    
    SAS("SAS"),
    
    SCSI("SCSI"),
    
    NVME("NVME"),
    
    FC("FC"),
    
    ISCSI("ISCSI");

    private String value;

    InterfaceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceTypeEnum fromValue(String value) {
      for (InterfaceTypeEnum b : InterfaceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterfaceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterfaceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterfaceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERFACE_TYPE = "interfaceType";
  @SerializedName(SERIALIZED_NAME_INTERFACE_TYPE)
  private InterfaceTypeEnum interfaceType;

  public static final String SERIALIZED_NAME_PARTITIONS = "partitions";
  @SerializedName(SERIALIZED_NAME_PARTITIONS)
  private DiskPartitionList partitions;

  public static final String SERIALIZED_NAME_VMWARE = "vmware";
  @SerializedName(SERIALIZED_NAME_VMWARE)
  private VmwareDiskConfig vmware;

  public DiskEntry() {
  }

  public DiskEntry capacityBytes(String capacityBytes) {
    this.capacityBytes = capacityBytes;
    return this;
  }

  /**
   * Disk capacity.
   * @return capacityBytes
   */
  @javax.annotation.Nullable
  public String getCapacityBytes() {
    return capacityBytes;
  }

  public void setCapacityBytes(String capacityBytes) {
    this.capacityBytes = capacityBytes;
  }


  public DiskEntry diskLabel(String diskLabel) {
    this.diskLabel = diskLabel;
    return this;
  }

  /**
   * Disk label.
   * @return diskLabel
   */
  @javax.annotation.Nullable
  public String getDiskLabel() {
    return diskLabel;
  }

  public void setDiskLabel(String diskLabel) {
    this.diskLabel = diskLabel;
  }


  public DiskEntry diskLabelType(String diskLabelType) {
    this.diskLabelType = diskLabelType;
    return this;
  }

  /**
   * Disk label type (e.g. BIOS/GPT)
   * @return diskLabelType
   */
  @javax.annotation.Nullable
  public String getDiskLabelType() {
    return diskLabelType;
  }

  public void setDiskLabelType(String diskLabelType) {
    this.diskLabelType = diskLabelType;
  }


  public DiskEntry freeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
    return this;
  }

  /**
   * Disk free space.
   * @return freeBytes
   */
  @javax.annotation.Nullable
  public String getFreeBytes() {
    return freeBytes;
  }

  public void setFreeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
  }


  public DiskEntry hwAddress(String hwAddress) {
    this.hwAddress = hwAddress;
    return this;
  }

  /**
   * Disk hardware address (e.g. 0:1 for SCSI).
   * @return hwAddress
   */
  @javax.annotation.Nullable
  public String getHwAddress() {
    return hwAddress;
  }

  public void setHwAddress(String hwAddress) {
    this.hwAddress = hwAddress;
  }


  public DiskEntry interfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

  /**
   * Disks interface type.
   * @return interfaceType
   */
  @javax.annotation.Nullable
  public InterfaceTypeEnum getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
  }


  public DiskEntry partitions(DiskPartitionList partitions) {
    this.partitions = partitions;
    return this;
  }

  /**
   * Get partitions
   * @return partitions
   */
  @javax.annotation.Nullable
  public DiskPartitionList getPartitions() {
    return partitions;
  }

  public void setPartitions(DiskPartitionList partitions) {
    this.partitions = partitions;
  }


  public DiskEntry vmware(VmwareDiskConfig vmware) {
    this.vmware = vmware;
    return this;
  }

  /**
   * Get vmware
   * @return vmware
   */
  @javax.annotation.Nullable
  public VmwareDiskConfig getVmware() {
    return vmware;
  }

  public void setVmware(VmwareDiskConfig vmware) {
    this.vmware = vmware;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskEntry diskEntry = (DiskEntry) o;
    return Objects.equals(this.capacityBytes, diskEntry.capacityBytes) &&
        Objects.equals(this.diskLabel, diskEntry.diskLabel) &&
        Objects.equals(this.diskLabelType, diskEntry.diskLabelType) &&
        Objects.equals(this.freeBytes, diskEntry.freeBytes) &&
        Objects.equals(this.hwAddress, diskEntry.hwAddress) &&
        Objects.equals(this.interfaceType, diskEntry.interfaceType) &&
        Objects.equals(this.partitions, diskEntry.partitions) &&
        Objects.equals(this.vmware, diskEntry.vmware);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityBytes, diskLabel, diskLabelType, freeBytes, hwAddress, interfaceType, partitions, vmware);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskEntry {\n");
    sb.append("    capacityBytes: ").append(toIndentedString(capacityBytes)).append("\n");
    sb.append("    diskLabel: ").append(toIndentedString(diskLabel)).append("\n");
    sb.append("    diskLabelType: ").append(toIndentedString(diskLabelType)).append("\n");
    sb.append("    freeBytes: ").append(toIndentedString(freeBytes)).append("\n");
    sb.append("    hwAddress: ").append(toIndentedString(hwAddress)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("    vmware: ").append(toIndentedString(vmware)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityBytes");
    openapiFields.add("diskLabel");
    openapiFields.add("diskLabelType");
    openapiFields.add("freeBytes");
    openapiFields.add("hwAddress");
    openapiFields.add("interfaceType");
    openapiFields.add("partitions");
    openapiFields.add("vmware");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskEntry is not found in the empty JSON string", DiskEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capacityBytes") != null && !jsonObj.get("capacityBytes").isJsonNull()) && !jsonObj.get("capacityBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityBytes").toString()));
      }
      if ((jsonObj.get("diskLabel") != null && !jsonObj.get("diskLabel").isJsonNull()) && !jsonObj.get("diskLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskLabel").toString()));
      }
      if ((jsonObj.get("diskLabelType") != null && !jsonObj.get("diskLabelType").isJsonNull()) && !jsonObj.get("diskLabelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskLabelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskLabelType").toString()));
      }
      if ((jsonObj.get("freeBytes") != null && !jsonObj.get("freeBytes").isJsonNull()) && !jsonObj.get("freeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBytes").toString()));
      }
      if ((jsonObj.get("hwAddress") != null && !jsonObj.get("hwAddress").isJsonNull()) && !jsonObj.get("hwAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwAddress").toString()));
      }
      if ((jsonObj.get("interfaceType") != null && !jsonObj.get("interfaceType").isJsonNull()) && !jsonObj.get("interfaceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceType").toString()));
      }
      // validate the optional field `interfaceType`
      if (jsonObj.get("interfaceType") != null && !jsonObj.get("interfaceType").isJsonNull()) {
        InterfaceTypeEnum.validateJsonElement(jsonObj.get("interfaceType"));
      }
      // validate the optional field `partitions`
      if (jsonObj.get("partitions") != null && !jsonObj.get("partitions").isJsonNull()) {
        DiskPartitionList.validateJsonElement(jsonObj.get("partitions"));
      }
      // validate the optional field `vmware`
      if (jsonObj.get("vmware") != null && !jsonObj.get("vmware").isJsonNull()) {
        VmwareDiskConfig.validateJsonElement(jsonObj.get("vmware"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskEntry>() {
           @Override
           public void write(JsonWriter out, DiskEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskEntry
   * @throws IOException if the JSON string is invalid with respect to DiskEntry
   */
  public static DiskEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskEntry.class);
  }

  /**
   * Convert an instance of DiskEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

