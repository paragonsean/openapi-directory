/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the BIOS.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BiosDetails {
  public static final String SERIALIZED_NAME_BIOS_NAME = "biosName";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BIOS_NAME)
  private String biosName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private Date releaseDate;

  public static final String SERIALIZED_NAME_SMBIOS_UUID = "smbiosUuid";
  @SerializedName(SERIALIZED_NAME_SMBIOS_UUID)
  private String smbiosUuid;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public BiosDetails() {
  }

  @Deprecated
  public BiosDetails biosName(String biosName) {
    this.biosName = biosName;
    return this;
  }

  /**
   * BIOS name. This fields is deprecated. Please use the &#x60;id&#x60; field instead.
   * @return biosName
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getBiosName() {
    return biosName;
  }

  @Deprecated
  public void setBiosName(String biosName) {
    this.biosName = biosName;
  }


  public BiosDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * BIOS ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BiosDetails manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * BIOS manufacturer.
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public BiosDetails releaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public Date getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
  }


  public BiosDetails smbiosUuid(String smbiosUuid) {
    this.smbiosUuid = smbiosUuid;
    return this;
  }

  /**
   * SMBIOS UUID.
   * @return smbiosUuid
   */
  @javax.annotation.Nullable
  public String getSmbiosUuid() {
    return smbiosUuid;
  }

  public void setSmbiosUuid(String smbiosUuid) {
    this.smbiosUuid = smbiosUuid;
  }


  public BiosDetails version(String version) {
    this.version = version;
    return this;
  }

  /**
   * BIOS version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BiosDetails biosDetails = (BiosDetails) o;
    return Objects.equals(this.biosName, biosDetails.biosName) &&
        Objects.equals(this.id, biosDetails.id) &&
        Objects.equals(this.manufacturer, biosDetails.manufacturer) &&
        Objects.equals(this.releaseDate, biosDetails.releaseDate) &&
        Objects.equals(this.smbiosUuid, biosDetails.smbiosUuid) &&
        Objects.equals(this.version, biosDetails.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biosName, id, manufacturer, releaseDate, smbiosUuid, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BiosDetails {\n");
    sb.append("    biosName: ").append(toIndentedString(biosName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    smbiosUuid: ").append(toIndentedString(smbiosUuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("biosName");
    openapiFields.add("id");
    openapiFields.add("manufacturer");
    openapiFields.add("releaseDate");
    openapiFields.add("smbiosUuid");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BiosDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BiosDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BiosDetails is not found in the empty JSON string", BiosDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BiosDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BiosDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("biosName") != null && !jsonObj.get("biosName").isJsonNull()) && !jsonObj.get("biosName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biosName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biosName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("releaseDate"));
      }
      if ((jsonObj.get("smbiosUuid") != null && !jsonObj.get("smbiosUuid").isJsonNull()) && !jsonObj.get("smbiosUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smbiosUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smbiosUuid").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BiosDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BiosDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BiosDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BiosDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BiosDetails>() {
           @Override
           public void write(JsonWriter out, BiosDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BiosDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BiosDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BiosDetails
   * @throws IOException if the JSON string is invalid with respect to BiosDetails
   */
  public static BiosDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BiosDetails.class);
  }

  /**
   * Convert an instance of BiosDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

