/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskPartitionList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk Partition details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskPartition {
  public static final String SERIALIZED_NAME_CAPACITY_BYTES = "capacityBytes";
  @SerializedName(SERIALIZED_NAME_CAPACITY_BYTES)
  private String capacityBytes;

  public static final String SERIALIZED_NAME_FILE_SYSTEM = "fileSystem";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM)
  private String fileSystem;

  public static final String SERIALIZED_NAME_FREE_BYTES = "freeBytes";
  @SerializedName(SERIALIZED_NAME_FREE_BYTES)
  private String freeBytes;

  public static final String SERIALIZED_NAME_MOUNT_POINT = "mountPoint";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT)
  private String mountPoint;

  public static final String SERIALIZED_NAME_SUB_PARTITIONS = "subPartitions";
  @SerializedName(SERIALIZED_NAME_SUB_PARTITIONS)
  private DiskPartitionList subPartitions;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public DiskPartition() {
  }

  public DiskPartition capacityBytes(String capacityBytes) {
    this.capacityBytes = capacityBytes;
    return this;
  }

  /**
   * Partition capacity.
   * @return capacityBytes
   */
  @javax.annotation.Nullable
  public String getCapacityBytes() {
    return capacityBytes;
  }

  public void setCapacityBytes(String capacityBytes) {
    this.capacityBytes = capacityBytes;
  }


  public DiskPartition fileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
    return this;
  }

  /**
   * Partition file system.
   * @return fileSystem
   */
  @javax.annotation.Nullable
  public String getFileSystem() {
    return fileSystem;
  }

  public void setFileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
  }


  public DiskPartition freeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
    return this;
  }

  /**
   * Partition free space.
   * @return freeBytes
   */
  @javax.annotation.Nullable
  public String getFreeBytes() {
    return freeBytes;
  }

  public void setFreeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
  }


  public DiskPartition mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

  /**
   * Mount pount (Linux/Windows) or drive letter (Windows).
   * @return mountPoint
   */
  @javax.annotation.Nullable
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }


  public DiskPartition subPartitions(DiskPartitionList subPartitions) {
    this.subPartitions = subPartitions;
    return this;
  }

  /**
   * Get subPartitions
   * @return subPartitions
   */
  @javax.annotation.Nullable
  public DiskPartitionList getSubPartitions() {
    return subPartitions;
  }

  public void setSubPartitions(DiskPartitionList subPartitions) {
    this.subPartitions = subPartitions;
  }


  public DiskPartition type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Partition type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DiskPartition uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Partition UUID.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskPartition diskPartition = (DiskPartition) o;
    return Objects.equals(this.capacityBytes, diskPartition.capacityBytes) &&
        Objects.equals(this.fileSystem, diskPartition.fileSystem) &&
        Objects.equals(this.freeBytes, diskPartition.freeBytes) &&
        Objects.equals(this.mountPoint, diskPartition.mountPoint) &&
        Objects.equals(this.subPartitions, diskPartition.subPartitions) &&
        Objects.equals(this.type, diskPartition.type) &&
        Objects.equals(this.uuid, diskPartition.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityBytes, fileSystem, freeBytes, mountPoint, subPartitions, type, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskPartition {\n");
    sb.append("    capacityBytes: ").append(toIndentedString(capacityBytes)).append("\n");
    sb.append("    fileSystem: ").append(toIndentedString(fileSystem)).append("\n");
    sb.append("    freeBytes: ").append(toIndentedString(freeBytes)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    subPartitions: ").append(toIndentedString(subPartitions)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityBytes");
    openapiFields.add("fileSystem");
    openapiFields.add("freeBytes");
    openapiFields.add("mountPoint");
    openapiFields.add("subPartitions");
    openapiFields.add("type");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskPartition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskPartition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskPartition is not found in the empty JSON string", DiskPartition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskPartition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskPartition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("capacityBytes") != null && !jsonObj.get("capacityBytes").isJsonNull()) && !jsonObj.get("capacityBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityBytes").toString()));
      }
      if ((jsonObj.get("fileSystem") != null && !jsonObj.get("fileSystem").isJsonNull()) && !jsonObj.get("fileSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSystem").toString()));
      }
      if ((jsonObj.get("freeBytes") != null && !jsonObj.get("freeBytes").isJsonNull()) && !jsonObj.get("freeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeBytes").toString()));
      }
      if ((jsonObj.get("mountPoint") != null && !jsonObj.get("mountPoint").isJsonNull()) && !jsonObj.get("mountPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mountPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mountPoint").toString()));
      }
      // validate the optional field `subPartitions`
      if (jsonObj.get("subPartitions") != null && !jsonObj.get("subPartitions").isJsonNull()) {
        DiskPartitionList.validateJsonElement(jsonObj.get("subPartitions"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskPartition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskPartition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskPartition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskPartition.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskPartition>() {
           @Override
           public void write(JsonWriter out, DiskPartition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskPartition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskPartition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskPartition
   * @throws IOException if the JSON string is invalid with respect to DiskPartition
   */
  public static DiskPartition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskPartition.class);
  }

  /**
   * Convert an instance of DiskPartition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

