/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComputeEnginePreferences;
import org.openapitools.client.model.RegionPreferences;
import org.openapitools.client.model.SoleTenancyPreferences;
import org.openapitools.client.model.VmwareEnginePreferences;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachinePreferences {
  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   */
  @JsonAdapter(CommitmentPlanEnum.Adapter.class)
  public enum CommitmentPlanEnum {
    UNSPECIFIED("COMMITMENT_PLAN_UNSPECIFIED"),
    
    NONE("COMMITMENT_PLAN_NONE"),
    
    ONE_YEAR("COMMITMENT_PLAN_ONE_YEAR"),
    
    THREE_YEARS("COMMITMENT_PLAN_THREE_YEARS");

    private String value;

    CommitmentPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommitmentPlanEnum fromValue(String value) {
      for (CommitmentPlanEnum b : CommitmentPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommitmentPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommitmentPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommitmentPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommitmentPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommitmentPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMITMENT_PLAN = "commitmentPlan";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PLAN)
  private CommitmentPlanEnum commitmentPlan;

  public static final String SERIALIZED_NAME_COMPUTE_ENGINE_PREFERENCES = "computeEnginePreferences";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ENGINE_PREFERENCES)
  private ComputeEnginePreferences computeEnginePreferences;

  public static final String SERIALIZED_NAME_REGION_PREFERENCES = "regionPreferences";
  @SerializedName(SERIALIZED_NAME_REGION_PREFERENCES)
  private RegionPreferences regionPreferences;

  /**
   * Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
   */
  @JsonAdapter(SizingOptimizationStrategyEnum.Adapter.class)
  public enum SizingOptimizationStrategyEnum {
    UNSPECIFIED("SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED"),
    
    SAME_AS_SOURCE("SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE"),
    
    MODERATE("SIZING_OPTIMIZATION_STRATEGY_MODERATE"),
    
    AGGRESSIVE("SIZING_OPTIMIZATION_STRATEGY_AGGRESSIVE");

    private String value;

    SizingOptimizationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizingOptimizationStrategyEnum fromValue(String value) {
      for (SizingOptimizationStrategyEnum b : SizingOptimizationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizingOptimizationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizingOptimizationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizingOptimizationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizingOptimizationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizingOptimizationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZING_OPTIMIZATION_STRATEGY = "sizingOptimizationStrategy";
  @SerializedName(SERIALIZED_NAME_SIZING_OPTIMIZATION_STRATEGY)
  private SizingOptimizationStrategyEnum sizingOptimizationStrategy;

  public static final String SERIALIZED_NAME_SOLE_TENANCY_PREFERENCES = "soleTenancyPreferences";
  @SerializedName(SERIALIZED_NAME_SOLE_TENANCY_PREFERENCES)
  private SoleTenancyPreferences soleTenancyPreferences;

  /**
   * Target product for assets using this preference set. Specify either target product or business goal, but not both.
   */
  @JsonAdapter(TargetProductEnum.Adapter.class)
  public enum TargetProductEnum {
    UNSPECIFIED("COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED"),
    
    COMPUTE_ENGINE("COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE"),
    
    VMWARE_ENGINE("COMPUTE_MIGRATION_TARGET_PRODUCT_VMWARE_ENGINE"),
    
    SOLE_TENANCY("COMPUTE_MIGRATION_TARGET_PRODUCT_SOLE_TENANCY");

    private String value;

    TargetProductEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetProductEnum fromValue(String value) {
      for (TargetProductEnum b : TargetProductEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetProductEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetProductEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetProductEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetProductEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_PRODUCT = "targetProduct";
  @SerializedName(SERIALIZED_NAME_TARGET_PRODUCT)
  private TargetProductEnum targetProduct;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_PREFERENCES = "vmwareEnginePreferences";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_PREFERENCES)
  private VmwareEnginePreferences vmwareEnginePreferences;

  public VirtualMachinePreferences() {
  }

  public VirtualMachinePreferences commitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
    return this;
  }

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   * @return commitmentPlan
   */
  @javax.annotation.Nullable
  public CommitmentPlanEnum getCommitmentPlan() {
    return commitmentPlan;
  }

  public void setCommitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
  }


  public VirtualMachinePreferences computeEnginePreferences(ComputeEnginePreferences computeEnginePreferences) {
    this.computeEnginePreferences = computeEnginePreferences;
    return this;
  }

  /**
   * Get computeEnginePreferences
   * @return computeEnginePreferences
   */
  @javax.annotation.Nullable
  public ComputeEnginePreferences getComputeEnginePreferences() {
    return computeEnginePreferences;
  }

  public void setComputeEnginePreferences(ComputeEnginePreferences computeEnginePreferences) {
    this.computeEnginePreferences = computeEnginePreferences;
  }


  public VirtualMachinePreferences regionPreferences(RegionPreferences regionPreferences) {
    this.regionPreferences = regionPreferences;
    return this;
  }

  /**
   * Get regionPreferences
   * @return regionPreferences
   */
  @javax.annotation.Nullable
  public RegionPreferences getRegionPreferences() {
    return regionPreferences;
  }

  public void setRegionPreferences(RegionPreferences regionPreferences) {
    this.regionPreferences = regionPreferences;
  }


  public VirtualMachinePreferences sizingOptimizationStrategy(SizingOptimizationStrategyEnum sizingOptimizationStrategy) {
    this.sizingOptimizationStrategy = sizingOptimizationStrategy;
    return this;
  }

  /**
   * Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.
   * @return sizingOptimizationStrategy
   */
  @javax.annotation.Nullable
  public SizingOptimizationStrategyEnum getSizingOptimizationStrategy() {
    return sizingOptimizationStrategy;
  }

  public void setSizingOptimizationStrategy(SizingOptimizationStrategyEnum sizingOptimizationStrategy) {
    this.sizingOptimizationStrategy = sizingOptimizationStrategy;
  }


  public VirtualMachinePreferences soleTenancyPreferences(SoleTenancyPreferences soleTenancyPreferences) {
    this.soleTenancyPreferences = soleTenancyPreferences;
    return this;
  }

  /**
   * Get soleTenancyPreferences
   * @return soleTenancyPreferences
   */
  @javax.annotation.Nullable
  public SoleTenancyPreferences getSoleTenancyPreferences() {
    return soleTenancyPreferences;
  }

  public void setSoleTenancyPreferences(SoleTenancyPreferences soleTenancyPreferences) {
    this.soleTenancyPreferences = soleTenancyPreferences;
  }


  public VirtualMachinePreferences targetProduct(TargetProductEnum targetProduct) {
    this.targetProduct = targetProduct;
    return this;
  }

  /**
   * Target product for assets using this preference set. Specify either target product or business goal, but not both.
   * @return targetProduct
   */
  @javax.annotation.Nullable
  public TargetProductEnum getTargetProduct() {
    return targetProduct;
  }

  public void setTargetProduct(TargetProductEnum targetProduct) {
    this.targetProduct = targetProduct;
  }


  public VirtualMachinePreferences vmwareEnginePreferences(VmwareEnginePreferences vmwareEnginePreferences) {
    this.vmwareEnginePreferences = vmwareEnginePreferences;
    return this;
  }

  /**
   * Get vmwareEnginePreferences
   * @return vmwareEnginePreferences
   */
  @javax.annotation.Nullable
  public VmwareEnginePreferences getVmwareEnginePreferences() {
    return vmwareEnginePreferences;
  }

  public void setVmwareEnginePreferences(VmwareEnginePreferences vmwareEnginePreferences) {
    this.vmwareEnginePreferences = vmwareEnginePreferences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachinePreferences virtualMachinePreferences = (VirtualMachinePreferences) o;
    return Objects.equals(this.commitmentPlan, virtualMachinePreferences.commitmentPlan) &&
        Objects.equals(this.computeEnginePreferences, virtualMachinePreferences.computeEnginePreferences) &&
        Objects.equals(this.regionPreferences, virtualMachinePreferences.regionPreferences) &&
        Objects.equals(this.sizingOptimizationStrategy, virtualMachinePreferences.sizingOptimizationStrategy) &&
        Objects.equals(this.soleTenancyPreferences, virtualMachinePreferences.soleTenancyPreferences) &&
        Objects.equals(this.targetProduct, virtualMachinePreferences.targetProduct) &&
        Objects.equals(this.vmwareEnginePreferences, virtualMachinePreferences.vmwareEnginePreferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitmentPlan, computeEnginePreferences, regionPreferences, sizingOptimizationStrategy, soleTenancyPreferences, targetProduct, vmwareEnginePreferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachinePreferences {\n");
    sb.append("    commitmentPlan: ").append(toIndentedString(commitmentPlan)).append("\n");
    sb.append("    computeEnginePreferences: ").append(toIndentedString(computeEnginePreferences)).append("\n");
    sb.append("    regionPreferences: ").append(toIndentedString(regionPreferences)).append("\n");
    sb.append("    sizingOptimizationStrategy: ").append(toIndentedString(sizingOptimizationStrategy)).append("\n");
    sb.append("    soleTenancyPreferences: ").append(toIndentedString(soleTenancyPreferences)).append("\n");
    sb.append("    targetProduct: ").append(toIndentedString(targetProduct)).append("\n");
    sb.append("    vmwareEnginePreferences: ").append(toIndentedString(vmwareEnginePreferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitmentPlan");
    openapiFields.add("computeEnginePreferences");
    openapiFields.add("regionPreferences");
    openapiFields.add("sizingOptimizationStrategy");
    openapiFields.add("soleTenancyPreferences");
    openapiFields.add("targetProduct");
    openapiFields.add("vmwareEnginePreferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachinePreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachinePreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachinePreferences is not found in the empty JSON string", VirtualMachinePreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachinePreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachinePreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) && !jsonObj.get("commitmentPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentPlan").toString()));
      }
      // validate the optional field `commitmentPlan`
      if (jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) {
        CommitmentPlanEnum.validateJsonElement(jsonObj.get("commitmentPlan"));
      }
      // validate the optional field `computeEnginePreferences`
      if (jsonObj.get("computeEnginePreferences") != null && !jsonObj.get("computeEnginePreferences").isJsonNull()) {
        ComputeEnginePreferences.validateJsonElement(jsonObj.get("computeEnginePreferences"));
      }
      // validate the optional field `regionPreferences`
      if (jsonObj.get("regionPreferences") != null && !jsonObj.get("regionPreferences").isJsonNull()) {
        RegionPreferences.validateJsonElement(jsonObj.get("regionPreferences"));
      }
      if ((jsonObj.get("sizingOptimizationStrategy") != null && !jsonObj.get("sizingOptimizationStrategy").isJsonNull()) && !jsonObj.get("sizingOptimizationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizingOptimizationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizingOptimizationStrategy").toString()));
      }
      // validate the optional field `sizingOptimizationStrategy`
      if (jsonObj.get("sizingOptimizationStrategy") != null && !jsonObj.get("sizingOptimizationStrategy").isJsonNull()) {
        SizingOptimizationStrategyEnum.validateJsonElement(jsonObj.get("sizingOptimizationStrategy"));
      }
      // validate the optional field `soleTenancyPreferences`
      if (jsonObj.get("soleTenancyPreferences") != null && !jsonObj.get("soleTenancyPreferences").isJsonNull()) {
        SoleTenancyPreferences.validateJsonElement(jsonObj.get("soleTenancyPreferences"));
      }
      if ((jsonObj.get("targetProduct") != null && !jsonObj.get("targetProduct").isJsonNull()) && !jsonObj.get("targetProduct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProduct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProduct").toString()));
      }
      // validate the optional field `targetProduct`
      if (jsonObj.get("targetProduct") != null && !jsonObj.get("targetProduct").isJsonNull()) {
        TargetProductEnum.validateJsonElement(jsonObj.get("targetProduct"));
      }
      // validate the optional field `vmwareEnginePreferences`
      if (jsonObj.get("vmwareEnginePreferences") != null && !jsonObj.get("vmwareEnginePreferences").isJsonNull()) {
        VmwareEnginePreferences.validateJsonElement(jsonObj.get("vmwareEnginePreferences"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachinePreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachinePreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachinePreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachinePreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachinePreferences>() {
           @Override
           public void write(JsonWriter out, VirtualMachinePreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachinePreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachinePreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachinePreferences
   * @throws IOException if the JSON string is invalid with respect to VirtualMachinePreferences
   */
  public static VirtualMachinePreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachinePreferences.class);
  }

  /**
   * Convert an instance of VirtualMachinePreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

