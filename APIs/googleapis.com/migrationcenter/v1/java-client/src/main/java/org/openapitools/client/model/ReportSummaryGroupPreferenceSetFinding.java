/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;
import org.openapitools.client.model.ReportSummaryComputeEngineFinding;
import org.openapitools.client.model.ReportSummarySoleTenantFinding;
import org.openapitools.client.model.ReportSummaryVmwareEngineFinding;
import org.openapitools.client.model.VirtualMachinePreferences;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary Findings for a specific Group/PreferenceSet combination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportSummaryGroupPreferenceSetFinding {
  public static final String SERIALIZED_NAME_COMPUTE_ENGINE_FINDING = "computeEngineFinding";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ENGINE_FINDING)
  private ReportSummaryComputeEngineFinding computeEngineFinding;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MACHINE_PREFERENCES = "machinePreferences";
  @SerializedName(SERIALIZED_NAME_MACHINE_PREFERENCES)
  private VirtualMachinePreferences machinePreferences;

  public static final String SERIALIZED_NAME_MONTHLY_COST_COMPUTE = "monthlyCostCompute";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_COMPUTE)
  private Money monthlyCostCompute;

  public static final String SERIALIZED_NAME_MONTHLY_COST_NETWORK_EGRESS = "monthlyCostNetworkEgress";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_NETWORK_EGRESS)
  private Money monthlyCostNetworkEgress;

  public static final String SERIALIZED_NAME_MONTHLY_COST_OS_LICENSE = "monthlyCostOsLicense";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_OS_LICENSE)
  private Money monthlyCostOsLicense;

  public static final String SERIALIZED_NAME_MONTHLY_COST_OTHER = "monthlyCostOther";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_OTHER)
  private Money monthlyCostOther;

  public static final String SERIALIZED_NAME_MONTHLY_COST_STORAGE = "monthlyCostStorage";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_STORAGE)
  private Money monthlyCostStorage;

  public static final String SERIALIZED_NAME_MONTHLY_COST_TOTAL = "monthlyCostTotal";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_TOTAL)
  private Money monthlyCostTotal;

  public static final String SERIALIZED_NAME_SOLE_TENANT_FINDING = "soleTenantFinding";
  @SerializedName(SERIALIZED_NAME_SOLE_TENANT_FINDING)
  private ReportSummarySoleTenantFinding soleTenantFinding;

  public static final String SERIALIZED_NAME_VMWARE_ENGINE_FINDING = "vmwareEngineFinding";
  @SerializedName(SERIALIZED_NAME_VMWARE_ENGINE_FINDING)
  private ReportSummaryVmwareEngineFinding vmwareEngineFinding;

  public ReportSummaryGroupPreferenceSetFinding() {
  }

  public ReportSummaryGroupPreferenceSetFinding computeEngineFinding(ReportSummaryComputeEngineFinding computeEngineFinding) {
    this.computeEngineFinding = computeEngineFinding;
    return this;
  }

  /**
   * Get computeEngineFinding
   * @return computeEngineFinding
   */
  @javax.annotation.Nullable
  public ReportSummaryComputeEngineFinding getComputeEngineFinding() {
    return computeEngineFinding;
  }

  public void setComputeEngineFinding(ReportSummaryComputeEngineFinding computeEngineFinding) {
    this.computeEngineFinding = computeEngineFinding;
  }


  public ReportSummaryGroupPreferenceSetFinding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the Preference Set.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReportSummaryGroupPreferenceSetFinding displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display Name of the Preference Set
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ReportSummaryGroupPreferenceSetFinding machinePreferences(VirtualMachinePreferences machinePreferences) {
    this.machinePreferences = machinePreferences;
    return this;
  }

  /**
   * Get machinePreferences
   * @return machinePreferences
   */
  @javax.annotation.Nullable
  public VirtualMachinePreferences getMachinePreferences() {
    return machinePreferences;
  }

  public void setMachinePreferences(VirtualMachinePreferences machinePreferences) {
    this.machinePreferences = machinePreferences;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostCompute(Money monthlyCostCompute) {
    this.monthlyCostCompute = monthlyCostCompute;
    return this;
  }

  /**
   * Get monthlyCostCompute
   * @return monthlyCostCompute
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostCompute() {
    return monthlyCostCompute;
  }

  public void setMonthlyCostCompute(Money monthlyCostCompute) {
    this.monthlyCostCompute = monthlyCostCompute;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostNetworkEgress(Money monthlyCostNetworkEgress) {
    this.monthlyCostNetworkEgress = monthlyCostNetworkEgress;
    return this;
  }

  /**
   * Get monthlyCostNetworkEgress
   * @return monthlyCostNetworkEgress
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostNetworkEgress() {
    return monthlyCostNetworkEgress;
  }

  public void setMonthlyCostNetworkEgress(Money monthlyCostNetworkEgress) {
    this.monthlyCostNetworkEgress = monthlyCostNetworkEgress;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostOsLicense(Money monthlyCostOsLicense) {
    this.monthlyCostOsLicense = monthlyCostOsLicense;
    return this;
  }

  /**
   * Get monthlyCostOsLicense
   * @return monthlyCostOsLicense
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostOsLicense() {
    return monthlyCostOsLicense;
  }

  public void setMonthlyCostOsLicense(Money monthlyCostOsLicense) {
    this.monthlyCostOsLicense = monthlyCostOsLicense;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostOther(Money monthlyCostOther) {
    this.monthlyCostOther = monthlyCostOther;
    return this;
  }

  /**
   * Get monthlyCostOther
   * @return monthlyCostOther
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostOther() {
    return monthlyCostOther;
  }

  public void setMonthlyCostOther(Money monthlyCostOther) {
    this.monthlyCostOther = monthlyCostOther;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostStorage(Money monthlyCostStorage) {
    this.monthlyCostStorage = monthlyCostStorage;
    return this;
  }

  /**
   * Get monthlyCostStorage
   * @return monthlyCostStorage
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostStorage() {
    return monthlyCostStorage;
  }

  public void setMonthlyCostStorage(Money monthlyCostStorage) {
    this.monthlyCostStorage = monthlyCostStorage;
  }


  public ReportSummaryGroupPreferenceSetFinding monthlyCostTotal(Money monthlyCostTotal) {
    this.monthlyCostTotal = monthlyCostTotal;
    return this;
  }

  /**
   * Get monthlyCostTotal
   * @return monthlyCostTotal
   */
  @javax.annotation.Nullable
  public Money getMonthlyCostTotal() {
    return monthlyCostTotal;
  }

  public void setMonthlyCostTotal(Money monthlyCostTotal) {
    this.monthlyCostTotal = monthlyCostTotal;
  }


  public ReportSummaryGroupPreferenceSetFinding soleTenantFinding(ReportSummarySoleTenantFinding soleTenantFinding) {
    this.soleTenantFinding = soleTenantFinding;
    return this;
  }

  /**
   * Get soleTenantFinding
   * @return soleTenantFinding
   */
  @javax.annotation.Nullable
  public ReportSummarySoleTenantFinding getSoleTenantFinding() {
    return soleTenantFinding;
  }

  public void setSoleTenantFinding(ReportSummarySoleTenantFinding soleTenantFinding) {
    this.soleTenantFinding = soleTenantFinding;
  }


  public ReportSummaryGroupPreferenceSetFinding vmwareEngineFinding(ReportSummaryVmwareEngineFinding vmwareEngineFinding) {
    this.vmwareEngineFinding = vmwareEngineFinding;
    return this;
  }

  /**
   * Get vmwareEngineFinding
   * @return vmwareEngineFinding
   */
  @javax.annotation.Nullable
  public ReportSummaryVmwareEngineFinding getVmwareEngineFinding() {
    return vmwareEngineFinding;
  }

  public void setVmwareEngineFinding(ReportSummaryVmwareEngineFinding vmwareEngineFinding) {
    this.vmwareEngineFinding = vmwareEngineFinding;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSummaryGroupPreferenceSetFinding reportSummaryGroupPreferenceSetFinding = (ReportSummaryGroupPreferenceSetFinding) o;
    return Objects.equals(this.computeEngineFinding, reportSummaryGroupPreferenceSetFinding.computeEngineFinding) &&
        Objects.equals(this.description, reportSummaryGroupPreferenceSetFinding.description) &&
        Objects.equals(this.displayName, reportSummaryGroupPreferenceSetFinding.displayName) &&
        Objects.equals(this.machinePreferences, reportSummaryGroupPreferenceSetFinding.machinePreferences) &&
        Objects.equals(this.monthlyCostCompute, reportSummaryGroupPreferenceSetFinding.monthlyCostCompute) &&
        Objects.equals(this.monthlyCostNetworkEgress, reportSummaryGroupPreferenceSetFinding.monthlyCostNetworkEgress) &&
        Objects.equals(this.monthlyCostOsLicense, reportSummaryGroupPreferenceSetFinding.monthlyCostOsLicense) &&
        Objects.equals(this.monthlyCostOther, reportSummaryGroupPreferenceSetFinding.monthlyCostOther) &&
        Objects.equals(this.monthlyCostStorage, reportSummaryGroupPreferenceSetFinding.monthlyCostStorage) &&
        Objects.equals(this.monthlyCostTotal, reportSummaryGroupPreferenceSetFinding.monthlyCostTotal) &&
        Objects.equals(this.soleTenantFinding, reportSummaryGroupPreferenceSetFinding.soleTenantFinding) &&
        Objects.equals(this.vmwareEngineFinding, reportSummaryGroupPreferenceSetFinding.vmwareEngineFinding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeEngineFinding, description, displayName, machinePreferences, monthlyCostCompute, monthlyCostNetworkEgress, monthlyCostOsLicense, monthlyCostOther, monthlyCostStorage, monthlyCostTotal, soleTenantFinding, vmwareEngineFinding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSummaryGroupPreferenceSetFinding {\n");
    sb.append("    computeEngineFinding: ").append(toIndentedString(computeEngineFinding)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    machinePreferences: ").append(toIndentedString(machinePreferences)).append("\n");
    sb.append("    monthlyCostCompute: ").append(toIndentedString(monthlyCostCompute)).append("\n");
    sb.append("    monthlyCostNetworkEgress: ").append(toIndentedString(monthlyCostNetworkEgress)).append("\n");
    sb.append("    monthlyCostOsLicense: ").append(toIndentedString(monthlyCostOsLicense)).append("\n");
    sb.append("    monthlyCostOther: ").append(toIndentedString(monthlyCostOther)).append("\n");
    sb.append("    monthlyCostStorage: ").append(toIndentedString(monthlyCostStorage)).append("\n");
    sb.append("    monthlyCostTotal: ").append(toIndentedString(monthlyCostTotal)).append("\n");
    sb.append("    soleTenantFinding: ").append(toIndentedString(soleTenantFinding)).append("\n");
    sb.append("    vmwareEngineFinding: ").append(toIndentedString(vmwareEngineFinding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeEngineFinding");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("machinePreferences");
    openapiFields.add("monthlyCostCompute");
    openapiFields.add("monthlyCostNetworkEgress");
    openapiFields.add("monthlyCostOsLicense");
    openapiFields.add("monthlyCostOther");
    openapiFields.add("monthlyCostStorage");
    openapiFields.add("monthlyCostTotal");
    openapiFields.add("soleTenantFinding");
    openapiFields.add("vmwareEngineFinding");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSummaryGroupPreferenceSetFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSummaryGroupPreferenceSetFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSummaryGroupPreferenceSetFinding is not found in the empty JSON string", ReportSummaryGroupPreferenceSetFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSummaryGroupPreferenceSetFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSummaryGroupPreferenceSetFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `computeEngineFinding`
      if (jsonObj.get("computeEngineFinding") != null && !jsonObj.get("computeEngineFinding").isJsonNull()) {
        ReportSummaryComputeEngineFinding.validateJsonElement(jsonObj.get("computeEngineFinding"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `machinePreferences`
      if (jsonObj.get("machinePreferences") != null && !jsonObj.get("machinePreferences").isJsonNull()) {
        VirtualMachinePreferences.validateJsonElement(jsonObj.get("machinePreferences"));
      }
      // validate the optional field `monthlyCostCompute`
      if (jsonObj.get("monthlyCostCompute") != null && !jsonObj.get("monthlyCostCompute").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostCompute"));
      }
      // validate the optional field `monthlyCostNetworkEgress`
      if (jsonObj.get("monthlyCostNetworkEgress") != null && !jsonObj.get("monthlyCostNetworkEgress").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostNetworkEgress"));
      }
      // validate the optional field `monthlyCostOsLicense`
      if (jsonObj.get("monthlyCostOsLicense") != null && !jsonObj.get("monthlyCostOsLicense").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostOsLicense"));
      }
      // validate the optional field `monthlyCostOther`
      if (jsonObj.get("monthlyCostOther") != null && !jsonObj.get("monthlyCostOther").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostOther"));
      }
      // validate the optional field `monthlyCostStorage`
      if (jsonObj.get("monthlyCostStorage") != null && !jsonObj.get("monthlyCostStorage").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostStorage"));
      }
      // validate the optional field `monthlyCostTotal`
      if (jsonObj.get("monthlyCostTotal") != null && !jsonObj.get("monthlyCostTotal").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("monthlyCostTotal"));
      }
      // validate the optional field `soleTenantFinding`
      if (jsonObj.get("soleTenantFinding") != null && !jsonObj.get("soleTenantFinding").isJsonNull()) {
        ReportSummarySoleTenantFinding.validateJsonElement(jsonObj.get("soleTenantFinding"));
      }
      // validate the optional field `vmwareEngineFinding`
      if (jsonObj.get("vmwareEngineFinding") != null && !jsonObj.get("vmwareEngineFinding").isJsonNull()) {
        ReportSummaryVmwareEngineFinding.validateJsonElement(jsonObj.get("vmwareEngineFinding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSummaryGroupPreferenceSetFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSummaryGroupPreferenceSetFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSummaryGroupPreferenceSetFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSummaryGroupPreferenceSetFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSummaryGroupPreferenceSetFinding>() {
           @Override
           public void write(JsonWriter out, ReportSummaryGroupPreferenceSetFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSummaryGroupPreferenceSetFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSummaryGroupPreferenceSetFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSummaryGroupPreferenceSetFinding
   * @throws IOException if the JSON string is invalid with respect to ReportSummaryGroupPreferenceSetFinding
   */
  public static ReportSummaryGroupPreferenceSetFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSummaryGroupPreferenceSetFinding.class);
  }

  /**
   * Convert an instance of ReportSummaryGroupPreferenceSetFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

