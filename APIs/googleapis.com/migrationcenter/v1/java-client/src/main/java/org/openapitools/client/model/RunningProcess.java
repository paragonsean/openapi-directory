/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guest OS running process details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunningProcess {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CMDLINE = "cmdline";
  @SerializedName(SERIALIZED_NAME_CMDLINE)
  private String cmdline;

  public static final String SERIALIZED_NAME_EXE_PATH = "exePath";
  @SerializedName(SERIALIZED_NAME_EXE_PATH)
  private String exePath;

  public static final String SERIALIZED_NAME_PID = "pid";
  @SerializedName(SERIALIZED_NAME_PID)
  private String pid;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public RunningProcess() {
  }

  public RunningProcess attributes(Map<String, String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public RunningProcess putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Process extended attributes.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public RunningProcess cmdline(String cmdline) {
    this.cmdline = cmdline;
    return this;
  }

  /**
   * Process full command line.
   * @return cmdline
   */
  @javax.annotation.Nullable
  public String getCmdline() {
    return cmdline;
  }

  public void setCmdline(String cmdline) {
    this.cmdline = cmdline;
  }


  public RunningProcess exePath(String exePath) {
    this.exePath = exePath;
    return this;
  }

  /**
   * Process binary path.
   * @return exePath
   */
  @javax.annotation.Nullable
  public String getExePath() {
    return exePath;
  }

  public void setExePath(String exePath) {
    this.exePath = exePath;
  }


  public RunningProcess pid(String pid) {
    this.pid = pid;
    return this;
  }

  /**
   * Process ID.
   * @return pid
   */
  @javax.annotation.Nullable
  public String getPid() {
    return pid;
  }

  public void setPid(String pid) {
    this.pid = pid;
  }


  public RunningProcess user(String user) {
    this.user = user;
    return this;
  }

  /**
   * User running the process.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunningProcess runningProcess = (RunningProcess) o;
    return Objects.equals(this.attributes, runningProcess.attributes) &&
        Objects.equals(this.cmdline, runningProcess.cmdline) &&
        Objects.equals(this.exePath, runningProcess.exePath) &&
        Objects.equals(this.pid, runningProcess.pid) &&
        Objects.equals(this.user, runningProcess.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, cmdline, exePath, pid, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunningProcess {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    cmdline: ").append(toIndentedString(cmdline)).append("\n");
    sb.append("    exePath: ").append(toIndentedString(exePath)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("cmdline");
    openapiFields.add("exePath");
    openapiFields.add("pid");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunningProcess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunningProcess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunningProcess is not found in the empty JSON string", RunningProcess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunningProcess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunningProcess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cmdline") != null && !jsonObj.get("cmdline").isJsonNull()) && !jsonObj.get("cmdline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmdline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmdline").toString()));
      }
      if ((jsonObj.get("exePath") != null && !jsonObj.get("exePath").isJsonNull()) && !jsonObj.get("exePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exePath").toString()));
      }
      if ((jsonObj.get("pid") != null && !jsonObj.get("pid").isJsonNull()) && !jsonObj.get("pid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pid").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunningProcess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunningProcess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunningProcess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunningProcess.class));

       return (TypeAdapter<T>) new TypeAdapter<RunningProcess>() {
           @Override
           public void write(JsonWriter out, RunningProcess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunningProcess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunningProcess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunningProcess
   * @throws IOException if the JSON string is invalid with respect to RunningProcess
   */
  public static RunningProcess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunningProcess.class);
  }

  /**
   * Convert an instance of RunningProcess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

