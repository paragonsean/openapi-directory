/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReportSummaryAssetAggregateStats;
import org.openapitools.client.model.ReportSummaryGroupPreferenceSetFinding;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary Findings for a specific Group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportSummaryGroupFinding {
  public static final String SERIALIZED_NAME_ASSET_AGGREGATE_STATS = "assetAggregateStats";
  @SerializedName(SERIALIZED_NAME_ASSET_AGGREGATE_STATS)
  private ReportSummaryAssetAggregateStats assetAggregateStats;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_OVERLAPPING_ASSET_COUNT = "overlappingAssetCount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_OVERLAPPING_ASSET_COUNT)
  private String overlappingAssetCount;

  public static final String SERIALIZED_NAME_PREFERENCE_SET_FINDINGS = "preferenceSetFindings";
  @SerializedName(SERIALIZED_NAME_PREFERENCE_SET_FINDINGS)
  private List<ReportSummaryGroupPreferenceSetFinding> preferenceSetFindings = new ArrayList<>();

  public ReportSummaryGroupFinding() {
  }

  public ReportSummaryGroupFinding assetAggregateStats(ReportSummaryAssetAggregateStats assetAggregateStats) {
    this.assetAggregateStats = assetAggregateStats;
    return this;
  }

  /**
   * Get assetAggregateStats
   * @return assetAggregateStats
   */
  @javax.annotation.Nullable
  public ReportSummaryAssetAggregateStats getAssetAggregateStats() {
    return assetAggregateStats;
  }

  public void setAssetAggregateStats(ReportSummaryAssetAggregateStats assetAggregateStats) {
    this.assetAggregateStats = assetAggregateStats;
  }


  public ReportSummaryGroupFinding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the Group.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReportSummaryGroupFinding displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display Name for the Group.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  @Deprecated
  public ReportSummaryGroupFinding overlappingAssetCount(String overlappingAssetCount) {
    this.overlappingAssetCount = overlappingAssetCount;
    return this;
  }

  /**
   * This field is deprecated, do not rely on it having a value.
   * @return overlappingAssetCount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getOverlappingAssetCount() {
    return overlappingAssetCount;
  }

  @Deprecated
  public void setOverlappingAssetCount(String overlappingAssetCount) {
    this.overlappingAssetCount = overlappingAssetCount;
  }


  public ReportSummaryGroupFinding preferenceSetFindings(List<ReportSummaryGroupPreferenceSetFinding> preferenceSetFindings) {
    this.preferenceSetFindings = preferenceSetFindings;
    return this;
  }

  public ReportSummaryGroupFinding addPreferenceSetFindingsItem(ReportSummaryGroupPreferenceSetFinding preferenceSetFindingsItem) {
    if (this.preferenceSetFindings == null) {
      this.preferenceSetFindings = new ArrayList<>();
    }
    this.preferenceSetFindings.add(preferenceSetFindingsItem);
    return this;
  }

  /**
   * Findings for each of the PreferenceSets for this group.
   * @return preferenceSetFindings
   */
  @javax.annotation.Nullable
  public List<ReportSummaryGroupPreferenceSetFinding> getPreferenceSetFindings() {
    return preferenceSetFindings;
  }

  public void setPreferenceSetFindings(List<ReportSummaryGroupPreferenceSetFinding> preferenceSetFindings) {
    this.preferenceSetFindings = preferenceSetFindings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSummaryGroupFinding reportSummaryGroupFinding = (ReportSummaryGroupFinding) o;
    return Objects.equals(this.assetAggregateStats, reportSummaryGroupFinding.assetAggregateStats) &&
        Objects.equals(this.description, reportSummaryGroupFinding.description) &&
        Objects.equals(this.displayName, reportSummaryGroupFinding.displayName) &&
        Objects.equals(this.overlappingAssetCount, reportSummaryGroupFinding.overlappingAssetCount) &&
        Objects.equals(this.preferenceSetFindings, reportSummaryGroupFinding.preferenceSetFindings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetAggregateStats, description, displayName, overlappingAssetCount, preferenceSetFindings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSummaryGroupFinding {\n");
    sb.append("    assetAggregateStats: ").append(toIndentedString(assetAggregateStats)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    overlappingAssetCount: ").append(toIndentedString(overlappingAssetCount)).append("\n");
    sb.append("    preferenceSetFindings: ").append(toIndentedString(preferenceSetFindings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetAggregateStats");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("overlappingAssetCount");
    openapiFields.add("preferenceSetFindings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSummaryGroupFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSummaryGroupFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSummaryGroupFinding is not found in the empty JSON string", ReportSummaryGroupFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSummaryGroupFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSummaryGroupFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetAggregateStats`
      if (jsonObj.get("assetAggregateStats") != null && !jsonObj.get("assetAggregateStats").isJsonNull()) {
        ReportSummaryAssetAggregateStats.validateJsonElement(jsonObj.get("assetAggregateStats"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("overlappingAssetCount") != null && !jsonObj.get("overlappingAssetCount").isJsonNull()) && !jsonObj.get("overlappingAssetCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overlappingAssetCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overlappingAssetCount").toString()));
      }
      if (jsonObj.get("preferenceSetFindings") != null && !jsonObj.get("preferenceSetFindings").isJsonNull()) {
        JsonArray jsonArraypreferenceSetFindings = jsonObj.getAsJsonArray("preferenceSetFindings");
        if (jsonArraypreferenceSetFindings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preferenceSetFindings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preferenceSetFindings` to be an array in the JSON string but got `%s`", jsonObj.get("preferenceSetFindings").toString()));
          }

          // validate the optional field `preferenceSetFindings` (array)
          for (int i = 0; i < jsonArraypreferenceSetFindings.size(); i++) {
            ReportSummaryGroupPreferenceSetFinding.validateJsonElement(jsonArraypreferenceSetFindings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSummaryGroupFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSummaryGroupFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSummaryGroupFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSummaryGroupFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSummaryGroupFinding>() {
           @Override
           public void write(JsonWriter out, ReportSummaryGroupFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSummaryGroupFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSummaryGroupFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSummaryGroupFinding
   * @throws IOException if the JSON string is invalid with respect to ReportSummaryGroupFinding
   */
  public static ReportSummaryGroupFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSummaryGroupFinding.class);
  }

  /**
   * Convert an instance of ReportSummaryGroupFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

