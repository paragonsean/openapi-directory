/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single fstab entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FstabEntry {
  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_FREQ = "freq";
  @SerializedName(SERIALIZED_NAME_FREQ)
  private Integer freq;

  public static final String SERIALIZED_NAME_MNTOPS = "mntops";
  @SerializedName(SERIALIZED_NAME_MNTOPS)
  private String mntops;

  public static final String SERIALIZED_NAME_PASSNO = "passno";
  @SerializedName(SERIALIZED_NAME_PASSNO)
  private Integer passno;

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private String spec;

  public static final String SERIALIZED_NAME_VFSTYPE = "vfstype";
  @SerializedName(SERIALIZED_NAME_VFSTYPE)
  private String vfstype;

  public FstabEntry() {
  }

  public FstabEntry _file(String _file) {
    this._file = _file;
    return this;
  }

  /**
   * The mount point for the filesystem.
   * @return _file
   */
  @javax.annotation.Nullable
  public String getFile() {
    return _file;
  }

  public void setFile(String _file) {
    this._file = _file;
  }


  public FstabEntry freq(Integer freq) {
    this.freq = freq;
    return this;
  }

  /**
   * Used by dump to determine which filesystems need to be dumped.
   * @return freq
   */
  @javax.annotation.Nullable
  public Integer getFreq() {
    return freq;
  }

  public void setFreq(Integer freq) {
    this.freq = freq;
  }


  public FstabEntry mntops(String mntops) {
    this.mntops = mntops;
    return this;
  }

  /**
   * Mount options associated with the filesystem.
   * @return mntops
   */
  @javax.annotation.Nullable
  public String getMntops() {
    return mntops;
  }

  public void setMntops(String mntops) {
    this.mntops = mntops;
  }


  public FstabEntry passno(Integer passno) {
    this.passno = passno;
    return this;
  }

  /**
   * Used by the fsck(8) program to determine the order in which filesystem checks are done at reboot time.
   * @return passno
   */
  @javax.annotation.Nullable
  public Integer getPassno() {
    return passno;
  }

  public void setPassno(Integer passno) {
    this.passno = passno;
  }


  public FstabEntry spec(String spec) {
    this.spec = spec;
    return this;
  }

  /**
   * The block special device or remote filesystem to be mounted.
   * @return spec
   */
  @javax.annotation.Nullable
  public String getSpec() {
    return spec;
  }

  public void setSpec(String spec) {
    this.spec = spec;
  }


  public FstabEntry vfstype(String vfstype) {
    this.vfstype = vfstype;
    return this;
  }

  /**
   * The type of the filesystem.
   * @return vfstype
   */
  @javax.annotation.Nullable
  public String getVfstype() {
    return vfstype;
  }

  public void setVfstype(String vfstype) {
    this.vfstype = vfstype;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FstabEntry fstabEntry = (FstabEntry) o;
    return Objects.equals(this._file, fstabEntry._file) &&
        Objects.equals(this.freq, fstabEntry.freq) &&
        Objects.equals(this.mntops, fstabEntry.mntops) &&
        Objects.equals(this.passno, fstabEntry.passno) &&
        Objects.equals(this.spec, fstabEntry.spec) &&
        Objects.equals(this.vfstype, fstabEntry.vfstype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_file, freq, mntops, passno, spec, vfstype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FstabEntry {\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    freq: ").append(toIndentedString(freq)).append("\n");
    sb.append("    mntops: ").append(toIndentedString(mntops)).append("\n");
    sb.append("    passno: ").append(toIndentedString(passno)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    vfstype: ").append(toIndentedString(vfstype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("file");
    openapiFields.add("freq");
    openapiFields.add("mntops");
    openapiFields.add("passno");
    openapiFields.add("spec");
    openapiFields.add("vfstype");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FstabEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FstabEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FstabEntry is not found in the empty JSON string", FstabEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FstabEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FstabEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("mntops") != null && !jsonObj.get("mntops").isJsonNull()) && !jsonObj.get("mntops").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mntops` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mntops").toString()));
      }
      if ((jsonObj.get("spec") != null && !jsonObj.get("spec").isJsonNull()) && !jsonObj.get("spec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spec").toString()));
      }
      if ((jsonObj.get("vfstype") != null && !jsonObj.get("vfstype").isJsonNull()) && !jsonObj.get("vfstype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vfstype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vfstype").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FstabEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FstabEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FstabEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FstabEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<FstabEntry>() {
           @Override
           public void write(JsonWriter out, FstabEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FstabEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FstabEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FstabEntry
   * @throws IOException if the JSON string is invalid with respect to FstabEntry
   */
  public static FstabEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FstabEntry.class);
  }

  /**
   * Convert an instance of FstabEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

