/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AggregationResultCount;
import org.openapitools.client.model.AggregationResultFrequency;
import org.openapitools.client.model.AggregationResultHistogram;
import org.openapitools.client.model.AggregationResultSum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing a result of an aggregation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AggregationResult {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private AggregationResultCount count;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private AggregationResultFrequency frequency;

  public static final String SERIALIZED_NAME_HISTOGRAM = "histogram";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM)
  private AggregationResultHistogram histogram;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private AggregationResultSum sum;

  public AggregationResult() {
  }

  public AggregationResult count(AggregationResultCount count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public AggregationResultCount getCount() {
    return count;
  }

  public void setCount(AggregationResultCount count) {
    this.count = count;
  }


  public AggregationResult field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public AggregationResult frequency(AggregationResultFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public AggregationResultFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(AggregationResultFrequency frequency) {
    this.frequency = frequency;
  }


  public AggregationResult histogram(AggregationResultHistogram histogram) {
    this.histogram = histogram;
    return this;
  }

  /**
   * Get histogram
   * @return histogram
   */
  @javax.annotation.Nullable
  public AggregationResultHistogram getHistogram() {
    return histogram;
  }

  public void setHistogram(AggregationResultHistogram histogram) {
    this.histogram = histogram;
  }


  public AggregationResult sum(AggregationResultSum sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public AggregationResultSum getSum() {
    return sum;
  }

  public void setSum(AggregationResultSum sum) {
    this.sum = sum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregationResult aggregationResult = (AggregationResult) o;
    return Objects.equals(this.count, aggregationResult.count) &&
        Objects.equals(this.field, aggregationResult.field) &&
        Objects.equals(this.frequency, aggregationResult.frequency) &&
        Objects.equals(this.histogram, aggregationResult.histogram) &&
        Objects.equals(this.sum, aggregationResult.sum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, field, frequency, histogram, sum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregationResult {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("field");
    openapiFields.add("frequency");
    openapiFields.add("histogram");
    openapiFields.add("sum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AggregationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregationResult is not found in the empty JSON string", AggregationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `count`
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        AggregationResultCount.validateJsonElement(jsonObj.get("count"));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        AggregationResultFrequency.validateJsonElement(jsonObj.get("frequency"));
      }
      // validate the optional field `histogram`
      if (jsonObj.get("histogram") != null && !jsonObj.get("histogram").isJsonNull()) {
        AggregationResultHistogram.validateJsonElement(jsonObj.get("histogram"));
      }
      // validate the optional field `sum`
      if (jsonObj.get("sum") != null && !jsonObj.get("sum").isJsonNull()) {
        AggregationResultSum.validateJsonElement(jsonObj.get("sum"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregationResult>() {
           @Override
           public void write(JsonWriter out, AggregationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AggregationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AggregationResult
   * @throws IOException if the JSON string is invalid with respect to AggregationResult
   */
  public static AggregationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregationResult.class);
  }

  /**
   * Convert an instance of AggregationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

