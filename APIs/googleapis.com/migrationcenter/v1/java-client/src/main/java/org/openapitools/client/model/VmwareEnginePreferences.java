/*
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The user preferences relating to Google Cloud VMware Engine target platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:29.567455-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmwareEnginePreferences {
  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   */
  @JsonAdapter(CommitmentPlanEnum.Adapter.class)
  public enum CommitmentPlanEnum {
    COMMITMENT_PLAN_UNSPECIFIED("COMMITMENT_PLAN_UNSPECIFIED"),
    
    ON_DEMAND("ON_DEMAND"),
    
    COMMITMENT_1_YEAR_MONTHLY_PAYMENTS("COMMITMENT_1_YEAR_MONTHLY_PAYMENTS"),
    
    COMMITMENT_3_YEAR_MONTHLY_PAYMENTS("COMMITMENT_3_YEAR_MONTHLY_PAYMENTS"),
    
    COMMITMENT_1_YEAR_UPFRONT_PAYMENT("COMMITMENT_1_YEAR_UPFRONT_PAYMENT"),
    
    COMMITMENT_3_YEAR_UPFRONT_PAYMENT("COMMITMENT_3_YEAR_UPFRONT_PAYMENT");

    private String value;

    CommitmentPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CommitmentPlanEnum fromValue(String value) {
      for (CommitmentPlanEnum b : CommitmentPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CommitmentPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CommitmentPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CommitmentPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CommitmentPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CommitmentPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMMITMENT_PLAN = "commitmentPlan";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_PLAN)
  private CommitmentPlanEnum commitmentPlan;

  public static final String SERIALIZED_NAME_CPU_OVERCOMMIT_RATIO = "cpuOvercommitRatio";
  @SerializedName(SERIALIZED_NAME_CPU_OVERCOMMIT_RATIO)
  private Double cpuOvercommitRatio;

  public static final String SERIALIZED_NAME_MEMORY_OVERCOMMIT_RATIO = "memoryOvercommitRatio";
  @SerializedName(SERIALIZED_NAME_MEMORY_OVERCOMMIT_RATIO)
  private Double memoryOvercommitRatio;

  public static final String SERIALIZED_NAME_STORAGE_DEDUPLICATION_COMPRESSION_RATIO = "storageDeduplicationCompressionRatio";
  @SerializedName(SERIALIZED_NAME_STORAGE_DEDUPLICATION_COMPRESSION_RATIO)
  private Double storageDeduplicationCompressionRatio;

  public VmwareEnginePreferences() {
  }

  public VmwareEnginePreferences commitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
    return this;
  }

  /**
   * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
   * @return commitmentPlan
   */
  @javax.annotation.Nullable
  public CommitmentPlanEnum getCommitmentPlan() {
    return commitmentPlan;
  }

  public void setCommitmentPlan(CommitmentPlanEnum commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
  }


  public VmwareEnginePreferences cpuOvercommitRatio(Double cpuOvercommitRatio) {
    this.cpuOvercommitRatio = cpuOvercommitRatio;
    return this;
  }

  /**
   * CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
   * @return cpuOvercommitRatio
   */
  @javax.annotation.Nullable
  public Double getCpuOvercommitRatio() {
    return cpuOvercommitRatio;
  }

  public void setCpuOvercommitRatio(Double cpuOvercommitRatio) {
    this.cpuOvercommitRatio = cpuOvercommitRatio;
  }


  public VmwareEnginePreferences memoryOvercommitRatio(Double memoryOvercommitRatio) {
    this.memoryOvercommitRatio = memoryOvercommitRatio;
    return this;
  }

  /**
   * Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
   * @return memoryOvercommitRatio
   */
  @javax.annotation.Nullable
  public Double getMemoryOvercommitRatio() {
    return memoryOvercommitRatio;
  }

  public void setMemoryOvercommitRatio(Double memoryOvercommitRatio) {
    this.memoryOvercommitRatio = memoryOvercommitRatio;
  }


  public VmwareEnginePreferences storageDeduplicationCompressionRatio(Double storageDeduplicationCompressionRatio) {
    this.storageDeduplicationCompressionRatio = storageDeduplicationCompressionRatio;
    return this;
  }

  /**
   * The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
   * @return storageDeduplicationCompressionRatio
   */
  @javax.annotation.Nullable
  public Double getStorageDeduplicationCompressionRatio() {
    return storageDeduplicationCompressionRatio;
  }

  public void setStorageDeduplicationCompressionRatio(Double storageDeduplicationCompressionRatio) {
    this.storageDeduplicationCompressionRatio = storageDeduplicationCompressionRatio;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmwareEnginePreferences vmwareEnginePreferences = (VmwareEnginePreferences) o;
    return Objects.equals(this.commitmentPlan, vmwareEnginePreferences.commitmentPlan) &&
        Objects.equals(this.cpuOvercommitRatio, vmwareEnginePreferences.cpuOvercommitRatio) &&
        Objects.equals(this.memoryOvercommitRatio, vmwareEnginePreferences.memoryOvercommitRatio) &&
        Objects.equals(this.storageDeduplicationCompressionRatio, vmwareEnginePreferences.storageDeduplicationCompressionRatio);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitmentPlan, cpuOvercommitRatio, memoryOvercommitRatio, storageDeduplicationCompressionRatio);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmwareEnginePreferences {\n");
    sb.append("    commitmentPlan: ").append(toIndentedString(commitmentPlan)).append("\n");
    sb.append("    cpuOvercommitRatio: ").append(toIndentedString(cpuOvercommitRatio)).append("\n");
    sb.append("    memoryOvercommitRatio: ").append(toIndentedString(memoryOvercommitRatio)).append("\n");
    sb.append("    storageDeduplicationCompressionRatio: ").append(toIndentedString(storageDeduplicationCompressionRatio)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitmentPlan");
    openapiFields.add("cpuOvercommitRatio");
    openapiFields.add("memoryOvercommitRatio");
    openapiFields.add("storageDeduplicationCompressionRatio");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmwareEnginePreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmwareEnginePreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmwareEnginePreferences is not found in the empty JSON string", VmwareEnginePreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmwareEnginePreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmwareEnginePreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) && !jsonObj.get("commitmentPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitmentPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitmentPlan").toString()));
      }
      // validate the optional field `commitmentPlan`
      if (jsonObj.get("commitmentPlan") != null && !jsonObj.get("commitmentPlan").isJsonNull()) {
        CommitmentPlanEnum.validateJsonElement(jsonObj.get("commitmentPlan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmwareEnginePreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmwareEnginePreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmwareEnginePreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmwareEnginePreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<VmwareEnginePreferences>() {
           @Override
           public void write(JsonWriter out, VmwareEnginePreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmwareEnginePreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmwareEnginePreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmwareEnginePreferences
   * @throws IOException if the JSON string is invalid with respect to VmwareEnginePreferences
   */
  public static VmwareEnginePreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmwareEnginePreferences.class);
  }

  /**
   * Convert an instance of VmwareEnginePreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

