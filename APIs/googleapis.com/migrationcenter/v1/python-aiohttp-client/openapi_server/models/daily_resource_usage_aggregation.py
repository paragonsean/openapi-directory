# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.daily_resource_usage_aggregation_cpu import DailyResourceUsageAggregationCPU
from openapi_server.models.daily_resource_usage_aggregation_disk import DailyResourceUsageAggregationDisk
from openapi_server.models.daily_resource_usage_aggregation_memory import DailyResourceUsageAggregationMemory
from openapi_server.models.daily_resource_usage_aggregation_network import DailyResourceUsageAggregationNetwork
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class DailyResourceUsageAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: DailyResourceUsageAggregationCPU=None, _date: ModelDate=None, disk: DailyResourceUsageAggregationDisk=None, memory: DailyResourceUsageAggregationMemory=None, network: DailyResourceUsageAggregationNetwork=None):
        """DailyResourceUsageAggregation - a model defined in OpenAPI

        :param cpu: The cpu of this DailyResourceUsageAggregation.
        :param _date: The _date of this DailyResourceUsageAggregation.
        :param disk: The disk of this DailyResourceUsageAggregation.
        :param memory: The memory of this DailyResourceUsageAggregation.
        :param network: The network of this DailyResourceUsageAggregation.
        """
        self.openapi_types = {
            'cpu': DailyResourceUsageAggregationCPU,
            '_date': ModelDate,
            'disk': DailyResourceUsageAggregationDisk,
            'memory': DailyResourceUsageAggregationMemory,
            'network': DailyResourceUsageAggregationNetwork
        }

        self.attribute_map = {
            'cpu': 'cpu',
            '_date': 'date',
            'disk': 'disk',
            'memory': 'memory',
            'network': 'network'
        }

        self._cpu = cpu
        self.__date = _date
        self._disk = disk
        self._memory = memory
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyResourceUsageAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyResourceUsageAggregation of this DailyResourceUsageAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this DailyResourceUsageAggregation.


        :return: The cpu of this DailyResourceUsageAggregation.
        :rtype: DailyResourceUsageAggregationCPU
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this DailyResourceUsageAggregation.


        :param cpu: The cpu of this DailyResourceUsageAggregation.
        :type cpu: DailyResourceUsageAggregationCPU
        """

        self._cpu = cpu

    @property
    def _date(self):
        """Gets the _date of this DailyResourceUsageAggregation.


        :return: The _date of this DailyResourceUsageAggregation.
        :rtype: ModelDate
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DailyResourceUsageAggregation.


        :param _date: The _date of this DailyResourceUsageAggregation.
        :type _date: ModelDate
        """

        self.__date = _date

    @property
    def disk(self):
        """Gets the disk of this DailyResourceUsageAggregation.


        :return: The disk of this DailyResourceUsageAggregation.
        :rtype: DailyResourceUsageAggregationDisk
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this DailyResourceUsageAggregation.


        :param disk: The disk of this DailyResourceUsageAggregation.
        :type disk: DailyResourceUsageAggregationDisk
        """

        self._disk = disk

    @property
    def memory(self):
        """Gets the memory of this DailyResourceUsageAggregation.


        :return: The memory of this DailyResourceUsageAggregation.
        :rtype: DailyResourceUsageAggregationMemory
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this DailyResourceUsageAggregation.


        :param memory: The memory of this DailyResourceUsageAggregation.
        :type memory: DailyResourceUsageAggregationMemory
        """

        self._memory = memory

    @property
    def network(self):
        """Gets the network of this DailyResourceUsageAggregation.


        :return: The network of this DailyResourceUsageAggregation.
        :rtype: DailyResourceUsageAggregationNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this DailyResourceUsageAggregation.


        :param network: The network of this DailyResourceUsageAggregation.
        :type network: DailyResourceUsageAggregationNetwork
        """

        self._network = network
