# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Source(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, error_frame_count: int=None, managed: bool=None, name: str=None, pending_frame_count: int=None, priority: int=None, state: str=None, type: str=None, update_time: str=None):
        """Source - a model defined in OpenAPI

        :param create_time: The create_time of this Source.
        :param description: The description of this Source.
        :param display_name: The display_name of this Source.
        :param error_frame_count: The error_frame_count of this Source.
        :param managed: The managed of this Source.
        :param name: The name of this Source.
        :param pending_frame_count: The pending_frame_count of this Source.
        :param priority: The priority of this Source.
        :param state: The state of this Source.
        :param type: The type of this Source.
        :param update_time: The update_time of this Source.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'error_frame_count': int,
            'managed': bool,
            'name': str,
            'pending_frame_count': int,
            'priority': int,
            'state': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'error_frame_count': 'errorFrameCount',
            'managed': 'managed',
            'name': 'name',
            'pending_frame_count': 'pendingFrameCount',
            'priority': 'priority',
            'state': 'state',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._error_frame_count = error_frame_count
        self._managed = managed
        self._name = name
        self._pending_frame_count = pending_frame_count
        self._priority = priority
        self._state = state
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Source':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Source of this Source.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Source.

        Output only. The timestamp when the source was created.

        :return: The create_time of this Source.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Source.

        Output only. The timestamp when the source was created.

        :param create_time: The create_time of this Source.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Source.

        Free-text description.

        :return: The description of this Source.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Source.

        Free-text description.

        :param description: The description of this Source.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Source.

        User-friendly display name.

        :return: The display_name of this Source.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Source.

        User-friendly display name.

        :param display_name: The display_name of this Source.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error_frame_count(self):
        """Gets the error_frame_count of this Source.

        Output only. The number of frames that were reported by the source and contained errors.

        :return: The error_frame_count of this Source.
        :rtype: int
        """
        return self._error_frame_count

    @error_frame_count.setter
    def error_frame_count(self, error_frame_count):
        """Sets the error_frame_count of this Source.

        Output only. The number of frames that were reported by the source and contained errors.

        :param error_frame_count: The error_frame_count of this Source.
        :type error_frame_count: int
        """

        self._error_frame_count = error_frame_count

    @property
    def managed(self):
        """Gets the managed of this Source.

        If `true`, the source is managed by other service(s).

        :return: The managed of this Source.
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Source.

        If `true`, the source is managed by other service(s).

        :param managed: The managed of this Source.
        :type managed: bool
        """

        self._managed = managed

    @property
    def name(self):
        """Gets the name of this Source.

        Output only. The full name of the source.

        :return: The name of this Source.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Source.

        Output only. The full name of the source.

        :param name: The name of this Source.
        :type name: str
        """

        self._name = name

    @property
    def pending_frame_count(self):
        """Gets the pending_frame_count of this Source.

        Output only. Number of frames that are still being processed.

        :return: The pending_frame_count of this Source.
        :rtype: int
        """
        return self._pending_frame_count

    @pending_frame_count.setter
    def pending_frame_count(self, pending_frame_count):
        """Sets the pending_frame_count of this Source.

        Output only. Number of frames that are still being processed.

        :param pending_frame_count: The pending_frame_count of this Source.
        :type pending_frame_count: int
        """

        self._pending_frame_count = pending_frame_count

    @property
    def priority(self):
        """Gets the priority of this Source.

        The information confidence of the source. The higher the value, the higher the confidence.

        :return: The priority of this Source.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Source.

        The information confidence of the source. The higher the value, the higher the confidence.

        :param priority: The priority of this Source.
        :type priority: int
        """

        self._priority = priority

    @property
    def state(self):
        """Gets the state of this Source.

        Output only. The state of the source.

        :return: The state of this Source.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Source.

        Output only. The state of the source.

        :param state: The state of this Source.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETING", "INVALID"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Source.

        Data source type.

        :return: The type of this Source.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Source.

        Data source type.

        :param type: The type of this Source.
        :type type: str
        """
        allowed_values = ["SOURCE_TYPE_UNKNOWN", "SOURCE_TYPE_UPLOAD", "SOURCE_TYPE_GUEST_OS_SCAN", "SOURCE_TYPE_INVENTORY_SCAN", "SOURCE_TYPE_CUSTOM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Source.

        Output only. The timestamp when the source was last updated.

        :return: The update_time of this Source.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Source.

        Output only. The timestamp when the source was last updated.

        :param update_time: The update_time of this Source.
        :type update_time: str
        """

        self._update_time = update_time
