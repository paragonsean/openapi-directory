# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cpu_usage_sample import CpuUsageSample
from openapi_server.models.disk_usage_sample import DiskUsageSample
from openapi_server.models.memory_usage_sample import MemoryUsageSample
from openapi_server.models.network_usage_sample import NetworkUsageSample
from openapi_server import util


class PerformanceSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: CpuUsageSample=None, disk: DiskUsageSample=None, memory: MemoryUsageSample=None, network: NetworkUsageSample=None, sample_time: str=None):
        """PerformanceSample - a model defined in OpenAPI

        :param cpu: The cpu of this PerformanceSample.
        :param disk: The disk of this PerformanceSample.
        :param memory: The memory of this PerformanceSample.
        :param network: The network of this PerformanceSample.
        :param sample_time: The sample_time of this PerformanceSample.
        """
        self.openapi_types = {
            'cpu': CpuUsageSample,
            'disk': DiskUsageSample,
            'memory': MemoryUsageSample,
            'network': NetworkUsageSample,
            'sample_time': str
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'disk': 'disk',
            'memory': 'memory',
            'network': 'network',
            'sample_time': 'sampleTime'
        }

        self._cpu = cpu
        self._disk = disk
        self._memory = memory
        self._network = network
        self._sample_time = sample_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformanceSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformanceSample of this PerformanceSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this PerformanceSample.


        :return: The cpu of this PerformanceSample.
        :rtype: CpuUsageSample
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this PerformanceSample.


        :param cpu: The cpu of this PerformanceSample.
        :type cpu: CpuUsageSample
        """

        self._cpu = cpu

    @property
    def disk(self):
        """Gets the disk of this PerformanceSample.


        :return: The disk of this PerformanceSample.
        :rtype: DiskUsageSample
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this PerformanceSample.


        :param disk: The disk of this PerformanceSample.
        :type disk: DiskUsageSample
        """

        self._disk = disk

    @property
    def memory(self):
        """Gets the memory of this PerformanceSample.


        :return: The memory of this PerformanceSample.
        :rtype: MemoryUsageSample
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this PerformanceSample.


        :param memory: The memory of this PerformanceSample.
        :type memory: MemoryUsageSample
        """

        self._memory = memory

    @property
    def network(self):
        """Gets the network of this PerformanceSample.


        :return: The network of this PerformanceSample.
        :rtype: NetworkUsageSample
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PerformanceSample.


        :param network: The network of this PerformanceSample.
        :type network: NetworkUsageSample
        """

        self._network = network

    @property
    def sample_time(self):
        """Gets the sample_time of this PerformanceSample.

        Time the sample was collected. If omitted, the frame report time will be used.

        :return: The sample_time of this PerformanceSample.
        :rtype: str
        """
        return self._sample_time

    @sample_time.setter
    def sample_time(self, sample_time):
        """Sets the sample_time of this PerformanceSample.

        Time the sample was collected. If omitted, the frame report time will be used.

        :param sample_time: The sample_time of this PerformanceSample.
        :type sample_time: str
        """

        self._sample_time = sample_time
