# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunningService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cmdline: str=None, exe_path: str=None, pid: str=None, service_name: str=None, start_mode: str=None, state: str=None):
        """RunningService - a model defined in OpenAPI

        :param cmdline: The cmdline of this RunningService.
        :param exe_path: The exe_path of this RunningService.
        :param pid: The pid of this RunningService.
        :param service_name: The service_name of this RunningService.
        :param start_mode: The start_mode of this RunningService.
        :param state: The state of this RunningService.
        """
        self.openapi_types = {
            'cmdline': str,
            'exe_path': str,
            'pid': str,
            'service_name': str,
            'start_mode': str,
            'state': str
        }

        self.attribute_map = {
            'cmdline': 'cmdline',
            'exe_path': 'exePath',
            'pid': 'pid',
            'service_name': 'serviceName',
            'start_mode': 'startMode',
            'state': 'state'
        }

        self._cmdline = cmdline
        self._exe_path = exe_path
        self._pid = pid
        self._service_name = service_name
        self._start_mode = start_mode
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunningService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunningService of this RunningService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cmdline(self):
        """Gets the cmdline of this RunningService.

        Service command line.

        :return: The cmdline of this RunningService.
        :rtype: str
        """
        return self._cmdline

    @cmdline.setter
    def cmdline(self, cmdline):
        """Sets the cmdline of this RunningService.

        Service command line.

        :param cmdline: The cmdline of this RunningService.
        :type cmdline: str
        """

        self._cmdline = cmdline

    @property
    def exe_path(self):
        """Gets the exe_path of this RunningService.

        Service binary path.

        :return: The exe_path of this RunningService.
        :rtype: str
        """
        return self._exe_path

    @exe_path.setter
    def exe_path(self, exe_path):
        """Sets the exe_path of this RunningService.

        Service binary path.

        :param exe_path: The exe_path of this RunningService.
        :type exe_path: str
        """

        self._exe_path = exe_path

    @property
    def pid(self):
        """Gets the pid of this RunningService.

        Service pid.

        :return: The pid of this RunningService.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this RunningService.

        Service pid.

        :param pid: The pid of this RunningService.
        :type pid: str
        """

        self._pid = pid

    @property
    def service_name(self):
        """Gets the service_name of this RunningService.

        Service name.

        :return: The service_name of this RunningService.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this RunningService.

        Service name.

        :param service_name: The service_name of this RunningService.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def start_mode(self):
        """Gets the start_mode of this RunningService.

        Service start mode (OS-agnostic).

        :return: The start_mode of this RunningService.
        :rtype: str
        """
        return self._start_mode

    @start_mode.setter
    def start_mode(self, start_mode):
        """Sets the start_mode of this RunningService.

        Service start mode (OS-agnostic).

        :param start_mode: The start_mode of this RunningService.
        :type start_mode: str
        """
        allowed_values = ["START_MODE_UNSPECIFIED", "BOOT", "SYSTEM", "AUTO", "MANUAL", "DISABLED"]  # noqa: E501
        if start_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `start_mode` ({0}), must be one of {1}"
                .format(start_mode, allowed_values)
            )

        self._start_mode = start_mode

    @property
    def state(self):
        """Gets the state of this RunningService.

        Service state (OS-agnostic).

        :return: The state of this RunningService.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunningService.

        Service state (OS-agnostic).

        :param state: The state of this RunningService.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "PAUSED", "STOPPED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
