# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportSummaryHistogramChartDataBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, lower_bound: str=None, upper_bound: str=None):
        """ReportSummaryHistogramChartDataBucket - a model defined in OpenAPI

        :param count: The count of this ReportSummaryHistogramChartDataBucket.
        :param lower_bound: The lower_bound of this ReportSummaryHistogramChartDataBucket.
        :param upper_bound: The upper_bound of this ReportSummaryHistogramChartDataBucket.
        """
        self.openapi_types = {
            'count': str,
            'lower_bound': str,
            'upper_bound': str
        }

        self.attribute_map = {
            'count': 'count',
            'lower_bound': 'lowerBound',
            'upper_bound': 'upperBound'
        }

        self._count = count
        self._lower_bound = lower_bound
        self._upper_bound = upper_bound

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSummaryHistogramChartDataBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSummaryHistogramChartDataBucket of this ReportSummaryHistogramChartDataBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ReportSummaryHistogramChartDataBucket.

        Count of items in the bucket.

        :return: The count of this ReportSummaryHistogramChartDataBucket.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ReportSummaryHistogramChartDataBucket.

        Count of items in the bucket.

        :param count: The count of this ReportSummaryHistogramChartDataBucket.
        :type count: str
        """

        self._count = count

    @property
    def lower_bound(self):
        """Gets the lower_bound of this ReportSummaryHistogramChartDataBucket.

        Lower bound - inclusive.

        :return: The lower_bound of this ReportSummaryHistogramChartDataBucket.
        :rtype: str
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this ReportSummaryHistogramChartDataBucket.

        Lower bound - inclusive.

        :param lower_bound: The lower_bound of this ReportSummaryHistogramChartDataBucket.
        :type lower_bound: str
        """

        self._lower_bound = lower_bound

    @property
    def upper_bound(self):
        """Gets the upper_bound of this ReportSummaryHistogramChartDataBucket.

        Upper bound - exclusive.

        :return: The upper_bound of this ReportSummaryHistogramChartDataBucket.
        :rtype: str
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this ReportSummaryHistogramChartDataBucket.

        Upper bound - exclusive.

        :param upper_bound: The upper_bound of this ReportSummaryHistogramChartDataBucket.
        :type upper_bound: str
        """

        self._upper_bound = upper_bound
