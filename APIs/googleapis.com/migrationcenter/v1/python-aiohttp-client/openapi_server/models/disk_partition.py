# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk_partition_list import DiskPartitionList
from openapi_server import util


class DiskPartition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_bytes: str=None, file_system: str=None, free_bytes: str=None, mount_point: str=None, sub_partitions: DiskPartitionList=None, type: str=None, uuid: str=None):
        """DiskPartition - a model defined in OpenAPI

        :param capacity_bytes: The capacity_bytes of this DiskPartition.
        :param file_system: The file_system of this DiskPartition.
        :param free_bytes: The free_bytes of this DiskPartition.
        :param mount_point: The mount_point of this DiskPartition.
        :param sub_partitions: The sub_partitions of this DiskPartition.
        :param type: The type of this DiskPartition.
        :param uuid: The uuid of this DiskPartition.
        """
        self.openapi_types = {
            'capacity_bytes': str,
            'file_system': str,
            'free_bytes': str,
            'mount_point': str,
            'sub_partitions': DiskPartitionList,
            'type': str,
            'uuid': str
        }

        self.attribute_map = {
            'capacity_bytes': 'capacityBytes',
            'file_system': 'fileSystem',
            'free_bytes': 'freeBytes',
            'mount_point': 'mountPoint',
            'sub_partitions': 'subPartitions',
            'type': 'type',
            'uuid': 'uuid'
        }

        self._capacity_bytes = capacity_bytes
        self._file_system = file_system
        self._free_bytes = free_bytes
        self._mount_point = mount_point
        self._sub_partitions = sub_partitions
        self._type = type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskPartition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskPartition of this DiskPartition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this DiskPartition.

        Partition capacity.

        :return: The capacity_bytes of this DiskPartition.
        :rtype: str
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this DiskPartition.

        Partition capacity.

        :param capacity_bytes: The capacity_bytes of this DiskPartition.
        :type capacity_bytes: str
        """

        self._capacity_bytes = capacity_bytes

    @property
    def file_system(self):
        """Gets the file_system of this DiskPartition.

        Partition file system.

        :return: The file_system of this DiskPartition.
        :rtype: str
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """Sets the file_system of this DiskPartition.

        Partition file system.

        :param file_system: The file_system of this DiskPartition.
        :type file_system: str
        """

        self._file_system = file_system

    @property
    def free_bytes(self):
        """Gets the free_bytes of this DiskPartition.

        Partition free space.

        :return: The free_bytes of this DiskPartition.
        :rtype: str
        """
        return self._free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):
        """Sets the free_bytes of this DiskPartition.

        Partition free space.

        :param free_bytes: The free_bytes of this DiskPartition.
        :type free_bytes: str
        """

        self._free_bytes = free_bytes

    @property
    def mount_point(self):
        """Gets the mount_point of this DiskPartition.

        Mount pount (Linux/Windows) or drive letter (Windows).

        :return: The mount_point of this DiskPartition.
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """Sets the mount_point of this DiskPartition.

        Mount pount (Linux/Windows) or drive letter (Windows).

        :param mount_point: The mount_point of this DiskPartition.
        :type mount_point: str
        """

        self._mount_point = mount_point

    @property
    def sub_partitions(self):
        """Gets the sub_partitions of this DiskPartition.


        :return: The sub_partitions of this DiskPartition.
        :rtype: DiskPartitionList
        """
        return self._sub_partitions

    @sub_partitions.setter
    def sub_partitions(self, sub_partitions):
        """Sets the sub_partitions of this DiskPartition.


        :param sub_partitions: The sub_partitions of this DiskPartition.
        :type sub_partitions: DiskPartitionList
        """

        self._sub_partitions = sub_partitions

    @property
    def type(self):
        """Gets the type of this DiskPartition.

        Partition type.

        :return: The type of this DiskPartition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DiskPartition.

        Partition type.

        :param type: The type of this DiskPartition.
        :type type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this DiskPartition.

        Partition UUID.

        :return: The uuid of this DiskPartition.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DiskPartition.

        Partition UUID.

        :param uuid: The uuid of this DiskPartition.
        :type uuid: str
        """

        self._uuid = uuid
