# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DailyResourceUsageAggregationStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, median: float=None, nintey_fifth_percentile: float=None, peak: float=None):
        """DailyResourceUsageAggregationStats - a model defined in OpenAPI

        :param average: The average of this DailyResourceUsageAggregationStats.
        :param median: The median of this DailyResourceUsageAggregationStats.
        :param nintey_fifth_percentile: The nintey_fifth_percentile of this DailyResourceUsageAggregationStats.
        :param peak: The peak of this DailyResourceUsageAggregationStats.
        """
        self.openapi_types = {
            'average': float,
            'median': float,
            'nintey_fifth_percentile': float,
            'peak': float
        }

        self.attribute_map = {
            'average': 'average',
            'median': 'median',
            'nintey_fifth_percentile': 'ninteyFifthPercentile',
            'peak': 'peak'
        }

        self._average = average
        self._median = median
        self._nintey_fifth_percentile = nintey_fifth_percentile
        self._peak = peak

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DailyResourceUsageAggregationStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DailyResourceUsageAggregationStats of this DailyResourceUsageAggregationStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this DailyResourceUsageAggregationStats.

        Average usage value.

        :return: The average of this DailyResourceUsageAggregationStats.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this DailyResourceUsageAggregationStats.

        Average usage value.

        :param average: The average of this DailyResourceUsageAggregationStats.
        :type average: float
        """

        self._average = average

    @property
    def median(self):
        """Gets the median of this DailyResourceUsageAggregationStats.

        Median usage value.

        :return: The median of this DailyResourceUsageAggregationStats.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this DailyResourceUsageAggregationStats.

        Median usage value.

        :param median: The median of this DailyResourceUsageAggregationStats.
        :type median: float
        """

        self._median = median

    @property
    def nintey_fifth_percentile(self):
        """Gets the nintey_fifth_percentile of this DailyResourceUsageAggregationStats.

        95th percentile usage value.

        :return: The nintey_fifth_percentile of this DailyResourceUsageAggregationStats.
        :rtype: float
        """
        return self._nintey_fifth_percentile

    @nintey_fifth_percentile.setter
    def nintey_fifth_percentile(self, nintey_fifth_percentile):
        """Sets the nintey_fifth_percentile of this DailyResourceUsageAggregationStats.

        95th percentile usage value.

        :param nintey_fifth_percentile: The nintey_fifth_percentile of this DailyResourceUsageAggregationStats.
        :type nintey_fifth_percentile: float
        """

        self._nintey_fifth_percentile = nintey_fifth_percentile

    @property
    def peak(self):
        """Gets the peak of this DailyResourceUsageAggregationStats.

        Peak usage value.

        :return: The peak of this DailyResourceUsageAggregationStats.
        :rtype: float
        """
        return self._peak

    @peak.setter
    def peak(self, peak):
        """Sets the peak of this DailyResourceUsageAggregationStats.

        Peak usage value.

        :param peak: The peak of this DailyResourceUsageAggregationStats.
        :type peak: float
        """

        self._peak = peak
