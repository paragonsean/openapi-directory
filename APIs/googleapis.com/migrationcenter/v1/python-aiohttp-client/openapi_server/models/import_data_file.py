# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.upload_file_info import UploadFileInfo
from openapi_server import util


class ImportDataFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, display_name: str=None, format: str=None, name: str=None, state: str=None, upload_file_info: UploadFileInfo=None):
        """ImportDataFile - a model defined in OpenAPI

        :param create_time: The create_time of this ImportDataFile.
        :param display_name: The display_name of this ImportDataFile.
        :param format: The format of this ImportDataFile.
        :param name: The name of this ImportDataFile.
        :param state: The state of this ImportDataFile.
        :param upload_file_info: The upload_file_info of this ImportDataFile.
        """
        self.openapi_types = {
            'create_time': str,
            'display_name': str,
            'format': str,
            'name': str,
            'state': str,
            'upload_file_info': UploadFileInfo
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'display_name': 'displayName',
            'format': 'format',
            'name': 'name',
            'state': 'state',
            'upload_file_info': 'uploadFileInfo'
        }

        self._create_time = create_time
        self._display_name = display_name
        self._format = format
        self._name = name
        self._state = state
        self._upload_file_info = upload_file_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportDataFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportDataFile of this ImportDataFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ImportDataFile.

        Output only. The timestamp when the file was created.

        :return: The create_time of this ImportDataFile.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ImportDataFile.

        Output only. The timestamp when the file was created.

        :param create_time: The create_time of this ImportDataFile.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ImportDataFile.

        User-friendly display name. Maximum length is 63 characters.

        :return: The display_name of this ImportDataFile.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ImportDataFile.

        User-friendly display name. Maximum length is 63 characters.

        :param display_name: The display_name of this ImportDataFile.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def format(self):
        """Gets the format of this ImportDataFile.

        Required. The payload format.

        :return: The format of this ImportDataFile.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ImportDataFile.

        Required. The payload format.

        :param format: The format of this ImportDataFile.
        :type format: str
        """
        allowed_values = ["IMPORT_JOB_FORMAT_UNSPECIFIED", "IMPORT_JOB_FORMAT_RVTOOLS_XLSX", "IMPORT_JOB_FORMAT_RVTOOLS_CSV", "IMPORT_JOB_FORMAT_EXPORTED_AWS_CSV", "IMPORT_JOB_FORMAT_EXPORTED_AZURE_CSV", "IMPORT_JOB_FORMAT_STRATOZONE_CSV"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this ImportDataFile.

        Output only. The name of the file.

        :return: The name of this ImportDataFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportDataFile.

        Output only. The name of the file.

        :param name: The name of this ImportDataFile.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ImportDataFile.

        Output only. The state of the import data file.

        :return: The state of this ImportDataFile.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportDataFile.

        Output only. The state of the import data file.

        :param state: The state of this ImportDataFile.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def upload_file_info(self):
        """Gets the upload_file_info of this ImportDataFile.


        :return: The upload_file_info of this ImportDataFile.
        :rtype: UploadFileInfo
        """
        return self._upload_file_info

    @upload_file_info.setter
    def upload_file_info(self, upload_file_info):
        """Sets the upload_file_info of this ImportDataFile.


        :param upload_file_info: The upload_file_info of this ImportDataFile.
        :type upload_file_info: UploadFileInfo
        """

        self._upload_file_info = upload_file_info
