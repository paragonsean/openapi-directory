# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_report import ExecutionReport
from openapi_server.models.validation_report import ValidationReport
from openapi_server import util


class ImportJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_source: str=None, complete_time: str=None, create_time: str=None, display_name: str=None, execution_report: ExecutionReport=None, labels: Dict[str, str]=None, name: str=None, state: str=None, update_time: str=None, validation_report: ValidationReport=None):
        """ImportJob - a model defined in OpenAPI

        :param asset_source: The asset_source of this ImportJob.
        :param complete_time: The complete_time of this ImportJob.
        :param create_time: The create_time of this ImportJob.
        :param display_name: The display_name of this ImportJob.
        :param execution_report: The execution_report of this ImportJob.
        :param labels: The labels of this ImportJob.
        :param name: The name of this ImportJob.
        :param state: The state of this ImportJob.
        :param update_time: The update_time of this ImportJob.
        :param validation_report: The validation_report of this ImportJob.
        """
        self.openapi_types = {
            'asset_source': str,
            'complete_time': str,
            'create_time': str,
            'display_name': str,
            'execution_report': ExecutionReport,
            'labels': Dict[str, str],
            'name': str,
            'state': str,
            'update_time': str,
            'validation_report': ValidationReport
        }

        self.attribute_map = {
            'asset_source': 'assetSource',
            'complete_time': 'completeTime',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'execution_report': 'executionReport',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'update_time': 'updateTime',
            'validation_report': 'validationReport'
        }

        self._asset_source = asset_source
        self._complete_time = complete_time
        self._create_time = create_time
        self._display_name = display_name
        self._execution_report = execution_report
        self._labels = labels
        self._name = name
        self._state = state
        self._update_time = update_time
        self._validation_report = validation_report

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportJob of this ImportJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_source(self):
        """Gets the asset_source of this ImportJob.

        Required. Reference to a source.

        :return: The asset_source of this ImportJob.
        :rtype: str
        """
        return self._asset_source

    @asset_source.setter
    def asset_source(self, asset_source):
        """Sets the asset_source of this ImportJob.

        Required. Reference to a source.

        :param asset_source: The asset_source of this ImportJob.
        :type asset_source: str
        """

        self._asset_source = asset_source

    @property
    def complete_time(self):
        """Gets the complete_time of this ImportJob.

        Output only. The timestamp when the import job was completed.

        :return: The complete_time of this ImportJob.
        :rtype: str
        """
        return self._complete_time

    @complete_time.setter
    def complete_time(self, complete_time):
        """Sets the complete_time of this ImportJob.

        Output only. The timestamp when the import job was completed.

        :param complete_time: The complete_time of this ImportJob.
        :type complete_time: str
        """

        self._complete_time = complete_time

    @property
    def create_time(self):
        """Gets the create_time of this ImportJob.

        Output only. The timestamp when the import job was created.

        :return: The create_time of this ImportJob.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ImportJob.

        Output only. The timestamp when the import job was created.

        :param create_time: The create_time of this ImportJob.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this ImportJob.

        Optional. User-friendly display name. Maximum length is 256 characters.

        :return: The display_name of this ImportJob.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ImportJob.

        Optional. User-friendly display name. Maximum length is 256 characters.

        :param display_name: The display_name of this ImportJob.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def execution_report(self):
        """Gets the execution_report of this ImportJob.


        :return: The execution_report of this ImportJob.
        :rtype: ExecutionReport
        """
        return self._execution_report

    @execution_report.setter
    def execution_report(self, execution_report):
        """Sets the execution_report of this ImportJob.


        :param execution_report: The execution_report of this ImportJob.
        :type execution_report: ExecutionReport
        """

        self._execution_report = execution_report

    @property
    def labels(self):
        """Gets the labels of this ImportJob.

        Labels as key value pairs.

        :return: The labels of this ImportJob.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImportJob.

        Labels as key value pairs.

        :param labels: The labels of this ImportJob.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ImportJob.

        Output only. The full name of the import job.

        :return: The name of this ImportJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportJob.

        Output only. The full name of the import job.

        :param name: The name of this ImportJob.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this ImportJob.

        Output only. The state of the import job.

        :return: The state of this ImportJob.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportJob.

        Output only. The state of the import job.

        :param state: The state of this ImportJob.
        :type state: str
        """
        allowed_values = ["IMPORT_JOB_STATE_UNSPECIFIED", "IMPORT_JOB_STATE_PENDING", "IMPORT_JOB_STATE_RUNNING", "IMPORT_JOB_STATE_COMPLETED", "IMPORT_JOB_STATE_FAILED", "IMPORT_JOB_STATE_VALIDATING", "IMPORT_JOB_STATE_FAILED_VALIDATION", "IMPORT_JOB_STATE_READY"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this ImportJob.

        Output only. The timestamp when the import job was last updated.

        :return: The update_time of this ImportJob.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ImportJob.

        Output only. The timestamp when the import job was last updated.

        :param update_time: The update_time of this ImportJob.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def validation_report(self):
        """Gets the validation_report of this ImportJob.


        :return: The validation_report of this ImportJob.
        :rtype: ValidationReport
        """
        return self._validation_report

    @validation_report.setter
    def validation_report(self, validation_report):
        """Sets the validation_report of this ImportJob.


        :param validation_report: The validation_report of this ImportJob.
        :type validation_report: ValidationReport
        """

        self._validation_report = validation_report
