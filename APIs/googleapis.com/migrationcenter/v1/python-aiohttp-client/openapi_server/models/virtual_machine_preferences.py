# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_engine_preferences import ComputeEnginePreferences
from openapi_server.models.region_preferences import RegionPreferences
from openapi_server.models.sole_tenancy_preferences import SoleTenancyPreferences
from openapi_server.models.vmware_engine_preferences import VmwareEnginePreferences
from openapi_server import util


class VirtualMachinePreferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_plan: str=None, compute_engine_preferences: ComputeEnginePreferences=None, region_preferences: RegionPreferences=None, sizing_optimization_strategy: str=None, sole_tenancy_preferences: SoleTenancyPreferences=None, target_product: str=None, vmware_engine_preferences: VmwareEnginePreferences=None):
        """VirtualMachinePreferences - a model defined in OpenAPI

        :param commitment_plan: The commitment_plan of this VirtualMachinePreferences.
        :param compute_engine_preferences: The compute_engine_preferences of this VirtualMachinePreferences.
        :param region_preferences: The region_preferences of this VirtualMachinePreferences.
        :param sizing_optimization_strategy: The sizing_optimization_strategy of this VirtualMachinePreferences.
        :param sole_tenancy_preferences: The sole_tenancy_preferences of this VirtualMachinePreferences.
        :param target_product: The target_product of this VirtualMachinePreferences.
        :param vmware_engine_preferences: The vmware_engine_preferences of this VirtualMachinePreferences.
        """
        self.openapi_types = {
            'commitment_plan': str,
            'compute_engine_preferences': ComputeEnginePreferences,
            'region_preferences': RegionPreferences,
            'sizing_optimization_strategy': str,
            'sole_tenancy_preferences': SoleTenancyPreferences,
            'target_product': str,
            'vmware_engine_preferences': VmwareEnginePreferences
        }

        self.attribute_map = {
            'commitment_plan': 'commitmentPlan',
            'compute_engine_preferences': 'computeEnginePreferences',
            'region_preferences': 'regionPreferences',
            'sizing_optimization_strategy': 'sizingOptimizationStrategy',
            'sole_tenancy_preferences': 'soleTenancyPreferences',
            'target_product': 'targetProduct',
            'vmware_engine_preferences': 'vmwareEnginePreferences'
        }

        self._commitment_plan = commitment_plan
        self._compute_engine_preferences = compute_engine_preferences
        self._region_preferences = region_preferences
        self._sizing_optimization_strategy = sizing_optimization_strategy
        self._sole_tenancy_preferences = sole_tenancy_preferences
        self._target_product = target_product
        self._vmware_engine_preferences = vmware_engine_preferences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachinePreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachinePreferences of this VirtualMachinePreferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_plan(self):
        """Gets the commitment_plan of this VirtualMachinePreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :return: The commitment_plan of this VirtualMachinePreferences.
        :rtype: str
        """
        return self._commitment_plan

    @commitment_plan.setter
    def commitment_plan(self, commitment_plan):
        """Sets the commitment_plan of this VirtualMachinePreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :param commitment_plan: The commitment_plan of this VirtualMachinePreferences.
        :type commitment_plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "COMMITMENT_PLAN_NONE", "COMMITMENT_PLAN_ONE_YEAR", "COMMITMENT_PLAN_THREE_YEARS"]  # noqa: E501
        if commitment_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment_plan` ({0}), must be one of {1}"
                .format(commitment_plan, allowed_values)
            )

        self._commitment_plan = commitment_plan

    @property
    def compute_engine_preferences(self):
        """Gets the compute_engine_preferences of this VirtualMachinePreferences.


        :return: The compute_engine_preferences of this VirtualMachinePreferences.
        :rtype: ComputeEnginePreferences
        """
        return self._compute_engine_preferences

    @compute_engine_preferences.setter
    def compute_engine_preferences(self, compute_engine_preferences):
        """Sets the compute_engine_preferences of this VirtualMachinePreferences.


        :param compute_engine_preferences: The compute_engine_preferences of this VirtualMachinePreferences.
        :type compute_engine_preferences: ComputeEnginePreferences
        """

        self._compute_engine_preferences = compute_engine_preferences

    @property
    def region_preferences(self):
        """Gets the region_preferences of this VirtualMachinePreferences.


        :return: The region_preferences of this VirtualMachinePreferences.
        :rtype: RegionPreferences
        """
        return self._region_preferences

    @region_preferences.setter
    def region_preferences(self, region_preferences):
        """Sets the region_preferences of this VirtualMachinePreferences.


        :param region_preferences: The region_preferences of this VirtualMachinePreferences.
        :type region_preferences: RegionPreferences
        """

        self._region_preferences = region_preferences

    @property
    def sizing_optimization_strategy(self):
        """Gets the sizing_optimization_strategy of this VirtualMachinePreferences.

        Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.

        :return: The sizing_optimization_strategy of this VirtualMachinePreferences.
        :rtype: str
        """
        return self._sizing_optimization_strategy

    @sizing_optimization_strategy.setter
    def sizing_optimization_strategy(self, sizing_optimization_strategy):
        """Sets the sizing_optimization_strategy of this VirtualMachinePreferences.

        Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.

        :param sizing_optimization_strategy: The sizing_optimization_strategy of this VirtualMachinePreferences.
        :type sizing_optimization_strategy: str
        """
        allowed_values = ["SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED", "SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE", "SIZING_OPTIMIZATION_STRATEGY_MODERATE", "SIZING_OPTIMIZATION_STRATEGY_AGGRESSIVE"]  # noqa: E501
        if sizing_optimization_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `sizing_optimization_strategy` ({0}), must be one of {1}"
                .format(sizing_optimization_strategy, allowed_values)
            )

        self._sizing_optimization_strategy = sizing_optimization_strategy

    @property
    def sole_tenancy_preferences(self):
        """Gets the sole_tenancy_preferences of this VirtualMachinePreferences.


        :return: The sole_tenancy_preferences of this VirtualMachinePreferences.
        :rtype: SoleTenancyPreferences
        """
        return self._sole_tenancy_preferences

    @sole_tenancy_preferences.setter
    def sole_tenancy_preferences(self, sole_tenancy_preferences):
        """Sets the sole_tenancy_preferences of this VirtualMachinePreferences.


        :param sole_tenancy_preferences: The sole_tenancy_preferences of this VirtualMachinePreferences.
        :type sole_tenancy_preferences: SoleTenancyPreferences
        """

        self._sole_tenancy_preferences = sole_tenancy_preferences

    @property
    def target_product(self):
        """Gets the target_product of this VirtualMachinePreferences.

        Target product for assets using this preference set. Specify either target product or business goal, but not both.

        :return: The target_product of this VirtualMachinePreferences.
        :rtype: str
        """
        return self._target_product

    @target_product.setter
    def target_product(self, target_product):
        """Sets the target_product of this VirtualMachinePreferences.

        Target product for assets using this preference set. Specify either target product or business goal, but not both.

        :param target_product: The target_product of this VirtualMachinePreferences.
        :type target_product: str
        """
        allowed_values = ["COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED", "COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE", "COMPUTE_MIGRATION_TARGET_PRODUCT_VMWARE_ENGINE", "COMPUTE_MIGRATION_TARGET_PRODUCT_SOLE_TENANCY"]  # noqa: E501
        if target_product not in allowed_values:
            raise ValueError(
                "Invalid value for `target_product` ({0}), must be one of {1}"
                .format(target_product, allowed_values)
            )

        self._target_product = target_product

    @property
    def vmware_engine_preferences(self):
        """Gets the vmware_engine_preferences of this VirtualMachinePreferences.


        :return: The vmware_engine_preferences of this VirtualMachinePreferences.
        :rtype: VmwareEnginePreferences
        """
        return self._vmware_engine_preferences

    @vmware_engine_preferences.setter
    def vmware_engine_preferences(self, vmware_engine_preferences):
        """Sets the vmware_engine_preferences of this VirtualMachinePreferences.


        :param vmware_engine_preferences: The vmware_engine_preferences of this VirtualMachinePreferences.
        :type vmware_engine_preferences: VmwareEnginePreferences
        """

        self._vmware_engine_preferences = vmware_engine_preferences
