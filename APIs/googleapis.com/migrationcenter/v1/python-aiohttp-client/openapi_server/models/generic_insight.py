# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenericInsight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_information: List[str]=None, default_message: str=None, message_id: str=None):
        """GenericInsight - a model defined in OpenAPI

        :param additional_information: The additional_information of this GenericInsight.
        :param default_message: The default_message of this GenericInsight.
        :param message_id: The message_id of this GenericInsight.
        """
        self.openapi_types = {
            'additional_information': List[str],
            'default_message': str,
            'message_id': str
        }

        self.attribute_map = {
            'additional_information': 'additionalInformation',
            'default_message': 'defaultMessage',
            'message_id': 'messageId'
        }

        self._additional_information = additional_information
        self._default_message = default_message
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericInsight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericInsight of this GenericInsight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_information(self):
        """Gets the additional_information of this GenericInsight.

        Output only. Additional information about the insight, each entry can be a logical entry and must make sense if it is displayed with line breaks between each entry. Text can contain md style links.

        :return: The additional_information of this GenericInsight.
        :rtype: List[str]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this GenericInsight.

        Output only. Additional information about the insight, each entry can be a logical entry and must make sense if it is displayed with line breaks between each entry. Text can contain md style links.

        :param additional_information: The additional_information of this GenericInsight.
        :type additional_information: List[str]
        """

        self._additional_information = additional_information

    @property
    def default_message(self):
        """Gets the default_message of this GenericInsight.

        Output only. In case message_code is not yet known by the client default_message will be the message to be used instead.

        :return: The default_message of this GenericInsight.
        :rtype: str
        """
        return self._default_message

    @default_message.setter
    def default_message(self, default_message):
        """Sets the default_message of this GenericInsight.

        Output only. In case message_code is not yet known by the client default_message will be the message to be used instead.

        :param default_message: The default_message of this GenericInsight.
        :type default_message: str
        """

        self._default_message = default_message

    @property
    def message_id(self):
        """Gets the message_id of this GenericInsight.

        Output only. Represents a globally unique message id for this insight, can be used for localization purposes, in case message_code is not yet known by the client use default_message instead.

        :return: The message_id of this GenericInsight.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this GenericInsight.

        Output only. Represents a globally unique message id for this insight, can be used for localization purposes, in case message_code is not yet known by the client use default_message instead.

        :param message_id: The message_id of this GenericInsight.
        :type message_id: str
        """

        self._message_id = message_id
