# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareEnginePreferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_plan: str=None, cpu_overcommit_ratio: float=None, memory_overcommit_ratio: float=None, storage_deduplication_compression_ratio: float=None):
        """VmwareEnginePreferences - a model defined in OpenAPI

        :param commitment_plan: The commitment_plan of this VmwareEnginePreferences.
        :param cpu_overcommit_ratio: The cpu_overcommit_ratio of this VmwareEnginePreferences.
        :param memory_overcommit_ratio: The memory_overcommit_ratio of this VmwareEnginePreferences.
        :param storage_deduplication_compression_ratio: The storage_deduplication_compression_ratio of this VmwareEnginePreferences.
        """
        self.openapi_types = {
            'commitment_plan': str,
            'cpu_overcommit_ratio': float,
            'memory_overcommit_ratio': float,
            'storage_deduplication_compression_ratio': float
        }

        self.attribute_map = {
            'commitment_plan': 'commitmentPlan',
            'cpu_overcommit_ratio': 'cpuOvercommitRatio',
            'memory_overcommit_ratio': 'memoryOvercommitRatio',
            'storage_deduplication_compression_ratio': 'storageDeduplicationCompressionRatio'
        }

        self._commitment_plan = commitment_plan
        self._cpu_overcommit_ratio = cpu_overcommit_ratio
        self._memory_overcommit_ratio = memory_overcommit_ratio
        self._storage_deduplication_compression_ratio = storage_deduplication_compression_ratio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareEnginePreferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareEnginePreferences of this VmwareEnginePreferences.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_plan(self):
        """Gets the commitment_plan of this VmwareEnginePreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :return: The commitment_plan of this VmwareEnginePreferences.
        :rtype: str
        """
        return self._commitment_plan

    @commitment_plan.setter
    def commitment_plan(self, commitment_plan):
        """Sets the commitment_plan of this VmwareEnginePreferences.

        Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.

        :param commitment_plan: The commitment_plan of this VmwareEnginePreferences.
        :type commitment_plan: str
        """
        allowed_values = ["COMMITMENT_PLAN_UNSPECIFIED", "ON_DEMAND", "COMMITMENT_1_YEAR_MONTHLY_PAYMENTS", "COMMITMENT_3_YEAR_MONTHLY_PAYMENTS", "COMMITMENT_1_YEAR_UPFRONT_PAYMENT", "COMMITMENT_3_YEAR_UPFRONT_PAYMENT"]  # noqa: E501
        if commitment_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `commitment_plan` ({0}), must be one of {1}"
                .format(commitment_plan, allowed_values)
            )

        self._commitment_plan = commitment_plan

    @property
    def cpu_overcommit_ratio(self):
        """Gets the cpu_overcommit_ratio of this VmwareEnginePreferences.

        CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.

        :return: The cpu_overcommit_ratio of this VmwareEnginePreferences.
        :rtype: float
        """
        return self._cpu_overcommit_ratio

    @cpu_overcommit_ratio.setter
    def cpu_overcommit_ratio(self, cpu_overcommit_ratio):
        """Sets the cpu_overcommit_ratio of this VmwareEnginePreferences.

        CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.

        :param cpu_overcommit_ratio: The cpu_overcommit_ratio of this VmwareEnginePreferences.
        :type cpu_overcommit_ratio: float
        """

        self._cpu_overcommit_ratio = cpu_overcommit_ratio

    @property
    def memory_overcommit_ratio(self):
        """Gets the memory_overcommit_ratio of this VmwareEnginePreferences.

        Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.

        :return: The memory_overcommit_ratio of this VmwareEnginePreferences.
        :rtype: float
        """
        return self._memory_overcommit_ratio

    @memory_overcommit_ratio.setter
    def memory_overcommit_ratio(self, memory_overcommit_ratio):
        """Sets the memory_overcommit_ratio of this VmwareEnginePreferences.

        Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.

        :param memory_overcommit_ratio: The memory_overcommit_ratio of this VmwareEnginePreferences.
        :type memory_overcommit_ratio: float
        """

        self._memory_overcommit_ratio = memory_overcommit_ratio

    @property
    def storage_deduplication_compression_ratio(self):
        """Gets the storage_deduplication_compression_ratio of this VmwareEnginePreferences.

        The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.

        :return: The storage_deduplication_compression_ratio of this VmwareEnginePreferences.
        :rtype: float
        """
        return self._storage_deduplication_compression_ratio

    @storage_deduplication_compression_ratio.setter
    def storage_deduplication_compression_ratio(self, storage_deduplication_compression_ratio):
        """Sets the storage_deduplication_compression_ratio of this VmwareEnginePreferences.

        The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.

        :param storage_deduplication_compression_ratio: The storage_deduplication_compression_ratio of this VmwareEnginePreferences.
        :type storage_deduplication_compression_ratio: float
        """

        self._storage_deduplication_compression_ratio = storage_deduplication_compression_ratio
