# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_os_details import GuestOsDetails
from openapi_server.models.machine_architecture_details import MachineArchitectureDetails
from openapi_server.models.machine_disk_details import MachineDiskDetails
from openapi_server.models.machine_network_details import MachineNetworkDetails
from openapi_server.models.platform_details import PlatformDetails
from openapi_server import util


class MachineDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: MachineArchitectureDetails=None, core_count: int=None, create_time: str=None, disks: MachineDiskDetails=None, guest_os: GuestOsDetails=None, machine_name: str=None, memory_mb: int=None, network: MachineNetworkDetails=None, platform: PlatformDetails=None, power_state: str=None, uuid: str=None):
        """MachineDetails - a model defined in OpenAPI

        :param architecture: The architecture of this MachineDetails.
        :param core_count: The core_count of this MachineDetails.
        :param create_time: The create_time of this MachineDetails.
        :param disks: The disks of this MachineDetails.
        :param guest_os: The guest_os of this MachineDetails.
        :param machine_name: The machine_name of this MachineDetails.
        :param memory_mb: The memory_mb of this MachineDetails.
        :param network: The network of this MachineDetails.
        :param platform: The platform of this MachineDetails.
        :param power_state: The power_state of this MachineDetails.
        :param uuid: The uuid of this MachineDetails.
        """
        self.openapi_types = {
            'architecture': MachineArchitectureDetails,
            'core_count': int,
            'create_time': str,
            'disks': MachineDiskDetails,
            'guest_os': GuestOsDetails,
            'machine_name': str,
            'memory_mb': int,
            'network': MachineNetworkDetails,
            'platform': PlatformDetails,
            'power_state': str,
            'uuid': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'core_count': 'coreCount',
            'create_time': 'createTime',
            'disks': 'disks',
            'guest_os': 'guestOs',
            'machine_name': 'machineName',
            'memory_mb': 'memoryMb',
            'network': 'network',
            'platform': 'platform',
            'power_state': 'powerState',
            'uuid': 'uuid'
        }

        self._architecture = architecture
        self._core_count = core_count
        self._create_time = create_time
        self._disks = disks
        self._guest_os = guest_os
        self._machine_name = machine_name
        self._memory_mb = memory_mb
        self._network = network
        self._platform = platform
        self._power_state = power_state
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MachineDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MachineDetails of this MachineDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this MachineDetails.


        :return: The architecture of this MachineDetails.
        :rtype: MachineArchitectureDetails
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this MachineDetails.


        :param architecture: The architecture of this MachineDetails.
        :type architecture: MachineArchitectureDetails
        """

        self._architecture = architecture

    @property
    def core_count(self):
        """Gets the core_count of this MachineDetails.

        Number of CPU cores in the machine. Must be non-negative.

        :return: The core_count of this MachineDetails.
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count):
        """Sets the core_count of this MachineDetails.

        Number of CPU cores in the machine. Must be non-negative.

        :param core_count: The core_count of this MachineDetails.
        :type core_count: int
        """

        self._core_count = core_count

    @property
    def create_time(self):
        """Gets the create_time of this MachineDetails.

        Machine creation time.

        :return: The create_time of this MachineDetails.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MachineDetails.

        Machine creation time.

        :param create_time: The create_time of this MachineDetails.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def disks(self):
        """Gets the disks of this MachineDetails.


        :return: The disks of this MachineDetails.
        :rtype: MachineDiskDetails
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this MachineDetails.


        :param disks: The disks of this MachineDetails.
        :type disks: MachineDiskDetails
        """

        self._disks = disks

    @property
    def guest_os(self):
        """Gets the guest_os of this MachineDetails.


        :return: The guest_os of this MachineDetails.
        :rtype: GuestOsDetails
        """
        return self._guest_os

    @guest_os.setter
    def guest_os(self, guest_os):
        """Sets the guest_os of this MachineDetails.


        :param guest_os: The guest_os of this MachineDetails.
        :type guest_os: GuestOsDetails
        """

        self._guest_os = guest_os

    @property
    def machine_name(self):
        """Gets the machine_name of this MachineDetails.

        Machine name.

        :return: The machine_name of this MachineDetails.
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this MachineDetails.

        Machine name.

        :param machine_name: The machine_name of this MachineDetails.
        :type machine_name: str
        """

        self._machine_name = machine_name

    @property
    def memory_mb(self):
        """Gets the memory_mb of this MachineDetails.

        The amount of memory in the machine. Must be non-negative.

        :return: The memory_mb of this MachineDetails.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this MachineDetails.

        The amount of memory in the machine. Must be non-negative.

        :param memory_mb: The memory_mb of this MachineDetails.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def network(self):
        """Gets the network of this MachineDetails.


        :return: The network of this MachineDetails.
        :rtype: MachineNetworkDetails
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this MachineDetails.


        :param network: The network of this MachineDetails.
        :type network: MachineNetworkDetails
        """

        self._network = network

    @property
    def platform(self):
        """Gets the platform of this MachineDetails.


        :return: The platform of this MachineDetails.
        :rtype: PlatformDetails
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MachineDetails.


        :param platform: The platform of this MachineDetails.
        :type platform: PlatformDetails
        """

        self._platform = platform

    @property
    def power_state(self):
        """Gets the power_state of this MachineDetails.

        Power state of the machine.

        :return: The power_state of this MachineDetails.
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this MachineDetails.

        Power state of the machine.

        :param power_state: The power_state of this MachineDetails.
        :type power_state: str
        """
        allowed_values = ["POWER_STATE_UNSPECIFIED", "PENDING", "ACTIVE", "SUSPENDING", "SUSPENDED", "DELETING", "DELETED"]  # noqa: E501
        if power_state not in allowed_values:
            raise ValueError(
                "Invalid value for `power_state` ({0}), must be one of {1}"
                .format(power_state, allowed_values)
            )

        self._power_state = power_state

    @property
    def uuid(self):
        """Gets the uuid of this MachineDetails.

        Machine unique identifier.

        :return: The uuid of this MachineDetails.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MachineDetails.

        Machine unique identifier.

        :param uuid: The uuid of this MachineDetails.
        :type uuid: str
        """

        self._uuid = uuid
