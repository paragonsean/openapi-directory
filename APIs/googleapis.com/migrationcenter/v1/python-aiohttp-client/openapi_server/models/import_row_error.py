# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_error import ImportError
from openapi_server import util


class ImportRowError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[ImportError]=None, row_number: int=None, vm_name: str=None, vm_uuid: str=None):
        """ImportRowError - a model defined in OpenAPI

        :param errors: The errors of this ImportRowError.
        :param row_number: The row_number of this ImportRowError.
        :param vm_name: The vm_name of this ImportRowError.
        :param vm_uuid: The vm_uuid of this ImportRowError.
        """
        self.openapi_types = {
            'errors': List[ImportError],
            'row_number': int,
            'vm_name': str,
            'vm_uuid': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'row_number': 'rowNumber',
            'vm_name': 'vmName',
            'vm_uuid': 'vmUuid'
        }

        self._errors = errors
        self._row_number = row_number
        self._vm_name = vm_name
        self._vm_uuid = vm_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportRowError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportRowError of this ImportRowError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ImportRowError.

        The list of errors detected in the row.

        :return: The errors of this ImportRowError.
        :rtype: List[ImportError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ImportRowError.

        The list of errors detected in the row.

        :param errors: The errors of this ImportRowError.
        :type errors: List[ImportError]
        """

        self._errors = errors

    @property
    def row_number(self):
        """Gets the row_number of this ImportRowError.

        The row number where the error was detected.

        :return: The row_number of this ImportRowError.
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number):
        """Sets the row_number of this ImportRowError.

        The row number where the error was detected.

        :param row_number: The row_number of this ImportRowError.
        :type row_number: int
        """

        self._row_number = row_number

    @property
    def vm_name(self):
        """Gets the vm_name of this ImportRowError.

        The name of the VM in the row.

        :return: The vm_name of this ImportRowError.
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this ImportRowError.

        The name of the VM in the row.

        :param vm_name: The vm_name of this ImportRowError.
        :type vm_name: str
        """

        self._vm_name = vm_name

    @property
    def vm_uuid(self):
        """Gets the vm_uuid of this ImportRowError.

        The VM UUID.

        :return: The vm_uuid of this ImportRowError.
        :rtype: str
        """
        return self._vm_uuid

    @vm_uuid.setter
    def vm_uuid(self, vm_uuid):
        """Sets the vm_uuid of this ImportRowError.

        The VM UUID.

        :param vm_uuid: The vm_uuid of this ImportRowError.
        :type vm_uuid: str
        """

        self._vm_uuid = vm_uuid
