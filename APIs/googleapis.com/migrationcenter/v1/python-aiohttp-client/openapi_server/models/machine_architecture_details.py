# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bios_details import BiosDetails
from openapi_server import util


class MachineArchitectureDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bios: BiosDetails=None, cpu_architecture: str=None, cpu_name: str=None, cpu_socket_count: int=None, cpu_thread_count: int=None, firmware_type: str=None, hyperthreading: str=None, vendor: str=None):
        """MachineArchitectureDetails - a model defined in OpenAPI

        :param bios: The bios of this MachineArchitectureDetails.
        :param cpu_architecture: The cpu_architecture of this MachineArchitectureDetails.
        :param cpu_name: The cpu_name of this MachineArchitectureDetails.
        :param cpu_socket_count: The cpu_socket_count of this MachineArchitectureDetails.
        :param cpu_thread_count: The cpu_thread_count of this MachineArchitectureDetails.
        :param firmware_type: The firmware_type of this MachineArchitectureDetails.
        :param hyperthreading: The hyperthreading of this MachineArchitectureDetails.
        :param vendor: The vendor of this MachineArchitectureDetails.
        """
        self.openapi_types = {
            'bios': BiosDetails,
            'cpu_architecture': str,
            'cpu_name': str,
            'cpu_socket_count': int,
            'cpu_thread_count': int,
            'firmware_type': str,
            'hyperthreading': str,
            'vendor': str
        }

        self.attribute_map = {
            'bios': 'bios',
            'cpu_architecture': 'cpuArchitecture',
            'cpu_name': 'cpuName',
            'cpu_socket_count': 'cpuSocketCount',
            'cpu_thread_count': 'cpuThreadCount',
            'firmware_type': 'firmwareType',
            'hyperthreading': 'hyperthreading',
            'vendor': 'vendor'
        }

        self._bios = bios
        self._cpu_architecture = cpu_architecture
        self._cpu_name = cpu_name
        self._cpu_socket_count = cpu_socket_count
        self._cpu_thread_count = cpu_thread_count
        self._firmware_type = firmware_type
        self._hyperthreading = hyperthreading
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MachineArchitectureDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MachineArchitectureDetails of this MachineArchitectureDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bios(self):
        """Gets the bios of this MachineArchitectureDetails.


        :return: The bios of this MachineArchitectureDetails.
        :rtype: BiosDetails
        """
        return self._bios

    @bios.setter
    def bios(self, bios):
        """Sets the bios of this MachineArchitectureDetails.


        :param bios: The bios of this MachineArchitectureDetails.
        :type bios: BiosDetails
        """

        self._bios = bios

    @property
    def cpu_architecture(self):
        """Gets the cpu_architecture of this MachineArchitectureDetails.

        CPU architecture, e.g., \"x64-based PC\", \"x86_64\", \"i686\" etc.

        :return: The cpu_architecture of this MachineArchitectureDetails.
        :rtype: str
        """
        return self._cpu_architecture

    @cpu_architecture.setter
    def cpu_architecture(self, cpu_architecture):
        """Sets the cpu_architecture of this MachineArchitectureDetails.

        CPU architecture, e.g., \"x64-based PC\", \"x86_64\", \"i686\" etc.

        :param cpu_architecture: The cpu_architecture of this MachineArchitectureDetails.
        :type cpu_architecture: str
        """

        self._cpu_architecture = cpu_architecture

    @property
    def cpu_name(self):
        """Gets the cpu_name of this MachineArchitectureDetails.

        CPU name, e.g., \"Intel Xeon E5-2690\", \"AMD EPYC 7571\" etc.

        :return: The cpu_name of this MachineArchitectureDetails.
        :rtype: str
        """
        return self._cpu_name

    @cpu_name.setter
    def cpu_name(self, cpu_name):
        """Sets the cpu_name of this MachineArchitectureDetails.

        CPU name, e.g., \"Intel Xeon E5-2690\", \"AMD EPYC 7571\" etc.

        :param cpu_name: The cpu_name of this MachineArchitectureDetails.
        :type cpu_name: str
        """

        self._cpu_name = cpu_name

    @property
    def cpu_socket_count(self):
        """Gets the cpu_socket_count of this MachineArchitectureDetails.

        Number of processor sockets allocated to the machine.

        :return: The cpu_socket_count of this MachineArchitectureDetails.
        :rtype: int
        """
        return self._cpu_socket_count

    @cpu_socket_count.setter
    def cpu_socket_count(self, cpu_socket_count):
        """Sets the cpu_socket_count of this MachineArchitectureDetails.

        Number of processor sockets allocated to the machine.

        :param cpu_socket_count: The cpu_socket_count of this MachineArchitectureDetails.
        :type cpu_socket_count: int
        """

        self._cpu_socket_count = cpu_socket_count

    @property
    def cpu_thread_count(self):
        """Gets the cpu_thread_count of this MachineArchitectureDetails.

        Number of CPU threads allocated to the machine.

        :return: The cpu_thread_count of this MachineArchitectureDetails.
        :rtype: int
        """
        return self._cpu_thread_count

    @cpu_thread_count.setter
    def cpu_thread_count(self, cpu_thread_count):
        """Sets the cpu_thread_count of this MachineArchitectureDetails.

        Number of CPU threads allocated to the machine.

        :param cpu_thread_count: The cpu_thread_count of this MachineArchitectureDetails.
        :type cpu_thread_count: int
        """

        self._cpu_thread_count = cpu_thread_count

    @property
    def firmware_type(self):
        """Gets the firmware_type of this MachineArchitectureDetails.

        Firmware type.

        :return: The firmware_type of this MachineArchitectureDetails.
        :rtype: str
        """
        return self._firmware_type

    @firmware_type.setter
    def firmware_type(self, firmware_type):
        """Sets the firmware_type of this MachineArchitectureDetails.

        Firmware type.

        :param firmware_type: The firmware_type of this MachineArchitectureDetails.
        :type firmware_type: str
        """
        allowed_values = ["FIRMWARE_TYPE_UNSPECIFIED", "BIOS", "EFI"]  # noqa: E501
        if firmware_type not in allowed_values:
            raise ValueError(
                "Invalid value for `firmware_type` ({0}), must be one of {1}"
                .format(firmware_type, allowed_values)
            )

        self._firmware_type = firmware_type

    @property
    def hyperthreading(self):
        """Gets the hyperthreading of this MachineArchitectureDetails.

        CPU hyper-threading support.

        :return: The hyperthreading of this MachineArchitectureDetails.
        :rtype: str
        """
        return self._hyperthreading

    @hyperthreading.setter
    def hyperthreading(self, hyperthreading):
        """Sets the hyperthreading of this MachineArchitectureDetails.

        CPU hyper-threading support.

        :param hyperthreading: The hyperthreading of this MachineArchitectureDetails.
        :type hyperthreading: str
        """
        allowed_values = ["CPU_HYPER_THREADING_UNSPECIFIED", "DISABLED", "ENABLED"]  # noqa: E501
        if hyperthreading not in allowed_values:
            raise ValueError(
                "Invalid value for `hyperthreading` ({0}), must be one of {1}"
                .format(hyperthreading, allowed_values)
            )

        self._hyperthreading = hyperthreading

    @property
    def vendor(self):
        """Gets the vendor of this MachineArchitectureDetails.

        Hardware vendor.

        :return: The vendor of this MachineArchitectureDetails.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this MachineArchitectureDetails.

        Hardware vendor.

        :param vendor: The vendor of this MachineArchitectureDetails.
        :type vendor: str
        """

        self._vendor = vendor
