# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_summary_machine_series_allocation import ReportSummaryMachineSeriesAllocation
from openapi_server import util


class ReportSummaryComputeEngineFinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_asset_count: str=None, allocated_disk_types: List[str]=None, allocated_regions: List[str]=None, machine_series_allocations: List[ReportSummaryMachineSeriesAllocation]=None):
        """ReportSummaryComputeEngineFinding - a model defined in OpenAPI

        :param allocated_asset_count: The allocated_asset_count of this ReportSummaryComputeEngineFinding.
        :param allocated_disk_types: The allocated_disk_types of this ReportSummaryComputeEngineFinding.
        :param allocated_regions: The allocated_regions of this ReportSummaryComputeEngineFinding.
        :param machine_series_allocations: The machine_series_allocations of this ReportSummaryComputeEngineFinding.
        """
        self.openapi_types = {
            'allocated_asset_count': str,
            'allocated_disk_types': List[str],
            'allocated_regions': List[str],
            'machine_series_allocations': List[ReportSummaryMachineSeriesAllocation]
        }

        self.attribute_map = {
            'allocated_asset_count': 'allocatedAssetCount',
            'allocated_disk_types': 'allocatedDiskTypes',
            'allocated_regions': 'allocatedRegions',
            'machine_series_allocations': 'machineSeriesAllocations'
        }

        self._allocated_asset_count = allocated_asset_count
        self._allocated_disk_types = allocated_disk_types
        self._allocated_regions = allocated_regions
        self._machine_series_allocations = machine_series_allocations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSummaryComputeEngineFinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSummaryComputeEngineFinding of this ReportSummaryComputeEngineFinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_asset_count(self):
        """Gets the allocated_asset_count of this ReportSummaryComputeEngineFinding.

        Count of assets which were allocated.

        :return: The allocated_asset_count of this ReportSummaryComputeEngineFinding.
        :rtype: str
        """
        return self._allocated_asset_count

    @allocated_asset_count.setter
    def allocated_asset_count(self, allocated_asset_count):
        """Sets the allocated_asset_count of this ReportSummaryComputeEngineFinding.

        Count of assets which were allocated.

        :param allocated_asset_count: The allocated_asset_count of this ReportSummaryComputeEngineFinding.
        :type allocated_asset_count: str
        """

        self._allocated_asset_count = allocated_asset_count

    @property
    def allocated_disk_types(self):
        """Gets the allocated_disk_types of this ReportSummaryComputeEngineFinding.

        Set of disk types allocated to assets.

        :return: The allocated_disk_types of this ReportSummaryComputeEngineFinding.
        :rtype: List[str]
        """
        return self._allocated_disk_types

    @allocated_disk_types.setter
    def allocated_disk_types(self, allocated_disk_types):
        """Sets the allocated_disk_types of this ReportSummaryComputeEngineFinding.

        Set of disk types allocated to assets.

        :param allocated_disk_types: The allocated_disk_types of this ReportSummaryComputeEngineFinding.
        :type allocated_disk_types: List[str]
        """
        allowed_values = ["PERSISTENT_DISK_TYPE_UNSPECIFIED", "PERSISTENT_DISK_TYPE_STANDARD", "PERSISTENT_DISK_TYPE_BALANCED", "PERSISTENT_DISK_TYPE_SSD"]  # noqa: E501
        if not set(allocated_disk_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allocated_disk_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allocated_disk_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allocated_disk_types = allocated_disk_types

    @property
    def allocated_regions(self):
        """Gets the allocated_regions of this ReportSummaryComputeEngineFinding.

        Set of regions in which the assets were allocated.

        :return: The allocated_regions of this ReportSummaryComputeEngineFinding.
        :rtype: List[str]
        """
        return self._allocated_regions

    @allocated_regions.setter
    def allocated_regions(self, allocated_regions):
        """Sets the allocated_regions of this ReportSummaryComputeEngineFinding.

        Set of regions in which the assets were allocated.

        :param allocated_regions: The allocated_regions of this ReportSummaryComputeEngineFinding.
        :type allocated_regions: List[str]
        """

        self._allocated_regions = allocated_regions

    @property
    def machine_series_allocations(self):
        """Gets the machine_series_allocations of this ReportSummaryComputeEngineFinding.

        Distribution of assets based on the Machine Series.

        :return: The machine_series_allocations of this ReportSummaryComputeEngineFinding.
        :rtype: List[ReportSummaryMachineSeriesAllocation]
        """
        return self._machine_series_allocations

    @machine_series_allocations.setter
    def machine_series_allocations(self, machine_series_allocations):
        """Sets the machine_series_allocations of this ReportSummaryComputeEngineFinding.

        Distribution of assets based on the Machine Series.

        :param machine_series_allocations: The machine_series_allocations of this ReportSummaryComputeEngineFinding.
        :type machine_series_allocations: List[ReportSummaryMachineSeriesAllocation]
        """

        self._machine_series_allocations = machine_series_allocations
