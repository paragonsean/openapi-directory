# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.validation_report import ValidationReport
from openapi_server import util


class ExecutionReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_errors: ValidationReport=None, frames_reported: int=None, total_rows_count: int=None):
        """ExecutionReport - a model defined in OpenAPI

        :param execution_errors: The execution_errors of this ExecutionReport.
        :param frames_reported: The frames_reported of this ExecutionReport.
        :param total_rows_count: The total_rows_count of this ExecutionReport.
        """
        self.openapi_types = {
            'execution_errors': ValidationReport,
            'frames_reported': int,
            'total_rows_count': int
        }

        self.attribute_map = {
            'execution_errors': 'executionErrors',
            'frames_reported': 'framesReported',
            'total_rows_count': 'totalRowsCount'
        }

        self._execution_errors = execution_errors
        self._frames_reported = frames_reported
        self._total_rows_count = total_rows_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecutionReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecutionReport of this ExecutionReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_errors(self):
        """Gets the execution_errors of this ExecutionReport.


        :return: The execution_errors of this ExecutionReport.
        :rtype: ValidationReport
        """
        return self._execution_errors

    @execution_errors.setter
    def execution_errors(self, execution_errors):
        """Sets the execution_errors of this ExecutionReport.


        :param execution_errors: The execution_errors of this ExecutionReport.
        :type execution_errors: ValidationReport
        """

        self._execution_errors = execution_errors

    @property
    def frames_reported(self):
        """Gets the frames_reported of this ExecutionReport.

        Total number of asset frames reported for the import job.

        :return: The frames_reported of this ExecutionReport.
        :rtype: int
        """
        return self._frames_reported

    @frames_reported.setter
    def frames_reported(self, frames_reported):
        """Sets the frames_reported of this ExecutionReport.

        Total number of asset frames reported for the import job.

        :param frames_reported: The frames_reported of this ExecutionReport.
        :type frames_reported: int
        """

        self._frames_reported = frames_reported

    @property
    def total_rows_count(self):
        """Gets the total_rows_count of this ExecutionReport.

        Output only. Total number of rows in the import job.

        :return: The total_rows_count of this ExecutionReport.
        :rtype: int
        """
        return self._total_rows_count

    @total_rows_count.setter
    def total_rows_count(self, total_rows_count):
        """Sets the total_rows_count of this ExecutionReport.

        Output only. Total number of rows in the import job.

        :param total_rows_count: The total_rows_count of this ExecutionReport.
        :type total_rows_count: int
        """

        self._total_rows_count = total_rows_count
