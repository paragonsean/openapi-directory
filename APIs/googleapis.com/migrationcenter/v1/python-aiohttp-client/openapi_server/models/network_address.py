# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment: str=None, bcast: str=None, fqdn: str=None, ip_address: str=None, subnet_mask: str=None):
        """NetworkAddress - a model defined in OpenAPI

        :param assignment: The assignment of this NetworkAddress.
        :param bcast: The bcast of this NetworkAddress.
        :param fqdn: The fqdn of this NetworkAddress.
        :param ip_address: The ip_address of this NetworkAddress.
        :param subnet_mask: The subnet_mask of this NetworkAddress.
        """
        self.openapi_types = {
            'assignment': str,
            'bcast': str,
            'fqdn': str,
            'ip_address': str,
            'subnet_mask': str
        }

        self.attribute_map = {
            'assignment': 'assignment',
            'bcast': 'bcast',
            'fqdn': 'fqdn',
            'ip_address': 'ipAddress',
            'subnet_mask': 'subnetMask'
        }

        self._assignment = assignment
        self._bcast = bcast
        self._fqdn = fqdn
        self._ip_address = ip_address
        self._subnet_mask = subnet_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAddress of this NetworkAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment(self):
        """Gets the assignment of this NetworkAddress.

        Whether DHCP is used to assign addresses.

        :return: The assignment of this NetworkAddress.
        :rtype: str
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this NetworkAddress.

        Whether DHCP is used to assign addresses.

        :param assignment: The assignment of this NetworkAddress.
        :type assignment: str
        """
        allowed_values = ["ADDRESS_ASSIGNMENT_UNSPECIFIED", "ADDRESS_ASSIGNMENT_STATIC", "ADDRESS_ASSIGNMENT_DHCP"]  # noqa: E501
        if assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment` ({0}), must be one of {1}"
                .format(assignment, allowed_values)
            )

        self._assignment = assignment

    @property
    def bcast(self):
        """Gets the bcast of this NetworkAddress.

        Broadcast address.

        :return: The bcast of this NetworkAddress.
        :rtype: str
        """
        return self._bcast

    @bcast.setter
    def bcast(self, bcast):
        """Sets the bcast of this NetworkAddress.

        Broadcast address.

        :param bcast: The bcast of this NetworkAddress.
        :type bcast: str
        """

        self._bcast = bcast

    @property
    def fqdn(self):
        """Gets the fqdn of this NetworkAddress.

        Fully qualified domain name.

        :return: The fqdn of this NetworkAddress.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this NetworkAddress.

        Fully qualified domain name.

        :param fqdn: The fqdn of this NetworkAddress.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def ip_address(self):
        """Gets the ip_address of this NetworkAddress.

        Assigned or configured IP Address.

        :return: The ip_address of this NetworkAddress.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NetworkAddress.

        Assigned or configured IP Address.

        :param ip_address: The ip_address of this NetworkAddress.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this NetworkAddress.

        Subnet mask.

        :return: The subnet_mask of this NetworkAddress.
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this NetworkAddress.

        Subnet mask.

        :param subnet_mask: The subnet_mask of this NetworkAddress.
        :type subnet_mask: str
        """

        self._subnet_mask = subnet_mask
