# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_config_details import GuestConfigDetails
from openapi_server.models.guest_runtime_details import GuestRuntimeDetails
from openapi_server import util


class GuestOsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: GuestConfigDetails=None, family: str=None, os_name: str=None, runtime: GuestRuntimeDetails=None, version: str=None):
        """GuestOsDetails - a model defined in OpenAPI

        :param config: The config of this GuestOsDetails.
        :param family: The family of this GuestOsDetails.
        :param os_name: The os_name of this GuestOsDetails.
        :param runtime: The runtime of this GuestOsDetails.
        :param version: The version of this GuestOsDetails.
        """
        self.openapi_types = {
            'config': GuestConfigDetails,
            'family': str,
            'os_name': str,
            'runtime': GuestRuntimeDetails,
            'version': str
        }

        self.attribute_map = {
            'config': 'config',
            'family': 'family',
            'os_name': 'osName',
            'runtime': 'runtime',
            'version': 'version'
        }

        self._config = config
        self._family = family
        self._os_name = os_name
        self._runtime = runtime
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestOsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestOsDetails of this GuestOsDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this GuestOsDetails.


        :return: The config of this GuestOsDetails.
        :rtype: GuestConfigDetails
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GuestOsDetails.


        :param config: The config of this GuestOsDetails.
        :type config: GuestConfigDetails
        """

        self._config = config

    @property
    def family(self):
        """Gets the family of this GuestOsDetails.

        What family the OS belong to, if known.

        :return: The family of this GuestOsDetails.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this GuestOsDetails.

        What family the OS belong to, if known.

        :param family: The family of this GuestOsDetails.
        :type family: str
        """
        allowed_values = ["OS_FAMILY_UNKNOWN", "OS_FAMILY_WINDOWS", "OS_FAMILY_LINUX", "OS_FAMILY_UNIX"]  # noqa: E501
        if family not in allowed_values:
            raise ValueError(
                "Invalid value for `family` ({0}), must be one of {1}"
                .format(family, allowed_values)
            )

        self._family = family

    @property
    def os_name(self):
        """Gets the os_name of this GuestOsDetails.

        The name of the operating system.

        :return: The os_name of this GuestOsDetails.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this GuestOsDetails.

        The name of the operating system.

        :param os_name: The os_name of this GuestOsDetails.
        :type os_name: str
        """

        self._os_name = os_name

    @property
    def runtime(self):
        """Gets the runtime of this GuestOsDetails.


        :return: The runtime of this GuestOsDetails.
        :rtype: GuestRuntimeDetails
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this GuestOsDetails.


        :param runtime: The runtime of this GuestOsDetails.
        :type runtime: GuestRuntimeDetails
        """

        self._runtime = runtime

    @property
    def version(self):
        """Gets the version of this GuestOsDetails.

        The version of the operating system.

        :return: The version of this GuestOsDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GuestOsDetails.

        The version of the operating system.

        :param version: The version of this GuestOsDetails.
        :type version: str
        """

        self._version = version
