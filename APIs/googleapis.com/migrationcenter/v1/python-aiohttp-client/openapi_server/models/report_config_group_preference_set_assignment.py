# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportConfigGroupPreferenceSetAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, preference_set: str=None):
        """ReportConfigGroupPreferenceSetAssignment - a model defined in OpenAPI

        :param group: The group of this ReportConfigGroupPreferenceSetAssignment.
        :param preference_set: The preference_set of this ReportConfigGroupPreferenceSetAssignment.
        """
        self.openapi_types = {
            'group': str,
            'preference_set': str
        }

        self.attribute_map = {
            'group': 'group',
            'preference_set': 'preferenceSet'
        }

        self._group = group
        self._preference_set = preference_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportConfigGroupPreferenceSetAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportConfigGroupPreferenceSetAssignment of this ReportConfigGroupPreferenceSetAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this ReportConfigGroupPreferenceSetAssignment.

        Required. Name of the group.

        :return: The group of this ReportConfigGroupPreferenceSetAssignment.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ReportConfigGroupPreferenceSetAssignment.

        Required. Name of the group.

        :param group: The group of this ReportConfigGroupPreferenceSetAssignment.
        :type group: str
        """

        self._group = group

    @property
    def preference_set(self):
        """Gets the preference_set of this ReportConfigGroupPreferenceSetAssignment.

        Required. Name of the Preference Set.

        :return: The preference_set of this ReportConfigGroupPreferenceSetAssignment.
        :rtype: str
        """
        return self._preference_set

    @preference_set.setter
    def preference_set(self, preference_set):
        """Sets the preference_set of this ReportConfigGroupPreferenceSetAssignment.

        Required. Name of the Preference Set.

        :param preference_set: The preference_set of this ReportConfigGroupPreferenceSetAssignment.
        :type preference_set: str
        """

        self._preference_set = preference_set
