# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.machine_details import MachineDetails
from openapi_server.models.performance_sample import PerformanceSample
from openapi_server import util


class AssetFrame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, labels: Dict[str, str]=None, machine_details: MachineDetails=None, performance_samples: List[PerformanceSample]=None, report_time: str=None, trace_token: str=None):
        """AssetFrame - a model defined in OpenAPI

        :param attributes: The attributes of this AssetFrame.
        :param labels: The labels of this AssetFrame.
        :param machine_details: The machine_details of this AssetFrame.
        :param performance_samples: The performance_samples of this AssetFrame.
        :param report_time: The report_time of this AssetFrame.
        :param trace_token: The trace_token of this AssetFrame.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'labels': Dict[str, str],
            'machine_details': MachineDetails,
            'performance_samples': List[PerformanceSample],
            'report_time': str,
            'trace_token': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'labels': 'labels',
            'machine_details': 'machineDetails',
            'performance_samples': 'performanceSamples',
            'report_time': 'reportTime',
            'trace_token': 'traceToken'
        }

        self._attributes = attributes
        self._labels = labels
        self._machine_details = machine_details
        self._performance_samples = performance_samples
        self._report_time = report_time
        self._trace_token = trace_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetFrame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetFrame of this AssetFrame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this AssetFrame.

        Generic asset attributes.

        :return: The attributes of this AssetFrame.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AssetFrame.

        Generic asset attributes.

        :param attributes: The attributes of this AssetFrame.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def labels(self):
        """Gets the labels of this AssetFrame.

        Labels as key value pairs.

        :return: The labels of this AssetFrame.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AssetFrame.

        Labels as key value pairs.

        :param labels: The labels of this AssetFrame.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def machine_details(self):
        """Gets the machine_details of this AssetFrame.


        :return: The machine_details of this AssetFrame.
        :rtype: MachineDetails
        """
        return self._machine_details

    @machine_details.setter
    def machine_details(self, machine_details):
        """Sets the machine_details of this AssetFrame.


        :param machine_details: The machine_details of this AssetFrame.
        :type machine_details: MachineDetails
        """

        self._machine_details = machine_details

    @property
    def performance_samples(self):
        """Gets the performance_samples of this AssetFrame.

        Asset performance data samples. Samples that are from more than 40 days ago or after tomorrow are ignored.

        :return: The performance_samples of this AssetFrame.
        :rtype: List[PerformanceSample]
        """
        return self._performance_samples

    @performance_samples.setter
    def performance_samples(self, performance_samples):
        """Sets the performance_samples of this AssetFrame.

        Asset performance data samples. Samples that are from more than 40 days ago or after tomorrow are ignored.

        :param performance_samples: The performance_samples of this AssetFrame.
        :type performance_samples: List[PerformanceSample]
        """

        self._performance_samples = performance_samples

    @property
    def report_time(self):
        """Gets the report_time of this AssetFrame.

        The time the data was reported.

        :return: The report_time of this AssetFrame.
        :rtype: str
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this AssetFrame.

        The time the data was reported.

        :param report_time: The report_time of this AssetFrame.
        :type report_time: str
        """

        self._report_time = report_time

    @property
    def trace_token(self):
        """Gets the trace_token of this AssetFrame.

        Optional. Trace token is optionally provided to assist with debugging and traceability.

        :return: The trace_token of this AssetFrame.
        :rtype: str
        """
        return self._trace_token

    @trace_token.setter
    def trace_token(self, trace_token):
        """Sets the trace_token of this AssetFrame.

        Optional. Trace token is optionally provided to assist with debugging and traceability.

        :param trace_token: The trace_token of this AssetFrame.
        :type trace_token: str
        """

        self._trace_token = trace_token
