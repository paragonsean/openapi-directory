# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkUsageSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_egress_bps: float=None, average_ingress_bps: float=None):
        """NetworkUsageSample - a model defined in OpenAPI

        :param average_egress_bps: The average_egress_bps of this NetworkUsageSample.
        :param average_ingress_bps: The average_ingress_bps of this NetworkUsageSample.
        """
        self.openapi_types = {
            'average_egress_bps': float,
            'average_ingress_bps': float
        }

        self.attribute_map = {
            'average_egress_bps': 'averageEgressBps',
            'average_ingress_bps': 'averageIngressBps'
        }

        self._average_egress_bps = average_egress_bps
        self._average_ingress_bps = average_ingress_bps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkUsageSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkUsageSample of this NetworkUsageSample.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_egress_bps(self):
        """Gets the average_egress_bps of this NetworkUsageSample.

        Average network egress in B/s sampled over a short window. Must be non-negative.

        :return: The average_egress_bps of this NetworkUsageSample.
        :rtype: float
        """
        return self._average_egress_bps

    @average_egress_bps.setter
    def average_egress_bps(self, average_egress_bps):
        """Sets the average_egress_bps of this NetworkUsageSample.

        Average network egress in B/s sampled over a short window. Must be non-negative.

        :param average_egress_bps: The average_egress_bps of this NetworkUsageSample.
        :type average_egress_bps: float
        """

        self._average_egress_bps = average_egress_bps

    @property
    def average_ingress_bps(self):
        """Gets the average_ingress_bps of this NetworkUsageSample.

        Average network ingress in B/s sampled over a short window. Must be non-negative.

        :return: The average_ingress_bps of this NetworkUsageSample.
        :rtype: float
        """
        return self._average_ingress_bps

    @average_ingress_bps.setter
    def average_ingress_bps(self, average_ingress_bps):
        """Sets the average_ingress_bps of this NetworkUsageSample.

        Average network ingress in B/s sampled over a short window. Must be non-negative.

        :param average_ingress_bps: The average_ingress_bps of this NetworkUsageSample.
        :type average_ingress_bps: float
        """

        self._average_ingress_bps = average_ingress_bps
