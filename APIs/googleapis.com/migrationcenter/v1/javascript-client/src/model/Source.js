/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Source model module.
 * @module model/Source
 * @version v1
 */
class Source {
    /**
     * Constructs a new <code>Source</code>.
     * Source represents an object from which asset information is streamed to Migration Center.
     * @alias module:model/Source
     */
    constructor() { 
        
        Source.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Source</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Source} obj Optional instance to populate.
     * @return {module:model/Source} The populated <code>Source</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Source();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('errorFrameCount')) {
                obj['errorFrameCount'] = ApiClient.convertToType(data['errorFrameCount'], 'Number');
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pendingFrameCount')) {
                obj['pendingFrameCount'] = ApiClient.convertToType(data['pendingFrameCount'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Source</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Source</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The timestamp when the source was created.
 * @member {String} createTime
 */
Source.prototype['createTime'] = undefined;

/**
 * Free-text description.
 * @member {String} description
 */
Source.prototype['description'] = undefined;

/**
 * User-friendly display name.
 * @member {String} displayName
 */
Source.prototype['displayName'] = undefined;

/**
 * Output only. The number of frames that were reported by the source and contained errors.
 * @member {Number} errorFrameCount
 */
Source.prototype['errorFrameCount'] = undefined;

/**
 * If `true`, the source is managed by other service(s).
 * @member {Boolean} managed
 */
Source.prototype['managed'] = undefined;

/**
 * Output only. The full name of the source.
 * @member {String} name
 */
Source.prototype['name'] = undefined;

/**
 * Output only. Number of frames that are still being processed.
 * @member {Number} pendingFrameCount
 */
Source.prototype['pendingFrameCount'] = undefined;

/**
 * The information confidence of the source. The higher the value, the higher the confidence.
 * @member {Number} priority
 */
Source.prototype['priority'] = undefined;

/**
 * Output only. The state of the source.
 * @member {module:model/Source.StateEnum} state
 */
Source.prototype['state'] = undefined;

/**
 * Data source type.
 * @member {module:model/Source.TypeEnum} type
 */
Source.prototype['type'] = undefined;

/**
 * Output only. The timestamp when the source was last updated.
 * @member {String} updateTime
 */
Source.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Source['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "INVALID"
     * @const
     */
    "INVALID": "INVALID"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Source['TypeEnum'] = {

    /**
     * value: "SOURCE_TYPE_UNKNOWN"
     * @const
     */
    "UNKNOWN": "SOURCE_TYPE_UNKNOWN",

    /**
     * value: "SOURCE_TYPE_UPLOAD"
     * @const
     */
    "UPLOAD": "SOURCE_TYPE_UPLOAD",

    /**
     * value: "SOURCE_TYPE_GUEST_OS_SCAN"
     * @const
     */
    "GUEST_OS_SCAN": "SOURCE_TYPE_GUEST_OS_SCAN",

    /**
     * value: "SOURCE_TYPE_INVENTORY_SCAN"
     * @const
     */
    "INVENTORY_SCAN": "SOURCE_TYPE_INVENTORY_SCAN",

    /**
     * value: "SOURCE_TYPE_CUSTOM"
     * @const
     */
    "CUSTOM": "SOURCE_TYPE_CUSTOM"
};



export default Source;

