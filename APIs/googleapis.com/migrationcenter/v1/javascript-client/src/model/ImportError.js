/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportError model module.
 * @module model/ImportError
 * @version v1
 */
class ImportError {
    /**
     * Constructs a new <code>ImportError</code>.
     * A resource that reports the errors encountered while processing an import job.
     * @alias module:model/ImportError
     */
    constructor() { 
        
        ImportError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportError} obj Optional instance to populate.
     * @return {module:model/ImportError} The populated <code>ImportError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportError();

            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = ApiClient.convertToType(data['errorDetails'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorDetails'] && !(typeof data['errorDetails'] === 'string' || data['errorDetails'] instanceof String)) {
            throw new Error("Expected the field `errorDetails` to be a primitive type in the JSON string but got " + data['errorDetails']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * The error information.
 * @member {String} errorDetails
 */
ImportError.prototype['errorDetails'] = undefined;

/**
 * The severity of the error.
 * @member {module:model/ImportError.SeverityEnum} severity
 */
ImportError.prototype['severity'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
ImportError['SeverityEnum'] = {

    /**
     * value: "SEVERITY_UNSPECIFIED"
     * @const
     */
    "SEVERITY_UNSPECIFIED": "SEVERITY_UNSPECIFIED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO"
};



export default ImportError;

