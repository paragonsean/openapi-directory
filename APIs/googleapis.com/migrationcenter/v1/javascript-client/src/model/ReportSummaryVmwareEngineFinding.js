/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportSummaryVmwareNodeAllocation from './ReportSummaryVmwareNodeAllocation';

/**
 * The ReportSummaryVmwareEngineFinding model module.
 * @module model/ReportSummaryVmwareEngineFinding
 * @version v1
 */
class ReportSummaryVmwareEngineFinding {
    /**
     * Constructs a new <code>ReportSummaryVmwareEngineFinding</code>.
     * A set of findings that applies to assets destined for VMWare Engine.
     * @alias module:model/ReportSummaryVmwareEngineFinding
     */
    constructor() { 
        
        ReportSummaryVmwareEngineFinding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportSummaryVmwareEngineFinding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportSummaryVmwareEngineFinding} obj Optional instance to populate.
     * @return {module:model/ReportSummaryVmwareEngineFinding} The populated <code>ReportSummaryVmwareEngineFinding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportSummaryVmwareEngineFinding();

            if (data.hasOwnProperty('allocatedAssetCount')) {
                obj['allocatedAssetCount'] = ApiClient.convertToType(data['allocatedAssetCount'], 'String');
            }
            if (data.hasOwnProperty('allocatedRegions')) {
                obj['allocatedRegions'] = ApiClient.convertToType(data['allocatedRegions'], ['String']);
            }
            if (data.hasOwnProperty('nodeAllocations')) {
                obj['nodeAllocations'] = ApiClient.convertToType(data['nodeAllocations'], [ReportSummaryVmwareNodeAllocation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportSummaryVmwareEngineFinding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportSummaryVmwareEngineFinding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocatedAssetCount'] && !(typeof data['allocatedAssetCount'] === 'string' || data['allocatedAssetCount'] instanceof String)) {
            throw new Error("Expected the field `allocatedAssetCount` to be a primitive type in the JSON string but got " + data['allocatedAssetCount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allocatedRegions'])) {
            throw new Error("Expected the field `allocatedRegions` to be an array in the JSON data but got " + data['allocatedRegions']);
        }
        if (data['nodeAllocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeAllocations'])) {
                throw new Error("Expected the field `nodeAllocations` to be an array in the JSON data but got " + data['nodeAllocations']);
            }
            // validate the optional field `nodeAllocations` (array)
            for (const item of data['nodeAllocations']) {
                ReportSummaryVmwareNodeAllocation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Count of assets which are allocated
 * @member {String} allocatedAssetCount
 */
ReportSummaryVmwareEngineFinding.prototype['allocatedAssetCount'] = undefined;

/**
 * Set of regions in which the assets were allocated
 * @member {Array.<String>} allocatedRegions
 */
ReportSummaryVmwareEngineFinding.prototype['allocatedRegions'] = undefined;

/**
 * Set of per-nodetype allocation records
 * @member {Array.<module:model/ReportSummaryVmwareNodeAllocation>} nodeAllocations
 */
ReportSummaryVmwareEngineFinding.prototype['nodeAllocations'] = undefined;






export default ReportSummaryVmwareEngineFinding;

