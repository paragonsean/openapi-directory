/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeStorageDescriptor from './ComputeStorageDescriptor';

/**
 * The ComputeEngineShapeDescriptor model module.
 * @module model/ComputeEngineShapeDescriptor
 * @version v1
 */
class ComputeEngineShapeDescriptor {
    /**
     * Constructs a new <code>ComputeEngineShapeDescriptor</code>.
     * Compute Engine target shape descriptor.
     * @alias module:model/ComputeEngineShapeDescriptor
     */
    constructor() { 
        
        ComputeEngineShapeDescriptor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeEngineShapeDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeEngineShapeDescriptor} obj Optional instance to populate.
     * @return {module:model/ComputeEngineShapeDescriptor} The populated <code>ComputeEngineShapeDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeEngineShapeDescriptor();

            if (data.hasOwnProperty('logicalCoreCount')) {
                obj['logicalCoreCount'] = ApiClient.convertToType(data['logicalCoreCount'], 'Number');
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('memoryMb')) {
                obj['memoryMb'] = ApiClient.convertToType(data['memoryMb'], 'Number');
            }
            if (data.hasOwnProperty('physicalCoreCount')) {
                obj['physicalCoreCount'] = ApiClient.convertToType(data['physicalCoreCount'], 'Number');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], 'String');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], [ComputeStorageDescriptor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeEngineShapeDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeEngineShapeDescriptor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['series'] && !(typeof data['series'] === 'string' || data['series'] instanceof String)) {
            throw new Error("Expected the field `series` to be a primitive type in the JSON string but got " + data['series']);
        }
        if (data['storage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['storage'])) {
                throw new Error("Expected the field `storage` to be an array in the JSON data but got " + data['storage']);
            }
            // validate the optional field `storage` (array)
            for (const item of data['storage']) {
                ComputeStorageDescriptor.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Number of logical cores.
 * @member {Number} logicalCoreCount
 */
ComputeEngineShapeDescriptor.prototype['logicalCoreCount'] = undefined;

/**
 * Compute Engine machine type.
 * @member {String} machineType
 */
ComputeEngineShapeDescriptor.prototype['machineType'] = undefined;

/**
 * Memory in mebibytes.
 * @member {Number} memoryMb
 */
ComputeEngineShapeDescriptor.prototype['memoryMb'] = undefined;

/**
 * Number of physical cores.
 * @member {Number} physicalCoreCount
 */
ComputeEngineShapeDescriptor.prototype['physicalCoreCount'] = undefined;

/**
 * Compute Engine machine series.
 * @member {String} series
 */
ComputeEngineShapeDescriptor.prototype['series'] = undefined;

/**
 * Compute Engine storage. Never empty.
 * @member {Array.<module:model/ComputeStorageDescriptor>} storage
 */
ComputeEngineShapeDescriptor.prototype['storage'] = undefined;






export default ComputeEngineShapeDescriptor;

