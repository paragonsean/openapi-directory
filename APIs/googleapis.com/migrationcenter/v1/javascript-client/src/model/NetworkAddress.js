/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkAddress model module.
 * @module model/NetworkAddress
 * @version v1
 */
class NetworkAddress {
    /**
     * Constructs a new <code>NetworkAddress</code>.
     * Details of network address.
     * @alias module:model/NetworkAddress
     */
    constructor() { 
        
        NetworkAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkAddress} obj Optional instance to populate.
     * @return {module:model/NetworkAddress} The populated <code>NetworkAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkAddress();

            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = ApiClient.convertToType(data['assignment'], 'String');
            }
            if (data.hasOwnProperty('bcast')) {
                obj['bcast'] = ApiClient.convertToType(data['bcast'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('subnetMask')) {
                obj['subnetMask'] = ApiClient.convertToType(data['subnetMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assignment'] && !(typeof data['assignment'] === 'string' || data['assignment'] instanceof String)) {
            throw new Error("Expected the field `assignment` to be a primitive type in the JSON string but got " + data['assignment']);
        }
        // ensure the json data is a string
        if (data['bcast'] && !(typeof data['bcast'] === 'string' || data['bcast'] instanceof String)) {
            throw new Error("Expected the field `bcast` to be a primitive type in the JSON string but got " + data['bcast']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['subnetMask'] && !(typeof data['subnetMask'] === 'string' || data['subnetMask'] instanceof String)) {
            throw new Error("Expected the field `subnetMask` to be a primitive type in the JSON string but got " + data['subnetMask']);
        }

        return true;
    }


}



/**
 * Whether DHCP is used to assign addresses.
 * @member {module:model/NetworkAddress.AssignmentEnum} assignment
 */
NetworkAddress.prototype['assignment'] = undefined;

/**
 * Broadcast address.
 * @member {String} bcast
 */
NetworkAddress.prototype['bcast'] = undefined;

/**
 * Fully qualified domain name.
 * @member {String} fqdn
 */
NetworkAddress.prototype['fqdn'] = undefined;

/**
 * Assigned or configured IP Address.
 * @member {String} ipAddress
 */
NetworkAddress.prototype['ipAddress'] = undefined;

/**
 * Subnet mask.
 * @member {String} subnetMask
 */
NetworkAddress.prototype['subnetMask'] = undefined;





/**
 * Allowed values for the <code>assignment</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAddress['AssignmentEnum'] = {

    /**
     * value: "ADDRESS_ASSIGNMENT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ADDRESS_ASSIGNMENT_UNSPECIFIED",

    /**
     * value: "ADDRESS_ASSIGNMENT_STATIC"
     * @const
     */
    "STATIC": "ADDRESS_ASSIGNMENT_STATIC",

    /**
     * value: "ADDRESS_ASSIGNMENT_DHCP"
     * @const
     */
    "DHCP": "ADDRESS_ASSIGNMENT_DHCP"
};



export default NetworkAddress;

