/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AggregationHistogram from './AggregationHistogram';

/**
 * The Aggregation model module.
 * @module model/Aggregation
 * @version v1
 */
class Aggregation {
    /**
     * Constructs a new <code>Aggregation</code>.
     * Message describing an aggregation. The message includes the aggregation type, parameters, and the field on which to perform the aggregation.
     * @alias module:model/Aggregation
     */
    constructor() { 
        
        Aggregation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aggregation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aggregation} obj Optional instance to populate.
     * @return {module:model/Aggregation} The populated <code>Aggregation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aggregation();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], Object);
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], Object);
            }
            if (data.hasOwnProperty('histogram')) {
                obj['histogram'] = AggregationHistogram.constructFromObject(data['histogram']);
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aggregation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aggregation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // validate the optional field `histogram`
        if (data['histogram']) { // data not null
          AggregationHistogram.validateJSON(data['histogram']);
        }

        return true;
    }


}



/**
 * Object count.
 * @member {Object} count
 */
Aggregation.prototype['count'] = undefined;

/**
 * The name of the field on which to aggregate.
 * @member {String} field
 */
Aggregation.prototype['field'] = undefined;

/**
 * Frequency distribution of all field values.
 * @member {Object} frequency
 */
Aggregation.prototype['frequency'] = undefined;

/**
 * @member {module:model/AggregationHistogram} histogram
 */
Aggregation.prototype['histogram'] = undefined;

/**
 * Sum of field values.
 * @member {Object} sum
 */
Aggregation.prototype['sum'] = undefined;






export default Aggregation;

