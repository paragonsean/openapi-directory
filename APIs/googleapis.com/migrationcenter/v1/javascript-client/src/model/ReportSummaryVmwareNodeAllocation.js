/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportSummaryVmwareNode from './ReportSummaryVmwareNode';

/**
 * The ReportSummaryVmwareNodeAllocation model module.
 * @module model/ReportSummaryVmwareNodeAllocation
 * @version v1
 */
class ReportSummaryVmwareNodeAllocation {
    /**
     * Constructs a new <code>ReportSummaryVmwareNodeAllocation</code>.
     * Represents assets allocated to a specific VMWare Node type.
     * @alias module:model/ReportSummaryVmwareNodeAllocation
     */
    constructor() { 
        
        ReportSummaryVmwareNodeAllocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportSummaryVmwareNodeAllocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportSummaryVmwareNodeAllocation} obj Optional instance to populate.
     * @return {module:model/ReportSummaryVmwareNodeAllocation} The populated <code>ReportSummaryVmwareNodeAllocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportSummaryVmwareNodeAllocation();

            if (data.hasOwnProperty('allocatedAssetCount')) {
                obj['allocatedAssetCount'] = ApiClient.convertToType(data['allocatedAssetCount'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'String');
            }
            if (data.hasOwnProperty('vmwareNode')) {
                obj['vmwareNode'] = ReportSummaryVmwareNode.constructFromObject(data['vmwareNode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportSummaryVmwareNodeAllocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportSummaryVmwareNodeAllocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocatedAssetCount'] && !(typeof data['allocatedAssetCount'] === 'string' || data['allocatedAssetCount'] instanceof String)) {
            throw new Error("Expected the field `allocatedAssetCount` to be a primitive type in the JSON string but got " + data['allocatedAssetCount']);
        }
        // ensure the json data is a string
        if (data['nodeCount'] && !(typeof data['nodeCount'] === 'string' || data['nodeCount'] instanceof String)) {
            throw new Error("Expected the field `nodeCount` to be a primitive type in the JSON string but got " + data['nodeCount']);
        }
        // validate the optional field `vmwareNode`
        if (data['vmwareNode']) { // data not null
          ReportSummaryVmwareNode.validateJSON(data['vmwareNode']);
        }

        return true;
    }


}



/**
 * Count of assets allocated to these nodes
 * @member {String} allocatedAssetCount
 */
ReportSummaryVmwareNodeAllocation.prototype['allocatedAssetCount'] = undefined;

/**
 * Count of this node type to be provisioned
 * @member {String} nodeCount
 */
ReportSummaryVmwareNodeAllocation.prototype['nodeCount'] = undefined;

/**
 * @member {module:model/ReportSummaryVmwareNode} vmwareNode
 */
ReportSummaryVmwareNodeAllocation.prototype['vmwareNode'] = undefined;






export default ReportSummaryVmwareNodeAllocation;

