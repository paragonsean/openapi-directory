/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportError from './ImportError';

/**
 * The ImportRowError model module.
 * @module model/ImportRowError
 * @version v1
 */
class ImportRowError {
    /**
     * Constructs a new <code>ImportRowError</code>.
     * A resource that reports the import job errors at row level.
     * @alias module:model/ImportRowError
     */
    constructor() { 
        
        ImportRowError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportRowError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportRowError} obj Optional instance to populate.
     * @return {module:model/ImportRowError} The populated <code>ImportRowError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportRowError();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ImportError]);
            }
            if (data.hasOwnProperty('rowNumber')) {
                obj['rowNumber'] = ApiClient.convertToType(data['rowNumber'], 'Number');
            }
            if (data.hasOwnProperty('vmName')) {
                obj['vmName'] = ApiClient.convertToType(data['vmName'], 'String');
            }
            if (data.hasOwnProperty('vmUuid')) {
                obj['vmUuid'] = ApiClient.convertToType(data['vmUuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportRowError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportRowError</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ImportError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vmName'] && !(typeof data['vmName'] === 'string' || data['vmName'] instanceof String)) {
            throw new Error("Expected the field `vmName` to be a primitive type in the JSON string but got " + data['vmName']);
        }
        // ensure the json data is a string
        if (data['vmUuid'] && !(typeof data['vmUuid'] === 'string' || data['vmUuid'] instanceof String)) {
            throw new Error("Expected the field `vmUuid` to be a primitive type in the JSON string but got " + data['vmUuid']);
        }

        return true;
    }


}



/**
 * The list of errors detected in the row.
 * @member {Array.<module:model/ImportError>} errors
 */
ImportRowError.prototype['errors'] = undefined;

/**
 * The row number where the error was detected.
 * @member {Number} rowNumber
 */
ImportRowError.prototype['rowNumber'] = undefined;

/**
 * The name of the VM in the row.
 * @member {String} vmName
 */
ImportRowError.prototype['vmName'] = undefined;

/**
 * The VM UUID.
 * @member {String} vmUuid
 */
ImportRowError.prototype['vmUuid'] = undefined;






export default ImportRowError;

