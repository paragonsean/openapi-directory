/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskPartitionList from './DiskPartitionList';

/**
 * The DiskPartition model module.
 * @module model/DiskPartition
 * @version v1
 */
class DiskPartition {
    /**
     * Constructs a new <code>DiskPartition</code>.
     * Disk Partition details.
     * @alias module:model/DiskPartition
     */
    constructor() { 
        
        DiskPartition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiskPartition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiskPartition} obj Optional instance to populate.
     * @return {module:model/DiskPartition} The populated <code>DiskPartition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiskPartition();

            if (data.hasOwnProperty('capacityBytes')) {
                obj['capacityBytes'] = ApiClient.convertToType(data['capacityBytes'], 'String');
            }
            if (data.hasOwnProperty('fileSystem')) {
                obj['fileSystem'] = ApiClient.convertToType(data['fileSystem'], 'String');
            }
            if (data.hasOwnProperty('freeBytes')) {
                obj['freeBytes'] = ApiClient.convertToType(data['freeBytes'], 'String');
            }
            if (data.hasOwnProperty('mountPoint')) {
                obj['mountPoint'] = ApiClient.convertToType(data['mountPoint'], 'String');
            }
            if (data.hasOwnProperty('subPartitions')) {
                obj['subPartitions'] = DiskPartitionList.constructFromObject(data['subPartitions']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiskPartition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiskPartition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['capacityBytes'] && !(typeof data['capacityBytes'] === 'string' || data['capacityBytes'] instanceof String)) {
            throw new Error("Expected the field `capacityBytes` to be a primitive type in the JSON string but got " + data['capacityBytes']);
        }
        // ensure the json data is a string
        if (data['fileSystem'] && !(typeof data['fileSystem'] === 'string' || data['fileSystem'] instanceof String)) {
            throw new Error("Expected the field `fileSystem` to be a primitive type in the JSON string but got " + data['fileSystem']);
        }
        // ensure the json data is a string
        if (data['freeBytes'] && !(typeof data['freeBytes'] === 'string' || data['freeBytes'] instanceof String)) {
            throw new Error("Expected the field `freeBytes` to be a primitive type in the JSON string but got " + data['freeBytes']);
        }
        // ensure the json data is a string
        if (data['mountPoint'] && !(typeof data['mountPoint'] === 'string' || data['mountPoint'] instanceof String)) {
            throw new Error("Expected the field `mountPoint` to be a primitive type in the JSON string but got " + data['mountPoint']);
        }
        // validate the optional field `subPartitions`
        if (data['subPartitions']) { // data not null
          DiskPartitionList.validateJSON(data['subPartitions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * Partition capacity.
 * @member {String} capacityBytes
 */
DiskPartition.prototype['capacityBytes'] = undefined;

/**
 * Partition file system.
 * @member {String} fileSystem
 */
DiskPartition.prototype['fileSystem'] = undefined;

/**
 * Partition free space.
 * @member {String} freeBytes
 */
DiskPartition.prototype['freeBytes'] = undefined;

/**
 * Mount pount (Linux/Windows) or drive letter (Windows).
 * @member {String} mountPoint
 */
DiskPartition.prototype['mountPoint'] = undefined;

/**
 * @member {module:model/DiskPartitionList} subPartitions
 */
DiskPartition.prototype['subPartitions'] = undefined;

/**
 * Partition type.
 * @member {String} type
 */
DiskPartition.prototype['type'] = undefined;

/**
 * Partition UUID.
 * @member {String} uuid
 */
DiskPartition.prototype['uuid'] = undefined;






export default DiskPartition;

