/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GuestOsDetails from './GuestOsDetails';
import MachineArchitectureDetails from './MachineArchitectureDetails';
import MachineDiskDetails from './MachineDiskDetails';
import MachineNetworkDetails from './MachineNetworkDetails';
import PlatformDetails from './PlatformDetails';

/**
 * The MachineDetails model module.
 * @module model/MachineDetails
 * @version v1
 */
class MachineDetails {
    /**
     * Constructs a new <code>MachineDetails</code>.
     * Details of a machine.
     * @alias module:model/MachineDetails
     */
    constructor() { 
        
        MachineDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MachineDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MachineDetails} obj Optional instance to populate.
     * @return {module:model/MachineDetails} The populated <code>MachineDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MachineDetails();

            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = MachineArchitectureDetails.constructFromObject(data['architecture']);
            }
            if (data.hasOwnProperty('coreCount')) {
                obj['coreCount'] = ApiClient.convertToType(data['coreCount'], 'Number');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('disks')) {
                obj['disks'] = MachineDiskDetails.constructFromObject(data['disks']);
            }
            if (data.hasOwnProperty('guestOs')) {
                obj['guestOs'] = GuestOsDetails.constructFromObject(data['guestOs']);
            }
            if (data.hasOwnProperty('machineName')) {
                obj['machineName'] = ApiClient.convertToType(data['machineName'], 'String');
            }
            if (data.hasOwnProperty('memoryMb')) {
                obj['memoryMb'] = ApiClient.convertToType(data['memoryMb'], 'Number');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = MachineNetworkDetails.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = PlatformDetails.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('powerState')) {
                obj['powerState'] = ApiClient.convertToType(data['powerState'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MachineDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MachineDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `architecture`
        if (data['architecture']) { // data not null
          MachineArchitectureDetails.validateJSON(data['architecture']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `disks`
        if (data['disks']) { // data not null
          MachineDiskDetails.validateJSON(data['disks']);
        }
        // validate the optional field `guestOs`
        if (data['guestOs']) { // data not null
          GuestOsDetails.validateJSON(data['guestOs']);
        }
        // ensure the json data is a string
        if (data['machineName'] && !(typeof data['machineName'] === 'string' || data['machineName'] instanceof String)) {
            throw new Error("Expected the field `machineName` to be a primitive type in the JSON string but got " + data['machineName']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          MachineNetworkDetails.validateJSON(data['network']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          PlatformDetails.validateJSON(data['platform']);
        }
        // ensure the json data is a string
        if (data['powerState'] && !(typeof data['powerState'] === 'string' || data['powerState'] instanceof String)) {
            throw new Error("Expected the field `powerState` to be a primitive type in the JSON string but got " + data['powerState']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/MachineArchitectureDetails} architecture
 */
MachineDetails.prototype['architecture'] = undefined;

/**
 * Number of CPU cores in the machine. Must be non-negative.
 * @member {Number} coreCount
 */
MachineDetails.prototype['coreCount'] = undefined;

/**
 * Machine creation time.
 * @member {String} createTime
 */
MachineDetails.prototype['createTime'] = undefined;

/**
 * @member {module:model/MachineDiskDetails} disks
 */
MachineDetails.prototype['disks'] = undefined;

/**
 * @member {module:model/GuestOsDetails} guestOs
 */
MachineDetails.prototype['guestOs'] = undefined;

/**
 * Machine name.
 * @member {String} machineName
 */
MachineDetails.prototype['machineName'] = undefined;

/**
 * The amount of memory in the machine. Must be non-negative.
 * @member {Number} memoryMb
 */
MachineDetails.prototype['memoryMb'] = undefined;

/**
 * @member {module:model/MachineNetworkDetails} network
 */
MachineDetails.prototype['network'] = undefined;

/**
 * @member {module:model/PlatformDetails} platform
 */
MachineDetails.prototype['platform'] = undefined;

/**
 * Power state of the machine.
 * @member {module:model/MachineDetails.PowerStateEnum} powerState
 */
MachineDetails.prototype['powerState'] = undefined;

/**
 * Machine unique identifier.
 * @member {String} uuid
 */
MachineDetails.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>powerState</code> property.
 * @enum {String}
 * @readonly
 */
MachineDetails['PowerStateEnum'] = {

    /**
     * value: "POWER_STATE_UNSPECIFIED"
     * @const
     */
    "POWER_STATE_UNSPECIFIED": "POWER_STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUSPENDING"
     * @const
     */
    "SUSPENDING": "SUSPENDING",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default MachineDetails;

