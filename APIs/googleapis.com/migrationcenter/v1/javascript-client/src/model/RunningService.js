/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunningService model module.
 * @module model/RunningService
 * @version v1
 */
class RunningService {
    /**
     * Constructs a new <code>RunningService</code>.
     * Guest OS running service details.
     * @alias module:model/RunningService
     */
    constructor() { 
        
        RunningService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunningService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunningService} obj Optional instance to populate.
     * @return {module:model/RunningService} The populated <code>RunningService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunningService();

            if (data.hasOwnProperty('cmdline')) {
                obj['cmdline'] = ApiClient.convertToType(data['cmdline'], 'String');
            }
            if (data.hasOwnProperty('exePath')) {
                obj['exePath'] = ApiClient.convertToType(data['exePath'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('startMode')) {
                obj['startMode'] = ApiClient.convertToType(data['startMode'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunningService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunningService</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cmdline'] && !(typeof data['cmdline'] === 'string' || data['cmdline'] instanceof String)) {
            throw new Error("Expected the field `cmdline` to be a primitive type in the JSON string but got " + data['cmdline']);
        }
        // ensure the json data is a string
        if (data['exePath'] && !(typeof data['exePath'] === 'string' || data['exePath'] instanceof String)) {
            throw new Error("Expected the field `exePath` to be a primitive type in the JSON string but got " + data['exePath']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // ensure the json data is a string
        if (data['startMode'] && !(typeof data['startMode'] === 'string' || data['startMode'] instanceof String)) {
            throw new Error("Expected the field `startMode` to be a primitive type in the JSON string but got " + data['startMode']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Service command line.
 * @member {String} cmdline
 */
RunningService.prototype['cmdline'] = undefined;

/**
 * Service binary path.
 * @member {String} exePath
 */
RunningService.prototype['exePath'] = undefined;

/**
 * Service pid.
 * @member {String} pid
 */
RunningService.prototype['pid'] = undefined;

/**
 * Service name.
 * @member {String} serviceName
 */
RunningService.prototype['serviceName'] = undefined;

/**
 * Service start mode (OS-agnostic).
 * @member {module:model/RunningService.StartModeEnum} startMode
 */
RunningService.prototype['startMode'] = undefined;

/**
 * Service state (OS-agnostic).
 * @member {module:model/RunningService.StateEnum} state
 */
RunningService.prototype['state'] = undefined;





/**
 * Allowed values for the <code>startMode</code> property.
 * @enum {String}
 * @readonly
 */
RunningService['StartModeEnum'] = {

    /**
     * value: "START_MODE_UNSPECIFIED"
     * @const
     */
    "START_MODE_UNSPECIFIED": "START_MODE_UNSPECIFIED",

    /**
     * value: "BOOT"
     * @const
     */
    "BOOT": "BOOT",

    /**
     * value: "SYSTEM"
     * @const
     */
    "SYSTEM": "SYSTEM",

    /**
     * value: "AUTO"
     * @const
     */
    "AUTO": "AUTO",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RunningService['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED"
};



export default RunningService;

