/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MachinePreferences from './MachinePreferences';

/**
 * The ComputeEnginePreferences model module.
 * @module model/ComputeEnginePreferences
 * @version v1
 */
class ComputeEnginePreferences {
    /**
     * Constructs a new <code>ComputeEnginePreferences</code>.
     * The user preferences relating to Compute Engine target platform.
     * @alias module:model/ComputeEnginePreferences
     */
    constructor() { 
        
        ComputeEnginePreferences.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeEnginePreferences</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeEnginePreferences} obj Optional instance to populate.
     * @return {module:model/ComputeEnginePreferences} The populated <code>ComputeEnginePreferences</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeEnginePreferences();

            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('machinePreferences')) {
                obj['machinePreferences'] = MachinePreferences.constructFromObject(data['machinePreferences']);
            }
            if (data.hasOwnProperty('persistentDiskType')) {
                obj['persistentDiskType'] = ApiClient.convertToType(data['persistentDiskType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeEnginePreferences</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeEnginePreferences</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // validate the optional field `machinePreferences`
        if (data['machinePreferences']) { // data not null
          MachinePreferences.validateJSON(data['machinePreferences']);
        }
        // ensure the json data is a string
        if (data['persistentDiskType'] && !(typeof data['persistentDiskType'] === 'string' || data['persistentDiskType'] instanceof String)) {
            throw new Error("Expected the field `persistentDiskType` to be a primitive type in the JSON string but got " + data['persistentDiskType']);
        }

        return true;
    }


}



/**
 * License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.
 * @member {module:model/ComputeEnginePreferences.LicenseTypeEnum} licenseType
 */
ComputeEnginePreferences.prototype['licenseType'] = undefined;

/**
 * @member {module:model/MachinePreferences} machinePreferences
 */
ComputeEnginePreferences.prototype['machinePreferences'] = undefined;

/**
 * Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.
 * @member {module:model/ComputeEnginePreferences.PersistentDiskTypeEnum} persistentDiskType
 */
ComputeEnginePreferences.prototype['persistentDiskType'] = undefined;





/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
ComputeEnginePreferences['LicenseTypeEnum'] = {

    /**
     * value: "LICENSE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "LICENSE_TYPE_UNSPECIFIED",

    /**
     * value: "LICENSE_TYPE_DEFAULT"
     * @const
     */
    "DEFAULT": "LICENSE_TYPE_DEFAULT",

    /**
     * value: "LICENSE_TYPE_BRING_YOUR_OWN_LICENSE"
     * @const
     */
    "BRING_YOUR_OWN_LICENSE": "LICENSE_TYPE_BRING_YOUR_OWN_LICENSE"
};


/**
 * Allowed values for the <code>persistentDiskType</code> property.
 * @enum {String}
 * @readonly
 */
ComputeEnginePreferences['PersistentDiskTypeEnum'] = {

    /**
     * value: "PERSISTENT_DISK_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PERSISTENT_DISK_TYPE_UNSPECIFIED",

    /**
     * value: "PERSISTENT_DISK_TYPE_STANDARD"
     * @const
     */
    "STANDARD": "PERSISTENT_DISK_TYPE_STANDARD",

    /**
     * value: "PERSISTENT_DISK_TYPE_BALANCED"
     * @const
     */
    "BALANCED": "PERSISTENT_DISK_TYPE_BALANCED",

    /**
     * value: "PERSISTENT_DISK_TYPE_SSD"
     * @const
     */
    "SSD": "PERSISTENT_DISK_TYPE_SSD"
};



export default ComputeEnginePreferences;

