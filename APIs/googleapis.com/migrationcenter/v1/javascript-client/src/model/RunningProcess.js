/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RunningProcess model module.
 * @module model/RunningProcess
 * @version v1
 */
class RunningProcess {
    /**
     * Constructs a new <code>RunningProcess</code>.
     * Guest OS running process details.
     * @alias module:model/RunningProcess
     */
    constructor() { 
        
        RunningProcess.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunningProcess</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunningProcess} obj Optional instance to populate.
     * @return {module:model/RunningProcess} The populated <code>RunningProcess</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunningProcess();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('cmdline')) {
                obj['cmdline'] = ApiClient.convertToType(data['cmdline'], 'String');
            }
            if (data.hasOwnProperty('exePath')) {
                obj['exePath'] = ApiClient.convertToType(data['exePath'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunningProcess</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunningProcess</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cmdline'] && !(typeof data['cmdline'] === 'string' || data['cmdline'] instanceof String)) {
            throw new Error("Expected the field `cmdline` to be a primitive type in the JSON string but got " + data['cmdline']);
        }
        // ensure the json data is a string
        if (data['exePath'] && !(typeof data['exePath'] === 'string' || data['exePath'] instanceof String)) {
            throw new Error("Expected the field `exePath` to be a primitive type in the JSON string but got " + data['exePath']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * Process extended attributes.
 * @member {Object.<String, String>} attributes
 */
RunningProcess.prototype['attributes'] = undefined;

/**
 * Process full command line.
 * @member {String} cmdline
 */
RunningProcess.prototype['cmdline'] = undefined;

/**
 * Process binary path.
 * @member {String} exePath
 */
RunningProcess.prototype['exePath'] = undefined;

/**
 * Process ID.
 * @member {String} pid
 */
RunningProcess.prototype['pid'] = undefined;

/**
 * User running the process.
 * @member {String} user
 */
RunningProcess.prototype['user'] = undefined;






export default RunningProcess;

