/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmwareEnginePreferences model module.
 * @module model/VmwareEnginePreferences
 * @version v1
 */
class VmwareEnginePreferences {
    /**
     * Constructs a new <code>VmwareEnginePreferences</code>.
     * The user preferences relating to Google Cloud VMware Engine target platform.
     * @alias module:model/VmwareEnginePreferences
     */
    constructor() { 
        
        VmwareEnginePreferences.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmwareEnginePreferences</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmwareEnginePreferences} obj Optional instance to populate.
     * @return {module:model/VmwareEnginePreferences} The populated <code>VmwareEnginePreferences</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmwareEnginePreferences();

            if (data.hasOwnProperty('commitmentPlan')) {
                obj['commitmentPlan'] = ApiClient.convertToType(data['commitmentPlan'], 'String');
            }
            if (data.hasOwnProperty('cpuOvercommitRatio')) {
                obj['cpuOvercommitRatio'] = ApiClient.convertToType(data['cpuOvercommitRatio'], 'Number');
            }
            if (data.hasOwnProperty('memoryOvercommitRatio')) {
                obj['memoryOvercommitRatio'] = ApiClient.convertToType(data['memoryOvercommitRatio'], 'Number');
            }
            if (data.hasOwnProperty('storageDeduplicationCompressionRatio')) {
                obj['storageDeduplicationCompressionRatio'] = ApiClient.convertToType(data['storageDeduplicationCompressionRatio'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmwareEnginePreferences</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmwareEnginePreferences</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commitmentPlan'] && !(typeof data['commitmentPlan'] === 'string' || data['commitmentPlan'] instanceof String)) {
            throw new Error("Expected the field `commitmentPlan` to be a primitive type in the JSON string but got " + data['commitmentPlan']);
        }

        return true;
    }


}



/**
 * Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.
 * @member {module:model/VmwareEnginePreferences.CommitmentPlanEnum} commitmentPlan
 */
VmwareEnginePreferences.prototype['commitmentPlan'] = undefined;

/**
 * CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.
 * @member {Number} cpuOvercommitRatio
 */
VmwareEnginePreferences.prototype['cpuOvercommitRatio'] = undefined;

/**
 * Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.
 * @member {Number} memoryOvercommitRatio
 */
VmwareEnginePreferences.prototype['memoryOvercommitRatio'] = undefined;

/**
 * The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.
 * @member {Number} storageDeduplicationCompressionRatio
 */
VmwareEnginePreferences.prototype['storageDeduplicationCompressionRatio'] = undefined;





/**
 * Allowed values for the <code>commitmentPlan</code> property.
 * @enum {String}
 * @readonly
 */
VmwareEnginePreferences['CommitmentPlanEnum'] = {

    /**
     * value: "COMMITMENT_PLAN_UNSPECIFIED"
     * @const
     */
    "COMMITMENT_PLAN_UNSPECIFIED": "COMMITMENT_PLAN_UNSPECIFIED",

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND",

    /**
     * value: "COMMITMENT_1_YEAR_MONTHLY_PAYMENTS"
     * @const
     */
    "COMMITMENT_1_YEAR_MONTHLY_PAYMENTS": "COMMITMENT_1_YEAR_MONTHLY_PAYMENTS",

    /**
     * value: "COMMITMENT_3_YEAR_MONTHLY_PAYMENTS"
     * @const
     */
    "COMMITMENT_3_YEAR_MONTHLY_PAYMENTS": "COMMITMENT_3_YEAR_MONTHLY_PAYMENTS",

    /**
     * value: "COMMITMENT_1_YEAR_UPFRONT_PAYMENT"
     * @const
     */
    "COMMITMENT_1_YEAR_UPFRONT_PAYMENT": "COMMITMENT_1_YEAR_UPFRONT_PAYMENT",

    /**
     * value: "COMMITMENT_3_YEAR_UPFRONT_PAYMENT"
     * @const
     */
    "COMMITMENT_3_YEAR_UPFRONT_PAYMENT": "COMMITMENT_3_YEAR_UPFRONT_PAYMENT"
};



export default VmwareEnginePreferences;

