/**
 * Migration Center API
 * A unified platform that helps you accelerate your end-to-end cloud journey from your current on-premises or cloud environments to Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BiosDetails from './BiosDetails';

/**
 * The MachineArchitectureDetails model module.
 * @module model/MachineArchitectureDetails
 * @version v1
 */
class MachineArchitectureDetails {
    /**
     * Constructs a new <code>MachineArchitectureDetails</code>.
     * Details of the machine architecture.
     * @alias module:model/MachineArchitectureDetails
     */
    constructor() { 
        
        MachineArchitectureDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MachineArchitectureDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MachineArchitectureDetails} obj Optional instance to populate.
     * @return {module:model/MachineArchitectureDetails} The populated <code>MachineArchitectureDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MachineArchitectureDetails();

            if (data.hasOwnProperty('bios')) {
                obj['bios'] = BiosDetails.constructFromObject(data['bios']);
            }
            if (data.hasOwnProperty('cpuArchitecture')) {
                obj['cpuArchitecture'] = ApiClient.convertToType(data['cpuArchitecture'], 'String');
            }
            if (data.hasOwnProperty('cpuName')) {
                obj['cpuName'] = ApiClient.convertToType(data['cpuName'], 'String');
            }
            if (data.hasOwnProperty('cpuSocketCount')) {
                obj['cpuSocketCount'] = ApiClient.convertToType(data['cpuSocketCount'], 'Number');
            }
            if (data.hasOwnProperty('cpuThreadCount')) {
                obj['cpuThreadCount'] = ApiClient.convertToType(data['cpuThreadCount'], 'Number');
            }
            if (data.hasOwnProperty('firmwareType')) {
                obj['firmwareType'] = ApiClient.convertToType(data['firmwareType'], 'String');
            }
            if (data.hasOwnProperty('hyperthreading')) {
                obj['hyperthreading'] = ApiClient.convertToType(data['hyperthreading'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MachineArchitectureDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MachineArchitectureDetails</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bios`
        if (data['bios']) { // data not null
          BiosDetails.validateJSON(data['bios']);
        }
        // ensure the json data is a string
        if (data['cpuArchitecture'] && !(typeof data['cpuArchitecture'] === 'string' || data['cpuArchitecture'] instanceof String)) {
            throw new Error("Expected the field `cpuArchitecture` to be a primitive type in the JSON string but got " + data['cpuArchitecture']);
        }
        // ensure the json data is a string
        if (data['cpuName'] && !(typeof data['cpuName'] === 'string' || data['cpuName'] instanceof String)) {
            throw new Error("Expected the field `cpuName` to be a primitive type in the JSON string but got " + data['cpuName']);
        }
        // ensure the json data is a string
        if (data['firmwareType'] && !(typeof data['firmwareType'] === 'string' || data['firmwareType'] instanceof String)) {
            throw new Error("Expected the field `firmwareType` to be a primitive type in the JSON string but got " + data['firmwareType']);
        }
        // ensure the json data is a string
        if (data['hyperthreading'] && !(typeof data['hyperthreading'] === 'string' || data['hyperthreading'] instanceof String)) {
            throw new Error("Expected the field `hyperthreading` to be a primitive type in the JSON string but got " + data['hyperthreading']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * @member {module:model/BiosDetails} bios
 */
MachineArchitectureDetails.prototype['bios'] = undefined;

/**
 * CPU architecture, e.g., \"x64-based PC\", \"x86_64\", \"i686\" etc.
 * @member {String} cpuArchitecture
 */
MachineArchitectureDetails.prototype['cpuArchitecture'] = undefined;

/**
 * CPU name, e.g., \"Intel Xeon E5-2690\", \"AMD EPYC 7571\" etc.
 * @member {String} cpuName
 */
MachineArchitectureDetails.prototype['cpuName'] = undefined;

/**
 * Number of processor sockets allocated to the machine.
 * @member {Number} cpuSocketCount
 */
MachineArchitectureDetails.prototype['cpuSocketCount'] = undefined;

/**
 * Number of CPU threads allocated to the machine.
 * @member {Number} cpuThreadCount
 */
MachineArchitectureDetails.prototype['cpuThreadCount'] = undefined;

/**
 * Firmware type.
 * @member {module:model/MachineArchitectureDetails.FirmwareTypeEnum} firmwareType
 */
MachineArchitectureDetails.prototype['firmwareType'] = undefined;

/**
 * CPU hyper-threading support.
 * @member {module:model/MachineArchitectureDetails.HyperthreadingEnum} hyperthreading
 */
MachineArchitectureDetails.prototype['hyperthreading'] = undefined;

/**
 * Hardware vendor.
 * @member {String} vendor
 */
MachineArchitectureDetails.prototype['vendor'] = undefined;





/**
 * Allowed values for the <code>firmwareType</code> property.
 * @enum {String}
 * @readonly
 */
MachineArchitectureDetails['FirmwareTypeEnum'] = {

    /**
     * value: "FIRMWARE_TYPE_UNSPECIFIED"
     * @const
     */
    "FIRMWARE_TYPE_UNSPECIFIED": "FIRMWARE_TYPE_UNSPECIFIED",

    /**
     * value: "BIOS"
     * @const
     */
    "BIOS": "BIOS",

    /**
     * value: "EFI"
     * @const
     */
    "EFI": "EFI"
};


/**
 * Allowed values for the <code>hyperthreading</code> property.
 * @enum {String}
 * @readonly
 */
MachineArchitectureDetails['HyperthreadingEnum'] = {

    /**
     * value: "CPU_HYPER_THREADING_UNSPECIFIED"
     * @const
     */
    "CPU_HYPER_THREADING_UNSPECIFIED": "CPU_HYPER_THREADING_UNSPECIFIED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};



export default MachineArchitectureDetails;

