/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Options model module.
 * @module model/Options
 * @version v1p4beta1
 */
class Options {
    /**
     * Constructs a new <code>Options</code>.
     * Contains request options.
     * @alias module:model/Options
     */
    constructor() { 
        
        Options.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Options</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Options} obj Optional instance to populate.
     * @return {module:model/Options} The populated <code>Options</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Options();

            if (data.hasOwnProperty('analyzeServiceAccountImpersonation')) {
                obj['analyzeServiceAccountImpersonation'] = ApiClient.convertToType(data['analyzeServiceAccountImpersonation'], 'Boolean');
            }
            if (data.hasOwnProperty('expandGroups')) {
                obj['expandGroups'] = ApiClient.convertToType(data['expandGroups'], 'Boolean');
            }
            if (data.hasOwnProperty('expandResources')) {
                obj['expandResources'] = ApiClient.convertToType(data['expandResources'], 'Boolean');
            }
            if (data.hasOwnProperty('expandRoles')) {
                obj['expandRoles'] = ApiClient.convertToType(data['expandRoles'], 'Boolean');
            }
            if (data.hasOwnProperty('outputGroupEdges')) {
                obj['outputGroupEdges'] = ApiClient.convertToType(data['outputGroupEdges'], 'Boolean');
            }
            if (data.hasOwnProperty('outputResourceEdges')) {
                obj['outputResourceEdges'] = ApiClient.convertToType(data['outputResourceEdges'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Options</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Options</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a GCP folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the GCP folder F, then user A potentially has access to the GCP folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Default is false.
 * @member {Boolean} analyzeServiceAccountImpersonation
 */
Options.prototype['analyzeServiceAccountImpersonation'] = undefined;

/**
 * Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If identity_selector is specified, the identity in the result will be determined by the selector, and this flag will have no effect. Default is false.
 * @member {Boolean} expandGroups
 */
Options.prototype['expandGroups'] = undefined;

/**
 * Optional. If true, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a GCP folder, the results will also include resources in that folder with permission P. If resource_selector is specified, the resource section of the result will be determined by the selector, and this flag will have no effect. Default is false.
 * @member {Boolean} expandResources
 */
Options.prototype['expandResources'] = undefined;

/**
 * Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If access_selector is specified, the access section of the result will be determined by the selector, and this flag will have no effect. Default is false.
 * @member {Boolean} expandRoles
 */
Options.prototype['expandRoles'] = undefined;

/**
 * Optional. If true, the result will output group identity edges, starting from the binding's group members, to any expanded identities. Default is false.
 * @member {Boolean} outputGroupEdges
 */
Options.prototype['outputGroupEdges'] = undefined;

/**
 * Optional. If true, the result will output resource edges, starting from the policy attached resource, to any expanded resources. Default is false.
 * @member {Boolean} outputResourceEdges
 */
Options.prototype['outputResourceEdges'] = undefined;






export default Options;

