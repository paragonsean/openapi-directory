/*
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;ServicePerimeter&#x60; describes a set of Google Cloud resources which can freely import and export data amongst themselves, but not export outside of the &#x60;ServicePerimeter&#x60;. If a request with a source within this &#x60;ServicePerimeter&#x60; has a target outside of the &#x60;ServicePerimeter&#x60;, the request will be blocked. Otherwise the request is allowed. There are two types of Service Perimeter - Regular and Bridge. Regular Service Perimeters cannot overlap, a single Google Cloud project can only belong to a single regular Service Perimeter. Service Perimeter Bridges can contain only Google Cloud projects as members, a single Google Cloud project may belong to multiple Service Perimeter Bridges.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:03.758447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleIdentityAccesscontextmanagerV1ServicePerimeter {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
   */
  @JsonAdapter(PerimeterTypeEnum.Adapter.class)
  public enum PerimeterTypeEnum {
    REGULAR("PERIMETER_TYPE_REGULAR"),
    
    BRIDGE("PERIMETER_TYPE_BRIDGE");

    private String value;

    PerimeterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PerimeterTypeEnum fromValue(String value) {
      for (PerimeterTypeEnum b : PerimeterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PerimeterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PerimeterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PerimeterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PerimeterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PerimeterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERIMETER_TYPE = "perimeterType";
  @SerializedName(SERIALIZED_NAME_PERIMETER_TYPE)
  private PerimeterTypeEnum perimeterType;

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig spec;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USE_EXPLICIT_DRY_RUN_SPEC = "useExplicitDryRunSpec";
  @SerializedName(SERIALIZED_NAME_USE_EXPLICIT_DRY_RUN_SPEC)
  private Boolean useExplicitDryRunSpec;

  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter() {
  }

  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the &#x60;ServicePerimeter&#x60; and its use. Does not affect behavior.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Resource name for the ServicePerimeter. The &#x60;short_name&#x60; component must begin with a letter and only include alphanumeric and &#39;_&#39;. Format: &#x60;accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter perimeterType(PerimeterTypeEnum perimeterType) {
    this.perimeterType = perimeterType;
    return this;
  }

  /**
   * Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.
   * @return perimeterType
   */
  @javax.annotation.Nullable
  public PerimeterTypeEnum getPerimeterType() {
    return perimeterType;
  }

  public void setPerimeterType(PerimeterTypeEnum perimeterType) {
    this.perimeterType = perimeterType;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter spec(GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig spec) {
    this.spec = spec;
    return this;
  }

  /**
   * Get spec
   * @return spec
   */
  @javax.annotation.Nullable
  public GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig getSpec() {
    return spec;
  }

  public void setSpec(GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig spec) {
    this.spec = spec;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter status(GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig getStatus() {
    return status;
  }

  public void setStatus(GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig status) {
    this.status = status;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Human readable title. Must be unique within the Policy.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GoogleIdentityAccesscontextmanagerV1ServicePerimeter useExplicitDryRunSpec(Boolean useExplicitDryRunSpec) {
    this.useExplicitDryRunSpec = useExplicitDryRunSpec;
    return this;
  }

  /**
   * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (\&quot;spec\&quot;) to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (\&quot;status\&quot;) without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.
   * @return useExplicitDryRunSpec
   */
  @javax.annotation.Nullable
  public Boolean getUseExplicitDryRunSpec() {
    return useExplicitDryRunSpec;
  }

  public void setUseExplicitDryRunSpec(Boolean useExplicitDryRunSpec) {
    this.useExplicitDryRunSpec = useExplicitDryRunSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleIdentityAccesscontextmanagerV1ServicePerimeter googleIdentityAccesscontextmanagerV1ServicePerimeter = (GoogleIdentityAccesscontextmanagerV1ServicePerimeter) o;
    return Objects.equals(this.description, googleIdentityAccesscontextmanagerV1ServicePerimeter.description) &&
        Objects.equals(this.name, googleIdentityAccesscontextmanagerV1ServicePerimeter.name) &&
        Objects.equals(this.perimeterType, googleIdentityAccesscontextmanagerV1ServicePerimeter.perimeterType) &&
        Objects.equals(this.spec, googleIdentityAccesscontextmanagerV1ServicePerimeter.spec) &&
        Objects.equals(this.status, googleIdentityAccesscontextmanagerV1ServicePerimeter.status) &&
        Objects.equals(this.title, googleIdentityAccesscontextmanagerV1ServicePerimeter.title) &&
        Objects.equals(this.useExplicitDryRunSpec, googleIdentityAccesscontextmanagerV1ServicePerimeter.useExplicitDryRunSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, perimeterType, spec, status, title, useExplicitDryRunSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleIdentityAccesscontextmanagerV1ServicePerimeter {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    perimeterType: ").append(toIndentedString(perimeterType)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    useExplicitDryRunSpec: ").append(toIndentedString(useExplicitDryRunSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("perimeterType");
    openapiFields.add("spec");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("useExplicitDryRunSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleIdentityAccesscontextmanagerV1ServicePerimeter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleIdentityAccesscontextmanagerV1ServicePerimeter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleIdentityAccesscontextmanagerV1ServicePerimeter is not found in the empty JSON string", GoogleIdentityAccesscontextmanagerV1ServicePerimeter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleIdentityAccesscontextmanagerV1ServicePerimeter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleIdentityAccesscontextmanagerV1ServicePerimeter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("perimeterType") != null && !jsonObj.get("perimeterType").isJsonNull()) && !jsonObj.get("perimeterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perimeterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perimeterType").toString()));
      }
      // validate the optional field `perimeterType`
      if (jsonObj.get("perimeterType") != null && !jsonObj.get("perimeterType").isJsonNull()) {
        PerimeterTypeEnum.validateJsonElement(jsonObj.get("perimeterType"));
      }
      // validate the optional field `spec`
      if (jsonObj.get("spec") != null && !jsonObj.get("spec").isJsonNull()) {
        GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig.validateJsonElement(jsonObj.get("spec"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleIdentityAccesscontextmanagerV1ServicePerimeter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleIdentityAccesscontextmanagerV1ServicePerimeter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleIdentityAccesscontextmanagerV1ServicePerimeter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleIdentityAccesscontextmanagerV1ServicePerimeter.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleIdentityAccesscontextmanagerV1ServicePerimeter>() {
           @Override
           public void write(JsonWriter out, GoogleIdentityAccesscontextmanagerV1ServicePerimeter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleIdentityAccesscontextmanagerV1ServicePerimeter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleIdentityAccesscontextmanagerV1ServicePerimeter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleIdentityAccesscontextmanagerV1ServicePerimeter
   * @throws IOException if the JSON string is invalid with respect to GoogleIdentityAccesscontextmanagerV1ServicePerimeter
   */
  public static GoogleIdentityAccesscontextmanagerV1ServicePerimeter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleIdentityAccesscontextmanagerV1ServicePerimeter.class);
  }

  /**
   * Convert an instance of GoogleIdentityAccesscontextmanagerV1ServicePerimeter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

