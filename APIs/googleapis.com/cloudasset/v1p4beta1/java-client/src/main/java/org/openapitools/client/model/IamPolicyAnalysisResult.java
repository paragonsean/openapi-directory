/*
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Binding;
import org.openapitools.client.model.GoogleCloudAssetV1p4beta1AccessControlList;
import org.openapitools.client.model.GoogleCloudAssetV1p4beta1IdentityList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IAM Policy analysis result, consisting of one IAM policy binding and derived access control lists.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:03.758447-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IamPolicyAnalysisResult {
  public static final String SERIALIZED_NAME_ACCESS_CONTROL_LISTS = "accessControlLists";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_LISTS)
  private List<GoogleCloudAssetV1p4beta1AccessControlList> accessControlLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTACHED_RESOURCE_FULL_NAME = "attachedResourceFullName";
  @SerializedName(SERIALIZED_NAME_ATTACHED_RESOURCE_FULL_NAME)
  private String attachedResourceFullName;

  public static final String SERIALIZED_NAME_FULLY_EXPLORED = "fullyExplored";
  @SerializedName(SERIALIZED_NAME_FULLY_EXPLORED)
  private Boolean fullyExplored;

  public static final String SERIALIZED_NAME_IAM_BINDING = "iamBinding";
  @SerializedName(SERIALIZED_NAME_IAM_BINDING)
  private Binding iamBinding;

  public static final String SERIALIZED_NAME_IDENTITY_LIST = "identityList";
  @SerializedName(SERIALIZED_NAME_IDENTITY_LIST)
  private GoogleCloudAssetV1p4beta1IdentityList identityList;

  public IamPolicyAnalysisResult() {
  }

  public IamPolicyAnalysisResult accessControlLists(List<GoogleCloudAssetV1p4beta1AccessControlList> accessControlLists) {
    this.accessControlLists = accessControlLists;
    return this;
  }

  public IamPolicyAnalysisResult addAccessControlListsItem(GoogleCloudAssetV1p4beta1AccessControlList accessControlListsItem) {
    if (this.accessControlLists == null) {
      this.accessControlLists = new ArrayList<>();
    }
    this.accessControlLists.add(accessControlListsItem);
    return this;
  }

  /**
   * The access control lists derived from the iam_binding that match or potentially match resource and access selectors specified in the request.
   * @return accessControlLists
   */
  @javax.annotation.Nullable
  public List<GoogleCloudAssetV1p4beta1AccessControlList> getAccessControlLists() {
    return accessControlLists;
  }

  public void setAccessControlLists(List<GoogleCloudAssetV1p4beta1AccessControlList> accessControlLists) {
    this.accessControlLists = accessControlLists;
  }


  public IamPolicyAnalysisResult attachedResourceFullName(String attachedResourceFullName) {
    this.attachedResourceFullName = attachedResourceFullName;
    return this;
  }

  /**
   * The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of the resource to which the iam_binding policy attaches.
   * @return attachedResourceFullName
   */
  @javax.annotation.Nullable
  public String getAttachedResourceFullName() {
    return attachedResourceFullName;
  }

  public void setAttachedResourceFullName(String attachedResourceFullName) {
    this.attachedResourceFullName = attachedResourceFullName;
  }


  public IamPolicyAnalysisResult fullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
    return this;
  }

  /**
   * Represents whether all analyses on the iam_binding have successfully finished.
   * @return fullyExplored
   */
  @javax.annotation.Nullable
  public Boolean getFullyExplored() {
    return fullyExplored;
  }

  public void setFullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
  }


  public IamPolicyAnalysisResult iamBinding(Binding iamBinding) {
    this.iamBinding = iamBinding;
    return this;
  }

  /**
   * Get iamBinding
   * @return iamBinding
   */
  @javax.annotation.Nullable
  public Binding getIamBinding() {
    return iamBinding;
  }

  public void setIamBinding(Binding iamBinding) {
    this.iamBinding = iamBinding;
  }


  public IamPolicyAnalysisResult identityList(GoogleCloudAssetV1p4beta1IdentityList identityList) {
    this.identityList = identityList;
    return this;
  }

  /**
   * Get identityList
   * @return identityList
   */
  @javax.annotation.Nullable
  public GoogleCloudAssetV1p4beta1IdentityList getIdentityList() {
    return identityList;
  }

  public void setIdentityList(GoogleCloudAssetV1p4beta1IdentityList identityList) {
    this.identityList = identityList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IamPolicyAnalysisResult iamPolicyAnalysisResult = (IamPolicyAnalysisResult) o;
    return Objects.equals(this.accessControlLists, iamPolicyAnalysisResult.accessControlLists) &&
        Objects.equals(this.attachedResourceFullName, iamPolicyAnalysisResult.attachedResourceFullName) &&
        Objects.equals(this.fullyExplored, iamPolicyAnalysisResult.fullyExplored) &&
        Objects.equals(this.iamBinding, iamPolicyAnalysisResult.iamBinding) &&
        Objects.equals(this.identityList, iamPolicyAnalysisResult.identityList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessControlLists, attachedResourceFullName, fullyExplored, iamBinding, identityList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IamPolicyAnalysisResult {\n");
    sb.append("    accessControlLists: ").append(toIndentedString(accessControlLists)).append("\n");
    sb.append("    attachedResourceFullName: ").append(toIndentedString(attachedResourceFullName)).append("\n");
    sb.append("    fullyExplored: ").append(toIndentedString(fullyExplored)).append("\n");
    sb.append("    iamBinding: ").append(toIndentedString(iamBinding)).append("\n");
    sb.append("    identityList: ").append(toIndentedString(identityList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessControlLists");
    openapiFields.add("attachedResourceFullName");
    openapiFields.add("fullyExplored");
    openapiFields.add("iamBinding");
    openapiFields.add("identityList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IamPolicyAnalysisResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IamPolicyAnalysisResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IamPolicyAnalysisResult is not found in the empty JSON string", IamPolicyAnalysisResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IamPolicyAnalysisResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IamPolicyAnalysisResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessControlLists") != null && !jsonObj.get("accessControlLists").isJsonNull()) {
        JsonArray jsonArrayaccessControlLists = jsonObj.getAsJsonArray("accessControlLists");
        if (jsonArrayaccessControlLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessControlLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessControlLists` to be an array in the JSON string but got `%s`", jsonObj.get("accessControlLists").toString()));
          }

          // validate the optional field `accessControlLists` (array)
          for (int i = 0; i < jsonArrayaccessControlLists.size(); i++) {
            GoogleCloudAssetV1p4beta1AccessControlList.validateJsonElement(jsonArrayaccessControlLists.get(i));
          };
        }
      }
      if ((jsonObj.get("attachedResourceFullName") != null && !jsonObj.get("attachedResourceFullName").isJsonNull()) && !jsonObj.get("attachedResourceFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachedResourceFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachedResourceFullName").toString()));
      }
      // validate the optional field `iamBinding`
      if (jsonObj.get("iamBinding") != null && !jsonObj.get("iamBinding").isJsonNull()) {
        Binding.validateJsonElement(jsonObj.get("iamBinding"));
      }
      // validate the optional field `identityList`
      if (jsonObj.get("identityList") != null && !jsonObj.get("identityList").isJsonNull()) {
        GoogleCloudAssetV1p4beta1IdentityList.validateJsonElement(jsonObj.get("identityList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IamPolicyAnalysisResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IamPolicyAnalysisResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IamPolicyAnalysisResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IamPolicyAnalysisResult.class));

       return (TypeAdapter<T>) new TypeAdapter<IamPolicyAnalysisResult>() {
           @Override
           public void write(JsonWriter out, IamPolicyAnalysisResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IamPolicyAnalysisResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IamPolicyAnalysisResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IamPolicyAnalysisResult
   * @throws IOException if the JSON string is invalid with respect to IamPolicyAnalysisResult
   */
  public static IamPolicyAnalysisResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IamPolicyAnalysisResult.class);
  }

  /**
   * Convert an instance of IamPolicyAnalysisResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

