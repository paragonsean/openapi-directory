# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1MethodSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, permission: str=None):
        """GoogleIdentityAccesscontextmanagerV1MethodSelector - a model defined in OpenAPI

        :param method: The method of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        :param permission: The permission of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        """
        self.openapi_types = {
            'method': str,
            'permission': str
        }

        self.attribute_map = {
            'method': 'method',
            'permission': 'permission'
        }

        self._method = method
        self._permission = permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1MethodSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1MethodSelector of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this GoogleIdentityAccesscontextmanagerV1MethodSelector.

        Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed.

        :return: The method of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this GoogleIdentityAccesscontextmanagerV1MethodSelector.

        Value for `method` should be a valid method name for the corresponding `service_name` in ApiOperation. If `*` used as value for `method`, then ALL methods and permissions are allowed.

        :param method: The method of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        :type method: str
        """

        self._method = method

    @property
    def permission(self):
        """Gets the permission of this GoogleIdentityAccesscontextmanagerV1MethodSelector.

        Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation.

        :return: The permission of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this GoogleIdentityAccesscontextmanagerV1MethodSelector.

        Value for `permission` should be a valid Cloud IAM permission for the corresponding `service_name` in ApiOperation.

        :param permission: The permission of this GoogleIdentityAccesscontextmanagerV1MethodSelector.
        :type permission: str
        """

        self._permission = permission
