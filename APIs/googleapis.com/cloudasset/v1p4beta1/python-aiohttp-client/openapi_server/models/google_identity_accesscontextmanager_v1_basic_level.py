# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_identity_accesscontextmanager_v1_condition import GoogleIdentityAccesscontextmanagerV1Condition
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1BasicLevel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, combining_function: str=None, conditions: List[GoogleIdentityAccesscontextmanagerV1Condition]=None):
        """GoogleIdentityAccesscontextmanagerV1BasicLevel - a model defined in OpenAPI

        :param combining_function: The combining_function of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        :param conditions: The conditions of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        """
        self.openapi_types = {
            'combining_function': str,
            'conditions': List[GoogleIdentityAccesscontextmanagerV1Condition]
        }

        self.attribute_map = {
            'combining_function': 'combiningFunction',
            'conditions': 'conditions'
        }

        self._combining_function = combining_function
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1BasicLevel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1BasicLevel of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def combining_function(self):
        """Gets the combining_function of this GoogleIdentityAccesscontextmanagerV1BasicLevel.

        How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.

        :return: The combining_function of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        :rtype: str
        """
        return self._combining_function

    @combining_function.setter
    def combining_function(self, combining_function):
        """Sets the combining_function of this GoogleIdentityAccesscontextmanagerV1BasicLevel.

        How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.

        :param combining_function: The combining_function of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        :type combining_function: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if combining_function not in allowed_values:
            raise ValueError(
                "Invalid value for `combining_function` ({0}), must be one of {1}"
                .format(combining_function, allowed_values)
            )

        self._combining_function = combining_function

    @property
    def conditions(self):
        """Gets the conditions of this GoogleIdentityAccesscontextmanagerV1BasicLevel.

        Required. A list of requirements for the `AccessLevel` to be granted.

        :return: The conditions of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        :rtype: List[GoogleIdentityAccesscontextmanagerV1Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GoogleIdentityAccesscontextmanagerV1BasicLevel.

        Required. A list of requirements for the `AccessLevel` to be granted.

        :param conditions: The conditions of this GoogleIdentityAccesscontextmanagerV1BasicLevel.
        :type conditions: List[GoogleIdentityAccesscontextmanagerV1Condition]
        """

        self._conditions = conditions
