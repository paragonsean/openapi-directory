# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1OsConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_version: str=None, os_type: str=None, require_verified_chrome_os: bool=None):
        """GoogleIdentityAccesscontextmanagerV1OsConstraint - a model defined in OpenAPI

        :param minimum_version: The minimum_version of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :param os_type: The os_type of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :param require_verified_chrome_os: The require_verified_chrome_os of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        """
        self.openapi_types = {
            'minimum_version': str,
            'os_type': str,
            'require_verified_chrome_os': bool
        }

        self.attribute_map = {
            'minimum_version': 'minimumVersion',
            'os_type': 'osType',
            'require_verified_chrome_os': 'requireVerifiedChromeOs'
        }

        self._minimum_version = minimum_version
        self._os_type = os_type
        self._require_verified_chrome_os = require_verified_chrome_os

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1OsConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1OsConstraint of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_version(self):
        """Gets the minimum_version of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `\"major.minor.patch\"`. Examples: `\"10.5.301\"`, `\"9.2.1\"`.

        :return: The minimum_version of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :rtype: str
        """
        return self._minimum_version

    @minimum_version.setter
    def minimum_version(self, minimum_version):
        """Sets the minimum_version of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `\"major.minor.patch\"`. Examples: `\"10.5.301\"`, `\"9.2.1\"`.

        :param minimum_version: The minimum_version of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :type minimum_version: str
        """

        self._minimum_version = minimum_version

    @property
    def os_type(self):
        """Gets the os_type of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        Required. The allowed OS type.

        :return: The os_type of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        Required. The allowed OS type.

        :param os_type: The os_type of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :type os_type: str
        """
        allowed_values = ["OS_UNSPECIFIED", "DESKTOP_MAC", "DESKTOP_WINDOWS", "DESKTOP_LINUX", "DESKTOP_CHROME_OS", "ANDROID", "IOS"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def require_verified_chrome_os(self):
        """Gets the require_verified_chrome_os of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.

        :return: The require_verified_chrome_os of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :rtype: bool
        """
        return self._require_verified_chrome_os

    @require_verified_chrome_os.setter
    def require_verified_chrome_os(self, require_verified_chrome_os):
        """Sets the require_verified_chrome_os of this GoogleIdentityAccesscontextmanagerV1OsConstraint.

        Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.

        :param require_verified_chrome_os: The require_verified_chrome_os of this GoogleIdentityAccesscontextmanagerV1OsConstraint.
        :type require_verified_chrome_os: bool
        """

        self._require_verified_chrome_os = require_verified_chrome_os
