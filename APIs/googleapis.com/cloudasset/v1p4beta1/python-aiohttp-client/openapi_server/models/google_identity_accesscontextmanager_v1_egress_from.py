# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1EgressFrom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identities: List[str]=None, identity_type: str=None):
        """GoogleIdentityAccesscontextmanagerV1EgressFrom - a model defined in OpenAPI

        :param identities: The identities of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        :param identity_type: The identity_type of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        """
        self.openapi_types = {
            'identities': List[str],
            'identity_type': str
        }

        self.attribute_map = {
            'identities': 'identities',
            'identity_type': 'identityType'
        }

        self._identities = identities
        self._identity_type = identity_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1EgressFrom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1EgressFrom of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identities(self):
        """Gets the identities of this GoogleIdentityAccesscontextmanagerV1EgressFrom.

        A list of identities that are allowed access through this [EgressPolicy]. Should be in the format of email address. The email address should represent individual user or service account only.

        :return: The identities of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        :rtype: List[str]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this GoogleIdentityAccesscontextmanagerV1EgressFrom.

        A list of identities that are allowed access through this [EgressPolicy]. Should be in the format of email address. The email address should represent individual user or service account only.

        :param identities: The identities of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        :type identities: List[str]
        """

        self._identities = identities

    @property
    def identity_type(self):
        """Gets the identity_type of this GoogleIdentityAccesscontextmanagerV1EgressFrom.

        Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.

        :return: The identity_type of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this GoogleIdentityAccesscontextmanagerV1EgressFrom.

        Specifies the type of identities that are allowed access to outside the perimeter. If left unspecified, then members of `identities` field will be allowed access.

        :param identity_type: The identity_type of this GoogleIdentityAccesscontextmanagerV1EgressFrom.
        :type identity_type: str
        """
        allowed_values = ["IDENTITY_TYPE_UNSPECIFIED", "ANY_IDENTITY", "ANY_USER_ACCOUNT", "ANY_SERVICE_ACCOUNT"]  # noqa: E501
        if identity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_type` ({0}), must be one of {1}"
                .format(identity_type, allowed_values)
            )

        self._identity_type = identity_type
