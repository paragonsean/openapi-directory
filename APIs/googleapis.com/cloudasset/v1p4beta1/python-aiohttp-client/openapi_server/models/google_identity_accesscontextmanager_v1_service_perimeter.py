# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_identity_accesscontextmanager_v1_service_perimeter_config import GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1ServicePerimeter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, perimeter_type: str=None, spec: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig=None, status: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig=None, title: str=None, use_explicit_dry_run_spec: bool=None):
        """GoogleIdentityAccesscontextmanagerV1ServicePerimeter - a model defined in OpenAPI

        :param description: The description of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param name: The name of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param perimeter_type: The perimeter_type of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param spec: The spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param status: The status of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param title: The title of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :param use_explicit_dry_run_spec: The use_explicit_dry_run_spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'perimeter_type': str,
            'spec': GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig,
            'status': GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig,
            'title': str,
            'use_explicit_dry_run_spec': bool
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'perimeter_type': 'perimeterType',
            'spec': 'spec',
            'status': 'status',
            'title': 'title',
            'use_explicit_dry_run_spec': 'useExplicitDryRunSpec'
        }

        self._description = description
        self._name = name
        self._perimeter_type = perimeter_type
        self._spec = spec
        self._status = status
        self._title = title
        self._use_explicit_dry_run_spec = use_explicit_dry_run_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1ServicePerimeter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1ServicePerimeter of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Description of the `ServicePerimeter` and its use. Does not affect behavior.

        :return: The description of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Description of the `ServicePerimeter` and its use. Does not affect behavior.

        :param description: The description of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Required. Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and '_'. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`

        :return: The name of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Required. Resource name for the ServicePerimeter. The `short_name` component must begin with a letter and only include alphanumeric and '_'. Format: `accessPolicies/{access_policy}/servicePerimeters/{service_perimeter}`

        :param name: The name of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type name: str
        """

        self._name = name

    @property
    def perimeter_type(self):
        """Gets the perimeter_type of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.

        :return: The perimeter_type of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: str
        """
        return self._perimeter_type

    @perimeter_type.setter
    def perimeter_type(self, perimeter_type):
        """Sets the perimeter_type of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Perimeter type indicator. A single project is allowed to be a member of single regular perimeter, but multiple service perimeter bridges. A project cannot be a included in a perimeter bridge without being included in regular perimeter. For perimeter bridges, the restricted service list as well as access level lists must be empty.

        :param perimeter_type: The perimeter_type of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type perimeter_type: str
        """
        allowed_values = ["PERIMETER_TYPE_REGULAR", "PERIMETER_TYPE_BRIDGE"]  # noqa: E501
        if perimeter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `perimeter_type` ({0}), must be one of {1}"
                .format(perimeter_type, allowed_values)
            )

        self._perimeter_type = perimeter_type

    @property
    def spec(self):
        """Gets the spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.


        :return: The spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.


        :param spec: The spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type spec: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.


        :return: The status of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.


        :param status: The status of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type status: GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Human readable title. Must be unique within the Policy.

        :return: The title of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Human readable title. Must be unique within the Policy.

        :param title: The title of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type title: str
        """

        self._title = title

    @property
    def use_explicit_dry_run_spec(self):
        """Gets the use_explicit_dry_run_spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (\"spec\") to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (\"status\") without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.

        :return: The use_explicit_dry_run_spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :rtype: bool
        """
        return self._use_explicit_dry_run_spec

    @use_explicit_dry_run_spec.setter
    def use_explicit_dry_run_spec(self, use_explicit_dry_run_spec):
        """Sets the use_explicit_dry_run_spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.

        Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists for all Service Perimeters, and that spec is identical to the status for those Service Perimeters. When this flag is set, it inhibits the generation of the implicit spec, thereby allowing the user to explicitly provide a configuration (\"spec\") to use in a dry-run version of the Service Perimeter. This allows the user to test changes to the enforced config (\"status\") without actually enforcing them. This testing is done through analyzing the differences between currently enforced and suggested restrictions. use_explicit_dry_run_spec must bet set to True if any of the fields in the spec are set to non-default values.

        :param use_explicit_dry_run_spec: The use_explicit_dry_run_spec of this GoogleIdentityAccesscontextmanagerV1ServicePerimeter.
        :type use_explicit_dry_run_spec: bool
        """

        self._use_explicit_dry_run_spec = use_explicit_dry_run_spec
