/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_analyze_service_account_impersonation_isSet = false;
    m_analyze_service_account_impersonation_isValid = false;

    m_expand_groups_isSet = false;
    m_expand_groups_isValid = false;

    m_expand_resources_isSet = false;
    m_expand_resources_isValid = false;

    m_expand_roles_isSet = false;
    m_expand_roles_isValid = false;

    m_output_group_edges_isSet = false;
    m_output_group_edges_isValid = false;

    m_output_resource_edges_isSet = false;
    m_output_resource_edges_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_analyze_service_account_impersonation_isValid = ::OpenAPI::fromJsonValue(m_analyze_service_account_impersonation, json[QString("analyzeServiceAccountImpersonation")]);
    m_analyze_service_account_impersonation_isSet = !json[QString("analyzeServiceAccountImpersonation")].isNull() && m_analyze_service_account_impersonation_isValid;

    m_expand_groups_isValid = ::OpenAPI::fromJsonValue(m_expand_groups, json[QString("expandGroups")]);
    m_expand_groups_isSet = !json[QString("expandGroups")].isNull() && m_expand_groups_isValid;

    m_expand_resources_isValid = ::OpenAPI::fromJsonValue(m_expand_resources, json[QString("expandResources")]);
    m_expand_resources_isSet = !json[QString("expandResources")].isNull() && m_expand_resources_isValid;

    m_expand_roles_isValid = ::OpenAPI::fromJsonValue(m_expand_roles, json[QString("expandRoles")]);
    m_expand_roles_isSet = !json[QString("expandRoles")].isNull() && m_expand_roles_isValid;

    m_output_group_edges_isValid = ::OpenAPI::fromJsonValue(m_output_group_edges, json[QString("outputGroupEdges")]);
    m_output_group_edges_isSet = !json[QString("outputGroupEdges")].isNull() && m_output_group_edges_isValid;

    m_output_resource_edges_isValid = ::OpenAPI::fromJsonValue(m_output_resource_edges, json[QString("outputResourceEdges")]);
    m_output_resource_edges_isSet = !json[QString("outputResourceEdges")].isNull() && m_output_resource_edges_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_analyze_service_account_impersonation_isSet) {
        obj.insert(QString("analyzeServiceAccountImpersonation"), ::OpenAPI::toJsonValue(m_analyze_service_account_impersonation));
    }
    if (m_expand_groups_isSet) {
        obj.insert(QString("expandGroups"), ::OpenAPI::toJsonValue(m_expand_groups));
    }
    if (m_expand_resources_isSet) {
        obj.insert(QString("expandResources"), ::OpenAPI::toJsonValue(m_expand_resources));
    }
    if (m_expand_roles_isSet) {
        obj.insert(QString("expandRoles"), ::OpenAPI::toJsonValue(m_expand_roles));
    }
    if (m_output_group_edges_isSet) {
        obj.insert(QString("outputGroupEdges"), ::OpenAPI::toJsonValue(m_output_group_edges));
    }
    if (m_output_resource_edges_isSet) {
        obj.insert(QString("outputResourceEdges"), ::OpenAPI::toJsonValue(m_output_resource_edges));
    }
    return obj;
}

bool OAIOptions::isAnalyzeServiceAccountImpersonation() const {
    return m_analyze_service_account_impersonation;
}
void OAIOptions::setAnalyzeServiceAccountImpersonation(const bool &analyze_service_account_impersonation) {
    m_analyze_service_account_impersonation = analyze_service_account_impersonation;
    m_analyze_service_account_impersonation_isSet = true;
}

bool OAIOptions::is_analyze_service_account_impersonation_Set() const{
    return m_analyze_service_account_impersonation_isSet;
}

bool OAIOptions::is_analyze_service_account_impersonation_Valid() const{
    return m_analyze_service_account_impersonation_isValid;
}

bool OAIOptions::isExpandGroups() const {
    return m_expand_groups;
}
void OAIOptions::setExpandGroups(const bool &expand_groups) {
    m_expand_groups = expand_groups;
    m_expand_groups_isSet = true;
}

bool OAIOptions::is_expand_groups_Set() const{
    return m_expand_groups_isSet;
}

bool OAIOptions::is_expand_groups_Valid() const{
    return m_expand_groups_isValid;
}

bool OAIOptions::isExpandResources() const {
    return m_expand_resources;
}
void OAIOptions::setExpandResources(const bool &expand_resources) {
    m_expand_resources = expand_resources;
    m_expand_resources_isSet = true;
}

bool OAIOptions::is_expand_resources_Set() const{
    return m_expand_resources_isSet;
}

bool OAIOptions::is_expand_resources_Valid() const{
    return m_expand_resources_isValid;
}

bool OAIOptions::isExpandRoles() const {
    return m_expand_roles;
}
void OAIOptions::setExpandRoles(const bool &expand_roles) {
    m_expand_roles = expand_roles;
    m_expand_roles_isSet = true;
}

bool OAIOptions::is_expand_roles_Set() const{
    return m_expand_roles_isSet;
}

bool OAIOptions::is_expand_roles_Valid() const{
    return m_expand_roles_isValid;
}

bool OAIOptions::isOutputGroupEdges() const {
    return m_output_group_edges;
}
void OAIOptions::setOutputGroupEdges(const bool &output_group_edges) {
    m_output_group_edges = output_group_edges;
    m_output_group_edges_isSet = true;
}

bool OAIOptions::is_output_group_edges_Set() const{
    return m_output_group_edges_isSet;
}

bool OAIOptions::is_output_group_edges_Valid() const{
    return m_output_group_edges_isValid;
}

bool OAIOptions::isOutputResourceEdges() const {
    return m_output_resource_edges;
}
void OAIOptions::setOutputResourceEdges(const bool &output_resource_edges) {
    m_output_resource_edges = output_resource_edges;
    m_output_resource_edges_isSet = true;
}

bool OAIOptions::is_output_resource_edges_Set() const{
    return m_output_resource_edges_isSet;
}

bool OAIOptions::is_output_resource_edges_Valid() const{
    return m_output_resource_edges_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analyze_service_account_impersonation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_roles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_group_edges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_resource_edges_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
