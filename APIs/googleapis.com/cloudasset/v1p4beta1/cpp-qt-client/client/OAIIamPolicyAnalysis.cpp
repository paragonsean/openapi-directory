/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIamPolicyAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIamPolicyAnalysis::OAIIamPolicyAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIamPolicyAnalysis::OAIIamPolicyAnalysis() {
    this->initializeModel();
}

OAIIamPolicyAnalysis::~OAIIamPolicyAnalysis() {}

void OAIIamPolicyAnalysis::initializeModel() {

    m_analysis_query_isSet = false;
    m_analysis_query_isValid = false;

    m_analysis_results_isSet = false;
    m_analysis_results_isValid = false;

    m_fully_explored_isSet = false;
    m_fully_explored_isValid = false;
}

void OAIIamPolicyAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIamPolicyAnalysis::fromJsonObject(QJsonObject json) {

    m_analysis_query_isValid = ::OpenAPI::fromJsonValue(m_analysis_query, json[QString("analysisQuery")]);
    m_analysis_query_isSet = !json[QString("analysisQuery")].isNull() && m_analysis_query_isValid;

    m_analysis_results_isValid = ::OpenAPI::fromJsonValue(m_analysis_results, json[QString("analysisResults")]);
    m_analysis_results_isSet = !json[QString("analysisResults")].isNull() && m_analysis_results_isValid;

    m_fully_explored_isValid = ::OpenAPI::fromJsonValue(m_fully_explored, json[QString("fullyExplored")]);
    m_fully_explored_isSet = !json[QString("fullyExplored")].isNull() && m_fully_explored_isValid;
}

QString OAIIamPolicyAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIamPolicyAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_query.isSet()) {
        obj.insert(QString("analysisQuery"), ::OpenAPI::toJsonValue(m_analysis_query));
    }
    if (m_analysis_results.size() > 0) {
        obj.insert(QString("analysisResults"), ::OpenAPI::toJsonValue(m_analysis_results));
    }
    if (m_fully_explored_isSet) {
        obj.insert(QString("fullyExplored"), ::OpenAPI::toJsonValue(m_fully_explored));
    }
    return obj;
}

OAIIamPolicyAnalysisQuery OAIIamPolicyAnalysis::getAnalysisQuery() const {
    return m_analysis_query;
}
void OAIIamPolicyAnalysis::setAnalysisQuery(const OAIIamPolicyAnalysisQuery &analysis_query) {
    m_analysis_query = analysis_query;
    m_analysis_query_isSet = true;
}

bool OAIIamPolicyAnalysis::is_analysis_query_Set() const{
    return m_analysis_query_isSet;
}

bool OAIIamPolicyAnalysis::is_analysis_query_Valid() const{
    return m_analysis_query_isValid;
}

QList<OAIIamPolicyAnalysisResult> OAIIamPolicyAnalysis::getAnalysisResults() const {
    return m_analysis_results;
}
void OAIIamPolicyAnalysis::setAnalysisResults(const QList<OAIIamPolicyAnalysisResult> &analysis_results) {
    m_analysis_results = analysis_results;
    m_analysis_results_isSet = true;
}

bool OAIIamPolicyAnalysis::is_analysis_results_Set() const{
    return m_analysis_results_isSet;
}

bool OAIIamPolicyAnalysis::is_analysis_results_Valid() const{
    return m_analysis_results_isValid;
}

bool OAIIamPolicyAnalysis::isFullyExplored() const {
    return m_fully_explored;
}
void OAIIamPolicyAnalysis::setFullyExplored(const bool &fully_explored) {
    m_fully_explored = fully_explored;
    m_fully_explored_isSet = true;
}

bool OAIIamPolicyAnalysis::is_fully_explored_Set() const{
    return m_fully_explored_isSet;
}

bool OAIIamPolicyAnalysis::is_fully_explored_Valid() const{
    return m_fully_explored_isValid;
}

bool OAIIamPolicyAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_query.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_explored_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIamPolicyAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
