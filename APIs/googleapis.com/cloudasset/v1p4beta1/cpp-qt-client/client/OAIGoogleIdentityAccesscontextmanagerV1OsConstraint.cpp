/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleIdentityAccesscontextmanagerV1OsConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::OAIGoogleIdentityAccesscontextmanagerV1OsConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::OAIGoogleIdentityAccesscontextmanagerV1OsConstraint() {
    this->initializeModel();
}

OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::~OAIGoogleIdentityAccesscontextmanagerV1OsConstraint() {}

void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::initializeModel() {

    m_minimum_version_isSet = false;
    m_minimum_version_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_require_verified_chrome_os_isSet = false;
    m_require_verified_chrome_os_isValid = false;
}

void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::fromJsonObject(QJsonObject json) {

    m_minimum_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_version, json[QString("minimumVersion")]);
    m_minimum_version_isSet = !json[QString("minimumVersion")].isNull() && m_minimum_version_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_require_verified_chrome_os_isValid = ::OpenAPI::fromJsonValue(m_require_verified_chrome_os, json[QString("requireVerifiedChromeOs")]);
    m_require_verified_chrome_os_isSet = !json[QString("requireVerifiedChromeOs")].isNull() && m_require_verified_chrome_os_isValid;
}

QString OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_version_isSet) {
        obj.insert(QString("minimumVersion"), ::OpenAPI::toJsonValue(m_minimum_version));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_require_verified_chrome_os_isSet) {
        obj.insert(QString("requireVerifiedChromeOs"), ::OpenAPI::toJsonValue(m_require_verified_chrome_os));
    }
    return obj;
}

QString OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::getMinimumVersion() const {
    return m_minimum_version;
}
void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::setMinimumVersion(const QString &minimum_version) {
    m_minimum_version = minimum_version;
    m_minimum_version_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_minimum_version_Set() const{
    return m_minimum_version_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_minimum_version_Valid() const{
    return m_minimum_version_isValid;
}

QString OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::getOsType() const {
    return m_os_type;
}
void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_os_type_Valid() const{
    return m_os_type_isValid;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::isRequireVerifiedChromeOs() const {
    return m_require_verified_chrome_os;
}
void OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::setRequireVerifiedChromeOs(const bool &require_verified_chrome_os) {
    m_require_verified_chrome_os = require_verified_chrome_os;
    m_require_verified_chrome_os_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_require_verified_chrome_os_Set() const{
    return m_require_verified_chrome_os_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::is_require_verified_chrome_os_Valid() const{
    return m_require_verified_chrome_os_isValid;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_verified_chrome_os_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleIdentityAccesscontextmanagerV1OsConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
