/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleIdentityAccesscontextmanagerV1BasicLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::OAIGoogleIdentityAccesscontextmanagerV1BasicLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::OAIGoogleIdentityAccesscontextmanagerV1BasicLevel() {
    this->initializeModel();
}

OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::~OAIGoogleIdentityAccesscontextmanagerV1BasicLevel() {}

void OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::initializeModel() {

    m_combining_function_isSet = false;
    m_combining_function_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;
}

void OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::fromJsonObject(QJsonObject json) {

    m_combining_function_isValid = ::OpenAPI::fromJsonValue(m_combining_function, json[QString("combiningFunction")]);
    m_combining_function_isSet = !json[QString("combiningFunction")].isNull() && m_combining_function_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;
}

QString OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::asJsonObject() const {
    QJsonObject obj;
    if (m_combining_function_isSet) {
        obj.insert(QString("combiningFunction"), ::OpenAPI::toJsonValue(m_combining_function));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    return obj;
}

QString OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::getCombiningFunction() const {
    return m_combining_function;
}
void OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::setCombiningFunction(const QString &combining_function) {
    m_combining_function = combining_function;
    m_combining_function_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::is_combining_function_Set() const{
    return m_combining_function_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::is_combining_function_Valid() const{
    return m_combining_function_isValid;
}

QList<OAIGoogleIdentityAccesscontextmanagerV1Condition> OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::getConditions() const {
    return m_conditions;
}
void OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::setConditions(const QList<OAIGoogleIdentityAccesscontextmanagerV1Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::is_conditions_Valid() const{
    return m_conditions_isValid;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_combining_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleIdentityAccesscontextmanagerV1BasicLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
