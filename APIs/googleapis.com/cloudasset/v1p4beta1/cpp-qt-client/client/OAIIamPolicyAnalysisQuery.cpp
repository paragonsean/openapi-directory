/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIamPolicyAnalysisQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIamPolicyAnalysisQuery::OAIIamPolicyAnalysisQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIamPolicyAnalysisQuery::OAIIamPolicyAnalysisQuery() {
    this->initializeModel();
}

OAIIamPolicyAnalysisQuery::~OAIIamPolicyAnalysisQuery() {}

void OAIIamPolicyAnalysisQuery::initializeModel() {

    m_access_selector_isSet = false;
    m_access_selector_isValid = false;

    m_identity_selector_isSet = false;
    m_identity_selector_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_resource_selector_isSet = false;
    m_resource_selector_isValid = false;
}

void OAIIamPolicyAnalysisQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIamPolicyAnalysisQuery::fromJsonObject(QJsonObject json) {

    m_access_selector_isValid = ::OpenAPI::fromJsonValue(m_access_selector, json[QString("accessSelector")]);
    m_access_selector_isSet = !json[QString("accessSelector")].isNull() && m_access_selector_isValid;

    m_identity_selector_isValid = ::OpenAPI::fromJsonValue(m_identity_selector, json[QString("identitySelector")]);
    m_identity_selector_isSet = !json[QString("identitySelector")].isNull() && m_identity_selector_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_resource_selector_isValid = ::OpenAPI::fromJsonValue(m_resource_selector, json[QString("resourceSelector")]);
    m_resource_selector_isSet = !json[QString("resourceSelector")].isNull() && m_resource_selector_isValid;
}

QString OAIIamPolicyAnalysisQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIamPolicyAnalysisQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_access_selector.isSet()) {
        obj.insert(QString("accessSelector"), ::OpenAPI::toJsonValue(m_access_selector));
    }
    if (m_identity_selector.isSet()) {
        obj.insert(QString("identitySelector"), ::OpenAPI::toJsonValue(m_identity_selector));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_resource_selector.isSet()) {
        obj.insert(QString("resourceSelector"), ::OpenAPI::toJsonValue(m_resource_selector));
    }
    return obj;
}

OAIAccessSelector OAIIamPolicyAnalysisQuery::getAccessSelector() const {
    return m_access_selector;
}
void OAIIamPolicyAnalysisQuery::setAccessSelector(const OAIAccessSelector &access_selector) {
    m_access_selector = access_selector;
    m_access_selector_isSet = true;
}

bool OAIIamPolicyAnalysisQuery::is_access_selector_Set() const{
    return m_access_selector_isSet;
}

bool OAIIamPolicyAnalysisQuery::is_access_selector_Valid() const{
    return m_access_selector_isValid;
}

OAIIdentitySelector OAIIamPolicyAnalysisQuery::getIdentitySelector() const {
    return m_identity_selector;
}
void OAIIamPolicyAnalysisQuery::setIdentitySelector(const OAIIdentitySelector &identity_selector) {
    m_identity_selector = identity_selector;
    m_identity_selector_isSet = true;
}

bool OAIIamPolicyAnalysisQuery::is_identity_selector_Set() const{
    return m_identity_selector_isSet;
}

bool OAIIamPolicyAnalysisQuery::is_identity_selector_Valid() const{
    return m_identity_selector_isValid;
}

QString OAIIamPolicyAnalysisQuery::getParent() const {
    return m_parent;
}
void OAIIamPolicyAnalysisQuery::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIIamPolicyAnalysisQuery::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIIamPolicyAnalysisQuery::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIResourceSelector OAIIamPolicyAnalysisQuery::getResourceSelector() const {
    return m_resource_selector;
}
void OAIIamPolicyAnalysisQuery::setResourceSelector(const OAIResourceSelector &resource_selector) {
    m_resource_selector = resource_selector;
    m_resource_selector_isSet = true;
}

bool OAIIamPolicyAnalysisQuery::is_resource_selector_Set() const{
    return m_resource_selector_isSet;
}

bool OAIIamPolicyAnalysisQuery::is_resource_selector_Valid() const{
    return m_resource_selector_isValid;
}

bool OAIIamPolicyAnalysisQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIamPolicyAnalysisQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
