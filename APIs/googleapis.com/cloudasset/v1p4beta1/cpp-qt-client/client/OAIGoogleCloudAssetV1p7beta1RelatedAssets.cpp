/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1p7beta1RelatedAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1p7beta1RelatedAssets::OAIGoogleCloudAssetV1p7beta1RelatedAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1p7beta1RelatedAssets::OAIGoogleCloudAssetV1p7beta1RelatedAssets() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1p7beta1RelatedAssets::~OAIGoogleCloudAssetV1p7beta1RelatedAssets() {}

void OAIGoogleCloudAssetV1p7beta1RelatedAssets::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_relationship_attributes_isSet = false;
    m_relationship_attributes_isValid = false;
}

void OAIGoogleCloudAssetV1p7beta1RelatedAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1p7beta1RelatedAssets::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_relationship_attributes_isValid = ::OpenAPI::fromJsonValue(m_relationship_attributes, json[QString("relationshipAttributes")]);
    m_relationship_attributes_isSet = !json[QString("relationshipAttributes")].isNull() && m_relationship_attributes_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1RelatedAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1p7beta1RelatedAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_relationship_attributes.isSet()) {
        obj.insert(QString("relationshipAttributes"), ::OpenAPI::toJsonValue(m_relationship_attributes));
    }
    return obj;
}

QList<OAIGoogleCloudAssetV1p7beta1RelatedAsset> OAIGoogleCloudAssetV1p7beta1RelatedAssets::getAssets() const {
    return m_assets;
}
void OAIGoogleCloudAssetV1p7beta1RelatedAssets::setAssets(const QList<OAIGoogleCloudAssetV1p7beta1RelatedAsset> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIGoogleCloudAssetV1p7beta1RelationshipAttributes OAIGoogleCloudAssetV1p7beta1RelatedAssets::getRelationshipAttributes() const {
    return m_relationship_attributes;
}
void OAIGoogleCloudAssetV1p7beta1RelatedAssets::setRelationshipAttributes(const OAIGoogleCloudAssetV1p7beta1RelationshipAttributes &relationship_attributes) {
    m_relationship_attributes = relationship_attributes;
    m_relationship_attributes_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::is_relationship_attributes_Set() const{
    return m_relationship_attributes_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::is_relationship_attributes_Valid() const{
    return m_relationship_attributes_isValid;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1p7beta1RelatedAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
