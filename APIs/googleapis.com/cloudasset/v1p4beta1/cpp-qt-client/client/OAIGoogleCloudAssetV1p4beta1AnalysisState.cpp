/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1p4beta1AnalysisState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1p4beta1AnalysisState::OAIGoogleCloudAssetV1p4beta1AnalysisState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1p4beta1AnalysisState::OAIGoogleCloudAssetV1p4beta1AnalysisState() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1p4beta1AnalysisState::~OAIGoogleCloudAssetV1p4beta1AnalysisState() {}

void OAIGoogleCloudAssetV1p4beta1AnalysisState::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void OAIGoogleCloudAssetV1p4beta1AnalysisState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1p4beta1AnalysisState::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString OAIGoogleCloudAssetV1p4beta1AnalysisState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1p4beta1AnalysisState::asJsonObject() const {
    QJsonObject obj;
    if (m_cause_isSet) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    return obj;
}

QString OAIGoogleCloudAssetV1p4beta1AnalysisState::getCause() const {
    return m_cause;
}
void OAIGoogleCloudAssetV1p4beta1AnalysisState::setCause(const QString &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIGoogleCloudAssetV1p4beta1AnalysisState::getCode() const {
    return m_code;
}
void OAIGoogleCloudAssetV1p4beta1AnalysisState::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1p4beta1AnalysisState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
