/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1p4beta1Access.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1p4beta1Access::OAIGoogleCloudAssetV1p4beta1Access(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1p4beta1Access::OAIGoogleCloudAssetV1p4beta1Access() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1p4beta1Access::~OAIGoogleCloudAssetV1p4beta1Access() {}

void OAIGoogleCloudAssetV1p4beta1Access::initializeModel() {

    m_analysis_state_isSet = false;
    m_analysis_state_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIGoogleCloudAssetV1p4beta1Access::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1p4beta1Access::fromJsonObject(QJsonObject json) {

    m_analysis_state_isValid = ::OpenAPI::fromJsonValue(m_analysis_state, json[QString("analysisState")]);
    m_analysis_state_isSet = !json[QString("analysisState")].isNull() && m_analysis_state_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIGoogleCloudAssetV1p4beta1Access::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1p4beta1Access::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_state.isSet()) {
        obj.insert(QString("analysisState"), ::OpenAPI::toJsonValue(m_analysis_state));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

OAIGoogleCloudAssetV1p4beta1AnalysisState OAIGoogleCloudAssetV1p4beta1Access::getAnalysisState() const {
    return m_analysis_state;
}
void OAIGoogleCloudAssetV1p4beta1Access::setAnalysisState(const OAIGoogleCloudAssetV1p4beta1AnalysisState &analysis_state) {
    m_analysis_state = analysis_state;
    m_analysis_state_isSet = true;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_analysis_state_Set() const{
    return m_analysis_state_isSet;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_analysis_state_Valid() const{
    return m_analysis_state_isValid;
}

QString OAIGoogleCloudAssetV1p4beta1Access::getPermission() const {
    return m_permission;
}
void OAIGoogleCloudAssetV1p4beta1Access::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIGoogleCloudAssetV1p4beta1Access::getRole() const {
    return m_role;
}
void OAIGoogleCloudAssetV1p4beta1Access::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGoogleCloudAssetV1p4beta1Access::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIGoogleCloudAssetV1p4beta1Access::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1p4beta1Access::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
