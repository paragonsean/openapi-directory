/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1p7beta1Resource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1p7beta1Resource::OAIGoogleCloudAssetV1p7beta1Resource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1p7beta1Resource::OAIGoogleCloudAssetV1p7beta1Resource() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1p7beta1Resource::~OAIGoogleCloudAssetV1p7beta1Resource() {}

void OAIGoogleCloudAssetV1p7beta1Resource::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_discovery_document_uri_isSet = false;
    m_discovery_document_uri_isValid = false;

    m_discovery_name_isSet = false;
    m_discovery_name_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_resource_url_isSet = false;
    m_resource_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGoogleCloudAssetV1p7beta1Resource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1p7beta1Resource::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_discovery_document_uri_isValid = ::OpenAPI::fromJsonValue(m_discovery_document_uri, json[QString("discoveryDocumentUri")]);
    m_discovery_document_uri_isSet = !json[QString("discoveryDocumentUri")].isNull() && m_discovery_document_uri_isValid;

    m_discovery_name_isValid = ::OpenAPI::fromJsonValue(m_discovery_name, json[QString("discoveryName")]);
    m_discovery_name_isSet = !json[QString("discoveryName")].isNull() && m_discovery_name_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_resource_url_isValid = ::OpenAPI::fromJsonValue(m_resource_url, json[QString("resourceUrl")]);
    m_resource_url_isSet = !json[QString("resourceUrl")].isNull() && m_resource_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1p7beta1Resource::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_discovery_document_uri_isSet) {
        obj.insert(QString("discoveryDocumentUri"), ::OpenAPI::toJsonValue(m_discovery_document_uri));
    }
    if (m_discovery_name_isSet) {
        obj.insert(QString("discoveryName"), ::OpenAPI::toJsonValue(m_discovery_name));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_resource_url_isSet) {
        obj.insert(QString("resourceUrl"), ::OpenAPI::toJsonValue(m_resource_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIGoogleCloudAssetV1p7beta1Resource::getData() const {
    return m_data;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setData(const QMap<QString, QJsonValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_data_Set() const{
    return m_data_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getDiscoveryDocumentUri() const {
    return m_discovery_document_uri;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setDiscoveryDocumentUri(const QString &discovery_document_uri) {
    m_discovery_document_uri = discovery_document_uri;
    m_discovery_document_uri_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_discovery_document_uri_Set() const{
    return m_discovery_document_uri_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_discovery_document_uri_Valid() const{
    return m_discovery_document_uri_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getDiscoveryName() const {
    return m_discovery_name;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setDiscoveryName(const QString &discovery_name) {
    m_discovery_name = discovery_name;
    m_discovery_name_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_discovery_name_Set() const{
    return m_discovery_name_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_discovery_name_Valid() const{
    return m_discovery_name_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getLocation() const {
    return m_location;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getParent() const {
    return m_parent;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getResourceUrl() const {
    return m_resource_url;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setResourceUrl(const QString &resource_url) {
    m_resource_url = resource_url;
    m_resource_url_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_resource_url_Set() const{
    return m_resource_url_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_resource_url_Valid() const{
    return m_resource_url_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1Resource::getVersion() const {
    return m_version;
}
void OAIGoogleCloudAssetV1p7beta1Resource::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_document_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1p7beta1Resource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
