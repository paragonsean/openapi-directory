/**
 * Cloud Asset API
 * The cloud asset API manages the history and inventory of cloud resources.
 *
 * The version of the OpenAPI document: v1p4beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1p4beta1Api_H
#define OAI_OAIV1p4beta1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeIamPolicyResponse.h"
#include "OAIExportIamPolicyAnalysisRequest.h"
#include "OAIOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1p4beta1Api : public QObject {
    Q_OBJECT

public:
    OAIV1p4beta1Api(const int timeOut = 0);
    ~OAIV1p4beta1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  analysis_query_access_selector_permissions QList<QString> [optional]
    * @param[in]  analysis_query_access_selector_roles QList<QString> [optional]
    * @param[in]  analysis_query_identity_selector_identity QString [optional]
    * @param[in]  analysis_query_resource_selector_full_resource_name QString [optional]
    * @param[in]  options_analyze_service_account_impersonation bool [optional]
    * @param[in]  options_execution_timeout QString [optional]
    * @param[in]  options_expand_groups bool [optional]
    * @param[in]  options_expand_resources bool [optional]
    * @param[in]  options_expand_roles bool [optional]
    * @param[in]  options_output_group_edges bool [optional]
    * @param[in]  options_output_resource_edges bool [optional]
    */
    virtual void cloudasset_analyzeIamPolicy(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &analysis_query_access_selector_permissions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &analysis_query_access_selector_roles = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &analysis_query_identity_selector_identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &analysis_query_resource_selector_full_resource_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &options_analyze_service_account_impersonation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &options_execution_timeout = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &options_expand_groups = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &options_expand_resources = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &options_expand_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &options_output_group_edges = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &options_output_resource_edges = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_export_iam_policy_analysis_request OAIExportIamPolicyAnalysisRequest [optional]
    */
    virtual void cloudasset_exportIamPolicyAnalysis(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExportIamPolicyAnalysisRequest> &oai_export_iam_policy_analysis_request = ::OpenAPI::OptionalParam<OAIExportIamPolicyAnalysisRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudasset_analyzeIamPolicyCallback(OAIHttpRequestWorker *worker);
    void cloudasset_exportIamPolicyAnalysisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudasset_analyzeIamPolicySignal(OAIAnalyzeIamPolicyResponse summary);
    void cloudasset_exportIamPolicyAnalysisSignal(OAIOperation summary);


    void cloudasset_analyzeIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeIamPolicyResponse summary);
    void cloudasset_exportIamPolicyAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);

    Q_DECL_DEPRECATED_X("Use cloudasset_analyzeIamPolicySignalError() instead")
    void cloudasset_analyzeIamPolicySignalE(OAIAnalyzeIamPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudasset_analyzeIamPolicySignalError(OAIAnalyzeIamPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudasset_exportIamPolicyAnalysisSignalError() instead")
    void cloudasset_exportIamPolicyAnalysisSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudasset_exportIamPolicyAnalysisSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudasset_analyzeIamPolicySignalErrorFull() instead")
    void cloudasset_analyzeIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudasset_analyzeIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudasset_exportIamPolicyAnalysisSignalErrorFull() instead")
    void cloudasset_exportIamPolicyAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudasset_exportIamPolicyAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
