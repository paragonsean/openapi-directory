/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemporalAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemporalAsset::OAITemporalAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemporalAsset::OAITemporalAsset() {
    this->initializeModel();
}

OAITemporalAsset::~OAITemporalAsset() {}

void OAITemporalAsset::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_window_isSet = false;
    m_window_isValid = false;
}

void OAITemporalAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemporalAsset::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_window_isValid = ::OpenAPI::fromJsonValue(m_window, json[QString("window")]);
    m_window_isSet = !json[QString("window")].isNull() && m_window_isValid;
}

QString OAITemporalAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemporalAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_asset.isSet()) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_window.isSet()) {
        obj.insert(QString("window"), ::OpenAPI::toJsonValue(m_window));
    }
    return obj;
}

OAIAsset OAITemporalAsset::getAsset() const {
    return m_asset;
}
void OAITemporalAsset::setAsset(const OAIAsset &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAITemporalAsset::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAITemporalAsset::is_asset_Valid() const{
    return m_asset_isValid;
}

bool OAITemporalAsset::isDeleted() const {
    return m_deleted;
}
void OAITemporalAsset::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAITemporalAsset::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAITemporalAsset::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAITimeWindow OAITemporalAsset::getWindow() const {
    return m_window;
}
void OAITemporalAsset::setWindow(const OAITimeWindow &window) {
    m_window = window;
    m_window_isSet = true;
}

bool OAITemporalAsset::is_window_Set() const{
    return m_window_isSet;
}

bool OAITemporalAsset::is_window_Valid() const{
    return m_window_isValid;
}

bool OAITemporalAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemporalAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
