/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudOrgpolicyV1BooleanPolicy from './GoogleCloudOrgpolicyV1BooleanPolicy';
import GoogleCloudOrgpolicyV1ListPolicy from './GoogleCloudOrgpolicyV1ListPolicy';

/**
 * The GoogleCloudOrgpolicyV1Policy model module.
 * @module model/GoogleCloudOrgpolicyV1Policy
 * @version v1beta1
 */
class GoogleCloudOrgpolicyV1Policy {
    /**
     * Constructs a new <code>GoogleCloudOrgpolicyV1Policy</code>.
     * Defines a Cloud Organization &#x60;Policy&#x60; which is used to specify &#x60;Constraints&#x60; for configurations of Cloud Platform resources.
     * @alias module:model/GoogleCloudOrgpolicyV1Policy
     */
    constructor() { 
        
        GoogleCloudOrgpolicyV1Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudOrgpolicyV1Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudOrgpolicyV1Policy} obj Optional instance to populate.
     * @return {module:model/GoogleCloudOrgpolicyV1Policy} The populated <code>GoogleCloudOrgpolicyV1Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudOrgpolicyV1Policy();

            if (data.hasOwnProperty('booleanPolicy')) {
                obj['booleanPolicy'] = GoogleCloudOrgpolicyV1BooleanPolicy.constructFromObject(data['booleanPolicy']);
            }
            if (data.hasOwnProperty('constraint')) {
                obj['constraint'] = ApiClient.convertToType(data['constraint'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'Blob');
            }
            if (data.hasOwnProperty('listPolicy')) {
                obj['listPolicy'] = GoogleCloudOrgpolicyV1ListPolicy.constructFromObject(data['listPolicy']);
            }
            if (data.hasOwnProperty('restoreDefault')) {
                obj['restoreDefault'] = ApiClient.convertToType(data['restoreDefault'], Object);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudOrgpolicyV1Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudOrgpolicyV1Policy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `booleanPolicy`
        if (data['booleanPolicy']) { // data not null
          GoogleCloudOrgpolicyV1BooleanPolicy.validateJSON(data['booleanPolicy']);
        }
        // ensure the json data is a string
        if (data['constraint'] && !(typeof data['constraint'] === 'string' || data['constraint'] instanceof String)) {
            throw new Error("Expected the field `constraint` to be a primitive type in the JSON string but got " + data['constraint']);
        }
        // validate the optional field `listPolicy`
        if (data['listPolicy']) { // data not null
          GoogleCloudOrgpolicyV1ListPolicy.validateJSON(data['listPolicy']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudOrgpolicyV1BooleanPolicy} booleanPolicy
 */
GoogleCloudOrgpolicyV1Policy.prototype['booleanPolicy'] = undefined;

/**
 * The name of the `Constraint` the `Policy` is configuring, for example, `constraints/serviceuser.services`. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.
 * @member {String} constraint
 */
GoogleCloudOrgpolicyV1Policy.prototype['constraint'] = undefined;

/**
 * An opaque tag indicating the current version of the `Policy`, used for concurrency control. When the `Policy` is returned from either a `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset. When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value that was returned from a `GetOrgPolicy` request as part of a read-modify-write loop for concurrency control. Not setting the `etag`in a `SetOrgPolicy` request will result in an unconditional write of the `Policy`.
 * @member {Blob} etag
 */
GoogleCloudOrgpolicyV1Policy.prototype['etag'] = undefined;

/**
 * @member {module:model/GoogleCloudOrgpolicyV1ListPolicy} listPolicy
 */
GoogleCloudOrgpolicyV1Policy.prototype['listPolicy'] = undefined;

/**
 * Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. Suppose that `constraint_default` is set to `ALLOW` for the `Constraint` `constraints/serviceuser.services`. Suppose that organization foo.com sets a `Policy` at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a `Policy` with the `policy_type` `restore_default` on several experimental projects, restoring the `constraint_default` enforcement of the `Constraint` for only those projects, allowing those projects to have all services activated.
 * @member {Object} restoreDefault
 */
GoogleCloudOrgpolicyV1Policy.prototype['restoreDefault'] = undefined;

/**
 * The time stamp the `Policy` was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to `SetOrgPolicy` was made for that `Policy`. Any value set by the client will be ignored.
 * @member {String} updateTime
 */
GoogleCloudOrgpolicyV1Policy.prototype['updateTime'] = undefined;

/**
 * Version of the `Policy`. Default version is 0;
 * @member {Number} version
 */
GoogleCloudOrgpolicyV1Policy.prototype['version'] = undefined;






export default GoogleCloudOrgpolicyV1Policy;

