/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p5beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork() {
    this->initializeModel();
}

OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::~OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork() {}

void OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_vpc_ip_subnetworks_isSet = false;
    m_vpc_ip_subnetworks_isValid = false;
}

void OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_vpc_ip_subnetworks_isValid = ::OpenAPI::fromJsonValue(m_vpc_ip_subnetworks, json[QString("vpcIpSubnetworks")]);
    m_vpc_ip_subnetworks_isSet = !json[QString("vpcIpSubnetworks")].isNull() && m_vpc_ip_subnetworks_isValid;
}

QString OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_vpc_ip_subnetworks.size() > 0) {
        obj.insert(QString("vpcIpSubnetworks"), ::OpenAPI::toJsonValue(m_vpc_ip_subnetworks));
    }
    return obj;
}

QString OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::getNetwork() const {
    return m_network;
}
void OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::is_network_Set() const{
    return m_network_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::is_network_Valid() const{
    return m_network_isValid;
}

QList<QString> OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::getVpcIpSubnetworks() const {
    return m_vpc_ip_subnetworks;
}
void OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::setVpcIpSubnetworks(const QList<QString> &vpc_ip_subnetworks) {
    m_vpc_ip_subnetworks = vpc_ip_subnetworks;
    m_vpc_ip_subnetworks_isSet = true;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::is_vpc_ip_subnetworks_Set() const{
    return m_vpc_ip_subnetworks_isSet;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::is_vpc_ip_subnetworks_Valid() const{
    return m_vpc_ip_subnetworks_isValid;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_ip_subnetworks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleIdentityAccesscontextmanagerV1VpcSubNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
