/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p5beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleIdentityAccesscontextmanagerV1DevicePolicy;
import org.openapitools.client.model.GoogleIdentityAccesscontextmanagerV1VpcNetworkSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A condition necessary for an &#x60;AccessLevel&#x60; to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:14.237205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleIdentityAccesscontextmanagerV1Condition {
  public static final String SERIALIZED_NAME_DEVICE_POLICY = "devicePolicy";
  @SerializedName(SERIALIZED_NAME_DEVICE_POLICY)
  private GoogleIdentityAccesscontextmanagerV1DevicePolicy devicePolicy;

  public static final String SERIALIZED_NAME_IP_SUBNETWORKS = "ipSubnetworks";
  @SerializedName(SERIALIZED_NAME_IP_SUBNETWORKS)
  private List<String> ipSubnetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<String> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEGATE = "negate";
  @SerializedName(SERIALIZED_NAME_NEGATE)
  private Boolean negate;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_ACCESS_LEVELS = "requiredAccessLevels";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ACCESS_LEVELS)
  private List<String> requiredAccessLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_NETWORK_SOURCES = "vpcNetworkSources";
  @SerializedName(SERIALIZED_NAME_VPC_NETWORK_SOURCES)
  private List<GoogleIdentityAccesscontextmanagerV1VpcNetworkSource> vpcNetworkSources = new ArrayList<>();

  public GoogleIdentityAccesscontextmanagerV1Condition() {
  }

  public GoogleIdentityAccesscontextmanagerV1Condition devicePolicy(GoogleIdentityAccesscontextmanagerV1DevicePolicy devicePolicy) {
    this.devicePolicy = devicePolicy;
    return this;
  }

  /**
   * Get devicePolicy
   * @return devicePolicy
   */
  @javax.annotation.Nullable
  public GoogleIdentityAccesscontextmanagerV1DevicePolicy getDevicePolicy() {
    return devicePolicy;
  }

  public void setDevicePolicy(GoogleIdentityAccesscontextmanagerV1DevicePolicy devicePolicy) {
    this.devicePolicy = devicePolicy;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition ipSubnetworks(List<String> ipSubnetworks) {
    this.ipSubnetworks = ipSubnetworks;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1Condition addIpSubnetworksItem(String ipSubnetworksItem) {
    if (this.ipSubnetworks == null) {
      this.ipSubnetworks = new ArrayList<>();
    }
    this.ipSubnetworks.add(ipSubnetworksItem);
    return this;
  }

  /**
   * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \&quot;192.0.2.0/24\&quot; is accepted but \&quot;192.0.2.1/24\&quot; is not. Similarly, for IPv6, \&quot;2001:db8::/32\&quot; is accepted whereas \&quot;2001:db8::1/32\&quot; is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
   * @return ipSubnetworks
   */
  @javax.annotation.Nullable
  public List<String> getIpSubnetworks() {
    return ipSubnetworks;
  }

  public void setIpSubnetworks(List<String> ipSubnetworks) {
    this.ipSubnetworks = ipSubnetworks;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition members(List<String> members) {
    this.members = members;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1Condition addMembersItem(String membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: &#x60;user:{emailid}&#x60; &#x60;serviceAccount:{emailid}&#x60; If not specified, a request may come from any user.
   * @return members
   */
  @javax.annotation.Nullable
  public List<String> getMembers() {
    return members;
  }

  public void setMembers(List<String> members) {
    this.members = members;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition negate(Boolean negate) {
    this.negate = negate;
    return this;
  }

  /**
   * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.
   * @return negate
   */
  @javax.annotation.Nullable
  public Boolean getNegate() {
    return negate;
  }

  public void setNegate(Boolean negate) {
    this.negate = negate;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1Condition addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
   * @return regions
   */
  @javax.annotation.Nullable
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition requiredAccessLevels(List<String> requiredAccessLevels) {
    this.requiredAccessLevels = requiredAccessLevels;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1Condition addRequiredAccessLevelsItem(String requiredAccessLevelsItem) {
    if (this.requiredAccessLevels == null) {
      this.requiredAccessLevels = new ArrayList<>();
    }
    this.requiredAccessLevels.add(requiredAccessLevelsItem);
    return this;
  }

  /**
   * A list of other access levels defined in the same &#x60;Policy&#x60;, referenced by resource name. Referencing an &#x60;AccessLevel&#x60; which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \&quot;&#x60;accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\&quot;&#x60;
   * @return requiredAccessLevels
   */
  @javax.annotation.Nullable
  public List<String> getRequiredAccessLevels() {
    return requiredAccessLevels;
  }

  public void setRequiredAccessLevels(List<String> requiredAccessLevels) {
    this.requiredAccessLevels = requiredAccessLevels;
  }


  public GoogleIdentityAccesscontextmanagerV1Condition vpcNetworkSources(List<GoogleIdentityAccesscontextmanagerV1VpcNetworkSource> vpcNetworkSources) {
    this.vpcNetworkSources = vpcNetworkSources;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1Condition addVpcNetworkSourcesItem(GoogleIdentityAccesscontextmanagerV1VpcNetworkSource vpcNetworkSourcesItem) {
    if (this.vpcNetworkSources == null) {
      this.vpcNetworkSources = new ArrayList<>();
    }
    this.vpcNetworkSources.add(vpcNetworkSourcesItem);
    return this;
  }

  /**
   * The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with &#x60;ip_subnetworks&#x60;.
   * @return vpcNetworkSources
   */
  @javax.annotation.Nullable
  public List<GoogleIdentityAccesscontextmanagerV1VpcNetworkSource> getVpcNetworkSources() {
    return vpcNetworkSources;
  }

  public void setVpcNetworkSources(List<GoogleIdentityAccesscontextmanagerV1VpcNetworkSource> vpcNetworkSources) {
    this.vpcNetworkSources = vpcNetworkSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleIdentityAccesscontextmanagerV1Condition googleIdentityAccesscontextmanagerV1Condition = (GoogleIdentityAccesscontextmanagerV1Condition) o;
    return Objects.equals(this.devicePolicy, googleIdentityAccesscontextmanagerV1Condition.devicePolicy) &&
        Objects.equals(this.ipSubnetworks, googleIdentityAccesscontextmanagerV1Condition.ipSubnetworks) &&
        Objects.equals(this.members, googleIdentityAccesscontextmanagerV1Condition.members) &&
        Objects.equals(this.negate, googleIdentityAccesscontextmanagerV1Condition.negate) &&
        Objects.equals(this.regions, googleIdentityAccesscontextmanagerV1Condition.regions) &&
        Objects.equals(this.requiredAccessLevels, googleIdentityAccesscontextmanagerV1Condition.requiredAccessLevels) &&
        Objects.equals(this.vpcNetworkSources, googleIdentityAccesscontextmanagerV1Condition.vpcNetworkSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devicePolicy, ipSubnetworks, members, negate, regions, requiredAccessLevels, vpcNetworkSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleIdentityAccesscontextmanagerV1Condition {\n");
    sb.append("    devicePolicy: ").append(toIndentedString(devicePolicy)).append("\n");
    sb.append("    ipSubnetworks: ").append(toIndentedString(ipSubnetworks)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    negate: ").append(toIndentedString(negate)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    requiredAccessLevels: ").append(toIndentedString(requiredAccessLevels)).append("\n");
    sb.append("    vpcNetworkSources: ").append(toIndentedString(vpcNetworkSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("devicePolicy");
    openapiFields.add("ipSubnetworks");
    openapiFields.add("members");
    openapiFields.add("negate");
    openapiFields.add("regions");
    openapiFields.add("requiredAccessLevels");
    openapiFields.add("vpcNetworkSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleIdentityAccesscontextmanagerV1Condition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleIdentityAccesscontextmanagerV1Condition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleIdentityAccesscontextmanagerV1Condition is not found in the empty JSON string", GoogleIdentityAccesscontextmanagerV1Condition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleIdentityAccesscontextmanagerV1Condition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleIdentityAccesscontextmanagerV1Condition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `devicePolicy`
      if (jsonObj.get("devicePolicy") != null && !jsonObj.get("devicePolicy").isJsonNull()) {
        GoogleIdentityAccesscontextmanagerV1DevicePolicy.validateJsonElement(jsonObj.get("devicePolicy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipSubnetworks") != null && !jsonObj.get("ipSubnetworks").isJsonNull() && !jsonObj.get("ipSubnetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipSubnetworks` to be an array in the JSON string but got `%s`", jsonObj.get("ipSubnetworks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull() && !jsonObj.get("members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredAccessLevels") != null && !jsonObj.get("requiredAccessLevels").isJsonNull() && !jsonObj.get("requiredAccessLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredAccessLevels` to be an array in the JSON string but got `%s`", jsonObj.get("requiredAccessLevels").toString()));
      }
      if (jsonObj.get("vpcNetworkSources") != null && !jsonObj.get("vpcNetworkSources").isJsonNull()) {
        JsonArray jsonArrayvpcNetworkSources = jsonObj.getAsJsonArray("vpcNetworkSources");
        if (jsonArrayvpcNetworkSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpcNetworkSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpcNetworkSources` to be an array in the JSON string but got `%s`", jsonObj.get("vpcNetworkSources").toString()));
          }

          // validate the optional field `vpcNetworkSources` (array)
          for (int i = 0; i < jsonArrayvpcNetworkSources.size(); i++) {
            GoogleIdentityAccesscontextmanagerV1VpcNetworkSource.validateJsonElement(jsonArrayvpcNetworkSources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleIdentityAccesscontextmanagerV1Condition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleIdentityAccesscontextmanagerV1Condition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleIdentityAccesscontextmanagerV1Condition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleIdentityAccesscontextmanagerV1Condition.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleIdentityAccesscontextmanagerV1Condition>() {
           @Override
           public void write(JsonWriter out, GoogleIdentityAccesscontextmanagerV1Condition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleIdentityAccesscontextmanagerV1Condition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleIdentityAccesscontextmanagerV1Condition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleIdentityAccesscontextmanagerV1Condition
   * @throws IOException if the JSON string is invalid with respect to GoogleIdentityAccesscontextmanagerV1Condition
   */
  public static GoogleIdentityAccesscontextmanagerV1Condition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleIdentityAccesscontextmanagerV1Condition.class);
  }

  /**
   * Convert an instance of GoogleIdentityAccesscontextmanagerV1Condition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

