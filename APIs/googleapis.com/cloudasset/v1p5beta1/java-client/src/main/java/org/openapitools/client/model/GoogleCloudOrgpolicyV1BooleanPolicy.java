/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p5beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used in &#x60;policy_type&#x60; to specify how &#x60;boolean_policy&#x60; will behave at this resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:14.237205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudOrgpolicyV1BooleanPolicy {
  public static final String SERIALIZED_NAME_ENFORCED = "enforced";
  @SerializedName(SERIALIZED_NAME_ENFORCED)
  private Boolean enforced;

  public GoogleCloudOrgpolicyV1BooleanPolicy() {
  }

  public GoogleCloudOrgpolicyV1BooleanPolicy enforced(Boolean enforced) {
    this.enforced = enforced;
    return this;
  }

  /**
   * If &#x60;true&#x60;, then the &#x60;Policy&#x60; is enforced. If &#x60;false&#x60;, then any configuration is acceptable. Suppose you have a &#x60;Constraint&#x60; &#x60;constraints/compute.disableSerialPortAccess&#x60; with &#x60;constraint_default&#x60; set to &#x60;ALLOW&#x60;. A &#x60;Policy&#x60; for that &#x60;Constraint&#x60; exhibits the following behavior: - If the &#x60;Policy&#x60; at this resource has enforced set to &#x60;false&#x60;, serial port connection attempts will be allowed. - If the &#x60;Policy&#x60; at this resource has enforced set to &#x60;true&#x60;, serial port connection attempts will be refused. - If the &#x60;Policy&#x60; at this resource is &#x60;RestoreDefault&#x60;, serial port connection attempts will be allowed. - If no &#x60;Policy&#x60; is set at this resource or anywhere higher in the resource hierarchy, serial port connection attempts will be allowed. - If no &#x60;Policy&#x60; is set at this resource, but one exists higher in the resource hierarchy, the behavior is as if the&#x60;Policy&#x60; were set at this resource. The following examples demonstrate the different possible layerings: Example 1 (nearest &#x60;Constraint&#x60; wins): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with: {enforced: false} &#x60;projects/bar&#x60; has no &#x60;Policy&#x60; set. The constraint at &#x60;projects/bar&#x60; and &#x60;organizations/foo&#x60; will not be enforced. Example 2 (enforcement gets replaced): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with: {enforced: false} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {enforced: true} The constraint at &#x60;organizations/foo&#x60; is not enforced. The constraint at &#x60;projects/bar&#x60; is enforced. Example 3 (RestoreDefault): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with: {enforced: true} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {RestoreDefault: {}} The constraint at &#x60;organizations/foo&#x60; is enforced. The constraint at &#x60;projects/bar&#x60; is not enforced, because &#x60;constraint_default&#x60; for the &#x60;Constraint&#x60; is &#x60;ALLOW&#x60;.
   * @return enforced
   */
  @javax.annotation.Nullable
  public Boolean getEnforced() {
    return enforced;
  }

  public void setEnforced(Boolean enforced) {
    this.enforced = enforced;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudOrgpolicyV1BooleanPolicy googleCloudOrgpolicyV1BooleanPolicy = (GoogleCloudOrgpolicyV1BooleanPolicy) o;
    return Objects.equals(this.enforced, googleCloudOrgpolicyV1BooleanPolicy.enforced);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enforced);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudOrgpolicyV1BooleanPolicy {\n");
    sb.append("    enforced: ").append(toIndentedString(enforced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enforced");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudOrgpolicyV1BooleanPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudOrgpolicyV1BooleanPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudOrgpolicyV1BooleanPolicy is not found in the empty JSON string", GoogleCloudOrgpolicyV1BooleanPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudOrgpolicyV1BooleanPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudOrgpolicyV1BooleanPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudOrgpolicyV1BooleanPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudOrgpolicyV1BooleanPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudOrgpolicyV1BooleanPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudOrgpolicyV1BooleanPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudOrgpolicyV1BooleanPolicy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudOrgpolicyV1BooleanPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudOrgpolicyV1BooleanPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudOrgpolicyV1BooleanPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudOrgpolicyV1BooleanPolicy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudOrgpolicyV1BooleanPolicy
   */
  public static GoogleCloudOrgpolicyV1BooleanPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudOrgpolicyV1BooleanPolicy.class);
  }

  /**
   * Convert an instance of GoogleCloudOrgpolicyV1BooleanPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

