/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p5beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A representation of a Google Cloud resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:14.237205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Resource {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, Object> data = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOVERY_DOCUMENT_URI = "discoveryDocumentUri";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_DOCUMENT_URI)
  private String discoveryDocumentUri;

  public static final String SERIALIZED_NAME_DISCOVERY_NAME = "discoveryName";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_NAME)
  private String discoveryName;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_RESOURCE_URL = "resourceUrl";
  @SerializedName(SERIALIZED_NAME_RESOURCE_URL)
  private String resourceUrl;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Resource() {
  }

  public Resource data(Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public Resource putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * The content of the resource, in which some sensitive fields are removed and may not be present.
   * @return data
   */
  @javax.annotation.Nullable
  public Map<String, Object> getData() {
    return data;
  }

  public void setData(Map<String, Object> data) {
    this.data = data;
  }


  public Resource discoveryDocumentUri(String discoveryDocumentUri) {
    this.discoveryDocumentUri = discoveryDocumentUri;
    return this;
  }

  /**
   * The URL of the discovery document containing the resource&#39;s JSON schema. Example: &#x60;https://www.googleapis.com/discovery/v1/apis/compute/v1/rest&#x60; This value is unspecified for resources that do not have an API based on a discovery document, such as Cloud Bigtable.
   * @return discoveryDocumentUri
   */
  @javax.annotation.Nullable
  public String getDiscoveryDocumentUri() {
    return discoveryDocumentUri;
  }

  public void setDiscoveryDocumentUri(String discoveryDocumentUri) {
    this.discoveryDocumentUri = discoveryDocumentUri;
  }


  public Resource discoveryName(String discoveryName) {
    this.discoveryName = discoveryName;
    return this;
  }

  /**
   * The JSON schema name listed in the discovery document. Example: &#x60;Project&#x60; This value is unspecified for resources that do not have an API based on a discovery document, such as Cloud Bigtable.
   * @return discoveryName
   */
  @javax.annotation.Nullable
  public String getDiscoveryName() {
    return discoveryName;
  }

  public void setDiscoveryName(String discoveryName) {
    this.discoveryName = discoveryName;
  }


  public Resource parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The full name of the immediate parent of this resource. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information. For Google Cloud assets, this value is the parent resource defined in the [IAM policy hierarchy](https://cloud.google.com/iam/docs/overview#policy_hierarchy). Example: &#x60;//cloudresourcemanager.googleapis.com/projects/my_project_123&#x60; For third-party assets, this field may be set differently.
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public Resource resourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  /**
   * The REST URL for accessing the resource. An HTTP &#x60;GET&#x60; request using this URL returns the resource itself. Example: &#x60;https://cloudresourcemanager.googleapis.com/v1/projects/my-project-123&#x60; This value is unspecified for resources without a REST API.
   * @return resourceUrl
   */
  @javax.annotation.Nullable
  public String getResourceUrl() {
    return resourceUrl;
  }

  public void setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
  }


  public Resource version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The API version. Example: \&quot;v1\&quot;.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resource resource = (Resource) o;
    return Objects.equals(this.data, resource.data) &&
        Objects.equals(this.discoveryDocumentUri, resource.discoveryDocumentUri) &&
        Objects.equals(this.discoveryName, resource.discoveryName) &&
        Objects.equals(this.parent, resource.parent) &&
        Objects.equals(this.resourceUrl, resource.resourceUrl) &&
        Objects.equals(this.version, resource.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, discoveryDocumentUri, discoveryName, parent, resourceUrl, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resource {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    discoveryDocumentUri: ").append(toIndentedString(discoveryDocumentUri)).append("\n");
    sb.append("    discoveryName: ").append(toIndentedString(discoveryName)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    resourceUrl: ").append(toIndentedString(resourceUrl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("discoveryDocumentUri");
    openapiFields.add("discoveryName");
    openapiFields.add("parent");
    openapiFields.add("resourceUrl");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Resource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resource is not found in the empty JSON string", Resource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("discoveryDocumentUri") != null && !jsonObj.get("discoveryDocumentUri").isJsonNull()) && !jsonObj.get("discoveryDocumentUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryDocumentUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryDocumentUri").toString()));
      }
      if ((jsonObj.get("discoveryName") != null && !jsonObj.get("discoveryName").isJsonNull()) && !jsonObj.get("discoveryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryName").toString()));
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("resourceUrl") != null && !jsonObj.get("resourceUrl").isJsonNull()) && !jsonObj.get("resourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUrl").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resource.class));

       return (TypeAdapter<T>) new TypeAdapter<Resource>() {
           @Override
           public void write(JsonWriter out, Resource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Resource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Resource
   * @throws IOException if the JSON string is invalid with respect to Resource
   */
  public static Resource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resource.class);
  }

  /**
   * Convert an instance of Resource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

