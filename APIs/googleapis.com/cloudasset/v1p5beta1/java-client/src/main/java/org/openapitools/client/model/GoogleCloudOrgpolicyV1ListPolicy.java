/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p5beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used in &#x60;policy_type&#x60; to specify how &#x60;list_policy&#x60; behaves at this resource. &#x60;ListPolicy&#x60; can define specific values and subtrees of Cloud Resource Manager resource hierarchy (&#x60;Organizations&#x60;, &#x60;Folders&#x60;, &#x60;Projects&#x60;) that are allowed or denied by setting the &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; fields. This is achieved by using the &#x60;under:&#x60; and optional &#x60;is:&#x60; prefixes. The &#x60;under:&#x60; prefix is used to denote resource subtree values. The &#x60;is:&#x60; prefix is used to denote specific values, and is required only if the value contains a \&quot;:\&quot;. Values prefixed with \&quot;is:\&quot; are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - \&quot;projects/\&quot;, e.g. \&quot;projects/tokyo-rain-123\&quot; - \&quot;folders/\&quot;, e.g. \&quot;folders/1234\&quot; - \&quot;organizations/\&quot;, e.g. \&quot;organizations/1234\&quot; The &#x60;supports_under&#x60; field of the associated &#x60;Constraint&#x60; defines whether ancestry prefixes can be used. You can set &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; in the same &#x60;Policy&#x60; if &#x60;all_values&#x60; is &#x60;ALL_VALUES_UNSPECIFIED&#x60;. &#x60;ALLOW&#x60; or &#x60;DENY&#x60; are used to allow or deny all values. If &#x60;all_values&#x60; is set to either &#x60;ALLOW&#x60; or &#x60;DENY&#x60;, &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; must be unset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:14.237205-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudOrgpolicyV1ListPolicy {
  /**
   * The policy all_values state.
   */
  @JsonAdapter(AllValuesEnum.Adapter.class)
  public enum AllValuesEnum {
    ALL_VALUES_UNSPECIFIED("ALL_VALUES_UNSPECIFIED"),
    
    ALLOW("ALLOW"),
    
    DENY("DENY");

    private String value;

    AllValuesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllValuesEnum fromValue(String value) {
      for (AllValuesEnum b : AllValuesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllValuesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllValuesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllValuesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllValuesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllValuesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALL_VALUES = "allValues";
  @SerializedName(SERIALIZED_NAME_ALL_VALUES)
  private AllValuesEnum allValues;

  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<String> allowedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENIED_VALUES = "deniedValues";
  @SerializedName(SERIALIZED_NAME_DENIED_VALUES)
  private List<String> deniedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_INHERIT_FROM_PARENT = "inheritFromParent";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_PARENT)
  private Boolean inheritFromParent;

  public static final String SERIALIZED_NAME_SUGGESTED_VALUE = "suggestedValue";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_VALUE)
  private String suggestedValue;

  public GoogleCloudOrgpolicyV1ListPolicy() {
  }

  public GoogleCloudOrgpolicyV1ListPolicy allValues(AllValuesEnum allValues) {
    this.allValues = allValues;
    return this;
  }

  /**
   * The policy all_values state.
   * @return allValues
   */
  @javax.annotation.Nullable
  public AllValuesEnum getAllValues() {
    return allValues;
  }

  public void setAllValues(AllValuesEnum allValues) {
    this.allValues = allValues;
  }


  public GoogleCloudOrgpolicyV1ListPolicy allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public GoogleCloudOrgpolicyV1ListPolicy addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * List of values allowed at this resource. Can only be set if &#x60;all_values&#x60; is set to &#x60;ALL_VALUES_UNSPECIFIED&#x60;.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }


  public GoogleCloudOrgpolicyV1ListPolicy deniedValues(List<String> deniedValues) {
    this.deniedValues = deniedValues;
    return this;
  }

  public GoogleCloudOrgpolicyV1ListPolicy addDeniedValuesItem(String deniedValuesItem) {
    if (this.deniedValues == null) {
      this.deniedValues = new ArrayList<>();
    }
    this.deniedValues.add(deniedValuesItem);
    return this;
  }

  /**
   * List of values denied at this resource. Can only be set if &#x60;all_values&#x60; is set to &#x60;ALL_VALUES_UNSPECIFIED&#x60;.
   * @return deniedValues
   */
  @javax.annotation.Nullable
  public List<String> getDeniedValues() {
    return deniedValues;
  }

  public void setDeniedValues(List<String> deniedValues) {
    this.deniedValues = deniedValues;
  }


  public GoogleCloudOrgpolicyV1ListPolicy inheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
    return this;
  }

  /**
   * Determines the inheritance behavior for this &#x60;Policy&#x60;. By default, a &#x60;ListPolicy&#x60; set at a resource supersedes any &#x60;Policy&#x60; set anywhere up the resource hierarchy. However, if &#x60;inherit_from_parent&#x60; is set to &#x60;true&#x60;, then the values from the effective &#x60;Policy&#x60; of the parent resource are inherited, meaning the values set in this &#x60;Policy&#x60; are added to the values inherited up the hierarchy. Setting &#x60;Policy&#x60; hierarchies that inherit both allowed values and denied values isn&#39;t recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a &#x60;Policy&#x60; with &#x60;allowed_values&#x60; set that inherits a &#x60;Policy&#x60; with &#x60;denied_values&#x60; set. In this case, the values that are allowed must be in &#x60;allowed_values&#x60; and not present in &#x60;denied_values&#x60;. For example, suppose you have a &#x60;Constraint&#x60; &#x60;constraints/serviceuser.services&#x60;, which has a &#x60;constraint_type&#x60; of &#x60;list_constraint&#x60;, and with &#x60;constraint_default&#x60; set to &#x60;ALLOW&#x60;. Suppose that at the Organization level, a &#x60;Policy&#x60; is applied that restricts the allowed API activations to {&#x60;E1&#x60;, &#x60;E2&#x60;}. Then, if a &#x60;Policy&#x60; is applied to a project below the Organization that has &#x60;inherit_from_parent&#x60; set to &#x60;false&#x60; and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for &#x60;projects/bar&#x60; parented by &#x60;organizations/foo&#x60;: Example 1 (no inherited values): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values:\&quot;E2\&quot;} &#x60;projects/bar&#x60; has &#x60;inherit_from_parent&#x60; &#x60;false&#x60; and values: {allowed_values: \&quot;E3\&quot; allowed_values: \&quot;E4\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;E3&#x60;, and &#x60;E4&#x60;. Example 2 (inherited values): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values:\&quot;E2\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with values: {value: \&quot;E3\&quot; value: \&quot;E4\&quot; inherit_from_parent: true} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;, &#x60;E3&#x60;, and &#x60;E4&#x60;. Example 3 (inheriting both allowed and denied values): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values: \&quot;E2\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {denied_values: \&quot;E1\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The value accepted at &#x60;projects/bar&#x60; is &#x60;E2&#x60;. Example 4 (RestoreDefault): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values:\&quot;E2\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with values: {RestoreDefault: {}} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, &#x60;E2&#x60;. The accepted values at &#x60;projects/bar&#x60; are either all or none depending on the value of &#x60;constraint_default&#x60; (if &#x60;ALLOW&#x60;, all; if &#x60;DENY&#x60;, none). Example 5 (no policy inherits parent policy): &#x60;organizations/foo&#x60; has no &#x60;Policy&#x60; set. &#x60;projects/bar&#x60; has no &#x60;Policy&#x60; set. The accepted values at both levels are either all or none depending on the value of &#x60;constraint_default&#x60; (if &#x60;ALLOW&#x60;, all; if &#x60;DENY&#x60;, none). Example 6 (ListConstraint allowing all): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values: \&quot;E2\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {all: ALLOW} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, E2&#x60;. Any value is accepted at &#x60;projects/bar&#x60;. Example 7 (ListConstraint allowing none): &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;E1\&quot; allowed_values: \&quot;E2\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {all: DENY} The accepted values at &#x60;organizations/foo&#x60; are &#x60;E1&#x60;, E2&#x60;. No value is accepted at &#x60;projects/bar&#x60;. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1-&gt;{F1, F2}; F1-&gt;{P1}; F2-&gt;{P2, P3}, &#x60;organizations/foo&#x60; has a &#x60;Policy&#x60; with values: {allowed_values: \&quot;under:organizations/O1\&quot;} &#x60;projects/bar&#x60; has a &#x60;Policy&#x60; with: {allowed_values: \&quot;under:projects/P3\&quot;} {denied_values: \&quot;under:folders/F2\&quot;} The accepted values at &#x60;organizations/foo&#x60; are &#x60;organizations/O1&#x60;, &#x60;folders/F1&#x60;, &#x60;folders/F2&#x60;, &#x60;projects/P1&#x60;, &#x60;projects/P2&#x60;, &#x60;projects/P3&#x60;. The accepted values at &#x60;projects/bar&#x60; are &#x60;organizations/O1&#x60;, &#x60;folders/F1&#x60;, &#x60;projects/P1&#x60;.
   * @return inheritFromParent
   */
  @javax.annotation.Nullable
  public Boolean getInheritFromParent() {
    return inheritFromParent;
  }

  public void setInheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
  }


  public GoogleCloudOrgpolicyV1ListPolicy suggestedValue(String suggestedValue) {
    this.suggestedValue = suggestedValue;
    return this;
  }

  /**
   * Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this &#x60;Policy&#x60;. If &#x60;suggested_value&#x60; is not set, it will inherit the value specified higher in the hierarchy, unless &#x60;inherit_from_parent&#x60; is &#x60;false&#x60;.
   * @return suggestedValue
   */
  @javax.annotation.Nullable
  public String getSuggestedValue() {
    return suggestedValue;
  }

  public void setSuggestedValue(String suggestedValue) {
    this.suggestedValue = suggestedValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudOrgpolicyV1ListPolicy googleCloudOrgpolicyV1ListPolicy = (GoogleCloudOrgpolicyV1ListPolicy) o;
    return Objects.equals(this.allValues, googleCloudOrgpolicyV1ListPolicy.allValues) &&
        Objects.equals(this.allowedValues, googleCloudOrgpolicyV1ListPolicy.allowedValues) &&
        Objects.equals(this.deniedValues, googleCloudOrgpolicyV1ListPolicy.deniedValues) &&
        Objects.equals(this.inheritFromParent, googleCloudOrgpolicyV1ListPolicy.inheritFromParent) &&
        Objects.equals(this.suggestedValue, googleCloudOrgpolicyV1ListPolicy.suggestedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allValues, allowedValues, deniedValues, inheritFromParent, suggestedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudOrgpolicyV1ListPolicy {\n");
    sb.append("    allValues: ").append(toIndentedString(allValues)).append("\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    deniedValues: ").append(toIndentedString(deniedValues)).append("\n");
    sb.append("    inheritFromParent: ").append(toIndentedString(inheritFromParent)).append("\n");
    sb.append("    suggestedValue: ").append(toIndentedString(suggestedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allValues");
    openapiFields.add("allowedValues");
    openapiFields.add("deniedValues");
    openapiFields.add("inheritFromParent");
    openapiFields.add("suggestedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudOrgpolicyV1ListPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudOrgpolicyV1ListPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudOrgpolicyV1ListPolicy is not found in the empty JSON string", GoogleCloudOrgpolicyV1ListPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudOrgpolicyV1ListPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudOrgpolicyV1ListPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allValues") != null && !jsonObj.get("allValues").isJsonNull()) && !jsonObj.get("allValues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allValues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allValues").toString()));
      }
      // validate the optional field `allValues`
      if (jsonObj.get("allValues") != null && !jsonObj.get("allValues").isJsonNull()) {
        AllValuesEnum.validateJsonElement(jsonObj.get("allValues"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValues") != null && !jsonObj.get("allowedValues").isJsonNull() && !jsonObj.get("allowedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deniedValues") != null && !jsonObj.get("deniedValues").isJsonNull() && !jsonObj.get("deniedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedValues` to be an array in the JSON string but got `%s`", jsonObj.get("deniedValues").toString()));
      }
      if ((jsonObj.get("suggestedValue") != null && !jsonObj.get("suggestedValue").isJsonNull()) && !jsonObj.get("suggestedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestedValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudOrgpolicyV1ListPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudOrgpolicyV1ListPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudOrgpolicyV1ListPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudOrgpolicyV1ListPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudOrgpolicyV1ListPolicy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudOrgpolicyV1ListPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudOrgpolicyV1ListPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudOrgpolicyV1ListPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudOrgpolicyV1ListPolicy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudOrgpolicyV1ListPolicy
   */
  public static GoogleCloudOrgpolicyV1ListPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudOrgpolicyV1ListPolicy.class);
  }

  /**
   * Convert an instance of GoogleCloudOrgpolicyV1ListPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

