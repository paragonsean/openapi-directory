# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudOrgpolicyV1ListPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_values: str=None, allowed_values: List[str]=None, denied_values: List[str]=None, inherit_from_parent: bool=None, suggested_value: str=None):
        """GoogleCloudOrgpolicyV1ListPolicy - a model defined in OpenAPI

        :param all_values: The all_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :param allowed_values: The allowed_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :param denied_values: The denied_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :param inherit_from_parent: The inherit_from_parent of this GoogleCloudOrgpolicyV1ListPolicy.
        :param suggested_value: The suggested_value of this GoogleCloudOrgpolicyV1ListPolicy.
        """
        self.openapi_types = {
            'all_values': str,
            'allowed_values': List[str],
            'denied_values': List[str],
            'inherit_from_parent': bool,
            'suggested_value': str
        }

        self.attribute_map = {
            'all_values': 'allValues',
            'allowed_values': 'allowedValues',
            'denied_values': 'deniedValues',
            'inherit_from_parent': 'inheritFromParent',
            'suggested_value': 'suggestedValue'
        }

        self._all_values = all_values
        self._allowed_values = allowed_values
        self._denied_values = denied_values
        self._inherit_from_parent = inherit_from_parent
        self._suggested_value = suggested_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudOrgpolicyV1ListPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudOrgpolicyV1ListPolicy of this GoogleCloudOrgpolicyV1ListPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_values(self):
        """Gets the all_values of this GoogleCloudOrgpolicyV1ListPolicy.

        The policy all_values state.

        :return: The all_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :rtype: str
        """
        return self._all_values

    @all_values.setter
    def all_values(self, all_values):
        """Sets the all_values of this GoogleCloudOrgpolicyV1ListPolicy.

        The policy all_values state.

        :param all_values: The all_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :type all_values: str
        """
        allowed_values = ["ALL_VALUES_UNSPECIFIED", "ALLOW", "DENY"]  # noqa: E501
        if all_values not in allowed_values:
            raise ValueError(
                "Invalid value for `all_values` ({0}), must be one of {1}"
                .format(all_values, allowed_values)
            )

        self._all_values = all_values

    @property
    def allowed_values(self):
        """Gets the allowed_values of this GoogleCloudOrgpolicyV1ListPolicy.

        List of values allowed at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.

        :return: The allowed_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this GoogleCloudOrgpolicyV1ListPolicy.

        List of values allowed at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.

        :param allowed_values: The allowed_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def denied_values(self):
        """Gets the denied_values of this GoogleCloudOrgpolicyV1ListPolicy.

        List of values denied at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.

        :return: The denied_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :rtype: List[str]
        """
        return self._denied_values

    @denied_values.setter
    def denied_values(self, denied_values):
        """Sets the denied_values of this GoogleCloudOrgpolicyV1ListPolicy.

        List of values denied at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.

        :param denied_values: The denied_values of this GoogleCloudOrgpolicyV1ListPolicy.
        :type denied_values: List[str]
        """

        self._denied_values = denied_values

    @property
    def inherit_from_parent(self):
        """Gets the inherit_from_parent of this GoogleCloudOrgpolicyV1ListPolicy.

        Determines the inheritance behavior for this `Policy`. By default, a `ListPolicy` set at a resource supersedes any `Policy` set anywhere up the resource hierarchy. However, if `inherit_from_parent` is set to `true`, then the values from the effective `Policy` of the parent resource are inherited, meaning the values set in this `Policy` are added to the values inherited up the hierarchy. Setting `Policy` hierarchies that inherit both allowed values and denied values isn't recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a `Policy` with `allowed_values` set that inherits a `Policy` with `denied_values` set. In this case, the values that are allowed must be in `allowed_values` and not present in `denied_values`. For example, suppose you have a `Constraint` `constraints/serviceuser.services`, which has a `constraint_type` of `list_constraint`, and with `constraint_default` set to `ALLOW`. Suppose that at the Organization level, a `Policy` is applied that restricts the allowed API activations to {`E1`, `E2`}. Then, if a `Policy` is applied to a project below the Organization that has `inherit_from_parent` set to `false` and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for `projects/bar` parented by `organizations/foo`: Example 1 (no inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has `inherit_from_parent` `false` and values: {allowed_values: \"E3\" allowed_values: \"E4\"} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E3`, and `E4`. Example 2 (inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {value: \"E3\" value: \"E4\" inherit_from_parent: true} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`. Example 3 (inheriting both allowed and denied values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {denied_values: \"E1\"} The accepted values at `organizations/foo` are `E1`, `E2`. The value accepted at `projects/bar` is `E2`. Example 4 (RestoreDefault): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {RestoreDefault: {}} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 5 (no policy inherits parent policy): `organizations/foo` has no `Policy` set. `projects/bar` has no `Policy` set. The accepted values at both levels are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 6 (ListConstraint allowing all): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: ALLOW} The accepted values at `organizations/foo` are `E1`, E2`. Any value is accepted at `projects/bar`. Example 7 (ListConstraint allowing none): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: DENY} The accepted values at `organizations/foo` are `E1`, E2`. No value is accepted at `projects/bar`. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1->{F1, F2}; F1->{P1}; F2->{P2, P3}, `organizations/foo` has a `Policy` with values: {allowed_values: \"under:organizations/O1\"} `projects/bar` has a `Policy` with: {allowed_values: \"under:projects/P3\"} {denied_values: \"under:folders/F2\"} The accepted values at `organizations/foo` are `organizations/O1`, `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`, `projects/P3`. The accepted values at `projects/bar` are `organizations/O1`, `folders/F1`, `projects/P1`.

        :return: The inherit_from_parent of this GoogleCloudOrgpolicyV1ListPolicy.
        :rtype: bool
        """
        return self._inherit_from_parent

    @inherit_from_parent.setter
    def inherit_from_parent(self, inherit_from_parent):
        """Sets the inherit_from_parent of this GoogleCloudOrgpolicyV1ListPolicy.

        Determines the inheritance behavior for this `Policy`. By default, a `ListPolicy` set at a resource supersedes any `Policy` set anywhere up the resource hierarchy. However, if `inherit_from_parent` is set to `true`, then the values from the effective `Policy` of the parent resource are inherited, meaning the values set in this `Policy` are added to the values inherited up the hierarchy. Setting `Policy` hierarchies that inherit both allowed values and denied values isn't recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a `Policy` with `allowed_values` set that inherits a `Policy` with `denied_values` set. In this case, the values that are allowed must be in `allowed_values` and not present in `denied_values`. For example, suppose you have a `Constraint` `constraints/serviceuser.services`, which has a `constraint_type` of `list_constraint`, and with `constraint_default` set to `ALLOW`. Suppose that at the Organization level, a `Policy` is applied that restricts the allowed API activations to {`E1`, `E2`}. Then, if a `Policy` is applied to a project below the Organization that has `inherit_from_parent` set to `false` and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for `projects/bar` parented by `organizations/foo`: Example 1 (no inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has `inherit_from_parent` `false` and values: {allowed_values: \"E3\" allowed_values: \"E4\"} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E3`, and `E4`. Example 2 (inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {value: \"E3\" value: \"E4\" inherit_from_parent: true} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`. Example 3 (inheriting both allowed and denied values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {denied_values: \"E1\"} The accepted values at `organizations/foo` are `E1`, `E2`. The value accepted at `projects/bar` is `E2`. Example 4 (RestoreDefault): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {RestoreDefault: {}} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 5 (no policy inherits parent policy): `organizations/foo` has no `Policy` set. `projects/bar` has no `Policy` set. The accepted values at both levels are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 6 (ListConstraint allowing all): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: ALLOW} The accepted values at `organizations/foo` are `E1`, E2`. Any value is accepted at `projects/bar`. Example 7 (ListConstraint allowing none): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: DENY} The accepted values at `organizations/foo` are `E1`, E2`. No value is accepted at `projects/bar`. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1->{F1, F2}; F1->{P1}; F2->{P2, P3}, `organizations/foo` has a `Policy` with values: {allowed_values: \"under:organizations/O1\"} `projects/bar` has a `Policy` with: {allowed_values: \"under:projects/P3\"} {denied_values: \"under:folders/F2\"} The accepted values at `organizations/foo` are `organizations/O1`, `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`, `projects/P3`. The accepted values at `projects/bar` are `organizations/O1`, `folders/F1`, `projects/P1`.

        :param inherit_from_parent: The inherit_from_parent of this GoogleCloudOrgpolicyV1ListPolicy.
        :type inherit_from_parent: bool
        """

        self._inherit_from_parent = inherit_from_parent

    @property
    def suggested_value(self):
        """Gets the suggested_value of this GoogleCloudOrgpolicyV1ListPolicy.

        Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Policy`. If `suggested_value` is not set, it will inherit the value specified higher in the hierarchy, unless `inherit_from_parent` is `false`.

        :return: The suggested_value of this GoogleCloudOrgpolicyV1ListPolicy.
        :rtype: str
        """
        return self._suggested_value

    @suggested_value.setter
    def suggested_value(self, suggested_value):
        """Sets the suggested_value of this GoogleCloudOrgpolicyV1ListPolicy.

        Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Policy`. If `suggested_value` is not set, it will inherit the value specified higher in the hierarchy, unless `inherit_from_parent` is `false`.

        :param suggested_value: The suggested_value of this GoogleCloudOrgpolicyV1ListPolicy.
        :type suggested_value: str
        """

        self._suggested_value = suggested_value
