/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p7beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudOrgpolicyV1ListPolicy model module.
 * @module model/GoogleCloudOrgpolicyV1ListPolicy
 * @version v1p7beta1
 */
class GoogleCloudOrgpolicyV1ListPolicy {
    /**
     * Constructs a new <code>GoogleCloudOrgpolicyV1ListPolicy</code>.
     * Used in &#x60;policy_type&#x60; to specify how &#x60;list_policy&#x60; behaves at this resource. &#x60;ListPolicy&#x60; can define specific values and subtrees of Cloud Resource Manager resource hierarchy (&#x60;Organizations&#x60;, &#x60;Folders&#x60;, &#x60;Projects&#x60;) that are allowed or denied by setting the &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; fields. This is achieved by using the &#x60;under:&#x60; and optional &#x60;is:&#x60; prefixes. The &#x60;under:&#x60; prefix is used to denote resource subtree values. The &#x60;is:&#x60; prefix is used to denote specific values, and is required only if the value contains a \&quot;:\&quot;. Values prefixed with \&quot;is:\&quot; are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - \&quot;projects/\&quot;, e.g. \&quot;projects/tokyo-rain-123\&quot; - \&quot;folders/\&quot;, e.g. \&quot;folders/1234\&quot; - \&quot;organizations/\&quot;, e.g. \&quot;organizations/1234\&quot; The &#x60;supports_under&#x60; field of the associated &#x60;Constraint&#x60; defines whether ancestry prefixes can be used. You can set &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; in the same &#x60;Policy&#x60; if &#x60;all_values&#x60; is &#x60;ALL_VALUES_UNSPECIFIED&#x60;. &#x60;ALLOW&#x60; or &#x60;DENY&#x60; are used to allow or deny all values. If &#x60;all_values&#x60; is set to either &#x60;ALLOW&#x60; or &#x60;DENY&#x60;, &#x60;allowed_values&#x60; and &#x60;denied_values&#x60; must be unset.
     * @alias module:model/GoogleCloudOrgpolicyV1ListPolicy
     */
    constructor() { 
        
        GoogleCloudOrgpolicyV1ListPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudOrgpolicyV1ListPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudOrgpolicyV1ListPolicy} obj Optional instance to populate.
     * @return {module:model/GoogleCloudOrgpolicyV1ListPolicy} The populated <code>GoogleCloudOrgpolicyV1ListPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudOrgpolicyV1ListPolicy();

            if (data.hasOwnProperty('allValues')) {
                obj['allValues'] = ApiClient.convertToType(data['allValues'], 'String');
            }
            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], ['String']);
            }
            if (data.hasOwnProperty('deniedValues')) {
                obj['deniedValues'] = ApiClient.convertToType(data['deniedValues'], ['String']);
            }
            if (data.hasOwnProperty('inheritFromParent')) {
                obj['inheritFromParent'] = ApiClient.convertToType(data['inheritFromParent'], 'Boolean');
            }
            if (data.hasOwnProperty('suggestedValue')) {
                obj['suggestedValue'] = ApiClient.convertToType(data['suggestedValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudOrgpolicyV1ListPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudOrgpolicyV1ListPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allValues'] && !(typeof data['allValues'] === 'string' || data['allValues'] instanceof String)) {
            throw new Error("Expected the field `allValues` to be a primitive type in the JSON string but got " + data['allValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deniedValues'])) {
            throw new Error("Expected the field `deniedValues` to be an array in the JSON data but got " + data['deniedValues']);
        }
        // ensure the json data is a string
        if (data['suggestedValue'] && !(typeof data['suggestedValue'] === 'string' || data['suggestedValue'] instanceof String)) {
            throw new Error("Expected the field `suggestedValue` to be a primitive type in the JSON string but got " + data['suggestedValue']);
        }

        return true;
    }


}



/**
 * The policy all_values state.
 * @member {module:model/GoogleCloudOrgpolicyV1ListPolicy.AllValuesEnum} allValues
 */
GoogleCloudOrgpolicyV1ListPolicy.prototype['allValues'] = undefined;

/**
 * List of values allowed at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
 * @member {Array.<String>} allowedValues
 */
GoogleCloudOrgpolicyV1ListPolicy.prototype['allowedValues'] = undefined;

/**
 * List of values denied at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
 * @member {Array.<String>} deniedValues
 */
GoogleCloudOrgpolicyV1ListPolicy.prototype['deniedValues'] = undefined;

/**
 * Determines the inheritance behavior for this `Policy`. By default, a `ListPolicy` set at a resource supersedes any `Policy` set anywhere up the resource hierarchy. However, if `inherit_from_parent` is set to `true`, then the values from the effective `Policy` of the parent resource are inherited, meaning the values set in this `Policy` are added to the values inherited up the hierarchy. Setting `Policy` hierarchies that inherit both allowed values and denied values isn't recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a `Policy` with `allowed_values` set that inherits a `Policy` with `denied_values` set. In this case, the values that are allowed must be in `allowed_values` and not present in `denied_values`. For example, suppose you have a `Constraint` `constraints/serviceuser.services`, which has a `constraint_type` of `list_constraint`, and with `constraint_default` set to `ALLOW`. Suppose that at the Organization level, a `Policy` is applied that restricts the allowed API activations to {`E1`, `E2`}. Then, if a `Policy` is applied to a project below the Organization that has `inherit_from_parent` set to `false` and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for `projects/bar` parented by `organizations/foo`: Example 1 (no inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has `inherit_from_parent` `false` and values: {allowed_values: \"E3\" allowed_values: \"E4\"} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E3`, and `E4`. Example 2 (inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {value: \"E3\" value: \"E4\" inherit_from_parent: true} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`. Example 3 (inheriting both allowed and denied values): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {denied_values: \"E1\"} The accepted values at `organizations/foo` are `E1`, `E2`. The value accepted at `projects/bar` is `E2`. Example 4 (RestoreDefault): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values:\"E2\"} `projects/bar` has a `Policy` with values: {RestoreDefault: {}} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 5 (no policy inherits parent policy): `organizations/foo` has no `Policy` set. `projects/bar` has no `Policy` set. The accepted values at both levels are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 6 (ListConstraint allowing all): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: ALLOW} The accepted values at `organizations/foo` are `E1`, E2`. Any value is accepted at `projects/bar`. Example 7 (ListConstraint allowing none): `organizations/foo` has a `Policy` with values: {allowed_values: \"E1\" allowed_values: \"E2\"} `projects/bar` has a `Policy` with: {all: DENY} The accepted values at `organizations/foo` are `E1`, E2`. No value is accepted at `projects/bar`. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1->{F1, F2}; F1->{P1}; F2->{P2, P3}, `organizations/foo` has a `Policy` with values: {allowed_values: \"under:organizations/O1\"} `projects/bar` has a `Policy` with: {allowed_values: \"under:projects/P3\"} {denied_values: \"under:folders/F2\"} The accepted values at `organizations/foo` are `organizations/O1`, `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`, `projects/P3`. The accepted values at `projects/bar` are `organizations/O1`, `folders/F1`, `projects/P1`.
 * @member {Boolean} inheritFromParent
 */
GoogleCloudOrgpolicyV1ListPolicy.prototype['inheritFromParent'] = undefined;

/**
 * Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Policy`. If `suggested_value` is not set, it will inherit the value specified higher in the hierarchy, unless `inherit_from_parent` is `false`.
 * @member {String} suggestedValue
 */
GoogleCloudOrgpolicyV1ListPolicy.prototype['suggestedValue'] = undefined;





/**
 * Allowed values for the <code>allValues</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudOrgpolicyV1ListPolicy['AllValuesEnum'] = {

    /**
     * value: "ALL_VALUES_UNSPECIFIED"
     * @const
     */
    "ALL_VALUES_UNSPECIFIED": "ALL_VALUES_UNSPECIFIED",

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW",

    /**
     * value: "DENY"
     * @const
     */
    "DENY": "DENY"
};



export default GoogleCloudOrgpolicyV1ListPolicy;

