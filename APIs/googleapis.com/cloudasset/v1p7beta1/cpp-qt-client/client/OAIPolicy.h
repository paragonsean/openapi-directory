/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p7beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicy.h
 *
 * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A &#x60;Policy&#x60; is a collection of &#x60;bindings&#x60;. A &#x60;binding&#x60; binds one or more &#x60;members&#x60;, or principals, to a single &#x60;role&#x60;. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A &#x60;role&#x60; is a named list of permissions; each &#x60;role&#x60; can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a &#x60;binding&#x60; can also specify a &#x60;condition&#x60;, which is a logical expression that allows access to a resource only if the expression evaluates to &#x60;true&#x60;. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** &#x60;&#x60;&#x60; { \&quot;bindings\&quot;: [ { \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationAdmin\&quot;, \&quot;members\&quot;: [ \&quot;user:mike@example.com\&quot;, \&quot;group:admins@example.com\&quot;, \&quot;domain:google.com\&quot;, \&quot;serviceAccount:my-project-id@appspot.gserviceaccount.com\&quot; ] }, { \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationViewer\&quot;, \&quot;members\&quot;: [ \&quot;user:eve@example.com\&quot; ], \&quot;condition\&quot;: { \&quot;title\&quot;: \&quot;expirable access\&quot;, \&quot;description\&quot;: \&quot;Does not grant access after Sep 2020\&quot;, \&quot;expression\&quot;: \&quot;request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)\&quot;, } } ], \&quot;etag\&quot;: \&quot;BwWWja0YfJA&#x3D;\&quot;, \&quot;version\&quot;: 3 } &#x60;&#x60;&#x60; **YAML example:** &#x60;&#x60;&#x60; bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;) etag: BwWWja0YfJA&#x3D; version: 3 &#x60;&#x60;&#x60; For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
 */

#ifndef OAIPolicy_H
#define OAIPolicy_H

#include <QJsonObject>

#include "OAIAuditConfig.h"
#include "OAIBinding.h"
#include <QByteArray>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuditConfig;
class OAIBinding;

class OAIPolicy : public OAIObject {
public:
    OAIPolicy();
    OAIPolicy(QString json);
    ~OAIPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAuditConfig> getAuditConfigs() const;
    void setAuditConfigs(const QList<OAIAuditConfig> &audit_configs);
    bool is_audit_configs_Set() const;
    bool is_audit_configs_Valid() const;

    QList<OAIBinding> getBindings() const;
    void setBindings(const QList<OAIBinding> &bindings);
    bool is_bindings_Set() const;
    bool is_bindings_Valid() const;

    QByteArray getEtag() const;
    void setEtag(const QByteArray &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAuditConfig> m_audit_configs;
    bool m_audit_configs_isSet;
    bool m_audit_configs_isValid;

    QList<OAIBinding> m_bindings;
    bool m_bindings_isSet;
    bool m_bindings_isValid;

    QByteArray m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicy)

#endif // OAIPolicy_H
