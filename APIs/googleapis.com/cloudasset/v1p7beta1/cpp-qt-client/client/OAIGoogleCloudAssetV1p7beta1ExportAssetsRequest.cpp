/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p7beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::~OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest() {}

void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::initializeModel() {

    m_asset_types_isSet = false;
    m_asset_types_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_relationship_types_isSet = false;
    m_relationship_types_isValid = false;
}

void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::fromJsonObject(QJsonObject json) {

    m_asset_types_isValid = ::OpenAPI::fromJsonValue(m_asset_types, json[QString("assetTypes")]);
    m_asset_types_isSet = !json[QString("assetTypes")].isNull() && m_asset_types_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_relationship_types_isValid = ::OpenAPI::fromJsonValue(m_relationship_types, json[QString("relationshipTypes")]);
    m_relationship_types_isSet = !json[QString("relationshipTypes")].isNull() && m_relationship_types_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_types.size() > 0) {
        obj.insert(QString("assetTypes"), ::OpenAPI::toJsonValue(m_asset_types));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_relationship_types.size() > 0) {
        obj.insert(QString("relationshipTypes"), ::OpenAPI::toJsonValue(m_relationship_types));
    }
    return obj;
}

QList<QString> OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::getAssetTypes() const {
    return m_asset_types;
}
void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::setAssetTypes(const QList<QString> &asset_types) {
    m_asset_types = asset_types;
    m_asset_types_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_asset_types_Set() const{
    return m_asset_types_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_asset_types_Valid() const{
    return m_asset_types_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::getContentType() const {
    return m_content_type;
}
void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIGoogleCloudAssetV1p7beta1OutputConfig OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::setOutputConfig(const OAIGoogleCloudAssetV1p7beta1OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::getReadTime() const {
    return m_read_time;
}
void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_read_time_Valid() const{
    return m_read_time_isValid;
}

QList<QString> OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::getRelationshipTypes() const {
    return m_relationship_types;
}
void OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::setRelationshipTypes(const QList<QString> &relationship_types) {
    m_relationship_types = relationship_types;
    m_relationship_types_isSet = true;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_relationship_types_Set() const{
    return m_relationship_types_isSet;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::is_relationship_types_Valid() const{
    return m_relationship_types_isValid;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1p7beta1ExportAssetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
