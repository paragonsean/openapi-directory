/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p7beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleIdentityAccesscontextmanagerV1Condition.h
 *
 * A condition necessary for an &#x60;AccessLevel&#x60; to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.
 */

#ifndef OAIGoogleIdentityAccesscontextmanagerV1Condition_H
#define OAIGoogleIdentityAccesscontextmanagerV1Condition_H

#include <QJsonObject>

#include "OAIGoogleIdentityAccesscontextmanagerV1DevicePolicy.h"
#include "OAIGoogleIdentityAccesscontextmanagerV1VpcNetworkSource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleIdentityAccesscontextmanagerV1DevicePolicy;
class OAIGoogleIdentityAccesscontextmanagerV1VpcNetworkSource;

class OAIGoogleIdentityAccesscontextmanagerV1Condition : public OAIObject {
public:
    OAIGoogleIdentityAccesscontextmanagerV1Condition();
    OAIGoogleIdentityAccesscontextmanagerV1Condition(QString json);
    ~OAIGoogleIdentityAccesscontextmanagerV1Condition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGoogleIdentityAccesscontextmanagerV1DevicePolicy getDevicePolicy() const;
    void setDevicePolicy(const OAIGoogleIdentityAccesscontextmanagerV1DevicePolicy &device_policy);
    bool is_device_policy_Set() const;
    bool is_device_policy_Valid() const;

    QList<QString> getIpSubnetworks() const;
    void setIpSubnetworks(const QList<QString> &ip_subnetworks);
    bool is_ip_subnetworks_Set() const;
    bool is_ip_subnetworks_Valid() const;

    QList<QString> getMembers() const;
    void setMembers(const QList<QString> &members);
    bool is_members_Set() const;
    bool is_members_Valid() const;

    bool isNegate() const;
    void setNegate(const bool &negate);
    bool is_negate_Set() const;
    bool is_negate_Valid() const;

    QList<QString> getRegions() const;
    void setRegions(const QList<QString> &regions);
    bool is_regions_Set() const;
    bool is_regions_Valid() const;

    QList<QString> getRequiredAccessLevels() const;
    void setRequiredAccessLevels(const QList<QString> &required_access_levels);
    bool is_required_access_levels_Set() const;
    bool is_required_access_levels_Valid() const;

    QList<OAIGoogleIdentityAccesscontextmanagerV1VpcNetworkSource> getVpcNetworkSources() const;
    void setVpcNetworkSources(const QList<OAIGoogleIdentityAccesscontextmanagerV1VpcNetworkSource> &vpc_network_sources);
    bool is_vpc_network_sources_Set() const;
    bool is_vpc_network_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGoogleIdentityAccesscontextmanagerV1DevicePolicy m_device_policy;
    bool m_device_policy_isSet;
    bool m_device_policy_isValid;

    QList<QString> m_ip_subnetworks;
    bool m_ip_subnetworks_isSet;
    bool m_ip_subnetworks_isValid;

    QList<QString> m_members;
    bool m_members_isSet;
    bool m_members_isValid;

    bool m_negate;
    bool m_negate_isSet;
    bool m_negate_isValid;

    QList<QString> m_regions;
    bool m_regions_isSet;
    bool m_regions_isValid;

    QList<QString> m_required_access_levels;
    bool m_required_access_levels_isSet;
    bool m_required_access_levels_isValid;

    QList<OAIGoogleIdentityAccesscontextmanagerV1VpcNetworkSource> m_vpc_network_sources;
    bool m_vpc_network_sources_isSet;
    bool m_vpc_network_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleIdentityAccesscontextmanagerV1Condition)

#endif // OAIGoogleIdentityAccesscontextmanagerV1Condition_H
