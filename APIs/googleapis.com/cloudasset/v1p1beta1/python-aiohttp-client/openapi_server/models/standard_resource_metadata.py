# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StandardResourceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_attributes: List[str]=None, asset_type: str=None, description: str=None, display_name: str=None, labels: Dict[str, str]=None, location: str=None, name: str=None, network_tags: List[str]=None, project: str=None):
        """StandardResourceMetadata - a model defined in OpenAPI

        :param additional_attributes: The additional_attributes of this StandardResourceMetadata.
        :param asset_type: The asset_type of this StandardResourceMetadata.
        :param description: The description of this StandardResourceMetadata.
        :param display_name: The display_name of this StandardResourceMetadata.
        :param labels: The labels of this StandardResourceMetadata.
        :param location: The location of this StandardResourceMetadata.
        :param name: The name of this StandardResourceMetadata.
        :param network_tags: The network_tags of this StandardResourceMetadata.
        :param project: The project of this StandardResourceMetadata.
        """
        self.openapi_types = {
            'additional_attributes': List[str],
            'asset_type': str,
            'description': str,
            'display_name': str,
            'labels': Dict[str, str],
            'location': str,
            'name': str,
            'network_tags': List[str],
            'project': str
        }

        self.attribute_map = {
            'additional_attributes': 'additionalAttributes',
            'asset_type': 'assetType',
            'description': 'description',
            'display_name': 'displayName',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'network_tags': 'networkTags',
            'project': 'project'
        }

        self._additional_attributes = additional_attributes
        self._asset_type = asset_type
        self._description = description
        self._display_name = display_name
        self._labels = labels
        self._location = location
        self._name = name
        self._network_tags = network_tags
        self._project = project

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StandardResourceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StandardResourceMetadata of this StandardResourceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this StandardResourceMetadata.

        Additional searchable attributes of this resource. Informational only. The exact set of attributes is subject to change. For example: project id, DNS name etc.

        :return: The additional_attributes of this StandardResourceMetadata.
        :rtype: List[str]
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this StandardResourceMetadata.

        Additional searchable attributes of this resource. Informational only. The exact set of attributes is subject to change. For example: project id, DNS name etc.

        :param additional_attributes: The additional_attributes of this StandardResourceMetadata.
        :type additional_attributes: List[str]
        """

        self._additional_attributes = additional_attributes

    @property
    def asset_type(self):
        """Gets the asset_type of this StandardResourceMetadata.

        The type of this resource. For example: \"compute.googleapis.com/Disk\".

        :return: The asset_type of this StandardResourceMetadata.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this StandardResourceMetadata.

        The type of this resource. For example: \"compute.googleapis.com/Disk\".

        :param asset_type: The asset_type of this StandardResourceMetadata.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def description(self):
        """Gets the description of this StandardResourceMetadata.

        One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.

        :return: The description of this StandardResourceMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StandardResourceMetadata.

        One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.

        :param description: The description of this StandardResourceMetadata.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this StandardResourceMetadata.

        The display name of this resource.

        :return: The display_name of this StandardResourceMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StandardResourceMetadata.

        The display name of this resource.

        :param display_name: The display_name of this StandardResourceMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this StandardResourceMetadata.

        Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.

        :return: The labels of this StandardResourceMetadata.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this StandardResourceMetadata.

        Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.

        :param labels: The labels of this StandardResourceMetadata.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this StandardResourceMetadata.

        Location can be \"global\", regional like \"us-east1\", or zonal like \"us-west1-b\".

        :return: The location of this StandardResourceMetadata.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StandardResourceMetadata.

        Location can be \"global\", regional like \"us-east1\", or zonal like \"us-west1-b\".

        :param location: The location of this StandardResourceMetadata.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this StandardResourceMetadata.

        The full resource name. For example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.

        :return: The name of this StandardResourceMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StandardResourceMetadata.

        The full resource name. For example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.

        :param name: The name of this StandardResourceMetadata.
        :type name: str
        """

        self._name = name

    @property
    def network_tags(self):
        """Gets the network_tags of this StandardResourceMetadata.

        Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.

        :return: The network_tags of this StandardResourceMetadata.
        :rtype: List[str]
        """
        return self._network_tags

    @network_tags.setter
    def network_tags(self, network_tags):
        """Sets the network_tags of this StandardResourceMetadata.

        Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.

        :param network_tags: The network_tags of this StandardResourceMetadata.
        :type network_tags: List[str]
        """

        self._network_tags = network_tags

    @property
    def project(self):
        """Gets the project of this StandardResourceMetadata.

        The project that this resource belongs to, in the form of `projects/{project_number}`.

        :return: The project of this StandardResourceMetadata.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this StandardResourceMetadata.

        The project that this resource belongs to, in the form of `projects/{project_number}`.

        :param project: The project of this StandardResourceMetadata.
        :type project: str
        """

        self._project = project
