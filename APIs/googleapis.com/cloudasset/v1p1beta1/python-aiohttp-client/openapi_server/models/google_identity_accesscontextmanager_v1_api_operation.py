# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_identity_accesscontextmanager_v1_method_selector import GoogleIdentityAccesscontextmanagerV1MethodSelector
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1ApiOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method_selectors: List[GoogleIdentityAccesscontextmanagerV1MethodSelector]=None, service_name: str=None):
        """GoogleIdentityAccesscontextmanagerV1ApiOperation - a model defined in OpenAPI

        :param method_selectors: The method_selectors of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        :param service_name: The service_name of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        """
        self.openapi_types = {
            'method_selectors': List[GoogleIdentityAccesscontextmanagerV1MethodSelector],
            'service_name': str
        }

        self.attribute_map = {
            'method_selectors': 'methodSelectors',
            'service_name': 'serviceName'
        }

        self._method_selectors = method_selectors
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1ApiOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1ApiOperation of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method_selectors(self):
        """Gets the method_selectors of this GoogleIdentityAccesscontextmanagerV1ApiOperation.

        API methods or permissions to allow. Method or permission must belong to the service specified by `service_name` field. A single MethodSelector entry with `*` specified for the `method` field will allow all methods AND permissions for the service specified in `service_name`.

        :return: The method_selectors of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        :rtype: List[GoogleIdentityAccesscontextmanagerV1MethodSelector]
        """
        return self._method_selectors

    @method_selectors.setter
    def method_selectors(self, method_selectors):
        """Sets the method_selectors of this GoogleIdentityAccesscontextmanagerV1ApiOperation.

        API methods or permissions to allow. Method or permission must belong to the service specified by `service_name` field. A single MethodSelector entry with `*` specified for the `method` field will allow all methods AND permissions for the service specified in `service_name`.

        :param method_selectors: The method_selectors of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        :type method_selectors: List[GoogleIdentityAccesscontextmanagerV1MethodSelector]
        """

        self._method_selectors = method_selectors

    @property
    def service_name(self):
        """Gets the service_name of this GoogleIdentityAccesscontextmanagerV1ApiOperation.

        The name of the API whose methods or permissions the IngressPolicy or EgressPolicy want to allow. A single ApiOperation with `service_name` field set to `*` will allow all methods AND permissions for all services.

        :return: The service_name of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this GoogleIdentityAccesscontextmanagerV1ApiOperation.

        The name of the API whose methods or permissions the IngressPolicy or EgressPolicy want to allow. A single ApiOperation with `service_name` field set to `*` will allow all methods AND permissions for all services.

        :param service_name: The service_name of this GoogleIdentityAccesscontextmanagerV1ApiOperation.
        :type service_name: str
        """

        self._service_name = service_name
