/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardResourceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardResourceMetadata::OAIStandardResourceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardResourceMetadata::OAIStandardResourceMetadata() {
    this->initializeModel();
}

OAIStandardResourceMetadata::~OAIStandardResourceMetadata() {}

void OAIStandardResourceMetadata::initializeModel() {

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIStandardResourceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandardResourceMetadata::fromJsonObject(QJsonObject json) {

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("additionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("additionalAttributes")].isNull() && m_additional_attributes_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIStandardResourceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandardResourceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_attributes.size() > 0) {
        obj.insert(QString("additionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

QList<QString> OAIStandardResourceMetadata::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAIStandardResourceMetadata::setAdditionalAttributes(const QList<QString> &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAIStandardResourceMetadata::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAIStandardResourceMetadata::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

QString OAIStandardResourceMetadata::getAssetType() const {
    return m_asset_type;
}
void OAIStandardResourceMetadata::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIStandardResourceMetadata::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIStandardResourceMetadata::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIStandardResourceMetadata::getDescription() const {
    return m_description;
}
void OAIStandardResourceMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStandardResourceMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStandardResourceMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStandardResourceMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIStandardResourceMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIStandardResourceMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIStandardResourceMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QString> OAIStandardResourceMetadata::getLabels() const {
    return m_labels;
}
void OAIStandardResourceMetadata::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIStandardResourceMetadata::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIStandardResourceMetadata::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIStandardResourceMetadata::getLocation() const {
    return m_location;
}
void OAIStandardResourceMetadata::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIStandardResourceMetadata::is_location_Set() const{
    return m_location_isSet;
}

bool OAIStandardResourceMetadata::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIStandardResourceMetadata::getName() const {
    return m_name;
}
void OAIStandardResourceMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStandardResourceMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStandardResourceMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIStandardResourceMetadata::getNetworkTags() const {
    return m_network_tags;
}
void OAIStandardResourceMetadata::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIStandardResourceMetadata::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIStandardResourceMetadata::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

QString OAIStandardResourceMetadata::getProject() const {
    return m_project;
}
void OAIStandardResourceMetadata::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIStandardResourceMetadata::is_project_Set() const{
    return m_project_isSet;
}

bool OAIStandardResourceMetadata::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIStandardResourceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandardResourceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
