/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudOrgpolicyV1ListPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudOrgpolicyV1ListPolicy::OAIGoogleCloudOrgpolicyV1ListPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudOrgpolicyV1ListPolicy::OAIGoogleCloudOrgpolicyV1ListPolicy() {
    this->initializeModel();
}

OAIGoogleCloudOrgpolicyV1ListPolicy::~OAIGoogleCloudOrgpolicyV1ListPolicy() {}

void OAIGoogleCloudOrgpolicyV1ListPolicy::initializeModel() {

    m_all_values_isSet = false;
    m_all_values_isValid = false;

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_denied_values_isSet = false;
    m_denied_values_isValid = false;

    m_inherit_from_parent_isSet = false;
    m_inherit_from_parent_isValid = false;

    m_suggested_value_isSet = false;
    m_suggested_value_isValid = false;
}

void OAIGoogleCloudOrgpolicyV1ListPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudOrgpolicyV1ListPolicy::fromJsonObject(QJsonObject json) {

    m_all_values_isValid = ::OpenAPI::fromJsonValue(m_all_values, json[QString("allValues")]);
    m_all_values_isSet = !json[QString("allValues")].isNull() && m_all_values_isValid;

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_denied_values_isValid = ::OpenAPI::fromJsonValue(m_denied_values, json[QString("deniedValues")]);
    m_denied_values_isSet = !json[QString("deniedValues")].isNull() && m_denied_values_isValid;

    m_inherit_from_parent_isValid = ::OpenAPI::fromJsonValue(m_inherit_from_parent, json[QString("inheritFromParent")]);
    m_inherit_from_parent_isSet = !json[QString("inheritFromParent")].isNull() && m_inherit_from_parent_isValid;

    m_suggested_value_isValid = ::OpenAPI::fromJsonValue(m_suggested_value, json[QString("suggestedValue")]);
    m_suggested_value_isSet = !json[QString("suggestedValue")].isNull() && m_suggested_value_isValid;
}

QString OAIGoogleCloudOrgpolicyV1ListPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudOrgpolicyV1ListPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_all_values_isSet) {
        obj.insert(QString("allValues"), ::OpenAPI::toJsonValue(m_all_values));
    }
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_denied_values.size() > 0) {
        obj.insert(QString("deniedValues"), ::OpenAPI::toJsonValue(m_denied_values));
    }
    if (m_inherit_from_parent_isSet) {
        obj.insert(QString("inheritFromParent"), ::OpenAPI::toJsonValue(m_inherit_from_parent));
    }
    if (m_suggested_value_isSet) {
        obj.insert(QString("suggestedValue"), ::OpenAPI::toJsonValue(m_suggested_value));
    }
    return obj;
}

QString OAIGoogleCloudOrgpolicyV1ListPolicy::getAllValues() const {
    return m_all_values;
}
void OAIGoogleCloudOrgpolicyV1ListPolicy::setAllValues(const QString &all_values) {
    m_all_values = all_values;
    m_all_values_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_all_values_Set() const{
    return m_all_values_isSet;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_all_values_Valid() const{
    return m_all_values_isValid;
}

QList<QString> OAIGoogleCloudOrgpolicyV1ListPolicy::getAllowedValues() const {
    return m_allowed_values;
}
void OAIGoogleCloudOrgpolicyV1ListPolicy::setAllowedValues(const QList<QString> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QList<QString> OAIGoogleCloudOrgpolicyV1ListPolicy::getDeniedValues() const {
    return m_denied_values;
}
void OAIGoogleCloudOrgpolicyV1ListPolicy::setDeniedValues(const QList<QString> &denied_values) {
    m_denied_values = denied_values;
    m_denied_values_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_denied_values_Set() const{
    return m_denied_values_isSet;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_denied_values_Valid() const{
    return m_denied_values_isValid;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::isInheritFromParent() const {
    return m_inherit_from_parent;
}
void OAIGoogleCloudOrgpolicyV1ListPolicy::setInheritFromParent(const bool &inherit_from_parent) {
    m_inherit_from_parent = inherit_from_parent;
    m_inherit_from_parent_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_inherit_from_parent_Set() const{
    return m_inherit_from_parent_isSet;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_inherit_from_parent_Valid() const{
    return m_inherit_from_parent_isValid;
}

QString OAIGoogleCloudOrgpolicyV1ListPolicy::getSuggestedValue() const {
    return m_suggested_value;
}
void OAIGoogleCloudOrgpolicyV1ListPolicy::setSuggestedValue(const QString &suggested_value) {
    m_suggested_value = suggested_value;
    m_suggested_value_isSet = true;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_suggested_value_Set() const{
    return m_suggested_value_isSet;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::is_suggested_value_Valid() const{
    return m_suggested_value_isValid;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_denied_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_from_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudOrgpolicyV1ListPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
