/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleIdentityAccesscontextmanagerV1DevicePolicy from './GoogleIdentityAccesscontextmanagerV1DevicePolicy';
import GoogleIdentityAccesscontextmanagerV1VpcNetworkSource from './GoogleIdentityAccesscontextmanagerV1VpcNetworkSource';

/**
 * The GoogleIdentityAccesscontextmanagerV1Condition model module.
 * @module model/GoogleIdentityAccesscontextmanagerV1Condition
 * @version v1p1beta1
 */
class GoogleIdentityAccesscontextmanagerV1Condition {
    /**
     * Constructs a new <code>GoogleIdentityAccesscontextmanagerV1Condition</code>.
     * A condition necessary for an &#x60;AccessLevel&#x60; to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.
     * @alias module:model/GoogleIdentityAccesscontextmanagerV1Condition
     */
    constructor() { 
        
        GoogleIdentityAccesscontextmanagerV1Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIdentityAccesscontextmanagerV1Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIdentityAccesscontextmanagerV1Condition} obj Optional instance to populate.
     * @return {module:model/GoogleIdentityAccesscontextmanagerV1Condition} The populated <code>GoogleIdentityAccesscontextmanagerV1Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIdentityAccesscontextmanagerV1Condition();

            if (data.hasOwnProperty('devicePolicy')) {
                obj['devicePolicy'] = GoogleIdentityAccesscontextmanagerV1DevicePolicy.constructFromObject(data['devicePolicy']);
            }
            if (data.hasOwnProperty('ipSubnetworks')) {
                obj['ipSubnetworks'] = ApiClient.convertToType(data['ipSubnetworks'], ['String']);
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], ['String']);
            }
            if (data.hasOwnProperty('negate')) {
                obj['negate'] = ApiClient.convertToType(data['negate'], 'Boolean');
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
            }
            if (data.hasOwnProperty('requiredAccessLevels')) {
                obj['requiredAccessLevels'] = ApiClient.convertToType(data['requiredAccessLevels'], ['String']);
            }
            if (data.hasOwnProperty('vpcNetworkSources')) {
                obj['vpcNetworkSources'] = ApiClient.convertToType(data['vpcNetworkSources'], [GoogleIdentityAccesscontextmanagerV1VpcNetworkSource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIdentityAccesscontextmanagerV1Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIdentityAccesscontextmanagerV1Condition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `devicePolicy`
        if (data['devicePolicy']) { // data not null
          GoogleIdentityAccesscontextmanagerV1DevicePolicy.validateJSON(data['devicePolicy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipSubnetworks'])) {
            throw new Error("Expected the field `ipSubnetworks` to be an array in the JSON data but got " + data['ipSubnetworks']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['members'])) {
            throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['regions'])) {
            throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requiredAccessLevels'])) {
            throw new Error("Expected the field `requiredAccessLevels` to be an array in the JSON data but got " + data['requiredAccessLevels']);
        }
        if (data['vpcNetworkSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vpcNetworkSources'])) {
                throw new Error("Expected the field `vpcNetworkSources` to be an array in the JSON data but got " + data['vpcNetworkSources']);
            }
            // validate the optional field `vpcNetworkSources` (array)
            for (const item of data['vpcNetworkSources']) {
                GoogleIdentityAccesscontextmanagerV1VpcNetworkSource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy} devicePolicy
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['devicePolicy'] = undefined;

/**
 * CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.
 * @member {Array.<String>} ipSubnetworks
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['ipSubnetworks'] = undefined;

/**
 * The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.
 * @member {Array.<String>} members
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['members'] = undefined;

/**
 * Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.
 * @member {Boolean} negate
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['negate'] = undefined;

/**
 * The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.
 * @member {Array.<String>} regions
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['regions'] = undefined;

/**
 * A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \"`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\"`
 * @member {Array.<String>} requiredAccessLevels
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['requiredAccessLevels'] = undefined;

/**
 * The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.
 * @member {Array.<module:model/GoogleIdentityAccesscontextmanagerV1VpcNetworkSource>} vpcNetworkSources
 */
GoogleIdentityAccesscontextmanagerV1Condition.prototype['vpcNetworkSources'] = undefined;






export default GoogleIdentityAccesscontextmanagerV1Condition;

