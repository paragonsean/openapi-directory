/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StandardResourceMetadata model module.
 * @module model/StandardResourceMetadata
 * @version v1p1beta1
 */
class StandardResourceMetadata {
    /**
     * Constructs a new <code>StandardResourceMetadata</code>.
     * The standard metadata of a cloud resource.
     * @alias module:model/StandardResourceMetadata
     */
    constructor() { 
        
        StandardResourceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StandardResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandardResourceMetadata} obj Optional instance to populate.
     * @return {module:model/StandardResourceMetadata} The populated <code>StandardResourceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandardResourceMetadata();

            if (data.hasOwnProperty('additionalAttributes')) {
                obj['additionalAttributes'] = ApiClient.convertToType(data['additionalAttributes'], ['String']);
            }
            if (data.hasOwnProperty('assetType')) {
                obj['assetType'] = ApiClient.convertToType(data['assetType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkTags')) {
                obj['networkTags'] = ApiClient.convertToType(data['networkTags'], ['String']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandardResourceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandardResourceMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additionalAttributes'])) {
            throw new Error("Expected the field `additionalAttributes` to be an array in the JSON data but got " + data['additionalAttributes']);
        }
        // ensure the json data is a string
        if (data['assetType'] && !(typeof data['assetType'] === 'string' || data['assetType'] instanceof String)) {
            throw new Error("Expected the field `assetType` to be a primitive type in the JSON string but got " + data['assetType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['networkTags'])) {
            throw new Error("Expected the field `networkTags` to be an array in the JSON data but got " + data['networkTags']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }

        return true;
    }


}



/**
 * Additional searchable attributes of this resource. Informational only. The exact set of attributes is subject to change. For example: project id, DNS name etc.
 * @member {Array.<String>} additionalAttributes
 */
StandardResourceMetadata.prototype['additionalAttributes'] = undefined;

/**
 * The type of this resource. For example: \"compute.googleapis.com/Disk\".
 * @member {String} assetType
 */
StandardResourceMetadata.prototype['assetType'] = undefined;

/**
 * One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.
 * @member {String} description
 */
StandardResourceMetadata.prototype['description'] = undefined;

/**
 * The display name of this resource.
 * @member {String} displayName
 */
StandardResourceMetadata.prototype['displayName'] = undefined;

/**
 * Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.
 * @member {Object.<String, String>} labels
 */
StandardResourceMetadata.prototype['labels'] = undefined;

/**
 * Location can be \"global\", regional like \"us-east1\", or zonal like \"us-west1-b\".
 * @member {String} location
 */
StandardResourceMetadata.prototype['location'] = undefined;

/**
 * The full resource name. For example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.
 * @member {String} name
 */
StandardResourceMetadata.prototype['name'] = undefined;

/**
 * Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.
 * @member {Array.<String>} networkTags
 */
StandardResourceMetadata.prototype['networkTags'] = undefined;

/**
 * The project that this resource belongs to, in the form of `projects/{project_number}`.
 * @member {String} project
 */
StandardResourceMetadata.prototype['project'] = undefined;






export default StandardResourceMetadata;

