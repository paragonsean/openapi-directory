/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleIdentityAccesscontextmanagerV1OsConstraint from './GoogleIdentityAccesscontextmanagerV1OsConstraint';

/**
 * The GoogleIdentityAccesscontextmanagerV1DevicePolicy model module.
 * @module model/GoogleIdentityAccesscontextmanagerV1DevicePolicy
 * @version v1p1beta1
 */
class GoogleIdentityAccesscontextmanagerV1DevicePolicy {
    /**
     * Constructs a new <code>GoogleIdentityAccesscontextmanagerV1DevicePolicy</code>.
     * &#x60;DevicePolicy&#x60; specifies device specific restrictions necessary to acquire a given access level. A &#x60;DevicePolicy&#x60; specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. &#x60;DevicePolicy&#x60; acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
     * @alias module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy
     */
    constructor() { 
        
        GoogleIdentityAccesscontextmanagerV1DevicePolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIdentityAccesscontextmanagerV1DevicePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy} obj Optional instance to populate.
     * @return {module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy} The populated <code>GoogleIdentityAccesscontextmanagerV1DevicePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIdentityAccesscontextmanagerV1DevicePolicy();

            if (data.hasOwnProperty('allowedDeviceManagementLevels')) {
                obj['allowedDeviceManagementLevels'] = ApiClient.convertToType(data['allowedDeviceManagementLevels'], ['String']);
            }
            if (data.hasOwnProperty('allowedEncryptionStatuses')) {
                obj['allowedEncryptionStatuses'] = ApiClient.convertToType(data['allowedEncryptionStatuses'], ['String']);
            }
            if (data.hasOwnProperty('osConstraints')) {
                obj['osConstraints'] = ApiClient.convertToType(data['osConstraints'], [GoogleIdentityAccesscontextmanagerV1OsConstraint]);
            }
            if (data.hasOwnProperty('requireAdminApproval')) {
                obj['requireAdminApproval'] = ApiClient.convertToType(data['requireAdminApproval'], 'Boolean');
            }
            if (data.hasOwnProperty('requireCorpOwned')) {
                obj['requireCorpOwned'] = ApiClient.convertToType(data['requireCorpOwned'], 'Boolean');
            }
            if (data.hasOwnProperty('requireScreenlock')) {
                obj['requireScreenlock'] = ApiClient.convertToType(data['requireScreenlock'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIdentityAccesscontextmanagerV1DevicePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIdentityAccesscontextmanagerV1DevicePolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedDeviceManagementLevels'])) {
            throw new Error("Expected the field `allowedDeviceManagementLevels` to be an array in the JSON data but got " + data['allowedDeviceManagementLevels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedEncryptionStatuses'])) {
            throw new Error("Expected the field `allowedEncryptionStatuses` to be an array in the JSON data but got " + data['allowedEncryptionStatuses']);
        }
        if (data['osConstraints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['osConstraints'])) {
                throw new Error("Expected the field `osConstraints` to be an array in the JSON data but got " + data['osConstraints']);
            }
            // validate the optional field `osConstraints` (array)
            for (const item of data['osConstraints']) {
                GoogleIdentityAccesscontextmanagerV1OsConstraint.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Allowed device management levels, an empty list allows all management levels.
 * @member {Array.<module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy.AllowedDeviceManagementLevelsEnum>} allowedDeviceManagementLevels
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['allowedDeviceManagementLevels'] = undefined;

/**
 * Allowed encryptions statuses, an empty list allows all statuses.
 * @member {Array.<module:model/GoogleIdentityAccesscontextmanagerV1DevicePolicy.AllowedEncryptionStatusesEnum>} allowedEncryptionStatuses
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['allowedEncryptionStatuses'] = undefined;

/**
 * Allowed OS versions, an empty list allows all types and all versions.
 * @member {Array.<module:model/GoogleIdentityAccesscontextmanagerV1OsConstraint>} osConstraints
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['osConstraints'] = undefined;

/**
 * Whether the device needs to be approved by the customer admin.
 * @member {Boolean} requireAdminApproval
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['requireAdminApproval'] = undefined;

/**
 * Whether the device needs to be corp owned.
 * @member {Boolean} requireCorpOwned
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['requireCorpOwned'] = undefined;

/**
 * Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.
 * @member {Boolean} requireScreenlock
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy.prototype['requireScreenlock'] = undefined;





/**
 * Allowed values for the <code>allowedDeviceManagementLevels</code> property.
 * @enum {String}
 * @readonly
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy['AllowedDeviceManagementLevelsEnum'] = {

    /**
     * value: "MANAGEMENT_UNSPECIFIED"
     * @const
     */
    "MANAGEMENT_UNSPECIFIED": "MANAGEMENT_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "BASIC"
     * @const
     */
    "BASIC": "BASIC",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE"
};


/**
 * Allowed values for the <code>allowedEncryptionStatuses</code> property.
 * @enum {String}
 * @readonly
 */
GoogleIdentityAccesscontextmanagerV1DevicePolicy['AllowedEncryptionStatusesEnum'] = {

    /**
     * value: "ENCRYPTION_UNSPECIFIED"
     * @const
     */
    "ENCRYPTION_UNSPECIFIED": "ENCRYPTION_UNSPECIFIED",

    /**
     * value: "ENCRYPTION_UNSUPPORTED"
     * @const
     */
    "ENCRYPTION_UNSUPPORTED": "ENCRYPTION_UNSUPPORTED",

    /**
     * value: "UNENCRYPTED"
     * @const
     */
    "UNENCRYPTED": "UNENCRYPTED",

    /**
     * value: "ENCRYPTED"
     * @const
     */
    "ENCRYPTED": "ENCRYPTED"
};



export default GoogleIdentityAccesscontextmanagerV1DevicePolicy;

