/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SearchAllIamPoliciesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IamPoliciesApi
 */
@Disabled
public class IamPoliciesApiTest {

    private final IamPoliciesApi api = new IamPoliciesApi();

    /**
     * Searches all the IAM policies within a given accessible Resource Manager scope (project/folder/organization). This RPC gives callers especially administrators the ability to search all the IAM policies within a scope, even if they don&#39;t have &#x60;.getIamPolicy&#x60; permission of all the IAM policies. Callers should have &#x60;cloud.assets.SearchAllIamPolicies&#x60; permission on the requested scope, otherwise the request will be rejected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetIamPoliciesSearchAllTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        SearchAllIamPoliciesResponse response = api.cloudassetIamPoliciesSearchAll(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, query);
        // TODO: test validations
    }

}
