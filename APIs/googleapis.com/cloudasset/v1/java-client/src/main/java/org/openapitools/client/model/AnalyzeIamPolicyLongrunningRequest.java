/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IamPolicyAnalysisOutputConfig;
import org.openapitools.client.model.IamPolicyAnalysisQuery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request message for AssetService.AnalyzeIamPolicyLongrunning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeIamPolicyLongrunningRequest {
  public static final String SERIALIZED_NAME_ANALYSIS_QUERY = "analysisQuery";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_QUERY)
  private IamPolicyAnalysisQuery analysisQuery;

  public static final String SERIALIZED_NAME_OUTPUT_CONFIG = "outputConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIG)
  private IamPolicyAnalysisOutputConfig outputConfig;

  public static final String SERIALIZED_NAME_SAVED_ANALYSIS_QUERY = "savedAnalysisQuery";
  @SerializedName(SERIALIZED_NAME_SAVED_ANALYSIS_QUERY)
  private String savedAnalysisQuery;

  public AnalyzeIamPolicyLongrunningRequest() {
  }

  public AnalyzeIamPolicyLongrunningRequest analysisQuery(IamPolicyAnalysisQuery analysisQuery) {
    this.analysisQuery = analysisQuery;
    return this;
  }

  /**
   * Get analysisQuery
   * @return analysisQuery
   */
  @javax.annotation.Nullable
  public IamPolicyAnalysisQuery getAnalysisQuery() {
    return analysisQuery;
  }

  public void setAnalysisQuery(IamPolicyAnalysisQuery analysisQuery) {
    this.analysisQuery = analysisQuery;
  }


  public AnalyzeIamPolicyLongrunningRequest outputConfig(IamPolicyAnalysisOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
    return this;
  }

  /**
   * Get outputConfig
   * @return outputConfig
   */
  @javax.annotation.Nullable
  public IamPolicyAnalysisOutputConfig getOutputConfig() {
    return outputConfig;
  }

  public void setOutputConfig(IamPolicyAnalysisOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
  }


  public AnalyzeIamPolicyLongrunningRequest savedAnalysisQuery(String savedAnalysisQuery) {
    this.savedAnalysisQuery = savedAnalysisQuery;
    return this;
  }

  /**
   * Optional. The name of a saved query, which must be in the format of: * projects/project_number/savedQueries/saved_query_id * folders/folder_number/savedQueries/saved_query_id * organizations/organization_number/savedQueries/saved_query_id If both &#x60;analysis_query&#x60; and &#x60;saved_analysis_query&#x60; are provided, they will be merged together with the &#x60;saved_analysis_query&#x60; as base and the &#x60;analysis_query&#x60; as overrides. For more details of the merge behavior, refer to the [MergeFrom](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message#Message.MergeFrom.details) doc. Note that you cannot override primitive fields with default value, such as 0 or empty string, etc., because we use proto3, which doesn&#39;t support field presence yet.
   * @return savedAnalysisQuery
   */
  @javax.annotation.Nullable
  public String getSavedAnalysisQuery() {
    return savedAnalysisQuery;
  }

  public void setSavedAnalysisQuery(String savedAnalysisQuery) {
    this.savedAnalysisQuery = savedAnalysisQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeIamPolicyLongrunningRequest analyzeIamPolicyLongrunningRequest = (AnalyzeIamPolicyLongrunningRequest) o;
    return Objects.equals(this.analysisQuery, analyzeIamPolicyLongrunningRequest.analysisQuery) &&
        Objects.equals(this.outputConfig, analyzeIamPolicyLongrunningRequest.outputConfig) &&
        Objects.equals(this.savedAnalysisQuery, analyzeIamPolicyLongrunningRequest.savedAnalysisQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisQuery, outputConfig, savedAnalysisQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeIamPolicyLongrunningRequest {\n");
    sb.append("    analysisQuery: ").append(toIndentedString(analysisQuery)).append("\n");
    sb.append("    outputConfig: ").append(toIndentedString(outputConfig)).append("\n");
    sb.append("    savedAnalysisQuery: ").append(toIndentedString(savedAnalysisQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisQuery");
    openapiFields.add("outputConfig");
    openapiFields.add("savedAnalysisQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeIamPolicyLongrunningRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeIamPolicyLongrunningRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeIamPolicyLongrunningRequest is not found in the empty JSON string", AnalyzeIamPolicyLongrunningRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeIamPolicyLongrunningRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeIamPolicyLongrunningRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisQuery`
      if (jsonObj.get("analysisQuery") != null && !jsonObj.get("analysisQuery").isJsonNull()) {
        IamPolicyAnalysisQuery.validateJsonElement(jsonObj.get("analysisQuery"));
      }
      // validate the optional field `outputConfig`
      if (jsonObj.get("outputConfig") != null && !jsonObj.get("outputConfig").isJsonNull()) {
        IamPolicyAnalysisOutputConfig.validateJsonElement(jsonObj.get("outputConfig"));
      }
      if ((jsonObj.get("savedAnalysisQuery") != null && !jsonObj.get("savedAnalysisQuery").isJsonNull()) && !jsonObj.get("savedAnalysisQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `savedAnalysisQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("savedAnalysisQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeIamPolicyLongrunningRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeIamPolicyLongrunningRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeIamPolicyLongrunningRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeIamPolicyLongrunningRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeIamPolicyLongrunningRequest>() {
           @Override
           public void write(JsonWriter out, AnalyzeIamPolicyLongrunningRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeIamPolicyLongrunningRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeIamPolicyLongrunningRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeIamPolicyLongrunningRequest
   * @throws IOException if the JSON string is invalid with respect to AnalyzeIamPolicyLongrunningRequest
   */
  public static AnalyzeIamPolicyLongrunningRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeIamPolicyLongrunningRequest.class);
  }

  /**
   * Convert an instance of AnalyzeIamPolicyLongrunningRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

