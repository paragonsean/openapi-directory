/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudAssetV1Rule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This organization policy message is a modified version of the one defined in the Organization Policy system. This message contains several fields defined in the original organization policy with some new fields for analysis purpose.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzerOrgPolicy {
  public static final String SERIALIZED_NAME_APPLIED_RESOURCE = "appliedResource";
  @SerializedName(SERIALIZED_NAME_APPLIED_RESOURCE)
  private String appliedResource;

  public static final String SERIALIZED_NAME_ATTACHED_RESOURCE = "attachedResource";
  @SerializedName(SERIALIZED_NAME_ATTACHED_RESOURCE)
  private String attachedResource;

  public static final String SERIALIZED_NAME_INHERIT_FROM_PARENT = "inheritFromParent";
  @SerializedName(SERIALIZED_NAME_INHERIT_FROM_PARENT)
  private Boolean inheritFromParent;

  public static final String SERIALIZED_NAME_RESET = "reset";
  @SerializedName(SERIALIZED_NAME_RESET)
  private Boolean reset;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<GoogleCloudAssetV1Rule> rules = new ArrayList<>();

  public AnalyzerOrgPolicy() {
  }

  public AnalyzerOrgPolicy appliedResource(String appliedResource) {
    this.appliedResource = appliedResource;
    return this;
  }

  /**
   * The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of an organization/folder/project resource where this organization policy applies to. For any user defined org policies, this field has the same value as the [attached_resource] field. Only for default policy, this field has the different value.
   * @return appliedResource
   */
  @javax.annotation.Nullable
  public String getAppliedResource() {
    return appliedResource;
  }

  public void setAppliedResource(String appliedResource) {
    this.appliedResource = appliedResource;
  }


  public AnalyzerOrgPolicy attachedResource(String attachedResource) {
    this.attachedResource = attachedResource;
    return this;
  }

  /**
   * The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of an organization/folder/project resource where this organization policy is set. Notice that some type of constraints are defined with default policy. This field will be empty for them.
   * @return attachedResource
   */
  @javax.annotation.Nullable
  public String getAttachedResource() {
    return attachedResource;
  }

  public void setAttachedResource(String attachedResource) {
    this.attachedResource = attachedResource;
  }


  public AnalyzerOrgPolicy inheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
    return this;
  }

  /**
   * If &#x60;inherit_from_parent&#x60; is true, Rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the effective root for evaluation.
   * @return inheritFromParent
   */
  @javax.annotation.Nullable
  public Boolean getInheritFromParent() {
    return inheritFromParent;
  }

  public void setInheritFromParent(Boolean inheritFromParent) {
    this.inheritFromParent = inheritFromParent;
  }


  public AnalyzerOrgPolicy reset(Boolean reset) {
    this.reset = reset;
    return this;
  }

  /**
   * Ignores policies set above this resource and restores the default behavior of the constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, &#x60;rules&#x60; must be empty and &#x60;inherit_from_parent&#x60; must be set to false.
   * @return reset
   */
  @javax.annotation.Nullable
  public Boolean getReset() {
    return reset;
  }

  public void setReset(Boolean reset) {
    this.reset = reset;
  }


  public AnalyzerOrgPolicy rules(List<GoogleCloudAssetV1Rule> rules) {
    this.rules = rules;
    return this;
  }

  public AnalyzerOrgPolicy addRulesItem(GoogleCloudAssetV1Rule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * List of rules for this organization policy.
   * @return rules
   */
  @javax.annotation.Nullable
  public List<GoogleCloudAssetV1Rule> getRules() {
    return rules;
  }

  public void setRules(List<GoogleCloudAssetV1Rule> rules) {
    this.rules = rules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzerOrgPolicy analyzerOrgPolicy = (AnalyzerOrgPolicy) o;
    return Objects.equals(this.appliedResource, analyzerOrgPolicy.appliedResource) &&
        Objects.equals(this.attachedResource, analyzerOrgPolicy.attachedResource) &&
        Objects.equals(this.inheritFromParent, analyzerOrgPolicy.inheritFromParent) &&
        Objects.equals(this.reset, analyzerOrgPolicy.reset) &&
        Objects.equals(this.rules, analyzerOrgPolicy.rules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedResource, attachedResource, inheritFromParent, reset, rules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzerOrgPolicy {\n");
    sb.append("    appliedResource: ").append(toIndentedString(appliedResource)).append("\n");
    sb.append("    attachedResource: ").append(toIndentedString(attachedResource)).append("\n");
    sb.append("    inheritFromParent: ").append(toIndentedString(inheritFromParent)).append("\n");
    sb.append("    reset: ").append(toIndentedString(reset)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedResource");
    openapiFields.add("attachedResource");
    openapiFields.add("inheritFromParent");
    openapiFields.add("reset");
    openapiFields.add("rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzerOrgPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzerOrgPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzerOrgPolicy is not found in the empty JSON string", AnalyzerOrgPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzerOrgPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzerOrgPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appliedResource") != null && !jsonObj.get("appliedResource").isJsonNull()) && !jsonObj.get("appliedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedResource").toString()));
      }
      if ((jsonObj.get("attachedResource") != null && !jsonObj.get("attachedResource").isJsonNull()) && !jsonObj.get("attachedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachedResource").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            GoogleCloudAssetV1Rule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzerOrgPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzerOrgPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzerOrgPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzerOrgPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzerOrgPolicy>() {
           @Override
           public void write(JsonWriter out, AnalyzerOrgPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzerOrgPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzerOrgPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzerOrgPolicy
   * @throws IOException if the JSON string is invalid with respect to AnalyzerOrgPolicy
   */
  public static AnalyzerOrgPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzerOrgPolicy.class);
  }

  /**
   * Convert an instance of AnalyzerOrgPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

