/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VersionedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attached resource representation, which is defined by the corresponding service provider. It represents an attached resource&#39;s payload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachedResource {
  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_VERSIONED_RESOURCES = "versionedResources";
  @SerializedName(SERIALIZED_NAME_VERSIONED_RESOURCES)
  private List<VersionedResource> versionedResources = new ArrayList<>();

  public AttachedResource() {
  }

  public AttachedResource assetType(String assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * The type of this attached resource. Example: &#x60;osconfig.googleapis.com/Inventory&#x60; You can find the supported attached asset types of each resource in this table: &#x60;https://cloud.google.com/asset-inventory/docs/supported-asset-types&#x60;
   * @return assetType
   */
  @javax.annotation.Nullable
  public String getAssetType() {
    return assetType;
  }

  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }


  public AttachedResource versionedResources(List<VersionedResource> versionedResources) {
    this.versionedResources = versionedResources;
    return this;
  }

  public AttachedResource addVersionedResourcesItem(VersionedResource versionedResourcesItem) {
    if (this.versionedResources == null) {
      this.versionedResources = new ArrayList<>();
    }
    this.versionedResources.add(versionedResourcesItem);
    return this;
  }

  /**
   * Versioned resource representations of this attached resource. This is repeated because there could be multiple versions of the attached resource representations during version migration.
   * @return versionedResources
   */
  @javax.annotation.Nullable
  public List<VersionedResource> getVersionedResources() {
    return versionedResources;
  }

  public void setVersionedResources(List<VersionedResource> versionedResources) {
    this.versionedResources = versionedResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachedResource attachedResource = (AttachedResource) o;
    return Objects.equals(this.assetType, attachedResource.assetType) &&
        Objects.equals(this.versionedResources, attachedResource.versionedResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetType, versionedResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachedResource {\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    versionedResources: ").append(toIndentedString(versionedResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetType");
    openapiFields.add("versionedResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachedResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachedResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachedResource is not found in the empty JSON string", AttachedResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachedResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachedResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) && !jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      if (jsonObj.get("versionedResources") != null && !jsonObj.get("versionedResources").isJsonNull()) {
        JsonArray jsonArrayversionedResources = jsonObj.getAsJsonArray("versionedResources");
        if (jsonArrayversionedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("versionedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `versionedResources` to be an array in the JSON string but got `%s`", jsonObj.get("versionedResources").toString()));
          }

          // validate the optional field `versionedResources` (array)
          for (int i = 0; i < jsonArrayversionedResources.size(); i++) {
            VersionedResource.validateJsonElement(jsonArrayversionedResources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachedResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachedResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachedResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachedResource.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachedResource>() {
           @Override
           public void write(JsonWriter out, AttachedResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachedResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachedResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachedResource
   * @throws IOException if the JSON string is invalid with respect to AttachedResource
   */
  public static AttachedResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachedResource.class);
  }

  /**
   * Convert an instance of AttachedResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

