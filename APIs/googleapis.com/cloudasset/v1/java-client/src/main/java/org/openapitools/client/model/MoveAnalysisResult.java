/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MoveImpact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An analysis result including blockers and warnings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MoveAnalysisResult {
  public static final String SERIALIZED_NAME_BLOCKERS = "blockers";
  @SerializedName(SERIALIZED_NAME_BLOCKERS)
  private List<MoveImpact> blockers = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<MoveImpact> warnings = new ArrayList<>();

  public MoveAnalysisResult() {
  }

  public MoveAnalysisResult blockers(List<MoveImpact> blockers) {
    this.blockers = blockers;
    return this;
  }

  public MoveAnalysisResult addBlockersItem(MoveImpact blockersItem) {
    if (this.blockers == null) {
      this.blockers = new ArrayList<>();
    }
    this.blockers.add(blockersItem);
    return this;
  }

  /**
   * Blocking information that would prevent the target resource from moving to the specified destination at runtime.
   * @return blockers
   */
  @javax.annotation.Nullable
  public List<MoveImpact> getBlockers() {
    return blockers;
  }

  public void setBlockers(List<MoveImpact> blockers) {
    this.blockers = blockers;
  }


  public MoveAnalysisResult warnings(List<MoveImpact> warnings) {
    this.warnings = warnings;
    return this;
  }

  public MoveAnalysisResult addWarningsItem(MoveImpact warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Warning information indicating that moving the target resource to the specified destination might be unsafe. This can include important policy information and configuration changes, but will not block moves at runtime.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<MoveImpact> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<MoveImpact> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoveAnalysisResult moveAnalysisResult = (MoveAnalysisResult) o;
    return Objects.equals(this.blockers, moveAnalysisResult.blockers) &&
        Objects.equals(this.warnings, moveAnalysisResult.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockers, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoveAnalysisResult {\n");
    sb.append("    blockers: ").append(toIndentedString(blockers)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockers");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MoveAnalysisResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MoveAnalysisResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MoveAnalysisResult is not found in the empty JSON string", MoveAnalysisResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MoveAnalysisResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MoveAnalysisResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("blockers") != null && !jsonObj.get("blockers").isJsonNull()) {
        JsonArray jsonArrayblockers = jsonObj.getAsJsonArray("blockers");
        if (jsonArrayblockers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("blockers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `blockers` to be an array in the JSON string but got `%s`", jsonObj.get("blockers").toString()));
          }

          // validate the optional field `blockers` (array)
          for (int i = 0; i < jsonArrayblockers.size(); i++) {
            MoveImpact.validateJsonElement(jsonArrayblockers.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            MoveImpact.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MoveAnalysisResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MoveAnalysisResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MoveAnalysisResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MoveAnalysisResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MoveAnalysisResult>() {
           @Override
           public void write(JsonWriter out, MoveAnalysisResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MoveAnalysisResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MoveAnalysisResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MoveAnalysisResult
   * @throws IOException if the JSON string is invalid with respect to MoveAnalysisResult
   */
  public static MoveAnalysisResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MoveAnalysisResult.class);
  }

  /**
   * Convert an instance of MoveAnalysisResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

