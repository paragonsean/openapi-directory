/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IamPolicyAnalysisQuery;
import org.openapitools.client.model.IamPolicyAnalysisResult;
import org.openapitools.client.model.IamPolicyAnalysisState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An analysis message to group the query and results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IamPolicyAnalysis {
  public static final String SERIALIZED_NAME_ANALYSIS_QUERY = "analysisQuery";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_QUERY)
  private IamPolicyAnalysisQuery analysisQuery;

  public static final String SERIALIZED_NAME_ANALYSIS_RESULTS = "analysisResults";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_RESULTS)
  private List<IamPolicyAnalysisResult> analysisResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULLY_EXPLORED = "fullyExplored";
  @SerializedName(SERIALIZED_NAME_FULLY_EXPLORED)
  private Boolean fullyExplored;

  public static final String SERIALIZED_NAME_NON_CRITICAL_ERRORS = "nonCriticalErrors";
  @SerializedName(SERIALIZED_NAME_NON_CRITICAL_ERRORS)
  private List<IamPolicyAnalysisState> nonCriticalErrors = new ArrayList<>();

  public IamPolicyAnalysis() {
  }

  public IamPolicyAnalysis analysisQuery(IamPolicyAnalysisQuery analysisQuery) {
    this.analysisQuery = analysisQuery;
    return this;
  }

  /**
   * Get analysisQuery
   * @return analysisQuery
   */
  @javax.annotation.Nullable
  public IamPolicyAnalysisQuery getAnalysisQuery() {
    return analysisQuery;
  }

  public void setAnalysisQuery(IamPolicyAnalysisQuery analysisQuery) {
    this.analysisQuery = analysisQuery;
  }


  public IamPolicyAnalysis analysisResults(List<IamPolicyAnalysisResult> analysisResults) {
    this.analysisResults = analysisResults;
    return this;
  }

  public IamPolicyAnalysis addAnalysisResultsItem(IamPolicyAnalysisResult analysisResultsItem) {
    if (this.analysisResults == null) {
      this.analysisResults = new ArrayList<>();
    }
    this.analysisResults.add(analysisResultsItem);
    return this;
  }

  /**
   * A list of IamPolicyAnalysisResult that matches the analysis query, or empty if no result is found.
   * @return analysisResults
   */
  @javax.annotation.Nullable
  public List<IamPolicyAnalysisResult> getAnalysisResults() {
    return analysisResults;
  }

  public void setAnalysisResults(List<IamPolicyAnalysisResult> analysisResults) {
    this.analysisResults = analysisResults;
  }


  public IamPolicyAnalysis fullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
    return this;
  }

  /**
   * Represents whether all entries in the analysis_results have been fully explored to answer the query.
   * @return fullyExplored
   */
  @javax.annotation.Nullable
  public Boolean getFullyExplored() {
    return fullyExplored;
  }

  public void setFullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
  }


  public IamPolicyAnalysis nonCriticalErrors(List<IamPolicyAnalysisState> nonCriticalErrors) {
    this.nonCriticalErrors = nonCriticalErrors;
    return this;
  }

  public IamPolicyAnalysis addNonCriticalErrorsItem(IamPolicyAnalysisState nonCriticalErrorsItem) {
    if (this.nonCriticalErrors == null) {
      this.nonCriticalErrors = new ArrayList<>();
    }
    this.nonCriticalErrors.add(nonCriticalErrorsItem);
    return this;
  }

  /**
   * A list of non-critical errors happened during the query handling.
   * @return nonCriticalErrors
   */
  @javax.annotation.Nullable
  public List<IamPolicyAnalysisState> getNonCriticalErrors() {
    return nonCriticalErrors;
  }

  public void setNonCriticalErrors(List<IamPolicyAnalysisState> nonCriticalErrors) {
    this.nonCriticalErrors = nonCriticalErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IamPolicyAnalysis iamPolicyAnalysis = (IamPolicyAnalysis) o;
    return Objects.equals(this.analysisQuery, iamPolicyAnalysis.analysisQuery) &&
        Objects.equals(this.analysisResults, iamPolicyAnalysis.analysisResults) &&
        Objects.equals(this.fullyExplored, iamPolicyAnalysis.fullyExplored) &&
        Objects.equals(this.nonCriticalErrors, iamPolicyAnalysis.nonCriticalErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisQuery, analysisResults, fullyExplored, nonCriticalErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IamPolicyAnalysis {\n");
    sb.append("    analysisQuery: ").append(toIndentedString(analysisQuery)).append("\n");
    sb.append("    analysisResults: ").append(toIndentedString(analysisResults)).append("\n");
    sb.append("    fullyExplored: ").append(toIndentedString(fullyExplored)).append("\n");
    sb.append("    nonCriticalErrors: ").append(toIndentedString(nonCriticalErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analysisQuery");
    openapiFields.add("analysisResults");
    openapiFields.add("fullyExplored");
    openapiFields.add("nonCriticalErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IamPolicyAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IamPolicyAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IamPolicyAnalysis is not found in the empty JSON string", IamPolicyAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IamPolicyAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IamPolicyAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analysisQuery`
      if (jsonObj.get("analysisQuery") != null && !jsonObj.get("analysisQuery").isJsonNull()) {
        IamPolicyAnalysisQuery.validateJsonElement(jsonObj.get("analysisQuery"));
      }
      if (jsonObj.get("analysisResults") != null && !jsonObj.get("analysisResults").isJsonNull()) {
        JsonArray jsonArrayanalysisResults = jsonObj.getAsJsonArray("analysisResults");
        if (jsonArrayanalysisResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("analysisResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `analysisResults` to be an array in the JSON string but got `%s`", jsonObj.get("analysisResults").toString()));
          }

          // validate the optional field `analysisResults` (array)
          for (int i = 0; i < jsonArrayanalysisResults.size(); i++) {
            IamPolicyAnalysisResult.validateJsonElement(jsonArrayanalysisResults.get(i));
          };
        }
      }
      if (jsonObj.get("nonCriticalErrors") != null && !jsonObj.get("nonCriticalErrors").isJsonNull()) {
        JsonArray jsonArraynonCriticalErrors = jsonObj.getAsJsonArray("nonCriticalErrors");
        if (jsonArraynonCriticalErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nonCriticalErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nonCriticalErrors` to be an array in the JSON string but got `%s`", jsonObj.get("nonCriticalErrors").toString()));
          }

          // validate the optional field `nonCriticalErrors` (array)
          for (int i = 0; i < jsonArraynonCriticalErrors.size(); i++) {
            IamPolicyAnalysisState.validateJsonElement(jsonArraynonCriticalErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IamPolicyAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IamPolicyAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IamPolicyAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IamPolicyAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<IamPolicyAnalysis>() {
           @Override
           public void write(JsonWriter out, IamPolicyAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IamPolicyAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IamPolicyAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IamPolicyAnalysis
   * @throws IOException if the JSON string is invalid with respect to IamPolicyAnalysis
   */
  public static IamPolicyAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IamPolicyAnalysis.class);
  }

  /**
   * Convert an instance of IamPolicyAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

