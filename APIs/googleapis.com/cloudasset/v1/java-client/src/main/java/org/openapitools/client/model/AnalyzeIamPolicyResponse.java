/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IamPolicyAnalysis;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response message for AssetService.AnalyzeIamPolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeIamPolicyResponse {
  public static final String SERIALIZED_NAME_FULLY_EXPLORED = "fullyExplored";
  @SerializedName(SERIALIZED_NAME_FULLY_EXPLORED)
  private Boolean fullyExplored;

  public static final String SERIALIZED_NAME_MAIN_ANALYSIS = "mainAnalysis";
  @SerializedName(SERIALIZED_NAME_MAIN_ANALYSIS)
  private IamPolicyAnalysis mainAnalysis;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_IMPERSONATION_ANALYSIS = "serviceAccountImpersonationAnalysis";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_IMPERSONATION_ANALYSIS)
  private List<IamPolicyAnalysis> serviceAccountImpersonationAnalysis = new ArrayList<>();

  public AnalyzeIamPolicyResponse() {
  }

  public AnalyzeIamPolicyResponse fullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
    return this;
  }

  /**
   * Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.
   * @return fullyExplored
   */
  @javax.annotation.Nullable
  public Boolean getFullyExplored() {
    return fullyExplored;
  }

  public void setFullyExplored(Boolean fullyExplored) {
    this.fullyExplored = fullyExplored;
  }


  public AnalyzeIamPolicyResponse mainAnalysis(IamPolicyAnalysis mainAnalysis) {
    this.mainAnalysis = mainAnalysis;
    return this;
  }

  /**
   * Get mainAnalysis
   * @return mainAnalysis
   */
  @javax.annotation.Nullable
  public IamPolicyAnalysis getMainAnalysis() {
    return mainAnalysis;
  }

  public void setMainAnalysis(IamPolicyAnalysis mainAnalysis) {
    this.mainAnalysis = mainAnalysis;
  }


  public AnalyzeIamPolicyResponse serviceAccountImpersonationAnalysis(List<IamPolicyAnalysis> serviceAccountImpersonationAnalysis) {
    this.serviceAccountImpersonationAnalysis = serviceAccountImpersonationAnalysis;
    return this;
  }

  public AnalyzeIamPolicyResponse addServiceAccountImpersonationAnalysisItem(IamPolicyAnalysis serviceAccountImpersonationAnalysisItem) {
    if (this.serviceAccountImpersonationAnalysis == null) {
      this.serviceAccountImpersonationAnalysis = new ArrayList<>();
    }
    this.serviceAccountImpersonationAnalysis.add(serviceAccountImpersonationAnalysisItem);
    return this;
  }

  /**
   * The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.
   * @return serviceAccountImpersonationAnalysis
   */
  @javax.annotation.Nullable
  public List<IamPolicyAnalysis> getServiceAccountImpersonationAnalysis() {
    return serviceAccountImpersonationAnalysis;
  }

  public void setServiceAccountImpersonationAnalysis(List<IamPolicyAnalysis> serviceAccountImpersonationAnalysis) {
    this.serviceAccountImpersonationAnalysis = serviceAccountImpersonationAnalysis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeIamPolicyResponse analyzeIamPolicyResponse = (AnalyzeIamPolicyResponse) o;
    return Objects.equals(this.fullyExplored, analyzeIamPolicyResponse.fullyExplored) &&
        Objects.equals(this.mainAnalysis, analyzeIamPolicyResponse.mainAnalysis) &&
        Objects.equals(this.serviceAccountImpersonationAnalysis, analyzeIamPolicyResponse.serviceAccountImpersonationAnalysis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullyExplored, mainAnalysis, serviceAccountImpersonationAnalysis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeIamPolicyResponse {\n");
    sb.append("    fullyExplored: ").append(toIndentedString(fullyExplored)).append("\n");
    sb.append("    mainAnalysis: ").append(toIndentedString(mainAnalysis)).append("\n");
    sb.append("    serviceAccountImpersonationAnalysis: ").append(toIndentedString(serviceAccountImpersonationAnalysis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullyExplored");
    openapiFields.add("mainAnalysis");
    openapiFields.add("serviceAccountImpersonationAnalysis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeIamPolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeIamPolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeIamPolicyResponse is not found in the empty JSON string", AnalyzeIamPolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeIamPolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeIamPolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mainAnalysis`
      if (jsonObj.get("mainAnalysis") != null && !jsonObj.get("mainAnalysis").isJsonNull()) {
        IamPolicyAnalysis.validateJsonElement(jsonObj.get("mainAnalysis"));
      }
      if (jsonObj.get("serviceAccountImpersonationAnalysis") != null && !jsonObj.get("serviceAccountImpersonationAnalysis").isJsonNull()) {
        JsonArray jsonArrayserviceAccountImpersonationAnalysis = jsonObj.getAsJsonArray("serviceAccountImpersonationAnalysis");
        if (jsonArrayserviceAccountImpersonationAnalysis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceAccountImpersonationAnalysis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceAccountImpersonationAnalysis` to be an array in the JSON string but got `%s`", jsonObj.get("serviceAccountImpersonationAnalysis").toString()));
          }

          // validate the optional field `serviceAccountImpersonationAnalysis` (array)
          for (int i = 0; i < jsonArrayserviceAccountImpersonationAnalysis.size(); i++) {
            IamPolicyAnalysis.validateJsonElement(jsonArrayserviceAccountImpersonationAnalysis.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeIamPolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeIamPolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeIamPolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeIamPolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeIamPolicyResponse>() {
           @Override
           public void write(JsonWriter out, AnalyzeIamPolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeIamPolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeIamPolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeIamPolicyResponse
   * @throws IOException if the JSON string is invalid with respect to AnalyzeIamPolicyResponse
   */
  public static AnalyzeIamPolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeIamPolicyResponse.class);
  }

  /**
   * Convert an instance of AnalyzeIamPolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

