/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleIdentityAccesscontextmanagerV1OsConstraint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;DevicePolicy&#x60; specifies device specific restrictions necessary to acquire a given access level. A &#x60;DevicePolicy&#x60; specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. &#x60;DevicePolicy&#x60; acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleIdentityAccesscontextmanagerV1DevicePolicy {
  /**
   * Gets or Sets allowedDeviceManagementLevels
   */
  @JsonAdapter(AllowedDeviceManagementLevelsEnum.Adapter.class)
  public enum AllowedDeviceManagementLevelsEnum {
    MANAGEMENT_UNSPECIFIED("MANAGEMENT_UNSPECIFIED"),
    
    NONE("NONE"),
    
    BASIC("BASIC"),
    
    COMPLETE("COMPLETE");

    private String value;

    AllowedDeviceManagementLevelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedDeviceManagementLevelsEnum fromValue(String value) {
      for (AllowedDeviceManagementLevelsEnum b : AllowedDeviceManagementLevelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedDeviceManagementLevelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedDeviceManagementLevelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedDeviceManagementLevelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedDeviceManagementLevelsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedDeviceManagementLevelsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_DEVICE_MANAGEMENT_LEVELS = "allowedDeviceManagementLevels";
  @SerializedName(SERIALIZED_NAME_ALLOWED_DEVICE_MANAGEMENT_LEVELS)
  private List<AllowedDeviceManagementLevelsEnum> allowedDeviceManagementLevels = new ArrayList<>();

  /**
   * Gets or Sets allowedEncryptionStatuses
   */
  @JsonAdapter(AllowedEncryptionStatusesEnum.Adapter.class)
  public enum AllowedEncryptionStatusesEnum {
    ENCRYPTION_UNSPECIFIED("ENCRYPTION_UNSPECIFIED"),
    
    ENCRYPTION_UNSUPPORTED("ENCRYPTION_UNSUPPORTED"),
    
    UNENCRYPTED("UNENCRYPTED"),
    
    ENCRYPTED("ENCRYPTED");

    private String value;

    AllowedEncryptionStatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedEncryptionStatusesEnum fromValue(String value) {
      for (AllowedEncryptionStatusesEnum b : AllowedEncryptionStatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedEncryptionStatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedEncryptionStatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedEncryptionStatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedEncryptionStatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedEncryptionStatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_ENCRYPTION_STATUSES = "allowedEncryptionStatuses";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ENCRYPTION_STATUSES)
  private List<AllowedEncryptionStatusesEnum> allowedEncryptionStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_CONSTRAINTS = "osConstraints";
  @SerializedName(SERIALIZED_NAME_OS_CONSTRAINTS)
  private List<GoogleIdentityAccesscontextmanagerV1OsConstraint> osConstraints = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRE_ADMIN_APPROVAL = "requireAdminApproval";
  @SerializedName(SERIALIZED_NAME_REQUIRE_ADMIN_APPROVAL)
  private Boolean requireAdminApproval;

  public static final String SERIALIZED_NAME_REQUIRE_CORP_OWNED = "requireCorpOwned";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CORP_OWNED)
  private Boolean requireCorpOwned;

  public static final String SERIALIZED_NAME_REQUIRE_SCREENLOCK = "requireScreenlock";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SCREENLOCK)
  private Boolean requireScreenlock;

  public GoogleIdentityAccesscontextmanagerV1DevicePolicy() {
  }

  public GoogleIdentityAccesscontextmanagerV1DevicePolicy allowedDeviceManagementLevels(List<AllowedDeviceManagementLevelsEnum> allowedDeviceManagementLevels) {
    this.allowedDeviceManagementLevels = allowedDeviceManagementLevels;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1DevicePolicy addAllowedDeviceManagementLevelsItem(AllowedDeviceManagementLevelsEnum allowedDeviceManagementLevelsItem) {
    if (this.allowedDeviceManagementLevels == null) {
      this.allowedDeviceManagementLevels = new ArrayList<>();
    }
    this.allowedDeviceManagementLevels.add(allowedDeviceManagementLevelsItem);
    return this;
  }

  /**
   * Allowed device management levels, an empty list allows all management levels.
   * @return allowedDeviceManagementLevels
   */
  @javax.annotation.Nullable
  public List<AllowedDeviceManagementLevelsEnum> getAllowedDeviceManagementLevels() {
    return allowedDeviceManagementLevels;
  }

  public void setAllowedDeviceManagementLevels(List<AllowedDeviceManagementLevelsEnum> allowedDeviceManagementLevels) {
    this.allowedDeviceManagementLevels = allowedDeviceManagementLevels;
  }


  public GoogleIdentityAccesscontextmanagerV1DevicePolicy allowedEncryptionStatuses(List<AllowedEncryptionStatusesEnum> allowedEncryptionStatuses) {
    this.allowedEncryptionStatuses = allowedEncryptionStatuses;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1DevicePolicy addAllowedEncryptionStatusesItem(AllowedEncryptionStatusesEnum allowedEncryptionStatusesItem) {
    if (this.allowedEncryptionStatuses == null) {
      this.allowedEncryptionStatuses = new ArrayList<>();
    }
    this.allowedEncryptionStatuses.add(allowedEncryptionStatusesItem);
    return this;
  }

  /**
   * Allowed encryptions statuses, an empty list allows all statuses.
   * @return allowedEncryptionStatuses
   */
  @javax.annotation.Nullable
  public List<AllowedEncryptionStatusesEnum> getAllowedEncryptionStatuses() {
    return allowedEncryptionStatuses;
  }

  public void setAllowedEncryptionStatuses(List<AllowedEncryptionStatusesEnum> allowedEncryptionStatuses) {
    this.allowedEncryptionStatuses = allowedEncryptionStatuses;
  }


  public GoogleIdentityAccesscontextmanagerV1DevicePolicy osConstraints(List<GoogleIdentityAccesscontextmanagerV1OsConstraint> osConstraints) {
    this.osConstraints = osConstraints;
    return this;
  }

  public GoogleIdentityAccesscontextmanagerV1DevicePolicy addOsConstraintsItem(GoogleIdentityAccesscontextmanagerV1OsConstraint osConstraintsItem) {
    if (this.osConstraints == null) {
      this.osConstraints = new ArrayList<>();
    }
    this.osConstraints.add(osConstraintsItem);
    return this;
  }

  /**
   * Allowed OS versions, an empty list allows all types and all versions.
   * @return osConstraints
   */
  @javax.annotation.Nullable
  public List<GoogleIdentityAccesscontextmanagerV1OsConstraint> getOsConstraints() {
    return osConstraints;
  }

  public void setOsConstraints(List<GoogleIdentityAccesscontextmanagerV1OsConstraint> osConstraints) {
    this.osConstraints = osConstraints;
  }


  public GoogleIdentityAccesscontextmanagerV1DevicePolicy requireAdminApproval(Boolean requireAdminApproval) {
    this.requireAdminApproval = requireAdminApproval;
    return this;
  }

  /**
   * Whether the device needs to be approved by the customer admin.
   * @return requireAdminApproval
   */
  @javax.annotation.Nullable
  public Boolean getRequireAdminApproval() {
    return requireAdminApproval;
  }

  public void setRequireAdminApproval(Boolean requireAdminApproval) {
    this.requireAdminApproval = requireAdminApproval;
  }


  public GoogleIdentityAccesscontextmanagerV1DevicePolicy requireCorpOwned(Boolean requireCorpOwned) {
    this.requireCorpOwned = requireCorpOwned;
    return this;
  }

  /**
   * Whether the device needs to be corp owned.
   * @return requireCorpOwned
   */
  @javax.annotation.Nullable
  public Boolean getRequireCorpOwned() {
    return requireCorpOwned;
  }

  public void setRequireCorpOwned(Boolean requireCorpOwned) {
    this.requireCorpOwned = requireCorpOwned;
  }


  public GoogleIdentityAccesscontextmanagerV1DevicePolicy requireScreenlock(Boolean requireScreenlock) {
    this.requireScreenlock = requireScreenlock;
    return this;
  }

  /**
   * Whether or not screenlock is required for the DevicePolicy to be true. Defaults to &#x60;false&#x60;.
   * @return requireScreenlock
   */
  @javax.annotation.Nullable
  public Boolean getRequireScreenlock() {
    return requireScreenlock;
  }

  public void setRequireScreenlock(Boolean requireScreenlock) {
    this.requireScreenlock = requireScreenlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleIdentityAccesscontextmanagerV1DevicePolicy googleIdentityAccesscontextmanagerV1DevicePolicy = (GoogleIdentityAccesscontextmanagerV1DevicePolicy) o;
    return Objects.equals(this.allowedDeviceManagementLevels, googleIdentityAccesscontextmanagerV1DevicePolicy.allowedDeviceManagementLevels) &&
        Objects.equals(this.allowedEncryptionStatuses, googleIdentityAccesscontextmanagerV1DevicePolicy.allowedEncryptionStatuses) &&
        Objects.equals(this.osConstraints, googleIdentityAccesscontextmanagerV1DevicePolicy.osConstraints) &&
        Objects.equals(this.requireAdminApproval, googleIdentityAccesscontextmanagerV1DevicePolicy.requireAdminApproval) &&
        Objects.equals(this.requireCorpOwned, googleIdentityAccesscontextmanagerV1DevicePolicy.requireCorpOwned) &&
        Objects.equals(this.requireScreenlock, googleIdentityAccesscontextmanagerV1DevicePolicy.requireScreenlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedDeviceManagementLevels, allowedEncryptionStatuses, osConstraints, requireAdminApproval, requireCorpOwned, requireScreenlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleIdentityAccesscontextmanagerV1DevicePolicy {\n");
    sb.append("    allowedDeviceManagementLevels: ").append(toIndentedString(allowedDeviceManagementLevels)).append("\n");
    sb.append("    allowedEncryptionStatuses: ").append(toIndentedString(allowedEncryptionStatuses)).append("\n");
    sb.append("    osConstraints: ").append(toIndentedString(osConstraints)).append("\n");
    sb.append("    requireAdminApproval: ").append(toIndentedString(requireAdminApproval)).append("\n");
    sb.append("    requireCorpOwned: ").append(toIndentedString(requireCorpOwned)).append("\n");
    sb.append("    requireScreenlock: ").append(toIndentedString(requireScreenlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedDeviceManagementLevels");
    openapiFields.add("allowedEncryptionStatuses");
    openapiFields.add("osConstraints");
    openapiFields.add("requireAdminApproval");
    openapiFields.add("requireCorpOwned");
    openapiFields.add("requireScreenlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleIdentityAccesscontextmanagerV1DevicePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleIdentityAccesscontextmanagerV1DevicePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleIdentityAccesscontextmanagerV1DevicePolicy is not found in the empty JSON string", GoogleIdentityAccesscontextmanagerV1DevicePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleIdentityAccesscontextmanagerV1DevicePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleIdentityAccesscontextmanagerV1DevicePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedDeviceManagementLevels") != null && !jsonObj.get("allowedDeviceManagementLevels").isJsonNull() && !jsonObj.get("allowedDeviceManagementLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedDeviceManagementLevels` to be an array in the JSON string but got `%s`", jsonObj.get("allowedDeviceManagementLevels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedEncryptionStatuses") != null && !jsonObj.get("allowedEncryptionStatuses").isJsonNull() && !jsonObj.get("allowedEncryptionStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedEncryptionStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("allowedEncryptionStatuses").toString()));
      }
      if (jsonObj.get("osConstraints") != null && !jsonObj.get("osConstraints").isJsonNull()) {
        JsonArray jsonArrayosConstraints = jsonObj.getAsJsonArray("osConstraints");
        if (jsonArrayosConstraints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("osConstraints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `osConstraints` to be an array in the JSON string but got `%s`", jsonObj.get("osConstraints").toString()));
          }

          // validate the optional field `osConstraints` (array)
          for (int i = 0; i < jsonArrayosConstraints.size(); i++) {
            GoogleIdentityAccesscontextmanagerV1OsConstraint.validateJsonElement(jsonArrayosConstraints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleIdentityAccesscontextmanagerV1DevicePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleIdentityAccesscontextmanagerV1DevicePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleIdentityAccesscontextmanagerV1DevicePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleIdentityAccesscontextmanagerV1DevicePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleIdentityAccesscontextmanagerV1DevicePolicy>() {
           @Override
           public void write(JsonWriter out, GoogleIdentityAccesscontextmanagerV1DevicePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleIdentityAccesscontextmanagerV1DevicePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleIdentityAccesscontextmanagerV1DevicePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleIdentityAccesscontextmanagerV1DevicePolicy
   * @throws IOException if the JSON string is invalid with respect to GoogleIdentityAccesscontextmanagerV1DevicePolicy
   */
  public static GoogleIdentityAccesscontextmanagerV1DevicePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleIdentityAccesscontextmanagerV1DevicePolicy.class);
  }

  /**
   * Convert an instance of GoogleIdentityAccesscontextmanagerV1DevicePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

