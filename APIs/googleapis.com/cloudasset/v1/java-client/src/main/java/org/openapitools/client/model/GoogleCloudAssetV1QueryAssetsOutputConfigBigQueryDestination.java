/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BigQuery destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination {
  public static final String SERIALIZED_NAME_DATASET = "dataset";
  @SerializedName(SERIALIZED_NAME_DATASET)
  private String dataset;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private String table;

  public static final String SERIALIZED_NAME_WRITE_DISPOSITION = "writeDisposition";
  @SerializedName(SERIALIZED_NAME_WRITE_DISPOSITION)
  private String writeDisposition;

  public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination() {
  }

  public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination dataset(String dataset) {
    this.dataset = dataset;
    return this;
  }

  /**
   * Required. The BigQuery dataset where the query results will be saved. It has the format of \&quot;projects/{projectId}/datasets/{datasetId}\&quot;.
   * @return dataset
   */
  @javax.annotation.Nullable
  public String getDataset() {
    return dataset;
  }

  public void setDataset(String dataset) {
    this.dataset = dataset;
  }


  public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination table(String table) {
    this.table = table;
    return this;
  }

  /**
   * Required. The BigQuery table where the query results will be saved. If this table does not exist, a new table with the given name will be created.
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(String table) {
    this.table = table;
  }


  public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination writeDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
    return this;
  }

  /**
   * Specifies the action that occurs if the destination table or partition already exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the table or partition already exists, BigQuery appends the data to the table or the latest partition. * WRITE_EMPTY: If the table already exists and contains data, a &#39;duplicate&#39; error is returned in the job result. The default value is WRITE_EMPTY.
   * @return writeDisposition
   */
  @javax.annotation.Nullable
  public String getWriteDisposition() {
    return writeDisposition;
  }

  public void setWriteDisposition(String writeDisposition) {
    this.writeDisposition = writeDisposition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination googleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination = (GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination) o;
    return Objects.equals(this.dataset, googleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.dataset) &&
        Objects.equals(this.table, googleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.table) &&
        Objects.equals(this.writeDisposition, googleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.writeDisposition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataset, table, writeDisposition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination {\n");
    sb.append("    dataset: ").append(toIndentedString(dataset)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    writeDisposition: ").append(toIndentedString(writeDisposition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset");
    openapiFields.add("table");
    openapiFields.add("writeDisposition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination is not found in the empty JSON string", GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataset") != null && !jsonObj.get("dataset").isJsonNull()) && !jsonObj.get("dataset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset").toString()));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
      if ((jsonObj.get("writeDisposition") != null && !jsonObj.get("writeDisposition").isJsonNull()) && !jsonObj.get("writeDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `writeDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("writeDisposition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination
   */
  public static GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.class);
  }

  /**
   * Convert an instance of GoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

