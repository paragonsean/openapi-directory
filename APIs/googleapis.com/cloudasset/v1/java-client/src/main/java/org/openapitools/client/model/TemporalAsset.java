/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.TimeWindow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An asset in Google Cloud and its temporal metadata, including the time window when it was observed and its status during that window.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TemporalAsset {
  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private Asset asset;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_PRIOR_ASSET = "priorAsset";
  @SerializedName(SERIALIZED_NAME_PRIOR_ASSET)
  private Asset priorAsset;

  /**
   * State of prior_asset.
   */
  @JsonAdapter(PriorAssetStateEnum.Adapter.class)
  public enum PriorAssetStateEnum {
    PRIOR_ASSET_STATE_UNSPECIFIED("PRIOR_ASSET_STATE_UNSPECIFIED"),
    
    PRESENT("PRESENT"),
    
    INVALID("INVALID"),
    
    DOES_NOT_EXIST("DOES_NOT_EXIST"),
    
    DELETED("DELETED");

    private String value;

    PriorAssetStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriorAssetStateEnum fromValue(String value) {
      for (PriorAssetStateEnum b : PriorAssetStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriorAssetStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriorAssetStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriorAssetStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriorAssetStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriorAssetStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIOR_ASSET_STATE = "priorAssetState";
  @SerializedName(SERIALIZED_NAME_PRIOR_ASSET_STATE)
  private PriorAssetStateEnum priorAssetState;

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private TimeWindow window;

  public TemporalAsset() {
  }

  public TemporalAsset asset(Asset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nullable
  public Asset getAsset() {
    return asset;
  }

  public void setAsset(Asset asset) {
    this.asset = asset;
  }


  public TemporalAsset deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the asset has been deleted or not.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public TemporalAsset priorAsset(Asset priorAsset) {
    this.priorAsset = priorAsset;
    return this;
  }

  /**
   * Get priorAsset
   * @return priorAsset
   */
  @javax.annotation.Nullable
  public Asset getPriorAsset() {
    return priorAsset;
  }

  public void setPriorAsset(Asset priorAsset) {
    this.priorAsset = priorAsset;
  }


  public TemporalAsset priorAssetState(PriorAssetStateEnum priorAssetState) {
    this.priorAssetState = priorAssetState;
    return this;
  }

  /**
   * State of prior_asset.
   * @return priorAssetState
   */
  @javax.annotation.Nullable
  public PriorAssetStateEnum getPriorAssetState() {
    return priorAssetState;
  }

  public void setPriorAssetState(PriorAssetStateEnum priorAssetState) {
    this.priorAssetState = priorAssetState;
  }


  public TemporalAsset window(TimeWindow window) {
    this.window = window;
    return this;
  }

  /**
   * Get window
   * @return window
   */
  @javax.annotation.Nullable
  public TimeWindow getWindow() {
    return window;
  }

  public void setWindow(TimeWindow window) {
    this.window = window;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemporalAsset temporalAsset = (TemporalAsset) o;
    return Objects.equals(this.asset, temporalAsset.asset) &&
        Objects.equals(this.deleted, temporalAsset.deleted) &&
        Objects.equals(this.priorAsset, temporalAsset.priorAsset) &&
        Objects.equals(this.priorAssetState, temporalAsset.priorAssetState) &&
        Objects.equals(this.window, temporalAsset.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asset, deleted, priorAsset, priorAssetState, window);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemporalAsset {\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    priorAsset: ").append(toIndentedString(priorAsset)).append("\n");
    sb.append("    priorAssetState: ").append(toIndentedString(priorAssetState)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset");
    openapiFields.add("deleted");
    openapiFields.add("priorAsset");
    openapiFields.add("priorAssetState");
    openapiFields.add("window");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemporalAsset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemporalAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemporalAsset is not found in the empty JSON string", TemporalAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TemporalAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TemporalAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `asset`
      if (jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull()) {
        Asset.validateJsonElement(jsonObj.get("asset"));
      }
      // validate the optional field `priorAsset`
      if (jsonObj.get("priorAsset") != null && !jsonObj.get("priorAsset").isJsonNull()) {
        Asset.validateJsonElement(jsonObj.get("priorAsset"));
      }
      if ((jsonObj.get("priorAssetState") != null && !jsonObj.get("priorAssetState").isJsonNull()) && !jsonObj.get("priorAssetState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorAssetState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorAssetState").toString()));
      }
      // validate the optional field `priorAssetState`
      if (jsonObj.get("priorAssetState") != null && !jsonObj.get("priorAssetState").isJsonNull()) {
        PriorAssetStateEnum.validateJsonElement(jsonObj.get("priorAssetState"));
      }
      // validate the optional field `window`
      if (jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) {
        TimeWindow.validateJsonElement(jsonObj.get("window"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemporalAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemporalAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemporalAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemporalAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<TemporalAsset>() {
           @Override
           public void write(JsonWriter out, TemporalAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemporalAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemporalAsset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemporalAsset
   * @throws IOException if the JSON string is invalid with respect to TemporalAsset
   */
  public static TemporalAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemporalAsset.class);
  }

  /**
   * Convert an instance of TemporalAsset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

