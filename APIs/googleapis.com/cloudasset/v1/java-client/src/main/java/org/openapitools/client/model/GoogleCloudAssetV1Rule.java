/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionEvaluation;
import org.openapitools.client.model.Expr;
import org.openapitools.client.model.GoogleCloudAssetV1StringValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This rule message is a customized version of the one defined in the Organization Policy system. In addition to the fields defined in the original organization policy, it contains additional field(s) under specific circumstances to support analysis results.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudAssetV1Rule {
  public static final String SERIALIZED_NAME_ALLOW_ALL = "allowAll";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALL)
  private Boolean allowAll;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private Expr condition;

  public static final String SERIALIZED_NAME_CONDITION_EVALUATION = "conditionEvaluation";
  @SerializedName(SERIALIZED_NAME_CONDITION_EVALUATION)
  private ConditionEvaluation conditionEvaluation;

  public static final String SERIALIZED_NAME_DENY_ALL = "denyAll";
  @SerializedName(SERIALIZED_NAME_DENY_ALL)
  private Boolean denyAll;

  public static final String SERIALIZED_NAME_ENFORCE = "enforce";
  @SerializedName(SERIALIZED_NAME_ENFORCE)
  private Boolean enforce;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private GoogleCloudAssetV1StringValues values;

  public GoogleCloudAssetV1Rule() {
  }

  public GoogleCloudAssetV1Rule allowAll(Boolean allowAll) {
    this.allowAll = allowAll;
    return this;
  }

  /**
   * Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.
   * @return allowAll
   */
  @javax.annotation.Nullable
  public Boolean getAllowAll() {
    return allowAll;
  }

  public void setAllowAll(Boolean allowAll) {
    this.allowAll = allowAll;
  }


  public GoogleCloudAssetV1Rule condition(Expr condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public Expr getCondition() {
    return condition;
  }

  public void setCondition(Expr condition) {
    this.condition = condition;
  }


  public GoogleCloudAssetV1Rule conditionEvaluation(ConditionEvaluation conditionEvaluation) {
    this.conditionEvaluation = conditionEvaluation;
    return this;
  }

  /**
   * Get conditionEvaluation
   * @return conditionEvaluation
   */
  @javax.annotation.Nullable
  public ConditionEvaluation getConditionEvaluation() {
    return conditionEvaluation;
  }

  public void setConditionEvaluation(ConditionEvaluation conditionEvaluation) {
    this.conditionEvaluation = conditionEvaluation;
  }


  public GoogleCloudAssetV1Rule denyAll(Boolean denyAll) {
    this.denyAll = denyAll;
    return this;
  }

  /**
   * Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.
   * @return denyAll
   */
  @javax.annotation.Nullable
  public Boolean getDenyAll() {
    return denyAll;
  }

  public void setDenyAll(Boolean denyAll) {
    this.denyAll = denyAll;
  }


  public GoogleCloudAssetV1Rule enforce(Boolean enforce) {
    this.enforce = enforce;
    return this;
  }

  /**
   * If &#x60;true&#x60;, then the &#x60;Policy&#x60; is enforced. If &#x60;false&#x60;, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.
   * @return enforce
   */
  @javax.annotation.Nullable
  public Boolean getEnforce() {
    return enforce;
  }

  public void setEnforce(Boolean enforce) {
    this.enforce = enforce;
  }


  public GoogleCloudAssetV1Rule values(GoogleCloudAssetV1StringValues values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public GoogleCloudAssetV1StringValues getValues() {
    return values;
  }

  public void setValues(GoogleCloudAssetV1StringValues values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudAssetV1Rule googleCloudAssetV1Rule = (GoogleCloudAssetV1Rule) o;
    return Objects.equals(this.allowAll, googleCloudAssetV1Rule.allowAll) &&
        Objects.equals(this.condition, googleCloudAssetV1Rule.condition) &&
        Objects.equals(this.conditionEvaluation, googleCloudAssetV1Rule.conditionEvaluation) &&
        Objects.equals(this.denyAll, googleCloudAssetV1Rule.denyAll) &&
        Objects.equals(this.enforce, googleCloudAssetV1Rule.enforce) &&
        Objects.equals(this.values, googleCloudAssetV1Rule.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAll, condition, conditionEvaluation, denyAll, enforce, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudAssetV1Rule {\n");
    sb.append("    allowAll: ").append(toIndentedString(allowAll)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionEvaluation: ").append(toIndentedString(conditionEvaluation)).append("\n");
    sb.append("    denyAll: ").append(toIndentedString(denyAll)).append("\n");
    sb.append("    enforce: ").append(toIndentedString(enforce)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowAll");
    openapiFields.add("condition");
    openapiFields.add("conditionEvaluation");
    openapiFields.add("denyAll");
    openapiFields.add("enforce");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudAssetV1Rule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudAssetV1Rule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudAssetV1Rule is not found in the empty JSON string", GoogleCloudAssetV1Rule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudAssetV1Rule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudAssetV1Rule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        Expr.validateJsonElement(jsonObj.get("condition"));
      }
      // validate the optional field `conditionEvaluation`
      if (jsonObj.get("conditionEvaluation") != null && !jsonObj.get("conditionEvaluation").isJsonNull()) {
        ConditionEvaluation.validateJsonElement(jsonObj.get("conditionEvaluation"));
      }
      // validate the optional field `values`
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        GoogleCloudAssetV1StringValues.validateJsonElement(jsonObj.get("values"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudAssetV1Rule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudAssetV1Rule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudAssetV1Rule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudAssetV1Rule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudAssetV1Rule>() {
           @Override
           public void write(JsonWriter out, GoogleCloudAssetV1Rule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudAssetV1Rule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudAssetV1Rule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudAssetV1Rule
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudAssetV1Rule
   */
  public static GoogleCloudAssetV1Rule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudAssetV1Rule.class);
  }

  /**
   * Convert an instance of GoogleCloudAssetV1Rule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

