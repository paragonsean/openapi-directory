/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DEPRECATED. This message only presents for the purpose of backward-compatibility. The server will never populate this message in responses. The relationship attributes which include &#x60;type&#x60;, &#x60;source_resource_type&#x60;, &#x60;target_resource_type&#x60; and &#x60;action&#x60;.
 * @deprecated
 */
@Deprecated
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipAttributes {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_TYPE = "sourceResourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_TYPE)
  private String sourceResourceType;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_TYPE = "targetResourceType";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_TYPE)
  private String targetResourceType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RelationshipAttributes() {
  }

  public RelationshipAttributes action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The detail of the relationship, e.g. &#x60;contains&#x60;, &#x60;attaches&#x60;
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public RelationshipAttributes sourceResourceType(String sourceResourceType) {
    this.sourceResourceType = sourceResourceType;
    return this;
  }

  /**
   * The source asset type. Example: &#x60;compute.googleapis.com/Instance&#x60;
   * @return sourceResourceType
   */
  @javax.annotation.Nullable
  public String getSourceResourceType() {
    return sourceResourceType;
  }

  public void setSourceResourceType(String sourceResourceType) {
    this.sourceResourceType = sourceResourceType;
  }


  public RelationshipAttributes targetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
    return this;
  }

  /**
   * The target asset type. Example: &#x60;compute.googleapis.com/Disk&#x60;
   * @return targetResourceType
   */
  @javax.annotation.Nullable
  public String getTargetResourceType() {
    return targetResourceType;
  }

  public void setTargetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
  }


  public RelationshipAttributes type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The unique identifier of the relationship type. Example: &#x60;INSTANCE_TO_INSTANCEGROUP&#x60;
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipAttributes relationshipAttributes = (RelationshipAttributes) o;
    return Objects.equals(this.action, relationshipAttributes.action) &&
        Objects.equals(this.sourceResourceType, relationshipAttributes.sourceResourceType) &&
        Objects.equals(this.targetResourceType, relationshipAttributes.targetResourceType) &&
        Objects.equals(this.type, relationshipAttributes.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, sourceResourceType, targetResourceType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipAttributes {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    sourceResourceType: ").append(toIndentedString(sourceResourceType)).append("\n");
    sb.append("    targetResourceType: ").append(toIndentedString(targetResourceType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("sourceResourceType");
    openapiFields.add("targetResourceType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipAttributes is not found in the empty JSON string", RelationshipAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("sourceResourceType") != null && !jsonObj.get("sourceResourceType").isJsonNull()) && !jsonObj.get("sourceResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceResourceType").toString()));
      }
      if ((jsonObj.get("targetResourceType") != null && !jsonObj.get("targetResourceType").isJsonNull()) && !jsonObj.get("targetResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipAttributes>() {
           @Override
           public void write(JsonWriter out, RelationshipAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipAttributes
   * @throws IOException if the JSON string is invalid with respect to RelationshipAttributes
   */
  public static RelationshipAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipAttributes.class);
  }

  /**
   * Convert an instance of RelationshipAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

