/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Expr;
import org.openapitools.client.model.FeedOutputConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An asset feed used to export asset updates to a destinations. An asset feed filter controls what updates are exported. The asset feed must be created within a project, organization, or folder. Supported destinations are: Pub/Sub topics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:36:52.366195-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feed {
  public static final String SERIALIZED_NAME_ASSET_NAMES = "assetNames";
  @SerializedName(SERIALIZED_NAME_ASSET_NAMES)
  private List<String> assetNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSET_TYPES = "assetTypes";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPES)
  private List<String> assetTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private Expr condition;

  /**
   * Asset content type. If not specified, no content but the asset name and type will be returned.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    CONTENT_TYPE_UNSPECIFIED("CONTENT_TYPE_UNSPECIFIED"),
    
    RESOURCE("RESOURCE"),
    
    IAM_POLICY("IAM_POLICY"),
    
    ORG_POLICY("ORG_POLICY"),
    
    ACCESS_POLICY("ACCESS_POLICY"),
    
    OS_INVENTORY("OS_INVENTORY"),
    
    RELATIONSHIP("RELATIONSHIP");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private ContentTypeEnum contentType;

  public static final String SERIALIZED_NAME_FEED_OUTPUT_CONFIG = "feedOutputConfig";
  @SerializedName(SERIALIZED_NAME_FEED_OUTPUT_CONFIG)
  private FeedOutputConfig feedOutputConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELATIONSHIP_TYPES = "relationshipTypes";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_TYPES)
  private List<String> relationshipTypes = new ArrayList<>();

  public Feed() {
  }

  public Feed assetNames(List<String> assetNames) {
    this.assetNames = assetNames;
    return this;
  }

  public Feed addAssetNamesItem(String assetNamesItem) {
    if (this.assetNames == null) {
      this.assetNames = new ArrayList<>();
    }
    this.assetNames.add(assetNamesItem);
    return this;
  }

  /**
   * A list of the full names of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: &#x60;//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1&#x60;. For a list of the full names for supported asset types, see [Resource name format](/asset-inventory/docs/resource-name-format).
   * @return assetNames
   */
  @javax.annotation.Nullable
  public List<String> getAssetNames() {
    return assetNames;
  }

  public void setAssetNames(List<String> assetNames) {
    this.assetNames = assetNames;
  }


  public Feed assetTypes(List<String> assetTypes) {
    this.assetTypes = assetTypes;
    return this;
  }

  public Feed addAssetTypesItem(String assetTypesItem) {
    if (this.assetTypes == null) {
      this.assetTypes = new ArrayList<>();
    }
    this.assetTypes.add(assetTypesItem);
    return this;
  }

  /**
   * A list of types of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: &#x60;\&quot;compute.googleapis.com/Disk\&quot;&#x60; For a list of all supported asset types, see [Supported asset types](/asset-inventory/docs/supported-asset-types).
   * @return assetTypes
   */
  @javax.annotation.Nullable
  public List<String> getAssetTypes() {
    return assetTypes;
  }

  public void setAssetTypes(List<String> assetTypes) {
    this.assetTypes = assetTypes;
  }


  public Feed condition(Expr condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public Expr getCondition() {
    return condition;
  }

  public void setCondition(Expr condition) {
    this.condition = condition;
  }


  public Feed contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Asset content type. If not specified, no content but the asset name and type will be returned.
   * @return contentType
   */
  @javax.annotation.Nullable
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  public Feed feedOutputConfig(FeedOutputConfig feedOutputConfig) {
    this.feedOutputConfig = feedOutputConfig;
    return this;
  }

  /**
   * Get feedOutputConfig
   * @return feedOutputConfig
   */
  @javax.annotation.Nullable
  public FeedOutputConfig getFeedOutputConfig() {
    return feedOutputConfig;
  }

  public void setFeedOutputConfig(FeedOutputConfig feedOutputConfig) {
    this.feedOutputConfig = feedOutputConfig;
  }


  public Feed name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Feed relationshipTypes(List<String> relationshipTypes) {
    this.relationshipTypes = relationshipTypes;
    return this;
  }

  public Feed addRelationshipTypesItem(String relationshipTypesItem) {
    if (this.relationshipTypes == null) {
      this.relationshipTypes = new ArrayList<>();
    }
    this.relationshipTypes.add(relationshipTypesItem);
    return this;
  }

  /**
   * A list of relationship types to output, for example: &#x60;INSTANCE_TO_INSTANCEGROUP&#x60;. This field should only be specified if content_type&#x3D;RELATIONSHIP. * If specified: it outputs specified relationship updates on the [asset_names] or the [asset_types]. It returns an error if any of the [relationship_types] doesn&#39;t belong to the supported relationship types of the [asset_names] or [asset_types], or any of the [asset_names] or the [asset_types] doesn&#39;t belong to the source types of the [relationship_types]. * Otherwise: it outputs the supported relationships of the types of [asset_names] and [asset_types] or returns an error if any of the [asset_names] or the [asset_types] has no replationship support. See [Introduction to Cloud Asset Inventory](https://cloud.google.com/asset-inventory/docs/overview) for all supported asset types and relationship types.
   * @return relationshipTypes
   */
  @javax.annotation.Nullable
  public List<String> getRelationshipTypes() {
    return relationshipTypes;
  }

  public void setRelationshipTypes(List<String> relationshipTypes) {
    this.relationshipTypes = relationshipTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feed feed = (Feed) o;
    return Objects.equals(this.assetNames, feed.assetNames) &&
        Objects.equals(this.assetTypes, feed.assetTypes) &&
        Objects.equals(this.condition, feed.condition) &&
        Objects.equals(this.contentType, feed.contentType) &&
        Objects.equals(this.feedOutputConfig, feed.feedOutputConfig) &&
        Objects.equals(this.name, feed.name) &&
        Objects.equals(this.relationshipTypes, feed.relationshipTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetNames, assetTypes, condition, contentType, feedOutputConfig, name, relationshipTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feed {\n");
    sb.append("    assetNames: ").append(toIndentedString(assetNames)).append("\n");
    sb.append("    assetTypes: ").append(toIndentedString(assetTypes)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    feedOutputConfig: ").append(toIndentedString(feedOutputConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    relationshipTypes: ").append(toIndentedString(relationshipTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetNames");
    openapiFields.add("assetTypes");
    openapiFields.add("condition");
    openapiFields.add("contentType");
    openapiFields.add("feedOutputConfig");
    openapiFields.add("name");
    openapiFields.add("relationshipTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feed is not found in the empty JSON string", Feed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assetNames") != null && !jsonObj.get("assetNames").isJsonNull() && !jsonObj.get("assetNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetNames` to be an array in the JSON string but got `%s`", jsonObj.get("assetNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("assetTypes") != null && !jsonObj.get("assetTypes").isJsonNull() && !jsonObj.get("assetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("assetTypes").toString()));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        Expr.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the optional field `contentType`
      if (jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) {
        ContentTypeEnum.validateJsonElement(jsonObj.get("contentType"));
      }
      // validate the optional field `feedOutputConfig`
      if (jsonObj.get("feedOutputConfig") != null && !jsonObj.get("feedOutputConfig").isJsonNull()) {
        FeedOutputConfig.validateJsonElement(jsonObj.get("feedOutputConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relationshipTypes") != null && !jsonObj.get("relationshipTypes").isJsonNull() && !jsonObj.get("relationshipTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipTypes` to be an array in the JSON string but got `%s`", jsonObj.get("relationshipTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feed.class));

       return (TypeAdapter<T>) new TypeAdapter<Feed>() {
           @Override
           public void write(JsonWriter out, Feed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feed
   * @throws IOException if the JSON string is invalid with respect to Feed
   */
  public static Feed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feed.class);
  }

  /**
   * Convert an instance of Feed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

