/*
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalyzeIamPolicyLongrunningRequest;
import org.openapitools.client.model.AnalyzeIamPolicyResponse;
import org.openapitools.client.model.AnalyzeMoveResponse;
import org.openapitools.client.model.AnalyzeOrgPoliciesResponse;
import org.openapitools.client.model.AnalyzeOrgPolicyGovernedAssetsResponse;
import org.openapitools.client.model.AnalyzeOrgPolicyGovernedContainersResponse;
import org.openapitools.client.model.BatchGetAssetsHistoryResponse;
import org.openapitools.client.model.ExportAssetsRequest;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.QueryAssetsRequest;
import org.openapitools.client.model.QueryAssetsResponse;
import org.openapitools.client.model.SearchAllIamPoliciesResponse;
import org.openapitools.client.model.SearchAllResourcesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1Api
 */
@Disabled
public class V1ApiTest {

    private final V1Api api = new V1Api();

    /**
     * Analyzes IAM policies to answer which identities have what accesses on which resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeIamPolicyTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> analysisQueryAccessSelectorPermissions = null;
        List<String> analysisQueryAccessSelectorRoles = null;
        String analysisQueryConditionContextAccessTime = null;
        String analysisQueryIdentitySelectorIdentity = null;
        Boolean analysisQueryOptionsAnalyzeServiceAccountImpersonation = null;
        Boolean analysisQueryOptionsExpandGroups = null;
        Boolean analysisQueryOptionsExpandResources = null;
        Boolean analysisQueryOptionsExpandRoles = null;
        Boolean analysisQueryOptionsOutputGroupEdges = null;
        Boolean analysisQueryOptionsOutputResourceEdges = null;
        String analysisQueryResourceSelectorFullResourceName = null;
        String executionTimeout = null;
        String savedAnalysisQuery = null;
        AnalyzeIamPolicyResponse response = api.cloudassetAnalyzeIamPolicy(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, analysisQueryAccessSelectorPermissions, analysisQueryAccessSelectorRoles, analysisQueryConditionContextAccessTime, analysisQueryIdentitySelectorIdentity, analysisQueryOptionsAnalyzeServiceAccountImpersonation, analysisQueryOptionsExpandGroups, analysisQueryOptionsExpandResources, analysisQueryOptionsExpandRoles, analysisQueryOptionsOutputGroupEdges, analysisQueryOptionsOutputResourceEdges, analysisQueryResourceSelectorFullResourceName, executionTimeout, savedAnalysisQuery);
        // TODO: test validations
    }

    /**
     * Analyzes IAM policies asynchronously to answer which identities have what accesses on which resources, and writes the analysis results to a Google Cloud Storage or a BigQuery destination. For Cloud Storage destination, the output format is the JSON format that represents a AnalyzeIamPolicyResponse. This method implements the google.longrunning.Operation, which allows you to track the operation status. We recommend intervals of at least 2 seconds with exponential backoff retry to poll the operation result. The metadata contains the metadata for the long-running operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeIamPolicyLongrunningTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AnalyzeIamPolicyLongrunningRequest analyzeIamPolicyLongrunningRequest = null;
        Operation response = api.cloudassetAnalyzeIamPolicyLongrunning(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, analyzeIamPolicyLongrunningRequest);
        // TODO: test validations
    }

    /**
     * Analyze moving a resource to a specified destination without kicking off the actual move. The analysis is best effort depending on the user&#39;s permissions of viewing different hierarchical policies and configurations. The policies and configuration are subject to change before the actual resource migration takes place.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeMoveTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String destinationParent = null;
        String view = null;
        AnalyzeMoveResponse response = api.cloudassetAnalyzeMove(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, destinationParent, view);
        // TODO: test validations
    }

    /**
     * Analyzes organization policies under a scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeOrgPoliciesTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String constraint = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        AnalyzeOrgPoliciesResponse response = api.cloudassetAnalyzeOrgPolicies(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, constraint, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Analyzes organization policies governed assets (Google Cloud resources or policies) under a scope. This RPC supports custom constraints and the following canned constraints: * constraints/ainotebooks.accessMode * constraints/ainotebooks.disableFileDownloads * constraints/ainotebooks.disableRootAccess * constraints/ainotebooks.disableTerminal * constraints/ainotebooks.environmentOptions * constraints/ainotebooks.requireAutoUpgradeSchedule * constraints/ainotebooks.restrictVpcNetworks * constraints/compute.disableGuestAttributesAccess * constraints/compute.disableInstanceDataAccessApis * constraints/compute.disableNestedVirtualization * constraints/compute.disableSerialPortAccess * constraints/compute.disableSerialPortLogging * constraints/compute.disableVpcExternalIpv6 * constraints/compute.requireOsLogin * constraints/compute.requireShieldedVm * constraints/compute.restrictLoadBalancerCreationForTypes * constraints/compute.restrictProtocolForwardingCreationForTypes * constraints/compute.restrictXpnProjectLienRemoval * constraints/compute.setNewProjectDefaultToZonalDNSOnly * constraints/compute.skipDefaultNetworkCreation * constraints/compute.trustedImageProjects * constraints/compute.vmCanIpForward * constraints/compute.vmExternalIpAccess * constraints/gcp.detailedAuditLoggingMode * constraints/gcp.resourceLocations * constraints/iam.allowedPolicyMemberDomains * constraints/iam.automaticIamGrantsForDefaultServiceAccounts * constraints/iam.disableServiceAccountCreation * constraints/iam.disableServiceAccountKeyCreation * constraints/iam.disableServiceAccountKeyUpload * constraints/iam.restrictCrossProjectServiceAccountLienRemoval * constraints/iam.serviceAccountKeyExpiryHours * constraints/resourcemanager.accessBoundaries * constraints/resourcemanager.allowedExportDestinations * constraints/sql.restrictAuthorizedNetworks * constraints/sql.restrictNoncompliantDiagnosticDataAccess * constraints/sql.restrictNoncompliantResourceCreation * constraints/sql.restrictPublicIp * constraints/storage.publicAccessPrevention * constraints/storage.restrictAuthTypes * constraints/storage.uniformBucketLevelAccess This RPC only returns either resources of types [supported by search APIs](https://cloud.google.com/asset-inventory/docs/supported-asset-types) or IAM policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeOrgPolicyGovernedAssetsTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String constraint = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        AnalyzeOrgPolicyGovernedAssetsResponse response = api.cloudassetAnalyzeOrgPolicyGovernedAssets(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, constraint, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Analyzes organization policies governed containers (projects, folders or organization) under a scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetAnalyzeOrgPolicyGovernedContainersTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String constraint = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        AnalyzeOrgPolicyGovernedContainersResponse response = api.cloudassetAnalyzeOrgPolicyGovernedContainers(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, constraint, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetBatchGetAssetsHistoryTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> assetNames = null;
        String contentType = null;
        String readTimeWindowEndTime = null;
        String readTimeWindowStartTime = null;
        List<String> relationshipTypes = null;
        BatchGetAssetsHistoryResponse response = api.cloudassetBatchGetAssetsHistory(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assetNames, contentType, readTimeWindowEndTime, readTimeWindowStartTime, relationshipTypes);
        // TODO: test validations
    }

    /**
     * Exports assets with time and resource types to a given Cloud Storage location/BigQuery table. For Cloud Storage location destinations, the output format is newline-delimited JSON. Each line represents a google.cloud.asset.v1.Asset in the JSON format; for BigQuery table destinations, the output table stores the fields in asset Protobuf as columns. This API implements the google.longrunning.Operation API, which allows you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetExportAssetsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExportAssetsRequest exportAssetsRequest = null;
        Operation response = api.cloudassetExportAssets(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, exportAssetsRequest);
        // TODO: test validations
    }

    /**
     * Issue a job that queries assets using a SQL statement compatible with [BigQuery SQL](https://cloud.google.com/bigquery/docs/introduction-sql). If the query execution finishes within timeout and there&#39;s no pagination, the full query results will be returned in the &#x60;QueryAssetsResponse&#x60;. Otherwise, full query results can be obtained by issuing extra requests with the &#x60;job_reference&#x60; from the a previous &#x60;QueryAssets&#x60; call. Note, the query result has approximately 10 GB limitation enforced by [BigQuery](https://cloud.google.com/bigquery/docs/best-practices-performance-output). Queries return larger results will result in errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetQueryAssetsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryAssetsRequest queryAssetsRequest = null;
        QueryAssetsResponse response = api.cloudassetQueryAssets(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryAssetsRequest);
        // TODO: test validations
    }

    /**
     * Searches all IAM policies within the specified scope, such as a project, folder, or organization. The caller must be granted the &#x60;cloudasset.assets.searchAllIamPolicies&#x60; permission on the desired scope, otherwise the request will be rejected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetSearchAllIamPoliciesTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> assetTypes = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        SearchAllIamPoliciesResponse response = api.cloudassetSearchAllIamPolicies(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assetTypes, orderBy, pageSize, pageToken, query);
        // TODO: test validations
    }

    /**
     * Searches all Google Cloud resources within the specified scope, such as a project, folder, or organization. The caller must be granted the &#x60;cloudasset.assets.searchAllResources&#x60; permission on the desired scope, otherwise the request will be rejected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudassetSearchAllResourcesTest() throws ApiException {
        String scope = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> assetTypes = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String query = null;
        String readMask = null;
        SearchAllResourcesResponse response = api.cloudassetSearchAllResources(scope, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, assetTypes, orderBy, pageSize, pageToken, query, readMask);
        // TODO: test validations
    }

}
