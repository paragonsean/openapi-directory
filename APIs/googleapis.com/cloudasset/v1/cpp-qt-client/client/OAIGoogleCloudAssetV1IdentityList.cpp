/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1IdentityList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1IdentityList::OAIGoogleCloudAssetV1IdentityList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1IdentityList::OAIGoogleCloudAssetV1IdentityList() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1IdentityList::~OAIGoogleCloudAssetV1IdentityList() {}

void OAIGoogleCloudAssetV1IdentityList::initializeModel() {

    m_group_edges_isSet = false;
    m_group_edges_isValid = false;

    m_identities_isSet = false;
    m_identities_isValid = false;
}

void OAIGoogleCloudAssetV1IdentityList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1IdentityList::fromJsonObject(QJsonObject json) {

    m_group_edges_isValid = ::OpenAPI::fromJsonValue(m_group_edges, json[QString("groupEdges")]);
    m_group_edges_isSet = !json[QString("groupEdges")].isNull() && m_group_edges_isValid;

    m_identities_isValid = ::OpenAPI::fromJsonValue(m_identities, json[QString("identities")]);
    m_identities_isSet = !json[QString("identities")].isNull() && m_identities_isValid;
}

QString OAIGoogleCloudAssetV1IdentityList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1IdentityList::asJsonObject() const {
    QJsonObject obj;
    if (m_group_edges.size() > 0) {
        obj.insert(QString("groupEdges"), ::OpenAPI::toJsonValue(m_group_edges));
    }
    if (m_identities.size() > 0) {
        obj.insert(QString("identities"), ::OpenAPI::toJsonValue(m_identities));
    }
    return obj;
}

QList<OAIGoogleCloudAssetV1Edge> OAIGoogleCloudAssetV1IdentityList::getGroupEdges() const {
    return m_group_edges;
}
void OAIGoogleCloudAssetV1IdentityList::setGroupEdges(const QList<OAIGoogleCloudAssetV1Edge> &group_edges) {
    m_group_edges = group_edges;
    m_group_edges_isSet = true;
}

bool OAIGoogleCloudAssetV1IdentityList::is_group_edges_Set() const{
    return m_group_edges_isSet;
}

bool OAIGoogleCloudAssetV1IdentityList::is_group_edges_Valid() const{
    return m_group_edges_isValid;
}

QList<OAIGoogleCloudAssetV1Identity> OAIGoogleCloudAssetV1IdentityList::getIdentities() const {
    return m_identities;
}
void OAIGoogleCloudAssetV1IdentityList::setIdentities(const QList<OAIGoogleCloudAssetV1Identity> &identities) {
    m_identities = identities;
    m_identities_isSet = true;
}

bool OAIGoogleCloudAssetV1IdentityList::is_identities_Set() const{
    return m_identities_isSet;
}

bool OAIGoogleCloudAssetV1IdentityList::is_identities_Valid() const{
    return m_identities_isValid;
}

bool OAIGoogleCloudAssetV1IdentityList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_edges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1IdentityList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
