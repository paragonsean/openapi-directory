/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResult::OAIQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResult::OAIQueryResult() {
    this->initializeModel();
}

OAIQueryResult::~OAIQueryResult() {}

void OAIQueryResult::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_total_rows_isSet = false;
    m_total_rows_isValid = false;
}

void OAIQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResult::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_total_rows_isValid = ::OpenAPI::fromJsonValue(m_total_rows, json[QString("totalRows")]);
    m_total_rows_isSet = !json[QString("totalRows")].isNull() && m_total_rows_isValid;
}

QString OAIQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_total_rows_isSet) {
        obj.insert(QString("totalRows"), ::OpenAPI::toJsonValue(m_total_rows));
    }
    return obj;
}

QString OAIQueryResult::getNextPageToken() const {
    return m_next_page_token;
}
void OAIQueryResult::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIQueryResult::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIQueryResult::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<QMap<QString, QJsonValue>> OAIQueryResult::getRows() const {
    return m_rows;
}
void OAIQueryResult::setRows(const QList<QMap<QString, QJsonValue>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIQueryResult::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIQueryResult::is_rows_Valid() const{
    return m_rows_isValid;
}

OAITableSchema OAIQueryResult::getSchema() const {
    return m_schema;
}
void OAIQueryResult::setSchema(const OAITableSchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIQueryResult::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIQueryResult::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIQueryResult::getTotalRows() const {
    return m_total_rows;
}
void OAIQueryResult::setTotalRows(const QString &total_rows) {
    m_total_rows = total_rows;
    m_total_rows_isSet = true;
}

bool OAIQueryResult::is_total_rows_Set() const{
    return m_total_rows_isSet;
}

bool OAIQueryResult::is_total_rows_Valid() const{
    return m_total_rows_isValid;
}

bool OAIQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
