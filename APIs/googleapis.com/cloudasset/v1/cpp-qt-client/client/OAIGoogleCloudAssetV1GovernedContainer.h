/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudAssetV1GovernedContainer.h
 *
 * The organization/folder/project resource governed by organization policies of AnalyzeOrgPolicyGovernedContainersRequest.constraint.
 */

#ifndef OAIGoogleCloudAssetV1GovernedContainer_H
#define OAIGoogleCloudAssetV1GovernedContainer_H

#include <QJsonObject>

#include "OAIAnalyzerOrgPolicy.h"
#include "OAIEffectiveTagDetails.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnalyzerOrgPolicy;
class OAIEffectiveTagDetails;

class OAIGoogleCloudAssetV1GovernedContainer : public OAIObject {
public:
    OAIGoogleCloudAssetV1GovernedContainer();
    OAIGoogleCloudAssetV1GovernedContainer(QString json);
    ~OAIGoogleCloudAssetV1GovernedContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAnalyzerOrgPolicy getConsolidatedPolicy() const;
    void setConsolidatedPolicy(const OAIAnalyzerOrgPolicy &consolidated_policy);
    bool is_consolidated_policy_Set() const;
    bool is_consolidated_policy_Valid() const;

    QList<OAIEffectiveTagDetails> getEffectiveTags() const;
    void setEffectiveTags(const QList<OAIEffectiveTagDetails> &effective_tags);
    bool is_effective_tags_Set() const;
    bool is_effective_tags_Valid() const;

    QList<QString> getFolders() const;
    void setFolders(const QList<QString> &folders);
    bool is_folders_Set() const;
    bool is_folders_Valid() const;

    QString getFullResourceName() const;
    void setFullResourceName(const QString &full_resource_name);
    bool is_full_resource_name_Set() const;
    bool is_full_resource_name_Valid() const;

    QString getOrganization() const;
    void setOrganization(const QString &organization);
    bool is_organization_Set() const;
    bool is_organization_Valid() const;

    QString getParent() const;
    void setParent(const QString &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    QList<OAIAnalyzerOrgPolicy> getPolicyBundle() const;
    void setPolicyBundle(const QList<OAIAnalyzerOrgPolicy> &policy_bundle);
    bool is_policy_bundle_Set() const;
    bool is_policy_bundle_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAnalyzerOrgPolicy m_consolidated_policy;
    bool m_consolidated_policy_isSet;
    bool m_consolidated_policy_isValid;

    QList<OAIEffectiveTagDetails> m_effective_tags;
    bool m_effective_tags_isSet;
    bool m_effective_tags_isValid;

    QList<QString> m_folders;
    bool m_folders_isSet;
    bool m_folders_isValid;

    QString m_full_resource_name;
    bool m_full_resource_name_isSet;
    bool m_full_resource_name_isValid;

    QString m_organization;
    bool m_organization_isSet;
    bool m_organization_isValid;

    QString m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;

    QList<OAIAnalyzerOrgPolicy> m_policy_bundle;
    bool m_policy_bundle_isSet;
    bool m_policy_bundle_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudAssetV1GovernedContainer)

#endif // OAIGoogleCloudAssetV1GovernedContainer_H
