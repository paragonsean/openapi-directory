/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsQuickFixEngineeringPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsQuickFixEngineeringPackage::OAIWindowsQuickFixEngineeringPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsQuickFixEngineeringPackage::OAIWindowsQuickFixEngineeringPackage() {
    this->initializeModel();
}

OAIWindowsQuickFixEngineeringPackage::~OAIWindowsQuickFixEngineeringPackage() {}

void OAIWindowsQuickFixEngineeringPackage::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hot_fix_id_isSet = false;
    m_hot_fix_id_isValid = false;

    m_install_time_isSet = false;
    m_install_time_isValid = false;
}

void OAIWindowsQuickFixEngineeringPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsQuickFixEngineeringPackage::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hot_fix_id_isValid = ::OpenAPI::fromJsonValue(m_hot_fix_id, json[QString("hotFixId")]);
    m_hot_fix_id_isSet = !json[QString("hotFixId")].isNull() && m_hot_fix_id_isValid;

    m_install_time_isValid = ::OpenAPI::fromJsonValue(m_install_time, json[QString("installTime")]);
    m_install_time_isSet = !json[QString("installTime")].isNull() && m_install_time_isValid;
}

QString OAIWindowsQuickFixEngineeringPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsQuickFixEngineeringPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hot_fix_id_isSet) {
        obj.insert(QString("hotFixId"), ::OpenAPI::toJsonValue(m_hot_fix_id));
    }
    if (m_install_time_isSet) {
        obj.insert(QString("installTime"), ::OpenAPI::toJsonValue(m_install_time));
    }
    return obj;
}

QString OAIWindowsQuickFixEngineeringPackage::getCaption() const {
    return m_caption;
}
void OAIWindowsQuickFixEngineeringPackage::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIWindowsQuickFixEngineeringPackage::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIWindowsQuickFixEngineeringPackage::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIWindowsQuickFixEngineeringPackage::getDescription() const {
    return m_description;
}
void OAIWindowsQuickFixEngineeringPackage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWindowsQuickFixEngineeringPackage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWindowsQuickFixEngineeringPackage::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWindowsQuickFixEngineeringPackage::getHotFixId() const {
    return m_hot_fix_id;
}
void OAIWindowsQuickFixEngineeringPackage::setHotFixId(const QString &hot_fix_id) {
    m_hot_fix_id = hot_fix_id;
    m_hot_fix_id_isSet = true;
}

bool OAIWindowsQuickFixEngineeringPackage::is_hot_fix_id_Set() const{
    return m_hot_fix_id_isSet;
}

bool OAIWindowsQuickFixEngineeringPackage::is_hot_fix_id_Valid() const{
    return m_hot_fix_id_isValid;
}

QString OAIWindowsQuickFixEngineeringPackage::getInstallTime() const {
    return m_install_time;
}
void OAIWindowsQuickFixEngineeringPackage::setInstallTime(const QString &install_time) {
    m_install_time = install_time;
    m_install_time_isSet = true;
}

bool OAIWindowsQuickFixEngineeringPackage::is_install_time_Set() const{
    return m_install_time_isSet;
}

bool OAIWindowsQuickFixEngineeringPackage::is_install_time_Valid() const{
    return m_install_time_isValid;
}

bool OAIWindowsQuickFixEngineeringPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_fix_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsQuickFixEngineeringPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
