/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedResources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedResources::OAIRelatedResources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedResources::OAIRelatedResources() {
    this->initializeModel();
}

OAIRelatedResources::~OAIRelatedResources() {}

void OAIRelatedResources::initializeModel() {

    m_related_resources_isSet = false;
    m_related_resources_isValid = false;
}

void OAIRelatedResources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedResources::fromJsonObject(QJsonObject json) {

    m_related_resources_isValid = ::OpenAPI::fromJsonValue(m_related_resources, json[QString("relatedResources")]);
    m_related_resources_isSet = !json[QString("relatedResources")].isNull() && m_related_resources_isValid;
}

QString OAIRelatedResources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedResources::asJsonObject() const {
    QJsonObject obj;
    if (m_related_resources.size() > 0) {
        obj.insert(QString("relatedResources"), ::OpenAPI::toJsonValue(m_related_resources));
    }
    return obj;
}

QList<OAIRelatedResource> OAIRelatedResources::getRelatedResources() const {
    return m_related_resources;
}
void OAIRelatedResources::setRelatedResources(const QList<OAIRelatedResource> &related_resources) {
    m_related_resources = related_resources;
    m_related_resources_isSet = true;
}

bool OAIRelatedResources::is_related_resources_Set() const{
    return m_related_resources_isSet;
}

bool OAIRelatedResources::is_related_resources_Valid() const{
    return m_related_resources_isValid;
}

bool OAIRelatedResources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_related_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedResources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
