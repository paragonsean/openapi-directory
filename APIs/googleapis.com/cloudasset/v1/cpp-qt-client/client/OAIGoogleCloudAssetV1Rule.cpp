/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1Rule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1Rule::OAIGoogleCloudAssetV1Rule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1Rule::OAIGoogleCloudAssetV1Rule() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1Rule::~OAIGoogleCloudAssetV1Rule() {}

void OAIGoogleCloudAssetV1Rule::initializeModel() {

    m_allow_all_isSet = false;
    m_allow_all_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_condition_evaluation_isSet = false;
    m_condition_evaluation_isValid = false;

    m_deny_all_isSet = false;
    m_deny_all_isValid = false;

    m_enforce_isSet = false;
    m_enforce_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIGoogleCloudAssetV1Rule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1Rule::fromJsonObject(QJsonObject json) {

    m_allow_all_isValid = ::OpenAPI::fromJsonValue(m_allow_all, json[QString("allowAll")]);
    m_allow_all_isSet = !json[QString("allowAll")].isNull() && m_allow_all_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_condition_evaluation_isValid = ::OpenAPI::fromJsonValue(m_condition_evaluation, json[QString("conditionEvaluation")]);
    m_condition_evaluation_isSet = !json[QString("conditionEvaluation")].isNull() && m_condition_evaluation_isValid;

    m_deny_all_isValid = ::OpenAPI::fromJsonValue(m_deny_all, json[QString("denyAll")]);
    m_deny_all_isSet = !json[QString("denyAll")].isNull() && m_deny_all_isValid;

    m_enforce_isValid = ::OpenAPI::fromJsonValue(m_enforce, json[QString("enforce")]);
    m_enforce_isSet = !json[QString("enforce")].isNull() && m_enforce_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIGoogleCloudAssetV1Rule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1Rule::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_all_isSet) {
        obj.insert(QString("allowAll"), ::OpenAPI::toJsonValue(m_allow_all));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_condition_evaluation.isSet()) {
        obj.insert(QString("conditionEvaluation"), ::OpenAPI::toJsonValue(m_condition_evaluation));
    }
    if (m_deny_all_isSet) {
        obj.insert(QString("denyAll"), ::OpenAPI::toJsonValue(m_deny_all));
    }
    if (m_enforce_isSet) {
        obj.insert(QString("enforce"), ::OpenAPI::toJsonValue(m_enforce));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIGoogleCloudAssetV1Rule::isAllowAll() const {
    return m_allow_all;
}
void OAIGoogleCloudAssetV1Rule::setAllowAll(const bool &allow_all) {
    m_allow_all = allow_all;
    m_allow_all_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_allow_all_Set() const{
    return m_allow_all_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_allow_all_Valid() const{
    return m_allow_all_isValid;
}

OAIExpr OAIGoogleCloudAssetV1Rule::getCondition() const {
    return m_condition;
}
void OAIGoogleCloudAssetV1Rule::setCondition(const OAIExpr &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_condition_Valid() const{
    return m_condition_isValid;
}

OAIConditionEvaluation OAIGoogleCloudAssetV1Rule::getConditionEvaluation() const {
    return m_condition_evaluation;
}
void OAIGoogleCloudAssetV1Rule::setConditionEvaluation(const OAIConditionEvaluation &condition_evaluation) {
    m_condition_evaluation = condition_evaluation;
    m_condition_evaluation_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_condition_evaluation_Set() const{
    return m_condition_evaluation_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_condition_evaluation_Valid() const{
    return m_condition_evaluation_isValid;
}

bool OAIGoogleCloudAssetV1Rule::isDenyAll() const {
    return m_deny_all;
}
void OAIGoogleCloudAssetV1Rule::setDenyAll(const bool &deny_all) {
    m_deny_all = deny_all;
    m_deny_all_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_deny_all_Set() const{
    return m_deny_all_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_deny_all_Valid() const{
    return m_deny_all_isValid;
}

bool OAIGoogleCloudAssetV1Rule::isEnforce() const {
    return m_enforce;
}
void OAIGoogleCloudAssetV1Rule::setEnforce(const bool &enforce) {
    m_enforce = enforce;
    m_enforce_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_enforce_Set() const{
    return m_enforce_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_enforce_Valid() const{
    return m_enforce_isValid;
}

OAIGoogleCloudAssetV1StringValues OAIGoogleCloudAssetV1Rule::getValues() const {
    return m_values;
}
void OAIGoogleCloudAssetV1Rule::setValues(const OAIGoogleCloudAssetV1StringValues &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIGoogleCloudAssetV1Rule::is_values_Set() const{
    return m_values_isSet;
}

bool OAIGoogleCloudAssetV1Rule::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIGoogleCloudAssetV1Rule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1Rule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
