/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAssetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAssetsResponse::OAIQueryAssetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAssetsResponse::OAIQueryAssetsResponse() {
    this->initializeModel();
}

OAIQueryAssetsResponse::~OAIQueryAssetsResponse() {}

void OAIQueryAssetsResponse::initializeModel() {

    m_done_isSet = false;
    m_done_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_job_reference_isSet = false;
    m_job_reference_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_query_result_isSet = false;
    m_query_result_isValid = false;
}

void OAIQueryAssetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAssetsResponse::fromJsonObject(QJsonObject json) {

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_job_reference_isValid = ::OpenAPI::fromJsonValue(m_job_reference, json[QString("jobReference")]);
    m_job_reference_isSet = !json[QString("jobReference")].isNull() && m_job_reference_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_query_result_isValid = ::OpenAPI::fromJsonValue(m_query_result, json[QString("queryResult")]);
    m_query_result_isSet = !json[QString("queryResult")].isNull() && m_query_result_isValid;
}

QString OAIQueryAssetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAssetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_job_reference_isSet) {
        obj.insert(QString("jobReference"), ::OpenAPI::toJsonValue(m_job_reference));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_query_result.isSet()) {
        obj.insert(QString("queryResult"), ::OpenAPI::toJsonValue(m_query_result));
    }
    return obj;
}

bool OAIQueryAssetsResponse::isDone() const {
    return m_done;
}
void OAIQueryAssetsResponse::setDone(const bool &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIQueryAssetsResponse::is_done_Set() const{
    return m_done_isSet;
}

bool OAIQueryAssetsResponse::is_done_Valid() const{
    return m_done_isValid;
}

OAIStatus OAIQueryAssetsResponse::getError() const {
    return m_error;
}
void OAIQueryAssetsResponse::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIQueryAssetsResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIQueryAssetsResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIQueryAssetsResponse::getJobReference() const {
    return m_job_reference;
}
void OAIQueryAssetsResponse::setJobReference(const QString &job_reference) {
    m_job_reference = job_reference;
    m_job_reference_isSet = true;
}

bool OAIQueryAssetsResponse::is_job_reference_Set() const{
    return m_job_reference_isSet;
}

bool OAIQueryAssetsResponse::is_job_reference_Valid() const{
    return m_job_reference_isValid;
}

OAIQueryAssetsOutputConfig OAIQueryAssetsResponse::getOutputConfig() const {
    return m_output_config;
}
void OAIQueryAssetsResponse::setOutputConfig(const OAIQueryAssetsOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIQueryAssetsResponse::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIQueryAssetsResponse::is_output_config_Valid() const{
    return m_output_config_isValid;
}

OAIQueryResult OAIQueryAssetsResponse::getQueryResult() const {
    return m_query_result;
}
void OAIQueryAssetsResponse::setQueryResult(const OAIQueryResult &query_result) {
    m_query_result = query_result;
    m_query_result_isSet = true;
}

bool OAIQueryAssetsResponse::is_query_result_Set() const{
    return m_query_result_isSet;
}

bool OAIQueryAssetsResponse::is_query_result_Valid() const{
    return m_query_result_isValid;
}

bool OAIQueryAssetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAssetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
