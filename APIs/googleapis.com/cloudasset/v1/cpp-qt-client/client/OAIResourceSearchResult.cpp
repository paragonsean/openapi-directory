/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSearchResult::OAIResourceSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSearchResult::OAIResourceSearchResult() {
    this->initializeModel();
}

OAIResourceSearchResult::~OAIResourceSearchResult() {}

void OAIResourceSearchResult::initializeModel() {

    m_additional_attributes_isSet = false;
    m_additional_attributes_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_attached_resources_isSet = false;
    m_attached_resources_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_effective_tags_isSet = false;
    m_effective_tags_isValid = false;

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_kms_keys_isSet = false;
    m_kms_keys_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_tags_isSet = false;
    m_network_tags_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_parent_asset_type_isSet = false;
    m_parent_asset_type_isValid = false;

    m_parent_full_resource_name_isSet = false;
    m_parent_full_resource_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_scc_security_marks_isSet = false;
    m_scc_security_marks_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tag_keys_isSet = false;
    m_tag_keys_isValid = false;

    m_tag_value_ids_isSet = false;
    m_tag_value_ids_isValid = false;

    m_tag_values_isSet = false;
    m_tag_values_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_versioned_resources_isSet = false;
    m_versioned_resources_isValid = false;
}

void OAIResourceSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSearchResult::fromJsonObject(QJsonObject json) {

    m_additional_attributes_isValid = ::OpenAPI::fromJsonValue(m_additional_attributes, json[QString("additionalAttributes")]);
    m_additional_attributes_isSet = !json[QString("additionalAttributes")].isNull() && m_additional_attributes_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_attached_resources_isValid = ::OpenAPI::fromJsonValue(m_attached_resources, json[QString("attachedResources")]);
    m_attached_resources_isSet = !json[QString("attachedResources")].isNull() && m_attached_resources_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_effective_tags_isValid = ::OpenAPI::fromJsonValue(m_effective_tags, json[QString("effectiveTags")]);
    m_effective_tags_isSet = !json[QString("effectiveTags")].isNull() && m_effective_tags_isValid;

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("folders")]);
    m_folders_isSet = !json[QString("folders")].isNull() && m_folders_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_kms_keys_isValid = ::OpenAPI::fromJsonValue(m_kms_keys, json[QString("kmsKeys")]);
    m_kms_keys_isSet = !json[QString("kmsKeys")].isNull() && m_kms_keys_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_tags_isValid = ::OpenAPI::fromJsonValue(m_network_tags, json[QString("networkTags")]);
    m_network_tags_isSet = !json[QString("networkTags")].isNull() && m_network_tags_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_parent_asset_type_isValid = ::OpenAPI::fromJsonValue(m_parent_asset_type, json[QString("parentAssetType")]);
    m_parent_asset_type_isSet = !json[QString("parentAssetType")].isNull() && m_parent_asset_type_isValid;

    m_parent_full_resource_name_isValid = ::OpenAPI::fromJsonValue(m_parent_full_resource_name, json[QString("parentFullResourceName")]);
    m_parent_full_resource_name_isSet = !json[QString("parentFullResourceName")].isNull() && m_parent_full_resource_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_scc_security_marks_isValid = ::OpenAPI::fromJsonValue(m_scc_security_marks, json[QString("sccSecurityMarks")]);
    m_scc_security_marks_isSet = !json[QString("sccSecurityMarks")].isNull() && m_scc_security_marks_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_tag_keys, json[QString("tagKeys")]);
    m_tag_keys_isSet = !json[QString("tagKeys")].isNull() && m_tag_keys_isValid;

    m_tag_value_ids_isValid = ::OpenAPI::fromJsonValue(m_tag_value_ids, json[QString("tagValueIds")]);
    m_tag_value_ids_isSet = !json[QString("tagValueIds")].isNull() && m_tag_value_ids_isValid;

    m_tag_values_isValid = ::OpenAPI::fromJsonValue(m_tag_values, json[QString("tagValues")]);
    m_tag_values_isSet = !json[QString("tagValues")].isNull() && m_tag_values_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_versioned_resources_isValid = ::OpenAPI::fromJsonValue(m_versioned_resources, json[QString("versionedResources")]);
    m_versioned_resources_isSet = !json[QString("versionedResources")].isNull() && m_versioned_resources_isValid;
}

QString OAIResourceSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_attributes.size() > 0) {
        obj.insert(QString("additionalAttributes"), ::OpenAPI::toJsonValue(m_additional_attributes));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_attached_resources.size() > 0) {
        obj.insert(QString("attachedResources"), ::OpenAPI::toJsonValue(m_attached_resources));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_effective_tags.size() > 0) {
        obj.insert(QString("effectiveTags"), ::OpenAPI::toJsonValue(m_effective_tags));
    }
    if (m_folders.size() > 0) {
        obj.insert(QString("folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_kms_keys.size() > 0) {
        obj.insert(QString("kmsKeys"), ::OpenAPI::toJsonValue(m_kms_keys));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_tags.size() > 0) {
        obj.insert(QString("networkTags"), ::OpenAPI::toJsonValue(m_network_tags));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_parent_asset_type_isSet) {
        obj.insert(QString("parentAssetType"), ::OpenAPI::toJsonValue(m_parent_asset_type));
    }
    if (m_parent_full_resource_name_isSet) {
        obj.insert(QString("parentFullResourceName"), ::OpenAPI::toJsonValue(m_parent_full_resource_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_relationships.size() > 0) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_scc_security_marks.size() > 0) {
        obj.insert(QString("sccSecurityMarks"), ::OpenAPI::toJsonValue(m_scc_security_marks));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tag_keys.size() > 0) {
        obj.insert(QString("tagKeys"), ::OpenAPI::toJsonValue(m_tag_keys));
    }
    if (m_tag_value_ids.size() > 0) {
        obj.insert(QString("tagValueIds"), ::OpenAPI::toJsonValue(m_tag_value_ids));
    }
    if (m_tag_values.size() > 0) {
        obj.insert(QString("tagValues"), ::OpenAPI::toJsonValue(m_tag_values));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_versioned_resources.size() > 0) {
        obj.insert(QString("versionedResources"), ::OpenAPI::toJsonValue(m_versioned_resources));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIResourceSearchResult::getAdditionalAttributes() const {
    return m_additional_attributes;
}
void OAIResourceSearchResult::setAdditionalAttributes(const QMap<QString, QJsonValue> &additional_attributes) {
    m_additional_attributes = additional_attributes;
    m_additional_attributes_isSet = true;
}

bool OAIResourceSearchResult::is_additional_attributes_Set() const{
    return m_additional_attributes_isSet;
}

bool OAIResourceSearchResult::is_additional_attributes_Valid() const{
    return m_additional_attributes_isValid;
}

QString OAIResourceSearchResult::getAssetType() const {
    return m_asset_type;
}
void OAIResourceSearchResult::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIResourceSearchResult::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIResourceSearchResult::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QList<OAIAttachedResource> OAIResourceSearchResult::getAttachedResources() const {
    return m_attached_resources;
}
void OAIResourceSearchResult::setAttachedResources(const QList<OAIAttachedResource> &attached_resources) {
    m_attached_resources = attached_resources;
    m_attached_resources_isSet = true;
}

bool OAIResourceSearchResult::is_attached_resources_Set() const{
    return m_attached_resources_isSet;
}

bool OAIResourceSearchResult::is_attached_resources_Valid() const{
    return m_attached_resources_isValid;
}

QString OAIResourceSearchResult::getCreateTime() const {
    return m_create_time;
}
void OAIResourceSearchResult::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIResourceSearchResult::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIResourceSearchResult::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIResourceSearchResult::getDescription() const {
    return m_description;
}
void OAIResourceSearchResult::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResourceSearchResult::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceSearchResult::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIResourceSearchResult::getDisplayName() const {
    return m_display_name;
}
void OAIResourceSearchResult::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIResourceSearchResult::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIResourceSearchResult::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIEffectiveTagDetails> OAIResourceSearchResult::getEffectiveTags() const {
    return m_effective_tags;
}
void OAIResourceSearchResult::setEffectiveTags(const QList<OAIEffectiveTagDetails> &effective_tags) {
    m_effective_tags = effective_tags;
    m_effective_tags_isSet = true;
}

bool OAIResourceSearchResult::is_effective_tags_Set() const{
    return m_effective_tags_isSet;
}

bool OAIResourceSearchResult::is_effective_tags_Valid() const{
    return m_effective_tags_isValid;
}

QList<QString> OAIResourceSearchResult::getFolders() const {
    return m_folders;
}
void OAIResourceSearchResult::setFolders(const QList<QString> &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAIResourceSearchResult::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAIResourceSearchResult::is_folders_Valid() const{
    return m_folders_isValid;
}

QString OAIResourceSearchResult::getKmsKey() const {
    return m_kms_key;
}
void OAIResourceSearchResult::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIResourceSearchResult::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIResourceSearchResult::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QList<QString> OAIResourceSearchResult::getKmsKeys() const {
    return m_kms_keys;
}
void OAIResourceSearchResult::setKmsKeys(const QList<QString> &kms_keys) {
    m_kms_keys = kms_keys;
    m_kms_keys_isSet = true;
}

bool OAIResourceSearchResult::is_kms_keys_Set() const{
    return m_kms_keys_isSet;
}

bool OAIResourceSearchResult::is_kms_keys_Valid() const{
    return m_kms_keys_isValid;
}

QMap<QString, QString> OAIResourceSearchResult::getLabels() const {
    return m_labels;
}
void OAIResourceSearchResult::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIResourceSearchResult::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIResourceSearchResult::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIResourceSearchResult::getLocation() const {
    return m_location;
}
void OAIResourceSearchResult::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIResourceSearchResult::is_location_Set() const{
    return m_location_isSet;
}

bool OAIResourceSearchResult::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIResourceSearchResult::getName() const {
    return m_name;
}
void OAIResourceSearchResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceSearchResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceSearchResult::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIResourceSearchResult::getNetworkTags() const {
    return m_network_tags;
}
void OAIResourceSearchResult::setNetworkTags(const QList<QString> &network_tags) {
    m_network_tags = network_tags;
    m_network_tags_isSet = true;
}

bool OAIResourceSearchResult::is_network_tags_Set() const{
    return m_network_tags_isSet;
}

bool OAIResourceSearchResult::is_network_tags_Valid() const{
    return m_network_tags_isValid;
}

QString OAIResourceSearchResult::getOrganization() const {
    return m_organization;
}
void OAIResourceSearchResult::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIResourceSearchResult::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIResourceSearchResult::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIResourceSearchResult::getParentAssetType() const {
    return m_parent_asset_type;
}
void OAIResourceSearchResult::setParentAssetType(const QString &parent_asset_type) {
    m_parent_asset_type = parent_asset_type;
    m_parent_asset_type_isSet = true;
}

bool OAIResourceSearchResult::is_parent_asset_type_Set() const{
    return m_parent_asset_type_isSet;
}

bool OAIResourceSearchResult::is_parent_asset_type_Valid() const{
    return m_parent_asset_type_isValid;
}

QString OAIResourceSearchResult::getParentFullResourceName() const {
    return m_parent_full_resource_name;
}
void OAIResourceSearchResult::setParentFullResourceName(const QString &parent_full_resource_name) {
    m_parent_full_resource_name = parent_full_resource_name;
    m_parent_full_resource_name_isSet = true;
}

bool OAIResourceSearchResult::is_parent_full_resource_name_Set() const{
    return m_parent_full_resource_name_isSet;
}

bool OAIResourceSearchResult::is_parent_full_resource_name_Valid() const{
    return m_parent_full_resource_name_isValid;
}

QString OAIResourceSearchResult::getProject() const {
    return m_project;
}
void OAIResourceSearchResult::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIResourceSearchResult::is_project_Set() const{
    return m_project_isSet;
}

bool OAIResourceSearchResult::is_project_Valid() const{
    return m_project_isValid;
}

QMap<QString, OAIRelatedResources> OAIResourceSearchResult::getRelationships() const {
    return m_relationships;
}
void OAIResourceSearchResult::setRelationships(const QMap<QString, OAIRelatedResources> &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIResourceSearchResult::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIResourceSearchResult::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QMap<QString, QString> OAIResourceSearchResult::getSccSecurityMarks() const {
    return m_scc_security_marks;
}
void OAIResourceSearchResult::setSccSecurityMarks(const QMap<QString, QString> &scc_security_marks) {
    m_scc_security_marks = scc_security_marks;
    m_scc_security_marks_isSet = true;
}

bool OAIResourceSearchResult::is_scc_security_marks_Set() const{
    return m_scc_security_marks_isSet;
}

bool OAIResourceSearchResult::is_scc_security_marks_Valid() const{
    return m_scc_security_marks_isValid;
}

QString OAIResourceSearchResult::getState() const {
    return m_state;
}
void OAIResourceSearchResult::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIResourceSearchResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAIResourceSearchResult::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIResourceSearchResult::getTagKeys() const {
    return m_tag_keys;
}
void OAIResourceSearchResult::setTagKeys(const QList<QString> &tag_keys) {
    m_tag_keys = tag_keys;
    m_tag_keys_isSet = true;
}

bool OAIResourceSearchResult::is_tag_keys_Set() const{
    return m_tag_keys_isSet;
}

bool OAIResourceSearchResult::is_tag_keys_Valid() const{
    return m_tag_keys_isValid;
}

QList<QString> OAIResourceSearchResult::getTagValueIds() const {
    return m_tag_value_ids;
}
void OAIResourceSearchResult::setTagValueIds(const QList<QString> &tag_value_ids) {
    m_tag_value_ids = tag_value_ids;
    m_tag_value_ids_isSet = true;
}

bool OAIResourceSearchResult::is_tag_value_ids_Set() const{
    return m_tag_value_ids_isSet;
}

bool OAIResourceSearchResult::is_tag_value_ids_Valid() const{
    return m_tag_value_ids_isValid;
}

QList<QString> OAIResourceSearchResult::getTagValues() const {
    return m_tag_values;
}
void OAIResourceSearchResult::setTagValues(const QList<QString> &tag_values) {
    m_tag_values = tag_values;
    m_tag_values_isSet = true;
}

bool OAIResourceSearchResult::is_tag_values_Set() const{
    return m_tag_values_isSet;
}

bool OAIResourceSearchResult::is_tag_values_Valid() const{
    return m_tag_values_isValid;
}

QList<OAITag> OAIResourceSearchResult::getTags() const {
    return m_tags;
}
void OAIResourceSearchResult::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIResourceSearchResult::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIResourceSearchResult::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIResourceSearchResult::getUpdateTime() const {
    return m_update_time;
}
void OAIResourceSearchResult::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIResourceSearchResult::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIResourceSearchResult::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIVersionedResource> OAIResourceSearchResult::getVersionedResources() const {
    return m_versioned_resources;
}
void OAIResourceSearchResult::setVersionedResources(const QList<OAIVersionedResource> &versioned_resources) {
    m_versioned_resources = versioned_resources;
    m_versioned_resources_isSet = true;
}

bool OAIResourceSearchResult::is_versioned_resources_Set() const{
    return m_versioned_resources_isSet;
}

bool OAIResourceSearchResult::is_versioned_resources_Valid() const{
    return m_versioned_resources_isValid;
}

bool OAIResourceSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_full_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scc_security_marks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_value_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versioned_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
