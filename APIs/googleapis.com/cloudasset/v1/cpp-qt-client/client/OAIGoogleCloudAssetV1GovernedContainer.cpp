/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1GovernedContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1GovernedContainer::OAIGoogleCloudAssetV1GovernedContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1GovernedContainer::OAIGoogleCloudAssetV1GovernedContainer() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1GovernedContainer::~OAIGoogleCloudAssetV1GovernedContainer() {}

void OAIGoogleCloudAssetV1GovernedContainer::initializeModel() {

    m_consolidated_policy_isSet = false;
    m_consolidated_policy_isValid = false;

    m_effective_tags_isSet = false;
    m_effective_tags_isValid = false;

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_full_resource_name_isSet = false;
    m_full_resource_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_policy_bundle_isSet = false;
    m_policy_bundle_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIGoogleCloudAssetV1GovernedContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1GovernedContainer::fromJsonObject(QJsonObject json) {

    m_consolidated_policy_isValid = ::OpenAPI::fromJsonValue(m_consolidated_policy, json[QString("consolidatedPolicy")]);
    m_consolidated_policy_isSet = !json[QString("consolidatedPolicy")].isNull() && m_consolidated_policy_isValid;

    m_effective_tags_isValid = ::OpenAPI::fromJsonValue(m_effective_tags, json[QString("effectiveTags")]);
    m_effective_tags_isSet = !json[QString("effectiveTags")].isNull() && m_effective_tags_isValid;

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("folders")]);
    m_folders_isSet = !json[QString("folders")].isNull() && m_folders_isValid;

    m_full_resource_name_isValid = ::OpenAPI::fromJsonValue(m_full_resource_name, json[QString("fullResourceName")]);
    m_full_resource_name_isSet = !json[QString("fullResourceName")].isNull() && m_full_resource_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_policy_bundle_isValid = ::OpenAPI::fromJsonValue(m_policy_bundle, json[QString("policyBundle")]);
    m_policy_bundle_isSet = !json[QString("policyBundle")].isNull() && m_policy_bundle_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIGoogleCloudAssetV1GovernedContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1GovernedContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_consolidated_policy.isSet()) {
        obj.insert(QString("consolidatedPolicy"), ::OpenAPI::toJsonValue(m_consolidated_policy));
    }
    if (m_effective_tags.size() > 0) {
        obj.insert(QString("effectiveTags"), ::OpenAPI::toJsonValue(m_effective_tags));
    }
    if (m_folders.size() > 0) {
        obj.insert(QString("folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_full_resource_name_isSet) {
        obj.insert(QString("fullResourceName"), ::OpenAPI::toJsonValue(m_full_resource_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_policy_bundle.size() > 0) {
        obj.insert(QString("policyBundle"), ::OpenAPI::toJsonValue(m_policy_bundle));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

OAIAnalyzerOrgPolicy OAIGoogleCloudAssetV1GovernedContainer::getConsolidatedPolicy() const {
    return m_consolidated_policy;
}
void OAIGoogleCloudAssetV1GovernedContainer::setConsolidatedPolicy(const OAIAnalyzerOrgPolicy &consolidated_policy) {
    m_consolidated_policy = consolidated_policy;
    m_consolidated_policy_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_consolidated_policy_Set() const{
    return m_consolidated_policy_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_consolidated_policy_Valid() const{
    return m_consolidated_policy_isValid;
}

QList<OAIEffectiveTagDetails> OAIGoogleCloudAssetV1GovernedContainer::getEffectiveTags() const {
    return m_effective_tags;
}
void OAIGoogleCloudAssetV1GovernedContainer::setEffectiveTags(const QList<OAIEffectiveTagDetails> &effective_tags) {
    m_effective_tags = effective_tags;
    m_effective_tags_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_effective_tags_Set() const{
    return m_effective_tags_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_effective_tags_Valid() const{
    return m_effective_tags_isValid;
}

QList<QString> OAIGoogleCloudAssetV1GovernedContainer::getFolders() const {
    return m_folders;
}
void OAIGoogleCloudAssetV1GovernedContainer::setFolders(const QList<QString> &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_folders_Valid() const{
    return m_folders_isValid;
}

QString OAIGoogleCloudAssetV1GovernedContainer::getFullResourceName() const {
    return m_full_resource_name;
}
void OAIGoogleCloudAssetV1GovernedContainer::setFullResourceName(const QString &full_resource_name) {
    m_full_resource_name = full_resource_name;
    m_full_resource_name_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_full_resource_name_Set() const{
    return m_full_resource_name_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_full_resource_name_Valid() const{
    return m_full_resource_name_isValid;
}

QString OAIGoogleCloudAssetV1GovernedContainer::getOrganization() const {
    return m_organization;
}
void OAIGoogleCloudAssetV1GovernedContainer::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIGoogleCloudAssetV1GovernedContainer::getParent() const {
    return m_parent;
}
void OAIGoogleCloudAssetV1GovernedContainer::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<OAIAnalyzerOrgPolicy> OAIGoogleCloudAssetV1GovernedContainer::getPolicyBundle() const {
    return m_policy_bundle;
}
void OAIGoogleCloudAssetV1GovernedContainer::setPolicyBundle(const QList<OAIAnalyzerOrgPolicy> &policy_bundle) {
    m_policy_bundle = policy_bundle;
    m_policy_bundle_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_policy_bundle_Set() const{
    return m_policy_bundle_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_policy_bundle_Valid() const{
    return m_policy_bundle_isValid;
}

QString OAIGoogleCloudAssetV1GovernedContainer::getProject() const {
    return m_project;
}
void OAIGoogleCloudAssetV1GovernedContainer::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_project_Set() const{
    return m_project_isSet;
}

bool OAIGoogleCloudAssetV1GovernedContainer::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIGoogleCloudAssetV1GovernedContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consolidated_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_bundle.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1GovernedContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
