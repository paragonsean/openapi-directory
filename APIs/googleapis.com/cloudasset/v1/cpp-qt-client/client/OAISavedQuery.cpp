/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavedQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavedQuery::OAISavedQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavedQuery::OAISavedQuery() {
    this->initializeModel();
}

OAISavedQuery::~OAISavedQuery() {}

void OAISavedQuery::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_last_updater_isSet = false;
    m_last_updater_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISavedQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavedQuery::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_last_updater_isValid = ::OpenAPI::fromJsonValue(m_last_updater, json[QString("lastUpdater")]);
    m_last_updater_isSet = !json[QString("lastUpdater")].isNull() && m_last_updater_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISavedQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavedQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_last_updater_isSet) {
        obj.insert(QString("lastUpdater"), ::OpenAPI::toJsonValue(m_last_updater));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIQueryContent OAISavedQuery::getContent() const {
    return m_content;
}
void OAISavedQuery::setContent(const OAIQueryContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISavedQuery::is_content_Set() const{
    return m_content_isSet;
}

bool OAISavedQuery::is_content_Valid() const{
    return m_content_isValid;
}

QString OAISavedQuery::getCreateTime() const {
    return m_create_time;
}
void OAISavedQuery::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISavedQuery::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISavedQuery::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISavedQuery::getCreator() const {
    return m_creator;
}
void OAISavedQuery::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAISavedQuery::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAISavedQuery::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAISavedQuery::getDescription() const {
    return m_description;
}
void OAISavedQuery::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavedQuery::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavedQuery::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAISavedQuery::getLabels() const {
    return m_labels;
}
void OAISavedQuery::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISavedQuery::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISavedQuery::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISavedQuery::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAISavedQuery::setLastUpdateTime(const QString &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAISavedQuery::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAISavedQuery::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QString OAISavedQuery::getLastUpdater() const {
    return m_last_updater;
}
void OAISavedQuery::setLastUpdater(const QString &last_updater) {
    m_last_updater = last_updater;
    m_last_updater_isSet = true;
}

bool OAISavedQuery::is_last_updater_Set() const{
    return m_last_updater_isSet;
}

bool OAISavedQuery::is_last_updater_Valid() const{
    return m_last_updater_isValid;
}

QString OAISavedQuery::getName() const {
    return m_name;
}
void OAISavedQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISavedQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAISavedQuery::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISavedQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updater_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavedQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
