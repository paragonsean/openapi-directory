/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_access_level_isSet = false;
    m_access_level_isValid = false;

    m_access_policy_isSet = false;
    m_access_policy_isValid = false;

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_iam_policy_isSet = false;
    m_iam_policy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_policy_isSet = false;
    m_org_policy_isValid = false;

    m_os_inventory_isSet = false;
    m_os_inventory_isValid = false;

    m_related_asset_isSet = false;
    m_related_asset_isValid = false;

    m_related_assets_isSet = false;
    m_related_assets_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_service_perimeter_isSet = false;
    m_service_perimeter_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_access_level_isValid = ::OpenAPI::fromJsonValue(m_access_level, json[QString("accessLevel")]);
    m_access_level_isSet = !json[QString("accessLevel")].isNull() && m_access_level_isValid;

    m_access_policy_isValid = ::OpenAPI::fromJsonValue(m_access_policy, json[QString("accessPolicy")]);
    m_access_policy_isSet = !json[QString("accessPolicy")].isNull() && m_access_policy_isValid;

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_iam_policy_isValid = ::OpenAPI::fromJsonValue(m_iam_policy, json[QString("iamPolicy")]);
    m_iam_policy_isSet = !json[QString("iamPolicy")].isNull() && m_iam_policy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_policy_isValid = ::OpenAPI::fromJsonValue(m_org_policy, json[QString("orgPolicy")]);
    m_org_policy_isSet = !json[QString("orgPolicy")].isNull() && m_org_policy_isValid;

    m_os_inventory_isValid = ::OpenAPI::fromJsonValue(m_os_inventory, json[QString("osInventory")]);
    m_os_inventory_isSet = !json[QString("osInventory")].isNull() && m_os_inventory_isValid;

    m_related_asset_isValid = ::OpenAPI::fromJsonValue(m_related_asset, json[QString("relatedAsset")]);
    m_related_asset_isSet = !json[QString("relatedAsset")].isNull() && m_related_asset_isValid;

    m_related_assets_isValid = ::OpenAPI::fromJsonValue(m_related_assets, json[QString("relatedAssets")]);
    m_related_assets_isSet = !json[QString("relatedAssets")].isNull() && m_related_assets_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_service_perimeter_isValid = ::OpenAPI::fromJsonValue(m_service_perimeter, json[QString("servicePerimeter")]);
    m_service_perimeter_isSet = !json[QString("servicePerimeter")].isNull() && m_service_perimeter_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_access_level.isSet()) {
        obj.insert(QString("accessLevel"), ::OpenAPI::toJsonValue(m_access_level));
    }
    if (m_access_policy.isSet()) {
        obj.insert(QString("accessPolicy"), ::OpenAPI::toJsonValue(m_access_policy));
    }
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_iam_policy.isSet()) {
        obj.insert(QString("iamPolicy"), ::OpenAPI::toJsonValue(m_iam_policy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_policy.size() > 0) {
        obj.insert(QString("orgPolicy"), ::OpenAPI::toJsonValue(m_org_policy));
    }
    if (m_os_inventory.isSet()) {
        obj.insert(QString("osInventory"), ::OpenAPI::toJsonValue(m_os_inventory));
    }
    if (m_related_asset.isSet()) {
        obj.insert(QString("relatedAsset"), ::OpenAPI::toJsonValue(m_related_asset));
    }
    if (m_related_assets.isSet()) {
        obj.insert(QString("relatedAssets"), ::OpenAPI::toJsonValue(m_related_assets));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_service_perimeter.isSet()) {
        obj.insert(QString("servicePerimeter"), ::OpenAPI::toJsonValue(m_service_perimeter));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIGoogleIdentityAccesscontextmanagerV1AccessLevel OAIAsset::getAccessLevel() const {
    return m_access_level;
}
void OAIAsset::setAccessLevel(const OAIGoogleIdentityAccesscontextmanagerV1AccessLevel &access_level) {
    m_access_level = access_level;
    m_access_level_isSet = true;
}

bool OAIAsset::is_access_level_Set() const{
    return m_access_level_isSet;
}

bool OAIAsset::is_access_level_Valid() const{
    return m_access_level_isValid;
}

OAIGoogleIdentityAccesscontextmanagerV1AccessPolicy OAIAsset::getAccessPolicy() const {
    return m_access_policy;
}
void OAIAsset::setAccessPolicy(const OAIGoogleIdentityAccesscontextmanagerV1AccessPolicy &access_policy) {
    m_access_policy = access_policy;
    m_access_policy_isSet = true;
}

bool OAIAsset::is_access_policy_Set() const{
    return m_access_policy_isSet;
}

bool OAIAsset::is_access_policy_Valid() const{
    return m_access_policy_isValid;
}

QList<QString> OAIAsset::getAncestors() const {
    return m_ancestors;
}
void OAIAsset::setAncestors(const QList<QString> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIAsset::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIAsset::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QString OAIAsset::getAssetType() const {
    return m_asset_type;
}
void OAIAsset::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIAsset::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIAsset::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

OAIPolicy OAIAsset::getIamPolicy() const {
    return m_iam_policy;
}
void OAIAsset::setIamPolicy(const OAIPolicy &iam_policy) {
    m_iam_policy = iam_policy;
    m_iam_policy_isSet = true;
}

bool OAIAsset::is_iam_policy_Set() const{
    return m_iam_policy_isSet;
}

bool OAIAsset::is_iam_policy_Valid() const{
    return m_iam_policy_isValid;
}

QString OAIAsset::getName() const {
    return m_name;
}
void OAIAsset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsset::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGoogleCloudOrgpolicyV1Policy> OAIAsset::getOrgPolicy() const {
    return m_org_policy;
}
void OAIAsset::setOrgPolicy(const QList<OAIGoogleCloudOrgpolicyV1Policy> &org_policy) {
    m_org_policy = org_policy;
    m_org_policy_isSet = true;
}

bool OAIAsset::is_org_policy_Set() const{
    return m_org_policy_isSet;
}

bool OAIAsset::is_org_policy_Valid() const{
    return m_org_policy_isValid;
}

OAIInventory OAIAsset::getOsInventory() const {
    return m_os_inventory;
}
void OAIAsset::setOsInventory(const OAIInventory &os_inventory) {
    m_os_inventory = os_inventory;
    m_os_inventory_isSet = true;
}

bool OAIAsset::is_os_inventory_Set() const{
    return m_os_inventory_isSet;
}

bool OAIAsset::is_os_inventory_Valid() const{
    return m_os_inventory_isValid;
}

OAIRelatedAsset OAIAsset::getRelatedAsset() const {
    return m_related_asset;
}
void OAIAsset::setRelatedAsset(const OAIRelatedAsset &related_asset) {
    m_related_asset = related_asset;
    m_related_asset_isSet = true;
}

bool OAIAsset::is_related_asset_Set() const{
    return m_related_asset_isSet;
}

bool OAIAsset::is_related_asset_Valid() const{
    return m_related_asset_isValid;
}

OAIRelatedAssets OAIAsset::getRelatedAssets() const {
    return m_related_assets;
}
void OAIAsset::setRelatedAssets(const OAIRelatedAssets &related_assets) {
    m_related_assets = related_assets;
    m_related_assets_isSet = true;
}

bool OAIAsset::is_related_assets_Set() const{
    return m_related_assets_isSet;
}

bool OAIAsset::is_related_assets_Valid() const{
    return m_related_assets_isValid;
}

OAIResource OAIAsset::getResource() const {
    return m_resource;
}
void OAIAsset::setResource(const OAIResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAsset::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAsset::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIGoogleIdentityAccesscontextmanagerV1ServicePerimeter OAIAsset::getServicePerimeter() const {
    return m_service_perimeter;
}
void OAIAsset::setServicePerimeter(const OAIGoogleIdentityAccesscontextmanagerV1ServicePerimeter &service_perimeter) {
    m_service_perimeter = service_perimeter;
    m_service_perimeter_isSet = true;
}

bool OAIAsset::is_service_perimeter_Set() const{
    return m_service_perimeter_isSet;
}

bool OAIAsset::is_service_perimeter_Valid() const{
    return m_service_perimeter_isValid;
}

QString OAIAsset::getUpdateTime() const {
    return m_update_time;
}
void OAIAsset::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAsset::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAsset::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_inventory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_perimeter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
