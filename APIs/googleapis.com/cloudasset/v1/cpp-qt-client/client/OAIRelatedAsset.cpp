/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedAsset::OAIRelatedAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedAsset::OAIRelatedAsset() {
    this->initializeModel();
}

OAIRelatedAsset::~OAIRelatedAsset() {}

void OAIRelatedAsset::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_relationship_type_isSet = false;
    m_relationship_type_isValid = false;
}

void OAIRelatedAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedAsset::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_relationship_type_isValid = ::OpenAPI::fromJsonValue(m_relationship_type, json[QString("relationshipType")]);
    m_relationship_type_isSet = !json[QString("relationshipType")].isNull() && m_relationship_type_isValid;
}

QString OAIRelatedAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_asset_isSet) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_relationship_type_isSet) {
        obj.insert(QString("relationshipType"), ::OpenAPI::toJsonValue(m_relationship_type));
    }
    return obj;
}

QList<QString> OAIRelatedAsset::getAncestors() const {
    return m_ancestors;
}
void OAIRelatedAsset::setAncestors(const QList<QString> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIRelatedAsset::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIRelatedAsset::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QString OAIRelatedAsset::getAsset() const {
    return m_asset;
}
void OAIRelatedAsset::setAsset(const QString &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIRelatedAsset::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIRelatedAsset::is_asset_Valid() const{
    return m_asset_isValid;
}

QString OAIRelatedAsset::getAssetType() const {
    return m_asset_type;
}
void OAIRelatedAsset::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIRelatedAsset::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIRelatedAsset::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAIRelatedAsset::getRelationshipType() const {
    return m_relationship_type;
}
void OAIRelatedAsset::setRelationshipType(const QString &relationship_type) {
    m_relationship_type = relationship_type;
    m_relationship_type_isSet = true;
}

bool OAIRelatedAsset::is_relationship_type_Set() const{
    return m_relationship_type_isSet;
}

bool OAIRelatedAsset::is_relationship_type_Valid() const{
    return m_relationship_type_isValid;
}

bool OAIRelatedAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
