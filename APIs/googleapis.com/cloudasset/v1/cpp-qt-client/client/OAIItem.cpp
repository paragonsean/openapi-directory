/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_available_package_isSet = false;
    m_available_package_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installed_package_isSet = false;
    m_installed_package_isValid = false;

    m_origin_type_isSet = false;
    m_origin_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_available_package_isValid = ::OpenAPI::fromJsonValue(m_available_package, json[QString("availablePackage")]);
    m_available_package_isSet = !json[QString("availablePackage")].isNull() && m_available_package_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installed_package_isValid = ::OpenAPI::fromJsonValue(m_installed_package, json[QString("installedPackage")]);
    m_installed_package_isSet = !json[QString("installedPackage")].isNull() && m_installed_package_isValid;

    m_origin_type_isValid = ::OpenAPI::fromJsonValue(m_origin_type, json[QString("originType")]);
    m_origin_type_isSet = !json[QString("originType")].isNull() && m_origin_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_available_package.isSet()) {
        obj.insert(QString("availablePackage"), ::OpenAPI::toJsonValue(m_available_package));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installed_package.isSet()) {
        obj.insert(QString("installedPackage"), ::OpenAPI::toJsonValue(m_installed_package));
    }
    if (m_origin_type_isSet) {
        obj.insert(QString("originType"), ::OpenAPI::toJsonValue(m_origin_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAISoftwarePackage OAIItem::getAvailablePackage() const {
    return m_available_package;
}
void OAIItem::setAvailablePackage(const OAISoftwarePackage &available_package) {
    m_available_package = available_package;
    m_available_package_isSet = true;
}

bool OAIItem::is_available_package_Set() const{
    return m_available_package_isSet;
}

bool OAIItem::is_available_package_Valid() const{
    return m_available_package_isValid;
}

QString OAIItem::getCreateTime() const {
    return m_create_time;
}
void OAIItem::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIItem::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIItem::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIItem::getId() const {
    return m_id;
}
void OAIItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem::is_id_Valid() const{
    return m_id_isValid;
}

OAISoftwarePackage OAIItem::getInstalledPackage() const {
    return m_installed_package;
}
void OAIItem::setInstalledPackage(const OAISoftwarePackage &installed_package) {
    m_installed_package = installed_package;
    m_installed_package_isSet = true;
}

bool OAIItem::is_installed_package_Set() const{
    return m_installed_package_isSet;
}

bool OAIItem::is_installed_package_Valid() const{
    return m_installed_package_isValid;
}

QString OAIItem::getOriginType() const {
    return m_origin_type;
}
void OAIItem::setOriginType(const QString &origin_type) {
    m_origin_type = origin_type;
    m_origin_type_isSet = true;
}

bool OAIItem::is_origin_type_Set() const{
    return m_origin_type_isSet;
}

bool OAIItem::is_origin_type_Valid() const{
    return m_origin_type_isValid;
}

QString OAIItem::getType() const {
    return m_type;
}
void OAIItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItem::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIItem::getUpdateTime() const {
    return m_update_time;
}
void OAIItem::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIItem::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIItem::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
