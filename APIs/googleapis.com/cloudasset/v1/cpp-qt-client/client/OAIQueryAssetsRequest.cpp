/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryAssetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryAssetsRequest::OAIQueryAssetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryAssetsRequest::OAIQueryAssetsRequest() {
    this->initializeModel();
}

OAIQueryAssetsRequest::~OAIQueryAssetsRequest() {}

void OAIQueryAssetsRequest::initializeModel() {

    m_job_reference_isSet = false;
    m_job_reference_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_page_token_isSet = false;
    m_page_token_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;

    m_read_time_window_isSet = false;
    m_read_time_window_isValid = false;

    m_statement_isSet = false;
    m_statement_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIQueryAssetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryAssetsRequest::fromJsonObject(QJsonObject json) {

    m_job_reference_isValid = ::OpenAPI::fromJsonValue(m_job_reference, json[QString("jobReference")]);
    m_job_reference_isSet = !json[QString("jobReference")].isNull() && m_job_reference_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_page_token_isValid = ::OpenAPI::fromJsonValue(m_page_token, json[QString("pageToken")]);
    m_page_token_isSet = !json[QString("pageToken")].isNull() && m_page_token_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("readTime")]);
    m_read_time_isSet = !json[QString("readTime")].isNull() && m_read_time_isValid;

    m_read_time_window_isValid = ::OpenAPI::fromJsonValue(m_read_time_window, json[QString("readTimeWindow")]);
    m_read_time_window_isSet = !json[QString("readTimeWindow")].isNull() && m_read_time_window_isValid;

    m_statement_isValid = ::OpenAPI::fromJsonValue(m_statement, json[QString("statement")]);
    m_statement_isSet = !json[QString("statement")].isNull() && m_statement_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIQueryAssetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryAssetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_reference_isSet) {
        obj.insert(QString("jobReference"), ::OpenAPI::toJsonValue(m_job_reference));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_page_token_isSet) {
        obj.insert(QString("pageToken"), ::OpenAPI::toJsonValue(m_page_token));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("readTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    if (m_read_time_window.isSet()) {
        obj.insert(QString("readTimeWindow"), ::OpenAPI::toJsonValue(m_read_time_window));
    }
    if (m_statement_isSet) {
        obj.insert(QString("statement"), ::OpenAPI::toJsonValue(m_statement));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIQueryAssetsRequest::getJobReference() const {
    return m_job_reference;
}
void OAIQueryAssetsRequest::setJobReference(const QString &job_reference) {
    m_job_reference = job_reference;
    m_job_reference_isSet = true;
}

bool OAIQueryAssetsRequest::is_job_reference_Set() const{
    return m_job_reference_isSet;
}

bool OAIQueryAssetsRequest::is_job_reference_Valid() const{
    return m_job_reference_isValid;
}

OAIQueryAssetsOutputConfig OAIQueryAssetsRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIQueryAssetsRequest::setOutputConfig(const OAIQueryAssetsOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIQueryAssetsRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIQueryAssetsRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

qint32 OAIQueryAssetsRequest::getPageSize() const {
    return m_page_size;
}
void OAIQueryAssetsRequest::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIQueryAssetsRequest::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIQueryAssetsRequest::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIQueryAssetsRequest::getPageToken() const {
    return m_page_token;
}
void OAIQueryAssetsRequest::setPageToken(const QString &page_token) {
    m_page_token = page_token;
    m_page_token_isSet = true;
}

bool OAIQueryAssetsRequest::is_page_token_Set() const{
    return m_page_token_isSet;
}

bool OAIQueryAssetsRequest::is_page_token_Valid() const{
    return m_page_token_isValid;
}

QString OAIQueryAssetsRequest::getReadTime() const {
    return m_read_time;
}
void OAIQueryAssetsRequest::setReadTime(const QString &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIQueryAssetsRequest::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIQueryAssetsRequest::is_read_time_Valid() const{
    return m_read_time_isValid;
}

OAITimeWindow OAIQueryAssetsRequest::getReadTimeWindow() const {
    return m_read_time_window;
}
void OAIQueryAssetsRequest::setReadTimeWindow(const OAITimeWindow &read_time_window) {
    m_read_time_window = read_time_window;
    m_read_time_window_isSet = true;
}

bool OAIQueryAssetsRequest::is_read_time_window_Set() const{
    return m_read_time_window_isSet;
}

bool OAIQueryAssetsRequest::is_read_time_window_Valid() const{
    return m_read_time_window_isValid;
}

QString OAIQueryAssetsRequest::getStatement() const {
    return m_statement;
}
void OAIQueryAssetsRequest::setStatement(const QString &statement) {
    m_statement = statement;
    m_statement_isSet = true;
}

bool OAIQueryAssetsRequest::is_statement_Set() const{
    return m_statement_isSet;
}

bool OAIQueryAssetsRequest::is_statement_Valid() const{
    return m_statement_isValid;
}

QString OAIQueryAssetsRequest::getTimeout() const {
    return m_timeout;
}
void OAIQueryAssetsRequest::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIQueryAssetsRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIQueryAssetsRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIQueryAssetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryAssetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
