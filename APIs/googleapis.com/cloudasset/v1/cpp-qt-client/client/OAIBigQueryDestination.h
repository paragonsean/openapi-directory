/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBigQueryDestination.h
 *
 * A BigQuery destination for exporting assets to.
 */

#ifndef OAIBigQueryDestination_H
#define OAIBigQueryDestination_H

#include <QJsonObject>

#include "OAIPartitionSpec.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPartitionSpec;

class OAIBigQueryDestination : public OAIObject {
public:
    OAIBigQueryDestination();
    OAIBigQueryDestination(QString json);
    ~OAIBigQueryDestination() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataset() const;
    void setDataset(const QString &dataset);
    bool is_dataset_Set() const;
    bool is_dataset_Valid() const;

    bool isForce() const;
    void setForce(const bool &force);
    bool is_force_Set() const;
    bool is_force_Valid() const;

    OAIPartitionSpec getPartitionSpec() const;
    void setPartitionSpec(const OAIPartitionSpec &partition_spec);
    bool is_partition_spec_Set() const;
    bool is_partition_spec_Valid() const;

    bool isSeparateTablesPerAssetType() const;
    void setSeparateTablesPerAssetType(const bool &separate_tables_per_asset_type);
    bool is_separate_tables_per_asset_type_Set() const;
    bool is_separate_tables_per_asset_type_Valid() const;

    QString getTable() const;
    void setTable(const QString &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dataset;
    bool m_dataset_isSet;
    bool m_dataset_isValid;

    bool m_force;
    bool m_force_isSet;
    bool m_force_isValid;

    OAIPartitionSpec m_partition_spec;
    bool m_partition_spec_isSet;
    bool m_partition_spec_isValid;

    bool m_separate_tables_per_asset_type;
    bool m_separate_tables_per_asset_type_isSet;
    bool m_separate_tables_per_asset_type_isValid;

    QString m_table;
    bool m_table_isSet;
    bool m_table_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBigQueryDestination)

#endif // OAIBigQueryDestination_H
