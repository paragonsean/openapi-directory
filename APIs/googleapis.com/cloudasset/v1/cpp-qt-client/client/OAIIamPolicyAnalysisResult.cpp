/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIamPolicyAnalysisResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIamPolicyAnalysisResult::OAIIamPolicyAnalysisResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIamPolicyAnalysisResult::OAIIamPolicyAnalysisResult() {
    this->initializeModel();
}

OAIIamPolicyAnalysisResult::~OAIIamPolicyAnalysisResult() {}

void OAIIamPolicyAnalysisResult::initializeModel() {

    m_access_control_lists_isSet = false;
    m_access_control_lists_isValid = false;

    m_attached_resource_full_name_isSet = false;
    m_attached_resource_full_name_isValid = false;

    m_fully_explored_isSet = false;
    m_fully_explored_isValid = false;

    m_iam_binding_isSet = false;
    m_iam_binding_isValid = false;

    m_identity_list_isSet = false;
    m_identity_list_isValid = false;
}

void OAIIamPolicyAnalysisResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIamPolicyAnalysisResult::fromJsonObject(QJsonObject json) {

    m_access_control_lists_isValid = ::OpenAPI::fromJsonValue(m_access_control_lists, json[QString("accessControlLists")]);
    m_access_control_lists_isSet = !json[QString("accessControlLists")].isNull() && m_access_control_lists_isValid;

    m_attached_resource_full_name_isValid = ::OpenAPI::fromJsonValue(m_attached_resource_full_name, json[QString("attachedResourceFullName")]);
    m_attached_resource_full_name_isSet = !json[QString("attachedResourceFullName")].isNull() && m_attached_resource_full_name_isValid;

    m_fully_explored_isValid = ::OpenAPI::fromJsonValue(m_fully_explored, json[QString("fullyExplored")]);
    m_fully_explored_isSet = !json[QString("fullyExplored")].isNull() && m_fully_explored_isValid;

    m_iam_binding_isValid = ::OpenAPI::fromJsonValue(m_iam_binding, json[QString("iamBinding")]);
    m_iam_binding_isSet = !json[QString("iamBinding")].isNull() && m_iam_binding_isValid;

    m_identity_list_isValid = ::OpenAPI::fromJsonValue(m_identity_list, json[QString("identityList")]);
    m_identity_list_isSet = !json[QString("identityList")].isNull() && m_identity_list_isValid;
}

QString OAIIamPolicyAnalysisResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIamPolicyAnalysisResult::asJsonObject() const {
    QJsonObject obj;
    if (m_access_control_lists.size() > 0) {
        obj.insert(QString("accessControlLists"), ::OpenAPI::toJsonValue(m_access_control_lists));
    }
    if (m_attached_resource_full_name_isSet) {
        obj.insert(QString("attachedResourceFullName"), ::OpenAPI::toJsonValue(m_attached_resource_full_name));
    }
    if (m_fully_explored_isSet) {
        obj.insert(QString("fullyExplored"), ::OpenAPI::toJsonValue(m_fully_explored));
    }
    if (m_iam_binding.isSet()) {
        obj.insert(QString("iamBinding"), ::OpenAPI::toJsonValue(m_iam_binding));
    }
    if (m_identity_list.isSet()) {
        obj.insert(QString("identityList"), ::OpenAPI::toJsonValue(m_identity_list));
    }
    return obj;
}

QList<OAIGoogleCloudAssetV1AccessControlList> OAIIamPolicyAnalysisResult::getAccessControlLists() const {
    return m_access_control_lists;
}
void OAIIamPolicyAnalysisResult::setAccessControlLists(const QList<OAIGoogleCloudAssetV1AccessControlList> &access_control_lists) {
    m_access_control_lists = access_control_lists;
    m_access_control_lists_isSet = true;
}

bool OAIIamPolicyAnalysisResult::is_access_control_lists_Set() const{
    return m_access_control_lists_isSet;
}

bool OAIIamPolicyAnalysisResult::is_access_control_lists_Valid() const{
    return m_access_control_lists_isValid;
}

QString OAIIamPolicyAnalysisResult::getAttachedResourceFullName() const {
    return m_attached_resource_full_name;
}
void OAIIamPolicyAnalysisResult::setAttachedResourceFullName(const QString &attached_resource_full_name) {
    m_attached_resource_full_name = attached_resource_full_name;
    m_attached_resource_full_name_isSet = true;
}

bool OAIIamPolicyAnalysisResult::is_attached_resource_full_name_Set() const{
    return m_attached_resource_full_name_isSet;
}

bool OAIIamPolicyAnalysisResult::is_attached_resource_full_name_Valid() const{
    return m_attached_resource_full_name_isValid;
}

bool OAIIamPolicyAnalysisResult::isFullyExplored() const {
    return m_fully_explored;
}
void OAIIamPolicyAnalysisResult::setFullyExplored(const bool &fully_explored) {
    m_fully_explored = fully_explored;
    m_fully_explored_isSet = true;
}

bool OAIIamPolicyAnalysisResult::is_fully_explored_Set() const{
    return m_fully_explored_isSet;
}

bool OAIIamPolicyAnalysisResult::is_fully_explored_Valid() const{
    return m_fully_explored_isValid;
}

OAIBinding OAIIamPolicyAnalysisResult::getIamBinding() const {
    return m_iam_binding;
}
void OAIIamPolicyAnalysisResult::setIamBinding(const OAIBinding &iam_binding) {
    m_iam_binding = iam_binding;
    m_iam_binding_isSet = true;
}

bool OAIIamPolicyAnalysisResult::is_iam_binding_Set() const{
    return m_iam_binding_isSet;
}

bool OAIIamPolicyAnalysisResult::is_iam_binding_Valid() const{
    return m_iam_binding_isValid;
}

OAIGoogleCloudAssetV1IdentityList OAIIamPolicyAnalysisResult::getIdentityList() const {
    return m_identity_list;
}
void OAIIamPolicyAnalysisResult::setIdentityList(const OAIGoogleCloudAssetV1IdentityList &identity_list) {
    m_identity_list = identity_list;
    m_identity_list_isSet = true;
}

bool OAIIamPolicyAnalysisResult::is_identity_list_Set() const{
    return m_identity_list_isSet;
}

bool OAIIamPolicyAnalysisResult::is_identity_list_Valid() const{
    return m_identity_list_isValid;
}

bool OAIIamPolicyAnalysisResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_control_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_resource_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_explored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_binding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIamPolicyAnalysisResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
