/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1Edge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1Edge::OAIGoogleCloudAssetV1Edge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1Edge::OAIGoogleCloudAssetV1Edge() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1Edge::~OAIGoogleCloudAssetV1Edge() {}

void OAIGoogleCloudAssetV1Edge::initializeModel() {

    m_source_node_isSet = false;
    m_source_node_isValid = false;

    m_target_node_isSet = false;
    m_target_node_isValid = false;
}

void OAIGoogleCloudAssetV1Edge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1Edge::fromJsonObject(QJsonObject json) {

    m_source_node_isValid = ::OpenAPI::fromJsonValue(m_source_node, json[QString("sourceNode")]);
    m_source_node_isSet = !json[QString("sourceNode")].isNull() && m_source_node_isValid;

    m_target_node_isValid = ::OpenAPI::fromJsonValue(m_target_node, json[QString("targetNode")]);
    m_target_node_isSet = !json[QString("targetNode")].isNull() && m_target_node_isValid;
}

QString OAIGoogleCloudAssetV1Edge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1Edge::asJsonObject() const {
    QJsonObject obj;
    if (m_source_node_isSet) {
        obj.insert(QString("sourceNode"), ::OpenAPI::toJsonValue(m_source_node));
    }
    if (m_target_node_isSet) {
        obj.insert(QString("targetNode"), ::OpenAPI::toJsonValue(m_target_node));
    }
    return obj;
}

QString OAIGoogleCloudAssetV1Edge::getSourceNode() const {
    return m_source_node;
}
void OAIGoogleCloudAssetV1Edge::setSourceNode(const QString &source_node) {
    m_source_node = source_node;
    m_source_node_isSet = true;
}

bool OAIGoogleCloudAssetV1Edge::is_source_node_Set() const{
    return m_source_node_isSet;
}

bool OAIGoogleCloudAssetV1Edge::is_source_node_Valid() const{
    return m_source_node_isValid;
}

QString OAIGoogleCloudAssetV1Edge::getTargetNode() const {
    return m_target_node;
}
void OAIGoogleCloudAssetV1Edge::setTargetNode(const QString &target_node) {
    m_target_node = target_node;
    m_target_node_isSet = true;
}

bool OAIGoogleCloudAssetV1Edge::is_target_node_Set() const{
    return m_target_node_isSet;
}

bool OAIGoogleCloudAssetV1Edge::is_target_node_Valid() const{
    return m_target_node_isValid;
}

bool OAIGoogleCloudAssetV1Edge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_node_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1Edge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
