/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventory::OAIInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventory::OAIInventory() {
    this->initializeModel();
}

OAIInventory::~OAIInventory() {}

void OAIInventory::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_info_isSet = false;
    m_os_info_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventory::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_info_isValid = ::OpenAPI::fromJsonValue(m_os_info, json[QString("osInfo")]);
    m_os_info_isSet = !json[QString("osInfo")].isNull() && m_os_info_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_info.isSet()) {
        obj.insert(QString("osInfo"), ::OpenAPI::toJsonValue(m_os_info));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, OAIItem> OAIInventory::getItems() const {
    return m_items;
}
void OAIInventory::setItems(const QMap<QString, OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIInventory::is_items_Set() const{
    return m_items_isSet;
}

bool OAIInventory::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIInventory::getName() const {
    return m_name;
}
void OAIInventory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInventory::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInventory::is_name_Valid() const{
    return m_name_isValid;
}

OAIOsInfo OAIInventory::getOsInfo() const {
    return m_os_info;
}
void OAIInventory::setOsInfo(const OAIOsInfo &os_info) {
    m_os_info = os_info;
    m_os_info_isSet = true;
}

bool OAIInventory::is_os_info_Set() const{
    return m_os_info_isSet;
}

bool OAIInventory::is_os_info_Valid() const{
    return m_os_info_isValid;
}

QString OAIInventory::getUpdateTime() const {
    return m_update_time;
}
void OAIInventory::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInventory::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInventory::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
