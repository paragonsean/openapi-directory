/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::~OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination() {}

void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::initializeModel() {

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_write_disposition_isSet = false;
    m_write_disposition_isValid = false;
}

void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::fromJsonObject(QJsonObject json) {

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_write_disposition_isValid = ::OpenAPI::fromJsonValue(m_write_disposition, json[QString("writeDisposition")]);
    m_write_disposition_isSet = !json[QString("writeDisposition")].isNull() && m_write_disposition_isValid;
}

QString OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_isSet) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_write_disposition_isSet) {
        obj.insert(QString("writeDisposition"), ::OpenAPI::toJsonValue(m_write_disposition));
    }
    return obj;
}

QString OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::getDataset() const {
    return m_dataset;
}
void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::setDataset(const QString &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::getTable() const {
    return m_table;
}
void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_table_Set() const{
    return m_table_isSet;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::getWriteDisposition() const {
    return m_write_disposition;
}
void OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::setWriteDisposition(const QString &write_disposition) {
    m_write_disposition = write_disposition;
    m_write_disposition_isSet = true;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_write_disposition_Set() const{
    return m_write_disposition_isSet;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::is_write_disposition_Valid() const{
    return m_write_disposition_isValid;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1QueryAssetsOutputConfigBigQueryDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
