/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeIamPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeIamPolicyResponse::OAIAnalyzeIamPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeIamPolicyResponse::OAIAnalyzeIamPolicyResponse() {
    this->initializeModel();
}

OAIAnalyzeIamPolicyResponse::~OAIAnalyzeIamPolicyResponse() {}

void OAIAnalyzeIamPolicyResponse::initializeModel() {

    m_fully_explored_isSet = false;
    m_fully_explored_isValid = false;

    m_main_analysis_isSet = false;
    m_main_analysis_isValid = false;

    m_service_account_impersonation_analysis_isSet = false;
    m_service_account_impersonation_analysis_isValid = false;
}

void OAIAnalyzeIamPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeIamPolicyResponse::fromJsonObject(QJsonObject json) {

    m_fully_explored_isValid = ::OpenAPI::fromJsonValue(m_fully_explored, json[QString("fullyExplored")]);
    m_fully_explored_isSet = !json[QString("fullyExplored")].isNull() && m_fully_explored_isValid;

    m_main_analysis_isValid = ::OpenAPI::fromJsonValue(m_main_analysis, json[QString("mainAnalysis")]);
    m_main_analysis_isSet = !json[QString("mainAnalysis")].isNull() && m_main_analysis_isValid;

    m_service_account_impersonation_analysis_isValid = ::OpenAPI::fromJsonValue(m_service_account_impersonation_analysis, json[QString("serviceAccountImpersonationAnalysis")]);
    m_service_account_impersonation_analysis_isSet = !json[QString("serviceAccountImpersonationAnalysis")].isNull() && m_service_account_impersonation_analysis_isValid;
}

QString OAIAnalyzeIamPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeIamPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_fully_explored_isSet) {
        obj.insert(QString("fullyExplored"), ::OpenAPI::toJsonValue(m_fully_explored));
    }
    if (m_main_analysis.isSet()) {
        obj.insert(QString("mainAnalysis"), ::OpenAPI::toJsonValue(m_main_analysis));
    }
    if (m_service_account_impersonation_analysis.size() > 0) {
        obj.insert(QString("serviceAccountImpersonationAnalysis"), ::OpenAPI::toJsonValue(m_service_account_impersonation_analysis));
    }
    return obj;
}

bool OAIAnalyzeIamPolicyResponse::isFullyExplored() const {
    return m_fully_explored;
}
void OAIAnalyzeIamPolicyResponse::setFullyExplored(const bool &fully_explored) {
    m_fully_explored = fully_explored;
    m_fully_explored_isSet = true;
}

bool OAIAnalyzeIamPolicyResponse::is_fully_explored_Set() const{
    return m_fully_explored_isSet;
}

bool OAIAnalyzeIamPolicyResponse::is_fully_explored_Valid() const{
    return m_fully_explored_isValid;
}

OAIIamPolicyAnalysis OAIAnalyzeIamPolicyResponse::getMainAnalysis() const {
    return m_main_analysis;
}
void OAIAnalyzeIamPolicyResponse::setMainAnalysis(const OAIIamPolicyAnalysis &main_analysis) {
    m_main_analysis = main_analysis;
    m_main_analysis_isSet = true;
}

bool OAIAnalyzeIamPolicyResponse::is_main_analysis_Set() const{
    return m_main_analysis_isSet;
}

bool OAIAnalyzeIamPolicyResponse::is_main_analysis_Valid() const{
    return m_main_analysis_isValid;
}

QList<OAIIamPolicyAnalysis> OAIAnalyzeIamPolicyResponse::getServiceAccountImpersonationAnalysis() const {
    return m_service_account_impersonation_analysis;
}
void OAIAnalyzeIamPolicyResponse::setServiceAccountImpersonationAnalysis(const QList<OAIIamPolicyAnalysis> &service_account_impersonation_analysis) {
    m_service_account_impersonation_analysis = service_account_impersonation_analysis;
    m_service_account_impersonation_analysis_isSet = true;
}

bool OAIAnalyzeIamPolicyResponse::is_service_account_impersonation_analysis_Set() const{
    return m_service_account_impersonation_analysis_isSet;
}

bool OAIAnalyzeIamPolicyResponse::is_service_account_impersonation_analysis_Valid() const{
    return m_service_account_impersonation_analysis_isValid;
}

bool OAIAnalyzeIamPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fully_explored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_impersonation_analysis.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeIamPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
