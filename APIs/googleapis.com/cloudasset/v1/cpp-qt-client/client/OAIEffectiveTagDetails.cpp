/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveTagDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveTagDetails::OAIEffectiveTagDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveTagDetails::OAIEffectiveTagDetails() {
    this->initializeModel();
}

OAIEffectiveTagDetails::~OAIEffectiveTagDetails() {}

void OAIEffectiveTagDetails::initializeModel() {

    m_attached_resource_isSet = false;
    m_attached_resource_isValid = false;

    m_effective_tags_isSet = false;
    m_effective_tags_isValid = false;
}

void OAIEffectiveTagDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveTagDetails::fromJsonObject(QJsonObject json) {

    m_attached_resource_isValid = ::OpenAPI::fromJsonValue(m_attached_resource, json[QString("attachedResource")]);
    m_attached_resource_isSet = !json[QString("attachedResource")].isNull() && m_attached_resource_isValid;

    m_effective_tags_isValid = ::OpenAPI::fromJsonValue(m_effective_tags, json[QString("effectiveTags")]);
    m_effective_tags_isSet = !json[QString("effectiveTags")].isNull() && m_effective_tags_isValid;
}

QString OAIEffectiveTagDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveTagDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_resource_isSet) {
        obj.insert(QString("attachedResource"), ::OpenAPI::toJsonValue(m_attached_resource));
    }
    if (m_effective_tags.size() > 0) {
        obj.insert(QString("effectiveTags"), ::OpenAPI::toJsonValue(m_effective_tags));
    }
    return obj;
}

QString OAIEffectiveTagDetails::getAttachedResource() const {
    return m_attached_resource;
}
void OAIEffectiveTagDetails::setAttachedResource(const QString &attached_resource) {
    m_attached_resource = attached_resource;
    m_attached_resource_isSet = true;
}

bool OAIEffectiveTagDetails::is_attached_resource_Set() const{
    return m_attached_resource_isSet;
}

bool OAIEffectiveTagDetails::is_attached_resource_Valid() const{
    return m_attached_resource_isValid;
}

QList<OAITag> OAIEffectiveTagDetails::getEffectiveTags() const {
    return m_effective_tags;
}
void OAIEffectiveTagDetails::setEffectiveTags(const QList<OAITag> &effective_tags) {
    m_effective_tags = effective_tags;
    m_effective_tags_isSet = true;
}

bool OAIEffectiveTagDetails::is_effective_tags_Set() const{
    return m_effective_tags_isSet;
}

bool OAIEffectiveTagDetails::is_effective_tags_Valid() const{
    return m_effective_tags_isValid;
}

bool OAIEffectiveTagDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveTagDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
