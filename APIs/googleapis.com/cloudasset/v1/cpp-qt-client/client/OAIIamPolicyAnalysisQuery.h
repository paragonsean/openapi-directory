/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIamPolicyAnalysisQuery.h
 *
 * IAM policy analysis query message.
 */

#ifndef OAIIamPolicyAnalysisQuery_H
#define OAIIamPolicyAnalysisQuery_H

#include <QJsonObject>

#include "OAIAccessSelector.h"
#include "OAIConditionContext.h"
#include "OAIIdentitySelector.h"
#include "OAIOptions.h"
#include "OAIResourceSelector.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccessSelector;
class OAIConditionContext;
class OAIIdentitySelector;
class OAIOptions;
class OAIResourceSelector;

class OAIIamPolicyAnalysisQuery : public OAIObject {
public:
    OAIIamPolicyAnalysisQuery();
    OAIIamPolicyAnalysisQuery(QString json);
    ~OAIIamPolicyAnalysisQuery() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccessSelector getAccessSelector() const;
    void setAccessSelector(const OAIAccessSelector &access_selector);
    bool is_access_selector_Set() const;
    bool is_access_selector_Valid() const;

    OAIConditionContext getConditionContext() const;
    void setConditionContext(const OAIConditionContext &condition_context);
    bool is_condition_context_Set() const;
    bool is_condition_context_Valid() const;

    OAIIdentitySelector getIdentitySelector() const;
    void setIdentitySelector(const OAIIdentitySelector &identity_selector);
    bool is_identity_selector_Set() const;
    bool is_identity_selector_Valid() const;

    OAIOptions getOptions() const;
    void setOptions(const OAIOptions &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    OAIResourceSelector getResourceSelector() const;
    void setResourceSelector(const OAIResourceSelector &resource_selector);
    bool is_resource_selector_Set() const;
    bool is_resource_selector_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccessSelector m_access_selector;
    bool m_access_selector_isSet;
    bool m_access_selector_isValid;

    OAIConditionContext m_condition_context;
    bool m_condition_context_isSet;
    bool m_condition_context_isValid;

    OAIIdentitySelector m_identity_selector;
    bool m_identity_selector_isSet;
    bool m_identity_selector_isValid;

    OAIOptions m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    OAIResourceSelector m_resource_selector;
    bool m_resource_selector_isSet;
    bool m_resource_selector_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIamPolicyAnalysisQuery)

#endif // OAIIamPolicyAnalysisQuery_H
