/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1AccessControlList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1AccessControlList::OAIGoogleCloudAssetV1AccessControlList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1AccessControlList::OAIGoogleCloudAssetV1AccessControlList() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1AccessControlList::~OAIGoogleCloudAssetV1AccessControlList() {}

void OAIGoogleCloudAssetV1AccessControlList::initializeModel() {

    m_accesses_isSet = false;
    m_accesses_isValid = false;

    m_condition_evaluation_isSet = false;
    m_condition_evaluation_isValid = false;

    m_resource_edges_isSet = false;
    m_resource_edges_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIGoogleCloudAssetV1AccessControlList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1AccessControlList::fromJsonObject(QJsonObject json) {

    m_accesses_isValid = ::OpenAPI::fromJsonValue(m_accesses, json[QString("accesses")]);
    m_accesses_isSet = !json[QString("accesses")].isNull() && m_accesses_isValid;

    m_condition_evaluation_isValid = ::OpenAPI::fromJsonValue(m_condition_evaluation, json[QString("conditionEvaluation")]);
    m_condition_evaluation_isSet = !json[QString("conditionEvaluation")].isNull() && m_condition_evaluation_isValid;

    m_resource_edges_isValid = ::OpenAPI::fromJsonValue(m_resource_edges, json[QString("resourceEdges")]);
    m_resource_edges_isSet = !json[QString("resourceEdges")].isNull() && m_resource_edges_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIGoogleCloudAssetV1AccessControlList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1AccessControlList::asJsonObject() const {
    QJsonObject obj;
    if (m_accesses.size() > 0) {
        obj.insert(QString("accesses"), ::OpenAPI::toJsonValue(m_accesses));
    }
    if (m_condition_evaluation.isSet()) {
        obj.insert(QString("conditionEvaluation"), ::OpenAPI::toJsonValue(m_condition_evaluation));
    }
    if (m_resource_edges.size() > 0) {
        obj.insert(QString("resourceEdges"), ::OpenAPI::toJsonValue(m_resource_edges));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QList<OAIGoogleCloudAssetV1Access> OAIGoogleCloudAssetV1AccessControlList::getAccesses() const {
    return m_accesses;
}
void OAIGoogleCloudAssetV1AccessControlList::setAccesses(const QList<OAIGoogleCloudAssetV1Access> &accesses) {
    m_accesses = accesses;
    m_accesses_isSet = true;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_accesses_Set() const{
    return m_accesses_isSet;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_accesses_Valid() const{
    return m_accesses_isValid;
}

OAIConditionEvaluation OAIGoogleCloudAssetV1AccessControlList::getConditionEvaluation() const {
    return m_condition_evaluation;
}
void OAIGoogleCloudAssetV1AccessControlList::setConditionEvaluation(const OAIConditionEvaluation &condition_evaluation) {
    m_condition_evaluation = condition_evaluation;
    m_condition_evaluation_isSet = true;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_condition_evaluation_Set() const{
    return m_condition_evaluation_isSet;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_condition_evaluation_Valid() const{
    return m_condition_evaluation_isValid;
}

QList<OAIGoogleCloudAssetV1Edge> OAIGoogleCloudAssetV1AccessControlList::getResourceEdges() const {
    return m_resource_edges;
}
void OAIGoogleCloudAssetV1AccessControlList::setResourceEdges(const QList<OAIGoogleCloudAssetV1Edge> &resource_edges) {
    m_resource_edges = resource_edges;
    m_resource_edges_isSet = true;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_resource_edges_Set() const{
    return m_resource_edges_isSet;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_resource_edges_Valid() const{
    return m_resource_edges_isValid;
}

QList<OAIGoogleCloudAssetV1Resource> OAIGoogleCloudAssetV1AccessControlList::getResources() const {
    return m_resources;
}
void OAIGoogleCloudAssetV1AccessControlList::setResources(const QList<OAIGoogleCloudAssetV1Resource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIGoogleCloudAssetV1AccessControlList::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIGoogleCloudAssetV1AccessControlList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accesses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_edges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1AccessControlList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
