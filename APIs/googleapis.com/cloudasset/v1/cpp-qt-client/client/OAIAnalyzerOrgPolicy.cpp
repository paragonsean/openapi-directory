/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzerOrgPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzerOrgPolicy::OAIAnalyzerOrgPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzerOrgPolicy::OAIAnalyzerOrgPolicy() {
    this->initializeModel();
}

OAIAnalyzerOrgPolicy::~OAIAnalyzerOrgPolicy() {}

void OAIAnalyzerOrgPolicy::initializeModel() {

    m_applied_resource_isSet = false;
    m_applied_resource_isValid = false;

    m_attached_resource_isSet = false;
    m_attached_resource_isValid = false;

    m_inherit_from_parent_isSet = false;
    m_inherit_from_parent_isValid = false;

    m_reset_isSet = false;
    m_reset_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;
}

void OAIAnalyzerOrgPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzerOrgPolicy::fromJsonObject(QJsonObject json) {

    m_applied_resource_isValid = ::OpenAPI::fromJsonValue(m_applied_resource, json[QString("appliedResource")]);
    m_applied_resource_isSet = !json[QString("appliedResource")].isNull() && m_applied_resource_isValid;

    m_attached_resource_isValid = ::OpenAPI::fromJsonValue(m_attached_resource, json[QString("attachedResource")]);
    m_attached_resource_isSet = !json[QString("attachedResource")].isNull() && m_attached_resource_isValid;

    m_inherit_from_parent_isValid = ::OpenAPI::fromJsonValue(m_inherit_from_parent, json[QString("inheritFromParent")]);
    m_inherit_from_parent_isSet = !json[QString("inheritFromParent")].isNull() && m_inherit_from_parent_isValid;

    m_reset_isValid = ::OpenAPI::fromJsonValue(m_reset, json[QString("reset")]);
    m_reset_isSet = !json[QString("reset")].isNull() && m_reset_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;
}

QString OAIAnalyzerOrgPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzerOrgPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_resource_isSet) {
        obj.insert(QString("appliedResource"), ::OpenAPI::toJsonValue(m_applied_resource));
    }
    if (m_attached_resource_isSet) {
        obj.insert(QString("attachedResource"), ::OpenAPI::toJsonValue(m_attached_resource));
    }
    if (m_inherit_from_parent_isSet) {
        obj.insert(QString("inheritFromParent"), ::OpenAPI::toJsonValue(m_inherit_from_parent));
    }
    if (m_reset_isSet) {
        obj.insert(QString("reset"), ::OpenAPI::toJsonValue(m_reset));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    return obj;
}

QString OAIAnalyzerOrgPolicy::getAppliedResource() const {
    return m_applied_resource;
}
void OAIAnalyzerOrgPolicy::setAppliedResource(const QString &applied_resource) {
    m_applied_resource = applied_resource;
    m_applied_resource_isSet = true;
}

bool OAIAnalyzerOrgPolicy::is_applied_resource_Set() const{
    return m_applied_resource_isSet;
}

bool OAIAnalyzerOrgPolicy::is_applied_resource_Valid() const{
    return m_applied_resource_isValid;
}

QString OAIAnalyzerOrgPolicy::getAttachedResource() const {
    return m_attached_resource;
}
void OAIAnalyzerOrgPolicy::setAttachedResource(const QString &attached_resource) {
    m_attached_resource = attached_resource;
    m_attached_resource_isSet = true;
}

bool OAIAnalyzerOrgPolicy::is_attached_resource_Set() const{
    return m_attached_resource_isSet;
}

bool OAIAnalyzerOrgPolicy::is_attached_resource_Valid() const{
    return m_attached_resource_isValid;
}

bool OAIAnalyzerOrgPolicy::isInheritFromParent() const {
    return m_inherit_from_parent;
}
void OAIAnalyzerOrgPolicy::setInheritFromParent(const bool &inherit_from_parent) {
    m_inherit_from_parent = inherit_from_parent;
    m_inherit_from_parent_isSet = true;
}

bool OAIAnalyzerOrgPolicy::is_inherit_from_parent_Set() const{
    return m_inherit_from_parent_isSet;
}

bool OAIAnalyzerOrgPolicy::is_inherit_from_parent_Valid() const{
    return m_inherit_from_parent_isValid;
}

bool OAIAnalyzerOrgPolicy::isReset() const {
    return m_reset;
}
void OAIAnalyzerOrgPolicy::setReset(const bool &reset) {
    m_reset = reset;
    m_reset_isSet = true;
}

bool OAIAnalyzerOrgPolicy::is_reset_Set() const{
    return m_reset_isSet;
}

bool OAIAnalyzerOrgPolicy::is_reset_Valid() const{
    return m_reset_isValid;
}

QList<OAIGoogleCloudAssetV1Rule> OAIAnalyzerOrgPolicy::getRules() const {
    return m_rules;
}
void OAIAnalyzerOrgPolicy::setRules(const QList<OAIGoogleCloudAssetV1Rule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIAnalyzerOrgPolicy::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIAnalyzerOrgPolicy::is_rules_Valid() const{
    return m_rules_isValid;
}

bool OAIAnalyzerOrgPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_from_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzerOrgPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
