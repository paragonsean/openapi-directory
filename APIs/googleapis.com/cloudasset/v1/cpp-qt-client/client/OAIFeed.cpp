/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed::OAIFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed::OAIFeed() {
    this->initializeModel();
}

OAIFeed::~OAIFeed() {}

void OAIFeed::initializeModel() {

    m_asset_names_isSet = false;
    m_asset_names_isValid = false;

    m_asset_types_isSet = false;
    m_asset_types_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_feed_output_config_isSet = false;
    m_feed_output_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_relationship_types_isSet = false;
    m_relationship_types_isValid = false;
}

void OAIFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed::fromJsonObject(QJsonObject json) {

    m_asset_names_isValid = ::OpenAPI::fromJsonValue(m_asset_names, json[QString("assetNames")]);
    m_asset_names_isSet = !json[QString("assetNames")].isNull() && m_asset_names_isValid;

    m_asset_types_isValid = ::OpenAPI::fromJsonValue(m_asset_types, json[QString("assetTypes")]);
    m_asset_types_isSet = !json[QString("assetTypes")].isNull() && m_asset_types_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_feed_output_config_isValid = ::OpenAPI::fromJsonValue(m_feed_output_config, json[QString("feedOutputConfig")]);
    m_feed_output_config_isSet = !json[QString("feedOutputConfig")].isNull() && m_feed_output_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_relationship_types_isValid = ::OpenAPI::fromJsonValue(m_relationship_types, json[QString("relationshipTypes")]);
    m_relationship_types_isSet = !json[QString("relationshipTypes")].isNull() && m_relationship_types_isValid;
}

QString OAIFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_names.size() > 0) {
        obj.insert(QString("assetNames"), ::OpenAPI::toJsonValue(m_asset_names));
    }
    if (m_asset_types.size() > 0) {
        obj.insert(QString("assetTypes"), ::OpenAPI::toJsonValue(m_asset_types));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_feed_output_config.isSet()) {
        obj.insert(QString("feedOutputConfig"), ::OpenAPI::toJsonValue(m_feed_output_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_relationship_types.size() > 0) {
        obj.insert(QString("relationshipTypes"), ::OpenAPI::toJsonValue(m_relationship_types));
    }
    return obj;
}

QList<QString> OAIFeed::getAssetNames() const {
    return m_asset_names;
}
void OAIFeed::setAssetNames(const QList<QString> &asset_names) {
    m_asset_names = asset_names;
    m_asset_names_isSet = true;
}

bool OAIFeed::is_asset_names_Set() const{
    return m_asset_names_isSet;
}

bool OAIFeed::is_asset_names_Valid() const{
    return m_asset_names_isValid;
}

QList<QString> OAIFeed::getAssetTypes() const {
    return m_asset_types;
}
void OAIFeed::setAssetTypes(const QList<QString> &asset_types) {
    m_asset_types = asset_types;
    m_asset_types_isSet = true;
}

bool OAIFeed::is_asset_types_Set() const{
    return m_asset_types_isSet;
}

bool OAIFeed::is_asset_types_Valid() const{
    return m_asset_types_isValid;
}

OAIExpr OAIFeed::getCondition() const {
    return m_condition;
}
void OAIFeed::setCondition(const OAIExpr &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIFeed::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIFeed::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIFeed::getContentType() const {
    return m_content_type;
}
void OAIFeed::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIFeed::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIFeed::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIFeedOutputConfig OAIFeed::getFeedOutputConfig() const {
    return m_feed_output_config;
}
void OAIFeed::setFeedOutputConfig(const OAIFeedOutputConfig &feed_output_config) {
    m_feed_output_config = feed_output_config;
    m_feed_output_config_isSet = true;
}

bool OAIFeed::is_feed_output_config_Set() const{
    return m_feed_output_config_isSet;
}

bool OAIFeed::is_feed_output_config_Valid() const{
    return m_feed_output_config_isValid;
}

QString OAIFeed::getName() const {
    return m_name;
}
void OAIFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeed::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIFeed::getRelationshipTypes() const {
    return m_relationship_types;
}
void OAIFeed::setRelationshipTypes(const QList<QString> &relationship_types) {
    m_relationship_types = relationship_types;
    m_relationship_types_isSet = true;
}

bool OAIFeed::is_relationship_types_Set() const{
    return m_relationship_types_isSet;
}

bool OAIFeed::is_relationship_types_Valid() const{
    return m_relationship_types_isValid;
}

bool OAIFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
