/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowsUpdatePackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowsUpdatePackage::OAIWindowsUpdatePackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowsUpdatePackage::OAIWindowsUpdatePackage() {
    this->initializeModel();
}

OAIWindowsUpdatePackage::~OAIWindowsUpdatePackage() {}

void OAIWindowsUpdatePackage::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kb_article_ids_isSet = false;
    m_kb_article_ids_isValid = false;

    m_last_deployment_change_time_isSet = false;
    m_last_deployment_change_time_isValid = false;

    m_more_info_urls_isSet = false;
    m_more_info_urls_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;

    m_support_url_isSet = false;
    m_support_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_update_id_isSet = false;
    m_update_id_isValid = false;
}

void OAIWindowsUpdatePackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowsUpdatePackage::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_kb_article_ids_isValid = ::OpenAPI::fromJsonValue(m_kb_article_ids, json[QString("kbArticleIds")]);
    m_kb_article_ids_isSet = !json[QString("kbArticleIds")].isNull() && m_kb_article_ids_isValid;

    m_last_deployment_change_time_isValid = ::OpenAPI::fromJsonValue(m_last_deployment_change_time, json[QString("lastDeploymentChangeTime")]);
    m_last_deployment_change_time_isSet = !json[QString("lastDeploymentChangeTime")].isNull() && m_last_deployment_change_time_isValid;

    m_more_info_urls_isValid = ::OpenAPI::fromJsonValue(m_more_info_urls, json[QString("moreInfoUrls")]);
    m_more_info_urls_isSet = !json[QString("moreInfoUrls")].isNull() && m_more_info_urls_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revisionNumber")]);
    m_revision_number_isSet = !json[QString("revisionNumber")].isNull() && m_revision_number_isValid;

    m_support_url_isValid = ::OpenAPI::fromJsonValue(m_support_url, json[QString("supportUrl")]);
    m_support_url_isSet = !json[QString("supportUrl")].isNull() && m_support_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_update_id_isValid = ::OpenAPI::fromJsonValue(m_update_id, json[QString("updateId")]);
    m_update_id_isSet = !json[QString("updateId")].isNull() && m_update_id_isValid;
}

QString OAIWindowsUpdatePackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowsUpdatePackage::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kb_article_ids.size() > 0) {
        obj.insert(QString("kbArticleIds"), ::OpenAPI::toJsonValue(m_kb_article_ids));
    }
    if (m_last_deployment_change_time_isSet) {
        obj.insert(QString("lastDeploymentChangeTime"), ::OpenAPI::toJsonValue(m_last_deployment_change_time));
    }
    if (m_more_info_urls.size() > 0) {
        obj.insert(QString("moreInfoUrls"), ::OpenAPI::toJsonValue(m_more_info_urls));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revisionNumber"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    if (m_support_url_isSet) {
        obj.insert(QString("supportUrl"), ::OpenAPI::toJsonValue(m_support_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_update_id_isSet) {
        obj.insert(QString("updateId"), ::OpenAPI::toJsonValue(m_update_id));
    }
    return obj;
}

QList<OAIWindowsUpdateCategory> OAIWindowsUpdatePackage::getCategories() const {
    return m_categories;
}
void OAIWindowsUpdatePackage::setCategories(const QList<OAIWindowsUpdateCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIWindowsUpdatePackage::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIWindowsUpdatePackage::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIWindowsUpdatePackage::getDescription() const {
    return m_description;
}
void OAIWindowsUpdatePackage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWindowsUpdatePackage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWindowsUpdatePackage::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIWindowsUpdatePackage::getKbArticleIds() const {
    return m_kb_article_ids;
}
void OAIWindowsUpdatePackage::setKbArticleIds(const QList<QString> &kb_article_ids) {
    m_kb_article_ids = kb_article_ids;
    m_kb_article_ids_isSet = true;
}

bool OAIWindowsUpdatePackage::is_kb_article_ids_Set() const{
    return m_kb_article_ids_isSet;
}

bool OAIWindowsUpdatePackage::is_kb_article_ids_Valid() const{
    return m_kb_article_ids_isValid;
}

QString OAIWindowsUpdatePackage::getLastDeploymentChangeTime() const {
    return m_last_deployment_change_time;
}
void OAIWindowsUpdatePackage::setLastDeploymentChangeTime(const QString &last_deployment_change_time) {
    m_last_deployment_change_time = last_deployment_change_time;
    m_last_deployment_change_time_isSet = true;
}

bool OAIWindowsUpdatePackage::is_last_deployment_change_time_Set() const{
    return m_last_deployment_change_time_isSet;
}

bool OAIWindowsUpdatePackage::is_last_deployment_change_time_Valid() const{
    return m_last_deployment_change_time_isValid;
}

QList<QString> OAIWindowsUpdatePackage::getMoreInfoUrls() const {
    return m_more_info_urls;
}
void OAIWindowsUpdatePackage::setMoreInfoUrls(const QList<QString> &more_info_urls) {
    m_more_info_urls = more_info_urls;
    m_more_info_urls_isSet = true;
}

bool OAIWindowsUpdatePackage::is_more_info_urls_Set() const{
    return m_more_info_urls_isSet;
}

bool OAIWindowsUpdatePackage::is_more_info_urls_Valid() const{
    return m_more_info_urls_isValid;
}

qint32 OAIWindowsUpdatePackage::getRevisionNumber() const {
    return m_revision_number;
}
void OAIWindowsUpdatePackage::setRevisionNumber(const qint32 &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIWindowsUpdatePackage::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIWindowsUpdatePackage::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

QString OAIWindowsUpdatePackage::getSupportUrl() const {
    return m_support_url;
}
void OAIWindowsUpdatePackage::setSupportUrl(const QString &support_url) {
    m_support_url = support_url;
    m_support_url_isSet = true;
}

bool OAIWindowsUpdatePackage::is_support_url_Set() const{
    return m_support_url_isSet;
}

bool OAIWindowsUpdatePackage::is_support_url_Valid() const{
    return m_support_url_isValid;
}

QString OAIWindowsUpdatePackage::getTitle() const {
    return m_title;
}
void OAIWindowsUpdatePackage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWindowsUpdatePackage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWindowsUpdatePackage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIWindowsUpdatePackage::getUpdateId() const {
    return m_update_id;
}
void OAIWindowsUpdatePackage::setUpdateId(const QString &update_id) {
    m_update_id = update_id;
    m_update_id_isSet = true;
}

bool OAIWindowsUpdatePackage::is_update_id_Set() const{
    return m_update_id_isSet;
}

bool OAIWindowsUpdatePackage::is_update_id_Valid() const{
    return m_update_id_isValid;
}

bool OAIWindowsUpdatePackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kb_article_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_deployment_change_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_info_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowsUpdatePackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
