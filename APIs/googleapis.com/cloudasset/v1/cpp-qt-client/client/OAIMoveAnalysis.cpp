/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoveAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoveAnalysis::OAIMoveAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoveAnalysis::OAIMoveAnalysis() {
    this->initializeModel();
}

OAIMoveAnalysis::~OAIMoveAnalysis() {}

void OAIMoveAnalysis::initializeModel() {

    m_analysis_isSet = false;
    m_analysis_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIMoveAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoveAnalysis::fromJsonObject(QJsonObject json) {

    m_analysis_isValid = ::OpenAPI::fromJsonValue(m_analysis, json[QString("analysis")]);
    m_analysis_isSet = !json[QString("analysis")].isNull() && m_analysis_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIMoveAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoveAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis.isSet()) {
        obj.insert(QString("analysis"), ::OpenAPI::toJsonValue(m_analysis));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIMoveAnalysisResult OAIMoveAnalysis::getAnalysis() const {
    return m_analysis;
}
void OAIMoveAnalysis::setAnalysis(const OAIMoveAnalysisResult &analysis) {
    m_analysis = analysis;
    m_analysis_isSet = true;
}

bool OAIMoveAnalysis::is_analysis_Set() const{
    return m_analysis_isSet;
}

bool OAIMoveAnalysis::is_analysis_Valid() const{
    return m_analysis_isValid;
}

QString OAIMoveAnalysis::getDisplayName() const {
    return m_display_name;
}
void OAIMoveAnalysis::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMoveAnalysis::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMoveAnalysis::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIStatus OAIMoveAnalysis::getError() const {
    return m_error;
}
void OAIMoveAnalysis::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMoveAnalysis::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMoveAnalysis::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIMoveAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoveAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
