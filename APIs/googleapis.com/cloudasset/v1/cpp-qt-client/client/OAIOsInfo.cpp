/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOsInfo::OAIOsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOsInfo::OAIOsInfo() {
    this->initializeModel();
}

OAIOsInfo::~OAIOsInfo() {}

void OAIOsInfo::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_kernel_release_isSet = false;
    m_kernel_release_isValid = false;

    m_kernel_version_isSet = false;
    m_kernel_version_isValid = false;

    m_long_name_isSet = false;
    m_long_name_isValid = false;

    m_osconfig_agent_version_isSet = false;
    m_osconfig_agent_version_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOsInfo::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_kernel_release_isValid = ::OpenAPI::fromJsonValue(m_kernel_release, json[QString("kernelRelease")]);
    m_kernel_release_isSet = !json[QString("kernelRelease")].isNull() && m_kernel_release_isValid;

    m_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_kernel_version, json[QString("kernelVersion")]);
    m_kernel_version_isSet = !json[QString("kernelVersion")].isNull() && m_kernel_version_isValid;

    m_long_name_isValid = ::OpenAPI::fromJsonValue(m_long_name, json[QString("longName")]);
    m_long_name_isSet = !json[QString("longName")].isNull() && m_long_name_isValid;

    m_osconfig_agent_version_isValid = ::OpenAPI::fromJsonValue(m_osconfig_agent_version, json[QString("osconfigAgentVersion")]);
    m_osconfig_agent_version_isSet = !json[QString("osconfigAgentVersion")].isNull() && m_osconfig_agent_version_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_kernel_release_isSet) {
        obj.insert(QString("kernelRelease"), ::OpenAPI::toJsonValue(m_kernel_release));
    }
    if (m_kernel_version_isSet) {
        obj.insert(QString("kernelVersion"), ::OpenAPI::toJsonValue(m_kernel_version));
    }
    if (m_long_name_isSet) {
        obj.insert(QString("longName"), ::OpenAPI::toJsonValue(m_long_name));
    }
    if (m_osconfig_agent_version_isSet) {
        obj.insert(QString("osconfigAgentVersion"), ::OpenAPI::toJsonValue(m_osconfig_agent_version));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOsInfo::getArchitecture() const {
    return m_architecture;
}
void OAIOsInfo::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIOsInfo::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIOsInfo::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIOsInfo::getHostname() const {
    return m_hostname;
}
void OAIOsInfo::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIOsInfo::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIOsInfo::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIOsInfo::getKernelRelease() const {
    return m_kernel_release;
}
void OAIOsInfo::setKernelRelease(const QString &kernel_release) {
    m_kernel_release = kernel_release;
    m_kernel_release_isSet = true;
}

bool OAIOsInfo::is_kernel_release_Set() const{
    return m_kernel_release_isSet;
}

bool OAIOsInfo::is_kernel_release_Valid() const{
    return m_kernel_release_isValid;
}

QString OAIOsInfo::getKernelVersion() const {
    return m_kernel_version;
}
void OAIOsInfo::setKernelVersion(const QString &kernel_version) {
    m_kernel_version = kernel_version;
    m_kernel_version_isSet = true;
}

bool OAIOsInfo::is_kernel_version_Set() const{
    return m_kernel_version_isSet;
}

bool OAIOsInfo::is_kernel_version_Valid() const{
    return m_kernel_version_isValid;
}

QString OAIOsInfo::getLongName() const {
    return m_long_name;
}
void OAIOsInfo::setLongName(const QString &long_name) {
    m_long_name = long_name;
    m_long_name_isSet = true;
}

bool OAIOsInfo::is_long_name_Set() const{
    return m_long_name_isSet;
}

bool OAIOsInfo::is_long_name_Valid() const{
    return m_long_name_isValid;
}

QString OAIOsInfo::getOsconfigAgentVersion() const {
    return m_osconfig_agent_version;
}
void OAIOsInfo::setOsconfigAgentVersion(const QString &osconfig_agent_version) {
    m_osconfig_agent_version = osconfig_agent_version;
    m_osconfig_agent_version_isSet = true;
}

bool OAIOsInfo::is_osconfig_agent_version_Set() const{
    return m_osconfig_agent_version_isSet;
}

bool OAIOsInfo::is_osconfig_agent_version_Valid() const{
    return m_osconfig_agent_version_isValid;
}

QString OAIOsInfo::getShortName() const {
    return m_short_name;
}
void OAIOsInfo::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIOsInfo::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIOsInfo::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIOsInfo::getVersion() const {
    return m_version;
}
void OAIOsInfo::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOsInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOsInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_osconfig_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
