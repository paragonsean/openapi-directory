/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIamPolicySearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIamPolicySearchResult::OAIIamPolicySearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIamPolicySearchResult::OAIIamPolicySearchResult() {
    this->initializeModel();
}

OAIIamPolicySearchResult::~OAIIamPolicySearchResult() {}

void OAIIamPolicySearchResult::initializeModel() {

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIIamPolicySearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIamPolicySearchResult::fromJsonObject(QJsonObject json) {

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("folders")]);
    m_folders_isSet = !json[QString("folders")].isNull() && m_folders_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIIamPolicySearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIamPolicySearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_type_isSet) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_explanation.isSet()) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_folders.size() > 0) {
        obj.insert(QString("folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QString OAIIamPolicySearchResult::getAssetType() const {
    return m_asset_type;
}
void OAIIamPolicySearchResult::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIIamPolicySearchResult::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIIamPolicySearchResult::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

OAIExplanation OAIIamPolicySearchResult::getExplanation() const {
    return m_explanation;
}
void OAIIamPolicySearchResult::setExplanation(const OAIExplanation &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAIIamPolicySearchResult::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAIIamPolicySearchResult::is_explanation_Valid() const{
    return m_explanation_isValid;
}

QList<QString> OAIIamPolicySearchResult::getFolders() const {
    return m_folders;
}
void OAIIamPolicySearchResult::setFolders(const QList<QString> &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAIIamPolicySearchResult::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAIIamPolicySearchResult::is_folders_Valid() const{
    return m_folders_isValid;
}

QString OAIIamPolicySearchResult::getOrganization() const {
    return m_organization;
}
void OAIIamPolicySearchResult::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIIamPolicySearchResult::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIIamPolicySearchResult::is_organization_Valid() const{
    return m_organization_isValid;
}

OAIPolicy OAIIamPolicySearchResult::getPolicy() const {
    return m_policy;
}
void OAIIamPolicySearchResult::setPolicy(const OAIPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIIamPolicySearchResult::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIIamPolicySearchResult::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIIamPolicySearchResult::getProject() const {
    return m_project;
}
void OAIIamPolicySearchResult::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIIamPolicySearchResult::is_project_Set() const{
    return m_project_isSet;
}

bool OAIIamPolicySearchResult::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIIamPolicySearchResult::getResource() const {
    return m_resource;
}
void OAIIamPolicySearchResult::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIIamPolicySearchResult::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIIamPolicySearchResult::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIIamPolicySearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIamPolicySearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
