/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyInfo::OAIPolicyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyInfo::OAIPolicyInfo() {
    this->initializeModel();
}

OAIPolicyInfo::~OAIPolicyInfo() {}

void OAIPolicyInfo::initializeModel() {

    m_attached_resource_isSet = false;
    m_attached_resource_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPolicyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyInfo::fromJsonObject(QJsonObject json) {

    m_attached_resource_isValid = ::OpenAPI::fromJsonValue(m_attached_resource, json[QString("attachedResource")]);
    m_attached_resource_isSet = !json[QString("attachedResource")].isNull() && m_attached_resource_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIPolicyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_resource_isSet) {
        obj.insert(QString("attachedResource"), ::OpenAPI::toJsonValue(m_attached_resource));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPolicyInfo::getAttachedResource() const {
    return m_attached_resource;
}
void OAIPolicyInfo::setAttachedResource(const QString &attached_resource) {
    m_attached_resource = attached_resource;
    m_attached_resource_isSet = true;
}

bool OAIPolicyInfo::is_attached_resource_Set() const{
    return m_attached_resource_isSet;
}

bool OAIPolicyInfo::is_attached_resource_Valid() const{
    return m_attached_resource_isValid;
}

OAIPolicy OAIPolicyInfo::getPolicy() const {
    return m_policy;
}
void OAIPolicyInfo::setPolicy(const OAIPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPolicyInfo::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPolicyInfo::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPolicyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
