/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeOrgPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeOrgPoliciesResponse::OAIAnalyzeOrgPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeOrgPoliciesResponse::OAIAnalyzeOrgPoliciesResponse() {
    this->initializeModel();
}

OAIAnalyzeOrgPoliciesResponse::~OAIAnalyzeOrgPoliciesResponse() {}

void OAIAnalyzeOrgPoliciesResponse::initializeModel() {

    m_constraint_isSet = false;
    m_constraint_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_org_policy_results_isSet = false;
    m_org_policy_results_isValid = false;
}

void OAIAnalyzeOrgPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeOrgPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_constraint_isValid = ::OpenAPI::fromJsonValue(m_constraint, json[QString("constraint")]);
    m_constraint_isSet = !json[QString("constraint")].isNull() && m_constraint_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_org_policy_results_isValid = ::OpenAPI::fromJsonValue(m_org_policy_results, json[QString("orgPolicyResults")]);
    m_org_policy_results_isSet = !json[QString("orgPolicyResults")].isNull() && m_org_policy_results_isValid;
}

QString OAIAnalyzeOrgPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeOrgPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_constraint.isSet()) {
        obj.insert(QString("constraint"), ::OpenAPI::toJsonValue(m_constraint));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_org_policy_results.size() > 0) {
        obj.insert(QString("orgPolicyResults"), ::OpenAPI::toJsonValue(m_org_policy_results));
    }
    return obj;
}

OAIAnalyzerOrgPolicyConstraint OAIAnalyzeOrgPoliciesResponse::getConstraint() const {
    return m_constraint;
}
void OAIAnalyzeOrgPoliciesResponse::setConstraint(const OAIAnalyzerOrgPolicyConstraint &constraint) {
    m_constraint = constraint;
    m_constraint_isSet = true;
}

bool OAIAnalyzeOrgPoliciesResponse::is_constraint_Set() const{
    return m_constraint_isSet;
}

bool OAIAnalyzeOrgPoliciesResponse::is_constraint_Valid() const{
    return m_constraint_isValid;
}

QString OAIAnalyzeOrgPoliciesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIAnalyzeOrgPoliciesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIAnalyzeOrgPoliciesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIAnalyzeOrgPoliciesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIOrgPolicyResult> OAIAnalyzeOrgPoliciesResponse::getOrgPolicyResults() const {
    return m_org_policy_results;
}
void OAIAnalyzeOrgPoliciesResponse::setOrgPolicyResults(const QList<OAIOrgPolicyResult> &org_policy_results) {
    m_org_policy_results = org_policy_results;
    m_org_policy_results_isSet = true;
}

bool OAIAnalyzeOrgPoliciesResponse::is_org_policy_results_Set() const{
    return m_org_policy_results_isSet;
}

bool OAIAnalyzeOrgPoliciesResponse::is_org_policy_results_Valid() const{
    return m_org_policy_results_isValid;
}

bool OAIAnalyzeOrgPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_policy_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeOrgPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
