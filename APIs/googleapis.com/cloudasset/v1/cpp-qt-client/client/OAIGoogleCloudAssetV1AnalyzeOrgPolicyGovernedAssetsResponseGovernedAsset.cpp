/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset() {
    this->initializeModel();
}

OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::~OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset() {}

void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::initializeModel() {

    m_consolidated_policy_isSet = false;
    m_consolidated_policy_isValid = false;

    m_governed_iam_policy_isSet = false;
    m_governed_iam_policy_isValid = false;

    m_governed_resource_isSet = false;
    m_governed_resource_isValid = false;

    m_policy_bundle_isSet = false;
    m_policy_bundle_isValid = false;
}

void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::fromJsonObject(QJsonObject json) {

    m_consolidated_policy_isValid = ::OpenAPI::fromJsonValue(m_consolidated_policy, json[QString("consolidatedPolicy")]);
    m_consolidated_policy_isSet = !json[QString("consolidatedPolicy")].isNull() && m_consolidated_policy_isValid;

    m_governed_iam_policy_isValid = ::OpenAPI::fromJsonValue(m_governed_iam_policy, json[QString("governedIamPolicy")]);
    m_governed_iam_policy_isSet = !json[QString("governedIamPolicy")].isNull() && m_governed_iam_policy_isValid;

    m_governed_resource_isValid = ::OpenAPI::fromJsonValue(m_governed_resource, json[QString("governedResource")]);
    m_governed_resource_isSet = !json[QString("governedResource")].isNull() && m_governed_resource_isValid;

    m_policy_bundle_isValid = ::OpenAPI::fromJsonValue(m_policy_bundle, json[QString("policyBundle")]);
    m_policy_bundle_isSet = !json[QString("policyBundle")].isNull() && m_policy_bundle_isValid;
}

QString OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_consolidated_policy.isSet()) {
        obj.insert(QString("consolidatedPolicy"), ::OpenAPI::toJsonValue(m_consolidated_policy));
    }
    if (m_governed_iam_policy.isSet()) {
        obj.insert(QString("governedIamPolicy"), ::OpenAPI::toJsonValue(m_governed_iam_policy));
    }
    if (m_governed_resource.isSet()) {
        obj.insert(QString("governedResource"), ::OpenAPI::toJsonValue(m_governed_resource));
    }
    if (m_policy_bundle.size() > 0) {
        obj.insert(QString("policyBundle"), ::OpenAPI::toJsonValue(m_policy_bundle));
    }
    return obj;
}

OAIAnalyzerOrgPolicy OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::getConsolidatedPolicy() const {
    return m_consolidated_policy;
}
void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::setConsolidatedPolicy(const OAIAnalyzerOrgPolicy &consolidated_policy) {
    m_consolidated_policy = consolidated_policy;
    m_consolidated_policy_isSet = true;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_consolidated_policy_Set() const{
    return m_consolidated_policy_isSet;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_consolidated_policy_Valid() const{
    return m_consolidated_policy_isValid;
}

OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedIamPolicy OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::getGovernedIamPolicy() const {
    return m_governed_iam_policy;
}
void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::setGovernedIamPolicy(const OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedIamPolicy &governed_iam_policy) {
    m_governed_iam_policy = governed_iam_policy;
    m_governed_iam_policy_isSet = true;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_governed_iam_policy_Set() const{
    return m_governed_iam_policy_isSet;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_governed_iam_policy_Valid() const{
    return m_governed_iam_policy_isValid;
}

OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedResource OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::getGovernedResource() const {
    return m_governed_resource;
}
void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::setGovernedResource(const OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedResource &governed_resource) {
    m_governed_resource = governed_resource;
    m_governed_resource_isSet = true;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_governed_resource_Set() const{
    return m_governed_resource_isSet;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_governed_resource_Valid() const{
    return m_governed_resource_isValid;
}

QList<OAIAnalyzerOrgPolicy> OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::getPolicyBundle() const {
    return m_policy_bundle;
}
void OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::setPolicyBundle(const QList<OAIAnalyzerOrgPolicy> &policy_bundle) {
    m_policy_bundle = policy_bundle;
    m_policy_bundle_isSet = true;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_policy_bundle_Set() const{
    return m_policy_bundle_isSet;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::is_policy_bundle_Valid() const{
    return m_policy_bundle_isValid;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consolidated_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_governed_iam_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_governed_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_bundle.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
