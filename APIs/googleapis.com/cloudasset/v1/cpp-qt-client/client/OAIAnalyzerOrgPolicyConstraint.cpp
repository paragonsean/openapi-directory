/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzerOrgPolicyConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzerOrgPolicyConstraint::OAIAnalyzerOrgPolicyConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzerOrgPolicyConstraint::OAIAnalyzerOrgPolicyConstraint() {
    this->initializeModel();
}

OAIAnalyzerOrgPolicyConstraint::~OAIAnalyzerOrgPolicyConstraint() {}

void OAIAnalyzerOrgPolicyConstraint::initializeModel() {

    m_custom_constraint_isSet = false;
    m_custom_constraint_isValid = false;

    m_google_defined_constraint_isSet = false;
    m_google_defined_constraint_isValid = false;
}

void OAIAnalyzerOrgPolicyConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzerOrgPolicyConstraint::fromJsonObject(QJsonObject json) {

    m_custom_constraint_isValid = ::OpenAPI::fromJsonValue(m_custom_constraint, json[QString("customConstraint")]);
    m_custom_constraint_isSet = !json[QString("customConstraint")].isNull() && m_custom_constraint_isValid;

    m_google_defined_constraint_isValid = ::OpenAPI::fromJsonValue(m_google_defined_constraint, json[QString("googleDefinedConstraint")]);
    m_google_defined_constraint_isSet = !json[QString("googleDefinedConstraint")].isNull() && m_google_defined_constraint_isValid;
}

QString OAIAnalyzerOrgPolicyConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzerOrgPolicyConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_constraint.isSet()) {
        obj.insert(QString("customConstraint"), ::OpenAPI::toJsonValue(m_custom_constraint));
    }
    if (m_google_defined_constraint.isSet()) {
        obj.insert(QString("googleDefinedConstraint"), ::OpenAPI::toJsonValue(m_google_defined_constraint));
    }
    return obj;
}

OAIGoogleCloudAssetV1CustomConstraint OAIAnalyzerOrgPolicyConstraint::getCustomConstraint() const {
    return m_custom_constraint;
}
void OAIAnalyzerOrgPolicyConstraint::setCustomConstraint(const OAIGoogleCloudAssetV1CustomConstraint &custom_constraint) {
    m_custom_constraint = custom_constraint;
    m_custom_constraint_isSet = true;
}

bool OAIAnalyzerOrgPolicyConstraint::is_custom_constraint_Set() const{
    return m_custom_constraint_isSet;
}

bool OAIAnalyzerOrgPolicyConstraint::is_custom_constraint_Valid() const{
    return m_custom_constraint_isValid;
}

OAIGoogleCloudAssetV1Constraint OAIAnalyzerOrgPolicyConstraint::getGoogleDefinedConstraint() const {
    return m_google_defined_constraint;
}
void OAIAnalyzerOrgPolicyConstraint::setGoogleDefinedConstraint(const OAIGoogleCloudAssetV1Constraint &google_defined_constraint) {
    m_google_defined_constraint = google_defined_constraint;
    m_google_defined_constraint_isSet = true;
}

bool OAIAnalyzerOrgPolicyConstraint::is_google_defined_constraint_Set() const{
    return m_google_defined_constraint_isSet;
}

bool OAIAnalyzerOrgPolicyConstraint::is_google_defined_constraint_Valid() const{
    return m_google_defined_constraint_isValid;
}

bool OAIAnalyzerOrgPolicyConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_defined_constraint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzerOrgPolicyConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
