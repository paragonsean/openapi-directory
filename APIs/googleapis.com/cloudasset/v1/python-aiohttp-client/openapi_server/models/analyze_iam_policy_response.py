# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iam_policy_analysis import IamPolicyAnalysis
from openapi_server import util


class AnalyzeIamPolicyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fully_explored: bool=None, main_analysis: IamPolicyAnalysis=None, service_account_impersonation_analysis: List[IamPolicyAnalysis]=None):
        """AnalyzeIamPolicyResponse - a model defined in OpenAPI

        :param fully_explored: The fully_explored of this AnalyzeIamPolicyResponse.
        :param main_analysis: The main_analysis of this AnalyzeIamPolicyResponse.
        :param service_account_impersonation_analysis: The service_account_impersonation_analysis of this AnalyzeIamPolicyResponse.
        """
        self.openapi_types = {
            'fully_explored': bool,
            'main_analysis': IamPolicyAnalysis,
            'service_account_impersonation_analysis': List[IamPolicyAnalysis]
        }

        self.attribute_map = {
            'fully_explored': 'fullyExplored',
            'main_analysis': 'mainAnalysis',
            'service_account_impersonation_analysis': 'serviceAccountImpersonationAnalysis'
        }

        self._fully_explored = fully_explored
        self._main_analysis = main_analysis
        self._service_account_impersonation_analysis = service_account_impersonation_analysis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeIamPolicyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeIamPolicyResponse of this AnalyzeIamPolicyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fully_explored(self):
        """Gets the fully_explored of this AnalyzeIamPolicyResponse.

        Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.

        :return: The fully_explored of this AnalyzeIamPolicyResponse.
        :rtype: bool
        """
        return self._fully_explored

    @fully_explored.setter
    def fully_explored(self, fully_explored):
        """Sets the fully_explored of this AnalyzeIamPolicyResponse.

        Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.

        :param fully_explored: The fully_explored of this AnalyzeIamPolicyResponse.
        :type fully_explored: bool
        """

        self._fully_explored = fully_explored

    @property
    def main_analysis(self):
        """Gets the main_analysis of this AnalyzeIamPolicyResponse.


        :return: The main_analysis of this AnalyzeIamPolicyResponse.
        :rtype: IamPolicyAnalysis
        """
        return self._main_analysis

    @main_analysis.setter
    def main_analysis(self, main_analysis):
        """Sets the main_analysis of this AnalyzeIamPolicyResponse.


        :param main_analysis: The main_analysis of this AnalyzeIamPolicyResponse.
        :type main_analysis: IamPolicyAnalysis
        """

        self._main_analysis = main_analysis

    @property
    def service_account_impersonation_analysis(self):
        """Gets the service_account_impersonation_analysis of this AnalyzeIamPolicyResponse.

        The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.

        :return: The service_account_impersonation_analysis of this AnalyzeIamPolicyResponse.
        :rtype: List[IamPolicyAnalysis]
        """
        return self._service_account_impersonation_analysis

    @service_account_impersonation_analysis.setter
    def service_account_impersonation_analysis(self, service_account_impersonation_analysis):
        """Sets the service_account_impersonation_analysis of this AnalyzeIamPolicyResponse.

        The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.

        :param service_account_impersonation_analysis: The service_account_impersonation_analysis of this AnalyzeIamPolicyResponse.
        :type service_account_impersonation_analysis: List[IamPolicyAnalysis]
        """

        self._service_account_impersonation_analysis = service_account_impersonation_analysis
