# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, source_resource_type: str=None, target_resource_type: str=None, type: str=None):
        """RelationshipAttributes - a model defined in OpenAPI

        :param action: The action of this RelationshipAttributes.
        :param source_resource_type: The source_resource_type of this RelationshipAttributes.
        :param target_resource_type: The target_resource_type of this RelationshipAttributes.
        :param type: The type of this RelationshipAttributes.
        """
        self.openapi_types = {
            'action': str,
            'source_resource_type': str,
            'target_resource_type': str,
            'type': str
        }

        self.attribute_map = {
            'action': 'action',
            'source_resource_type': 'sourceResourceType',
            'target_resource_type': 'targetResourceType',
            'type': 'type'
        }

        self._action = action
        self._source_resource_type = source_resource_type
        self._target_resource_type = target_resource_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipAttributes of this RelationshipAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RelationshipAttributes.

        The detail of the relationship, e.g. `contains`, `attaches`

        :return: The action of this RelationshipAttributes.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RelationshipAttributes.

        The detail of the relationship, e.g. `contains`, `attaches`

        :param action: The action of this RelationshipAttributes.
        :type action: str
        """

        self._action = action

    @property
    def source_resource_type(self):
        """Gets the source_resource_type of this RelationshipAttributes.

        The source asset type. Example: `compute.googleapis.com/Instance`

        :return: The source_resource_type of this RelationshipAttributes.
        :rtype: str
        """
        return self._source_resource_type

    @source_resource_type.setter
    def source_resource_type(self, source_resource_type):
        """Sets the source_resource_type of this RelationshipAttributes.

        The source asset type. Example: `compute.googleapis.com/Instance`

        :param source_resource_type: The source_resource_type of this RelationshipAttributes.
        :type source_resource_type: str
        """

        self._source_resource_type = source_resource_type

    @property
    def target_resource_type(self):
        """Gets the target_resource_type of this RelationshipAttributes.

        The target asset type. Example: `compute.googleapis.com/Disk`

        :return: The target_resource_type of this RelationshipAttributes.
        :rtype: str
        """
        return self._target_resource_type

    @target_resource_type.setter
    def target_resource_type(self, target_resource_type):
        """Sets the target_resource_type of this RelationshipAttributes.

        The target asset type. Example: `compute.googleapis.com/Disk`

        :param target_resource_type: The target_resource_type of this RelationshipAttributes.
        :type target_resource_type: str
        """

        self._target_resource_type = target_resource_type

    @property
    def type(self):
        """Gets the type of this RelationshipAttributes.

        The unique identifier of the relationship type. Example: `INSTANCE_TO_INSTANCEGROUP`

        :return: The type of this RelationshipAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationshipAttributes.

        The unique identifier of the relationship type. Example: `INSTANCE_TO_INSTANCEGROUP`

        :param type: The type of this RelationshipAttributes.
        :type type: str
        """

        self._type = type
