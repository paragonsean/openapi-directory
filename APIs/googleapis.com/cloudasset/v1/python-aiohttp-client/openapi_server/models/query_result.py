# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_schema import TableSchema
from openapi_server import util


class QueryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_page_token: str=None, rows: List[Dict[str, object]]=None, _schema: TableSchema=None, total_rows: str=None):
        """QueryResult - a model defined in OpenAPI

        :param next_page_token: The next_page_token of this QueryResult.
        :param rows: The rows of this QueryResult.
        :param _schema: The _schema of this QueryResult.
        :param total_rows: The total_rows of this QueryResult.
        """
        self.openapi_types = {
            'next_page_token': str,
            'rows': List[Dict[str, object]],
            '_schema': TableSchema,
            'total_rows': str
        }

        self.attribute_map = {
            'next_page_token': 'nextPageToken',
            'rows': 'rows',
            '_schema': 'schema',
            'total_rows': 'totalRows'
        }

        self._next_page_token = next_page_token
        self._rows = rows
        self.__schema = _schema
        self._total_rows = total_rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryResult of this QueryResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_page_token(self):
        """Gets the next_page_token of this QueryResult.

        Token to retrieve the next page of the results.

        :return: The next_page_token of this QueryResult.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this QueryResult.

        Token to retrieve the next page of the results.

        :param next_page_token: The next_page_token of this QueryResult.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def rows(self):
        """Gets the rows of this QueryResult.

        Each row hold a query result in the format of `Struct`.

        :return: The rows of this QueryResult.
        :rtype: List[Dict[str, object]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QueryResult.

        Each row hold a query result in the format of `Struct`.

        :param rows: The rows of this QueryResult.
        :type rows: List[Dict[str, object]]
        """

        self._rows = rows

    @property
    def _schema(self):
        """Gets the _schema of this QueryResult.


        :return: The _schema of this QueryResult.
        :rtype: TableSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this QueryResult.


        :param _schema: The _schema of this QueryResult.
        :type _schema: TableSchema
        """

        self.__schema = _schema

    @property
    def total_rows(self):
        """Gets the total_rows of this QueryResult.

        Total rows of the whole query results.

        :return: The total_rows of this QueryResult.
        :rtype: str
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this QueryResult.

        Total rows of the whole query results.

        :param total_rows: The total_rows of this QueryResult.
        :type total_rows: str
        """

        self._total_rows = total_rows
