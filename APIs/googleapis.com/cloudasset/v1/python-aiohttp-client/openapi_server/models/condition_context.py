# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_time: str=None):
        """ConditionContext - a model defined in OpenAPI

        :param access_time: The access_time of this ConditionContext.
        """
        self.openapi_types = {
            'access_time': str
        }

        self.attribute_map = {
            'access_time': 'accessTime'
        }

        self._access_time = access_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionContext of this ConditionContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_time(self):
        """Gets the access_time of this ConditionContext.

        The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.

        :return: The access_time of this ConditionContext.
        :rtype: str
        """
        return self._access_time

    @access_time.setter
    def access_time(self, access_time):
        """Sets the access_time of this ConditionContext.

        The hypothetical access timestamp to evaluate IAM conditions. Note that this value must not be earlier than the current time; otherwise, an INVALID_ARGUMENT error will be returned.

        :param access_time: The access_time of this ConditionContext.
        :type access_time: str
        """

        self._access_time = access_time
