# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expr import Expr
from openapi_server.models.feed_output_config import FeedOutputConfig
from openapi_server import util


class Feed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_names: List[str]=None, asset_types: List[str]=None, condition: Expr=None, content_type: str=None, feed_output_config: FeedOutputConfig=None, name: str=None, relationship_types: List[str]=None):
        """Feed - a model defined in OpenAPI

        :param asset_names: The asset_names of this Feed.
        :param asset_types: The asset_types of this Feed.
        :param condition: The condition of this Feed.
        :param content_type: The content_type of this Feed.
        :param feed_output_config: The feed_output_config of this Feed.
        :param name: The name of this Feed.
        :param relationship_types: The relationship_types of this Feed.
        """
        self.openapi_types = {
            'asset_names': List[str],
            'asset_types': List[str],
            'condition': Expr,
            'content_type': str,
            'feed_output_config': FeedOutputConfig,
            'name': str,
            'relationship_types': List[str]
        }

        self.attribute_map = {
            'asset_names': 'assetNames',
            'asset_types': 'assetTypes',
            'condition': 'condition',
            'content_type': 'contentType',
            'feed_output_config': 'feedOutputConfig',
            'name': 'name',
            'relationship_types': 'relationshipTypes'
        }

        self._asset_names = asset_names
        self._asset_types = asset_types
        self._condition = condition
        self._content_type = content_type
        self._feed_output_config = feed_output_config
        self._name = name
        self._relationship_types = relationship_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feed of this Feed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_names(self):
        """Gets the asset_names of this Feed.

        A list of the full names of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. For a list of the full names for supported asset types, see [Resource name format](/asset-inventory/docs/resource-name-format).

        :return: The asset_names of this Feed.
        :rtype: List[str]
        """
        return self._asset_names

    @asset_names.setter
    def asset_names(self, asset_names):
        """Sets the asset_names of this Feed.

        A list of the full names of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. For a list of the full names for supported asset types, see [Resource name format](/asset-inventory/docs/resource-name-format).

        :param asset_names: The asset_names of this Feed.
        :type asset_names: List[str]
        """

        self._asset_names = asset_names

    @property
    def asset_types(self):
        """Gets the asset_types of this Feed.

        A list of types of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `\"compute.googleapis.com/Disk\"` For a list of all supported asset types, see [Supported asset types](/asset-inventory/docs/supported-asset-types).

        :return: The asset_types of this Feed.
        :rtype: List[str]
        """
        return self._asset_types

    @asset_types.setter
    def asset_types(self, asset_types):
        """Sets the asset_types of this Feed.

        A list of types of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `\"compute.googleapis.com/Disk\"` For a list of all supported asset types, see [Supported asset types](/asset-inventory/docs/supported-asset-types).

        :param asset_types: The asset_types of this Feed.
        :type asset_types: List[str]
        """

        self._asset_types = asset_types

    @property
    def condition(self):
        """Gets the condition of this Feed.


        :return: The condition of this Feed.
        :rtype: Expr
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Feed.


        :param condition: The condition of this Feed.
        :type condition: Expr
        """

        self._condition = condition

    @property
    def content_type(self):
        """Gets the content_type of this Feed.

        Asset content type. If not specified, no content but the asset name and type will be returned.

        :return: The content_type of this Feed.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Feed.

        Asset content type. If not specified, no content but the asset name and type will be returned.

        :param content_type: The content_type of this Feed.
        :type content_type: str
        """
        allowed_values = ["CONTENT_TYPE_UNSPECIFIED", "RESOURCE", "IAM_POLICY", "ORG_POLICY", "ACCESS_POLICY", "OS_INVENTORY", "RELATIONSHIP"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def feed_output_config(self):
        """Gets the feed_output_config of this Feed.


        :return: The feed_output_config of this Feed.
        :rtype: FeedOutputConfig
        """
        return self._feed_output_config

    @feed_output_config.setter
    def feed_output_config(self, feed_output_config):
        """Sets the feed_output_config of this Feed.


        :param feed_output_config: The feed_output_config of this Feed.
        :type feed_output_config: FeedOutputConfig
        """

        self._feed_output_config = feed_output_config

    @property
    def name(self):
        """Gets the name of this Feed.

        Required. The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.

        :return: The name of this Feed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Feed.

        Required. The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.

        :param name: The name of this Feed.
        :type name: str
        """

        self._name = name

    @property
    def relationship_types(self):
        """Gets the relationship_types of this Feed.

        A list of relationship types to output, for example: `INSTANCE_TO_INSTANCEGROUP`. This field should only be specified if content_type=RELATIONSHIP. * If specified: it outputs specified relationship updates on the [asset_names] or the [asset_types]. It returns an error if any of the [relationship_types] doesn't belong to the supported relationship types of the [asset_names] or [asset_types], or any of the [asset_names] or the [asset_types] doesn't belong to the source types of the [relationship_types]. * Otherwise: it outputs the supported relationships of the types of [asset_names] and [asset_types] or returns an error if any of the [asset_names] or the [asset_types] has no replationship support. See [Introduction to Cloud Asset Inventory](https://cloud.google.com/asset-inventory/docs/overview) for all supported asset types and relationship types.

        :return: The relationship_types of this Feed.
        :rtype: List[str]
        """
        return self._relationship_types

    @relationship_types.setter
    def relationship_types(self, relationship_types):
        """Sets the relationship_types of this Feed.

        A list of relationship types to output, for example: `INSTANCE_TO_INSTANCEGROUP`. This field should only be specified if content_type=RELATIONSHIP. * If specified: it outputs specified relationship updates on the [asset_names] or the [asset_types]. It returns an error if any of the [relationship_types] doesn't belong to the supported relationship types of the [asset_names] or [asset_types], or any of the [asset_names] or the [asset_types] doesn't belong to the source types of the [relationship_types]. * Otherwise: it outputs the supported relationships of the types of [asset_names] and [asset_types] or returns an error if any of the [asset_names] or the [asset_types] has no replationship support. See [Introduction to Cloud Asset Inventory](https://cloud.google.com/asset-inventory/docs/overview) for all supported asset types and relationship types.

        :param relationship_types: The relationship_types of this Feed.
        :type relationship_types: List[str]
        """

        self._relationship_types = relationship_types
