# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelatedAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestors: List[str]=None, asset: str=None, asset_type: str=None, relationship_type: str=None):
        """RelatedAsset - a model defined in OpenAPI

        :param ancestors: The ancestors of this RelatedAsset.
        :param asset: The asset of this RelatedAsset.
        :param asset_type: The asset_type of this RelatedAsset.
        :param relationship_type: The relationship_type of this RelatedAsset.
        """
        self.openapi_types = {
            'ancestors': List[str],
            'asset': str,
            'asset_type': str,
            'relationship_type': str
        }

        self.attribute_map = {
            'ancestors': 'ancestors',
            'asset': 'asset',
            'asset_type': 'assetType',
            'relationship_type': 'relationshipType'
        }

        self._ancestors = ancestors
        self._asset = asset
        self._asset_type = asset_type
        self._relationship_type = relationship_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelatedAsset of this RelatedAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestors(self):
        """Gets the ancestors of this RelatedAsset.

        The ancestors of an asset in Google Cloud [resource hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy), represented as a list of relative resource names. An ancestry path starts with the closest ancestor in the hierarchy and ends at root. Example: `[\"projects/123456789\", \"folders/5432\", \"organizations/1234\"]`

        :return: The ancestors of this RelatedAsset.
        :rtype: List[str]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this RelatedAsset.

        The ancestors of an asset in Google Cloud [resource hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy), represented as a list of relative resource names. An ancestry path starts with the closest ancestor in the hierarchy and ends at root. Example: `[\"projects/123456789\", \"folders/5432\", \"organizations/1234\"]`

        :param ancestors: The ancestors of this RelatedAsset.
        :type ancestors: List[str]
        """

        self._ancestors = ancestors

    @property
    def asset(self):
        """Gets the asset of this RelatedAsset.

        The full name of the asset. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1` See [Resource names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.

        :return: The asset of this RelatedAsset.
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this RelatedAsset.

        The full name of the asset. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1` See [Resource names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.

        :param asset: The asset of this RelatedAsset.
        :type asset: str
        """

        self._asset = asset

    @property
    def asset_type(self):
        """Gets the asset_type of this RelatedAsset.

        The type of the asset. Example: `compute.googleapis.com/Disk` See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information.

        :return: The asset_type of this RelatedAsset.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this RelatedAsset.

        The type of the asset. Example: `compute.googleapis.com/Disk` See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information.

        :param asset_type: The asset_type of this RelatedAsset.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def relationship_type(self):
        """Gets the relationship_type of this RelatedAsset.

        The unique identifier of the relationship type. Example: `INSTANCE_TO_INSTANCEGROUP`

        :return: The relationship_type of this RelatedAsset.
        :rtype: str
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this RelatedAsset.

        The unique identifier of the relationship type. Example: `INSTANCE_TO_INSTANCEGROUP`

        :param relationship_type: The relationship_type of this RelatedAsset.
        :type relationship_type: str
        """

        self._relationship_type = relationship_type
