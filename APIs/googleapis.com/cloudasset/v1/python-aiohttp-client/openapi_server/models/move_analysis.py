# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_analysis_result import MoveAnalysisResult
from openapi_server.models.status import Status
from openapi_server import util


class MoveAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis: MoveAnalysisResult=None, display_name: str=None, error: Status=None):
        """MoveAnalysis - a model defined in OpenAPI

        :param analysis: The analysis of this MoveAnalysis.
        :param display_name: The display_name of this MoveAnalysis.
        :param error: The error of this MoveAnalysis.
        """
        self.openapi_types = {
            'analysis': MoveAnalysisResult,
            'display_name': str,
            'error': Status
        }

        self.attribute_map = {
            'analysis': 'analysis',
            'display_name': 'displayName',
            'error': 'error'
        }

        self._analysis = analysis
        self._display_name = display_name
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveAnalysis of this MoveAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis(self):
        """Gets the analysis of this MoveAnalysis.


        :return: The analysis of this MoveAnalysis.
        :rtype: MoveAnalysisResult
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this MoveAnalysis.


        :param analysis: The analysis of this MoveAnalysis.
        :type analysis: MoveAnalysisResult
        """

        self._analysis = analysis

    @property
    def display_name(self):
        """Gets the display_name of this MoveAnalysis.

        The user friendly display name of the analysis. E.g. IAM, organization policy etc.

        :return: The display_name of this MoveAnalysis.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MoveAnalysis.

        The user friendly display name of the analysis. E.g. IAM, organization policy etc.

        :param display_name: The display_name of this MoveAnalysis.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def error(self):
        """Gets the error of this MoveAnalysis.


        :return: The error of this MoveAnalysis.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this MoveAnalysis.


        :param error: The error of this MoveAnalysis.
        :type error: Status
        """

        self._error = error
