# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iam_policy_analysis_output_config import IamPolicyAnalysisOutputConfig
from openapi_server.models.iam_policy_analysis_query import IamPolicyAnalysisQuery
from openapi_server import util


class AnalyzeIamPolicyLongrunningRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_query: IamPolicyAnalysisQuery=None, output_config: IamPolicyAnalysisOutputConfig=None, saved_analysis_query: str=None):
        """AnalyzeIamPolicyLongrunningRequest - a model defined in OpenAPI

        :param analysis_query: The analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        :param output_config: The output_config of this AnalyzeIamPolicyLongrunningRequest.
        :param saved_analysis_query: The saved_analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        """
        self.openapi_types = {
            'analysis_query': IamPolicyAnalysisQuery,
            'output_config': IamPolicyAnalysisOutputConfig,
            'saved_analysis_query': str
        }

        self.attribute_map = {
            'analysis_query': 'analysisQuery',
            'output_config': 'outputConfig',
            'saved_analysis_query': 'savedAnalysisQuery'
        }

        self._analysis_query = analysis_query
        self._output_config = output_config
        self._saved_analysis_query = saved_analysis_query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeIamPolicyLongrunningRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeIamPolicyLongrunningRequest of this AnalyzeIamPolicyLongrunningRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_query(self):
        """Gets the analysis_query of this AnalyzeIamPolicyLongrunningRequest.


        :return: The analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        :rtype: IamPolicyAnalysisQuery
        """
        return self._analysis_query

    @analysis_query.setter
    def analysis_query(self, analysis_query):
        """Sets the analysis_query of this AnalyzeIamPolicyLongrunningRequest.


        :param analysis_query: The analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        :type analysis_query: IamPolicyAnalysisQuery
        """

        self._analysis_query = analysis_query

    @property
    def output_config(self):
        """Gets the output_config of this AnalyzeIamPolicyLongrunningRequest.


        :return: The output_config of this AnalyzeIamPolicyLongrunningRequest.
        :rtype: IamPolicyAnalysisOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this AnalyzeIamPolicyLongrunningRequest.


        :param output_config: The output_config of this AnalyzeIamPolicyLongrunningRequest.
        :type output_config: IamPolicyAnalysisOutputConfig
        """

        self._output_config = output_config

    @property
    def saved_analysis_query(self):
        """Gets the saved_analysis_query of this AnalyzeIamPolicyLongrunningRequest.

        Optional. The name of a saved query, which must be in the format of: * projects/project_number/savedQueries/saved_query_id * folders/folder_number/savedQueries/saved_query_id * organizations/organization_number/savedQueries/saved_query_id If both `analysis_query` and `saved_analysis_query` are provided, they will be merged together with the `saved_analysis_query` as base and the `analysis_query` as overrides. For more details of the merge behavior, refer to the [MergeFrom](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message#Message.MergeFrom.details) doc. Note that you cannot override primitive fields with default value, such as 0 or empty string, etc., because we use proto3, which doesn't support field presence yet.

        :return: The saved_analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        :rtype: str
        """
        return self._saved_analysis_query

    @saved_analysis_query.setter
    def saved_analysis_query(self, saved_analysis_query):
        """Sets the saved_analysis_query of this AnalyzeIamPolicyLongrunningRequest.

        Optional. The name of a saved query, which must be in the format of: * projects/project_number/savedQueries/saved_query_id * folders/folder_number/savedQueries/saved_query_id * organizations/organization_number/savedQueries/saved_query_id If both `analysis_query` and `saved_analysis_query` are provided, they will be merged together with the `saved_analysis_query` as base and the `analysis_query` as overrides. For more details of the merge behavior, refer to the [MergeFrom](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message#Message.MergeFrom.details) doc. Note that you cannot override primitive fields with default value, such as 0 or empty string, etc., because we use proto3, which doesn't support field presence yet.

        :param saved_analysis_query: The saved_analysis_query of this AnalyzeIamPolicyLongrunningRequest.
        :type saved_analysis_query: str
        """

        self._saved_analysis_query = saved_analysis_query
