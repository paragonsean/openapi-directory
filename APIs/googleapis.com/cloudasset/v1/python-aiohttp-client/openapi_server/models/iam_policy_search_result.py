# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.explanation import Explanation
from openapi_server.models.policy import Policy
from openapi_server import util


class IamPolicySearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_type: str=None, explanation: Explanation=None, folders: List[str]=None, organization: str=None, policy: Policy=None, project: str=None, resource: str=None):
        """IamPolicySearchResult - a model defined in OpenAPI

        :param asset_type: The asset_type of this IamPolicySearchResult.
        :param explanation: The explanation of this IamPolicySearchResult.
        :param folders: The folders of this IamPolicySearchResult.
        :param organization: The organization of this IamPolicySearchResult.
        :param policy: The policy of this IamPolicySearchResult.
        :param project: The project of this IamPolicySearchResult.
        :param resource: The resource of this IamPolicySearchResult.
        """
        self.openapi_types = {
            'asset_type': str,
            'explanation': Explanation,
            'folders': List[str],
            'organization': str,
            'policy': Policy,
            'project': str,
            'resource': str
        }

        self.attribute_map = {
            'asset_type': 'assetType',
            'explanation': 'explanation',
            'folders': 'folders',
            'organization': 'organization',
            'policy': 'policy',
            'project': 'project',
            'resource': 'resource'
        }

        self._asset_type = asset_type
        self._explanation = explanation
        self._folders = folders
        self._organization = organization
        self._policy = policy
        self._project = project
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IamPolicySearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IamPolicySearchResult of this IamPolicySearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_type(self):
        """Gets the asset_type of this IamPolicySearchResult.

        The type of the resource associated with this IAM policy. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * specify the `asset_types` field in your search request.

        :return: The asset_type of this IamPolicySearchResult.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this IamPolicySearchResult.

        The type of the resource associated with this IAM policy. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * specify the `asset_types` field in your search request.

        :param asset_type: The asset_type of this IamPolicySearchResult.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def explanation(self):
        """Gets the explanation of this IamPolicySearchResult.


        :return: The explanation of this IamPolicySearchResult.
        :rtype: Explanation
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this IamPolicySearchResult.


        :param explanation: The explanation of this IamPolicySearchResult.
        :type explanation: Explanation
        """

        self._explanation = explanation

    @property
    def folders(self):
        """Gets the folders of this IamPolicySearchResult.

        The folder(s) that the IAM policy belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the IAM policy belongs to one or more folders. To search against `folders`: * use a field query. Example: `folders:(123 OR 456)` * use a free text query. Example: `123` * specify the `scope` field as this folder in your search request.

        :return: The folders of this IamPolicySearchResult.
        :rtype: List[str]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this IamPolicySearchResult.

        The folder(s) that the IAM policy belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the IAM policy belongs to one or more folders. To search against `folders`: * use a field query. Example: `folders:(123 OR 456)` * use a free text query. Example: `123` * specify the `scope` field as this folder in your search request.

        :param folders: The folders of this IamPolicySearchResult.
        :type folders: List[str]
        """

        self._folders = folders

    @property
    def organization(self):
        """Gets the organization of this IamPolicySearchResult.

        The organization that the IAM policy belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the IAM policy belongs to an organization. To search against `organization`: * use a field query. Example: `organization:123` * use a free text query. Example: `123` * specify the `scope` field as this organization in your search request.

        :return: The organization of this IamPolicySearchResult.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this IamPolicySearchResult.

        The organization that the IAM policy belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the IAM policy belongs to an organization. To search against `organization`: * use a field query. Example: `organization:123` * use a free text query. Example: `123` * specify the `scope` field as this organization in your search request.

        :param organization: The organization of this IamPolicySearchResult.
        :type organization: str
        """

        self._organization = organization

    @property
    def policy(self):
        """Gets the policy of this IamPolicySearchResult.


        :return: The policy of this IamPolicySearchResult.
        :rtype: Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this IamPolicySearchResult.


        :param policy: The policy of this IamPolicySearchResult.
        :type policy: Policy
        """

        self._policy = policy

    @property
    def project(self):
        """Gets the project of this IamPolicySearchResult.

        The project that the associated Google Cloud resource belongs to, in the form of projects/{PROJECT_NUMBER}. If an IAM policy is set on a resource (like VM instance, Cloud Storage bucket), the project field will indicate the project that contains the resource. If an IAM policy is set on a folder or orgnization, this field will be empty. To search against the `project`: * specify the `scope` field as this project in your search request.

        :return: The project of this IamPolicySearchResult.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this IamPolicySearchResult.

        The project that the associated Google Cloud resource belongs to, in the form of projects/{PROJECT_NUMBER}. If an IAM policy is set on a resource (like VM instance, Cloud Storage bucket), the project field will indicate the project that contains the resource. If an IAM policy is set on a folder or orgnization, this field will be empty. To search against the `project`: * specify the `scope` field as this project in your search request.

        :param project: The project of this IamPolicySearchResult.
        :type project: str
        """

        self._project = project

    @property
    def resource(self):
        """Gets the resource of this IamPolicySearchResult.

        The full resource name of the resource associated with this IAM policy. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `resource`: * use a field query. Example: `resource:organizations/123`

        :return: The resource of this IamPolicySearchResult.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this IamPolicySearchResult.

        The full resource name of the resource associated with this IAM policy. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `resource`: * use a field query. Example: `resource:organizations/123`

        :param resource: The resource of this IamPolicySearchResult.
        :type resource: str
        """

        self._resource = resource
