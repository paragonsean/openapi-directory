# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_assets_output_config import QueryAssetsOutputConfig
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class QueryAssetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_reference: str=None, output_config: QueryAssetsOutputConfig=None, page_size: int=None, page_token: str=None, read_time: str=None, read_time_window: TimeWindow=None, statement: str=None, timeout: str=None):
        """QueryAssetsRequest - a model defined in OpenAPI

        :param job_reference: The job_reference of this QueryAssetsRequest.
        :param output_config: The output_config of this QueryAssetsRequest.
        :param page_size: The page_size of this QueryAssetsRequest.
        :param page_token: The page_token of this QueryAssetsRequest.
        :param read_time: The read_time of this QueryAssetsRequest.
        :param read_time_window: The read_time_window of this QueryAssetsRequest.
        :param statement: The statement of this QueryAssetsRequest.
        :param timeout: The timeout of this QueryAssetsRequest.
        """
        self.openapi_types = {
            'job_reference': str,
            'output_config': QueryAssetsOutputConfig,
            'page_size': int,
            'page_token': str,
            'read_time': str,
            'read_time_window': TimeWindow,
            'statement': str,
            'timeout': str
        }

        self.attribute_map = {
            'job_reference': 'jobReference',
            'output_config': 'outputConfig',
            'page_size': 'pageSize',
            'page_token': 'pageToken',
            'read_time': 'readTime',
            'read_time_window': 'readTimeWindow',
            'statement': 'statement',
            'timeout': 'timeout'
        }

        self._job_reference = job_reference
        self._output_config = output_config
        self._page_size = page_size
        self._page_token = page_token
        self._read_time = read_time
        self._read_time_window = read_time_window
        self._statement = statement
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryAssetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryAssetsRequest of this QueryAssetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_reference(self):
        """Gets the job_reference of this QueryAssetsRequest.

        Optional. Reference to the query job, which is from the `QueryAssetsResponse` of previous `QueryAssets` call.

        :return: The job_reference of this QueryAssetsRequest.
        :rtype: str
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this QueryAssetsRequest.

        Optional. Reference to the query job, which is from the `QueryAssetsResponse` of previous `QueryAssets` call.

        :param job_reference: The job_reference of this QueryAssetsRequest.
        :type job_reference: str
        """

        self._job_reference = job_reference

    @property
    def output_config(self):
        """Gets the output_config of this QueryAssetsRequest.


        :return: The output_config of this QueryAssetsRequest.
        :rtype: QueryAssetsOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this QueryAssetsRequest.


        :param output_config: The output_config of this QueryAssetsRequest.
        :type output_config: QueryAssetsOutputConfig
        """

        self._output_config = output_config

    @property
    def page_size(self):
        """Gets the page_size of this QueryAssetsRequest.

        Optional. The maximum number of rows to return in the results. Responses are limited to 10 MB and 1000 rows. By default, the maximum row count is 1000. When the byte or row count limit is reached, the rest of the query results will be paginated. The field will be ignored when [output_config] is specified.

        :return: The page_size of this QueryAssetsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this QueryAssetsRequest.

        Optional. The maximum number of rows to return in the results. Responses are limited to 10 MB and 1000 rows. By default, the maximum row count is 1000. When the byte or row count limit is reached, the rest of the query results will be paginated. The field will be ignored when [output_config] is specified.

        :param page_size: The page_size of this QueryAssetsRequest.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page_token(self):
        """Gets the page_token of this QueryAssetsRequest.

        Optional. A page token received from previous `QueryAssets`. The field will be ignored when [output_config] is specified.

        :return: The page_token of this QueryAssetsRequest.
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this QueryAssetsRequest.

        Optional. A page token received from previous `QueryAssets`. The field will be ignored when [output_config] is specified.

        :param page_token: The page_token of this QueryAssetsRequest.
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def read_time(self):
        """Gets the read_time of this QueryAssetsRequest.

        Optional. Queries cloud assets as they appeared at the specified point in time.

        :return: The read_time of this QueryAssetsRequest.
        :rtype: str
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time):
        """Sets the read_time of this QueryAssetsRequest.

        Optional. Queries cloud assets as they appeared at the specified point in time.

        :param read_time: The read_time of this QueryAssetsRequest.
        :type read_time: str
        """

        self._read_time = read_time

    @property
    def read_time_window(self):
        """Gets the read_time_window of this QueryAssetsRequest.


        :return: The read_time_window of this QueryAssetsRequest.
        :rtype: TimeWindow
        """
        return self._read_time_window

    @read_time_window.setter
    def read_time_window(self, read_time_window):
        """Sets the read_time_window of this QueryAssetsRequest.


        :param read_time_window: The read_time_window of this QueryAssetsRequest.
        :type read_time_window: TimeWindow
        """

        self._read_time_window = read_time_window

    @property
    def statement(self):
        """Gets the statement of this QueryAssetsRequest.

        Optional. A SQL statement that's compatible with [BigQuery SQL](https://cloud.google.com/bigquery/docs/introduction-sql).

        :return: The statement of this QueryAssetsRequest.
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this QueryAssetsRequest.

        Optional. A SQL statement that's compatible with [BigQuery SQL](https://cloud.google.com/bigquery/docs/introduction-sql).

        :param statement: The statement of this QueryAssetsRequest.
        :type statement: str
        """

        self._statement = statement

    @property
    def timeout(self):
        """Gets the timeout of this QueryAssetsRequest.

        Optional. Specifies the maximum amount of time that the client is willing to wait for the query to complete. By default, this limit is 5 min for the first query, and 1 minute for the following queries. If the query is complete, the `done` field in the `QueryAssetsResponse` is true, otherwise false. Like BigQuery [jobs.query API](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest) The call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. The field will be ignored when [output_config] is specified.

        :return: The timeout of this QueryAssetsRequest.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this QueryAssetsRequest.

        Optional. Specifies the maximum amount of time that the client is willing to wait for the query to complete. By default, this limit is 5 min for the first query, and 1 minute for the following queries. If the query is complete, the `done` field in the `QueryAssetsResponse` is true, otherwise false. Like BigQuery [jobs.query API](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest) The call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. The field will be ignored when [output_config] is specified.

        :param timeout: The timeout of this QueryAssetsRequest.
        :type timeout: str
        """

        self._timeout = timeout
