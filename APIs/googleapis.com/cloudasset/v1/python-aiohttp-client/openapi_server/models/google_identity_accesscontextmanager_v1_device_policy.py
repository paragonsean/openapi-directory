# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_identity_accesscontextmanager_v1_os_constraint import GoogleIdentityAccesscontextmanagerV1OsConstraint
from openapi_server import util


class GoogleIdentityAccesscontextmanagerV1DevicePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_device_management_levels: List[str]=None, allowed_encryption_statuses: List[str]=None, os_constraints: List[GoogleIdentityAccesscontextmanagerV1OsConstraint]=None, require_admin_approval: bool=None, require_corp_owned: bool=None, require_screenlock: bool=None):
        """GoogleIdentityAccesscontextmanagerV1DevicePolicy - a model defined in OpenAPI

        :param allowed_device_management_levels: The allowed_device_management_levels of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :param allowed_encryption_statuses: The allowed_encryption_statuses of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :param os_constraints: The os_constraints of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :param require_admin_approval: The require_admin_approval of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :param require_corp_owned: The require_corp_owned of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :param require_screenlock: The require_screenlock of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        """
        self.openapi_types = {
            'allowed_device_management_levels': List[str],
            'allowed_encryption_statuses': List[str],
            'os_constraints': List[GoogleIdentityAccesscontextmanagerV1OsConstraint],
            'require_admin_approval': bool,
            'require_corp_owned': bool,
            'require_screenlock': bool
        }

        self.attribute_map = {
            'allowed_device_management_levels': 'allowedDeviceManagementLevels',
            'allowed_encryption_statuses': 'allowedEncryptionStatuses',
            'os_constraints': 'osConstraints',
            'require_admin_approval': 'requireAdminApproval',
            'require_corp_owned': 'requireCorpOwned',
            'require_screenlock': 'requireScreenlock'
        }

        self._allowed_device_management_levels = allowed_device_management_levels
        self._allowed_encryption_statuses = allowed_encryption_statuses
        self._os_constraints = os_constraints
        self._require_admin_approval = require_admin_approval
        self._require_corp_owned = require_corp_owned
        self._require_screenlock = require_screenlock

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleIdentityAccesscontextmanagerV1DevicePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleIdentityAccesscontextmanagerV1DevicePolicy of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_device_management_levels(self):
        """Gets the allowed_device_management_levels of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed device management levels, an empty list allows all management levels.

        :return: The allowed_device_management_levels of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: List[str]
        """
        return self._allowed_device_management_levels

    @allowed_device_management_levels.setter
    def allowed_device_management_levels(self, allowed_device_management_levels):
        """Sets the allowed_device_management_levels of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed device management levels, an empty list allows all management levels.

        :param allowed_device_management_levels: The allowed_device_management_levels of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type allowed_device_management_levels: List[str]
        """
        allowed_values = ["MANAGEMENT_UNSPECIFIED", "NONE", "BASIC", "COMPLETE"]  # noqa: E501
        if not set(allowed_device_management_levels).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_device_management_levels` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_device_management_levels) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_device_management_levels = allowed_device_management_levels

    @property
    def allowed_encryption_statuses(self):
        """Gets the allowed_encryption_statuses of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed encryptions statuses, an empty list allows all statuses.

        :return: The allowed_encryption_statuses of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: List[str]
        """
        return self._allowed_encryption_statuses

    @allowed_encryption_statuses.setter
    def allowed_encryption_statuses(self, allowed_encryption_statuses):
        """Sets the allowed_encryption_statuses of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed encryptions statuses, an empty list allows all statuses.

        :param allowed_encryption_statuses: The allowed_encryption_statuses of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type allowed_encryption_statuses: List[str]
        """
        allowed_values = ["ENCRYPTION_UNSPECIFIED", "ENCRYPTION_UNSUPPORTED", "UNENCRYPTED", "ENCRYPTED"]  # noqa: E501
        if not set(allowed_encryption_statuses).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_encryption_statuses` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_encryption_statuses) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_encryption_statuses = allowed_encryption_statuses

    @property
    def os_constraints(self):
        """Gets the os_constraints of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed OS versions, an empty list allows all types and all versions.

        :return: The os_constraints of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: List[GoogleIdentityAccesscontextmanagerV1OsConstraint]
        """
        return self._os_constraints

    @os_constraints.setter
    def os_constraints(self, os_constraints):
        """Sets the os_constraints of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Allowed OS versions, an empty list allows all types and all versions.

        :param os_constraints: The os_constraints of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type os_constraints: List[GoogleIdentityAccesscontextmanagerV1OsConstraint]
        """

        self._os_constraints = os_constraints

    @property
    def require_admin_approval(self):
        """Gets the require_admin_approval of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether the device needs to be approved by the customer admin.

        :return: The require_admin_approval of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: bool
        """
        return self._require_admin_approval

    @require_admin_approval.setter
    def require_admin_approval(self, require_admin_approval):
        """Sets the require_admin_approval of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether the device needs to be approved by the customer admin.

        :param require_admin_approval: The require_admin_approval of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type require_admin_approval: bool
        """

        self._require_admin_approval = require_admin_approval

    @property
    def require_corp_owned(self):
        """Gets the require_corp_owned of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether the device needs to be corp owned.

        :return: The require_corp_owned of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: bool
        """
        return self._require_corp_owned

    @require_corp_owned.setter
    def require_corp_owned(self, require_corp_owned):
        """Sets the require_corp_owned of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether the device needs to be corp owned.

        :param require_corp_owned: The require_corp_owned of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type require_corp_owned: bool
        """

        self._require_corp_owned = require_corp_owned

    @property
    def require_screenlock(self):
        """Gets the require_screenlock of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.

        :return: The require_screenlock of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :rtype: bool
        """
        return self._require_screenlock

    @require_screenlock.setter
    def require_screenlock(self, require_screenlock):
        """Sets the require_screenlock of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.

        Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.

        :param require_screenlock: The require_screenlock of this GoogleIdentityAccesscontextmanagerV1DevicePolicy.
        :type require_screenlock: bool
        """

        self._require_screenlock = require_screenlock
