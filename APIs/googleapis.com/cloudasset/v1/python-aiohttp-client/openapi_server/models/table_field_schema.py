# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableFieldSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, fields: List[TableFieldSchema]=None, mode: str=None, type: str=None):
        """TableFieldSchema - a model defined in OpenAPI

        :param _field: The _field of this TableFieldSchema.
        :param fields: The fields of this TableFieldSchema.
        :param mode: The mode of this TableFieldSchema.
        :param type: The type of this TableFieldSchema.
        """
        self.openapi_types = {
            '_field': str,
            'fields': List[TableFieldSchema],
            'mode': str,
            'type': str
        }

        self.attribute_map = {
            '_field': 'field',
            'fields': 'fields',
            'mode': 'mode',
            'type': 'type'
        }

        self.__field = _field
        self._fields = fields
        self._mode = mode
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableFieldSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableFieldSchema of this TableFieldSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this TableFieldSchema.

        The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.

        :return: The _field of this TableFieldSchema.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this TableFieldSchema.

        The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 128 characters.

        :param _field: The _field of this TableFieldSchema.
        :type _field: str
        """

        self.__field = _field

    @property
    def fields(self):
        """Gets the fields of this TableFieldSchema.

        Describes the nested schema fields if the type property is set to RECORD.

        :return: The fields of this TableFieldSchema.
        :rtype: List[TableFieldSchema]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TableFieldSchema.

        Describes the nested schema fields if the type property is set to RECORD.

        :param fields: The fields of this TableFieldSchema.
        :type fields: List[TableFieldSchema]
        """

        self._fields = fields

    @property
    def mode(self):
        """Gets the mode of this TableFieldSchema.

        The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.

        :return: The mode of this TableFieldSchema.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TableFieldSchema.

        The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.

        :param mode: The mode of this TableFieldSchema.
        :type mode: str
        """

        self._mode = mode

    @property
    def type(self):
        """Gets the type of this TableFieldSchema.

        The field data type. Possible values include * STRING * BYTES * INTEGER * FLOAT * BOOLEAN * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY, * NUMERIC, * BIGNUMERIC, * RECORD (where RECORD indicates that the field contains a nested schema).

        :return: The type of this TableFieldSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableFieldSchema.

        The field data type. Possible values include * STRING * BYTES * INTEGER * FLOAT * BOOLEAN * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY, * NUMERIC, * BIGNUMERIC, * RECORD (where RECORD indicates that the field contains a nested schema).

        :param type: The type of this TableFieldSchema.
        :type type: str
        """

        self._type = type
