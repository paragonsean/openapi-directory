# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attached_resource import AttachedResource
from openapi_server.models.effective_tag_details import EffectiveTagDetails
from openapi_server.models.related_resources import RelatedResources
from openapi_server.models.tag import Tag
from openapi_server.models.versioned_resource import VersionedResource
from openapi_server import util


class ResourceSearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_attributes: Dict[str, object]=None, asset_type: str=None, attached_resources: List[AttachedResource]=None, create_time: str=None, description: str=None, display_name: str=None, effective_tags: List[EffectiveTagDetails]=None, folders: List[str]=None, kms_key: str=None, kms_keys: List[str]=None, labels: Dict[str, str]=None, location: str=None, name: str=None, network_tags: List[str]=None, organization: str=None, parent_asset_type: str=None, parent_full_resource_name: str=None, project: str=None, relationships: Dict[str, RelatedResources]=None, scc_security_marks: Dict[str, str]=None, state: str=None, tag_keys: List[str]=None, tag_value_ids: List[str]=None, tag_values: List[str]=None, tags: List[Tag]=None, update_time: str=None, versioned_resources: List[VersionedResource]=None):
        """ResourceSearchResult - a model defined in OpenAPI

        :param additional_attributes: The additional_attributes of this ResourceSearchResult.
        :param asset_type: The asset_type of this ResourceSearchResult.
        :param attached_resources: The attached_resources of this ResourceSearchResult.
        :param create_time: The create_time of this ResourceSearchResult.
        :param description: The description of this ResourceSearchResult.
        :param display_name: The display_name of this ResourceSearchResult.
        :param effective_tags: The effective_tags of this ResourceSearchResult.
        :param folders: The folders of this ResourceSearchResult.
        :param kms_key: The kms_key of this ResourceSearchResult.
        :param kms_keys: The kms_keys of this ResourceSearchResult.
        :param labels: The labels of this ResourceSearchResult.
        :param location: The location of this ResourceSearchResult.
        :param name: The name of this ResourceSearchResult.
        :param network_tags: The network_tags of this ResourceSearchResult.
        :param organization: The organization of this ResourceSearchResult.
        :param parent_asset_type: The parent_asset_type of this ResourceSearchResult.
        :param parent_full_resource_name: The parent_full_resource_name of this ResourceSearchResult.
        :param project: The project of this ResourceSearchResult.
        :param relationships: The relationships of this ResourceSearchResult.
        :param scc_security_marks: The scc_security_marks of this ResourceSearchResult.
        :param state: The state of this ResourceSearchResult.
        :param tag_keys: The tag_keys of this ResourceSearchResult.
        :param tag_value_ids: The tag_value_ids of this ResourceSearchResult.
        :param tag_values: The tag_values of this ResourceSearchResult.
        :param tags: The tags of this ResourceSearchResult.
        :param update_time: The update_time of this ResourceSearchResult.
        :param versioned_resources: The versioned_resources of this ResourceSearchResult.
        """
        self.openapi_types = {
            'additional_attributes': Dict[str, object],
            'asset_type': str,
            'attached_resources': List[AttachedResource],
            'create_time': str,
            'description': str,
            'display_name': str,
            'effective_tags': List[EffectiveTagDetails],
            'folders': List[str],
            'kms_key': str,
            'kms_keys': List[str],
            'labels': Dict[str, str],
            'location': str,
            'name': str,
            'network_tags': List[str],
            'organization': str,
            'parent_asset_type': str,
            'parent_full_resource_name': str,
            'project': str,
            'relationships': Dict[str, RelatedResources],
            'scc_security_marks': Dict[str, str],
            'state': str,
            'tag_keys': List[str],
            'tag_value_ids': List[str],
            'tag_values': List[str],
            'tags': List[Tag],
            'update_time': str,
            'versioned_resources': List[VersionedResource]
        }

        self.attribute_map = {
            'additional_attributes': 'additionalAttributes',
            'asset_type': 'assetType',
            'attached_resources': 'attachedResources',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'effective_tags': 'effectiveTags',
            'folders': 'folders',
            'kms_key': 'kmsKey',
            'kms_keys': 'kmsKeys',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'network_tags': 'networkTags',
            'organization': 'organization',
            'parent_asset_type': 'parentAssetType',
            'parent_full_resource_name': 'parentFullResourceName',
            'project': 'project',
            'relationships': 'relationships',
            'scc_security_marks': 'sccSecurityMarks',
            'state': 'state',
            'tag_keys': 'tagKeys',
            'tag_value_ids': 'tagValueIds',
            'tag_values': 'tagValues',
            'tags': 'tags',
            'update_time': 'updateTime',
            'versioned_resources': 'versionedResources'
        }

        self._additional_attributes = additional_attributes
        self._asset_type = asset_type
        self._attached_resources = attached_resources
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._effective_tags = effective_tags
        self._folders = folders
        self._kms_key = kms_key
        self._kms_keys = kms_keys
        self._labels = labels
        self._location = location
        self._name = name
        self._network_tags = network_tags
        self._organization = organization
        self._parent_asset_type = parent_asset_type
        self._parent_full_resource_name = parent_full_resource_name
        self._project = project
        self._relationships = relationships
        self._scc_security_marks = scc_security_marks
        self._state = state
        self._tag_keys = tag_keys
        self._tag_value_ids = tag_value_ids
        self._tag_values = tag_values
        self._tags = tags
        self._update_time = update_time
        self._versioned_resources = versioned_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSearchResult of this ResourceSearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this ResourceSearchResult.

        The additional searchable attributes of this resource. The attributes may vary from one resource type to another. Examples: `projectId` for Project, `dnsName` for DNS ManagedZone. This field contains a subset of the resource metadata fields that are returned by the List or Get APIs provided by the corresponding Google Cloud service (e.g., Compute Engine). see [API references and supported searchable attributes](https://cloud.google.com/asset-inventory/docs/supported-asset-types) to see which fields are included. You can search values of these fields through free text search. However, you should not consume the field programically as the field names and values may change as the Google Cloud service updates to a new incompatible API version. To search against the `additional_attributes`: * Use a free text query to match the attributes values. Example: to search `additional_attributes = { dnsName: \"foobar\" }`, you can issue a query `foobar`.

        :return: The additional_attributes of this ResourceSearchResult.
        :rtype: Dict[str, object]
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this ResourceSearchResult.

        The additional searchable attributes of this resource. The attributes may vary from one resource type to another. Examples: `projectId` for Project, `dnsName` for DNS ManagedZone. This field contains a subset of the resource metadata fields that are returned by the List or Get APIs provided by the corresponding Google Cloud service (e.g., Compute Engine). see [API references and supported searchable attributes](https://cloud.google.com/asset-inventory/docs/supported-asset-types) to see which fields are included. You can search values of these fields through free text search. However, you should not consume the field programically as the field names and values may change as the Google Cloud service updates to a new incompatible API version. To search against the `additional_attributes`: * Use a free text query to match the attributes values. Example: to search `additional_attributes = { dnsName: \"foobar\" }`, you can issue a query `foobar`.

        :param additional_attributes: The additional_attributes of this ResourceSearchResult.
        :type additional_attributes: Dict[str, object]
        """

        self._additional_attributes = additional_attributes

    @property
    def asset_type(self):
        """Gets the asset_type of this ResourceSearchResult.

        The type of this resource. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * Specify the `asset_type` field in your search request.

        :return: The asset_type of this ResourceSearchResult.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this ResourceSearchResult.

        The type of this resource. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * Specify the `asset_type` field in your search request.

        :param asset_type: The asset_type of this ResourceSearchResult.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def attached_resources(self):
        """Gets the attached_resources of this ResourceSearchResult.

        Attached resources of this resource. For example, an OSConfig Inventory is an attached resource of a Compute Instance. This field is repeated because a resource could have multiple attached resources. This `attached_resources` field is not searchable. Some attributes of the attached resources are exposed in `additional_attributes` field, so as to allow users to search on them.

        :return: The attached_resources of this ResourceSearchResult.
        :rtype: List[AttachedResource]
        """
        return self._attached_resources

    @attached_resources.setter
    def attached_resources(self, attached_resources):
        """Sets the attached_resources of this ResourceSearchResult.

        Attached resources of this resource. For example, an OSConfig Inventory is an attached resource of a Compute Instance. This field is repeated because a resource could have multiple attached resources. This `attached_resources` field is not searchable. Some attributes of the attached resources are exposed in `additional_attributes` field, so as to allow users to search on them.

        :param attached_resources: The attached_resources of this ResourceSearchResult.
        :type attached_resources: List[AttachedResource]
        """

        self._attached_resources = attached_resources

    @property
    def create_time(self):
        """Gets the create_time of this ResourceSearchResult.

        The create timestamp of this resource, at which the resource was created. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `create_time`: * Use a field query. - value in seconds since unix epoch. Example: `createTime > 1609459200` - value in date string. Example: `createTime > 2021-01-01` - value in date-time string (must be quoted). Example: `createTime > \"2021-01-01T00:00:00\"`

        :return: The create_time of this ResourceSearchResult.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ResourceSearchResult.

        The create timestamp of this resource, at which the resource was created. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `create_time`: * Use a field query. - value in seconds since unix epoch. Example: `createTime > 1609459200` - value in date string. Example: `createTime > 2021-01-01` - value in date-time string (must be quoted). Example: `createTime > \"2021-01-01T00:00:00\"`

        :param create_time: The create_time of this ResourceSearchResult.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ResourceSearchResult.

        One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes. This field is available only when the resource's Protobuf contains it. To search against the `description`: * Use a field query. Example: `description:\"important instance\"` * Use a free text query. Example: `\"important instance\"`

        :return: The description of this ResourceSearchResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceSearchResult.

        One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes. This field is available only when the resource's Protobuf contains it. To search against the `description`: * Use a field query. Example: `description:\"important instance\"` * Use a free text query. Example: `\"important instance\"`

        :param description: The description of this ResourceSearchResult.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ResourceSearchResult.

        The display name of this resource. This field is available only when the resource's Protobuf contains it. To search against the `display_name`: * Use a field query. Example: `displayName:\"My Instance\"` * Use a free text query. Example: `\"My Instance\"`

        :return: The display_name of this ResourceSearchResult.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ResourceSearchResult.

        The display name of this resource. This field is available only when the resource's Protobuf contains it. To search against the `display_name`: * Use a field query. Example: `displayName:\"My Instance\"` * Use a free text query. Example: `\"My Instance\"`

        :param display_name: The display_name of this ResourceSearchResult.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def effective_tags(self):
        """Gets the effective_tags of this ResourceSearchResult.

        The effective tags on this resource. All of the tags that are both attached to and inherited by a resource are collectively called the effective tags. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance). To search against the `effective_tags`: * Use a field query. Example: - `effectiveTagKeys:\"123456789/env*\"` - `effectiveTagKeys=\"123456789/env\"` - `effectiveTagKeys:\"env\"` - `effectiveTagValues:\"env\"` - `effectiveTagValues:\"env/prod\"` - `effectiveTagValues:\"123456789/env/prod*\"` - `effectiveTagValues=\"123456789/env/prod\"` - `effectiveTagValueIds=\"tagValues/456\"`

        :return: The effective_tags of this ResourceSearchResult.
        :rtype: List[EffectiveTagDetails]
        """
        return self._effective_tags

    @effective_tags.setter
    def effective_tags(self, effective_tags):
        """Sets the effective_tags of this ResourceSearchResult.

        The effective tags on this resource. All of the tags that are both attached to and inherited by a resource are collectively called the effective tags. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance). To search against the `effective_tags`: * Use a field query. Example: - `effectiveTagKeys:\"123456789/env*\"` - `effectiveTagKeys=\"123456789/env\"` - `effectiveTagKeys:\"env\"` - `effectiveTagValues:\"env\"` - `effectiveTagValues:\"env/prod\"` - `effectiveTagValues:\"123456789/env/prod*\"` - `effectiveTagValues=\"123456789/env/prod\"` - `effectiveTagValueIds=\"tagValues/456\"`

        :param effective_tags: The effective_tags of this ResourceSearchResult.
        :type effective_tags: List[EffectiveTagDetails]
        """

        self._effective_tags = effective_tags

    @property
    def folders(self):
        """Gets the folders of this ResourceSearchResult.

        The folder(s) that this resource belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the resource belongs to one or more folders. To search against `folders`: * Use a field query. Example: `folders:(123 OR 456)` * Use a free text query. Example: `123` * Specify the `scope` field as this folder in your search request.

        :return: The folders of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this ResourceSearchResult.

        The folder(s) that this resource belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the resource belongs to one or more folders. To search against `folders`: * Use a field query. Example: `folders:(123 OR 456)` * Use a free text query. Example: `123` * Specify the `scope` field as this folder in your search request.

        :param folders: The folders of this ResourceSearchResult.
        :type folders: List[str]
        """

        self._folders = folders

    @property
    def kms_key(self):
        """Gets the kms_key of this ResourceSearchResult.

        The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) name or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) name. This field only presents for the purpose of backward compatibility. Use the `kms_keys` field to retrieve Cloud KMS key information. This field is available only when the resource's Protobuf contains it and will only be populated for [these resource types](https://cloud.google.com/asset-inventory/docs/legacy-field-names#resource_types_with_the_to_be_deprecated_kmskey_field) for backward compatible purposes. To search against the `kms_key`: * Use a field query. Example: `kmsKey:key` * Use a free text query. Example: `key`

        :return: The kms_key of this ResourceSearchResult.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this ResourceSearchResult.

        The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) name or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) name. This field only presents for the purpose of backward compatibility. Use the `kms_keys` field to retrieve Cloud KMS key information. This field is available only when the resource's Protobuf contains it and will only be populated for [these resource types](https://cloud.google.com/asset-inventory/docs/legacy-field-names#resource_types_with_the_to_be_deprecated_kmskey_field) for backward compatible purposes. To search against the `kms_key`: * Use a field query. Example: `kmsKey:key` * Use a free text query. Example: `key`

        :param kms_key: The kms_key of this ResourceSearchResult.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def kms_keys(self):
        """Gets the kms_keys of this ResourceSearchResult.

        The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) names or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) names. This field is available only when the resource's Protobuf contains it. To search against the `kms_keys`: * Use a field query. Example: `kmsKeys:key` * Use a free text query. Example: `key`

        :return: The kms_keys of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._kms_keys

    @kms_keys.setter
    def kms_keys(self, kms_keys):
        """Sets the kms_keys of this ResourceSearchResult.

        The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) names or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) names. This field is available only when the resource's Protobuf contains it. To search against the `kms_keys`: * Use a field query. Example: `kmsKeys:key` * Use a free text query. Example: `key`

        :param kms_keys: The kms_keys of this ResourceSearchResult.
        :type kms_keys: List[str]
        """

        self._kms_keys = kms_keys

    @property
    def labels(self):
        """Gets the labels of this ResourceSearchResult.

        Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `labels`: * Use a field query: - query on any label's key or value. Example: `labels:prod` - query by a given label. Example: `labels.env:prod` - query by a given label's existence. Example: `labels.env:*` * Use a free text query. Example: `prod`

        :return: The labels of this ResourceSearchResult.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ResourceSearchResult.

        Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `labels`: * Use a field query: - query on any label's key or value. Example: `labels:prod` - query by a given label. Example: `labels.env:prod` - query by a given label's existence. Example: `labels.env:*` * Use a free text query. Example: `prod`

        :param labels: The labels of this ResourceSearchResult.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this ResourceSearchResult.

        Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`. This field is available only when the resource's Protobuf contains it. To search against the `location`: * Use a field query. Example: `location:us-west*` * Use a free text query. Example: `us-west*`

        :return: The location of this ResourceSearchResult.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResourceSearchResult.

        Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`. This field is available only when the resource's Protobuf contains it. To search against the `location`: * Use a field query. Example: `location:us-west*` * Use a free text query. Example: `us-west*`

        :param location: The location of this ResourceSearchResult.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ResourceSearchResult.

        The full resource name of this resource. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `name`: * Use a field query. Example: `name:instance1` * Use a free text query. Example: `instance1`

        :return: The name of this ResourceSearchResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSearchResult.

        The full resource name of this resource. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `name`: * Use a field query. Example: `name:instance1` * Use a free text query. Example: `instance1`

        :param name: The name of this ResourceSearchResult.
        :type name: str
        """

        self._name = name

    @property
    def network_tags(self):
        """Gets the network_tags of this ResourceSearchResult.

        Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `network_tags`: * Use a field query. Example: `networkTags:internal` * Use a free text query. Example: `internal`

        :return: The network_tags of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._network_tags

    @network_tags.setter
    def network_tags(self, network_tags):
        """Sets the network_tags of this ResourceSearchResult.

        Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `network_tags`: * Use a field query. Example: `networkTags:internal` * Use a free text query. Example: `internal`

        :param network_tags: The network_tags of this ResourceSearchResult.
        :type network_tags: List[str]
        """

        self._network_tags = network_tags

    @property
    def organization(self):
        """Gets the organization of this ResourceSearchResult.

        The organization that this resource belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the resource belongs to an organization. To search against `organization`: * Use a field query. Example: `organization:123` * Use a free text query. Example: `123` * Specify the `scope` field as this organization in your search request.

        :return: The organization of this ResourceSearchResult.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResourceSearchResult.

        The organization that this resource belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the resource belongs to an organization. To search against `organization`: * Use a field query. Example: `organization:123` * Use a free text query. Example: `123` * Specify the `scope` field as this organization in your search request.

        :param organization: The organization of this ResourceSearchResult.
        :type organization: str
        """

        self._organization = organization

    @property
    def parent_asset_type(self):
        """Gets the parent_asset_type of this ResourceSearchResult.

        The type of this resource's immediate parent, if there is one. To search against the `parent_asset_type`: * Use a field query. Example: `parentAssetType:\"cloudresourcemanager.googleapis.com/Project\"` * Use a free text query. Example: `cloudresourcemanager.googleapis.com/Project`

        :return: The parent_asset_type of this ResourceSearchResult.
        :rtype: str
        """
        return self._parent_asset_type

    @parent_asset_type.setter
    def parent_asset_type(self, parent_asset_type):
        """Sets the parent_asset_type of this ResourceSearchResult.

        The type of this resource's immediate parent, if there is one. To search against the `parent_asset_type`: * Use a field query. Example: `parentAssetType:\"cloudresourcemanager.googleapis.com/Project\"` * Use a free text query. Example: `cloudresourcemanager.googleapis.com/Project`

        :param parent_asset_type: The parent_asset_type of this ResourceSearchResult.
        :type parent_asset_type: str
        """

        self._parent_asset_type = parent_asset_type

    @property
    def parent_full_resource_name(self):
        """Gets the parent_full_resource_name of this ResourceSearchResult.

        The full resource name of this resource's parent, if it has one. To search against the `parent_full_resource_name`: * Use a field query. Example: `parentFullResourceName:\"project-name\"` * Use a free text query. Example: `project-name`

        :return: The parent_full_resource_name of this ResourceSearchResult.
        :rtype: str
        """
        return self._parent_full_resource_name

    @parent_full_resource_name.setter
    def parent_full_resource_name(self, parent_full_resource_name):
        """Sets the parent_full_resource_name of this ResourceSearchResult.

        The full resource name of this resource's parent, if it has one. To search against the `parent_full_resource_name`: * Use a field query. Example: `parentFullResourceName:\"project-name\"` * Use a free text query. Example: `project-name`

        :param parent_full_resource_name: The parent_full_resource_name of this ResourceSearchResult.
        :type parent_full_resource_name: str
        """

        self._parent_full_resource_name = parent_full_resource_name

    @property
    def project(self):
        """Gets the project of this ResourceSearchResult.

        The project that this resource belongs to, in the form of projects/{PROJECT_NUMBER}. This field is available when the resource belongs to a project. To search against `project`: * Use a field query. Example: `project:12345` * Use a free text query. Example: `12345` * Specify the `scope` field as this project in your search request.

        :return: The project of this ResourceSearchResult.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResourceSearchResult.

        The project that this resource belongs to, in the form of projects/{PROJECT_NUMBER}. This field is available when the resource belongs to a project. To search against `project`: * Use a field query. Example: `project:12345` * Use a free text query. Example: `12345` * Specify the `scope` field as this project in your search request.

        :param project: The project of this ResourceSearchResult.
        :type project: str
        """

        self._project = project

    @property
    def relationships(self):
        """Gets the relationships of this ResourceSearchResult.

        A map of related resources of this resource, keyed by the relationship type. A relationship type is in the format of {SourceType}_{ACTION}_{DestType}. Example: `DISK_TO_INSTANCE`, `DISK_TO_NETWORK`, `INSTANCE_TO_INSTANCEGROUP`. See [supported relationship types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#supported_relationship_types).

        :return: The relationships of this ResourceSearchResult.
        :rtype: Dict[str, RelatedResources]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this ResourceSearchResult.

        A map of related resources of this resource, keyed by the relationship type. A relationship type is in the format of {SourceType}_{ACTION}_{DestType}. Example: `DISK_TO_INSTANCE`, `DISK_TO_NETWORK`, `INSTANCE_TO_INSTANCEGROUP`. See [supported relationship types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#supported_relationship_types).

        :param relationships: The relationships of this ResourceSearchResult.
        :type relationships: Dict[str, RelatedResources]
        """

        self._relationships = relationships

    @property
    def scc_security_marks(self):
        """Gets the scc_security_marks of this ResourceSearchResult.

        The actual content of Security Command Center security marks associated with the asset. To search against SCC SecurityMarks field: * Use a field query: - query by a given key value pair. Example: `sccSecurityMarks.foo=bar` - query by a given key's existence. Example: `sccSecurityMarks.foo:*`

        :return: The scc_security_marks of this ResourceSearchResult.
        :rtype: Dict[str, str]
        """
        return self._scc_security_marks

    @scc_security_marks.setter
    def scc_security_marks(self, scc_security_marks):
        """Sets the scc_security_marks of this ResourceSearchResult.

        The actual content of Security Command Center security marks associated with the asset. To search against SCC SecurityMarks field: * Use a field query: - query by a given key value pair. Example: `sccSecurityMarks.foo=bar` - query by a given key's existence. Example: `sccSecurityMarks.foo:*`

        :param scc_security_marks: The scc_security_marks of this ResourceSearchResult.
        :type scc_security_marks: Dict[str, str]
        """

        self._scc_security_marks = scc_security_marks

    @property
    def state(self):
        """Gets the state of this ResourceSearchResult.

        The state of this resource. Different resources types have different state definitions that are mapped from various fields of different resource types. This field is available only when the resource's Protobuf contains it. Example: If the resource is an instance provided by Compute Engine, its state will include PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. See `status` definition in [API Reference](https://cloud.google.com/compute/docs/reference/rest/v1/instances). If the resource is a project provided by Resource Manager, its state will include LIFECYCLE_STATE_UNSPECIFIED, ACTIVE, DELETE_REQUESTED and DELETE_IN_PROGRESS. See `lifecycleState` definition in [API Reference](https://cloud.google.com/resource-manager/reference/rest/v1/projects). To search against the `state`: * Use a field query. Example: `state:RUNNING` * Use a free text query. Example: `RUNNING`

        :return: The state of this ResourceSearchResult.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ResourceSearchResult.

        The state of this resource. Different resources types have different state definitions that are mapped from various fields of different resource types. This field is available only when the resource's Protobuf contains it. Example: If the resource is an instance provided by Compute Engine, its state will include PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. See `status` definition in [API Reference](https://cloud.google.com/compute/docs/reference/rest/v1/instances). If the resource is a project provided by Resource Manager, its state will include LIFECYCLE_STATE_UNSPECIFIED, ACTIVE, DELETE_REQUESTED and DELETE_IN_PROGRESS. See `lifecycleState` definition in [API Reference](https://cloud.google.com/resource-manager/reference/rest/v1/projects). To search against the `state`: * Use a field query. Example: `state:RUNNING` * Use a free text query. Example: `RUNNING`

        :param state: The state of this ResourceSearchResult.
        :type state: str
        """

        self._state = state

    @property
    def tag_keys(self):
        """Gets the tag_keys of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagKey namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}. To search against the `tagKeys`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` * Use a free text query. Example: - `env`

        :return: The tag_keys of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """Sets the tag_keys of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagKey namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}. To search against the `tagKeys`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` * Use a free text query. Example: - `env`

        :param tag_keys: The tag_keys of this ResourceSearchResult.
        :type tag_keys: List[str]
        """

        self._tag_keys = tag_keys

    @property
    def tag_value_ids(self):
        """Gets the tag_value_ids of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue IDs, in the format of tagValues/{TAG_VALUE_ID}. To search against the `tagValueIds`: * Use a field query. Example: - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `456`

        :return: The tag_value_ids of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._tag_value_ids

    @tag_value_ids.setter
    def tag_value_ids(self, tag_value_ids):
        """Sets the tag_value_ids of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue IDs, in the format of tagValues/{TAG_VALUE_ID}. To search against the `tagValueIds`: * Use a field query. Example: - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `456`

        :param tag_value_ids: The tag_value_ids of this ResourceSearchResult.
        :type tag_value_ids: List[str]
        """

        self._tag_value_ids = tag_value_ids

    @property
    def tag_values(self):
        """Gets the tag_values of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}/{TAG_VALUE_SHORT_NAME}. To search against the `tagValues`: * Use a field query. Example: - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` * Use a free text query. Example: - `prod`

        :return: The tag_values of this ResourceSearchResult.
        :rtype: List[str]
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """Sets the tag_values of this ResourceSearchResult.

        This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}/{TAG_VALUE_SHORT_NAME}. To search against the `tagValues`: * Use a field query. Example: - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` * Use a free text query. Example: - `prod`

        :param tag_values: The tag_values of this ResourceSearchResult.
        :type tag_values: List[str]
        """

        self._tag_values = tag_values

    @property
    def tags(self):
        """Gets the tags of this ResourceSearchResult.

        The tags directly attached to this resource. To search against the `tags`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `env/prod`

        :return: The tags of this ResourceSearchResult.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceSearchResult.

        The tags directly attached to this resource. To search against the `tags`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `env/prod`

        :param tags: The tags of this ResourceSearchResult.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def update_time(self):
        """Gets the update_time of this ResourceSearchResult.

        The last update timestamp of this resource, at which the resource was last modified or deleted. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `update_time`: * Use a field query. - value in seconds since unix epoch. Example: `updateTime < 1609459200` - value in date string. Example: `updateTime < 2021-01-01` - value in date-time string (must be quoted). Example: `updateTime < \"2021-01-01T00:00:00\"`

        :return: The update_time of this ResourceSearchResult.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ResourceSearchResult.

        The last update timestamp of this resource, at which the resource was last modified or deleted. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `update_time`: * Use a field query. - value in seconds since unix epoch. Example: `updateTime < 1609459200` - value in date string. Example: `updateTime < 2021-01-01` - value in date-time string (must be quoted). Example: `updateTime < \"2021-01-01T00:00:00\"`

        :param update_time: The update_time of this ResourceSearchResult.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def versioned_resources(self):
        """Gets the versioned_resources of this ResourceSearchResult.

        Versioned resource representations of this resource. This is repeated because there could be multiple versions of resource representations during version migration. This `versioned_resources` field is not searchable. Some attributes of the resource representations are exposed in `additional_attributes` field, so as to allow users to search on them.

        :return: The versioned_resources of this ResourceSearchResult.
        :rtype: List[VersionedResource]
        """
        return self._versioned_resources

    @versioned_resources.setter
    def versioned_resources(self, versioned_resources):
        """Sets the versioned_resources of this ResourceSearchResult.

        Versioned resource representations of this resource. This is repeated because there could be multiple versions of resource representations during version migration. This `versioned_resources` field is not searchable. Some attributes of the resource representations are exposed in `additional_attributes` field, so as to allow users to search on them.

        :param versioned_resources: The versioned_resources of this ResourceSearchResult.
        :type versioned_resources: List[VersionedResource]
        """

        self._versioned_resources = versioned_resources
