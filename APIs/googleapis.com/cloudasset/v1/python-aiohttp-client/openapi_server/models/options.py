# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Options(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analyze_service_account_impersonation: bool=None, expand_groups: bool=None, expand_resources: bool=None, expand_roles: bool=None, output_group_edges: bool=None, output_resource_edges: bool=None):
        """Options - a model defined in OpenAPI

        :param analyze_service_account_impersonation: The analyze_service_account_impersonation of this Options.
        :param expand_groups: The expand_groups of this Options.
        :param expand_resources: The expand_resources of this Options.
        :param expand_roles: The expand_roles of this Options.
        :param output_group_edges: The output_group_edges of this Options.
        :param output_resource_edges: The output_resource_edges of this Options.
        """
        self.openapi_types = {
            'analyze_service_account_impersonation': bool,
            'expand_groups': bool,
            'expand_resources': bool,
            'expand_roles': bool,
            'output_group_edges': bool,
            'output_resource_edges': bool
        }

        self.attribute_map = {
            'analyze_service_account_impersonation': 'analyzeServiceAccountImpersonation',
            'expand_groups': 'expandGroups',
            'expand_resources': 'expandResources',
            'expand_roles': 'expandRoles',
            'output_group_edges': 'outputGroupEdges',
            'output_resource_edges': 'outputResourceEdges'
        }

        self._analyze_service_account_impersonation = analyze_service_account_impersonation
        self._expand_groups = expand_groups
        self._expand_resources = expand_resources
        self._expand_roles = expand_roles
        self._output_group_edges = output_group_edges
        self._output_resource_edges = output_resource_edges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Options':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Options of this Options.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyze_service_account_impersonation(self):
        """Gets the analyze_service_account_impersonation of this Options.

        Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning RPC instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a Google Cloud folder F, then user A potentially has access to the Google Cloud folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a Google Cloud folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the Google Cloud folder F, then user A potentially has access to the Google Cloud folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.

        :return: The analyze_service_account_impersonation of this Options.
        :rtype: bool
        """
        return self._analyze_service_account_impersonation

    @analyze_service_account_impersonation.setter
    def analyze_service_account_impersonation(self, analyze_service_account_impersonation):
        """Sets the analyze_service_account_impersonation of this Options.

        Optional. If true, the response will include access analysis from identities to resources via service account impersonation. This is a very expensive operation, because many derived queries will be executed. We highly recommend you use AssetService.AnalyzeIamPolicyLongrunning RPC instead. For example, if the request analyzes for which resources user A has permission P, and there's an IAM policy states user A has iam.serviceAccounts.getAccessToken permission to a service account SA, and there's another IAM policy states service account SA has permission P to a Google Cloud folder F, then user A potentially has access to the Google Cloud folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Another example, if the request analyzes for who has permission P to a Google Cloud folder F, and there's an IAM policy states user A has iam.serviceAccounts.actAs permission to a service account SA, and there's another IAM policy states service account SA has permission P to the Google Cloud folder F, then user A potentially has access to the Google Cloud folder F. And those advanced analysis results will be included in AnalyzeIamPolicyResponse.service_account_impersonation_analysis. Only the following permissions are considered in this analysis: * `iam.serviceAccounts.actAs` * `iam.serviceAccounts.signBlob` * `iam.serviceAccounts.signJwt` * `iam.serviceAccounts.getAccessToken` * `iam.serviceAccounts.getOpenIdToken` * `iam.serviceAccounts.implicitDelegation` Default is false.

        :param analyze_service_account_impersonation: The analyze_service_account_impersonation of this Options.
        :type analyze_service_account_impersonation: bool
        """

        self._analyze_service_account_impersonation = analyze_service_account_impersonation

    @property
    def expand_groups(self):
        """Gets the expand_groups of this Options.

        Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. If true, the default max expansion per group is 1000 for AssetService.AnalyzeIamPolicy][]. Default is false.

        :return: The expand_groups of this Options.
        :rtype: bool
        """
        return self._expand_groups

    @expand_groups.setter
    def expand_groups(self, expand_groups):
        """Sets the expand_groups of this Options.

        Optional. If true, the identities section of the result will expand any Google groups appearing in an IAM policy binding. If IamPolicyAnalysisQuery.identity_selector is specified, the identity in the result will be determined by the selector, and this flag is not allowed to set. If true, the default max expansion per group is 1000 for AssetService.AnalyzeIamPolicy][]. Default is false.

        :param expand_groups: The expand_groups of this Options.
        :type expand_groups: bool
        """

        self._expand_groups = expand_groups

    @property
    def expand_resources(self):
        """Gets the expand_resources of this Options.

        Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a Google Cloud folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resources cannot be used together with this option. For example, if the request analyzes for which users have permission P on a Google Cloud project with this option enabled, the results will include all users who have permission P on that project or any lower resource. If true, the default max expansion per resource is 1000 for AssetService.AnalyzeIamPolicy][] and 100000 for AssetService.AnalyzeIamPolicyLongrunning][]. Default is false.

        :return: The expand_resources of this Options.
        :rtype: bool
        """
        return self._expand_resources

    @expand_resources.setter
    def expand_resources(self, expand_resources):
        """Sets the expand_resources of this Options.

        Optional. If true and IamPolicyAnalysisQuery.resource_selector is not specified, the resource section of the result will expand any resource attached to an IAM policy to include resources lower in the resource hierarchy. For example, if the request analyzes for which resources user A has permission P, and the results include an IAM policy with P on a Google Cloud folder, the results will also include resources in that folder with permission P. If true and IamPolicyAnalysisQuery.resource_selector is specified, the resource section of the result will expand the specified resource to include resources lower in the resource hierarchy. Only project or lower resources are supported. Folder and organization resources cannot be used together with this option. For example, if the request analyzes for which users have permission P on a Google Cloud project with this option enabled, the results will include all users who have permission P on that project or any lower resource. If true, the default max expansion per resource is 1000 for AssetService.AnalyzeIamPolicy][] and 100000 for AssetService.AnalyzeIamPolicyLongrunning][]. Default is false.

        :param expand_resources: The expand_resources of this Options.
        :type expand_resources: bool
        """

        self._expand_resources = expand_resources

    @property
    def expand_roles(self):
        """Gets the expand_roles of this Options.

        Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.

        :return: The expand_roles of this Options.
        :rtype: bool
        """
        return self._expand_roles

    @expand_roles.setter
    def expand_roles(self, expand_roles):
        """Sets the expand_roles of this Options.

        Optional. If true, the access section of result will expand any roles appearing in IAM policy bindings to include their permissions. If IamPolicyAnalysisQuery.access_selector is specified, the access section of the result will be determined by the selector, and this flag is not allowed to set. Default is false.

        :param expand_roles: The expand_roles of this Options.
        :type expand_roles: bool
        """

        self._expand_roles = expand_roles

    @property
    def output_group_edges(self):
        """Gets the output_group_edges of this Options.

        Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.

        :return: The output_group_edges of this Options.
        :rtype: bool
        """
        return self._output_group_edges

    @output_group_edges.setter
    def output_group_edges(self, output_group_edges):
        """Sets the output_group_edges of this Options.

        Optional. If true, the result will output the relevant membership relationships between groups and other groups, and between groups and principals. Default is false.

        :param output_group_edges: The output_group_edges of this Options.
        :type output_group_edges: bool
        """

        self._output_group_edges = output_group_edges

    @property
    def output_resource_edges(self):
        """Gets the output_resource_edges of this Options.

        Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.

        :return: The output_resource_edges of this Options.
        :rtype: bool
        """
        return self._output_resource_edges

    @output_resource_edges.setter
    def output_resource_edges(self, output_resource_edges):
        """Sets the output_resource_edges of this Options.

        Optional. If true, the result will output the relevant parent/child relationships between resources. Default is false.

        :param output_resource_edges: The output_resource_edges of this Options.
        :type output_resource_edges: bool
        """

        self._output_resource_edges = output_resource_edges
