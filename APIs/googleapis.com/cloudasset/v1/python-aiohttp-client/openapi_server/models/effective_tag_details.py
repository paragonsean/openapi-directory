# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class EffectiveTagDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attached_resource: str=None, effective_tags: List[Tag]=None):
        """EffectiveTagDetails - a model defined in OpenAPI

        :param attached_resource: The attached_resource of this EffectiveTagDetails.
        :param effective_tags: The effective_tags of this EffectiveTagDetails.
        """
        self.openapi_types = {
            'attached_resource': str,
            'effective_tags': List[Tag]
        }

        self.attribute_map = {
            'attached_resource': 'attachedResource',
            'effective_tags': 'effectiveTags'
        }

        self._attached_resource = attached_resource
        self._effective_tags = effective_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveTagDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveTagDetails of this EffectiveTagDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attached_resource(self):
        """Gets the attached_resource of this EffectiveTagDetails.

        The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of the ancestor from which an effective_tag is inherited, according to [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).

        :return: The attached_resource of this EffectiveTagDetails.
        :rtype: str
        """
        return self._attached_resource

    @attached_resource.setter
    def attached_resource(self, attached_resource):
        """Sets the attached_resource of this EffectiveTagDetails.

        The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of the ancestor from which an effective_tag is inherited, according to [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).

        :param attached_resource: The attached_resource of this EffectiveTagDetails.
        :type attached_resource: str
        """

        self._attached_resource = attached_resource

    @property
    def effective_tags(self):
        """Gets the effective_tags of this EffectiveTagDetails.

        The effective tags inherited from the attached_resource. Note that tags with the same key but different values may attach to resources at a different hierarchy levels. The lower hierarchy tag value will overwrite the higher hierarchy tag value of the same tag key. In this case, the tag value at the higher hierarchy level will be removed. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).

        :return: The effective_tags of this EffectiveTagDetails.
        :rtype: List[Tag]
        """
        return self._effective_tags

    @effective_tags.setter
    def effective_tags(self, effective_tags):
        """Sets the effective_tags of this EffectiveTagDetails.

        The effective tags inherited from the attached_resource. Note that tags with the same key but different values may attach to resources at a different hierarchy levels. The lower hierarchy tag value will overwrite the higher hierarchy tag value of the same tag key. In this case, the tag value at the higher hierarchy level will be removed. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).

        :param effective_tags: The effective_tags of this EffectiveTagDetails.
        :type effective_tags: List[Tag]
        """

        self._effective_tags = effective_tags
