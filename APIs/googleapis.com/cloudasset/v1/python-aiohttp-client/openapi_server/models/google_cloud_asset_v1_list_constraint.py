# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudAssetV1ListConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, supports_in: bool=None, supports_under: bool=None):
        """GoogleCloudAssetV1ListConstraint - a model defined in OpenAPI

        :param supports_in: The supports_in of this GoogleCloudAssetV1ListConstraint.
        :param supports_under: The supports_under of this GoogleCloudAssetV1ListConstraint.
        """
        self.openapi_types = {
            'supports_in': bool,
            'supports_under': bool
        }

        self.attribute_map = {
            'supports_in': 'supportsIn',
            'supports_under': 'supportsUnder'
        }

        self._supports_in = supports_in
        self._supports_under = supports_under

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudAssetV1ListConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudAssetV1ListConstraint of this GoogleCloudAssetV1ListConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def supports_in(self):
        """Gets the supports_in of this GoogleCloudAssetV1ListConstraint.

        Indicates whether values grouped into categories can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"in:Python\"` would match any value in the 'Python' group.

        :return: The supports_in of this GoogleCloudAssetV1ListConstraint.
        :rtype: bool
        """
        return self._supports_in

    @supports_in.setter
    def supports_in(self, supports_in):
        """Sets the supports_in of this GoogleCloudAssetV1ListConstraint.

        Indicates whether values grouped into categories can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"in:Python\"` would match any value in the 'Python' group.

        :param supports_in: The supports_in of this GoogleCloudAssetV1ListConstraint.
        :type supports_in: bool
        """

        self._supports_in = supports_in

    @property
    def supports_under(self):
        """Gets the supports_under of this GoogleCloudAssetV1ListConstraint.

        Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"under:folders/123\"` would match any resource under the 'folders/123' folder.

        :return: The supports_under of this GoogleCloudAssetV1ListConstraint.
        :rtype: bool
        """
        return self._supports_under

    @supports_under.setter
    def supports_under(self, supports_under):
        """Sets the supports_under of this GoogleCloudAssetV1ListConstraint.

        Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"under:folders/123\"` would match any resource under the 'folders/123' folder.

        :param supports_under: The supports_under of this GoogleCloudAssetV1ListConstraint.
        :type supports_under: bool
        """

        self._supports_under = supports_under
