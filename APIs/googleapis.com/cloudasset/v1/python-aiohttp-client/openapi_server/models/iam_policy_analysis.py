# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iam_policy_analysis_query import IamPolicyAnalysisQuery
from openapi_server.models.iam_policy_analysis_result import IamPolicyAnalysisResult
from openapi_server.models.iam_policy_analysis_state import IamPolicyAnalysisState
from openapi_server import util


class IamPolicyAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_query: IamPolicyAnalysisQuery=None, analysis_results: List[IamPolicyAnalysisResult]=None, fully_explored: bool=None, non_critical_errors: List[IamPolicyAnalysisState]=None):
        """IamPolicyAnalysis - a model defined in OpenAPI

        :param analysis_query: The analysis_query of this IamPolicyAnalysis.
        :param analysis_results: The analysis_results of this IamPolicyAnalysis.
        :param fully_explored: The fully_explored of this IamPolicyAnalysis.
        :param non_critical_errors: The non_critical_errors of this IamPolicyAnalysis.
        """
        self.openapi_types = {
            'analysis_query': IamPolicyAnalysisQuery,
            'analysis_results': List[IamPolicyAnalysisResult],
            'fully_explored': bool,
            'non_critical_errors': List[IamPolicyAnalysisState]
        }

        self.attribute_map = {
            'analysis_query': 'analysisQuery',
            'analysis_results': 'analysisResults',
            'fully_explored': 'fullyExplored',
            'non_critical_errors': 'nonCriticalErrors'
        }

        self._analysis_query = analysis_query
        self._analysis_results = analysis_results
        self._fully_explored = fully_explored
        self._non_critical_errors = non_critical_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IamPolicyAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IamPolicyAnalysis of this IamPolicyAnalysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_query(self):
        """Gets the analysis_query of this IamPolicyAnalysis.


        :return: The analysis_query of this IamPolicyAnalysis.
        :rtype: IamPolicyAnalysisQuery
        """
        return self._analysis_query

    @analysis_query.setter
    def analysis_query(self, analysis_query):
        """Sets the analysis_query of this IamPolicyAnalysis.


        :param analysis_query: The analysis_query of this IamPolicyAnalysis.
        :type analysis_query: IamPolicyAnalysisQuery
        """

        self._analysis_query = analysis_query

    @property
    def analysis_results(self):
        """Gets the analysis_results of this IamPolicyAnalysis.

        A list of IamPolicyAnalysisResult that matches the analysis query, or empty if no result is found.

        :return: The analysis_results of this IamPolicyAnalysis.
        :rtype: List[IamPolicyAnalysisResult]
        """
        return self._analysis_results

    @analysis_results.setter
    def analysis_results(self, analysis_results):
        """Sets the analysis_results of this IamPolicyAnalysis.

        A list of IamPolicyAnalysisResult that matches the analysis query, or empty if no result is found.

        :param analysis_results: The analysis_results of this IamPolicyAnalysis.
        :type analysis_results: List[IamPolicyAnalysisResult]
        """

        self._analysis_results = analysis_results

    @property
    def fully_explored(self):
        """Gets the fully_explored of this IamPolicyAnalysis.

        Represents whether all entries in the analysis_results have been fully explored to answer the query.

        :return: The fully_explored of this IamPolicyAnalysis.
        :rtype: bool
        """
        return self._fully_explored

    @fully_explored.setter
    def fully_explored(self, fully_explored):
        """Sets the fully_explored of this IamPolicyAnalysis.

        Represents whether all entries in the analysis_results have been fully explored to answer the query.

        :param fully_explored: The fully_explored of this IamPolicyAnalysis.
        :type fully_explored: bool
        """

        self._fully_explored = fully_explored

    @property
    def non_critical_errors(self):
        """Gets the non_critical_errors of this IamPolicyAnalysis.

        A list of non-critical errors happened during the query handling.

        :return: The non_critical_errors of this IamPolicyAnalysis.
        :rtype: List[IamPolicyAnalysisState]
        """
        return self._non_critical_errors

    @non_critical_errors.setter
    def non_critical_errors(self, non_critical_errors):
        """Sets the non_critical_errors of this IamPolicyAnalysis.

        A list of non-critical errors happened during the query handling.

        :param non_critical_errors: The non_critical_errors of this IamPolicyAnalysis.
        :type non_critical_errors: List[IamPolicyAnalysisState]
        """

        self._non_critical_errors = non_critical_errors
