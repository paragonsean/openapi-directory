# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_selector import AccessSelector
from openapi_server.models.condition_context import ConditionContext
from openapi_server.models.identity_selector import IdentitySelector
from openapi_server.models.options import Options
from openapi_server.models.resource_selector import ResourceSelector
from openapi_server import util


class IamPolicyAnalysisQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_selector: AccessSelector=None, condition_context: ConditionContext=None, identity_selector: IdentitySelector=None, options: Options=None, resource_selector: ResourceSelector=None, scope: str=None):
        """IamPolicyAnalysisQuery - a model defined in OpenAPI

        :param access_selector: The access_selector of this IamPolicyAnalysisQuery.
        :param condition_context: The condition_context of this IamPolicyAnalysisQuery.
        :param identity_selector: The identity_selector of this IamPolicyAnalysisQuery.
        :param options: The options of this IamPolicyAnalysisQuery.
        :param resource_selector: The resource_selector of this IamPolicyAnalysisQuery.
        :param scope: The scope of this IamPolicyAnalysisQuery.
        """
        self.openapi_types = {
            'access_selector': AccessSelector,
            'condition_context': ConditionContext,
            'identity_selector': IdentitySelector,
            'options': Options,
            'resource_selector': ResourceSelector,
            'scope': str
        }

        self.attribute_map = {
            'access_selector': 'accessSelector',
            'condition_context': 'conditionContext',
            'identity_selector': 'identitySelector',
            'options': 'options',
            'resource_selector': 'resourceSelector',
            'scope': 'scope'
        }

        self._access_selector = access_selector
        self._condition_context = condition_context
        self._identity_selector = identity_selector
        self._options = options
        self._resource_selector = resource_selector
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IamPolicyAnalysisQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IamPolicyAnalysisQuery of this IamPolicyAnalysisQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_selector(self):
        """Gets the access_selector of this IamPolicyAnalysisQuery.


        :return: The access_selector of this IamPolicyAnalysisQuery.
        :rtype: AccessSelector
        """
        return self._access_selector

    @access_selector.setter
    def access_selector(self, access_selector):
        """Sets the access_selector of this IamPolicyAnalysisQuery.


        :param access_selector: The access_selector of this IamPolicyAnalysisQuery.
        :type access_selector: AccessSelector
        """

        self._access_selector = access_selector

    @property
    def condition_context(self):
        """Gets the condition_context of this IamPolicyAnalysisQuery.


        :return: The condition_context of this IamPolicyAnalysisQuery.
        :rtype: ConditionContext
        """
        return self._condition_context

    @condition_context.setter
    def condition_context(self, condition_context):
        """Sets the condition_context of this IamPolicyAnalysisQuery.


        :param condition_context: The condition_context of this IamPolicyAnalysisQuery.
        :type condition_context: ConditionContext
        """

        self._condition_context = condition_context

    @property
    def identity_selector(self):
        """Gets the identity_selector of this IamPolicyAnalysisQuery.


        :return: The identity_selector of this IamPolicyAnalysisQuery.
        :rtype: IdentitySelector
        """
        return self._identity_selector

    @identity_selector.setter
    def identity_selector(self, identity_selector):
        """Sets the identity_selector of this IamPolicyAnalysisQuery.


        :param identity_selector: The identity_selector of this IamPolicyAnalysisQuery.
        :type identity_selector: IdentitySelector
        """

        self._identity_selector = identity_selector

    @property
    def options(self):
        """Gets the options of this IamPolicyAnalysisQuery.


        :return: The options of this IamPolicyAnalysisQuery.
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this IamPolicyAnalysisQuery.


        :param options: The options of this IamPolicyAnalysisQuery.
        :type options: Options
        """

        self._options = options

    @property
    def resource_selector(self):
        """Gets the resource_selector of this IamPolicyAnalysisQuery.


        :return: The resource_selector of this IamPolicyAnalysisQuery.
        :rtype: ResourceSelector
        """
        return self._resource_selector

    @resource_selector.setter
    def resource_selector(self, resource_selector):
        """Sets the resource_selector of this IamPolicyAnalysisQuery.


        :param resource_selector: The resource_selector of this IamPolicyAnalysisQuery.
        :type resource_selector: ResourceSelector
        """

        self._resource_selector = resource_selector

    @property
    def scope(self):
        """Gets the scope of this IamPolicyAnalysisQuery.

        Required. The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as \"organizations/123\"), a folder number (such as \"folders/123\"), a project ID (such as \"projects/my-project-id\"), or a project number (such as \"projects/12345\"). To know how to get organization ID, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project ID, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).

        :return: The scope of this IamPolicyAnalysisQuery.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this IamPolicyAnalysisQuery.

        Required. The relative name of the root asset. Only resources and IAM policies within the scope will be analyzed. This can only be an organization number (such as \"organizations/123\"), a folder number (such as \"folders/123\"), a project ID (such as \"projects/my-project-id\"), or a project number (such as \"projects/12345\"). To know how to get organization ID, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project ID, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).

        :param scope: The scope of this IamPolicyAnalysisQuery.
        :type scope: str
        """

        self._scope = scope
