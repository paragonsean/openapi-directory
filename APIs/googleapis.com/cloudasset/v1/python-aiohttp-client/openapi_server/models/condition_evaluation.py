# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_value: str=None):
        """ConditionEvaluation - a model defined in OpenAPI

        :param evaluation_value: The evaluation_value of this ConditionEvaluation.
        """
        self.openapi_types = {
            'evaluation_value': str
        }

        self.attribute_map = {
            'evaluation_value': 'evaluationValue'
        }

        self._evaluation_value = evaluation_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionEvaluation of this ConditionEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_value(self):
        """Gets the evaluation_value of this ConditionEvaluation.

        The evaluation result.

        :return: The evaluation_value of this ConditionEvaluation.
        :rtype: str
        """
        return self._evaluation_value

    @evaluation_value.setter
    def evaluation_value(self, evaluation_value):
        """Sets the evaluation_value of this ConditionEvaluation.

        The evaluation result.

        :param evaluation_value: The evaluation_value of this ConditionEvaluation.
        :type evaluation_value: str
        """
        allowed_values = ["EVALUATION_VALUE_UNSPECIFIED", "TRUE", "FALSE", "CONDITIONAL"]  # noqa: E501
        if evaluation_value not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_value` ({0}), must be one of {1}"
                .format(evaluation_value, allowed_values)
            )

        self._evaluation_value = evaluation_value
