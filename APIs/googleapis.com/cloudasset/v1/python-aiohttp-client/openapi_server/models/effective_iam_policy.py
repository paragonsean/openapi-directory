# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_info import PolicyInfo
from openapi_server import util


class EffectiveIamPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_resource_name: str=None, policies: List[PolicyInfo]=None):
        """EffectiveIamPolicy - a model defined in OpenAPI

        :param full_resource_name: The full_resource_name of this EffectiveIamPolicy.
        :param policies: The policies of this EffectiveIamPolicy.
        """
        self.openapi_types = {
            'full_resource_name': str,
            'policies': List[PolicyInfo]
        }

        self.attribute_map = {
            'full_resource_name': 'fullResourceName',
            'policies': 'policies'
        }

        self._full_resource_name = full_resource_name
        self._policies = policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveIamPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveIamPolicy of this EffectiveIamPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_resource_name(self):
        """Gets the full_resource_name of this EffectiveIamPolicy.

        The [full_resource_name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) for which the policies are computed. This is one of the BatchGetEffectiveIamPoliciesRequest.names the caller provides in the request.

        :return: The full_resource_name of this EffectiveIamPolicy.
        :rtype: str
        """
        return self._full_resource_name

    @full_resource_name.setter
    def full_resource_name(self, full_resource_name):
        """Sets the full_resource_name of this EffectiveIamPolicy.

        The [full_resource_name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) for which the policies are computed. This is one of the BatchGetEffectiveIamPoliciesRequest.names the caller provides in the request.

        :param full_resource_name: The full_resource_name of this EffectiveIamPolicy.
        :type full_resource_name: str
        """

        self._full_resource_name = full_resource_name

    @property
    def policies(self):
        """Gets the policies of this EffectiveIamPolicy.

        The effective policies for the full_resource_name. These policies include the policy set on the full_resource_name and those set on its parents and ancestors up to the BatchGetEffectiveIamPoliciesRequest.scope. Note that these policies are not filtered according to the resource type of the full_resource_name. These policies are hierarchically ordered by PolicyInfo.attached_resource starting from full_resource_name itself to its parents and ancestors, such that policies[i]'s PolicyInfo.attached_resource is the child of policies[i+1]'s PolicyInfo.attached_resource, if policies[i+1] exists.

        :return: The policies of this EffectiveIamPolicy.
        :rtype: List[PolicyInfo]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this EffectiveIamPolicy.

        The effective policies for the full_resource_name. These policies include the policy set on the full_resource_name and those set on its parents and ancestors up to the BatchGetEffectiveIamPoliciesRequest.scope. Note that these policies are not filtered according to the resource type of the full_resource_name. These policies are hierarchically ordered by PolicyInfo.attached_resource starting from full_resource_name itself to its parents and ancestors, such that policies[i]'s PolicyInfo.attached_resource is the child of policies[i+1]'s PolicyInfo.attached_resource, if policies[i+1] exists.

        :param policies: The policies of this EffectiveIamPolicy.
        :type policies: List[PolicyInfo]
        """

        self._policies = policies
