# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_impact import MoveImpact
from openapi_server import util


class MoveAnalysisResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blockers: List[MoveImpact]=None, warnings: List[MoveImpact]=None):
        """MoveAnalysisResult - a model defined in OpenAPI

        :param blockers: The blockers of this MoveAnalysisResult.
        :param warnings: The warnings of this MoveAnalysisResult.
        """
        self.openapi_types = {
            'blockers': List[MoveImpact],
            'warnings': List[MoveImpact]
        }

        self.attribute_map = {
            'blockers': 'blockers',
            'warnings': 'warnings'
        }

        self._blockers = blockers
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveAnalysisResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveAnalysisResult of this MoveAnalysisResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blockers(self):
        """Gets the blockers of this MoveAnalysisResult.

        Blocking information that would prevent the target resource from moving to the specified destination at runtime.

        :return: The blockers of this MoveAnalysisResult.
        :rtype: List[MoveImpact]
        """
        return self._blockers

    @blockers.setter
    def blockers(self, blockers):
        """Sets the blockers of this MoveAnalysisResult.

        Blocking information that would prevent the target resource from moving to the specified destination at runtime.

        :param blockers: The blockers of this MoveAnalysisResult.
        :type blockers: List[MoveImpact]
        """

        self._blockers = blockers

    @property
    def warnings(self):
        """Gets the warnings of this MoveAnalysisResult.

        Warning information indicating that moving the target resource to the specified destination might be unsafe. This can include important policy information and configuration changes, but will not block moves at runtime.

        :return: The warnings of this MoveAnalysisResult.
        :rtype: List[MoveImpact]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this MoveAnalysisResult.

        Warning information indicating that moving the target resource to the specified destination might be unsafe. This can include important policy information and configuration changes, but will not block moves at runtime.

        :param warnings: The warnings of this MoveAnalysisResult.
        :type warnings: List[MoveImpact]
        """

        self._warnings = warnings
