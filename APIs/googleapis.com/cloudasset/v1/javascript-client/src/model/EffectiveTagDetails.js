/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The EffectiveTagDetails model module.
 * @module model/EffectiveTagDetails
 * @version v1
 */
class EffectiveTagDetails {
    /**
     * Constructs a new <code>EffectiveTagDetails</code>.
     * The effective tags and the ancestor resources from which they were inherited.
     * @alias module:model/EffectiveTagDetails
     */
    constructor() { 
        
        EffectiveTagDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EffectiveTagDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EffectiveTagDetails} obj Optional instance to populate.
     * @return {module:model/EffectiveTagDetails} The populated <code>EffectiveTagDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EffectiveTagDetails();

            if (data.hasOwnProperty('attachedResource')) {
                obj['attachedResource'] = ApiClient.convertToType(data['attachedResource'], 'String');
            }
            if (data.hasOwnProperty('effectiveTags')) {
                obj['effectiveTags'] = ApiClient.convertToType(data['effectiveTags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EffectiveTagDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EffectiveTagDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attachedResource'] && !(typeof data['attachedResource'] === 'string' || data['attachedResource'] instanceof String)) {
            throw new Error("Expected the field `attachedResource` to be a primitive type in the JSON string but got " + data['attachedResource']);
        }
        if (data['effectiveTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effectiveTags'])) {
                throw new Error("Expected the field `effectiveTags` to be an array in the JSON data but got " + data['effectiveTags']);
            }
            // validate the optional field `effectiveTags` (array)
            for (const item of data['effectiveTags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of the ancestor from which an effective_tag is inherited, according to [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).
 * @member {String} attachedResource
 */
EffectiveTagDetails.prototype['attachedResource'] = undefined;

/**
 * The effective tags inherited from the attached_resource. Note that tags with the same key but different values may attach to resources at a different hierarchy levels. The lower hierarchy tag value will overwrite the higher hierarchy tag value of the same tag key. In this case, the tag value at the higher hierarchy level will be removed. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance).
 * @member {Array.<module:model/Tag>} effectiveTags
 */
EffectiveTagDetails.prototype['effectiveTags'] = undefined;






export default EffectiveTagDetails;

