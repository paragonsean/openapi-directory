/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Expr from './Expr';
import FeedOutputConfig from './FeedOutputConfig';

/**
 * The Feed model module.
 * @module model/Feed
 * @version v1
 */
class Feed {
    /**
     * Constructs a new <code>Feed</code>.
     * An asset feed used to export asset updates to a destinations. An asset feed filter controls what updates are exported. The asset feed must be created within a project, organization, or folder. Supported destinations are: Pub/Sub topics.
     * @alias module:model/Feed
     */
    constructor() { 
        
        Feed.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feed} obj Optional instance to populate.
     * @return {module:model/Feed} The populated <code>Feed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feed();

            if (data.hasOwnProperty('assetNames')) {
                obj['assetNames'] = ApiClient.convertToType(data['assetNames'], ['String']);
            }
            if (data.hasOwnProperty('assetTypes')) {
                obj['assetTypes'] = ApiClient.convertToType(data['assetTypes'], ['String']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = Expr.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('feedOutputConfig')) {
                obj['feedOutputConfig'] = FeedOutputConfig.constructFromObject(data['feedOutputConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('relationshipTypes')) {
                obj['relationshipTypes'] = ApiClient.convertToType(data['relationshipTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feed</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['assetNames'])) {
            throw new Error("Expected the field `assetNames` to be an array in the JSON data but got " + data['assetNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['assetTypes'])) {
            throw new Error("Expected the field `assetTypes` to be an array in the JSON data but got " + data['assetTypes']);
        }
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          Expr.validateJSON(data['condition']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // validate the optional field `feedOutputConfig`
        if (data['feedOutputConfig']) { // data not null
          FeedOutputConfig.validateJSON(data['feedOutputConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relationshipTypes'])) {
            throw new Error("Expected the field `relationshipTypes` to be an array in the JSON data but got " + data['relationshipTypes']);
        }

        return true;
    }


}



/**
 * A list of the full names of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. For a list of the full names for supported asset types, see [Resource name format](/asset-inventory/docs/resource-name-format).
 * @member {Array.<String>} assetNames
 */
Feed.prototype['assetNames'] = undefined;

/**
 * A list of types of the assets to receive updates. You must specify either or both of asset_names and asset_types. Only asset updates matching specified asset_names or asset_types are exported to the feed. Example: `\"compute.googleapis.com/Disk\"` For a list of all supported asset types, see [Supported asset types](/asset-inventory/docs/supported-asset-types).
 * @member {Array.<String>} assetTypes
 */
Feed.prototype['assetTypes'] = undefined;

/**
 * @member {module:model/Expr} condition
 */
Feed.prototype['condition'] = undefined;

/**
 * Asset content type. If not specified, no content but the asset name and type will be returned.
 * @member {module:model/Feed.ContentTypeEnum} contentType
 */
Feed.prototype['contentType'] = undefined;

/**
 * @member {module:model/FeedOutputConfig} feedOutputConfig
 */
Feed.prototype['feedOutputConfig'] = undefined;

/**
 * Required. The format will be projects/{project_number}/feeds/{client-assigned_feed_identifier} or folders/{folder_number}/feeds/{client-assigned_feed_identifier} or organizations/{organization_number}/feeds/{client-assigned_feed_identifier} The client-assigned feed identifier must be unique within the parent project/folder/organization.
 * @member {String} name
 */
Feed.prototype['name'] = undefined;

/**
 * A list of relationship types to output, for example: `INSTANCE_TO_INSTANCEGROUP`. This field should only be specified if content_type=RELATIONSHIP. * If specified: it outputs specified relationship updates on the [asset_names] or the [asset_types]. It returns an error if any of the [relationship_types] doesn't belong to the supported relationship types of the [asset_names] or [asset_types], or any of the [asset_names] or the [asset_types] doesn't belong to the source types of the [relationship_types]. * Otherwise: it outputs the supported relationships of the types of [asset_names] and [asset_types] or returns an error if any of the [asset_names] or the [asset_types] has no replationship support. See [Introduction to Cloud Asset Inventory](https://cloud.google.com/asset-inventory/docs/overview) for all supported asset types and relationship types.
 * @member {Array.<String>} relationshipTypes
 */
Feed.prototype['relationshipTypes'] = undefined;





/**
 * Allowed values for the <code>contentType</code> property.
 * @enum {String}
 * @readonly
 */
Feed['ContentTypeEnum'] = {

    /**
     * value: "CONTENT_TYPE_UNSPECIFIED"
     * @const
     */
    "CONTENT_TYPE_UNSPECIFIED": "CONTENT_TYPE_UNSPECIFIED",

    /**
     * value: "RESOURCE"
     * @const
     */
    "RESOURCE": "RESOURCE",

    /**
     * value: "IAM_POLICY"
     * @const
     */
    "IAM_POLICY": "IAM_POLICY",

    /**
     * value: "ORG_POLICY"
     * @const
     */
    "ORG_POLICY": "ORG_POLICY",

    /**
     * value: "ACCESS_POLICY"
     * @const
     */
    "ACCESS_POLICY": "ACCESS_POLICY",

    /**
     * value: "OS_INVENTORY"
     * @const
     */
    "OS_INVENTORY": "OS_INVENTORY",

    /**
     * value: "RELATIONSHIP"
     * @const
     */
    "RELATIONSHIP": "RELATIONSHIP"
};



export default Feed;

