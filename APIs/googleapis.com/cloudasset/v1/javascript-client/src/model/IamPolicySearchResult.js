/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Explanation from './Explanation';
import Policy from './Policy';

/**
 * The IamPolicySearchResult model module.
 * @module model/IamPolicySearchResult
 * @version v1
 */
class IamPolicySearchResult {
    /**
     * Constructs a new <code>IamPolicySearchResult</code>.
     * A result of IAM Policy search, containing information of an IAM policy.
     * @alias module:model/IamPolicySearchResult
     */
    constructor() { 
        
        IamPolicySearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IamPolicySearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IamPolicySearchResult} obj Optional instance to populate.
     * @return {module:model/IamPolicySearchResult} The populated <code>IamPolicySearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IamPolicySearchResult();

            if (data.hasOwnProperty('assetType')) {
                obj['assetType'] = ApiClient.convertToType(data['assetType'], 'String');
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = Explanation.constructFromObject(data['explanation']);
            }
            if (data.hasOwnProperty('folders')) {
                obj['folders'] = ApiClient.convertToType(data['folders'], ['String']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = Policy.constructFromObject(data['policy']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IamPolicySearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IamPolicySearchResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetType'] && !(typeof data['assetType'] === 'string' || data['assetType'] instanceof String)) {
            throw new Error("Expected the field `assetType` to be a primitive type in the JSON string but got " + data['assetType']);
        }
        // validate the optional field `explanation`
        if (data['explanation']) { // data not null
          Explanation.validateJSON(data['explanation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['folders'])) {
            throw new Error("Expected the field `folders` to be an array in the JSON data but got " + data['folders']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // validate the optional field `policy`
        if (data['policy']) { // data not null
          Policy.validateJSON(data['policy']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['resource'] && !(typeof data['resource'] === 'string' || data['resource'] instanceof String)) {
            throw new Error("Expected the field `resource` to be a primitive type in the JSON string but got " + data['resource']);
        }

        return true;
    }


}



/**
 * The type of the resource associated with this IAM policy. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * specify the `asset_types` field in your search request.
 * @member {String} assetType
 */
IamPolicySearchResult.prototype['assetType'] = undefined;

/**
 * @member {module:model/Explanation} explanation
 */
IamPolicySearchResult.prototype['explanation'] = undefined;

/**
 * The folder(s) that the IAM policy belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the IAM policy belongs to one or more folders. To search against `folders`: * use a field query. Example: `folders:(123 OR 456)` * use a free text query. Example: `123` * specify the `scope` field as this folder in your search request.
 * @member {Array.<String>} folders
 */
IamPolicySearchResult.prototype['folders'] = undefined;

/**
 * The organization that the IAM policy belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the IAM policy belongs to an organization. To search against `organization`: * use a field query. Example: `organization:123` * use a free text query. Example: `123` * specify the `scope` field as this organization in your search request.
 * @member {String} organization
 */
IamPolicySearchResult.prototype['organization'] = undefined;

/**
 * @member {module:model/Policy} policy
 */
IamPolicySearchResult.prototype['policy'] = undefined;

/**
 * The project that the associated Google Cloud resource belongs to, in the form of projects/{PROJECT_NUMBER}. If an IAM policy is set on a resource (like VM instance, Cloud Storage bucket), the project field will indicate the project that contains the resource. If an IAM policy is set on a folder or orgnization, this field will be empty. To search against the `project`: * specify the `scope` field as this project in your search request.
 * @member {String} project
 */
IamPolicySearchResult.prototype['project'] = undefined;

/**
 * The full resource name of the resource associated with this IAM policy. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `resource`: * use a field query. Example: `resource:organizations/123`
 * @member {String} resource
 */
IamPolicySearchResult.prototype['resource'] = undefined;






export default IamPolicySearchResult;

