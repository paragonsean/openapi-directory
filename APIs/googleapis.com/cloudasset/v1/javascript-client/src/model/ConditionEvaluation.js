/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConditionEvaluation model module.
 * @module model/ConditionEvaluation
 * @version v1
 */
class ConditionEvaluation {
    /**
     * Constructs a new <code>ConditionEvaluation</code>.
     * The condition evaluation.
     * @alias module:model/ConditionEvaluation
     */
    constructor() { 
        
        ConditionEvaluation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConditionEvaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConditionEvaluation} obj Optional instance to populate.
     * @return {module:model/ConditionEvaluation} The populated <code>ConditionEvaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConditionEvaluation();

            if (data.hasOwnProperty('evaluationValue')) {
                obj['evaluationValue'] = ApiClient.convertToType(data['evaluationValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConditionEvaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConditionEvaluation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evaluationValue'] && !(typeof data['evaluationValue'] === 'string' || data['evaluationValue'] instanceof String)) {
            throw new Error("Expected the field `evaluationValue` to be a primitive type in the JSON string but got " + data['evaluationValue']);
        }

        return true;
    }


}



/**
 * The evaluation result.
 * @member {module:model/ConditionEvaluation.EvaluationValueEnum} evaluationValue
 */
ConditionEvaluation.prototype['evaluationValue'] = undefined;





/**
 * Allowed values for the <code>evaluationValue</code> property.
 * @enum {String}
 * @readonly
 */
ConditionEvaluation['EvaluationValueEnum'] = {

    /**
     * value: "EVALUATION_VALUE_UNSPECIFIED"
     * @const
     */
    "EVALUATION_VALUE_UNSPECIFIED": "EVALUATION_VALUE_UNSPECIFIED",

    /**
     * value: "TRUE"
     * @const
     */
    "TRUE": "TRUE",

    /**
     * value: "FALSE"
     * @const
     */
    "FALSE": "FALSE",

    /**
     * value: "CONDITIONAL"
     * @const
     */
    "CONDITIONAL": "CONDITIONAL"
};



export default ConditionEvaluation;

