/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableSchema from './TableSchema';

/**
 * The QueryResult model module.
 * @module model/QueryResult
 * @version v1
 */
class QueryResult {
    /**
     * Constructs a new <code>QueryResult</code>.
     * Execution results of the query. The result is formatted as rows represented by BigQuery compatible [schema]. When pagination is necessary, it will contains the page token to retrieve the results of following pages.
     * @alias module:model/QueryResult
     */
    constructor() { 
        
        QueryResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryResult} obj Optional instance to populate.
     * @return {module:model/QueryResult} The populated <code>QueryResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryResult();

            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = TableSchema.constructFromObject(data['schema']);
            }
            if (data.hasOwnProperty('totalRows')) {
                obj['totalRows'] = ApiClient.convertToType(data['totalRows'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rows'])) {
            throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
        }
        // validate the optional field `schema`
        if (data['schema']) { // data not null
          TableSchema.validateJSON(data['schema']);
        }
        // ensure the json data is a string
        if (data['totalRows'] && !(typeof data['totalRows'] === 'string' || data['totalRows'] instanceof String)) {
            throw new Error("Expected the field `totalRows` to be a primitive type in the JSON string but got " + data['totalRows']);
        }

        return true;
    }


}



/**
 * Token to retrieve the next page of the results.
 * @member {String} nextPageToken
 */
QueryResult.prototype['nextPageToken'] = undefined;

/**
 * Each row hold a query result in the format of `Struct`.
 * @member {Array.<Object.<String, Object>>} rows
 */
QueryResult.prototype['rows'] = undefined;

/**
 * @member {module:model/TableSchema} schema
 */
QueryResult.prototype['schema'] = undefined;

/**
 * Total rows of the whole query results.
 * @member {String} totalRows
 */
QueryResult.prototype['totalRows'] = undefined;






export default QueryResult;

