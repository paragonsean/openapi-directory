/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissions from './Permissions';

/**
 * The Explanation model module.
 * @module model/Explanation
 * @version v1
 */
class Explanation {
    /**
     * Constructs a new <code>Explanation</code>.
     * Explanation about the IAM policy search result.
     * @alias module:model/Explanation
     */
    constructor() { 
        
        Explanation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Explanation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Explanation} obj Optional instance to populate.
     * @return {module:model/Explanation} The populated <code>Explanation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Explanation();

            if (data.hasOwnProperty('matchedPermissions')) {
                obj['matchedPermissions'] = ApiClient.convertToType(data['matchedPermissions'], {'String': Permissions});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Explanation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Explanation</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The map from roles to their included permissions that match the permission query (i.e., a query containing `policy.role.permissions:`). Example: if query `policy.role.permissions:compute.disk.get` matches a policy binding that contains owner role, the matched_permissions will be `{\"roles/owner\": [\"compute.disk.get\"]}`. The roles can also be found in the returned `policy` bindings. Note that the map is populated only for requests with permission queries.
 * @member {Object.<String, module:model/Permissions>} matchedPermissions
 */
Explanation.prototype['matchedPermissions'] = undefined;






export default Explanation;

