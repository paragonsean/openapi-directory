/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyInfo from './PolicyInfo';

/**
 * The EffectiveIamPolicy model module.
 * @module model/EffectiveIamPolicy
 * @version v1
 */
class EffectiveIamPolicy {
    /**
     * Constructs a new <code>EffectiveIamPolicy</code>.
     * The effective IAM policies on one resource.
     * @alias module:model/EffectiveIamPolicy
     */
    constructor() { 
        
        EffectiveIamPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EffectiveIamPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EffectiveIamPolicy} obj Optional instance to populate.
     * @return {module:model/EffectiveIamPolicy} The populated <code>EffectiveIamPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EffectiveIamPolicy();

            if (data.hasOwnProperty('fullResourceName')) {
                obj['fullResourceName'] = ApiClient.convertToType(data['fullResourceName'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], [PolicyInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EffectiveIamPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EffectiveIamPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fullResourceName'] && !(typeof data['fullResourceName'] === 'string' || data['fullResourceName'] instanceof String)) {
            throw new Error("Expected the field `fullResourceName` to be a primitive type in the JSON string but got " + data['fullResourceName']);
        }
        if (data['policies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policies'])) {
                throw new Error("Expected the field `policies` to be an array in the JSON data but got " + data['policies']);
            }
            // validate the optional field `policies` (array)
            for (const item of data['policies']) {
                PolicyInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The [full_resource_name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) for which the policies are computed. This is one of the BatchGetEffectiveIamPoliciesRequest.names the caller provides in the request.
 * @member {String} fullResourceName
 */
EffectiveIamPolicy.prototype['fullResourceName'] = undefined;

/**
 * The effective policies for the full_resource_name. These policies include the policy set on the full_resource_name and those set on its parents and ancestors up to the BatchGetEffectiveIamPoliciesRequest.scope. Note that these policies are not filtered according to the resource type of the full_resource_name. These policies are hierarchically ordered by PolicyInfo.attached_resource starting from full_resource_name itself to its parents and ancestors, such that policies[i]'s PolicyInfo.attached_resource is the child of policies[i+1]'s PolicyInfo.attached_resource, if policies[i+1] exists.
 * @member {Array.<module:model/PolicyInfo>} policies
 */
EffectiveIamPolicy.prototype['policies'] = undefined;






export default EffectiveIamPolicy;

