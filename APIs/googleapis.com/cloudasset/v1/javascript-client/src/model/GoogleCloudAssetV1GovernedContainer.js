/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyzerOrgPolicy from './AnalyzerOrgPolicy';
import EffectiveTagDetails from './EffectiveTagDetails';

/**
 * The GoogleCloudAssetV1GovernedContainer model module.
 * @module model/GoogleCloudAssetV1GovernedContainer
 * @version v1
 */
class GoogleCloudAssetV1GovernedContainer {
    /**
     * Constructs a new <code>GoogleCloudAssetV1GovernedContainer</code>.
     * The organization/folder/project resource governed by organization policies of AnalyzeOrgPolicyGovernedContainersRequest.constraint.
     * @alias module:model/GoogleCloudAssetV1GovernedContainer
     */
    constructor() { 
        
        GoogleCloudAssetV1GovernedContainer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAssetV1GovernedContainer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAssetV1GovernedContainer} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAssetV1GovernedContainer} The populated <code>GoogleCloudAssetV1GovernedContainer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAssetV1GovernedContainer();

            if (data.hasOwnProperty('consolidatedPolicy')) {
                obj['consolidatedPolicy'] = AnalyzerOrgPolicy.constructFromObject(data['consolidatedPolicy']);
            }
            if (data.hasOwnProperty('effectiveTags')) {
                obj['effectiveTags'] = ApiClient.convertToType(data['effectiveTags'], [EffectiveTagDetails]);
            }
            if (data.hasOwnProperty('folders')) {
                obj['folders'] = ApiClient.convertToType(data['folders'], ['String']);
            }
            if (data.hasOwnProperty('fullResourceName')) {
                obj['fullResourceName'] = ApiClient.convertToType(data['fullResourceName'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('policyBundle')) {
                obj['policyBundle'] = ApiClient.convertToType(data['policyBundle'], [AnalyzerOrgPolicy]);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAssetV1GovernedContainer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAssetV1GovernedContainer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `consolidatedPolicy`
        if (data['consolidatedPolicy']) { // data not null
          AnalyzerOrgPolicy.validateJSON(data['consolidatedPolicy']);
        }
        if (data['effectiveTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effectiveTags'])) {
                throw new Error("Expected the field `effectiveTags` to be an array in the JSON data but got " + data['effectiveTags']);
            }
            // validate the optional field `effectiveTags` (array)
            for (const item of data['effectiveTags']) {
                EffectiveTagDetails.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['folders'])) {
            throw new Error("Expected the field `folders` to be an array in the JSON data but got " + data['folders']);
        }
        // ensure the json data is a string
        if (data['fullResourceName'] && !(typeof data['fullResourceName'] === 'string' || data['fullResourceName'] instanceof String)) {
            throw new Error("Expected the field `fullResourceName` to be a primitive type in the JSON string but got " + data['fullResourceName']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        if (data['policyBundle']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyBundle'])) {
                throw new Error("Expected the field `policyBundle` to be an array in the JSON data but got " + data['policyBundle']);
            }
            // validate the optional field `policyBundle` (array)
            for (const item of data['policyBundle']) {
                AnalyzerOrgPolicy.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }

        return true;
    }


}



/**
 * @member {module:model/AnalyzerOrgPolicy} consolidatedPolicy
 */
GoogleCloudAssetV1GovernedContainer.prototype['consolidatedPolicy'] = undefined;

/**
 * The effective tags on this resource.
 * @member {Array.<module:model/EffectiveTagDetails>} effectiveTags
 */
GoogleCloudAssetV1GovernedContainer.prototype['effectiveTags'] = undefined;

/**
 * The folder(s) that this resource belongs to, in the format of folders/{FOLDER_NUMBER}. This field is available when the resource belongs (directly or cascadingly) to one or more folders.
 * @member {Array.<String>} folders
 */
GoogleCloudAssetV1GovernedContainer.prototype['folders'] = undefined;

/**
 * The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of an organization/folder/project resource.
 * @member {String} fullResourceName
 */
GoogleCloudAssetV1GovernedContainer.prototype['fullResourceName'] = undefined;

/**
 * The organization that this resource belongs to, in the format of organizations/{ORGANIZATION_NUMBER}. This field is available when the resource belongs (directly or cascadingly) to an organization.
 * @member {String} organization
 */
GoogleCloudAssetV1GovernedContainer.prototype['organization'] = undefined;

/**
 * The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of the parent of AnalyzeOrgPolicyGovernedContainersResponse.GovernedContainer.full_resource_name.
 * @member {String} parent
 */
GoogleCloudAssetV1GovernedContainer.prototype['parent'] = undefined;

/**
 * The ordered list of all organization policies from the AnalyzeOrgPoliciesResponse.OrgPolicyResult.consolidated_policy.attached_resource. to the scope specified in the request. If the constraint is defined with default policy, it will also appear in the list.
 * @member {Array.<module:model/AnalyzerOrgPolicy>} policyBundle
 */
GoogleCloudAssetV1GovernedContainer.prototype['policyBundle'] = undefined;

/**
 * The project that this resource belongs to, in the format of projects/{PROJECT_NUMBER}. This field is available when the resource belongs to a project.
 * @member {String} project
 */
GoogleCloudAssetV1GovernedContainer.prototype['project'] = undefined;






export default GoogleCloudAssetV1GovernedContainer;

