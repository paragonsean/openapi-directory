/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudAssetV1BigQueryDestination model module.
 * @module model/GoogleCloudAssetV1BigQueryDestination
 * @version v1
 */
class GoogleCloudAssetV1BigQueryDestination {
    /**
     * Constructs a new <code>GoogleCloudAssetV1BigQueryDestination</code>.
     * A BigQuery destination.
     * @alias module:model/GoogleCloudAssetV1BigQueryDestination
     */
    constructor() { 
        
        GoogleCloudAssetV1BigQueryDestination.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudAssetV1BigQueryDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudAssetV1BigQueryDestination} obj Optional instance to populate.
     * @return {module:model/GoogleCloudAssetV1BigQueryDestination} The populated <code>GoogleCloudAssetV1BigQueryDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudAssetV1BigQueryDestination();

            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], 'String');
            }
            if (data.hasOwnProperty('partitionKey')) {
                obj['partitionKey'] = ApiClient.convertToType(data['partitionKey'], 'String');
            }
            if (data.hasOwnProperty('tablePrefix')) {
                obj['tablePrefix'] = ApiClient.convertToType(data['tablePrefix'], 'String');
            }
            if (data.hasOwnProperty('writeDisposition')) {
                obj['writeDisposition'] = ApiClient.convertToType(data['writeDisposition'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudAssetV1BigQueryDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudAssetV1BigQueryDestination</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataset'] && !(typeof data['dataset'] === 'string' || data['dataset'] instanceof String)) {
            throw new Error("Expected the field `dataset` to be a primitive type in the JSON string but got " + data['dataset']);
        }
        // ensure the json data is a string
        if (data['partitionKey'] && !(typeof data['partitionKey'] === 'string' || data['partitionKey'] instanceof String)) {
            throw new Error("Expected the field `partitionKey` to be a primitive type in the JSON string but got " + data['partitionKey']);
        }
        // ensure the json data is a string
        if (data['tablePrefix'] && !(typeof data['tablePrefix'] === 'string' || data['tablePrefix'] instanceof String)) {
            throw new Error("Expected the field `tablePrefix` to be a primitive type in the JSON string but got " + data['tablePrefix']);
        }
        // ensure the json data is a string
        if (data['writeDisposition'] && !(typeof data['writeDisposition'] === 'string' || data['writeDisposition'] instanceof String)) {
            throw new Error("Expected the field `writeDisposition` to be a primitive type in the JSON string but got " + data['writeDisposition']);
        }

        return true;
    }


}



/**
 * Required. The BigQuery dataset in format \"projects/projectId/datasets/datasetId\", to which the analysis results should be exported. If this dataset does not exist, the export call will return an INVALID_ARGUMENT error.
 * @member {String} dataset
 */
GoogleCloudAssetV1BigQueryDestination.prototype['dataset'] = undefined;

/**
 * The partition key for BigQuery partitioned table.
 * @member {module:model/GoogleCloudAssetV1BigQueryDestination.PartitionKeyEnum} partitionKey
 */
GoogleCloudAssetV1BigQueryDestination.prototype['partitionKey'] = undefined;

/**
 * Required. The prefix of the BigQuery tables to which the analysis results will be written. Tables will be created based on this table_prefix if not exist: * _analysis table will contain export operation's metadata. * _analysis_result will contain all the IamPolicyAnalysisResult. When [partition_key] is specified, both tables will be partitioned based on the [partition_key].
 * @member {String} tablePrefix
 */
GoogleCloudAssetV1BigQueryDestination.prototype['tablePrefix'] = undefined;

/**
 * Optional. Specifies the action that occurs if the destination table or partition already exists. The following values are supported: * WRITE_TRUNCATE: If the table or partition already exists, BigQuery overwrites the entire table or all the partitions data. * WRITE_APPEND: If the table or partition already exists, BigQuery appends the data to the table or the latest partition. * WRITE_EMPTY: If the table already exists and contains data, an error is returned. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Details are at https://cloud.google.com/bigquery/docs/loading-data-local#appending_to_or_overwriting_a_table_using_a_local_file.
 * @member {String} writeDisposition
 */
GoogleCloudAssetV1BigQueryDestination.prototype['writeDisposition'] = undefined;





/**
 * Allowed values for the <code>partitionKey</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudAssetV1BigQueryDestination['PartitionKeyEnum'] = {

    /**
     * value: "PARTITION_KEY_UNSPECIFIED"
     * @const
     */
    "PARTITION_KEY_UNSPECIFIED": "PARTITION_KEY_UNSPECIFIED",

    /**
     * value: "REQUEST_TIME"
     * @const
     */
    "REQUEST_TIME": "REQUEST_TIME"
};



export default GoogleCloudAssetV1BigQueryDestination;

