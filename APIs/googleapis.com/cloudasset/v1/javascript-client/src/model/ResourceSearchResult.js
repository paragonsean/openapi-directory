/**
 * Cloud Asset API
 * The Cloud Asset API manages the history and inventory of Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachedResource from './AttachedResource';
import EffectiveTagDetails from './EffectiveTagDetails';
import RelatedResources from './RelatedResources';
import Tag from './Tag';
import VersionedResource from './VersionedResource';

/**
 * The ResourceSearchResult model module.
 * @module model/ResourceSearchResult
 * @version v1
 */
class ResourceSearchResult {
    /**
     * Constructs a new <code>ResourceSearchResult</code>.
     * A result of Resource Search, containing information of a cloud resource. Next ID: 34
     * @alias module:model/ResourceSearchResult
     */
    constructor() { 
        
        ResourceSearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceSearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceSearchResult} obj Optional instance to populate.
     * @return {module:model/ResourceSearchResult} The populated <code>ResourceSearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceSearchResult();

            if (data.hasOwnProperty('additionalAttributes')) {
                obj['additionalAttributes'] = ApiClient.convertToType(data['additionalAttributes'], {'String': Object});
            }
            if (data.hasOwnProperty('assetType')) {
                obj['assetType'] = ApiClient.convertToType(data['assetType'], 'String');
            }
            if (data.hasOwnProperty('attachedResources')) {
                obj['attachedResources'] = ApiClient.convertToType(data['attachedResources'], [AttachedResource]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('effectiveTags')) {
                obj['effectiveTags'] = ApiClient.convertToType(data['effectiveTags'], [EffectiveTagDetails]);
            }
            if (data.hasOwnProperty('folders')) {
                obj['folders'] = ApiClient.convertToType(data['folders'], ['String']);
            }
            if (data.hasOwnProperty('kmsKey')) {
                obj['kmsKey'] = ApiClient.convertToType(data['kmsKey'], 'String');
            }
            if (data.hasOwnProperty('kmsKeys')) {
                obj['kmsKeys'] = ApiClient.convertToType(data['kmsKeys'], ['String']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkTags')) {
                obj['networkTags'] = ApiClient.convertToType(data['networkTags'], ['String']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('parentAssetType')) {
                obj['parentAssetType'] = ApiClient.convertToType(data['parentAssetType'], 'String');
            }
            if (data.hasOwnProperty('parentFullResourceName')) {
                obj['parentFullResourceName'] = ApiClient.convertToType(data['parentFullResourceName'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ApiClient.convertToType(data['relationships'], {'String': RelatedResources});
            }
            if (data.hasOwnProperty('sccSecurityMarks')) {
                obj['sccSecurityMarks'] = ApiClient.convertToType(data['sccSecurityMarks'], {'String': 'String'});
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tagKeys')) {
                obj['tagKeys'] = ApiClient.convertToType(data['tagKeys'], ['String']);
            }
            if (data.hasOwnProperty('tagValueIds')) {
                obj['tagValueIds'] = ApiClient.convertToType(data['tagValueIds'], ['String']);
            }
            if (data.hasOwnProperty('tagValues')) {
                obj['tagValues'] = ApiClient.convertToType(data['tagValues'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('versionedResources')) {
                obj['versionedResources'] = ApiClient.convertToType(data['versionedResources'], [VersionedResource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceSearchResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceSearchResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetType'] && !(typeof data['assetType'] === 'string' || data['assetType'] instanceof String)) {
            throw new Error("Expected the field `assetType` to be a primitive type in the JSON string but got " + data['assetType']);
        }
        if (data['attachedResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachedResources'])) {
                throw new Error("Expected the field `attachedResources` to be an array in the JSON data but got " + data['attachedResources']);
            }
            // validate the optional field `attachedResources` (array)
            for (const item of data['attachedResources']) {
                AttachedResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['effectiveTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['effectiveTags'])) {
                throw new Error("Expected the field `effectiveTags` to be an array in the JSON data but got " + data['effectiveTags']);
            }
            // validate the optional field `effectiveTags` (array)
            for (const item of data['effectiveTags']) {
                EffectiveTagDetails.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['folders'])) {
            throw new Error("Expected the field `folders` to be an array in the JSON data but got " + data['folders']);
        }
        // ensure the json data is a string
        if (data['kmsKey'] && !(typeof data['kmsKey'] === 'string' || data['kmsKey'] instanceof String)) {
            throw new Error("Expected the field `kmsKey` to be a primitive type in the JSON string but got " + data['kmsKey']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['kmsKeys'])) {
            throw new Error("Expected the field `kmsKeys` to be an array in the JSON data but got " + data['kmsKeys']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['networkTags'])) {
            throw new Error("Expected the field `networkTags` to be an array in the JSON data but got " + data['networkTags']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['parentAssetType'] && !(typeof data['parentAssetType'] === 'string' || data['parentAssetType'] instanceof String)) {
            throw new Error("Expected the field `parentAssetType` to be a primitive type in the JSON string but got " + data['parentAssetType']);
        }
        // ensure the json data is a string
        if (data['parentFullResourceName'] && !(typeof data['parentFullResourceName'] === 'string' || data['parentFullResourceName'] instanceof String)) {
            throw new Error("Expected the field `parentFullResourceName` to be a primitive type in the JSON string but got " + data['parentFullResourceName']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagKeys'])) {
            throw new Error("Expected the field `tagKeys` to be an array in the JSON data but got " + data['tagKeys']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagValueIds'])) {
            throw new Error("Expected the field `tagValueIds` to be an array in the JSON data but got " + data['tagValueIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tagValues'])) {
            throw new Error("Expected the field `tagValues` to be an array in the JSON data but got " + data['tagValues']);
        }
        if (data['tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tags'])) {
                throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
            }
            // validate the optional field `tags` (array)
            for (const item of data['tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        if (data['versionedResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['versionedResources'])) {
                throw new Error("Expected the field `versionedResources` to be an array in the JSON data but got " + data['versionedResources']);
            }
            // validate the optional field `versionedResources` (array)
            for (const item of data['versionedResources']) {
                VersionedResource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The additional searchable attributes of this resource. The attributes may vary from one resource type to another. Examples: `projectId` for Project, `dnsName` for DNS ManagedZone. This field contains a subset of the resource metadata fields that are returned by the List or Get APIs provided by the corresponding Google Cloud service (e.g., Compute Engine). see [API references and supported searchable attributes](https://cloud.google.com/asset-inventory/docs/supported-asset-types) to see which fields are included. You can search values of these fields through free text search. However, you should not consume the field programically as the field names and values may change as the Google Cloud service updates to a new incompatible API version. To search against the `additional_attributes`: * Use a free text query to match the attributes values. Example: to search `additional_attributes = { dnsName: \"foobar\" }`, you can issue a query `foobar`.
 * @member {Object.<String, Object>} additionalAttributes
 */
ResourceSearchResult.prototype['additionalAttributes'] = undefined;

/**
 * The type of this resource. Example: `compute.googleapis.com/Disk`. To search against the `asset_type`: * Specify the `asset_type` field in your search request.
 * @member {String} assetType
 */
ResourceSearchResult.prototype['assetType'] = undefined;

/**
 * Attached resources of this resource. For example, an OSConfig Inventory is an attached resource of a Compute Instance. This field is repeated because a resource could have multiple attached resources. This `attached_resources` field is not searchable. Some attributes of the attached resources are exposed in `additional_attributes` field, so as to allow users to search on them.
 * @member {Array.<module:model/AttachedResource>} attachedResources
 */
ResourceSearchResult.prototype['attachedResources'] = undefined;

/**
 * The create timestamp of this resource, at which the resource was created. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `create_time`: * Use a field query. - value in seconds since unix epoch. Example: `createTime > 1609459200` - value in date string. Example: `createTime > 2021-01-01` - value in date-time string (must be quoted). Example: `createTime > \"2021-01-01T00:00:00\"`
 * @member {String} createTime
 */
ResourceSearchResult.prototype['createTime'] = undefined;

/**
 * One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes. This field is available only when the resource's Protobuf contains it. To search against the `description`: * Use a field query. Example: `description:\"important instance\"` * Use a free text query. Example: `\"important instance\"`
 * @member {String} description
 */
ResourceSearchResult.prototype['description'] = undefined;

/**
 * The display name of this resource. This field is available only when the resource's Protobuf contains it. To search against the `display_name`: * Use a field query. Example: `displayName:\"My Instance\"` * Use a free text query. Example: `\"My Instance\"`
 * @member {String} displayName
 */
ResourceSearchResult.prototype['displayName'] = undefined;

/**
 * The effective tags on this resource. All of the tags that are both attached to and inherited by a resource are collectively called the effective tags. For more information, see [tag inheritance](https://cloud.google.com/resource-manager/docs/tags/tags-overview#inheritance). To search against the `effective_tags`: * Use a field query. Example: - `effectiveTagKeys:\"123456789/env*\"` - `effectiveTagKeys=\"123456789/env\"` - `effectiveTagKeys:\"env\"` - `effectiveTagValues:\"env\"` - `effectiveTagValues:\"env/prod\"` - `effectiveTagValues:\"123456789/env/prod*\"` - `effectiveTagValues=\"123456789/env/prod\"` - `effectiveTagValueIds=\"tagValues/456\"`
 * @member {Array.<module:model/EffectiveTagDetails>} effectiveTags
 */
ResourceSearchResult.prototype['effectiveTags'] = undefined;

/**
 * The folder(s) that this resource belongs to, in the form of folders/{FOLDER_NUMBER}. This field is available when the resource belongs to one or more folders. To search against `folders`: * Use a field query. Example: `folders:(123 OR 456)` * Use a free text query. Example: `123` * Specify the `scope` field as this folder in your search request.
 * @member {Array.<String>} folders
 */
ResourceSearchResult.prototype['folders'] = undefined;

/**
 * The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) name or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) name. This field only presents for the purpose of backward compatibility. Use the `kms_keys` field to retrieve Cloud KMS key information. This field is available only when the resource's Protobuf contains it and will only be populated for [these resource types](https://cloud.google.com/asset-inventory/docs/legacy-field-names#resource_types_with_the_to_be_deprecated_kmskey_field) for backward compatible purposes. To search against the `kms_key`: * Use a field query. Example: `kmsKey:key` * Use a free text query. Example: `key`
 * @member {String} kmsKey
 */
ResourceSearchResult.prototype['kmsKey'] = undefined;

/**
 * The Cloud KMS [CryptoKey](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys) names or [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions) names. This field is available only when the resource's Protobuf contains it. To search against the `kms_keys`: * Use a field query. Example: `kmsKeys:key` * Use a free text query. Example: `key`
 * @member {Array.<String>} kmsKeys
 */
ResourceSearchResult.prototype['kmsKeys'] = undefined;

/**
 * Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `labels`: * Use a field query: - query on any label's key or value. Example: `labels:prod` - query by a given label. Example: `labels.env:prod` - query by a given label's existence. Example: `labels.env:*` * Use a free text query. Example: `prod`
 * @member {Object.<String, String>} labels
 */
ResourceSearchResult.prototype['labels'] = undefined;

/**
 * Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`. This field is available only when the resource's Protobuf contains it. To search against the `location`: * Use a field query. Example: `location:us-west*` * Use a free text query. Example: `us-west*`
 * @member {String} location
 */
ResourceSearchResult.prototype['location'] = undefined;

/**
 * The full resource name of this resource. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Cloud Asset Inventory Resource Name Format](https://cloud.google.com/asset-inventory/docs/resource-name-format) for more information. To search against the `name`: * Use a field query. Example: `name:instance1` * Use a free text query. Example: `instance1`
 * @member {String} name
 */
ResourceSearchResult.prototype['name'] = undefined;

/**
 * Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information. This field is available only when the resource's Protobuf contains it. To search against the `network_tags`: * Use a field query. Example: `networkTags:internal` * Use a free text query. Example: `internal`
 * @member {Array.<String>} networkTags
 */
ResourceSearchResult.prototype['networkTags'] = undefined;

/**
 * The organization that this resource belongs to, in the form of organizations/{ORGANIZATION_NUMBER}. This field is available when the resource belongs to an organization. To search against `organization`: * Use a field query. Example: `organization:123` * Use a free text query. Example: `123` * Specify the `scope` field as this organization in your search request.
 * @member {String} organization
 */
ResourceSearchResult.prototype['organization'] = undefined;

/**
 * The type of this resource's immediate parent, if there is one. To search against the `parent_asset_type`: * Use a field query. Example: `parentAssetType:\"cloudresourcemanager.googleapis.com/Project\"` * Use a free text query. Example: `cloudresourcemanager.googleapis.com/Project`
 * @member {String} parentAssetType
 */
ResourceSearchResult.prototype['parentAssetType'] = undefined;

/**
 * The full resource name of this resource's parent, if it has one. To search against the `parent_full_resource_name`: * Use a field query. Example: `parentFullResourceName:\"project-name\"` * Use a free text query. Example: `project-name`
 * @member {String} parentFullResourceName
 */
ResourceSearchResult.prototype['parentFullResourceName'] = undefined;

/**
 * The project that this resource belongs to, in the form of projects/{PROJECT_NUMBER}. This field is available when the resource belongs to a project. To search against `project`: * Use a field query. Example: `project:12345` * Use a free text query. Example: `12345` * Specify the `scope` field as this project in your search request.
 * @member {String} project
 */
ResourceSearchResult.prototype['project'] = undefined;

/**
 * A map of related resources of this resource, keyed by the relationship type. A relationship type is in the format of {SourceType}_{ACTION}_{DestType}. Example: `DISK_TO_INSTANCE`, `DISK_TO_NETWORK`, `INSTANCE_TO_INSTANCEGROUP`. See [supported relationship types](https://cloud.google.com/asset-inventory/docs/supported-asset-types#supported_relationship_types).
 * @member {Object.<String, module:model/RelatedResources>} relationships
 */
ResourceSearchResult.prototype['relationships'] = undefined;

/**
 * The actual content of Security Command Center security marks associated with the asset. To search against SCC SecurityMarks field: * Use a field query: - query by a given key value pair. Example: `sccSecurityMarks.foo=bar` - query by a given key's existence. Example: `sccSecurityMarks.foo:*`
 * @member {Object.<String, String>} sccSecurityMarks
 */
ResourceSearchResult.prototype['sccSecurityMarks'] = undefined;

/**
 * The state of this resource. Different resources types have different state definitions that are mapped from various fields of different resource types. This field is available only when the resource's Protobuf contains it. Example: If the resource is an instance provided by Compute Engine, its state will include PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. See `status` definition in [API Reference](https://cloud.google.com/compute/docs/reference/rest/v1/instances). If the resource is a project provided by Resource Manager, its state will include LIFECYCLE_STATE_UNSPECIFIED, ACTIVE, DELETE_REQUESTED and DELETE_IN_PROGRESS. See `lifecycleState` definition in [API Reference](https://cloud.google.com/resource-manager/reference/rest/v1/projects). To search against the `state`: * Use a field query. Example: `state:RUNNING` * Use a free text query. Example: `RUNNING`
 * @member {String} state
 */
ResourceSearchResult.prototype['state'] = undefined;

/**
 * This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagKey namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}. To search against the `tagKeys`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` * Use a free text query. Example: - `env`
 * @member {Array.<String>} tagKeys
 */
ResourceSearchResult.prototype['tagKeys'] = undefined;

/**
 * This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue IDs, in the format of tagValues/{TAG_VALUE_ID}. To search against the `tagValueIds`: * Use a field query. Example: - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `456`
 * @member {Array.<String>} tagValueIds
 */
ResourceSearchResult.prototype['tagValueIds'] = undefined;

/**
 * This field is only present for the purpose of backward compatibility. Use the `tags` field instead. TagValue namespaced names, in the format of {ORG_ID}/{TAG_KEY_SHORT_NAME}/{TAG_VALUE_SHORT_NAME}. To search against the `tagValues`: * Use a field query. Example: - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` * Use a free text query. Example: - `prod`
 * @member {Array.<String>} tagValues
 */
ResourceSearchResult.prototype['tagValues'] = undefined;

/**
 * The tags directly attached to this resource. To search against the `tags`: * Use a field query. Example: - `tagKeys:\"123456789/env*\"` - `tagKeys=\"123456789/env\"` - `tagKeys:\"env\"` - `tagValues:\"env\"` - `tagValues:\"env/prod\"` - `tagValues:\"123456789/env/prod*\"` - `tagValues=\"123456789/env/prod\"` - `tagValueIds=\"tagValues/456\"` * Use a free text query. Example: - `env/prod`
 * @member {Array.<module:model/Tag>} tags
 */
ResourceSearchResult.prototype['tags'] = undefined;

/**
 * The last update timestamp of this resource, at which the resource was last modified or deleted. The granularity is in seconds. Timestamp.nanos will always be 0. This field is available only when the resource's Protobuf contains it. To search against `update_time`: * Use a field query. - value in seconds since unix epoch. Example: `updateTime < 1609459200` - value in date string. Example: `updateTime < 2021-01-01` - value in date-time string (must be quoted). Example: `updateTime < \"2021-01-01T00:00:00\"`
 * @member {String} updateTime
 */
ResourceSearchResult.prototype['updateTime'] = undefined;

/**
 * Versioned resource representations of this resource. This is repeated because there could be multiple versions of resource representations during version migration. This `versioned_resources` field is not searchable. Some attributes of the resource representations are exposed in `additional_attributes` field, so as to allow users to search on them.
 * @member {Array.<module:model/VersionedResource>} versionedResources
 */
ResourceSearchResult.prototype['versionedResources'] = undefined;






export default ResourceSearchResult;

