# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Row(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude_diffs: List[int]=None):
        """Row - a model defined in OpenAPI

        :param altitude_diffs: The altitude_diffs of this Row.
        """
        self.openapi_types = {
            'altitude_diffs': List[int]
        }

        self.attribute_map = {
            'altitude_diffs': 'altitudeDiffs'
        }

        self._altitude_diffs = altitude_diffs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Row':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Row of this Row.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude_diffs(self):
        """Gets the altitude_diffs of this Row.

        The difference between each successive pair of altitudes, from west to east. The first, westmost point, is just the altitude rather than a diff. The units are specified by the altitude_multiplier parameter above; the value in meters is given by altitude_multiplier * altitude_diffs[n]. The altitude row (in metres above sea level) can be reconstructed with: a[0] = altitude_diffs[0] * altitude_multiplier when n > 0, a[n] = a[n-1] + altitude_diffs[n-1] * altitude_multiplier.

        :return: The altitude_diffs of this Row.
        :rtype: List[int]
        """
        return self._altitude_diffs

    @altitude_diffs.setter
    def altitude_diffs(self, altitude_diffs):
        """Sets the altitude_diffs of this Row.

        The difference between each successive pair of altitudes, from west to east. The first, westmost point, is just the altitude rather than a diff. The units are specified by the altitude_multiplier parameter above; the value in meters is given by altitude_multiplier * altitude_diffs[n]. The altitude row (in metres above sea level) can be reconstructed with: a[0] = altitude_diffs[0] * altitude_multiplier when n > 0, a[n] = a[n-1] + altitude_diffs[n-1] * altitude_multiplier.

        :param altitude_diffs: The altitude_diffs of this Row.
        :type altitude_diffs: List[int]
        """

        self._altitude_diffs = altitude_diffs
