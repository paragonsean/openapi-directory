# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.first_derivative_elevation_grid import FirstDerivativeElevationGrid
from openapi_server.models.second_derivative_elevation_grid import SecondDerivativeElevationGrid
from openapi_server.models.tile_coordinates import TileCoordinates
from openapi_server import util


class TerrainTile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: TileCoordinates=None, first_derivative: FirstDerivativeElevationGrid=None, name: str=None, second_derivative: SecondDerivativeElevationGrid=None):
        """TerrainTile - a model defined in OpenAPI

        :param coordinates: The coordinates of this TerrainTile.
        :param first_derivative: The first_derivative of this TerrainTile.
        :param name: The name of this TerrainTile.
        :param second_derivative: The second_derivative of this TerrainTile.
        """
        self.openapi_types = {
            'coordinates': TileCoordinates,
            'first_derivative': FirstDerivativeElevationGrid,
            'name': str,
            'second_derivative': SecondDerivativeElevationGrid
        }

        self.attribute_map = {
            'coordinates': 'coordinates',
            'first_derivative': 'firstDerivative',
            'name': 'name',
            'second_derivative': 'secondDerivative'
        }

        self._coordinates = coordinates
        self._first_derivative = first_derivative
        self._name = name
        self._second_derivative = second_derivative

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerrainTile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerrainTile of this TerrainTile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this TerrainTile.


        :return: The coordinates of this TerrainTile.
        :rtype: TileCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this TerrainTile.


        :param coordinates: The coordinates of this TerrainTile.
        :type coordinates: TileCoordinates
        """

        self._coordinates = coordinates

    @property
    def first_derivative(self):
        """Gets the first_derivative of this TerrainTile.


        :return: The first_derivative of this TerrainTile.
        :rtype: FirstDerivativeElevationGrid
        """
        return self._first_derivative

    @first_derivative.setter
    def first_derivative(self, first_derivative):
        """Sets the first_derivative of this TerrainTile.


        :param first_derivative: The first_derivative of this TerrainTile.
        :type first_derivative: FirstDerivativeElevationGrid
        """

        self._first_derivative = first_derivative

    @property
    def name(self):
        """Gets the name of this TerrainTile.

        Resource name of the tile. The tile resource name is prefixed by its collection ID `terrain/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terrain/@1,2,3z`.

        :return: The name of this TerrainTile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TerrainTile.

        Resource name of the tile. The tile resource name is prefixed by its collection ID `terrain/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terrain/@1,2,3z`.

        :param name: The name of this TerrainTile.
        :type name: str
        """

        self._name = name

    @property
    def second_derivative(self):
        """Gets the second_derivative of this TerrainTile.


        :return: The second_derivative of this TerrainTile.
        :rtype: SecondDerivativeElevationGrid
        """
        return self._second_derivative

    @second_derivative.setter
    def second_derivative(self, second_derivative):
        """Sets the second_derivative of this TerrainTile.


        :param second_derivative: The second_derivative of this TerrainTile.
        :type second_derivative: SecondDerivativeElevationGrid
        """

        self._second_derivative = second_derivative
