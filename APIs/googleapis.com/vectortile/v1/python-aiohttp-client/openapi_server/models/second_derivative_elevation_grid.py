# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecondDerivativeElevationGrid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude_multiplier: float=None, column_count: int=None, encoded_data: str=None, row_count: int=None):
        """SecondDerivativeElevationGrid - a model defined in OpenAPI

        :param altitude_multiplier: The altitude_multiplier of this SecondDerivativeElevationGrid.
        :param column_count: The column_count of this SecondDerivativeElevationGrid.
        :param encoded_data: The encoded_data of this SecondDerivativeElevationGrid.
        :param row_count: The row_count of this SecondDerivativeElevationGrid.
        """
        self.openapi_types = {
            'altitude_multiplier': float,
            'column_count': int,
            'encoded_data': str,
            'row_count': int
        }

        self.attribute_map = {
            'altitude_multiplier': 'altitudeMultiplier',
            'column_count': 'columnCount',
            'encoded_data': 'encodedData',
            'row_count': 'rowCount'
        }

        self._altitude_multiplier = altitude_multiplier
        self._column_count = column_count
        self._encoded_data = encoded_data
        self._row_count = row_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecondDerivativeElevationGrid':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecondDerivativeElevationGrid of this SecondDerivativeElevationGrid.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude_multiplier(self):
        """Gets the altitude_multiplier of this SecondDerivativeElevationGrid.

        A multiplier applied to the elements in the encoded data to extract the actual altitudes in meters.

        :return: The altitude_multiplier of this SecondDerivativeElevationGrid.
        :rtype: float
        """
        return self._altitude_multiplier

    @altitude_multiplier.setter
    def altitude_multiplier(self, altitude_multiplier):
        """Sets the altitude_multiplier of this SecondDerivativeElevationGrid.

        A multiplier applied to the elements in the encoded data to extract the actual altitudes in meters.

        :param altitude_multiplier: The altitude_multiplier of this SecondDerivativeElevationGrid.
        :type altitude_multiplier: float
        """

        self._altitude_multiplier = altitude_multiplier

    @property
    def column_count(self):
        """Gets the column_count of this SecondDerivativeElevationGrid.

        The number of columns included in the encoded elevation data (i.e. the horizontal resolution of the grid).

        :return: The column_count of this SecondDerivativeElevationGrid.
        :rtype: int
        """
        return self._column_count

    @column_count.setter
    def column_count(self, column_count):
        """Sets the column_count of this SecondDerivativeElevationGrid.

        The number of columns included in the encoded elevation data (i.e. the horizontal resolution of the grid).

        :param column_count: The column_count of this SecondDerivativeElevationGrid.
        :type column_count: int
        """

        self._column_count = column_count

    @property
    def encoded_data(self):
        """Gets the encoded_data of this SecondDerivativeElevationGrid.

        A stream of elements each representing a point on the tile running across each row from left to right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution elements in the stream. The elements are not the heights, rather the second order derivative of the values one would expect in a stream of height data. Each element is a varint with the following encoding: ------------------------------------------------------------------------| | Head Nibble | ------------------------------------------------------------------------| | Bit 0 | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error | ------------------------------------------------------------------------| | Tail Nibble #1 | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------| | ... | Tail Nibble #n | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------|

        :return: The encoded_data of this SecondDerivativeElevationGrid.
        :rtype: str
        """
        return self._encoded_data

    @encoded_data.setter
    def encoded_data(self, encoded_data):
        """Sets the encoded_data of this SecondDerivativeElevationGrid.

        A stream of elements each representing a point on the tile running across each row from left to right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution elements in the stream. The elements are not the heights, rather the second order derivative of the values one would expect in a stream of height data. Each element is a varint with the following encoding: ------------------------------------------------------------------------| | Head Nibble | ------------------------------------------------------------------------| | Bit 0 | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error | ------------------------------------------------------------------------| | Tail Nibble #1 | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------| | ... | Tail Nibble #n | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------|

        :param encoded_data: The encoded_data of this SecondDerivativeElevationGrid.
        :type encoded_data: str
        """

        self._encoded_data = encoded_data

    @property
    def row_count(self):
        """Gets the row_count of this SecondDerivativeElevationGrid.

        The number of rows included in the encoded elevation data (i.e. the vertical resolution of the grid).

        :return: The row_count of this SecondDerivativeElevationGrid.
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this SecondDerivativeElevationGrid.

        The number of rows included in the encoded elevation data (i.e. the vertical resolution of the grid).

        :param row_count: The row_count of this SecondDerivativeElevationGrid.
        :type row_count: int
        """

        self._row_count = row_count
