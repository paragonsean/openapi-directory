# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.area import Area
from openapi_server.models.extruded_area import ExtrudedArea
from openapi_server.models.line import Line
from openapi_server.models.modeled_volume import ModeledVolume
from openapi_server import util


class Geometry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, areas: List[Area]=None, extruded_areas: List[ExtrudedArea]=None, lines: List[Line]=None, modeled_volumes: List[ModeledVolume]=None):
        """Geometry - a model defined in OpenAPI

        :param areas: The areas of this Geometry.
        :param extruded_areas: The extruded_areas of this Geometry.
        :param lines: The lines of this Geometry.
        :param modeled_volumes: The modeled_volumes of this Geometry.
        """
        self.openapi_types = {
            'areas': List[Area],
            'extruded_areas': List[ExtrudedArea],
            'lines': List[Line],
            'modeled_volumes': List[ModeledVolume]
        }

        self.attribute_map = {
            'areas': 'areas',
            'extruded_areas': 'extrudedAreas',
            'lines': 'lines',
            'modeled_volumes': 'modeledVolumes'
        }

        self._areas = areas
        self._extruded_areas = extruded_areas
        self._lines = lines
        self._modeled_volumes = modeled_volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Geometry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Geometry of this Geometry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def areas(self):
        """Gets the areas of this Geometry.

        The areas present in this geometry.

        :return: The areas of this Geometry.
        :rtype: List[Area]
        """
        return self._areas

    @areas.setter
    def areas(self, areas):
        """Sets the areas of this Geometry.

        The areas present in this geometry.

        :param areas: The areas of this Geometry.
        :type areas: List[Area]
        """

        self._areas = areas

    @property
    def extruded_areas(self):
        """Gets the extruded_areas of this Geometry.

        The extruded areas present in this geometry. Not populated if modeled_volumes are included in this geometry unless always_include_building_footprints is set in GetFeatureTileRequest, in which case the client should decide which (extruded areas or modeled volumes) should be used (they should not be rendered together).

        :return: The extruded_areas of this Geometry.
        :rtype: List[ExtrudedArea]
        """
        return self._extruded_areas

    @extruded_areas.setter
    def extruded_areas(self, extruded_areas):
        """Sets the extruded_areas of this Geometry.

        The extruded areas present in this geometry. Not populated if modeled_volumes are included in this geometry unless always_include_building_footprints is set in GetFeatureTileRequest, in which case the client should decide which (extruded areas or modeled volumes) should be used (they should not be rendered together).

        :param extruded_areas: The extruded_areas of this Geometry.
        :type extruded_areas: List[ExtrudedArea]
        """

        self._extruded_areas = extruded_areas

    @property
    def lines(self):
        """Gets the lines of this Geometry.

        The lines present in this geometry.

        :return: The lines of this Geometry.
        :rtype: List[Line]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this Geometry.

        The lines present in this geometry.

        :param lines: The lines of this Geometry.
        :type lines: List[Line]
        """

        self._lines = lines

    @property
    def modeled_volumes(self):
        """Gets the modeled_volumes of this Geometry.

        The modeled volumes present in this geometry. Not populated unless enable_modeled_volumes has been set in GetFeatureTileRequest.

        :return: The modeled_volumes of this Geometry.
        :rtype: List[ModeledVolume]
        """
        return self._modeled_volumes

    @modeled_volumes.setter
    def modeled_volumes(self, modeled_volumes):
        """Sets the modeled_volumes of this Geometry.

        The modeled volumes present in this geometry. Not populated unless enable_modeled_volumes has been set in GetFeatureTileRequest.

        :param modeled_volumes: The modeled_volumes of this Geometry.
        :type modeled_volumes: List[ModeledVolume]
        """

        self._modeled_volumes = modeled_volumes
