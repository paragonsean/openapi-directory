# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basemap_z_order import BasemapZOrder
from openapi_server.models.vertex2_d_list import Vertex2DList
from openapi_server import util


class Area(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basemap_z_order: BasemapZOrder=None, has_external_edges: bool=None, internal_edges: List[int]=None, loop_breaks: List[int]=None, triangle_indices: List[int]=None, type: str=None, vertex_offsets: Vertex2DList=None, z_order: int=None):
        """Area - a model defined in OpenAPI

        :param basemap_z_order: The basemap_z_order of this Area.
        :param has_external_edges: The has_external_edges of this Area.
        :param internal_edges: The internal_edges of this Area.
        :param loop_breaks: The loop_breaks of this Area.
        :param triangle_indices: The triangle_indices of this Area.
        :param type: The type of this Area.
        :param vertex_offsets: The vertex_offsets of this Area.
        :param z_order: The z_order of this Area.
        """
        self.openapi_types = {
            'basemap_z_order': BasemapZOrder,
            'has_external_edges': bool,
            'internal_edges': List[int],
            'loop_breaks': List[int],
            'triangle_indices': List[int],
            'type': str,
            'vertex_offsets': Vertex2DList,
            'z_order': int
        }

        self.attribute_map = {
            'basemap_z_order': 'basemapZOrder',
            'has_external_edges': 'hasExternalEdges',
            'internal_edges': 'internalEdges',
            'loop_breaks': 'loopBreaks',
            'triangle_indices': 'triangleIndices',
            'type': 'type',
            'vertex_offsets': 'vertexOffsets',
            'z_order': 'zOrder'
        }

        self._basemap_z_order = basemap_z_order
        self._has_external_edges = has_external_edges
        self._internal_edges = internal_edges
        self._loop_breaks = loop_breaks
        self._triangle_indices = triangle_indices
        self._type = type
        self._vertex_offsets = vertex_offsets
        self._z_order = z_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Area':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Area of this Area.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basemap_z_order(self):
        """Gets the basemap_z_order of this Area.


        :return: The basemap_z_order of this Area.
        :rtype: BasemapZOrder
        """
        return self._basemap_z_order

    @basemap_z_order.setter
    def basemap_z_order(self, basemap_z_order):
        """Sets the basemap_z_order of this Area.


        :param basemap_z_order: The basemap_z_order of this Area.
        :type basemap_z_order: BasemapZOrder
        """

        self._basemap_z_order = basemap_z_order

    @property
    def has_external_edges(self):
        """Gets the has_external_edges of this Area.

        True if the polygon is not entirely internal to the feature that it belongs to: that is, some of the edges are bordering another feature.

        :return: The has_external_edges of this Area.
        :rtype: bool
        """
        return self._has_external_edges

    @has_external_edges.setter
    def has_external_edges(self, has_external_edges):
        """Sets the has_external_edges of this Area.

        True if the polygon is not entirely internal to the feature that it belongs to: that is, some of the edges are bordering another feature.

        :param has_external_edges: The has_external_edges of this Area.
        :type has_external_edges: bool
        """

        self._has_external_edges = has_external_edges

    @property
    def internal_edges(self):
        """Gets the internal_edges of this Area.

        When has_external_edges is true, the polygon has some edges that border another feature. This field indicates the internal edges that do not border another feature. Each value is an index into the vertices array, and denotes the start vertex of the internal edge (the next vertex in the boundary loop is the end of the edge). If the selected vertex is the last vertex in the boundary loop, then the edge between that vertex and the starting vertex of the loop is internal. This field may be used for styling. For example, building parapets could be placed only on the external edges of a building polygon, or water could be lighter colored near the external edges of a body of water. If has_external_edges is false, all edges are internal and this field will be empty.

        :return: The internal_edges of this Area.
        :rtype: List[int]
        """
        return self._internal_edges

    @internal_edges.setter
    def internal_edges(self, internal_edges):
        """Sets the internal_edges of this Area.

        When has_external_edges is true, the polygon has some edges that border another feature. This field indicates the internal edges that do not border another feature. Each value is an index into the vertices array, and denotes the start vertex of the internal edge (the next vertex in the boundary loop is the end of the edge). If the selected vertex is the last vertex in the boundary loop, then the edge between that vertex and the starting vertex of the loop is internal. This field may be used for styling. For example, building parapets could be placed only on the external edges of a building polygon, or water could be lighter colored near the external edges of a body of water. If has_external_edges is false, all edges are internal and this field will be empty.

        :param internal_edges: The internal_edges of this Area.
        :type internal_edges: List[int]
        """

        self._internal_edges = internal_edges

    @property
    def loop_breaks(self):
        """Gets the loop_breaks of this Area.

        Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each value is an index into the vertices array indicating the beginning of a loop. For instance, values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end. This may be used in conjunction with the internal_edges field for styling polygon boundaries. Note that an edge may be on a polygon boundary but still internal to the feature. For example, a feature split across multiple tiles will have an internal polygon boundary edge along the edge of the tile.

        :return: The loop_breaks of this Area.
        :rtype: List[int]
        """
        return self._loop_breaks

    @loop_breaks.setter
    def loop_breaks(self, loop_breaks):
        """Sets the loop_breaks of this Area.

        Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each value is an index into the vertices array indicating the beginning of a loop. For instance, values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end. This may be used in conjunction with the internal_edges field for styling polygon boundaries. Note that an edge may be on a polygon boundary but still internal to the feature. For example, a feature split across multiple tiles will have an internal polygon boundary edge along the edge of the tile.

        :param loop_breaks: The loop_breaks of this Area.
        :type loop_breaks: List[int]
        """

        self._loop_breaks = loop_breaks

    @property
    def triangle_indices(self):
        """Gets the triangle_indices of this Area.

        When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.

        :return: The triangle_indices of this Area.
        :rtype: List[int]
        """
        return self._triangle_indices

    @triangle_indices.setter
    def triangle_indices(self, triangle_indices):
        """Sets the triangle_indices of this Area.

        When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.

        :param triangle_indices: The triangle_indices of this Area.
        :type triangle_indices: List[int]
        """

        self._triangle_indices = triangle_indices

    @property
    def type(self):
        """Gets the type of this Area.

        The polygon encoding type used for this area.

        :return: The type of this Area.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Area.

        The polygon encoding type used for this area.

        :param type: The type of this Area.
        :type type: str
        """
        allowed_values = ["TRIANGLE_FAN", "INDEXED_TRIANGLES", "TRIANGLE_STRIP"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vertex_offsets(self):
        """Gets the vertex_offsets of this Area.


        :return: The vertex_offsets of this Area.
        :rtype: Vertex2DList
        """
        return self._vertex_offsets

    @vertex_offsets.setter
    def vertex_offsets(self, vertex_offsets):
        """Sets the vertex_offsets of this Area.


        :param vertex_offsets: The vertex_offsets of this Area.
        :type vertex_offsets: Vertex2DList
        """

        self._vertex_offsets = vertex_offsets

    @property
    def z_order(self):
        """Gets the z_order of this Area.

        The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a higher z-order. This z-ordering does not imply anything about the altitude of the line relative to the ground, but it can be used to prevent z-fighting during rendering on the client. This z-ordering can only be used to compare areas, and cannot be compared with the z_order field in the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.

        :return: The z_order of this Area.
        :rtype: int
        """
        return self._z_order

    @z_order.setter
    def z_order(self, z_order):
        """Sets the z_order of this Area.

        The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a higher z-order. This z-ordering does not imply anything about the altitude of the line relative to the ground, but it can be used to prevent z-fighting during rendering on the client. This z-ordering can only be used to compare areas, and cannot be compared with the z_order field in the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.

        :param z_order: The z_order of this Area.
        :type z_order: int
        """

        self._z_order = z_order
