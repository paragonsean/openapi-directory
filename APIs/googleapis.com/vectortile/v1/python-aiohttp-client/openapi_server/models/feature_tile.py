# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature import Feature
from openapi_server.models.provider_info import ProviderInfo
from openapi_server.models.tile_coordinates import TileCoordinates
from openapi_server import util


class FeatureTile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: TileCoordinates=None, features: List[Feature]=None, name: str=None, providers: List[ProviderInfo]=None, status: str=None, version_id: str=None):
        """FeatureTile - a model defined in OpenAPI

        :param coordinates: The coordinates of this FeatureTile.
        :param features: The features of this FeatureTile.
        :param name: The name of this FeatureTile.
        :param providers: The providers of this FeatureTile.
        :param status: The status of this FeatureTile.
        :param version_id: The version_id of this FeatureTile.
        """
        self.openapi_types = {
            'coordinates': TileCoordinates,
            'features': List[Feature],
            'name': str,
            'providers': List[ProviderInfo],
            'status': str,
            'version_id': str
        }

        self.attribute_map = {
            'coordinates': 'coordinates',
            'features': 'features',
            'name': 'name',
            'providers': 'providers',
            'status': 'status',
            'version_id': 'versionId'
        }

        self._coordinates = coordinates
        self._features = features
        self._name = name
        self._providers = providers
        self._status = status
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureTile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureTile of this FeatureTile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this FeatureTile.


        :return: The coordinates of this FeatureTile.
        :rtype: TileCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this FeatureTile.


        :param coordinates: The coordinates of this FeatureTile.
        :type coordinates: TileCoordinates
        """

        self._coordinates = coordinates

    @property
    def features(self):
        """Gets the features of this FeatureTile.

        Features present on this map tile.

        :return: The features of this FeatureTile.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this FeatureTile.

        Features present on this map tile.

        :param features: The features of this FeatureTile.
        :type features: List[Feature]
        """

        self._features = features

    @property
    def name(self):
        """Gets the name of this FeatureTile.

        Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `tiles/@1,2,3z`.

        :return: The name of this FeatureTile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureTile.

        Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `tiles/@1,2,3z`.

        :param name: The name of this FeatureTile.
        :type name: str
        """

        self._name = name

    @property
    def providers(self):
        """Gets the providers of this FeatureTile.

        Data providers for the data contained in this tile.

        :return: The providers of this FeatureTile.
        :rtype: List[ProviderInfo]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this FeatureTile.

        Data providers for the data contained in this tile.

        :param providers: The providers of this FeatureTile.
        :type providers: List[ProviderInfo]
        """

        self._providers = providers

    @property
    def status(self):
        """Gets the status of this FeatureTile.

        Tile response status code to support tile caching.

        :return: The status of this FeatureTile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeatureTile.

        Tile response status code to support tile caching.

        :param status: The status of this FeatureTile.
        :type status: str
        """
        allowed_values = ["STATUS_OK", "STATUS_OK_DATA_UNCHANGED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version_id(self):
        """Gets the version_id of this FeatureTile.

        An opaque value, usually less than 30 characters, that contains version info about this tile and the data that was used to generate it. The client should store this value in its tile cache and pass it back to the API in the client_tile_version_id field of subsequent tile requests in order to enable the API to detect when the new tile would be the same as the one the client already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.

        :return: The version_id of this FeatureTile.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this FeatureTile.

        An opaque value, usually less than 30 characters, that contains version info about this tile and the data that was used to generate it. The client should store this value in its tile cache and pass it back to the API in the client_tile_version_id field of subsequent tile requests in order to enable the API to detect when the new tile would be the same as the one the client already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.

        :param version_id: The version_id of this FeatureTile.
        :type version_id: str
        """

        self._version_id = version_id
