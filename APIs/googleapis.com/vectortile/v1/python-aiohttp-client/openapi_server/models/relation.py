# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, related_feature_index: int=None, relation_type: str=None):
        """Relation - a model defined in OpenAPI

        :param related_feature_index: The related_feature_index of this Relation.
        :param relation_type: The relation_type of this Relation.
        """
        self.openapi_types = {
            'related_feature_index': int,
            'relation_type': str
        }

        self.attribute_map = {
            'related_feature_index': 'relatedFeatureIndex',
            'relation_type': 'relationType'
        }

        self._related_feature_index = related_feature_index
        self._relation_type = relation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relation of this Relation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def related_feature_index(self):
        """Gets the related_feature_index of this Relation.

        Zero-based index to look up the related feature from the list of features in the tile.

        :return: The related_feature_index of this Relation.
        :rtype: int
        """
        return self._related_feature_index

    @related_feature_index.setter
    def related_feature_index(self, related_feature_index):
        """Sets the related_feature_index of this Relation.

        Zero-based index to look up the related feature from the list of features in the tile.

        :param related_feature_index: The related_feature_index of this Relation.
        :type related_feature_index: int
        """

        self._related_feature_index = related_feature_index

    @property
    def relation_type(self):
        """Gets the relation_type of this Relation.

        Relation type between the origin feature to the related feature.

        :return: The relation_type of this Relation.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this Relation.

        Relation type between the origin feature to the related feature.

        :param relation_type: The relation_type of this Relation.
        :type relation_type: str
        """
        allowed_values = ["RELATION_TYPE_UNSPECIFIED", "OCCUPIES", "PRIMARILY_OCCUPIED_BY"]  # noqa: E501
        if relation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type
