# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.triangle_strip import TriangleStrip
from openapi_server.models.vertex3_d_list import Vertex3DList
from openapi_server import util


class ModeledVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, strips: List[TriangleStrip]=None, vertex_offsets: Vertex3DList=None):
        """ModeledVolume - a model defined in OpenAPI

        :param strips: The strips of this ModeledVolume.
        :param vertex_offsets: The vertex_offsets of this ModeledVolume.
        """
        self.openapi_types = {
            'strips': List[TriangleStrip],
            'vertex_offsets': Vertex3DList
        }

        self.attribute_map = {
            'strips': 'strips',
            'vertex_offsets': 'vertexOffsets'
        }

        self._strips = strips
        self._vertex_offsets = vertex_offsets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModeledVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModeledVolume of this ModeledVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def strips(self):
        """Gets the strips of this ModeledVolume.

        The triangle strips present in this mesh.

        :return: The strips of this ModeledVolume.
        :rtype: List[TriangleStrip]
        """
        return self._strips

    @strips.setter
    def strips(self, strips):
        """Sets the strips of this ModeledVolume.

        The triangle strips present in this mesh.

        :param strips: The strips of this ModeledVolume.
        :type strips: List[TriangleStrip]
        """

        self._strips = strips

    @property
    def vertex_offsets(self):
        """Gets the vertex_offsets of this ModeledVolume.


        :return: The vertex_offsets of this ModeledVolume.
        :rtype: Vertex3DList
        """
        return self._vertex_offsets

    @vertex_offsets.setter
    def vertex_offsets(self, vertex_offsets):
        """Sets the vertex_offsets of this ModeledVolume.


        :param vertex_offsets: The vertex_offsets of this ModeledVolume.
        :type vertex_offsets: Vertex3DList
        """

        self._vertex_offsets = vertex_offsets
