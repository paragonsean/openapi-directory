# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry import Geometry
from openapi_server.models.relation import Relation
from openapi_server.models.segment_info import SegmentInfo
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, geometry: Geometry=None, place_id: str=None, relations: List[Relation]=None, segment_info: SegmentInfo=None, type: str=None):
        """Feature - a model defined in OpenAPI

        :param display_name: The display_name of this Feature.
        :param geometry: The geometry of this Feature.
        :param place_id: The place_id of this Feature.
        :param relations: The relations of this Feature.
        :param segment_info: The segment_info of this Feature.
        :param type: The type of this Feature.
        """
        self.openapi_types = {
            'display_name': str,
            'geometry': Geometry,
            'place_id': str,
            'relations': List[Relation],
            'segment_info': SegmentInfo,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'geometry': 'geometry',
            'place_id': 'placeId',
            'relations': 'relations',
            'segment_info': 'segmentInfo',
            'type': 'type'
        }

        self._display_name = display_name
        self._geometry = geometry
        self._place_id = place_id
        self._relations = relations
        self._segment_info = segment_info
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this Feature.

        The localized name of this feature. Currently only returned for roads.

        :return: The display_name of this Feature.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Feature.

        The localized name of this feature. Currently only returned for roads.

        :param display_name: The display_name of this Feature.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def geometry(self):
        """Gets the geometry of this Feature.


        :return: The geometry of this Feature.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Feature.


        :param geometry: The geometry of this Feature.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def place_id(self):
        """Gets the place_id of this Feature.

        Place ID of this feature, suitable for use in Places API details requests.

        :return: The place_id of this Feature.
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this Feature.

        Place ID of this feature, suitable for use in Places API details requests.

        :param place_id: The place_id of this Feature.
        :type place_id: str
        """

        self._place_id = place_id

    @property
    def relations(self):
        """Gets the relations of this Feature.

        Relations to other features.

        :return: The relations of this Feature.
        :rtype: List[Relation]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Feature.

        Relations to other features.

        :param relations: The relations of this Feature.
        :type relations: List[Relation]
        """

        self._relations = relations

    @property
    def segment_info(self):
        """Gets the segment_info of this Feature.


        :return: The segment_info of this Feature.
        :rtype: SegmentInfo
        """
        return self._segment_info

    @segment_info.setter
    def segment_info(self, segment_info):
        """Sets the segment_info of this Feature.


        :param segment_info: The segment_info of this Feature.
        :type segment_info: SegmentInfo
        """

        self._segment_info = segment_info

    @property
    def type(self):
        """Gets the type of this Feature.

        The type of this feature.

        :return: The type of this Feature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Feature.

        The type of this feature.

        :param type: The type of this Feature.
        :type type: str
        """
        allowed_values = ["FEATURE_TYPE_UNSPECIFIED", "STRUCTURE", "BAR", "BANK", "LODGING", "CAFE", "RESTAURANT", "EVENT_VENUE", "TOURIST_DESTINATION", "SHOPPING", "SCHOOL", "SEGMENT", "ROAD", "LOCAL_ROAD", "ARTERIAL_ROAD", "HIGHWAY", "CONTROLLED_ACCESS_HIGHWAY", "FOOTPATH", "RAIL", "FERRY", "REGION", "PARK", "BEACH", "FOREST", "POLITICAL", "ADMINISTRATIVE_AREA1", "LOCALITY", "SUBLOCALITY", "WATER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
