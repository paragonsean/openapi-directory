# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.row import Row
from openapi_server import util


class FirstDerivativeElevationGrid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude_multiplier: float=None, rows: List[Row]=None):
        """FirstDerivativeElevationGrid - a model defined in OpenAPI

        :param altitude_multiplier: The altitude_multiplier of this FirstDerivativeElevationGrid.
        :param rows: The rows of this FirstDerivativeElevationGrid.
        """
        self.openapi_types = {
            'altitude_multiplier': float,
            'rows': List[Row]
        }

        self.attribute_map = {
            'altitude_multiplier': 'altitudeMultiplier',
            'rows': 'rows'
        }

        self._altitude_multiplier = altitude_multiplier
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirstDerivativeElevationGrid':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirstDerivativeElevationGrid of this FirstDerivativeElevationGrid.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude_multiplier(self):
        """Gets the altitude_multiplier of this FirstDerivativeElevationGrid.

        A multiplier applied to the altitude fields below to extract the actual altitudes in meters from the elevation grid.

        :return: The altitude_multiplier of this FirstDerivativeElevationGrid.
        :rtype: float
        """
        return self._altitude_multiplier

    @altitude_multiplier.setter
    def altitude_multiplier(self, altitude_multiplier):
        """Sets the altitude_multiplier of this FirstDerivativeElevationGrid.

        A multiplier applied to the altitude fields below to extract the actual altitudes in meters from the elevation grid.

        :param altitude_multiplier: The altitude_multiplier of this FirstDerivativeElevationGrid.
        :type altitude_multiplier: float
        """

        self._altitude_multiplier = altitude_multiplier

    @property
    def rows(self):
        """Gets the rows of this FirstDerivativeElevationGrid.

        Rows of points containing altitude data making up the elevation grid. Each row is the same length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n] is the south-most row.

        :return: The rows of this FirstDerivativeElevationGrid.
        :rtype: List[Row]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this FirstDerivativeElevationGrid.

        Rows of points containing altitude data making up the elevation grid. Each row is the same length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n] is the south-most row.

        :param rows: The rows of this FirstDerivativeElevationGrid.
        :type rows: List[Row]
        """

        self._rows = rows
