/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BasemapZOrder;
import org.openapitools.client.model.Vertex2DList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a 2D polyline. Used to represent segments such as roads, train tracks, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:42.618245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Line {
  public static final String SERIALIZED_NAME_BASEMAP_Z_ORDER = "basemapZOrder";
  @SerializedName(SERIALIZED_NAME_BASEMAP_Z_ORDER)
  private BasemapZOrder basemapZOrder;

  public static final String SERIALIZED_NAME_VERTEX_OFFSETS = "vertexOffsets";
  @SerializedName(SERIALIZED_NAME_VERTEX_OFFSETS)
  private Vertex2DList vertexOffsets;

  public static final String SERIALIZED_NAME_Z_ORDER = "zOrder";
  @SerializedName(SERIALIZED_NAME_Z_ORDER)
  private Integer zOrder;

  public Line() {
  }

  public Line basemapZOrder(BasemapZOrder basemapZOrder) {
    this.basemapZOrder = basemapZOrder;
    return this;
  }

  /**
   * Get basemapZOrder
   * @return basemapZOrder
   */
  @javax.annotation.Nullable
  public BasemapZOrder getBasemapZOrder() {
    return basemapZOrder;
  }

  public void setBasemapZOrder(BasemapZOrder basemapZOrder) {
    this.basemapZOrder = basemapZOrder;
  }


  public Line vertexOffsets(Vertex2DList vertexOffsets) {
    this.vertexOffsets = vertexOffsets;
    return this;
  }

  /**
   * Get vertexOffsets
   * @return vertexOffsets
   */
  @javax.annotation.Nullable
  public Vertex2DList getVertexOffsets() {
    return vertexOffsets;
  }

  public void setVertexOffsets(Vertex2DList vertexOffsets) {
    this.vertexOffsets = vertexOffsets;
  }


  public Line zOrder(Integer zOrder) {
    this.zOrder = zOrder;
    return this;
  }

  /**
   * The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a higher z-order. This z-ordering does not imply anything about the altitude of the area relative to the ground, but it can be used to prevent z-fighting during rendering on the client. In general, larger and more important road features will have a higher z-order line associated with them. This z-ordering can only be used to compare lines, and cannot be compared with the z_order field in the Area message. The z-order may be negative or zero. Prefer Line.basemap_z_order.
   * @return zOrder
   */
  @javax.annotation.Nullable
  public Integer getzOrder() {
    return zOrder;
  }

  public void setzOrder(Integer zOrder) {
    this.zOrder = zOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Line line = (Line) o;
    return Objects.equals(this.basemapZOrder, line.basemapZOrder) &&
        Objects.equals(this.vertexOffsets, line.vertexOffsets) &&
        Objects.equals(this.zOrder, line.zOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basemapZOrder, vertexOffsets, zOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Line {\n");
    sb.append("    basemapZOrder: ").append(toIndentedString(basemapZOrder)).append("\n");
    sb.append("    vertexOffsets: ").append(toIndentedString(vertexOffsets)).append("\n");
    sb.append("    zOrder: ").append(toIndentedString(zOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basemapZOrder");
    openapiFields.add("vertexOffsets");
    openapiFields.add("zOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Line
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Line.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Line is not found in the empty JSON string", Line.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Line.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Line` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basemapZOrder`
      if (jsonObj.get("basemapZOrder") != null && !jsonObj.get("basemapZOrder").isJsonNull()) {
        BasemapZOrder.validateJsonElement(jsonObj.get("basemapZOrder"));
      }
      // validate the optional field `vertexOffsets`
      if (jsonObj.get("vertexOffsets") != null && !jsonObj.get("vertexOffsets").isJsonNull()) {
        Vertex2DList.validateJsonElement(jsonObj.get("vertexOffsets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Line.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Line' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Line> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Line.class));

       return (TypeAdapter<T>) new TypeAdapter<Line>() {
           @Override
           public void write(JsonWriter out, Line value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Line read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Line given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Line
   * @throws IOException if the JSON string is invalid with respect to Line
   */
  public static Line fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Line.class);
  }

  /**
   * Convert an instance of Line to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

