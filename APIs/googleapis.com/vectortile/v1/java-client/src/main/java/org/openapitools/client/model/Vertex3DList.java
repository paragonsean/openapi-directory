/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 3D vertex list used for modeled volumes. Each entry represents an offset from the previous one in local tile coordinates. The first coordinate is offset from (0, 0, 0).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:42.618245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vertex3DList {
  public static final String SERIALIZED_NAME_X_OFFSETS = "xOffsets";
  @SerializedName(SERIALIZED_NAME_X_OFFSETS)
  private List<Integer> xOffsets = new ArrayList<>();

  public static final String SERIALIZED_NAME_Y_OFFSETS = "yOffsets";
  @SerializedName(SERIALIZED_NAME_Y_OFFSETS)
  private List<Integer> yOffsets = new ArrayList<>();

  public static final String SERIALIZED_NAME_Z_OFFSETS = "zOffsets";
  @SerializedName(SERIALIZED_NAME_Z_OFFSETS)
  private List<Integer> zOffsets = new ArrayList<>();

  public Vertex3DList() {
  }

  public Vertex3DList xOffsets(List<Integer> xOffsets) {
    this.xOffsets = xOffsets;
    return this;
  }

  public Vertex3DList addXOffsetsItem(Integer xOffsetsItem) {
    if (this.xOffsets == null) {
      this.xOffsets = new ArrayList<>();
    }
    this.xOffsets.add(xOffsetsItem);
    return this;
  }

  /**
   * List of x-offsets in local tile coordinates.
   * @return xOffsets
   */
  @javax.annotation.Nullable
  public List<Integer> getxOffsets() {
    return xOffsets;
  }

  public void setxOffsets(List<Integer> xOffsets) {
    this.xOffsets = xOffsets;
  }


  public Vertex3DList yOffsets(List<Integer> yOffsets) {
    this.yOffsets = yOffsets;
    return this;
  }

  public Vertex3DList addYOffsetsItem(Integer yOffsetsItem) {
    if (this.yOffsets == null) {
      this.yOffsets = new ArrayList<>();
    }
    this.yOffsets.add(yOffsetsItem);
    return this;
  }

  /**
   * List of y-offsets in local tile coordinates.
   * @return yOffsets
   */
  @javax.annotation.Nullable
  public List<Integer> getyOffsets() {
    return yOffsets;
  }

  public void setyOffsets(List<Integer> yOffsets) {
    this.yOffsets = yOffsets;
  }


  public Vertex3DList zOffsets(List<Integer> zOffsets) {
    this.zOffsets = zOffsets;
    return this;
  }

  public Vertex3DList addZOffsetsItem(Integer zOffsetsItem) {
    if (this.zOffsets == null) {
      this.zOffsets = new ArrayList<>();
    }
    this.zOffsets.add(zOffsetsItem);
    return this;
  }

  /**
   * List of z-offsets in local tile coordinates.
   * @return zOffsets
   */
  @javax.annotation.Nullable
  public List<Integer> getzOffsets() {
    return zOffsets;
  }

  public void setzOffsets(List<Integer> zOffsets) {
    this.zOffsets = zOffsets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vertex3DList vertex3DList = (Vertex3DList) o;
    return Objects.equals(this.xOffsets, vertex3DList.xOffsets) &&
        Objects.equals(this.yOffsets, vertex3DList.yOffsets) &&
        Objects.equals(this.zOffsets, vertex3DList.zOffsets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(xOffsets, yOffsets, zOffsets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vertex3DList {\n");
    sb.append("    xOffsets: ").append(toIndentedString(xOffsets)).append("\n");
    sb.append("    yOffsets: ").append(toIndentedString(yOffsets)).append("\n");
    sb.append("    zOffsets: ").append(toIndentedString(zOffsets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("xOffsets");
    openapiFields.add("yOffsets");
    openapiFields.add("zOffsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vertex3DList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vertex3DList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vertex3DList is not found in the empty JSON string", Vertex3DList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vertex3DList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vertex3DList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("xOffsets") != null && !jsonObj.get("xOffsets").isJsonNull() && !jsonObj.get("xOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `xOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("xOffsets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("yOffsets") != null && !jsonObj.get("yOffsets").isJsonNull() && !jsonObj.get("yOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `yOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("yOffsets").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zOffsets") != null && !jsonObj.get("zOffsets").isJsonNull() && !jsonObj.get("zOffsets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zOffsets` to be an array in the JSON string but got `%s`", jsonObj.get("zOffsets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vertex3DList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vertex3DList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vertex3DList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vertex3DList.class));

       return (TypeAdapter<T>) new TypeAdapter<Vertex3DList>() {
           @Override
           public void write(JsonWriter out, Vertex3DList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vertex3DList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vertex3DList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vertex3DList
   * @throws IOException if the JSON string is invalid with respect to Vertex3DList
   */
  public static Vertex3DList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vertex3DList.class);
  }

  /**
   * Convert an instance of Vertex3DList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

