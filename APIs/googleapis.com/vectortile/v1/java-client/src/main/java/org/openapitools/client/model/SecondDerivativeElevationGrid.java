/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each point within the grid represents the altitude in meters above average sea level at that location within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+ | | | N | | ^ | | | | | W &lt;-----&gt; E | | | | | v | | S | | | +-----------------+ rows[n].a[0] rows[n].a[m] Rather than storing the altitudes directly, we store the diffs of the diffs between them as integers at some requested level of precision to take advantage of integer packing. Note that the data is packed in such a way that is fast to decode in Unity and that further optimizes wire size.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:42.618245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecondDerivativeElevationGrid {
  public static final String SERIALIZED_NAME_ALTITUDE_MULTIPLIER = "altitudeMultiplier";
  @SerializedName(SERIALIZED_NAME_ALTITUDE_MULTIPLIER)
  private Float altitudeMultiplier;

  public static final String SERIALIZED_NAME_COLUMN_COUNT = "columnCount";
  @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
  private Integer columnCount;

  public static final String SERIALIZED_NAME_ENCODED_DATA = "encodedData";
  @SerializedName(SERIALIZED_NAME_ENCODED_DATA)
  private byte[] encodedData;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public SecondDerivativeElevationGrid() {
  }

  public SecondDerivativeElevationGrid altitudeMultiplier(Float altitudeMultiplier) {
    this.altitudeMultiplier = altitudeMultiplier;
    return this;
  }

  /**
   * A multiplier applied to the elements in the encoded data to extract the actual altitudes in meters.
   * @return altitudeMultiplier
   */
  @javax.annotation.Nullable
  public Float getAltitudeMultiplier() {
    return altitudeMultiplier;
  }

  public void setAltitudeMultiplier(Float altitudeMultiplier) {
    this.altitudeMultiplier = altitudeMultiplier;
  }


  public SecondDerivativeElevationGrid columnCount(Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * The number of columns included in the encoded elevation data (i.e. the horizontal resolution of the grid).
   * @return columnCount
   */
  @javax.annotation.Nullable
  public Integer getColumnCount() {
    return columnCount;
  }

  public void setColumnCount(Integer columnCount) {
    this.columnCount = columnCount;
  }


  public SecondDerivativeElevationGrid encodedData(byte[] encodedData) {
    this.encodedData = encodedData;
    return this;
  }

  /**
   * A stream of elements each representing a point on the tile running across each row from left to right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution elements in the stream. The elements are not the heights, rather the second order derivative of the values one would expect in a stream of height data. Each element is a varint with the following encoding: ------------------------------------------------------------------------| | Head Nibble | ------------------------------------------------------------------------| | Bit 0 | Bit 1 | Bits 2-3 | | Terminator| Sign (1&#x3D;neg) | Least significant 2 bits of absolute error | ------------------------------------------------------------------------| | Tail Nibble #1 | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------| | ... | Tail Nibble #n | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------|
   * @return encodedData
   */
  @javax.annotation.Nullable
  public byte[] getEncodedData() {
    return encodedData;
  }

  public void setEncodedData(byte[] encodedData) {
    this.encodedData = encodedData;
  }


  public SecondDerivativeElevationGrid rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * The number of rows included in the encoded elevation data (i.e. the vertical resolution of the grid).
   * @return rowCount
   */
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecondDerivativeElevationGrid secondDerivativeElevationGrid = (SecondDerivativeElevationGrid) o;
    return Objects.equals(this.altitudeMultiplier, secondDerivativeElevationGrid.altitudeMultiplier) &&
        Objects.equals(this.columnCount, secondDerivativeElevationGrid.columnCount) &&
        Arrays.equals(this.encodedData, secondDerivativeElevationGrid.encodedData) &&
        Objects.equals(this.rowCount, secondDerivativeElevationGrid.rowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altitudeMultiplier, columnCount, Arrays.hashCode(encodedData), rowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecondDerivativeElevationGrid {\n");
    sb.append("    altitudeMultiplier: ").append(toIndentedString(altitudeMultiplier)).append("\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    encodedData: ").append(toIndentedString(encodedData)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("altitudeMultiplier");
    openapiFields.add("columnCount");
    openapiFields.add("encodedData");
    openapiFields.add("rowCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecondDerivativeElevationGrid
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecondDerivativeElevationGrid.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecondDerivativeElevationGrid is not found in the empty JSON string", SecondDerivativeElevationGrid.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecondDerivativeElevationGrid.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecondDerivativeElevationGrid` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecondDerivativeElevationGrid.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecondDerivativeElevationGrid' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecondDerivativeElevationGrid> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecondDerivativeElevationGrid.class));

       return (TypeAdapter<T>) new TypeAdapter<SecondDerivativeElevationGrid>() {
           @Override
           public void write(JsonWriter out, SecondDerivativeElevationGrid value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecondDerivativeElevationGrid read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecondDerivativeElevationGrid given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecondDerivativeElevationGrid
   * @throws IOException if the JSON string is invalid with respect to SecondDerivativeElevationGrid
   */
  public static SecondDerivativeElevationGrid fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecondDerivativeElevationGrid.class);
  }

  /**
   * Convert an instance of SecondDerivativeElevationGrid to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

