/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FirstDerivativeElevationGrid;
import org.openapitools.client.model.SecondDerivativeElevationGrid;
import org.openapitools.client.model.TileCoordinates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A tile containing information about the terrain located in the region it covers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:42.618245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerrainTile {
  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private TileCoordinates coordinates;

  public static final String SERIALIZED_NAME_FIRST_DERIVATIVE = "firstDerivative";
  @SerializedName(SERIALIZED_NAME_FIRST_DERIVATIVE)
  private FirstDerivativeElevationGrid firstDerivative;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SECOND_DERIVATIVE = "secondDerivative";
  @SerializedName(SERIALIZED_NAME_SECOND_DERIVATIVE)
  private SecondDerivativeElevationGrid secondDerivative;

  public TerrainTile() {
  }

  public TerrainTile coordinates(TileCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public TileCoordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(TileCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  public TerrainTile firstDerivative(FirstDerivativeElevationGrid firstDerivative) {
    this.firstDerivative = firstDerivative;
    return this;
  }

  /**
   * Get firstDerivative
   * @return firstDerivative
   */
  @javax.annotation.Nullable
  public FirstDerivativeElevationGrid getFirstDerivative() {
    return firstDerivative;
  }

  public void setFirstDerivative(FirstDerivativeElevationGrid firstDerivative) {
    this.firstDerivative = firstDerivative;
  }


  public TerrainTile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name of the tile. The tile resource name is prefixed by its collection ID &#x60;terrain/&#x60; followed by the resource ID, which encodes the tile&#39;s global x and y coordinates and zoom level as &#x60;@,,z&#x60;. For example, &#x60;terrain/@1,2,3z&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TerrainTile secondDerivative(SecondDerivativeElevationGrid secondDerivative) {
    this.secondDerivative = secondDerivative;
    return this;
  }

  /**
   * Get secondDerivative
   * @return secondDerivative
   */
  @javax.annotation.Nullable
  public SecondDerivativeElevationGrid getSecondDerivative() {
    return secondDerivative;
  }

  public void setSecondDerivative(SecondDerivativeElevationGrid secondDerivative) {
    this.secondDerivative = secondDerivative;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerrainTile terrainTile = (TerrainTile) o;
    return Objects.equals(this.coordinates, terrainTile.coordinates) &&
        Objects.equals(this.firstDerivative, terrainTile.firstDerivative) &&
        Objects.equals(this.name, terrainTile.name) &&
        Objects.equals(this.secondDerivative, terrainTile.secondDerivative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coordinates, firstDerivative, name, secondDerivative);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerrainTile {\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    firstDerivative: ").append(toIndentedString(firstDerivative)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    secondDerivative: ").append(toIndentedString(secondDerivative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coordinates");
    openapiFields.add("firstDerivative");
    openapiFields.add("name");
    openapiFields.add("secondDerivative");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerrainTile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerrainTile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerrainTile is not found in the empty JSON string", TerrainTile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerrainTile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerrainTile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `coordinates`
      if (jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) {
        TileCoordinates.validateJsonElement(jsonObj.get("coordinates"));
      }
      // validate the optional field `firstDerivative`
      if (jsonObj.get("firstDerivative") != null && !jsonObj.get("firstDerivative").isJsonNull()) {
        FirstDerivativeElevationGrid.validateJsonElement(jsonObj.get("firstDerivative"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `secondDerivative`
      if (jsonObj.get("secondDerivative") != null && !jsonObj.get("secondDerivative").isJsonNull()) {
        SecondDerivativeElevationGrid.validateJsonElement(jsonObj.get("secondDerivative"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerrainTile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerrainTile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerrainTile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerrainTile.class));

       return (TypeAdapter<T>) new TypeAdapter<TerrainTile>() {
           @Override
           public void write(JsonWriter out, TerrainTile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerrainTile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerrainTile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerrainTile
   * @throws IOException if the JSON string is invalid with respect to TerrainTile
   */
  public static TerrainTile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerrainTile.class);
  }

  /**
   * Convert an instance of TerrainTile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

