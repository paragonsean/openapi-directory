/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata necessary to determine the ordering of a particular basemap element relative to others. To render the basemap correctly, sort by z-plane, then z-grade, then z-within-grade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:42.618245-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasemapZOrder {
  public static final String SERIALIZED_NAME_Z_GRADE = "zGrade";
  @SerializedName(SERIALIZED_NAME_Z_GRADE)
  private Integer zGrade;

  public static final String SERIALIZED_NAME_Z_PLANE = "zPlane";
  @SerializedName(SERIALIZED_NAME_Z_PLANE)
  private Integer zPlane;

  public static final String SERIALIZED_NAME_Z_WITHIN_GRADE = "zWithinGrade";
  @SerializedName(SERIALIZED_NAME_Z_WITHIN_GRADE)
  private Integer zWithinGrade;

  public BasemapZOrder() {
  }

  public BasemapZOrder zGrade(Integer zGrade) {
    this.zGrade = zGrade;
    return this;
  }

  /**
   * The second most significant component of the ordering of a component to be rendered onto the basemap.
   * @return zGrade
   */
  @javax.annotation.Nullable
  public Integer getzGrade() {
    return zGrade;
  }

  public void setzGrade(Integer zGrade) {
    this.zGrade = zGrade;
  }


  public BasemapZOrder zPlane(Integer zPlane) {
    this.zPlane = zPlane;
    return this;
  }

  /**
   * The most significant component of the ordering of a component to be rendered onto the basemap.
   * @return zPlane
   */
  @javax.annotation.Nullable
  public Integer getzPlane() {
    return zPlane;
  }

  public void setzPlane(Integer zPlane) {
    this.zPlane = zPlane;
  }


  public BasemapZOrder zWithinGrade(Integer zWithinGrade) {
    this.zWithinGrade = zWithinGrade;
    return this;
  }

  /**
   * The least significant component of the ordering of a component to be rendered onto the basemap.
   * @return zWithinGrade
   */
  @javax.annotation.Nullable
  public Integer getzWithinGrade() {
    return zWithinGrade;
  }

  public void setzWithinGrade(Integer zWithinGrade) {
    this.zWithinGrade = zWithinGrade;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasemapZOrder basemapZOrder = (BasemapZOrder) o;
    return Objects.equals(this.zGrade, basemapZOrder.zGrade) &&
        Objects.equals(this.zPlane, basemapZOrder.zPlane) &&
        Objects.equals(this.zWithinGrade, basemapZOrder.zWithinGrade);
  }

  @Override
  public int hashCode() {
    return Objects.hash(zGrade, zPlane, zWithinGrade);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasemapZOrder {\n");
    sb.append("    zGrade: ").append(toIndentedString(zGrade)).append("\n");
    sb.append("    zPlane: ").append(toIndentedString(zPlane)).append("\n");
    sb.append("    zWithinGrade: ").append(toIndentedString(zWithinGrade)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("zGrade");
    openapiFields.add("zPlane");
    openapiFields.add("zWithinGrade");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasemapZOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasemapZOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasemapZOrder is not found in the empty JSON string", BasemapZOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasemapZOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasemapZOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasemapZOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasemapZOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasemapZOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasemapZOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<BasemapZOrder>() {
           @Override
           public void write(JsonWriter out, BasemapZOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasemapZOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasemapZOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasemapZOrder
   * @throws IOException if the JSON string is invalid with respect to BasemapZOrder
   */
  public static BasemapZOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasemapZOrder.class);
  }

  /**
   * Convert an instance of BasemapZOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

