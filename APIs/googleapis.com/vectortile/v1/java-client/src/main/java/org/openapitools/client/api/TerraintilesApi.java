/*
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TerrainTile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TerraintilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TerraintilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TerraintilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vectortileTerraintilesGet
     * @param name Required. Resource name of the tile. The tile resource name is prefixed by its collection ID &#x60;terraintiles/&#x60; followed by the resource ID, which encodes the tile&#39;s global x and y coordinates and zoom level as &#x60;@,,z&#x60;. For example, &#x60;terraintiles/@1,2,3z&#x60;. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param altitudePrecisionCentimeters The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision). (optional)
     * @param clientInfoApiClient API client name and version. For example, the SDK calling the API. The exact format is up to the client. (optional)
     * @param clientInfoApplicationId Application ID, such as the package name on Android and the bundle identifier on iOS platforms. (optional)
     * @param clientInfoApplicationVersion Application version number, such as \&quot;1.2.3\&quot;. The exact format is application-dependent. (optional)
     * @param clientInfoDeviceModel Device model as reported by the device. The exact format is platform-dependent. (optional)
     * @param clientInfoOperatingSystem Operating system name and version as reported by the OS. For example, \&quot;Mac OS X 10.10.4\&quot;. The exact format is platform-dependent. (optional)
     * @param clientInfoPlatform Platform where the application is running. (optional)
     * @param clientInfoUserId Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info). (optional)
     * @param maxElevationResolutionCells The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param minElevationResolutionCells  api-linter: core::0131::request-unknown-fields&#x3D;disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param terrainFormats Terrain formats that the client understands. (optional)
     * @param enableModeledVolumes Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible. (optional)
     * @param enablePoliticalFeatures Flag indicating whether political features should be returned. (optional)
     * @param enablePrivateRoads Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field. (optional)
     * @param enableUnclippedBuildings Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid. (optional)
     * @param languageCode Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. (optional)
     * @param regionCode Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \&quot;US\&quot; and \&quot;419\&quot;. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectortileTerraintilesGetCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer altitudePrecisionCentimeters, String clientInfoApiClient, String clientInfoApplicationId, String clientInfoApplicationVersion, String clientInfoDeviceModel, String clientInfoOperatingSystem, String clientInfoPlatform, String clientInfoUserId, Integer maxElevationResolutionCells, Integer minElevationResolutionCells, List<String> terrainFormats, Boolean enableModeledVolumes, Boolean enablePoliticalFeatures, Boolean enablePrivateRoads, Boolean enableUnclippedBuildings, String languageCode, String regionCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (altitudePrecisionCentimeters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("altitudePrecisionCentimeters", altitudePrecisionCentimeters));
        }

        if (clientInfoApiClient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.apiClient", clientInfoApiClient));
        }

        if (clientInfoApplicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.applicationId", clientInfoApplicationId));
        }

        if (clientInfoApplicationVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.applicationVersion", clientInfoApplicationVersion));
        }

        if (clientInfoDeviceModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.deviceModel", clientInfoDeviceModel));
        }

        if (clientInfoOperatingSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.operatingSystem", clientInfoOperatingSystem));
        }

        if (clientInfoPlatform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.platform", clientInfoPlatform));
        }

        if (clientInfoUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientInfo.userId", clientInfoUserId));
        }

        if (maxElevationResolutionCells != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxElevationResolutionCells", maxElevationResolutionCells));
        }

        if (minElevationResolutionCells != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minElevationResolutionCells", minElevationResolutionCells));
        }

        if (terrainFormats != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "terrainFormats", terrainFormats));
        }

        if (enableModeledVolumes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableModeledVolumes", enableModeledVolumes));
        }

        if (enablePoliticalFeatures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enablePoliticalFeatures", enablePoliticalFeatures));
        }

        if (enablePrivateRoads != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enablePrivateRoads", enablePrivateRoads));
        }

        if (enableUnclippedBuildings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enableUnclippedBuildings", enableUnclippedBuildings));
        }

        if (languageCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageCode", languageCode));
        }

        if (regionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regionCode", regionCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vectortileTerraintilesGetValidateBeforeCall(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer altitudePrecisionCentimeters, String clientInfoApiClient, String clientInfoApplicationId, String clientInfoApplicationVersion, String clientInfoDeviceModel, String clientInfoOperatingSystem, String clientInfoPlatform, String clientInfoUserId, Integer maxElevationResolutionCells, Integer minElevationResolutionCells, List<String> terrainFormats, Boolean enableModeledVolumes, Boolean enablePoliticalFeatures, Boolean enablePrivateRoads, Boolean enableUnclippedBuildings, String languageCode, String regionCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling vectortileTerraintilesGet(Async)");
        }

        return vectortileTerraintilesGetCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, altitudePrecisionCentimeters, clientInfoApiClient, clientInfoApplicationId, clientInfoApplicationVersion, clientInfoDeviceModel, clientInfoOperatingSystem, clientInfoPlatform, clientInfoUserId, maxElevationResolutionCells, minElevationResolutionCells, terrainFormats, enableModeledVolumes, enablePoliticalFeatures, enablePrivateRoads, enableUnclippedBuildings, languageCode, regionCode, _callback);

    }

    /**
     * 
     * Gets a terrain tile by its tile resource name.
     * @param name Required. Resource name of the tile. The tile resource name is prefixed by its collection ID &#x60;terraintiles/&#x60; followed by the resource ID, which encodes the tile&#39;s global x and y coordinates and zoom level as &#x60;@,,z&#x60;. For example, &#x60;terraintiles/@1,2,3z&#x60;. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param altitudePrecisionCentimeters The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision). (optional)
     * @param clientInfoApiClient API client name and version. For example, the SDK calling the API. The exact format is up to the client. (optional)
     * @param clientInfoApplicationId Application ID, such as the package name on Android and the bundle identifier on iOS platforms. (optional)
     * @param clientInfoApplicationVersion Application version number, such as \&quot;1.2.3\&quot;. The exact format is application-dependent. (optional)
     * @param clientInfoDeviceModel Device model as reported by the device. The exact format is platform-dependent. (optional)
     * @param clientInfoOperatingSystem Operating system name and version as reported by the OS. For example, \&quot;Mac OS X 10.10.4\&quot;. The exact format is platform-dependent. (optional)
     * @param clientInfoPlatform Platform where the application is running. (optional)
     * @param clientInfoUserId Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info). (optional)
     * @param maxElevationResolutionCells The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param minElevationResolutionCells  api-linter: core::0131::request-unknown-fields&#x3D;disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param terrainFormats Terrain formats that the client understands. (optional)
     * @param enableModeledVolumes Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible. (optional)
     * @param enablePoliticalFeatures Flag indicating whether political features should be returned. (optional)
     * @param enablePrivateRoads Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field. (optional)
     * @param enableUnclippedBuildings Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid. (optional)
     * @param languageCode Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. (optional)
     * @param regionCode Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \&quot;US\&quot; and \&quot;419\&quot;. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag. (optional)
     * @return TerrainTile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public TerrainTile vectortileTerraintilesGet(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer altitudePrecisionCentimeters, String clientInfoApiClient, String clientInfoApplicationId, String clientInfoApplicationVersion, String clientInfoDeviceModel, String clientInfoOperatingSystem, String clientInfoPlatform, String clientInfoUserId, Integer maxElevationResolutionCells, Integer minElevationResolutionCells, List<String> terrainFormats, Boolean enableModeledVolumes, Boolean enablePoliticalFeatures, Boolean enablePrivateRoads, Boolean enableUnclippedBuildings, String languageCode, String regionCode) throws ApiException {
        ApiResponse<TerrainTile> localVarResp = vectortileTerraintilesGetWithHttpInfo(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, altitudePrecisionCentimeters, clientInfoApiClient, clientInfoApplicationId, clientInfoApplicationVersion, clientInfoDeviceModel, clientInfoOperatingSystem, clientInfoPlatform, clientInfoUserId, maxElevationResolutionCells, minElevationResolutionCells, terrainFormats, enableModeledVolumes, enablePoliticalFeatures, enablePrivateRoads, enableUnclippedBuildings, languageCode, regionCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a terrain tile by its tile resource name.
     * @param name Required. Resource name of the tile. The tile resource name is prefixed by its collection ID &#x60;terraintiles/&#x60; followed by the resource ID, which encodes the tile&#39;s global x and y coordinates and zoom level as &#x60;@,,z&#x60;. For example, &#x60;terraintiles/@1,2,3z&#x60;. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param altitudePrecisionCentimeters The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision). (optional)
     * @param clientInfoApiClient API client name and version. For example, the SDK calling the API. The exact format is up to the client. (optional)
     * @param clientInfoApplicationId Application ID, such as the package name on Android and the bundle identifier on iOS platforms. (optional)
     * @param clientInfoApplicationVersion Application version number, such as \&quot;1.2.3\&quot;. The exact format is application-dependent. (optional)
     * @param clientInfoDeviceModel Device model as reported by the device. The exact format is platform-dependent. (optional)
     * @param clientInfoOperatingSystem Operating system name and version as reported by the OS. For example, \&quot;Mac OS X 10.10.4\&quot;. The exact format is platform-dependent. (optional)
     * @param clientInfoPlatform Platform where the application is running. (optional)
     * @param clientInfoUserId Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info). (optional)
     * @param maxElevationResolutionCells The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param minElevationResolutionCells  api-linter: core::0131::request-unknown-fields&#x3D;disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param terrainFormats Terrain formats that the client understands. (optional)
     * @param enableModeledVolumes Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible. (optional)
     * @param enablePoliticalFeatures Flag indicating whether political features should be returned. (optional)
     * @param enablePrivateRoads Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field. (optional)
     * @param enableUnclippedBuildings Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid. (optional)
     * @param languageCode Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. (optional)
     * @param regionCode Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \&quot;US\&quot; and \&quot;419\&quot;. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag. (optional)
     * @return ApiResponse&lt;TerrainTile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TerrainTile> vectortileTerraintilesGetWithHttpInfo(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer altitudePrecisionCentimeters, String clientInfoApiClient, String clientInfoApplicationId, String clientInfoApplicationVersion, String clientInfoDeviceModel, String clientInfoOperatingSystem, String clientInfoPlatform, String clientInfoUserId, Integer maxElevationResolutionCells, Integer minElevationResolutionCells, List<String> terrainFormats, Boolean enableModeledVolumes, Boolean enablePoliticalFeatures, Boolean enablePrivateRoads, Boolean enableUnclippedBuildings, String languageCode, String regionCode) throws ApiException {
        okhttp3.Call localVarCall = vectortileTerraintilesGetValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, altitudePrecisionCentimeters, clientInfoApiClient, clientInfoApplicationId, clientInfoApplicationVersion, clientInfoDeviceModel, clientInfoOperatingSystem, clientInfoPlatform, clientInfoUserId, maxElevationResolutionCells, minElevationResolutionCells, terrainFormats, enableModeledVolumes, enablePoliticalFeatures, enablePrivateRoads, enableUnclippedBuildings, languageCode, regionCode, null);
        Type localVarReturnType = new TypeToken<TerrainTile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a terrain tile by its tile resource name.
     * @param name Required. Resource name of the tile. The tile resource name is prefixed by its collection ID &#x60;terraintiles/&#x60; followed by the resource ID, which encodes the tile&#39;s global x and y coordinates and zoom level as &#x60;@,,z&#x60;. For example, &#x60;terraintiles/@1,2,3z&#x60;. (required)
     * @param $xgafv V1 error format. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param alt Data format for response. (optional)
     * @param paramCallback JSONP (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param altitudePrecisionCentimeters The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision). (optional)
     * @param clientInfoApiClient API client name and version. For example, the SDK calling the API. The exact format is up to the client. (optional)
     * @param clientInfoApplicationId Application ID, such as the package name on Android and the bundle identifier on iOS platforms. (optional)
     * @param clientInfoApplicationVersion Application version number, such as \&quot;1.2.3\&quot;. The exact format is application-dependent. (optional)
     * @param clientInfoDeviceModel Device model as reported by the device. The exact format is platform-dependent. (optional)
     * @param clientInfoOperatingSystem Operating system name and version as reported by the OS. For example, \&quot;Mac OS X 10.10.4\&quot;. The exact format is platform-dependent. (optional)
     * @param clientInfoPlatform Platform where the application is running. (optional)
     * @param clientInfoUserId Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info). (optional)
     * @param maxElevationResolutionCells The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param minElevationResolutionCells  api-linter: core::0131::request-unknown-fields&#x3D;disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height) (optional)
     * @param terrainFormats Terrain formats that the client understands. (optional)
     * @param enableModeledVolumes Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible. (optional)
     * @param enablePoliticalFeatures Flag indicating whether political features should be returned. (optional)
     * @param enablePrivateRoads Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field. (optional)
     * @param enableUnclippedBuildings Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid. (optional)
     * @param languageCode Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \&quot;en-US\&quot; or \&quot;sr-Latn\&quot;. For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. (optional)
     * @param regionCode Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \&quot;US\&quot; and \&quot;419\&quot;. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vectortileTerraintilesGetAsync(String name, String $xgafv, String accessToken, String alt, String paramCallback, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadProtocol, String uploadType, Integer altitudePrecisionCentimeters, String clientInfoApiClient, String clientInfoApplicationId, String clientInfoApplicationVersion, String clientInfoDeviceModel, String clientInfoOperatingSystem, String clientInfoPlatform, String clientInfoUserId, Integer maxElevationResolutionCells, Integer minElevationResolutionCells, List<String> terrainFormats, Boolean enableModeledVolumes, Boolean enablePoliticalFeatures, Boolean enablePrivateRoads, Boolean enableUnclippedBuildings, String languageCode, String regionCode, final ApiCallback<TerrainTile> _callback) throws ApiException {

        okhttp3.Call localVarCall = vectortileTerraintilesGetValidateBeforeCall(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, altitudePrecisionCentimeters, clientInfoApiClient, clientInfoApplicationId, clientInfoApplicationVersion, clientInfoDeviceModel, clientInfoOperatingSystem, clientInfoPlatform, clientInfoUserId, maxElevationResolutionCells, minElevationResolutionCells, terrainFormats, enableModeledVolumes, enablePoliticalFeatures, enablePrivateRoads, enableUnclippedBuildings, languageCode, regionCode, _callback);
        Type localVarReturnType = new TypeToken<TerrainTile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
