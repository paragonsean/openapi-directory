/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerrainTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerrainTile::OAITerrainTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerrainTile::OAITerrainTile() {
    this->initializeModel();
}

OAITerrainTile::~OAITerrainTile() {}

void OAITerrainTile::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_first_derivative_isSet = false;
    m_first_derivative_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_second_derivative_isSet = false;
    m_second_derivative_isValid = false;
}

void OAITerrainTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerrainTile::fromJsonObject(QJsonObject json) {

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_first_derivative_isValid = ::OpenAPI::fromJsonValue(m_first_derivative, json[QString("firstDerivative")]);
    m_first_derivative_isSet = !json[QString("firstDerivative")].isNull() && m_first_derivative_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_second_derivative_isValid = ::OpenAPI::fromJsonValue(m_second_derivative, json[QString("secondDerivative")]);
    m_second_derivative_isSet = !json[QString("secondDerivative")].isNull() && m_second_derivative_isValid;
}

QString OAITerrainTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerrainTile::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_first_derivative.isSet()) {
        obj.insert(QString("firstDerivative"), ::OpenAPI::toJsonValue(m_first_derivative));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_second_derivative.isSet()) {
        obj.insert(QString("secondDerivative"), ::OpenAPI::toJsonValue(m_second_derivative));
    }
    return obj;
}

OAITileCoordinates OAITerrainTile::getCoordinates() const {
    return m_coordinates;
}
void OAITerrainTile::setCoordinates(const OAITileCoordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAITerrainTile::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAITerrainTile::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

OAIFirstDerivativeElevationGrid OAITerrainTile::getFirstDerivative() const {
    return m_first_derivative;
}
void OAITerrainTile::setFirstDerivative(const OAIFirstDerivativeElevationGrid &first_derivative) {
    m_first_derivative = first_derivative;
    m_first_derivative_isSet = true;
}

bool OAITerrainTile::is_first_derivative_Set() const{
    return m_first_derivative_isSet;
}

bool OAITerrainTile::is_first_derivative_Valid() const{
    return m_first_derivative_isValid;
}

QString OAITerrainTile::getName() const {
    return m_name;
}
void OAITerrainTile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITerrainTile::is_name_Set() const{
    return m_name_isSet;
}

bool OAITerrainTile::is_name_Valid() const{
    return m_name_isValid;
}

OAISecondDerivativeElevationGrid OAITerrainTile::getSecondDerivative() const {
    return m_second_derivative;
}
void OAITerrainTile::setSecondDerivative(const OAISecondDerivativeElevationGrid &second_derivative) {
    m_second_derivative = second_derivative;
    m_second_derivative_isSet = true;
}

bool OAITerrainTile::is_second_derivative_Set() const{
    return m_second_derivative_isSet;
}

bool OAITerrainTile::is_second_derivative_Valid() const{
    return m_second_derivative_isValid;
}

bool OAITerrainTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_derivative.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_second_derivative.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerrainTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
