/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecondDerivativeElevationGrid.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecondDerivativeElevationGrid::OAISecondDerivativeElevationGrid(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecondDerivativeElevationGrid::OAISecondDerivativeElevationGrid() {
    this->initializeModel();
}

OAISecondDerivativeElevationGrid::~OAISecondDerivativeElevationGrid() {}

void OAISecondDerivativeElevationGrid::initializeModel() {

    m_altitude_multiplier_isSet = false;
    m_altitude_multiplier_isValid = false;

    m_column_count_isSet = false;
    m_column_count_isValid = false;

    m_encoded_data_isSet = false;
    m_encoded_data_isValid = false;

    m_row_count_isSet = false;
    m_row_count_isValid = false;
}

void OAISecondDerivativeElevationGrid::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecondDerivativeElevationGrid::fromJsonObject(QJsonObject json) {

    m_altitude_multiplier_isValid = ::OpenAPI::fromJsonValue(m_altitude_multiplier, json[QString("altitudeMultiplier")]);
    m_altitude_multiplier_isSet = !json[QString("altitudeMultiplier")].isNull() && m_altitude_multiplier_isValid;

    m_column_count_isValid = ::OpenAPI::fromJsonValue(m_column_count, json[QString("columnCount")]);
    m_column_count_isSet = !json[QString("columnCount")].isNull() && m_column_count_isValid;

    m_encoded_data_isValid = ::OpenAPI::fromJsonValue(m_encoded_data, json[QString("encodedData")]);
    m_encoded_data_isSet = !json[QString("encodedData")].isNull() && m_encoded_data_isValid;

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("rowCount")]);
    m_row_count_isSet = !json[QString("rowCount")].isNull() && m_row_count_isValid;
}

QString OAISecondDerivativeElevationGrid::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecondDerivativeElevationGrid::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_multiplier_isSet) {
        obj.insert(QString("altitudeMultiplier"), ::OpenAPI::toJsonValue(m_altitude_multiplier));
    }
    if (m_column_count_isSet) {
        obj.insert(QString("columnCount"), ::OpenAPI::toJsonValue(m_column_count));
    }
    if (m_encoded_data_isSet) {
        obj.insert(QString("encodedData"), ::OpenAPI::toJsonValue(m_encoded_data));
    }
    if (m_row_count_isSet) {
        obj.insert(QString("rowCount"), ::OpenAPI::toJsonValue(m_row_count));
    }
    return obj;
}

float OAISecondDerivativeElevationGrid::getAltitudeMultiplier() const {
    return m_altitude_multiplier;
}
void OAISecondDerivativeElevationGrid::setAltitudeMultiplier(const float &altitude_multiplier) {
    m_altitude_multiplier = altitude_multiplier;
    m_altitude_multiplier_isSet = true;
}

bool OAISecondDerivativeElevationGrid::is_altitude_multiplier_Set() const{
    return m_altitude_multiplier_isSet;
}

bool OAISecondDerivativeElevationGrid::is_altitude_multiplier_Valid() const{
    return m_altitude_multiplier_isValid;
}

qint32 OAISecondDerivativeElevationGrid::getColumnCount() const {
    return m_column_count;
}
void OAISecondDerivativeElevationGrid::setColumnCount(const qint32 &column_count) {
    m_column_count = column_count;
    m_column_count_isSet = true;
}

bool OAISecondDerivativeElevationGrid::is_column_count_Set() const{
    return m_column_count_isSet;
}

bool OAISecondDerivativeElevationGrid::is_column_count_Valid() const{
    return m_column_count_isValid;
}

QByteArray OAISecondDerivativeElevationGrid::getEncodedData() const {
    return m_encoded_data;
}
void OAISecondDerivativeElevationGrid::setEncodedData(const QByteArray &encoded_data) {
    m_encoded_data = encoded_data;
    m_encoded_data_isSet = true;
}

bool OAISecondDerivativeElevationGrid::is_encoded_data_Set() const{
    return m_encoded_data_isSet;
}

bool OAISecondDerivativeElevationGrid::is_encoded_data_Valid() const{
    return m_encoded_data_isValid;
}

qint32 OAISecondDerivativeElevationGrid::getRowCount() const {
    return m_row_count;
}
void OAISecondDerivativeElevationGrid::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAISecondDerivativeElevationGrid::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAISecondDerivativeElevationGrid::is_row_count_Valid() const{
    return m_row_count_isValid;
}

bool OAISecondDerivativeElevationGrid::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecondDerivativeElevationGrid::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
