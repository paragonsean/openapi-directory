/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModeledVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModeledVolume::OAIModeledVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModeledVolume::OAIModeledVolume() {
    this->initializeModel();
}

OAIModeledVolume::~OAIModeledVolume() {}

void OAIModeledVolume::initializeModel() {

    m_strips_isSet = false;
    m_strips_isValid = false;

    m_vertex_offsets_isSet = false;
    m_vertex_offsets_isValid = false;
}

void OAIModeledVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModeledVolume::fromJsonObject(QJsonObject json) {

    m_strips_isValid = ::OpenAPI::fromJsonValue(m_strips, json[QString("strips")]);
    m_strips_isSet = !json[QString("strips")].isNull() && m_strips_isValid;

    m_vertex_offsets_isValid = ::OpenAPI::fromJsonValue(m_vertex_offsets, json[QString("vertexOffsets")]);
    m_vertex_offsets_isSet = !json[QString("vertexOffsets")].isNull() && m_vertex_offsets_isValid;
}

QString OAIModeledVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModeledVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_strips.size() > 0) {
        obj.insert(QString("strips"), ::OpenAPI::toJsonValue(m_strips));
    }
    if (m_vertex_offsets.isSet()) {
        obj.insert(QString("vertexOffsets"), ::OpenAPI::toJsonValue(m_vertex_offsets));
    }
    return obj;
}

QList<OAITriangleStrip> OAIModeledVolume::getStrips() const {
    return m_strips;
}
void OAIModeledVolume::setStrips(const QList<OAITriangleStrip> &strips) {
    m_strips = strips;
    m_strips_isSet = true;
}

bool OAIModeledVolume::is_strips_Set() const{
    return m_strips_isSet;
}

bool OAIModeledVolume::is_strips_Valid() const{
    return m_strips_isValid;
}

OAIVertex3DList OAIModeledVolume::getVertexOffsets() const {
    return m_vertex_offsets;
}
void OAIModeledVolume::setVertexOffsets(const OAIVertex3DList &vertex_offsets) {
    m_vertex_offsets = vertex_offsets;
    m_vertex_offsets_isSet = true;
}

bool OAIModeledVolume::is_vertex_offsets_Set() const{
    return m_vertex_offsets_isSet;
}

bool OAIModeledVolume::is_vertex_offsets_Valid() const{
    return m_vertex_offsets_isValid;
}

bool OAIModeledVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_strips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_offsets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModeledVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
