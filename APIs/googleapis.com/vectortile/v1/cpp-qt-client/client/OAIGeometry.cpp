/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeometry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeometry::OAIGeometry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeometry::OAIGeometry() {
    this->initializeModel();
}

OAIGeometry::~OAIGeometry() {}

void OAIGeometry::initializeModel() {

    m_areas_isSet = false;
    m_areas_isValid = false;

    m_extruded_areas_isSet = false;
    m_extruded_areas_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_modeled_volumes_isSet = false;
    m_modeled_volumes_isValid = false;
}

void OAIGeometry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeometry::fromJsonObject(QJsonObject json) {

    m_areas_isValid = ::OpenAPI::fromJsonValue(m_areas, json[QString("areas")]);
    m_areas_isSet = !json[QString("areas")].isNull() && m_areas_isValid;

    m_extruded_areas_isValid = ::OpenAPI::fromJsonValue(m_extruded_areas, json[QString("extrudedAreas")]);
    m_extruded_areas_isSet = !json[QString("extrudedAreas")].isNull() && m_extruded_areas_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_modeled_volumes_isValid = ::OpenAPI::fromJsonValue(m_modeled_volumes, json[QString("modeledVolumes")]);
    m_modeled_volumes_isSet = !json[QString("modeledVolumes")].isNull() && m_modeled_volumes_isValid;
}

QString OAIGeometry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeometry::asJsonObject() const {
    QJsonObject obj;
    if (m_areas.size() > 0) {
        obj.insert(QString("areas"), ::OpenAPI::toJsonValue(m_areas));
    }
    if (m_extruded_areas.size() > 0) {
        obj.insert(QString("extrudedAreas"), ::OpenAPI::toJsonValue(m_extruded_areas));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_modeled_volumes.size() > 0) {
        obj.insert(QString("modeledVolumes"), ::OpenAPI::toJsonValue(m_modeled_volumes));
    }
    return obj;
}

QList<OAIArea> OAIGeometry::getAreas() const {
    return m_areas;
}
void OAIGeometry::setAreas(const QList<OAIArea> &areas) {
    m_areas = areas;
    m_areas_isSet = true;
}

bool OAIGeometry::is_areas_Set() const{
    return m_areas_isSet;
}

bool OAIGeometry::is_areas_Valid() const{
    return m_areas_isValid;
}

QList<OAIExtrudedArea> OAIGeometry::getExtrudedAreas() const {
    return m_extruded_areas;
}
void OAIGeometry::setExtrudedAreas(const QList<OAIExtrudedArea> &extruded_areas) {
    m_extruded_areas = extruded_areas;
    m_extruded_areas_isSet = true;
}

bool OAIGeometry::is_extruded_areas_Set() const{
    return m_extruded_areas_isSet;
}

bool OAIGeometry::is_extruded_areas_Valid() const{
    return m_extruded_areas_isValid;
}

QList<OAILine> OAIGeometry::getLines() const {
    return m_lines;
}
void OAIGeometry::setLines(const QList<OAILine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIGeometry::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIGeometry::is_lines_Valid() const{
    return m_lines_isValid;
}

QList<OAIModeledVolume> OAIGeometry::getModeledVolumes() const {
    return m_modeled_volumes;
}
void OAIGeometry::setModeledVolumes(const QList<OAIModeledVolume> &modeled_volumes) {
    m_modeled_volumes = modeled_volumes;
    m_modeled_volumes_isSet = true;
}

bool OAIGeometry::is_modeled_volumes_Set() const{
    return m_modeled_volumes_isSet;
}

bool OAIGeometry::is_modeled_volumes_Valid() const{
    return m_modeled_volumes_isValid;
}

bool OAIGeometry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_areas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extruded_areas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modeled_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeometry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
