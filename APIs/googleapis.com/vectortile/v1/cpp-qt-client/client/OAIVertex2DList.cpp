/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVertex2DList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVertex2DList::OAIVertex2DList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVertex2DList::OAIVertex2DList() {
    this->initializeModel();
}

OAIVertex2DList::~OAIVertex2DList() {}

void OAIVertex2DList::initializeModel() {

    m_x_offsets_isSet = false;
    m_x_offsets_isValid = false;

    m_y_offsets_isSet = false;
    m_y_offsets_isValid = false;
}

void OAIVertex2DList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVertex2DList::fromJsonObject(QJsonObject json) {

    m_x_offsets_isValid = ::OpenAPI::fromJsonValue(m_x_offsets, json[QString("xOffsets")]);
    m_x_offsets_isSet = !json[QString("xOffsets")].isNull() && m_x_offsets_isValid;

    m_y_offsets_isValid = ::OpenAPI::fromJsonValue(m_y_offsets, json[QString("yOffsets")]);
    m_y_offsets_isSet = !json[QString("yOffsets")].isNull() && m_y_offsets_isValid;
}

QString OAIVertex2DList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVertex2DList::asJsonObject() const {
    QJsonObject obj;
    if (m_x_offsets.size() > 0) {
        obj.insert(QString("xOffsets"), ::OpenAPI::toJsonValue(m_x_offsets));
    }
    if (m_y_offsets.size() > 0) {
        obj.insert(QString("yOffsets"), ::OpenAPI::toJsonValue(m_y_offsets));
    }
    return obj;
}

QList<qint32> OAIVertex2DList::getXOffsets() const {
    return m_x_offsets;
}
void OAIVertex2DList::setXOffsets(const QList<qint32> &x_offsets) {
    m_x_offsets = x_offsets;
    m_x_offsets_isSet = true;
}

bool OAIVertex2DList::is_x_offsets_Set() const{
    return m_x_offsets_isSet;
}

bool OAIVertex2DList::is_x_offsets_Valid() const{
    return m_x_offsets_isValid;
}

QList<qint32> OAIVertex2DList::getYOffsets() const {
    return m_y_offsets;
}
void OAIVertex2DList::setYOffsets(const QList<qint32> &y_offsets) {
    m_y_offsets = y_offsets;
    m_y_offsets_isSet = true;
}

bool OAIVertex2DList::is_y_offsets_Set() const{
    return m_y_offsets_isSet;
}

bool OAIVertex2DList::is_y_offsets_Valid() const{
    return m_y_offsets_isValid;
}

bool OAIVertex2DList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x_offsets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_offsets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVertex2DList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
