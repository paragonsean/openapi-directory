/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasemapZOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasemapZOrder::OAIBasemapZOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasemapZOrder::OAIBasemapZOrder() {
    this->initializeModel();
}

OAIBasemapZOrder::~OAIBasemapZOrder() {}

void OAIBasemapZOrder::initializeModel() {

    m_z_grade_isSet = false;
    m_z_grade_isValid = false;

    m_z_plane_isSet = false;
    m_z_plane_isValid = false;

    m_z_within_grade_isSet = false;
    m_z_within_grade_isValid = false;
}

void OAIBasemapZOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasemapZOrder::fromJsonObject(QJsonObject json) {

    m_z_grade_isValid = ::OpenAPI::fromJsonValue(m_z_grade, json[QString("zGrade")]);
    m_z_grade_isSet = !json[QString("zGrade")].isNull() && m_z_grade_isValid;

    m_z_plane_isValid = ::OpenAPI::fromJsonValue(m_z_plane, json[QString("zPlane")]);
    m_z_plane_isSet = !json[QString("zPlane")].isNull() && m_z_plane_isValid;

    m_z_within_grade_isValid = ::OpenAPI::fromJsonValue(m_z_within_grade, json[QString("zWithinGrade")]);
    m_z_within_grade_isSet = !json[QString("zWithinGrade")].isNull() && m_z_within_grade_isValid;
}

QString OAIBasemapZOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasemapZOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_z_grade_isSet) {
        obj.insert(QString("zGrade"), ::OpenAPI::toJsonValue(m_z_grade));
    }
    if (m_z_plane_isSet) {
        obj.insert(QString("zPlane"), ::OpenAPI::toJsonValue(m_z_plane));
    }
    if (m_z_within_grade_isSet) {
        obj.insert(QString("zWithinGrade"), ::OpenAPI::toJsonValue(m_z_within_grade));
    }
    return obj;
}

qint32 OAIBasemapZOrder::getZGrade() const {
    return m_z_grade;
}
void OAIBasemapZOrder::setZGrade(const qint32 &z_grade) {
    m_z_grade = z_grade;
    m_z_grade_isSet = true;
}

bool OAIBasemapZOrder::is_z_grade_Set() const{
    return m_z_grade_isSet;
}

bool OAIBasemapZOrder::is_z_grade_Valid() const{
    return m_z_grade_isValid;
}

qint32 OAIBasemapZOrder::getZPlane() const {
    return m_z_plane;
}
void OAIBasemapZOrder::setZPlane(const qint32 &z_plane) {
    m_z_plane = z_plane;
    m_z_plane_isSet = true;
}

bool OAIBasemapZOrder::is_z_plane_Set() const{
    return m_z_plane_isSet;
}

bool OAIBasemapZOrder::is_z_plane_Valid() const{
    return m_z_plane_isValid;
}

qint32 OAIBasemapZOrder::getZWithinGrade() const {
    return m_z_within_grade;
}
void OAIBasemapZOrder::setZWithinGrade(const qint32 &z_within_grade) {
    m_z_within_grade = z_within_grade;
    m_z_within_grade_isSet = true;
}

bool OAIBasemapZOrder::is_z_within_grade_Set() const{
    return m_z_within_grade_isSet;
}

bool OAIBasemapZOrder::is_z_within_grade_Valid() const{
    return m_z_within_grade_isValid;
}

bool OAIBasemapZOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_z_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_plane_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_within_grade_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasemapZOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
