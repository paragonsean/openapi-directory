/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILine::OAILine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILine::OAILine() {
    this->initializeModel();
}

OAILine::~OAILine() {}

void OAILine::initializeModel() {

    m_basemap_z_order_isSet = false;
    m_basemap_z_order_isValid = false;

    m_vertex_offsets_isSet = false;
    m_vertex_offsets_isValid = false;

    m_z_order_isSet = false;
    m_z_order_isValid = false;
}

void OAILine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILine::fromJsonObject(QJsonObject json) {

    m_basemap_z_order_isValid = ::OpenAPI::fromJsonValue(m_basemap_z_order, json[QString("basemapZOrder")]);
    m_basemap_z_order_isSet = !json[QString("basemapZOrder")].isNull() && m_basemap_z_order_isValid;

    m_vertex_offsets_isValid = ::OpenAPI::fromJsonValue(m_vertex_offsets, json[QString("vertexOffsets")]);
    m_vertex_offsets_isSet = !json[QString("vertexOffsets")].isNull() && m_vertex_offsets_isValid;

    m_z_order_isValid = ::OpenAPI::fromJsonValue(m_z_order, json[QString("zOrder")]);
    m_z_order_isSet = !json[QString("zOrder")].isNull() && m_z_order_isValid;
}

QString OAILine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILine::asJsonObject() const {
    QJsonObject obj;
    if (m_basemap_z_order.isSet()) {
        obj.insert(QString("basemapZOrder"), ::OpenAPI::toJsonValue(m_basemap_z_order));
    }
    if (m_vertex_offsets.isSet()) {
        obj.insert(QString("vertexOffsets"), ::OpenAPI::toJsonValue(m_vertex_offsets));
    }
    if (m_z_order_isSet) {
        obj.insert(QString("zOrder"), ::OpenAPI::toJsonValue(m_z_order));
    }
    return obj;
}

OAIBasemapZOrder OAILine::getBasemapZOrder() const {
    return m_basemap_z_order;
}
void OAILine::setBasemapZOrder(const OAIBasemapZOrder &basemap_z_order) {
    m_basemap_z_order = basemap_z_order;
    m_basemap_z_order_isSet = true;
}

bool OAILine::is_basemap_z_order_Set() const{
    return m_basemap_z_order_isSet;
}

bool OAILine::is_basemap_z_order_Valid() const{
    return m_basemap_z_order_isValid;
}

OAIVertex2DList OAILine::getVertexOffsets() const {
    return m_vertex_offsets;
}
void OAILine::setVertexOffsets(const OAIVertex2DList &vertex_offsets) {
    m_vertex_offsets = vertex_offsets;
    m_vertex_offsets_isSet = true;
}

bool OAILine::is_vertex_offsets_Set() const{
    return m_vertex_offsets_isSet;
}

bool OAILine::is_vertex_offsets_Valid() const{
    return m_vertex_offsets_isValid;
}

qint32 OAILine::getZOrder() const {
    return m_z_order;
}
void OAILine::setZOrder(const qint32 &z_order) {
    m_z_order = z_order;
    m_z_order_isSet = true;
}

bool OAILine::is_z_order_Set() const{
    return m_z_order_isSet;
}

bool OAILine::is_z_order_Valid() const{
    return m_z_order_isValid;
}

bool OAILine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basemap_z_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_offsets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
