/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISecondDerivativeElevationGrid.h
 *
 * A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each point within the grid represents the altitude in meters above average sea level at that location within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+ | | | N | | ^ | | | | | W &lt;-----&gt; E | | | | | v | | S | | | +-----------------+ rows[n].a[0] rows[n].a[m] Rather than storing the altitudes directly, we store the diffs of the diffs between them as integers at some requested level of precision to take advantage of integer packing. Note that the data is packed in such a way that is fast to decode in Unity and that further optimizes wire size.
 */

#ifndef OAISecondDerivativeElevationGrid_H
#define OAISecondDerivativeElevationGrid_H

#include <QJsonObject>

#include <QByteArray>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISecondDerivativeElevationGrid : public OAIObject {
public:
    OAISecondDerivativeElevationGrid();
    OAISecondDerivativeElevationGrid(QString json);
    ~OAISecondDerivativeElevationGrid() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getAltitudeMultiplier() const;
    void setAltitudeMultiplier(const float &altitude_multiplier);
    bool is_altitude_multiplier_Set() const;
    bool is_altitude_multiplier_Valid() const;

    qint32 getColumnCount() const;
    void setColumnCount(const qint32 &column_count);
    bool is_column_count_Set() const;
    bool is_column_count_Valid() const;

    QByteArray getEncodedData() const;
    void setEncodedData(const QByteArray &encoded_data);
    bool is_encoded_data_Set() const;
    bool is_encoded_data_Valid() const;

    qint32 getRowCount() const;
    void setRowCount(const qint32 &row_count);
    bool is_row_count_Set() const;
    bool is_row_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_altitude_multiplier;
    bool m_altitude_multiplier_isSet;
    bool m_altitude_multiplier_isValid;

    qint32 m_column_count;
    bool m_column_count_isSet;
    bool m_column_count_isValid;

    QByteArray m_encoded_data;
    bool m_encoded_data_isSet;
    bool m_encoded_data_isValid;

    qint32 m_row_count;
    bool m_row_count_isSet;
    bool m_row_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISecondDerivativeElevationGrid)

#endif // OAISecondDerivativeElevationGrid_H
