/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_relations_isSet = false;
    m_relations_isValid = false;

    m_segment_info_isSet = false;
    m_segment_info_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("geometry")]);
    m_geometry_isSet = !json[QString("geometry")].isNull() && m_geometry_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_relations_isValid = ::OpenAPI::fromJsonValue(m_relations, json[QString("relations")]);
    m_relations_isSet = !json[QString("relations")].isNull() && m_relations_isValid;

    m_segment_info_isValid = ::OpenAPI::fromJsonValue(m_segment_info, json[QString("segmentInfo")]);
    m_segment_info_isSet = !json[QString("segmentInfo")].isNull() && m_segment_info_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_relations.size() > 0) {
        obj.insert(QString("relations"), ::OpenAPI::toJsonValue(m_relations));
    }
    if (m_segment_info.isSet()) {
        obj.insert(QString("segmentInfo"), ::OpenAPI::toJsonValue(m_segment_info));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFeature::getDisplayName() const {
    return m_display_name;
}
void OAIFeature::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFeature::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFeature::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGeometry OAIFeature::getGeometry() const {
    return m_geometry;
}
void OAIFeature::setGeometry(const OAIGeometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIFeature::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIFeature::is_geometry_Valid() const{
    return m_geometry_isValid;
}

QString OAIFeature::getPlaceId() const {
    return m_place_id;
}
void OAIFeature::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIFeature::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIFeature::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QList<OAIRelation> OAIFeature::getRelations() const {
    return m_relations;
}
void OAIFeature::setRelations(const QList<OAIRelation> &relations) {
    m_relations = relations;
    m_relations_isSet = true;
}

bool OAIFeature::is_relations_Set() const{
    return m_relations_isSet;
}

bool OAIFeature::is_relations_Valid() const{
    return m_relations_isValid;
}

OAISegmentInfo OAIFeature::getSegmentInfo() const {
    return m_segment_info;
}
void OAIFeature::setSegmentInfo(const OAISegmentInfo &segment_info) {
    m_segment_info = segment_info;
    m_segment_info_isSet = true;
}

bool OAIFeature::is_segment_info_Set() const{
    return m_segment_info_isSet;
}

bool OAIFeature::is_segment_info_Valid() const{
    return m_segment_info_isValid;
}

QString OAIFeature::getType() const {
    return m_type;
}
void OAIFeature::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFeature::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFeature::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
