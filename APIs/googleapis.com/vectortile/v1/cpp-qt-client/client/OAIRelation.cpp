/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelation::OAIRelation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelation::OAIRelation() {
    this->initializeModel();
}

OAIRelation::~OAIRelation() {}

void OAIRelation::initializeModel() {

    m_related_feature_index_isSet = false;
    m_related_feature_index_isValid = false;

    m_relation_type_isSet = false;
    m_relation_type_isValid = false;
}

void OAIRelation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelation::fromJsonObject(QJsonObject json) {

    m_related_feature_index_isValid = ::OpenAPI::fromJsonValue(m_related_feature_index, json[QString("relatedFeatureIndex")]);
    m_related_feature_index_isSet = !json[QString("relatedFeatureIndex")].isNull() && m_related_feature_index_isValid;

    m_relation_type_isValid = ::OpenAPI::fromJsonValue(m_relation_type, json[QString("relationType")]);
    m_relation_type_isSet = !json[QString("relationType")].isNull() && m_relation_type_isValid;
}

QString OAIRelation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelation::asJsonObject() const {
    QJsonObject obj;
    if (m_related_feature_index_isSet) {
        obj.insert(QString("relatedFeatureIndex"), ::OpenAPI::toJsonValue(m_related_feature_index));
    }
    if (m_relation_type_isSet) {
        obj.insert(QString("relationType"), ::OpenAPI::toJsonValue(m_relation_type));
    }
    return obj;
}

qint32 OAIRelation::getRelatedFeatureIndex() const {
    return m_related_feature_index;
}
void OAIRelation::setRelatedFeatureIndex(const qint32 &related_feature_index) {
    m_related_feature_index = related_feature_index;
    m_related_feature_index_isSet = true;
}

bool OAIRelation::is_related_feature_index_Set() const{
    return m_related_feature_index_isSet;
}

bool OAIRelation::is_related_feature_index_Valid() const{
    return m_related_feature_index_isValid;
}

QString OAIRelation::getRelationType() const {
    return m_relation_type;
}
void OAIRelation::setRelationType(const QString &relation_type) {
    m_relation_type = relation_type;
    m_relation_type_isSet = true;
}

bool OAIRelation::is_relation_type_Set() const{
    return m_relation_type_isSet;
}

bool OAIRelation::is_relation_type_Valid() const{
    return m_relation_type_isValid;
}

bool OAIRelation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_related_feature_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
