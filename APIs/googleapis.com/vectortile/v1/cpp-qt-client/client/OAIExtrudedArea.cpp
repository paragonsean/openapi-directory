/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtrudedArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtrudedArea::OAIExtrudedArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtrudedArea::OAIExtrudedArea() {
    this->initializeModel();
}

OAIExtrudedArea::~OAIExtrudedArea() {}

void OAIExtrudedArea::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_max_z_isSet = false;
    m_max_z_isValid = false;

    m_min_z_isSet = false;
    m_min_z_isValid = false;
}

void OAIExtrudedArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtrudedArea::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_max_z_isValid = ::OpenAPI::fromJsonValue(m_max_z, json[QString("maxZ")]);
    m_max_z_isSet = !json[QString("maxZ")].isNull() && m_max_z_isValid;

    m_min_z_isValid = ::OpenAPI::fromJsonValue(m_min_z, json[QString("minZ")]);
    m_min_z_isSet = !json[QString("minZ")].isNull() && m_min_z_isValid;
}

QString OAIExtrudedArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtrudedArea::asJsonObject() const {
    QJsonObject obj;
    if (m_area.isSet()) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_max_z_isSet) {
        obj.insert(QString("maxZ"), ::OpenAPI::toJsonValue(m_max_z));
    }
    if (m_min_z_isSet) {
        obj.insert(QString("minZ"), ::OpenAPI::toJsonValue(m_min_z));
    }
    return obj;
}

OAIArea OAIExtrudedArea::getArea() const {
    return m_area;
}
void OAIExtrudedArea::setArea(const OAIArea &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIExtrudedArea::is_area_Set() const{
    return m_area_isSet;
}

bool OAIExtrudedArea::is_area_Valid() const{
    return m_area_isValid;
}

qint32 OAIExtrudedArea::getMaxZ() const {
    return m_max_z;
}
void OAIExtrudedArea::setMaxZ(const qint32 &max_z) {
    m_max_z = max_z;
    m_max_z_isSet = true;
}

bool OAIExtrudedArea::is_max_z_Set() const{
    return m_max_z_isSet;
}

bool OAIExtrudedArea::is_max_z_Valid() const{
    return m_max_z_isValid;
}

qint32 OAIExtrudedArea::getMinZ() const {
    return m_min_z;
}
void OAIExtrudedArea::setMinZ(const qint32 &min_z) {
    m_min_z = min_z;
    m_min_z_isSet = true;
}

bool OAIExtrudedArea::is_min_z_Set() const{
    return m_min_z_isSet;
}

bool OAIExtrudedArea::is_min_z_Valid() const{
    return m_min_z_isValid;
}

bool OAIExtrudedArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_z_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_z_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtrudedArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
