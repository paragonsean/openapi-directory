/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureTile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureTile::OAIFeatureTile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureTile::OAIFeatureTile() {
    this->initializeModel();
}

OAIFeatureTile::~OAIFeatureTile() {}

void OAIFeatureTile::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIFeatureTile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureTile::fromJsonObject(QJsonObject json) {

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIFeatureTile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureTile::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates.isSet()) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

OAITileCoordinates OAIFeatureTile::getCoordinates() const {
    return m_coordinates;
}
void OAIFeatureTile::setCoordinates(const OAITileCoordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIFeatureTile::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIFeatureTile::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

QList<OAIFeature> OAIFeatureTile::getFeatures() const {
    return m_features;
}
void OAIFeatureTile::setFeatures(const QList<OAIFeature> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIFeatureTile::is_features_Set() const{
    return m_features_isSet;
}

bool OAIFeatureTile::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIFeatureTile::getName() const {
    return m_name;
}
void OAIFeatureTile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeatureTile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeatureTile::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProviderInfo> OAIFeatureTile::getProviders() const {
    return m_providers;
}
void OAIFeatureTile::setProviders(const QList<OAIProviderInfo> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIFeatureTile::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIFeatureTile::is_providers_Valid() const{
    return m_providers_isValid;
}

QString OAIFeatureTile::getStatus() const {
    return m_status;
}
void OAIFeatureTile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeatureTile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeatureTile::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFeatureTile::getVersionId() const {
    return m_version_id;
}
void OAIFeatureTile::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIFeatureTile::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIFeatureTile::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIFeatureTile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureTile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
