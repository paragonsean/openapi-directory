/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIArea.h
 *
 * Represents an area. Used to represent regions such as water, parks, etc. Next ID: 10
 */

#ifndef OAIArea_H
#define OAIArea_H

#include <QJsonObject>

#include "OAIBasemapZOrder.h"
#include "OAIVertex2DList.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBasemapZOrder;
class OAIVertex2DList;

class OAIArea : public OAIObject {
public:
    OAIArea();
    OAIArea(QString json);
    ~OAIArea() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBasemapZOrder getBasemapZOrder() const;
    void setBasemapZOrder(const OAIBasemapZOrder &basemap_z_order);
    bool is_basemap_z_order_Set() const;
    bool is_basemap_z_order_Valid() const;

    bool isHasExternalEdges() const;
    void setHasExternalEdges(const bool &has_external_edges);
    bool is_has_external_edges_Set() const;
    bool is_has_external_edges_Valid() const;

    QList<qint32> getInternalEdges() const;
    void setInternalEdges(const QList<qint32> &internal_edges);
    bool is_internal_edges_Set() const;
    bool is_internal_edges_Valid() const;

    QList<qint32> getLoopBreaks() const;
    void setLoopBreaks(const QList<qint32> &loop_breaks);
    bool is_loop_breaks_Set() const;
    bool is_loop_breaks_Valid() const;

    QList<qint32> getTriangleIndices() const;
    void setTriangleIndices(const QList<qint32> &triangle_indices);
    bool is_triangle_indices_Set() const;
    bool is_triangle_indices_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIVertex2DList getVertexOffsets() const;
    void setVertexOffsets(const OAIVertex2DList &vertex_offsets);
    bool is_vertex_offsets_Set() const;
    bool is_vertex_offsets_Valid() const;

    qint32 getZOrder() const;
    void setZOrder(const qint32 &z_order);
    bool is_z_order_Set() const;
    bool is_z_order_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBasemapZOrder m_basemap_z_order;
    bool m_basemap_z_order_isSet;
    bool m_basemap_z_order_isValid;

    bool m_has_external_edges;
    bool m_has_external_edges_isSet;
    bool m_has_external_edges_isValid;

    QList<qint32> m_internal_edges;
    bool m_internal_edges_isSet;
    bool m_internal_edges_isValid;

    QList<qint32> m_loop_breaks;
    bool m_loop_breaks_isSet;
    bool m_loop_breaks_isValid;

    QList<qint32> m_triangle_indices;
    bool m_triangle_indices_isSet;
    bool m_triangle_indices_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIVertex2DList m_vertex_offsets;
    bool m_vertex_offsets_isSet;
    bool m_vertex_offsets_isValid;

    qint32 m_z_order;
    bool m_z_order_isSet;
    bool m_z_order_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIArea)

#endif // OAIArea_H
