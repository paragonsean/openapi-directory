/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArea.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArea::OAIArea(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArea::OAIArea() {
    this->initializeModel();
}

OAIArea::~OAIArea() {}

void OAIArea::initializeModel() {

    m_basemap_z_order_isSet = false;
    m_basemap_z_order_isValid = false;

    m_has_external_edges_isSet = false;
    m_has_external_edges_isValid = false;

    m_internal_edges_isSet = false;
    m_internal_edges_isValid = false;

    m_loop_breaks_isSet = false;
    m_loop_breaks_isValid = false;

    m_triangle_indices_isSet = false;
    m_triangle_indices_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vertex_offsets_isSet = false;
    m_vertex_offsets_isValid = false;

    m_z_order_isSet = false;
    m_z_order_isValid = false;
}

void OAIArea::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArea::fromJsonObject(QJsonObject json) {

    m_basemap_z_order_isValid = ::OpenAPI::fromJsonValue(m_basemap_z_order, json[QString("basemapZOrder")]);
    m_basemap_z_order_isSet = !json[QString("basemapZOrder")].isNull() && m_basemap_z_order_isValid;

    m_has_external_edges_isValid = ::OpenAPI::fromJsonValue(m_has_external_edges, json[QString("hasExternalEdges")]);
    m_has_external_edges_isSet = !json[QString("hasExternalEdges")].isNull() && m_has_external_edges_isValid;

    m_internal_edges_isValid = ::OpenAPI::fromJsonValue(m_internal_edges, json[QString("internalEdges")]);
    m_internal_edges_isSet = !json[QString("internalEdges")].isNull() && m_internal_edges_isValid;

    m_loop_breaks_isValid = ::OpenAPI::fromJsonValue(m_loop_breaks, json[QString("loopBreaks")]);
    m_loop_breaks_isSet = !json[QString("loopBreaks")].isNull() && m_loop_breaks_isValid;

    m_triangle_indices_isValid = ::OpenAPI::fromJsonValue(m_triangle_indices, json[QString("triangleIndices")]);
    m_triangle_indices_isSet = !json[QString("triangleIndices")].isNull() && m_triangle_indices_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vertex_offsets_isValid = ::OpenAPI::fromJsonValue(m_vertex_offsets, json[QString("vertexOffsets")]);
    m_vertex_offsets_isSet = !json[QString("vertexOffsets")].isNull() && m_vertex_offsets_isValid;

    m_z_order_isValid = ::OpenAPI::fromJsonValue(m_z_order, json[QString("zOrder")]);
    m_z_order_isSet = !json[QString("zOrder")].isNull() && m_z_order_isValid;
}

QString OAIArea::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArea::asJsonObject() const {
    QJsonObject obj;
    if (m_basemap_z_order.isSet()) {
        obj.insert(QString("basemapZOrder"), ::OpenAPI::toJsonValue(m_basemap_z_order));
    }
    if (m_has_external_edges_isSet) {
        obj.insert(QString("hasExternalEdges"), ::OpenAPI::toJsonValue(m_has_external_edges));
    }
    if (m_internal_edges.size() > 0) {
        obj.insert(QString("internalEdges"), ::OpenAPI::toJsonValue(m_internal_edges));
    }
    if (m_loop_breaks.size() > 0) {
        obj.insert(QString("loopBreaks"), ::OpenAPI::toJsonValue(m_loop_breaks));
    }
    if (m_triangle_indices.size() > 0) {
        obj.insert(QString("triangleIndices"), ::OpenAPI::toJsonValue(m_triangle_indices));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vertex_offsets.isSet()) {
        obj.insert(QString("vertexOffsets"), ::OpenAPI::toJsonValue(m_vertex_offsets));
    }
    if (m_z_order_isSet) {
        obj.insert(QString("zOrder"), ::OpenAPI::toJsonValue(m_z_order));
    }
    return obj;
}

OAIBasemapZOrder OAIArea::getBasemapZOrder() const {
    return m_basemap_z_order;
}
void OAIArea::setBasemapZOrder(const OAIBasemapZOrder &basemap_z_order) {
    m_basemap_z_order = basemap_z_order;
    m_basemap_z_order_isSet = true;
}

bool OAIArea::is_basemap_z_order_Set() const{
    return m_basemap_z_order_isSet;
}

bool OAIArea::is_basemap_z_order_Valid() const{
    return m_basemap_z_order_isValid;
}

bool OAIArea::isHasExternalEdges() const {
    return m_has_external_edges;
}
void OAIArea::setHasExternalEdges(const bool &has_external_edges) {
    m_has_external_edges = has_external_edges;
    m_has_external_edges_isSet = true;
}

bool OAIArea::is_has_external_edges_Set() const{
    return m_has_external_edges_isSet;
}

bool OAIArea::is_has_external_edges_Valid() const{
    return m_has_external_edges_isValid;
}

QList<qint32> OAIArea::getInternalEdges() const {
    return m_internal_edges;
}
void OAIArea::setInternalEdges(const QList<qint32> &internal_edges) {
    m_internal_edges = internal_edges;
    m_internal_edges_isSet = true;
}

bool OAIArea::is_internal_edges_Set() const{
    return m_internal_edges_isSet;
}

bool OAIArea::is_internal_edges_Valid() const{
    return m_internal_edges_isValid;
}

QList<qint32> OAIArea::getLoopBreaks() const {
    return m_loop_breaks;
}
void OAIArea::setLoopBreaks(const QList<qint32> &loop_breaks) {
    m_loop_breaks = loop_breaks;
    m_loop_breaks_isSet = true;
}

bool OAIArea::is_loop_breaks_Set() const{
    return m_loop_breaks_isSet;
}

bool OAIArea::is_loop_breaks_Valid() const{
    return m_loop_breaks_isValid;
}

QList<qint32> OAIArea::getTriangleIndices() const {
    return m_triangle_indices;
}
void OAIArea::setTriangleIndices(const QList<qint32> &triangle_indices) {
    m_triangle_indices = triangle_indices;
    m_triangle_indices_isSet = true;
}

bool OAIArea::is_triangle_indices_Set() const{
    return m_triangle_indices_isSet;
}

bool OAIArea::is_triangle_indices_Valid() const{
    return m_triangle_indices_isValid;
}

QString OAIArea::getType() const {
    return m_type;
}
void OAIArea::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIArea::is_type_Set() const{
    return m_type_isSet;
}

bool OAIArea::is_type_Valid() const{
    return m_type_isValid;
}

OAIVertex2DList OAIArea::getVertexOffsets() const {
    return m_vertex_offsets;
}
void OAIArea::setVertexOffsets(const OAIVertex2DList &vertex_offsets) {
    m_vertex_offsets = vertex_offsets;
    m_vertex_offsets_isSet = true;
}

bool OAIArea::is_vertex_offsets_Set() const{
    return m_vertex_offsets_isSet;
}

bool OAIArea::is_vertex_offsets_Valid() const{
    return m_vertex_offsets_isValid;
}

qint32 OAIArea::getZOrder() const {
    return m_z_order;
}
void OAIArea::setZOrder(const qint32 &z_order) {
    m_z_order = z_order;
    m_z_order_isSet = true;
}

bool OAIArea::is_z_order_Set() const{
    return m_z_order_isSet;
}

bool OAIArea::is_z_order_Valid() const{
    return m_z_order_isValid;
}

bool OAIArea::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basemap_z_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_external_edges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_edges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loop_breaks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triangle_indices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertex_offsets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_z_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArea::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
