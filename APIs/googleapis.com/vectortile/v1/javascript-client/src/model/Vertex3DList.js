/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Vertex3DList model module.
 * @module model/Vertex3DList
 * @version v1
 */
class Vertex3DList {
    /**
     * Constructs a new <code>Vertex3DList</code>.
     * 3D vertex list used for modeled volumes. Each entry represents an offset from the previous one in local tile coordinates. The first coordinate is offset from (0, 0, 0).
     * @alias module:model/Vertex3DList
     */
    constructor() { 
        
        Vertex3DList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vertex3DList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vertex3DList} obj Optional instance to populate.
     * @return {module:model/Vertex3DList} The populated <code>Vertex3DList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vertex3DList();

            if (data.hasOwnProperty('xOffsets')) {
                obj['xOffsets'] = ApiClient.convertToType(data['xOffsets'], ['Number']);
            }
            if (data.hasOwnProperty('yOffsets')) {
                obj['yOffsets'] = ApiClient.convertToType(data['yOffsets'], ['Number']);
            }
            if (data.hasOwnProperty('zOffsets')) {
                obj['zOffsets'] = ApiClient.convertToType(data['zOffsets'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vertex3DList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vertex3DList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['xOffsets'])) {
            throw new Error("Expected the field `xOffsets` to be an array in the JSON data but got " + data['xOffsets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['yOffsets'])) {
            throw new Error("Expected the field `yOffsets` to be an array in the JSON data but got " + data['yOffsets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['zOffsets'])) {
            throw new Error("Expected the field `zOffsets` to be an array in the JSON data but got " + data['zOffsets']);
        }

        return true;
    }


}



/**
 * List of x-offsets in local tile coordinates.
 * @member {Array.<Number>} xOffsets
 */
Vertex3DList.prototype['xOffsets'] = undefined;

/**
 * List of y-offsets in local tile coordinates.
 * @member {Array.<Number>} yOffsets
 */
Vertex3DList.prototype['yOffsets'] = undefined;

/**
 * List of z-offsets in local tile coordinates.
 * @member {Array.<Number>} zOffsets
 */
Vertex3DList.prototype['zOffsets'] = undefined;






export default Vertex3DList;

