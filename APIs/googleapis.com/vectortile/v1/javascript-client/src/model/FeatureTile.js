/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';
import ProviderInfo from './ProviderInfo';
import TileCoordinates from './TileCoordinates';

/**
 * The FeatureTile model module.
 * @module model/FeatureTile
 * @version v1
 */
class FeatureTile {
    /**
     * Constructs a new <code>FeatureTile</code>.
     * A tile containing information about the map features located in the region it covers.
     * @alias module:model/FeatureTile
     */
    constructor() { 
        
        FeatureTile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeatureTile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureTile} obj Optional instance to populate.
     * @return {module:model/FeatureTile} The populated <code>FeatureTile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureTile();

            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = TileCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [Feature]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('providers')) {
                obj['providers'] = ApiClient.convertToType(data['providers'], [ProviderInfo]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureTile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureTile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          TileCoordinates.validateJSON(data['coordinates']);
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                Feature.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['providers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['providers'])) {
                throw new Error("Expected the field `providers` to be an array in the JSON data but got " + data['providers']);
            }
            // validate the optional field `providers` (array)
            for (const item of data['providers']) {
                ProviderInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/TileCoordinates} coordinates
 */
FeatureTile.prototype['coordinates'] = undefined;

/**
 * Features present on this map tile.
 * @member {Array.<module:model/Feature>} features
 */
FeatureTile.prototype['features'] = undefined;

/**
 * Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `tiles/@1,2,3z`.
 * @member {String} name
 */
FeatureTile.prototype['name'] = undefined;

/**
 * Data providers for the data contained in this tile.
 * @member {Array.<module:model/ProviderInfo>} providers
 */
FeatureTile.prototype['providers'] = undefined;

/**
 * Tile response status code to support tile caching.
 * @member {module:model/FeatureTile.StatusEnum} status
 */
FeatureTile.prototype['status'] = undefined;

/**
 * An opaque value, usually less than 30 characters, that contains version info about this tile and the data that was used to generate it. The client should store this value in its tile cache and pass it back to the API in the client_tile_version_id field of subsequent tile requests in order to enable the API to detect when the new tile would be the same as the one the client already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.
 * @member {String} versionId
 */
FeatureTile.prototype['versionId'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FeatureTile['StatusEnum'] = {

    /**
     * value: "STATUS_OK"
     * @const
     */
    "OK": "STATUS_OK",

    /**
     * value: "STATUS_OK_DATA_UNCHANGED"
     * @const
     */
    "OK_DATA_UNCHANGED": "STATUS_OK_DATA_UNCHANGED"
};



export default FeatureTile;

