/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FirstDerivativeElevationGrid from './FirstDerivativeElevationGrid';
import SecondDerivativeElevationGrid from './SecondDerivativeElevationGrid';
import TileCoordinates from './TileCoordinates';

/**
 * The TerrainTile model module.
 * @module model/TerrainTile
 * @version v1
 */
class TerrainTile {
    /**
     * Constructs a new <code>TerrainTile</code>.
     * A tile containing information about the terrain located in the region it covers.
     * @alias module:model/TerrainTile
     */
    constructor() { 
        
        TerrainTile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TerrainTile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerrainTile} obj Optional instance to populate.
     * @return {module:model/TerrainTile} The populated <code>TerrainTile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerrainTile();

            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = TileCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('firstDerivative')) {
                obj['firstDerivative'] = FirstDerivativeElevationGrid.constructFromObject(data['firstDerivative']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('secondDerivative')) {
                obj['secondDerivative'] = SecondDerivativeElevationGrid.constructFromObject(data['secondDerivative']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerrainTile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerrainTile</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coordinates`
        if (data['coordinates']) { // data not null
          TileCoordinates.validateJSON(data['coordinates']);
        }
        // validate the optional field `firstDerivative`
        if (data['firstDerivative']) { // data not null
          FirstDerivativeElevationGrid.validateJSON(data['firstDerivative']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `secondDerivative`
        if (data['secondDerivative']) { // data not null
          SecondDerivativeElevationGrid.validateJSON(data['secondDerivative']);
        }

        return true;
    }


}



/**
 * @member {module:model/TileCoordinates} coordinates
 */
TerrainTile.prototype['coordinates'] = undefined;

/**
 * @member {module:model/FirstDerivativeElevationGrid} firstDerivative
 */
TerrainTile.prototype['firstDerivative'] = undefined;

/**
 * Resource name of the tile. The tile resource name is prefixed by its collection ID `terrain/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terrain/@1,2,3z`.
 * @member {String} name
 */
TerrainTile.prototype['name'] = undefined;

/**
 * @member {module:model/SecondDerivativeElevationGrid} secondDerivative
 */
TerrainTile.prototype['secondDerivative'] = undefined;






export default TerrainTile;

