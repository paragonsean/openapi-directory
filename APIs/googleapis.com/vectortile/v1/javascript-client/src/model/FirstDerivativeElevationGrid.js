/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Row from './Row';

/**
 * The FirstDerivativeElevationGrid model module.
 * @module model/FirstDerivativeElevationGrid
 * @version v1
 */
class FirstDerivativeElevationGrid {
    /**
     * Constructs a new <code>FirstDerivativeElevationGrid</code>.
     * A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each point within the grid represents the altitude in meters above average sea level at that location within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+ | | | N | | ^ | | | | | W &lt;-----&gt; E | | | | | v | | S | | | +-----------------+ rows[n].a[0] rows[n].a[m] Rather than storing the altitudes directly, we store the diffs between them as integers at some requested level of precision to take advantage of integer packing. The actual altitude values a[] can be reconstructed using the scale and each row&#39;s first_altitude and altitude_diff fields. More details in go/elevation-encoding-options-for-enduro under \&quot;Recommended implementation\&quot;.
     * @alias module:model/FirstDerivativeElevationGrid
     */
    constructor() { 
        
        FirstDerivativeElevationGrid.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FirstDerivativeElevationGrid</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FirstDerivativeElevationGrid} obj Optional instance to populate.
     * @return {module:model/FirstDerivativeElevationGrid} The populated <code>FirstDerivativeElevationGrid</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FirstDerivativeElevationGrid();

            if (data.hasOwnProperty('altitudeMultiplier')) {
                obj['altitudeMultiplier'] = ApiClient.convertToType(data['altitudeMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], [Row]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FirstDerivativeElevationGrid</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirstDerivativeElevationGrid</code>.
     */
    static validateJSON(data) {
        if (data['rows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rows'])) {
                throw new Error("Expected the field `rows` to be an array in the JSON data but got " + data['rows']);
            }
            // validate the optional field `rows` (array)
            for (const item of data['rows']) {
                Row.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A multiplier applied to the altitude fields below to extract the actual altitudes in meters from the elevation grid.
 * @member {Number} altitudeMultiplier
 */
FirstDerivativeElevationGrid.prototype['altitudeMultiplier'] = undefined;

/**
 * Rows of points containing altitude data making up the elevation grid. Each row is the same length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n] is the south-most row.
 * @member {Array.<module:model/Row>} rows
 */
FirstDerivativeElevationGrid.prototype['rows'] = undefined;






export default FirstDerivativeElevationGrid;

