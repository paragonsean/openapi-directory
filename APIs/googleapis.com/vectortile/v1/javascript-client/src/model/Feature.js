/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Geometry from './Geometry';
import Relation from './Relation';
import SegmentInfo from './SegmentInfo';

/**
 * The Feature model module.
 * @module model/Feature
 * @version v1
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * A feature representing a single geographic entity.
     * @alias module:model/Feature
     */
    constructor() { 
        
        Feature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('geometry')) {
                obj['geometry'] = Geometry.constructFromObject(data['geometry']);
            }
            if (data.hasOwnProperty('placeId')) {
                obj['placeId'] = ApiClient.convertToType(data['placeId'], 'String');
            }
            if (data.hasOwnProperty('relations')) {
                obj['relations'] = ApiClient.convertToType(data['relations'], [Relation]);
            }
            if (data.hasOwnProperty('segmentInfo')) {
                obj['segmentInfo'] = SegmentInfo.constructFromObject(data['segmentInfo']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `geometry`
        if (data['geometry']) { // data not null
          Geometry.validateJSON(data['geometry']);
        }
        // ensure the json data is a string
        if (data['placeId'] && !(typeof data['placeId'] === 'string' || data['placeId'] instanceof String)) {
            throw new Error("Expected the field `placeId` to be a primitive type in the JSON string but got " + data['placeId']);
        }
        if (data['relations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relations'])) {
                throw new Error("Expected the field `relations` to be an array in the JSON data but got " + data['relations']);
            }
            // validate the optional field `relations` (array)
            for (const item of data['relations']) {
                Relation.validateJSON(item);
            };
        }
        // validate the optional field `segmentInfo`
        if (data['segmentInfo']) { // data not null
          SegmentInfo.validateJSON(data['segmentInfo']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The localized name of this feature. Currently only returned for roads.
 * @member {String} displayName
 */
Feature.prototype['displayName'] = undefined;

/**
 * @member {module:model/Geometry} geometry
 */
Feature.prototype['geometry'] = undefined;

/**
 * Place ID of this feature, suitable for use in Places API details requests.
 * @member {String} placeId
 */
Feature.prototype['placeId'] = undefined;

/**
 * Relations to other features.
 * @member {Array.<module:model/Relation>} relations
 */
Feature.prototype['relations'] = undefined;

/**
 * @member {module:model/SegmentInfo} segmentInfo
 */
Feature.prototype['segmentInfo'] = undefined;

/**
 * The type of this feature.
 * @member {module:model/Feature.TypeEnum} type
 */
Feature.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Feature['TypeEnum'] = {

    /**
     * value: "FEATURE_TYPE_UNSPECIFIED"
     * @const
     */
    "FEATURE_TYPE_UNSPECIFIED": "FEATURE_TYPE_UNSPECIFIED",

    /**
     * value: "STRUCTURE"
     * @const
     */
    "STRUCTURE": "STRUCTURE",

    /**
     * value: "BAR"
     * @const
     */
    "BAR": "BAR",

    /**
     * value: "BANK"
     * @const
     */
    "BANK": "BANK",

    /**
     * value: "LODGING"
     * @const
     */
    "LODGING": "LODGING",

    /**
     * value: "CAFE"
     * @const
     */
    "CAFE": "CAFE",

    /**
     * value: "RESTAURANT"
     * @const
     */
    "RESTAURANT": "RESTAURANT",

    /**
     * value: "EVENT_VENUE"
     * @const
     */
    "EVENT_VENUE": "EVENT_VENUE",

    /**
     * value: "TOURIST_DESTINATION"
     * @const
     */
    "TOURIST_DESTINATION": "TOURIST_DESTINATION",

    /**
     * value: "SHOPPING"
     * @const
     */
    "SHOPPING": "SHOPPING",

    /**
     * value: "SCHOOL"
     * @const
     */
    "SCHOOL": "SCHOOL",

    /**
     * value: "SEGMENT"
     * @const
     */
    "SEGMENT": "SEGMENT",

    /**
     * value: "ROAD"
     * @const
     */
    "ROAD": "ROAD",

    /**
     * value: "LOCAL_ROAD"
     * @const
     */
    "LOCAL_ROAD": "LOCAL_ROAD",

    /**
     * value: "ARTERIAL_ROAD"
     * @const
     */
    "ARTERIAL_ROAD": "ARTERIAL_ROAD",

    /**
     * value: "HIGHWAY"
     * @const
     */
    "HIGHWAY": "HIGHWAY",

    /**
     * value: "CONTROLLED_ACCESS_HIGHWAY"
     * @const
     */
    "CONTROLLED_ACCESS_HIGHWAY": "CONTROLLED_ACCESS_HIGHWAY",

    /**
     * value: "FOOTPATH"
     * @const
     */
    "FOOTPATH": "FOOTPATH",

    /**
     * value: "RAIL"
     * @const
     */
    "RAIL": "RAIL",

    /**
     * value: "FERRY"
     * @const
     */
    "FERRY": "FERRY",

    /**
     * value: "REGION"
     * @const
     */
    "REGION": "REGION",

    /**
     * value: "PARK"
     * @const
     */
    "PARK": "PARK",

    /**
     * value: "BEACH"
     * @const
     */
    "BEACH": "BEACH",

    /**
     * value: "FOREST"
     * @const
     */
    "FOREST": "FOREST",

    /**
     * value: "POLITICAL"
     * @const
     */
    "POLITICAL": "POLITICAL",

    /**
     * value: "ADMINISTRATIVE_AREA1"
     * @const
     */
    "ADMINISTRATIVE_AREA1": "ADMINISTRATIVE_AREA1",

    /**
     * value: "LOCALITY"
     * @const
     */
    "LOCALITY": "LOCALITY",

    /**
     * value: "SUBLOCALITY"
     * @const
     */
    "SUBLOCALITY": "SUBLOCALITY",

    /**
     * value: "WATER"
     * @const
     */
    "WATER": "WATER"
};



export default Feature;

