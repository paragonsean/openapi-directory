/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Area from './Area';

/**
 * The ExtrudedArea model module.
 * @module model/ExtrudedArea
 * @version v1
 */
class ExtrudedArea {
    /**
     * Constructs a new <code>ExtrudedArea</code>.
     * Represents a height-extruded area: a 3D prism with a constant X-Y plane cross section. Used to represent extruded buildings. A single building may consist of several extruded areas. The min_z and max_z fields are scaled to the size of the tile. An extruded area with a max_z value of 4096 has the same height as the width of the tile that it is on.
     * @alias module:model/ExtrudedArea
     */
    constructor() { 
        
        ExtrudedArea.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExtrudedArea</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtrudedArea} obj Optional instance to populate.
     * @return {module:model/ExtrudedArea} The populated <code>ExtrudedArea</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtrudedArea();

            if (data.hasOwnProperty('area')) {
                obj['area'] = Area.constructFromObject(data['area']);
            }
            if (data.hasOwnProperty('maxZ')) {
                obj['maxZ'] = ApiClient.convertToType(data['maxZ'], 'Number');
            }
            if (data.hasOwnProperty('minZ')) {
                obj['minZ'] = ApiClient.convertToType(data['minZ'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtrudedArea</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtrudedArea</code>.
     */
    static validateJSON(data) {
        // validate the optional field `area`
        if (data['area']) { // data not null
          Area.validateJSON(data['area']);
        }

        return true;
    }


}



/**
 * @member {module:model/Area} area
 */
ExtrudedArea.prototype['area'] = undefined;

/**
 * The z-value in local tile coordinates where the extruded area ends.
 * @member {Number} maxZ
 */
ExtrudedArea.prototype['maxZ'] = undefined;

/**
 * The z-value in local tile coordinates where the extruded area begins. This is non-zero for extruded areas that begin off the ground. For example, a building with a skybridge may have an extruded area component with a non-zero min_z.
 * @member {Number} minZ
 */
ExtrudedArea.prototype['minZ'] = undefined;






export default ExtrudedArea;

