/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasemapZOrder from './BasemapZOrder';
import Vertex2DList from './Vertex2DList';

/**
 * The Line model module.
 * @module model/Line
 * @version v1
 */
class Line {
    /**
     * Constructs a new <code>Line</code>.
     * Represents a 2D polyline. Used to represent segments such as roads, train tracks, etc.
     * @alias module:model/Line
     */
    constructor() { 
        
        Line.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Line</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Line} obj Optional instance to populate.
     * @return {module:model/Line} The populated <code>Line</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Line();

            if (data.hasOwnProperty('basemapZOrder')) {
                obj['basemapZOrder'] = BasemapZOrder.constructFromObject(data['basemapZOrder']);
            }
            if (data.hasOwnProperty('vertexOffsets')) {
                obj['vertexOffsets'] = Vertex2DList.constructFromObject(data['vertexOffsets']);
            }
            if (data.hasOwnProperty('zOrder')) {
                obj['zOrder'] = ApiClient.convertToType(data['zOrder'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Line</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Line</code>.
     */
    static validateJSON(data) {
        // validate the optional field `basemapZOrder`
        if (data['basemapZOrder']) { // data not null
          BasemapZOrder.validateJSON(data['basemapZOrder']);
        }
        // validate the optional field `vertexOffsets`
        if (data['vertexOffsets']) { // data not null
          Vertex2DList.validateJSON(data['vertexOffsets']);
        }

        return true;
    }


}



/**
 * @member {module:model/BasemapZOrder} basemapZOrder
 */
Line.prototype['basemapZOrder'] = undefined;

/**
 * @member {module:model/Vertex2DList} vertexOffsets
 */
Line.prototype['vertexOffsets'] = undefined;

/**
 * The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a higher z-order. This z-ordering does not imply anything about the altitude of the area relative to the ground, but it can be used to prevent z-fighting during rendering on the client. In general, larger and more important road features will have a higher z-order line associated with them. This z-ordering can only be used to compare lines, and cannot be compared with the z_order field in the Area message. The z-order may be negative or zero. Prefer Line.basemap_z_order.
 * @member {Number} zOrder
 */
Line.prototype['zOrder'] = undefined;






export default Line;

