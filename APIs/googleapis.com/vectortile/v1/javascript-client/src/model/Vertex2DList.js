/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Vertex2DList model module.
 * @module model/Vertex2DList
 * @version v1
 */
class Vertex2DList {
    /**
     * Constructs a new <code>Vertex2DList</code>.
     * 2D vertex list used for lines and areas. Each entry represents an offset from the previous one in local tile coordinates. The first entry is offset from (0, 0). For example, the list of vertices [(1,1), (2, 2), (1, 2)] would be encoded in vertex offsets as [(1, 1), (1, 1), (-1, 0)].
     * @alias module:model/Vertex2DList
     */
    constructor() { 
        
        Vertex2DList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Vertex2DList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Vertex2DList} obj Optional instance to populate.
     * @return {module:model/Vertex2DList} The populated <code>Vertex2DList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Vertex2DList();

            if (data.hasOwnProperty('xOffsets')) {
                obj['xOffsets'] = ApiClient.convertToType(data['xOffsets'], ['Number']);
            }
            if (data.hasOwnProperty('yOffsets')) {
                obj['yOffsets'] = ApiClient.convertToType(data['yOffsets'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Vertex2DList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Vertex2DList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['xOffsets'])) {
            throw new Error("Expected the field `xOffsets` to be an array in the JSON data but got " + data['xOffsets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['yOffsets'])) {
            throw new Error("Expected the field `yOffsets` to be an array in the JSON data but got " + data['yOffsets']);
        }

        return true;
    }


}



/**
 * List of x-offsets in local tile coordinates.
 * @member {Array.<Number>} xOffsets
 */
Vertex2DList.prototype['xOffsets'] = undefined;

/**
 * List of y-offsets in local tile coordinates.
 * @member {Array.<Number>} yOffsets
 */
Vertex2DList.prototype['yOffsets'] = undefined;






export default Vertex2DList;

