/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasemapZOrder from './BasemapZOrder';
import Vertex2DList from './Vertex2DList';

/**
 * The Area model module.
 * @module model/Area
 * @version v1
 */
class Area {
    /**
     * Constructs a new <code>Area</code>.
     * Represents an area. Used to represent regions such as water, parks, etc. Next ID: 10
     * @alias module:model/Area
     */
    constructor() { 
        
        Area.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Area</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Area} obj Optional instance to populate.
     * @return {module:model/Area} The populated <code>Area</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Area();

            if (data.hasOwnProperty('basemapZOrder')) {
                obj['basemapZOrder'] = BasemapZOrder.constructFromObject(data['basemapZOrder']);
            }
            if (data.hasOwnProperty('hasExternalEdges')) {
                obj['hasExternalEdges'] = ApiClient.convertToType(data['hasExternalEdges'], 'Boolean');
            }
            if (data.hasOwnProperty('internalEdges')) {
                obj['internalEdges'] = ApiClient.convertToType(data['internalEdges'], ['Number']);
            }
            if (data.hasOwnProperty('loopBreaks')) {
                obj['loopBreaks'] = ApiClient.convertToType(data['loopBreaks'], ['Number']);
            }
            if (data.hasOwnProperty('triangleIndices')) {
                obj['triangleIndices'] = ApiClient.convertToType(data['triangleIndices'], ['Number']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vertexOffsets')) {
                obj['vertexOffsets'] = Vertex2DList.constructFromObject(data['vertexOffsets']);
            }
            if (data.hasOwnProperty('zOrder')) {
                obj['zOrder'] = ApiClient.convertToType(data['zOrder'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Area</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Area</code>.
     */
    static validateJSON(data) {
        // validate the optional field `basemapZOrder`
        if (data['basemapZOrder']) { // data not null
          BasemapZOrder.validateJSON(data['basemapZOrder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['internalEdges'])) {
            throw new Error("Expected the field `internalEdges` to be an array in the JSON data but got " + data['internalEdges']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['loopBreaks'])) {
            throw new Error("Expected the field `loopBreaks` to be an array in the JSON data but got " + data['loopBreaks']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['triangleIndices'])) {
            throw new Error("Expected the field `triangleIndices` to be an array in the JSON data but got " + data['triangleIndices']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `vertexOffsets`
        if (data['vertexOffsets']) { // data not null
          Vertex2DList.validateJSON(data['vertexOffsets']);
        }

        return true;
    }


}



/**
 * @member {module:model/BasemapZOrder} basemapZOrder
 */
Area.prototype['basemapZOrder'] = undefined;

/**
 * True if the polygon is not entirely internal to the feature that it belongs to: that is, some of the edges are bordering another feature.
 * @member {Boolean} hasExternalEdges
 */
Area.prototype['hasExternalEdges'] = undefined;

/**
 * When has_external_edges is true, the polygon has some edges that border another feature. This field indicates the internal edges that do not border another feature. Each value is an index into the vertices array, and denotes the start vertex of the internal edge (the next vertex in the boundary loop is the end of the edge). If the selected vertex is the last vertex in the boundary loop, then the edge between that vertex and the starting vertex of the loop is internal. This field may be used for styling. For example, building parapets could be placed only on the external edges of a building polygon, or water could be lighter colored near the external edges of a body of water. If has_external_edges is false, all edges are internal and this field will be empty.
 * @member {Array.<Number>} internalEdges
 */
Area.prototype['internalEdges'] = undefined;

/**
 * Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each value is an index into the vertices array indicating the beginning of a loop. For instance, values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end. This may be used in conjunction with the internal_edges field for styling polygon boundaries. Note that an edge may be on a polygon boundary but still internal to the feature. For example, a feature split across multiple tiles will have an internal polygon boundary edge along the edge of the tile.
 * @member {Array.<Number>} loopBreaks
 */
Area.prototype['loopBreaks'] = undefined;

/**
 * When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.
 * @member {Array.<Number>} triangleIndices
 */
Area.prototype['triangleIndices'] = undefined;

/**
 * The polygon encoding type used for this area.
 * @member {module:model/Area.TypeEnum} type
 */
Area.prototype['type'] = undefined;

/**
 * @member {module:model/Vertex2DList} vertexOffsets
 */
Area.prototype['vertexOffsets'] = undefined;

/**
 * The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a higher z-order. This z-ordering does not imply anything about the altitude of the line relative to the ground, but it can be used to prevent z-fighting during rendering on the client. This z-ordering can only be used to compare areas, and cannot be compared with the z_order field in the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.
 * @member {Number} zOrder
 */
Area.prototype['zOrder'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Area['TypeEnum'] = {

    /**
     * value: "TRIANGLE_FAN"
     * @const
     */
    "TRIANGLE_FAN": "TRIANGLE_FAN",

    /**
     * value: "INDEXED_TRIANGLES"
     * @const
     */
    "INDEXED_TRIANGLES": "INDEXED_TRIANGLES",

    /**
     * value: "TRIANGLE_STRIP"
     * @const
     */
    "TRIANGLE_STRIP": "TRIANGLE_STRIP"
};



export default Area;

