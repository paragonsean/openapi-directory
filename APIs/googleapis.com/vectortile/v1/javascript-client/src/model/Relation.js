/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relation model module.
 * @module model/Relation
 * @version v1
 */
class Relation {
    /**
     * Constructs a new <code>Relation</code>.
     * Represents a relation to another feature in the tile. For example, a building might be occupied by a given POI. The related feature can be retrieved using the related feature index.
     * @alias module:model/Relation
     */
    constructor() { 
        
        Relation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relation} obj Optional instance to populate.
     * @return {module:model/Relation} The populated <code>Relation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relation();

            if (data.hasOwnProperty('relatedFeatureIndex')) {
                obj['relatedFeatureIndex'] = ApiClient.convertToType(data['relatedFeatureIndex'], 'Number');
            }
            if (data.hasOwnProperty('relationType')) {
                obj['relationType'] = ApiClient.convertToType(data['relationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relationType'] && !(typeof data['relationType'] === 'string' || data['relationType'] instanceof String)) {
            throw new Error("Expected the field `relationType` to be a primitive type in the JSON string but got " + data['relationType']);
        }

        return true;
    }


}



/**
 * Zero-based index to look up the related feature from the list of features in the tile.
 * @member {Number} relatedFeatureIndex
 */
Relation.prototype['relatedFeatureIndex'] = undefined;

/**
 * Relation type between the origin feature to the related feature.
 * @member {module:model/Relation.RelationTypeEnum} relationType
 */
Relation.prototype['relationType'] = undefined;





/**
 * Allowed values for the <code>relationType</code> property.
 * @enum {String}
 * @readonly
 */
Relation['RelationTypeEnum'] = {

    /**
     * value: "RELATION_TYPE_UNSPECIFIED"
     * @const
     */
    "RELATION_TYPE_UNSPECIFIED": "RELATION_TYPE_UNSPECIFIED",

    /**
     * value: "OCCUPIES"
     * @const
     */
    "OCCUPIES": "OCCUPIES",

    /**
     * value: "PRIMARILY_OCCUPIED_BY"
     * @const
     */
    "PRIMARILY_OCCUPIED_BY": "PRIMARILY_OCCUPIED_BY"
};



export default Relation;

