/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TriangleStrip from './TriangleStrip';
import Vertex3DList from './Vertex3DList';

/**
 * The ModeledVolume model module.
 * @module model/ModeledVolume
 * @version v1
 */
class ModeledVolume {
    /**
     * Constructs a new <code>ModeledVolume</code>.
     * Represents a modeled volume in 3D space. Used to represent 3D buildings.
     * @alias module:model/ModeledVolume
     */
    constructor() { 
        
        ModeledVolume.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModeledVolume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModeledVolume} obj Optional instance to populate.
     * @return {module:model/ModeledVolume} The populated <code>ModeledVolume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModeledVolume();

            if (data.hasOwnProperty('strips')) {
                obj['strips'] = ApiClient.convertToType(data['strips'], [TriangleStrip]);
            }
            if (data.hasOwnProperty('vertexOffsets')) {
                obj['vertexOffsets'] = Vertex3DList.constructFromObject(data['vertexOffsets']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModeledVolume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModeledVolume</code>.
     */
    static validateJSON(data) {
        if (data['strips']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['strips'])) {
                throw new Error("Expected the field `strips` to be an array in the JSON data but got " + data['strips']);
            }
            // validate the optional field `strips` (array)
            for (const item of data['strips']) {
                TriangleStrip.validateJSON(item);
            };
        }
        // validate the optional field `vertexOffsets`
        if (data['vertexOffsets']) { // data not null
          Vertex3DList.validateJSON(data['vertexOffsets']);
        }

        return true;
    }


}



/**
 * The triangle strips present in this mesh.
 * @member {Array.<module:model/TriangleStrip>} strips
 */
ModeledVolume.prototype['strips'] = undefined;

/**
 * @member {module:model/Vertex3DList} vertexOffsets
 */
ModeledVolume.prototype['vertexOffsets'] = undefined;






export default ModeledVolume;

