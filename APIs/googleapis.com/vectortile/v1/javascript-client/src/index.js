/**
 * Semantic Tile API
 * Serves vector tiles containing geospatial data. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Area from './model/Area';
import BasemapZOrder from './model/BasemapZOrder';
import ExtrudedArea from './model/ExtrudedArea';
import Feature from './model/Feature';
import FeatureTile from './model/FeatureTile';
import FirstDerivativeElevationGrid from './model/FirstDerivativeElevationGrid';
import Geometry from './model/Geometry';
import Line from './model/Line';
import ModeledVolume from './model/ModeledVolume';
import ProviderInfo from './model/ProviderInfo';
import Relation from './model/Relation';
import RoadInfo from './model/RoadInfo';
import Row from './model/Row';
import SecondDerivativeElevationGrid from './model/SecondDerivativeElevationGrid';
import SegmentInfo from './model/SegmentInfo';
import TerrainTile from './model/TerrainTile';
import TileCoordinates from './model/TileCoordinates';
import TriangleStrip from './model/TriangleStrip';
import Vertex2DList from './model/Vertex2DList';
import Vertex3DList from './model/Vertex3DList';
import TerraintilesApi from './api/TerraintilesApi';


/**
* Serves vector tiles containing geospatial data. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SemanticTileApi = require('index'); // See note below*.
* var xxxSvc = new SemanticTileApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SemanticTileApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SemanticTileApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SemanticTileApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Area model constructor.
     * @property {module:model/Area}
     */
    Area,

    /**
     * The BasemapZOrder model constructor.
     * @property {module:model/BasemapZOrder}
     */
    BasemapZOrder,

    /**
     * The ExtrudedArea model constructor.
     * @property {module:model/ExtrudedArea}
     */
    ExtrudedArea,

    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature,

    /**
     * The FeatureTile model constructor.
     * @property {module:model/FeatureTile}
     */
    FeatureTile,

    /**
     * The FirstDerivativeElevationGrid model constructor.
     * @property {module:model/FirstDerivativeElevationGrid}
     */
    FirstDerivativeElevationGrid,

    /**
     * The Geometry model constructor.
     * @property {module:model/Geometry}
     */
    Geometry,

    /**
     * The Line model constructor.
     * @property {module:model/Line}
     */
    Line,

    /**
     * The ModeledVolume model constructor.
     * @property {module:model/ModeledVolume}
     */
    ModeledVolume,

    /**
     * The ProviderInfo model constructor.
     * @property {module:model/ProviderInfo}
     */
    ProviderInfo,

    /**
     * The Relation model constructor.
     * @property {module:model/Relation}
     */
    Relation,

    /**
     * The RoadInfo model constructor.
     * @property {module:model/RoadInfo}
     */
    RoadInfo,

    /**
     * The Row model constructor.
     * @property {module:model/Row}
     */
    Row,

    /**
     * The SecondDerivativeElevationGrid model constructor.
     * @property {module:model/SecondDerivativeElevationGrid}
     */
    SecondDerivativeElevationGrid,

    /**
     * The SegmentInfo model constructor.
     * @property {module:model/SegmentInfo}
     */
    SegmentInfo,

    /**
     * The TerrainTile model constructor.
     * @property {module:model/TerrainTile}
     */
    TerrainTile,

    /**
     * The TileCoordinates model constructor.
     * @property {module:model/TileCoordinates}
     */
    TileCoordinates,

    /**
     * The TriangleStrip model constructor.
     * @property {module:model/TriangleStrip}
     */
    TriangleStrip,

    /**
     * The Vertex2DList model constructor.
     * @property {module:model/Vertex2DList}
     */
    Vertex2DList,

    /**
     * The Vertex3DList model constructor.
     * @property {module:model/Vertex3DList}
     */
    Vertex3DList,

    /**
    * The TerraintilesApi service constructor.
    * @property {module:api/TerraintilesApi}
    */
    TerraintilesApi
};
