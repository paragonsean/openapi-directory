/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BucketLogging model module.
 * @module model/BucketLogging
 * @version v1
 */
class BucketLogging {
    /**
     * Constructs a new <code>BucketLogging</code>.
     * The bucket&#39;s logging configuration, which defines the destination bucket and optional name prefix for the current bucket&#39;s logs.
     * @alias module:model/BucketLogging
     */
    constructor() { 
        
        BucketLogging.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BucketLogging</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BucketLogging} obj Optional instance to populate.
     * @return {module:model/BucketLogging} The populated <code>BucketLogging</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BucketLogging();

            if (data.hasOwnProperty('logBucket')) {
                obj['logBucket'] = ApiClient.convertToType(data['logBucket'], 'String');
            }
            if (data.hasOwnProperty('logObjectPrefix')) {
                obj['logObjectPrefix'] = ApiClient.convertToType(data['logObjectPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BucketLogging</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BucketLogging</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['logBucket'] && !(typeof data['logBucket'] === 'string' || data['logBucket'] instanceof String)) {
            throw new Error("Expected the field `logBucket` to be a primitive type in the JSON string but got " + data['logBucket']);
        }
        // ensure the json data is a string
        if (data['logObjectPrefix'] && !(typeof data['logObjectPrefix'] === 'string' || data['logObjectPrefix'] instanceof String)) {
            throw new Error("Expected the field `logObjectPrefix` to be a primitive type in the JSON string but got " + data['logObjectPrefix']);
        }

        return true;
    }


}



/**
 * The destination bucket where the current bucket's logs should be placed.
 * @member {String} logBucket
 */
BucketLogging.prototype['logBucket'] = undefined;

/**
 * A prefix for log object names.
 * @member {String} logObjectPrefix
 */
BucketLogging.prototype['logObjectPrefix'] = undefined;






export default BucketLogging;

