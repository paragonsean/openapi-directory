/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Notification model module.
 * @module model/Notification
 * @version v1
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * A subscription to receive Google PubSub notifications.
     * @alias module:model/Notification
     */
    constructor() { 
        
        Notification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#notification';
        obj['payload_format'] = 'JSON_API_V1';
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('custom_attributes')) {
                obj['custom_attributes'] = ApiClient.convertToType(data['custom_attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('event_types')) {
                obj['event_types'] = ApiClient.convertToType(data['event_types'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('object_name_prefix')) {
                obj['object_name_prefix'] = ApiClient.convertToType(data['object_name_prefix'], 'String');
            }
            if (data.hasOwnProperty('payload_format')) {
                obj['payload_format'] = ApiClient.convertToType(data['payload_format'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['event_types'])) {
            throw new Error("Expected the field `event_types` to be an array in the JSON data but got " + data['event_types']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['object_name_prefix'] && !(typeof data['object_name_prefix'] === 'string' || data['object_name_prefix'] instanceof String)) {
            throw new Error("Expected the field `object_name_prefix` to be a primitive type in the JSON string but got " + data['object_name_prefix']);
        }
        // ensure the json data is a string
        if (data['payload_format'] && !(typeof data['payload_format'] === 'string' || data['payload_format'] instanceof String)) {
            throw new Error("Expected the field `payload_format` to be a primitive type in the JSON string but got " + data['payload_format']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
 * @member {Object.<String, String>} custom_attributes
 */
Notification.prototype['custom_attributes'] = undefined;

/**
 * HTTP 1.1 Entity tag for this subscription notification.
 * @member {String} etag
 */
Notification.prototype['etag'] = undefined;

/**
 * If present, only send notifications about listed event types. If empty, sent notifications for all event types.
 * @member {Array.<String>} event_types
 */
Notification.prototype['event_types'] = undefined;

/**
 * The ID of the notification.
 * @member {String} id
 */
Notification.prototype['id'] = undefined;

/**
 * The kind of item this is. For notifications, this is always storage#notification.
 * @member {String} kind
 * @default 'storage#notification'
 */
Notification.prototype['kind'] = 'storage#notification';

/**
 * If present, only apply this notification configuration to object names that begin with this prefix.
 * @member {String} object_name_prefix
 */
Notification.prototype['object_name_prefix'] = undefined;

/**
 * The desired content of the Payload.
 * @member {String} payload_format
 * @default 'JSON_API_V1'
 */
Notification.prototype['payload_format'] = 'JSON_API_V1';

/**
 * The canonical URL of this notification.
 * @member {String} selfLink
 */
Notification.prototype['selfLink'] = undefined;

/**
 * The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
 * @member {String} topic
 */
Notification.prototype['topic'] = undefined;






export default Notification;

