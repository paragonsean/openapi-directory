/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AnywhereCache model module.
 * @module model/AnywhereCache
 * @version v1
 */
class AnywhereCache {
    /**
     * Constructs a new <code>AnywhereCache</code>.
     * An Anywhere Cache instance.
     * @alias module:model/AnywhereCache
     */
    constructor() { 
        
        AnywhereCache.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#anywhereCache';
    }

    /**
     * Constructs a <code>AnywhereCache</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnywhereCache} obj Optional instance to populate.
     * @return {module:model/AnywhereCache} The populated <code>AnywhereCache</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnywhereCache();

            if (data.hasOwnProperty('admissionPolicy')) {
                obj['admissionPolicy'] = ApiClient.convertToType(data['admissionPolicy'], 'String');
            }
            if (data.hasOwnProperty('anywhereCacheId')) {
                obj['anywhereCacheId'] = ApiClient.convertToType(data['anywhereCacheId'], 'String');
            }
            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pendingUpdate')) {
                obj['pendingUpdate'] = ApiClient.convertToType(data['pendingUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnywhereCache</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnywhereCache</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['admissionPolicy'] && !(typeof data['admissionPolicy'] === 'string' || data['admissionPolicy'] instanceof String)) {
            throw new Error("Expected the field `admissionPolicy` to be a primitive type in the JSON string but got " + data['admissionPolicy']);
        }
        // ensure the json data is a string
        if (data['anywhereCacheId'] && !(typeof data['anywhereCacheId'] === 'string' || data['anywhereCacheId'] instanceof String)) {
            throw new Error("Expected the field `anywhereCacheId` to be a primitive type in the JSON string but got " + data['anywhereCacheId']);
        }
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * The cache-level entry admission policy.
 * @member {String} admissionPolicy
 */
AnywhereCache.prototype['admissionPolicy'] = undefined;

/**
 * The ID of the Anywhere cache instance.
 * @member {String} anywhereCacheId
 */
AnywhereCache.prototype['anywhereCacheId'] = undefined;

/**
 * The name of the bucket containing this cache instance.
 * @member {String} bucket
 */
AnywhereCache.prototype['bucket'] = undefined;

/**
 * The creation time of the cache instance in RFC 3339 format.
 * @member {Date} createTime
 */
AnywhereCache.prototype['createTime'] = undefined;

/**
 * The ID of the resource, including the project number, bucket name and anywhere cache ID.
 * @member {String} id
 */
AnywhereCache.prototype['id'] = undefined;

/**
 * The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache.
 * @member {String} kind
 * @default 'storage#anywhereCache'
 */
AnywhereCache.prototype['kind'] = 'storage#anywhereCache';

/**
 * True if the cache instance has an active Update long-running operation.
 * @member {Boolean} pendingUpdate
 */
AnywhereCache.prototype['pendingUpdate'] = undefined;

/**
 * The link to this cache instance.
 * @member {String} selfLink
 */
AnywhereCache.prototype['selfLink'] = undefined;

/**
 * The current state of the cache instance.
 * @member {String} state
 */
AnywhereCache.prototype['state'] = undefined;

/**
 * The TTL of all cache entries in whole seconds. e.g., \"7200s\". 
 * @member {String} ttl
 */
AnywhereCache.prototype['ttl'] = undefined;

/**
 * The modification time of the cache instance metadata in RFC 3339 format.
 * @member {Date} updateTime
 */
AnywhereCache.prototype['updateTime'] = undefined;

/**
 * The zone in which the cache instance is running. For example, us-central1-a.
 * @member {String} zone
 */
AnywhereCache.prototype['zone'] = undefined;






export default AnywhereCache;

