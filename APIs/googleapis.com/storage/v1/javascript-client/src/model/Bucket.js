/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BucketAccessControl from './BucketAccessControl';
import BucketAutoclass from './BucketAutoclass';
import BucketBilling from './BucketBilling';
import BucketCorsInner from './BucketCorsInner';
import BucketCustomPlacementConfig from './BucketCustomPlacementConfig';
import BucketEncryption from './BucketEncryption';
import BucketHierarchicalNamespace from './BucketHierarchicalNamespace';
import BucketIamConfiguration from './BucketIamConfiguration';
import BucketLifecycle from './BucketLifecycle';
import BucketLogging from './BucketLogging';
import BucketObjectRetention from './BucketObjectRetention';
import BucketOwner from './BucketOwner';
import BucketRetentionPolicy from './BucketRetentionPolicy';
import BucketSoftDeletePolicy from './BucketSoftDeletePolicy';
import BucketVersioning from './BucketVersioning';
import BucketWebsite from './BucketWebsite';
import ObjectAccessControl from './ObjectAccessControl';

/**
 * The Bucket model module.
 * @module model/Bucket
 * @version v1
 */
class Bucket {
    /**
     * Constructs a new <code>Bucket</code>.
     * A bucket.
     * @alias module:model/Bucket
     */
    constructor() { 
        
        Bucket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#bucket';
    }

    /**
     * Constructs a <code>Bucket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bucket} obj Optional instance to populate.
     * @return {module:model/Bucket} The populated <code>Bucket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bucket();

            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ApiClient.convertToType(data['acl'], [BucketAccessControl]);
            }
            if (data.hasOwnProperty('autoclass')) {
                obj['autoclass'] = BucketAutoclass.constructFromObject(data['autoclass']);
            }
            if (data.hasOwnProperty('billing')) {
                obj['billing'] = BucketBilling.constructFromObject(data['billing']);
            }
            if (data.hasOwnProperty('cors')) {
                obj['cors'] = ApiClient.convertToType(data['cors'], [BucketCorsInner]);
            }
            if (data.hasOwnProperty('customPlacementConfig')) {
                obj['customPlacementConfig'] = BucketCustomPlacementConfig.constructFromObject(data['customPlacementConfig']);
            }
            if (data.hasOwnProperty('defaultEventBasedHold')) {
                obj['defaultEventBasedHold'] = ApiClient.convertToType(data['defaultEventBasedHold'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultObjectAcl')) {
                obj['defaultObjectAcl'] = ApiClient.convertToType(data['defaultObjectAcl'], [ObjectAccessControl]);
            }
            if (data.hasOwnProperty('encryption')) {
                obj['encryption'] = BucketEncryption.constructFromObject(data['encryption']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('hierarchicalNamespace')) {
                obj['hierarchicalNamespace'] = BucketHierarchicalNamespace.constructFromObject(data['hierarchicalNamespace']);
            }
            if (data.hasOwnProperty('iamConfiguration')) {
                obj['iamConfiguration'] = BucketIamConfiguration.constructFromObject(data['iamConfiguration']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('lifecycle')) {
                obj['lifecycle'] = BucketLifecycle.constructFromObject(data['lifecycle']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('locationType')) {
                obj['locationType'] = ApiClient.convertToType(data['locationType'], 'String');
            }
            if (data.hasOwnProperty('logging')) {
                obj['logging'] = BucketLogging.constructFromObject(data['logging']);
            }
            if (data.hasOwnProperty('metageneration')) {
                obj['metageneration'] = ApiClient.convertToType(data['metageneration'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectRetention')) {
                obj['objectRetention'] = BucketObjectRetention.constructFromObject(data['objectRetention']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = BucketOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('projectNumber')) {
                obj['projectNumber'] = ApiClient.convertToType(data['projectNumber'], 'String');
            }
            if (data.hasOwnProperty('retentionPolicy')) {
                obj['retentionPolicy'] = BucketRetentionPolicy.constructFromObject(data['retentionPolicy']);
            }
            if (data.hasOwnProperty('rpo')) {
                obj['rpo'] = ApiClient.convertToType(data['rpo'], 'String');
            }
            if (data.hasOwnProperty('satisfiesPZS')) {
                obj['satisfiesPZS'] = ApiClient.convertToType(data['satisfiesPZS'], 'Boolean');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('softDeletePolicy')) {
                obj['softDeletePolicy'] = BucketSoftDeletePolicy.constructFromObject(data['softDeletePolicy']);
            }
            if (data.hasOwnProperty('storageClass')) {
                obj['storageClass'] = ApiClient.convertToType(data['storageClass'], 'String');
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('versioning')) {
                obj['versioning'] = BucketVersioning.constructFromObject(data['versioning']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = BucketWebsite.constructFromObject(data['website']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bucket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bucket</code>.
     */
    static validateJSON(data) {
        if (data['acl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acl'])) {
                throw new Error("Expected the field `acl` to be an array in the JSON data but got " + data['acl']);
            }
            // validate the optional field `acl` (array)
            for (const item of data['acl']) {
                BucketAccessControl.validateJSON(item);
            };
        }
        // validate the optional field `autoclass`
        if (data['autoclass']) { // data not null
          BucketAutoclass.validateJSON(data['autoclass']);
        }
        // validate the optional field `billing`
        if (data['billing']) { // data not null
          BucketBilling.validateJSON(data['billing']);
        }
        if (data['cors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cors'])) {
                throw new Error("Expected the field `cors` to be an array in the JSON data but got " + data['cors']);
            }
            // validate the optional field `cors` (array)
            for (const item of data['cors']) {
                BucketCorsInner.validateJSON(item);
            };
        }
        // validate the optional field `customPlacementConfig`
        if (data['customPlacementConfig']) { // data not null
          BucketCustomPlacementConfig.validateJSON(data['customPlacementConfig']);
        }
        if (data['defaultObjectAcl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultObjectAcl'])) {
                throw new Error("Expected the field `defaultObjectAcl` to be an array in the JSON data but got " + data['defaultObjectAcl']);
            }
            // validate the optional field `defaultObjectAcl` (array)
            for (const item of data['defaultObjectAcl']) {
                ObjectAccessControl.validateJSON(item);
            };
        }
        // validate the optional field `encryption`
        if (data['encryption']) { // data not null
          BucketEncryption.validateJSON(data['encryption']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `hierarchicalNamespace`
        if (data['hierarchicalNamespace']) { // data not null
          BucketHierarchicalNamespace.validateJSON(data['hierarchicalNamespace']);
        }
        // validate the optional field `iamConfiguration`
        if (data['iamConfiguration']) { // data not null
          BucketIamConfiguration.validateJSON(data['iamConfiguration']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lifecycle`
        if (data['lifecycle']) { // data not null
          BucketLifecycle.validateJSON(data['lifecycle']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['locationType'] && !(typeof data['locationType'] === 'string' || data['locationType'] instanceof String)) {
            throw new Error("Expected the field `locationType` to be a primitive type in the JSON string but got " + data['locationType']);
        }
        // validate the optional field `logging`
        if (data['logging']) { // data not null
          BucketLogging.validateJSON(data['logging']);
        }
        // ensure the json data is a string
        if (data['metageneration'] && !(typeof data['metageneration'] === 'string' || data['metageneration'] instanceof String)) {
            throw new Error("Expected the field `metageneration` to be a primitive type in the JSON string but got " + data['metageneration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `objectRetention`
        if (data['objectRetention']) { // data not null
          BucketObjectRetention.validateJSON(data['objectRetention']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          BucketOwner.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['projectNumber'] && !(typeof data['projectNumber'] === 'string' || data['projectNumber'] instanceof String)) {
            throw new Error("Expected the field `projectNumber` to be a primitive type in the JSON string but got " + data['projectNumber']);
        }
        // validate the optional field `retentionPolicy`
        if (data['retentionPolicy']) { // data not null
          BucketRetentionPolicy.validateJSON(data['retentionPolicy']);
        }
        // ensure the json data is a string
        if (data['rpo'] && !(typeof data['rpo'] === 'string' || data['rpo'] instanceof String)) {
            throw new Error("Expected the field `rpo` to be a primitive type in the JSON string but got " + data['rpo']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // validate the optional field `softDeletePolicy`
        if (data['softDeletePolicy']) { // data not null
          BucketSoftDeletePolicy.validateJSON(data['softDeletePolicy']);
        }
        // ensure the json data is a string
        if (data['storageClass'] && !(typeof data['storageClass'] === 'string' || data['storageClass'] instanceof String)) {
            throw new Error("Expected the field `storageClass` to be a primitive type in the JSON string but got " + data['storageClass']);
        }
        // validate the optional field `versioning`
        if (data['versioning']) { // data not null
          BucketVersioning.validateJSON(data['versioning']);
        }
        // validate the optional field `website`
        if (data['website']) { // data not null
          BucketWebsite.validateJSON(data['website']);
        }

        return true;
    }


}



/**
 * Access controls on the bucket.
 * @member {Array.<module:model/BucketAccessControl>} acl
 */
Bucket.prototype['acl'] = undefined;

/**
 * @member {module:model/BucketAutoclass} autoclass
 */
Bucket.prototype['autoclass'] = undefined;

/**
 * @member {module:model/BucketBilling} billing
 */
Bucket.prototype['billing'] = undefined;

/**
 * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
 * @member {Array.<module:model/BucketCorsInner>} cors
 */
Bucket.prototype['cors'] = undefined;

/**
 * @member {module:model/BucketCustomPlacementConfig} customPlacementConfig
 */
Bucket.prototype['customPlacementConfig'] = undefined;

/**
 * The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
 * @member {Boolean} defaultEventBasedHold
 */
Bucket.prototype['defaultEventBasedHold'] = undefined;

/**
 * Default access controls to apply to new objects when no ACL is provided.
 * @member {Array.<module:model/ObjectAccessControl>} defaultObjectAcl
 */
Bucket.prototype['defaultObjectAcl'] = undefined;

/**
 * @member {module:model/BucketEncryption} encryption
 */
Bucket.prototype['encryption'] = undefined;

/**
 * HTTP 1.1 Entity tag for the bucket.
 * @member {String} etag
 */
Bucket.prototype['etag'] = undefined;

/**
 * @member {module:model/BucketHierarchicalNamespace} hierarchicalNamespace
 */
Bucket.prototype['hierarchicalNamespace'] = undefined;

/**
 * @member {module:model/BucketIamConfiguration} iamConfiguration
 */
Bucket.prototype['iamConfiguration'] = undefined;

/**
 * The ID of the bucket. For buckets, the id and name properties are the same.
 * @member {String} id
 */
Bucket.prototype['id'] = undefined;

/**
 * The kind of item this is. For buckets, this is always storage#bucket.
 * @member {String} kind
 * @default 'storage#bucket'
 */
Bucket.prototype['kind'] = 'storage#bucket';

/**
 * User-provided labels, in key/value pairs.
 * @member {Object.<String, String>} labels
 */
Bucket.prototype['labels'] = undefined;

/**
 * @member {module:model/BucketLifecycle} lifecycle
 */
Bucket.prototype['lifecycle'] = undefined;

/**
 * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
 * @member {String} location
 */
Bucket.prototype['location'] = undefined;

/**
 * The type of the bucket location.
 * @member {String} locationType
 */
Bucket.prototype['locationType'] = undefined;

/**
 * @member {module:model/BucketLogging} logging
 */
Bucket.prototype['logging'] = undefined;

/**
 * The metadata generation of this bucket.
 * @member {String} metageneration
 */
Bucket.prototype['metageneration'] = undefined;

/**
 * The name of the bucket.
 * @member {String} name
 */
Bucket.prototype['name'] = undefined;

/**
 * @member {module:model/BucketObjectRetention} objectRetention
 */
Bucket.prototype['objectRetention'] = undefined;

/**
 * @member {module:model/BucketOwner} owner
 */
Bucket.prototype['owner'] = undefined;

/**
 * The project number of the project the bucket belongs to.
 * @member {String} projectNumber
 */
Bucket.prototype['projectNumber'] = undefined;

/**
 * @member {module:model/BucketRetentionPolicy} retentionPolicy
 */
Bucket.prototype['retentionPolicy'] = undefined;

/**
 * The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
 * @member {String} rpo
 */
Bucket.prototype['rpo'] = undefined;

/**
 * Reserved for future use.
 * @member {Boolean} satisfiesPZS
 */
Bucket.prototype['satisfiesPZS'] = undefined;

/**
 * The URI of this bucket.
 * @member {String} selfLink
 */
Bucket.prototype['selfLink'] = undefined;

/**
 * @member {module:model/BucketSoftDeletePolicy} softDeletePolicy
 */
Bucket.prototype['softDeletePolicy'] = undefined;

/**
 * The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
 * @member {String} storageClass
 */
Bucket.prototype['storageClass'] = undefined;

/**
 * The creation time of the bucket in RFC 3339 format.
 * @member {Date} timeCreated
 */
Bucket.prototype['timeCreated'] = undefined;

/**
 * The modification time of the bucket in RFC 3339 format.
 * @member {Date} updated
 */
Bucket.prototype['updated'] = undefined;

/**
 * @member {module:model/BucketVersioning} versioning
 */
Bucket.prototype['versioning'] = undefined;

/**
 * @member {module:model/BucketWebsite} website
 */
Bucket.prototype['website'] = undefined;






export default Bucket;

