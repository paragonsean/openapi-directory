/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BucketAccessControlProjectTeam from './BucketAccessControlProjectTeam';

/**
 * The ObjectAccessControl model module.
 * @module model/ObjectAccessControl
 * @version v1
 */
class ObjectAccessControl {
    /**
     * Constructs a new <code>ObjectAccessControl</code>.
     * An access-control entry.
     * @alias module:model/ObjectAccessControl
     */
    constructor() { 
        
        ObjectAccessControl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#objectAccessControl';
    }

    /**
     * Constructs a <code>ObjectAccessControl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectAccessControl} obj Optional instance to populate.
     * @return {module:model/ObjectAccessControl} The populated <code>ObjectAccessControl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectAccessControl();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('generation')) {
                obj['generation'] = ApiClient.convertToType(data['generation'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('projectTeam')) {
                obj['projectTeam'] = BucketAccessControlProjectTeam.constructFromObject(data['projectTeam']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectAccessControl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectAccessControl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['generation'] && !(typeof data['generation'] === 'string' || data['generation'] instanceof String)) {
            throw new Error("Expected the field `generation` to be a primitive type in the JSON string but got " + data['generation']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `projectTeam`
        if (data['projectTeam']) { // data not null
          BucketAccessControlProjectTeam.validateJSON(data['projectTeam']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }

        return true;
    }


}



/**
 * The name of the bucket.
 * @member {String} bucket
 */
ObjectAccessControl.prototype['bucket'] = undefined;

/**
 * The domain associated with the entity, if any.
 * @member {String} domain
 */
ObjectAccessControl.prototype['domain'] = undefined;

/**
 * The email address associated with the entity, if any.
 * @member {String} email
 */
ObjectAccessControl.prototype['email'] = undefined;

/**
 * The entity holding the permission, in one of the following forms:  - user-userId  - user-email  - group-groupId  - group-email  - domain-domain  - project-team-projectId  - allUsers  - allAuthenticatedUsers Examples:  - The user liz@example.com would be user-liz@example.com.  - The group example@googlegroups.com would be group-example@googlegroups.com.  - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
 * @member {String} entity
 */
ObjectAccessControl.prototype['entity'] = undefined;

/**
 * The ID for the entity, if any.
 * @member {String} entityId
 */
ObjectAccessControl.prototype['entityId'] = undefined;

/**
 * HTTP 1.1 Entity tag for the access-control entry.
 * @member {String} etag
 */
ObjectAccessControl.prototype['etag'] = undefined;

/**
 * The content generation of the object, if applied to an object.
 * @member {String} generation
 */
ObjectAccessControl.prototype['generation'] = undefined;

/**
 * The ID of the access-control entry.
 * @member {String} id
 */
ObjectAccessControl.prototype['id'] = undefined;

/**
 * The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
 * @member {String} kind
 * @default 'storage#objectAccessControl'
 */
ObjectAccessControl.prototype['kind'] = 'storage#objectAccessControl';

/**
 * The name of the object, if applied to an object.
 * @member {String} object
 */
ObjectAccessControl.prototype['object'] = undefined;

/**
 * @member {module:model/BucketAccessControlProjectTeam} projectTeam
 */
ObjectAccessControl.prototype['projectTeam'] = undefined;

/**
 * The access permission for the entity.
 * @member {String} role
 */
ObjectAccessControl.prototype['role'] = undefined;

/**
 * The link to this access-control entry.
 * @member {String} selfLink
 */
ObjectAccessControl.prototype['selfLink'] = undefined;






export default ObjectAccessControl;

