/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagedFolder model module.
 * @module model/ManagedFolder
 * @version v1
 */
class ManagedFolder {
    /**
     * Constructs a new <code>ManagedFolder</code>.
     * A managed folder.
     * @alias module:model/ManagedFolder
     */
    constructor() { 
        
        ManagedFolder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#managedFolder';
    }

    /**
     * Constructs a <code>ManagedFolder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedFolder} obj Optional instance to populate.
     * @return {module:model/ManagedFolder} The populated <code>ManagedFolder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedFolder();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('metageneration')) {
                obj['metageneration'] = ApiClient.convertToType(data['metageneration'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedFolder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedFolder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucket'] && !(typeof data['bucket'] === 'string' || data['bucket'] instanceof String)) {
            throw new Error("Expected the field `bucket` to be a primitive type in the JSON string but got " + data['bucket']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['metageneration'] && !(typeof data['metageneration'] === 'string' || data['metageneration'] instanceof String)) {
            throw new Error("Expected the field `metageneration` to be a primitive type in the JSON string but got " + data['metageneration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }

        return true;
    }


}



/**
 * The name of the bucket containing this managed folder.
 * @member {String} bucket
 */
ManagedFolder.prototype['bucket'] = undefined;

/**
 * The creation time of the managed folder in RFC 3339 format.
 * @member {Date} createTime
 */
ManagedFolder.prototype['createTime'] = undefined;

/**
 * The ID of the managed folder, including the bucket name and managed folder name.
 * @member {String} id
 */
ManagedFolder.prototype['id'] = undefined;

/**
 * The kind of item this is. For managed folders, this is always storage#managedFolder.
 * @member {String} kind
 * @default 'storage#managedFolder'
 */
ManagedFolder.prototype['kind'] = 'storage#managedFolder';

/**
 * The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
 * @member {String} metageneration
 */
ManagedFolder.prototype['metageneration'] = undefined;

/**
 * The name of the managed folder. Required if not specified by URL parameter.
 * @member {String} name
 */
ManagedFolder.prototype['name'] = undefined;

/**
 * The link to this managed folder.
 * @member {String} selfLink
 */
ManagedFolder.prototype['selfLink'] = undefined;

/**
 * The last update time of the managed folder metadata in RFC 3339 format.
 * @member {Date} updateTime
 */
ManagedFolder.prototype['updateTime'] = undefined;






export default ManagedFolder;

