/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComposeRequestSourceObjectsInner from './ComposeRequestSourceObjectsInner';
import ModelObject from './ModelObject';

/**
 * The ComposeRequest model module.
 * @module model/ComposeRequest
 * @version v1
 */
class ComposeRequest {
    /**
     * Constructs a new <code>ComposeRequest</code>.
     * A Compose request.
     * @alias module:model/ComposeRequest
     */
    constructor() { 
        
        ComposeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#composeRequest';
    }

    /**
     * Constructs a <code>ComposeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComposeRequest} obj Optional instance to populate.
     * @return {module:model/ComposeRequest} The populated <code>ComposeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComposeRequest();

            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ModelObject.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('sourceObjects')) {
                obj['sourceObjects'] = ApiClient.convertToType(data['sourceObjects'], [ComposeRequestSourceObjectsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComposeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComposeRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          ModelObject.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['sourceObjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sourceObjects'])) {
                throw new Error("Expected the field `sourceObjects` to be an array in the JSON data but got " + data['sourceObjects']);
            }
            // validate the optional field `sourceObjects` (array)
            for (const item of data['sourceObjects']) {
                ComposeRequestSourceObjectsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ModelObject} destination
 */
ComposeRequest.prototype['destination'] = undefined;

/**
 * The kind of item this is.
 * @member {String} kind
 * @default 'storage#composeRequest'
 */
ComposeRequest.prototype['kind'] = 'storage#composeRequest';

/**
 * The list of source objects that will be concatenated into a single object.
 * @member {Array.<module:model/ComposeRequestSourceObjectsInner>} sourceObjects
 */
ComposeRequest.prototype['sourceObjects'] = undefined;






export default ComposeRequest;

