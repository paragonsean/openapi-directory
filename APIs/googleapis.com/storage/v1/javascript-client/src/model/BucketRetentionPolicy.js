/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BucketRetentionPolicy model module.
 * @module model/BucketRetentionPolicy
 * @version v1
 */
class BucketRetentionPolicy {
    /**
     * Constructs a new <code>BucketRetentionPolicy</code>.
     * The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
     * @alias module:model/BucketRetentionPolicy
     */
    constructor() { 
        
        BucketRetentionPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BucketRetentionPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BucketRetentionPolicy} obj Optional instance to populate.
     * @return {module:model/BucketRetentionPolicy} The populated <code>BucketRetentionPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BucketRetentionPolicy();

            if (data.hasOwnProperty('effectiveTime')) {
                obj['effectiveTime'] = ApiClient.convertToType(data['effectiveTime'], 'Date');
            }
            if (data.hasOwnProperty('isLocked')) {
                obj['isLocked'] = ApiClient.convertToType(data['isLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('retentionPeriod')) {
                obj['retentionPeriod'] = ApiClient.convertToType(data['retentionPeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BucketRetentionPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BucketRetentionPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['retentionPeriod'] && !(typeof data['retentionPeriod'] === 'string' || data['retentionPeriod'] instanceof String)) {
            throw new Error("Expected the field `retentionPeriod` to be a primitive type in the JSON string but got " + data['retentionPeriod']);
        }

        return true;
    }


}



/**
 * Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
 * @member {Date} effectiveTime
 */
BucketRetentionPolicy.prototype['effectiveTime'] = undefined;

/**
 * Once locked, an object retention policy cannot be modified.
 * @member {Boolean} isLocked
 */
BucketRetentionPolicy.prototype['isLocked'] = undefined;

/**
 * The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
 * @member {String} retentionPeriod
 */
BucketRetentionPolicy.prototype['retentionPeriod'] = undefined;






export default BucketRetentionPolicy;

