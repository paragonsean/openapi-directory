/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestIamPermissionsResponse model module.
 * @module model/TestIamPermissionsResponse
 * @version v1
 */
class TestIamPermissionsResponse {
    /**
     * Constructs a new <code>TestIamPermissionsResponse</code>.
     * A storage.(buckets|objects|managedFolders).testIamPermissions response.
     * @alias module:model/TestIamPermissionsResponse
     */
    constructor() { 
        
        TestIamPermissionsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#testIamPermissionsResponse';
    }

    /**
     * Constructs a <code>TestIamPermissionsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestIamPermissionsResponse} obj Optional instance to populate.
     * @return {module:model/TestIamPermissionsResponse} The populated <code>TestIamPermissionsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestIamPermissionsResponse();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestIamPermissionsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestIamPermissionsResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }

        return true;
    }


}



/**
 * The kind of item this is.
 * @member {String} kind
 * @default 'storage#testIamPermissionsResponse'
 */
TestIamPermissionsResponse.prototype['kind'] = 'storage#testIamPermissionsResponse';

/**
 * The permissions held by the caller. Permissions are always of the format storage.resource.capability, where resource is one of buckets, objects, or managedFolders. The supported permissions are as follows:   - storage.buckets.delete — Delete bucket.   - storage.buckets.get — Read bucket metadata.   - storage.buckets.getIamPolicy — Read bucket IAM policy.   - storage.buckets.create — Create bucket.   - storage.buckets.list — List buckets.   - storage.buckets.setIamPolicy — Update bucket IAM policy.   - storage.buckets.update — Update bucket metadata.   - storage.objects.delete — Delete object.   - storage.objects.get — Read object data and metadata.   - storage.objects.getIamPolicy — Read object IAM policy.   - storage.objects.create — Create object.   - storage.objects.list — List objects.   - storage.objects.setIamPolicy — Update object IAM policy.   - storage.objects.update — Update object metadata.  - storage.managedFolders.delete — Delete managed folder.   - storage.managedFolders.get — Read managed folder metadata.   - storage.managedFolders.getIamPolicy — Read managed folder IAM policy.   - storage.managedFolders.create — Create managed folder.   - storage.managedFolders.list — List managed folders.   - storage.managedFolders.setIamPolicy — Update managed folder IAM policy.
 * @member {Array.<String>} permissions
 */
TestIamPermissionsResponse.prototype['permissions'] = undefined;






export default TestIamPermissionsResponse;

