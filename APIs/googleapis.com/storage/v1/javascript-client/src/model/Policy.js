/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyBindingsInner from './PolicyBindingsInner';

/**
 * The Policy model module.
 * @module model/Policy
 * @version v1
 */
class Policy {
    /**
     * Constructs a new <code>Policy</code>.
     * A bucket/object/managedFolder IAM policy.
     * @alias module:model/Policy
     */
    constructor() { 
        
        Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#policy';
    }

    /**
     * Constructs a <code>Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Policy} obj Optional instance to populate.
     * @return {module:model/Policy} The populated <code>Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Policy();

            if (data.hasOwnProperty('bindings')) {
                obj['bindings'] = ApiClient.convertToType(data['bindings'], [PolicyBindingsInner]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'Blob');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Policy</code>.
     */
    static validateJSON(data) {
        if (data['bindings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bindings'])) {
                throw new Error("Expected the field `bindings` to be an array in the JSON data but got " + data['bindings']);
            }
            // validate the optional field `bindings` (array)
            for (const item of data['bindings']) {
                PolicyBindingsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}



/**
 * An association between a role, which comes with a set of permissions, and members who may assume that role.
 * @member {Array.<module:model/PolicyBindingsInner>} bindings
 */
Policy.prototype['bindings'] = undefined;

/**
 * HTTP 1.1  Entity tag for the policy.
 * @member {Blob} etag
 */
Policy.prototype['etag'] = undefined;

/**
 * The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.
 * @member {String} kind
 * @default 'storage#policy'
 */
Policy.prototype['kind'] = 'storage#policy';

/**
 * The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, projects/_/buckets/bucket/objects/object for objects, and projects/_/buckets/bucket/managedFolders/managedFolder. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.
 * @member {String} resourceId
 */
Policy.prototype['resourceId'] = undefined;

/**
 * The IAM policy format version.
 * @member {Number} version
 */
Policy.prototype['version'] = undefined;






export default Policy;

