/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HmacKeyMetadata model module.
 * @module model/HmacKeyMetadata
 * @version v1
 */
class HmacKeyMetadata {
    /**
     * Constructs a new <code>HmacKeyMetadata</code>.
     * JSON template to produce a JSON-style HMAC Key metadata resource.
     * @alias module:model/HmacKeyMetadata
     */
    constructor() { 
        
        HmacKeyMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#hmacKeyMetadata';
    }

    /**
     * Constructs a <code>HmacKeyMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HmacKeyMetadata} obj Optional instance to populate.
     * @return {module:model/HmacKeyMetadata} The populated <code>HmacKeyMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HmacKeyMetadata();

            if (data.hasOwnProperty('accessId')) {
                obj['accessId'] = ApiClient.convertToType(data['accessId'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountEmail')) {
                obj['serviceAccountEmail'] = ApiClient.convertToType(data['serviceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HmacKeyMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HmacKeyMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessId'] && !(typeof data['accessId'] === 'string' || data['accessId'] instanceof String)) {
            throw new Error("Expected the field `accessId` to be a primitive type in the JSON string but got " + data['accessId']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['serviceAccountEmail'] && !(typeof data['serviceAccountEmail'] === 'string' || data['serviceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got " + data['serviceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The ID of the HMAC Key.
 * @member {String} accessId
 */
HmacKeyMetadata.prototype['accessId'] = undefined;

/**
 * HTTP 1.1 Entity tag for the HMAC key.
 * @member {String} etag
 */
HmacKeyMetadata.prototype['etag'] = undefined;

/**
 * The ID of the HMAC key, including the Project ID and the Access ID.
 * @member {String} id
 */
HmacKeyMetadata.prototype['id'] = undefined;

/**
 * The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata.
 * @member {String} kind
 * @default 'storage#hmacKeyMetadata'
 */
HmacKeyMetadata.prototype['kind'] = 'storage#hmacKeyMetadata';

/**
 * Project ID owning the service account to which the key authenticates.
 * @member {String} projectId
 */
HmacKeyMetadata.prototype['projectId'] = undefined;

/**
 * The link to this resource.
 * @member {String} selfLink
 */
HmacKeyMetadata.prototype['selfLink'] = undefined;

/**
 * The email address of the key's associated service account.
 * @member {String} serviceAccountEmail
 */
HmacKeyMetadata.prototype['serviceAccountEmail'] = undefined;

/**
 * The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED.
 * @member {String} state
 */
HmacKeyMetadata.prototype['state'] = undefined;

/**
 * The creation time of the HMAC key in RFC 3339 format.
 * @member {Date} timeCreated
 */
HmacKeyMetadata.prototype['timeCreated'] = undefined;

/**
 * The last modification time of the HMAC key metadata in RFC 3339 format.
 * @member {Date} updated
 */
HmacKeyMetadata.prototype['updated'] = undefined;






export default HmacKeyMetadata;

