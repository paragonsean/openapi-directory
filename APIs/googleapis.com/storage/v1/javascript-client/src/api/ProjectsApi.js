/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HmacKey from '../model/HmacKey';
import HmacKeyMetadata from '../model/HmacKeyMetadata';
import HmacKeysMetadata from '../model/HmacKeysMetadata';
import ServiceAccount from '../model/ServiceAccount';

/**
* Projects service.
* @module api/ProjectsApi
* @version v1
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageProjectsHmacKeysCreate operation.
     * @callback module:api/ProjectsApi~storageProjectsHmacKeysCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HmacKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new HMAC key for the specified service account.
     * @param {String} projectId Project ID owning the service account.
     * @param {String} serviceAccountEmail Email address of the service account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:api/ProjectsApi~storageProjectsHmacKeysCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HmacKey}
     */
    storageProjectsHmacKeysCreate(projectId, serviceAccountEmail, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysCreate");
      }
      // verify the required parameter 'serviceAccountEmail' is set
      if (serviceAccountEmail === undefined || serviceAccountEmail === null) {
        throw new Error("Missing the required parameter 'serviceAccountEmail' when calling storageProjectsHmacKeysCreate");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'serviceAccountEmail': serviceAccountEmail,
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HmacKey;
      return this.apiClient.callApi(
        '/projects/{projectId}/hmacKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageProjectsHmacKeysDelete operation.
     * @callback module:api/ProjectsApi~storageProjectsHmacKeysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an HMAC key.
     * @param {String} projectId Project ID owning the requested key
     * @param {String} accessId Name of the HMAC key to be deleted.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:api/ProjectsApi~storageProjectsHmacKeysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageProjectsHmacKeysDelete(projectId, accessId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysDelete");
      }
      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysDelete");
      }

      let pathParams = {
        'projectId': projectId,
        'accessId': accessId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{projectId}/hmacKeys/{accessId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageProjectsHmacKeysGet operation.
     * @callback module:api/ProjectsApi~storageProjectsHmacKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HmacKeyMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an HMAC key's metadata
     * @param {String} projectId Project ID owning the service account of the requested key.
     * @param {String} accessId Name of the HMAC key.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:api/ProjectsApi~storageProjectsHmacKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HmacKeyMetadata}
     */
    storageProjectsHmacKeysGet(projectId, accessId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysGet");
      }
      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysGet");
      }

      let pathParams = {
        'projectId': projectId,
        'accessId': accessId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HmacKeyMetadata;
      return this.apiClient.callApi(
        '/projects/{projectId}/hmacKeys/{accessId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageProjectsHmacKeysList operation.
     * @callback module:api/ProjectsApi~storageProjectsHmacKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HmacKeysMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of HMAC keys matching the criteria.
     * @param {String} projectId Name of the project in which to look for HMAC keys.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [maxResults] Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
     * @param {String} [pageToken] A previously-returned page token representing part of the larger set of results to view.
     * @param {String} [serviceAccountEmail] If present, only keys for the given service account are returned.
     * @param {Boolean} [showDeletedKeys] Whether or not to show keys in the DELETED state.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:api/ProjectsApi~storageProjectsHmacKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HmacKeysMetadata}
     */
    storageProjectsHmacKeysList(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysList");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'serviceAccountEmail': opts['serviceAccountEmail'],
        'showDeletedKeys': opts['showDeletedKeys'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HmacKeysMetadata;
      return this.apiClient.callApi(
        '/projects/{projectId}/hmacKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageProjectsHmacKeysUpdate operation.
     * @callback module:api/ProjectsApi~storageProjectsHmacKeysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HmacKeyMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
     * @param {String} projectId Project ID owning the service account of the updated key.
     * @param {String} accessId Name of the HMAC key being updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:model/HmacKeyMetadata} [hmacKeyMetadata] 
     * @param {module:api/ProjectsApi~storageProjectsHmacKeysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HmacKeyMetadata}
     */
    storageProjectsHmacKeysUpdate(projectId, accessId, opts, callback) {
      opts = opts || {};
      let postBody = opts['hmacKeyMetadata'];
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysUpdate");
      }
      // verify the required parameter 'accessId' is set
      if (accessId === undefined || accessId === null) {
        throw new Error("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysUpdate");
      }

      let pathParams = {
        'projectId': projectId,
        'accessId': accessId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HmacKeyMetadata;
      return this.apiClient.callApi(
        '/projects/{projectId}/hmacKeys/{accessId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageProjectsServiceAccountGet operation.
     * @callback module:api/ProjectsApi~storageProjectsServiceAccountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the email address of this project's Google Cloud Storage service account.
     * @param {String} projectId Project ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request.
     * @param {module:api/ProjectsApi~storageProjectsServiceAccountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceAccount}
     */
    storageProjectsServiceAccountGet(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storageProjectsServiceAccountGet");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceAccount;
      return this.apiClient.callApi(
        '/projects/{projectId}/serviceAccount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
