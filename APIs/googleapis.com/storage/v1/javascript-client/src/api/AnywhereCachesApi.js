/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnywhereCache from '../model/AnywhereCache';
import AnywhereCaches from '../model/AnywhereCaches';
import GoogleLongrunningOperation from '../model/GoogleLongrunningOperation';

/**
* AnywhereCaches service.
* @module api/AnywhereCachesApi
* @version v1
*/
export default class AnywhereCachesApi {

    /**
    * Constructs a new AnywhereCachesApi. 
    * @alias module:api/AnywhereCachesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageAnywhereCachesDisable operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesDisableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnywhereCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables an Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {String} anywhereCacheId The ID of requested Anywhere Cache instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnywhereCache}
     */
    storageAnywhereCachesDisable(bucket, anywhereCacheId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesDisable");
      }
      // verify the required parameter 'anywhereCacheId' is set
      if (anywhereCacheId === undefined || anywhereCacheId === null) {
        throw new Error("Missing the required parameter 'anywhereCacheId' when calling storageAnywhereCachesDisable");
      }

      let pathParams = {
        'bucket': bucket,
        'anywhereCacheId': anywhereCacheId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnywhereCache;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches/{anywhereCacheId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesGet operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnywhereCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the metadata of an Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {String} anywhereCacheId The ID of requested Anywhere Cache instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnywhereCache}
     */
    storageAnywhereCachesGet(bucket, anywhereCacheId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesGet");
      }
      // verify the required parameter 'anywhereCacheId' is set
      if (anywhereCacheId === undefined || anywhereCacheId === null) {
        throw new Error("Missing the required parameter 'anywhereCacheId' when calling storageAnywhereCachesGet");
      }

      let pathParams = {
        'bucket': bucket,
        'anywhereCacheId': anywhereCacheId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnywhereCache;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches/{anywhereCacheId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesInsert operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleLongrunningOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AnywhereCache} [anywhereCache] 
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleLongrunningOperation}
     */
    storageAnywhereCachesInsert(bucket, opts, callback) {
      opts = opts || {};
      let postBody = opts['anywhereCache'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesInsert");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleLongrunningOperation;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesList operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnywhereCaches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Anywhere Cache instances of the bucket matching the criteria.
     * @param {String} bucket Name of the parent bucket.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [pageSize] Maximum number of items to return in a single page of responses. Maximum 1000.
     * @param {String} [pageToken] A previously-returned page token representing part of the larger set of results to view.
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnywhereCaches}
     */
    storageAnywhereCachesList(bucket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesList");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnywhereCaches;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesPause operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesPauseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnywhereCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pauses an Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {String} anywhereCacheId The ID of requested Anywhere Cache instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesPauseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnywhereCache}
     */
    storageAnywhereCachesPause(bucket, anywhereCacheId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesPause");
      }
      // verify the required parameter 'anywhereCacheId' is set
      if (anywhereCacheId === undefined || anywhereCacheId === null) {
        throw new Error("Missing the required parameter 'anywhereCacheId' when calling storageAnywhereCachesPause");
      }

      let pathParams = {
        'bucket': bucket,
        'anywhereCacheId': anywhereCacheId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnywhereCache;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches/{anywhereCacheId}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesResume operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnywhereCache} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes a paused or disabled Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {String} anywhereCacheId The ID of requested Anywhere Cache instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnywhereCache}
     */
    storageAnywhereCachesResume(bucket, anywhereCacheId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesResume");
      }
      // verify the required parameter 'anywhereCacheId' is set
      if (anywhereCacheId === undefined || anywhereCacheId === null) {
        throw new Error("Missing the required parameter 'anywhereCacheId' when calling storageAnywhereCachesResume");
      }

      let pathParams = {
        'bucket': bucket,
        'anywhereCacheId': anywhereCacheId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnywhereCache;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches/{anywhereCacheId}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageAnywhereCachesUpdate operation.
     * @callback module:api/AnywhereCachesApi~storageAnywhereCachesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleLongrunningOperation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the config(ttl and admissionPolicy) of an Anywhere Cache instance.
     * @param {String} bucket Name of the parent bucket.
     * @param {String} anywhereCacheId The ID of requested Anywhere Cache instance.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AnywhereCache} [anywhereCache] 
     * @param {module:api/AnywhereCachesApi~storageAnywhereCachesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleLongrunningOperation}
     */
    storageAnywhereCachesUpdate(bucket, anywhereCacheId, opts, callback) {
      opts = opts || {};
      let postBody = opts['anywhereCache'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageAnywhereCachesUpdate");
      }
      // verify the required parameter 'anywhereCacheId' is set
      if (anywhereCacheId === undefined || anywhereCacheId === null) {
        throw new Error("Missing the required parameter 'anywhereCacheId' when calling storageAnywhereCachesUpdate");
      }

      let pathParams = {
        'bucket': bucket,
        'anywhereCacheId': anywhereCacheId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GoogleLongrunningOperation;
      return this.apiClient.callApi(
        '/b/{bucket}/anywhereCaches/{anywhereCacheId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
