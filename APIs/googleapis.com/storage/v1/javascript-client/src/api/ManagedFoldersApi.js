/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagedFolder from '../model/ManagedFolder';
import ManagedFolders from '../model/ManagedFolders';
import Policy from '../model/Policy';
import TestIamPermissionsResponse from '../model/TestIamPermissionsResponse';

/**
* ManagedFolders service.
* @module api/ManagedFoldersApi
* @version v1
*/
export default class ManagedFoldersApi {

    /**
    * Constructs a new ManagedFoldersApi. 
    * @alias module:api/ManagedFoldersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageManagedFoldersDelete operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes a managed folder.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {String} managedFolder The managed folder name/path.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [ifMetagenerationMatch] If set, only deletes the managed folder if its metageneration matches this value.
     * @param {String} [ifMetagenerationNotMatch] If set, only deletes the managed folder if its metageneration does not match this value.
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageManagedFoldersDelete(bucket, managedFolder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersDelete");
      }
      // verify the required parameter 'managedFolder' is set
      if (managedFolder === undefined || managedFolder === null) {
        throw new Error("Missing the required parameter 'managedFolder' when calling storageManagedFoldersDelete");
      }

      let pathParams = {
        'bucket': bucket,
        'managedFolder': managedFolder
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'ifMetagenerationMatch': opts['ifMetagenerationMatch'],
        'ifMetagenerationNotMatch': opts['ifMetagenerationNotMatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders/{managedFolder}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersGet operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedFolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata of the specified managed folder.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {String} managedFolder The managed folder name/path.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [ifMetagenerationMatch] Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration matches the given value.
     * @param {String} [ifMetagenerationNotMatch] Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration does not match the given value.
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedFolder}
     */
    storageManagedFoldersGet(bucket, managedFolder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersGet");
      }
      // verify the required parameter 'managedFolder' is set
      if (managedFolder === undefined || managedFolder === null) {
        throw new Error("Missing the required parameter 'managedFolder' when calling storageManagedFoldersGet");
      }

      let pathParams = {
        'bucket': bucket,
        'managedFolder': managedFolder
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'ifMetagenerationMatch': opts['ifMetagenerationMatch'],
        'ifMetagenerationNotMatch': opts['ifMetagenerationNotMatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedFolder;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders/{managedFolder}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersGetIamPolicy operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersGetIamPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an IAM policy for the specified managed folder.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {String} managedFolder The managed folder name/path.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [optionsRequestedPolicyVersion] The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersGetIamPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Policy}
     */
    storageManagedFoldersGetIamPolicy(bucket, managedFolder, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersGetIamPolicy");
      }
      // verify the required parameter 'managedFolder' is set
      if (managedFolder === undefined || managedFolder === null) {
        throw new Error("Missing the required parameter 'managedFolder' when calling storageManagedFoldersGetIamPolicy");
      }

      let pathParams = {
        'bucket': bucket,
        'managedFolder': managedFolder
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'optionsRequestedPolicyVersion': opts['optionsRequestedPolicyVersion'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Policy;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders/{managedFolder}/iam', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersInsert operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedFolder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new managed folder.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ManagedFolder} [managedFolder] 
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedFolder}
     */
    storageManagedFoldersInsert(bucket, opts, callback) {
      opts = opts || {};
      let postBody = opts['managedFolder'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersInsert");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedFolder;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersList operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedFolders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists managed folders in the given bucket.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Number} [pageSize] Maximum number of items to return in a single page of responses.
     * @param {String} [pageToken] A previously-returned page token representing part of the larger set of results to view.
     * @param {String} [prefix] The managed folder name/path prefix to filter the output list of results.
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedFolders}
     */
    storageManagedFoldersList(bucket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersList");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'prefix': opts['prefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedFolders;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersSetIamPolicy operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersSetIamPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an IAM policy for the specified managed folder.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {String} managedFolder The managed folder name/path.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:model/Policy} [policy] 
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersSetIamPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Policy}
     */
    storageManagedFoldersSetIamPolicy(bucket, managedFolder, opts, callback) {
      opts = opts || {};
      let postBody = opts['policy'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersSetIamPolicy");
      }
      // verify the required parameter 'managedFolder' is set
      if (managedFolder === undefined || managedFolder === null) {
        throw new Error("Missing the required parameter 'managedFolder' when calling storageManagedFoldersSetIamPolicy");
      }

      let pathParams = {
        'bucket': bucket,
        'managedFolder': managedFolder
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Policy;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders/{managedFolder}/iam', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageManagedFoldersTestIamPermissions operation.
     * @callback module:api/ManagedFoldersApi~storageManagedFoldersTestIamPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestIamPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
     * @param {String} bucket Name of the bucket containing the managed folder.
     * @param {String} managedFolder The managed folder name/path.
     * @param {Array.<String>} permissions Permissions to test.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:api/ManagedFoldersApi~storageManagedFoldersTestIamPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestIamPermissionsResponse}
     */
    storageManagedFoldersTestIamPermissions(bucket, managedFolder, permissions, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageManagedFoldersTestIamPermissions");
      }
      // verify the required parameter 'managedFolder' is set
      if (managedFolder === undefined || managedFolder === null) {
        throw new Error("Missing the required parameter 'managedFolder' when calling storageManagedFoldersTestIamPermissions");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling storageManagedFoldersTestIamPermissions");
      }

      let pathParams = {
        'bucket': bucket,
        'managedFolder': managedFolder
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'permissions': this.apiClient.buildCollectionParam(permissions, 'multi'),
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestIamPermissionsResponse;
      return this.apiClient.callApi(
        '/b/{bucket}/managedFolders/{managedFolder}/iam/testPermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
