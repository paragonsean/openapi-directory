/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BucketAccessControl from '../model/BucketAccessControl';
import BucketAccessControls from '../model/BucketAccessControls';

/**
* BucketAccessControls service.
* @module api/BucketAccessControlsApi
* @version v1
*/
export default class BucketAccessControlsApi {

    /**
    * Constructs a new BucketAccessControlsApi. 
    * @alias module:api/BucketAccessControlsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageBucketAccessControlsDelete operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently deletes the ACL entry for the specified entity on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {String} entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageBucketAccessControlsDelete(bucket, entity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsDelete");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling storageBucketAccessControlsDelete");
      }

      let pathParams = {
        'bucket': bucket,
        'entity': entity
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/b/{bucket}/acl/{entity}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageBucketAccessControlsGet operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketAccessControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the ACL entry for the specified entity on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {String} entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketAccessControl}
     */
    storageBucketAccessControlsGet(bucket, entity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsGet");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling storageBucketAccessControlsGet");
      }

      let pathParams = {
        'bucket': bucket,
        'entity': entity
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketAccessControl;
      return this.apiClient.callApi(
        '/b/{bucket}/acl/{entity}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageBucketAccessControlsInsert operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketAccessControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new ACL entry on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:model/BucketAccessControl} [bucketAccessControl] 
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketAccessControl}
     */
    storageBucketAccessControlsInsert(bucket, opts, callback) {
      opts = opts || {};
      let postBody = opts['bucketAccessControl'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsInsert");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BucketAccessControl;
      return this.apiClient.callApi(
        '/b/{bucket}/acl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageBucketAccessControlsList operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketAccessControls} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves ACL entries on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketAccessControls}
     */
    storageBucketAccessControlsList(bucket, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsList");
      }

      let pathParams = {
        'bucket': bucket
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BucketAccessControls;
      return this.apiClient.callApi(
        '/b/{bucket}/acl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageBucketAccessControlsPatch operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketAccessControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches an ACL entry on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {String} entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:model/BucketAccessControl} [bucketAccessControl] 
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketAccessControl}
     */
    storageBucketAccessControlsPatch(bucket, entity, opts, callback) {
      opts = opts || {};
      let postBody = opts['bucketAccessControl'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsPatch");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling storageBucketAccessControlsPatch");
      }

      let pathParams = {
        'bucket': bucket,
        'entity': entity
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BucketAccessControl;
      return this.apiClient.callApi(
        '/b/{bucket}/acl/{entity}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageBucketAccessControlsUpdate operation.
     * @callback module:api/BucketAccessControlsApi~storageBucketAccessControlsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BucketAccessControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an ACL entry on the specified bucket.
     * @param {String} bucket Name of a bucket.
     * @param {String} entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [uploadType] Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [userProject] The project to be billed for this request. Required for Requester Pays buckets.
     * @param {module:model/BucketAccessControl} [bucketAccessControl] 
     * @param {module:api/BucketAccessControlsApi~storageBucketAccessControlsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BucketAccessControl}
     */
    storageBucketAccessControlsUpdate(bucket, entity, opts, callback) {
      opts = opts || {};
      let postBody = opts['bucketAccessControl'];
      // verify the required parameter 'bucket' is set
      if (bucket === undefined || bucket === null) {
        throw new Error("Missing the required parameter 'bucket' when calling storageBucketAccessControlsUpdate");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling storageBucketAccessControlsUpdate");
      }

      let pathParams = {
        'bucket': bucket,
        'entity': entity
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'uploadType': opts['uploadType'],
        'userIp': opts['userIp'],
        'userProject': opts['userProject']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BucketAccessControl;
      return this.apiClient.callApi(
        '/b/{bucket}/acl/{entity}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
