/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBucket_retentionPolicy.h
 *
 * The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
 */

#ifndef OAIBucket_retentionPolicy_H
#define OAIBucket_retentionPolicy_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBucket_retentionPolicy : public OAIObject {
public:
    OAIBucket_retentionPolicy();
    OAIBucket_retentionPolicy(QString json);
    ~OAIBucket_retentionPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEffectiveTime() const;
    void setEffectiveTime(const QDateTime &effective_time);
    bool is_effective_time_Set() const;
    bool is_effective_time_Valid() const;

    bool isIsLocked() const;
    void setIsLocked(const bool &is_locked);
    bool is_is_locked_Set() const;
    bool is_is_locked_Valid() const;

    QString getRetentionPeriod() const;
    void setRetentionPeriod(const QString &retention_period);
    bool is_retention_period_Set() const;
    bool is_retention_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_effective_time;
    bool m_effective_time_isSet;
    bool m_effective_time_isValid;

    bool m_is_locked;
    bool m_is_locked_isSet;
    bool m_is_locked_isValid;

    QString m_retention_period;
    bool m_retention_period_isSet;
    bool m_retention_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBucket_retentionPolicy)

#endif // OAIBucket_retentionPolicy_H
