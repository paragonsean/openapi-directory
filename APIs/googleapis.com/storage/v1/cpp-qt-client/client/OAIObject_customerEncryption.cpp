/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObject_customerEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObject_customerEncryption::OAIObject_customerEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObject_customerEncryption::OAIObject_customerEncryption() {
    this->initializeModel();
}

OAIObject_customerEncryption::~OAIObject_customerEncryption() {}

void OAIObject_customerEncryption::initializeModel() {

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_key_sha256_isSet = false;
    m_key_sha256_isValid = false;
}

void OAIObject_customerEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObject_customerEncryption::fromJsonObject(QJsonObject json) {

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("encryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("encryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_key_sha256_isValid = ::OpenAPI::fromJsonValue(m_key_sha256, json[QString("keySha256")]);
    m_key_sha256_isSet = !json[QString("keySha256")].isNull() && m_key_sha256_isValid;
}

QString OAIObject_customerEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObject_customerEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_algorithm_isSet) {
        obj.insert(QString("encryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_key_sha256_isSet) {
        obj.insert(QString("keySha256"), ::OpenAPI::toJsonValue(m_key_sha256));
    }
    return obj;
}

QString OAIObject_customerEncryption::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAIObject_customerEncryption::setEncryptionAlgorithm(const QString &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAIObject_customerEncryption::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAIObject_customerEncryption::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

QString OAIObject_customerEncryption::getKeySha256() const {
    return m_key_sha256;
}
void OAIObject_customerEncryption::setKeySha256(const QString &key_sha256) {
    m_key_sha256 = key_sha256;
    m_key_sha256_isSet = true;
}

bool OAIObject_customerEncryption::is_key_sha256_Set() const{
    return m_key_sha256_isSet;
}

bool OAIObject_customerEncryption::is_key_sha256_Valid() const{
    return m_key_sha256_isValid;
}

bool OAIObject_customerEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObject_customerEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
