/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBucket_lifecycle_rule_inner_condition.h
 *
 * The condition(s) under which the action will be taken.
 */

#ifndef OAIBucket_lifecycle_rule_inner_condition_H
#define OAIBucket_lifecycle_rule_inner_condition_H

#include <QJsonObject>

#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBucket_lifecycle_rule_inner_condition : public OAIObject {
public:
    OAIBucket_lifecycle_rule_inner_condition();
    OAIBucket_lifecycle_rule_inner_condition(QString json);
    ~OAIBucket_lifecycle_rule_inner_condition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAge() const;
    void setAge(const qint32 &age);
    bool is_age_Set() const;
    bool is_age_Valid() const;

    QDate getCreatedBefore() const;
    void setCreatedBefore(const QDate &created_before);
    bool is_created_before_Set() const;
    bool is_created_before_Valid() const;

    QDate getCustomTimeBefore() const;
    void setCustomTimeBefore(const QDate &custom_time_before);
    bool is_custom_time_before_Set() const;
    bool is_custom_time_before_Valid() const;

    qint32 getDaysSinceCustomTime() const;
    void setDaysSinceCustomTime(const qint32 &days_since_custom_time);
    bool is_days_since_custom_time_Set() const;
    bool is_days_since_custom_time_Valid() const;

    qint32 getDaysSinceNoncurrentTime() const;
    void setDaysSinceNoncurrentTime(const qint32 &days_since_noncurrent_time);
    bool is_days_since_noncurrent_time_Set() const;
    bool is_days_since_noncurrent_time_Valid() const;

    bool isIsLive() const;
    void setIsLive(const bool &is_live);
    bool is_is_live_Set() const;
    bool is_is_live_Valid() const;

    QString getMatchesPattern() const;
    void setMatchesPattern(const QString &matches_pattern);
    bool is_matches_pattern_Set() const;
    bool is_matches_pattern_Valid() const;

    QList<QString> getMatchesPrefix() const;
    void setMatchesPrefix(const QList<QString> &matches_prefix);
    bool is_matches_prefix_Set() const;
    bool is_matches_prefix_Valid() const;

    QList<QString> getMatchesStorageClass() const;
    void setMatchesStorageClass(const QList<QString> &matches_storage_class);
    bool is_matches_storage_class_Set() const;
    bool is_matches_storage_class_Valid() const;

    QList<QString> getMatchesSuffix() const;
    void setMatchesSuffix(const QList<QString> &matches_suffix);
    bool is_matches_suffix_Set() const;
    bool is_matches_suffix_Valid() const;

    QDate getNoncurrentTimeBefore() const;
    void setNoncurrentTimeBefore(const QDate &noncurrent_time_before);
    bool is_noncurrent_time_before_Set() const;
    bool is_noncurrent_time_before_Valid() const;

    qint32 getNumNewerVersions() const;
    void setNumNewerVersions(const qint32 &num_newer_versions);
    bool is_num_newer_versions_Set() const;
    bool is_num_newer_versions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_age;
    bool m_age_isSet;
    bool m_age_isValid;

    QDate m_created_before;
    bool m_created_before_isSet;
    bool m_created_before_isValid;

    QDate m_custom_time_before;
    bool m_custom_time_before_isSet;
    bool m_custom_time_before_isValid;

    qint32 m_days_since_custom_time;
    bool m_days_since_custom_time_isSet;
    bool m_days_since_custom_time_isValid;

    qint32 m_days_since_noncurrent_time;
    bool m_days_since_noncurrent_time_isSet;
    bool m_days_since_noncurrent_time_isValid;

    bool m_is_live;
    bool m_is_live_isSet;
    bool m_is_live_isValid;

    QString m_matches_pattern;
    bool m_matches_pattern_isSet;
    bool m_matches_pattern_isValid;

    QList<QString> m_matches_prefix;
    bool m_matches_prefix_isSet;
    bool m_matches_prefix_isValid;

    QList<QString> m_matches_storage_class;
    bool m_matches_storage_class_isSet;
    bool m_matches_storage_class_isValid;

    QList<QString> m_matches_suffix;
    bool m_matches_suffix_isSet;
    bool m_matches_suffix_isValid;

    QDate m_noncurrent_time_before;
    bool m_noncurrent_time_before_isSet;
    bool m_noncurrent_time_before_isValid;

    qint32 m_num_newer_versions;
    bool m_num_newer_versions_isSet;
    bool m_num_newer_versions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBucket_lifecycle_rule_inner_condition)

#endif // OAIBucket_lifecycle_rule_inner_condition_H
