/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBucketAccessControlsApi_H
#define OAI_OAIBucketAccessControlsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBucketAccessControl.h"
#include "OAIBucketAccessControls.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBucketAccessControlsApi : public QObject {
    Q_OBJECT

public:
    OAIBucketAccessControlsApi(const int timeOut = 0);
    ~OAIBucketAccessControlsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_bucketAccessControls_delete(const QString &bucket, const QString &entity, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_bucketAccessControls_get(const QString &bucket, const QString &entity, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    * @param[in]  oai_bucket_access_control OAIBucketAccessControl [optional]
    */
    virtual void storage_bucketAccessControls_insert(const QString &bucket, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBucketAccessControl> &oai_bucket_access_control = ::OpenAPI::OptionalParam<OAIBucketAccessControl>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_bucketAccessControls_list(const QString &bucket, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    * @param[in]  oai_bucket_access_control OAIBucketAccessControl [optional]
    */
    virtual void storage_bucketAccessControls_patch(const QString &bucket, const QString &entity, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBucketAccessControl> &oai_bucket_access_control = ::OpenAPI::OptionalParam<OAIBucketAccessControl>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    * @param[in]  oai_bucket_access_control OAIBucketAccessControl [optional]
    */
    virtual void storage_bucketAccessControls_update(const QString &bucket, const QString &entity, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBucketAccessControl> &oai_bucket_access_control = ::OpenAPI::OptionalParam<OAIBucketAccessControl>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storage_bucketAccessControls_deleteCallback(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_getCallback(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_insertCallback(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_listCallback(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_patchCallback(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storage_bucketAccessControls_deleteSignal();
    void storage_bucketAccessControls_getSignal(OAIBucketAccessControl summary);
    void storage_bucketAccessControls_insertSignal(OAIBucketAccessControl summary);
    void storage_bucketAccessControls_listSignal(OAIBucketAccessControls summary);
    void storage_bucketAccessControls_patchSignal(OAIBucketAccessControl summary);
    void storage_bucketAccessControls_updateSignal(OAIBucketAccessControl summary);


    void storage_bucketAccessControls_deleteSignalFull(OAIHttpRequestWorker *worker);
    void storage_bucketAccessControls_getSignalFull(OAIHttpRequestWorker *worker, OAIBucketAccessControl summary);
    void storage_bucketAccessControls_insertSignalFull(OAIHttpRequestWorker *worker, OAIBucketAccessControl summary);
    void storage_bucketAccessControls_listSignalFull(OAIHttpRequestWorker *worker, OAIBucketAccessControls summary);
    void storage_bucketAccessControls_patchSignalFull(OAIHttpRequestWorker *worker, OAIBucketAccessControl summary);
    void storage_bucketAccessControls_updateSignalFull(OAIHttpRequestWorker *worker, OAIBucketAccessControl summary);

    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_deleteSignalError() instead")
    void storage_bucketAccessControls_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_getSignalError() instead")
    void storage_bucketAccessControls_getSignalE(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_getSignalError(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_insertSignalError() instead")
    void storage_bucketAccessControls_insertSignalE(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_insertSignalError(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_listSignalError() instead")
    void storage_bucketAccessControls_listSignalE(OAIBucketAccessControls summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_listSignalError(OAIBucketAccessControls summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_patchSignalError() instead")
    void storage_bucketAccessControls_patchSignalE(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_patchSignalError(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_updateSignalError() instead")
    void storage_bucketAccessControls_updateSignalE(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_updateSignalError(OAIBucketAccessControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_deleteSignalErrorFull() instead")
    void storage_bucketAccessControls_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_getSignalErrorFull() instead")
    void storage_bucketAccessControls_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_insertSignalErrorFull() instead")
    void storage_bucketAccessControls_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_listSignalErrorFull() instead")
    void storage_bucketAccessControls_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_patchSignalErrorFull() instead")
    void storage_bucketAccessControls_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_bucketAccessControls_updateSignalErrorFull() instead")
    void storage_bucketAccessControls_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_bucketAccessControls_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
