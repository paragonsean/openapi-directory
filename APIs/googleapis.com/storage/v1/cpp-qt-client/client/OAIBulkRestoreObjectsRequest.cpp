/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkRestoreObjectsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkRestoreObjectsRequest::OAIBulkRestoreObjectsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkRestoreObjectsRequest::OAIBulkRestoreObjectsRequest() {
    this->initializeModel();
}

OAIBulkRestoreObjectsRequest::~OAIBulkRestoreObjectsRequest() {}

void OAIBulkRestoreObjectsRequest::initializeModel() {

    m_allow_overwrite_isSet = false;
    m_allow_overwrite_isValid = false;

    m_copy_source_acl_isSet = false;
    m_copy_source_acl_isValid = false;

    m_match_globs_isSet = false;
    m_match_globs_isValid = false;

    m_soft_deleted_after_time_isSet = false;
    m_soft_deleted_after_time_isValid = false;

    m_soft_deleted_before_time_isSet = false;
    m_soft_deleted_before_time_isValid = false;
}

void OAIBulkRestoreObjectsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkRestoreObjectsRequest::fromJsonObject(QJsonObject json) {

    m_allow_overwrite_isValid = ::OpenAPI::fromJsonValue(m_allow_overwrite, json[QString("allowOverwrite")]);
    m_allow_overwrite_isSet = !json[QString("allowOverwrite")].isNull() && m_allow_overwrite_isValid;

    m_copy_source_acl_isValid = ::OpenAPI::fromJsonValue(m_copy_source_acl, json[QString("copySourceAcl")]);
    m_copy_source_acl_isSet = !json[QString("copySourceAcl")].isNull() && m_copy_source_acl_isValid;

    m_match_globs_isValid = ::OpenAPI::fromJsonValue(m_match_globs, json[QString("matchGlobs")]);
    m_match_globs_isSet = !json[QString("matchGlobs")].isNull() && m_match_globs_isValid;

    m_soft_deleted_after_time_isValid = ::OpenAPI::fromJsonValue(m_soft_deleted_after_time, json[QString("softDeletedAfterTime")]);
    m_soft_deleted_after_time_isSet = !json[QString("softDeletedAfterTime")].isNull() && m_soft_deleted_after_time_isValid;

    m_soft_deleted_before_time_isValid = ::OpenAPI::fromJsonValue(m_soft_deleted_before_time, json[QString("softDeletedBeforeTime")]);
    m_soft_deleted_before_time_isSet = !json[QString("softDeletedBeforeTime")].isNull() && m_soft_deleted_before_time_isValid;
}

QString OAIBulkRestoreObjectsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkRestoreObjectsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_overwrite_isSet) {
        obj.insert(QString("allowOverwrite"), ::OpenAPI::toJsonValue(m_allow_overwrite));
    }
    if (m_copy_source_acl_isSet) {
        obj.insert(QString("copySourceAcl"), ::OpenAPI::toJsonValue(m_copy_source_acl));
    }
    if (m_match_globs.size() > 0) {
        obj.insert(QString("matchGlobs"), ::OpenAPI::toJsonValue(m_match_globs));
    }
    if (m_soft_deleted_after_time_isSet) {
        obj.insert(QString("softDeletedAfterTime"), ::OpenAPI::toJsonValue(m_soft_deleted_after_time));
    }
    if (m_soft_deleted_before_time_isSet) {
        obj.insert(QString("softDeletedBeforeTime"), ::OpenAPI::toJsonValue(m_soft_deleted_before_time));
    }
    return obj;
}

bool OAIBulkRestoreObjectsRequest::isAllowOverwrite() const {
    return m_allow_overwrite;
}
void OAIBulkRestoreObjectsRequest::setAllowOverwrite(const bool &allow_overwrite) {
    m_allow_overwrite = allow_overwrite;
    m_allow_overwrite_isSet = true;
}

bool OAIBulkRestoreObjectsRequest::is_allow_overwrite_Set() const{
    return m_allow_overwrite_isSet;
}

bool OAIBulkRestoreObjectsRequest::is_allow_overwrite_Valid() const{
    return m_allow_overwrite_isValid;
}

bool OAIBulkRestoreObjectsRequest::isCopySourceAcl() const {
    return m_copy_source_acl;
}
void OAIBulkRestoreObjectsRequest::setCopySourceAcl(const bool &copy_source_acl) {
    m_copy_source_acl = copy_source_acl;
    m_copy_source_acl_isSet = true;
}

bool OAIBulkRestoreObjectsRequest::is_copy_source_acl_Set() const{
    return m_copy_source_acl_isSet;
}

bool OAIBulkRestoreObjectsRequest::is_copy_source_acl_Valid() const{
    return m_copy_source_acl_isValid;
}

QList<QString> OAIBulkRestoreObjectsRequest::getMatchGlobs() const {
    return m_match_globs;
}
void OAIBulkRestoreObjectsRequest::setMatchGlobs(const QList<QString> &match_globs) {
    m_match_globs = match_globs;
    m_match_globs_isSet = true;
}

bool OAIBulkRestoreObjectsRequest::is_match_globs_Set() const{
    return m_match_globs_isSet;
}

bool OAIBulkRestoreObjectsRequest::is_match_globs_Valid() const{
    return m_match_globs_isValid;
}

QDateTime OAIBulkRestoreObjectsRequest::getSoftDeletedAfterTime() const {
    return m_soft_deleted_after_time;
}
void OAIBulkRestoreObjectsRequest::setSoftDeletedAfterTime(const QDateTime &soft_deleted_after_time) {
    m_soft_deleted_after_time = soft_deleted_after_time;
    m_soft_deleted_after_time_isSet = true;
}

bool OAIBulkRestoreObjectsRequest::is_soft_deleted_after_time_Set() const{
    return m_soft_deleted_after_time_isSet;
}

bool OAIBulkRestoreObjectsRequest::is_soft_deleted_after_time_Valid() const{
    return m_soft_deleted_after_time_isValid;
}

QDateTime OAIBulkRestoreObjectsRequest::getSoftDeletedBeforeTime() const {
    return m_soft_deleted_before_time;
}
void OAIBulkRestoreObjectsRequest::setSoftDeletedBeforeTime(const QDateTime &soft_deleted_before_time) {
    m_soft_deleted_before_time = soft_deleted_before_time;
    m_soft_deleted_before_time_isSet = true;
}

bool OAIBulkRestoreObjectsRequest::is_soft_deleted_before_time_Set() const{
    return m_soft_deleted_before_time_isSet;
}

bool OAIBulkRestoreObjectsRequest::is_soft_deleted_before_time_Valid() const{
    return m_soft_deleted_before_time_isValid;
}

bool OAIBulkRestoreObjectsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_source_acl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_globs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_deleted_after_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soft_deleted_before_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkRestoreObjectsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
