/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_iamConfiguration_uniformBucketLevelAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_iamConfiguration_uniformBucketLevelAccess::OAIBucket_iamConfiguration_uniformBucketLevelAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_iamConfiguration_uniformBucketLevelAccess::OAIBucket_iamConfiguration_uniformBucketLevelAccess() {
    this->initializeModel();
}

OAIBucket_iamConfiguration_uniformBucketLevelAccess::~OAIBucket_iamConfiguration_uniformBucketLevelAccess() {}

void OAIBucket_iamConfiguration_uniformBucketLevelAccess::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_locked_time_isSet = false;
    m_locked_time_isValid = false;
}

void OAIBucket_iamConfiguration_uniformBucketLevelAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_iamConfiguration_uniformBucketLevelAccess::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_locked_time_isValid = ::OpenAPI::fromJsonValue(m_locked_time, json[QString("lockedTime")]);
    m_locked_time_isSet = !json[QString("lockedTime")].isNull() && m_locked_time_isValid;
}

QString OAIBucket_iamConfiguration_uniformBucketLevelAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_iamConfiguration_uniformBucketLevelAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_locked_time_isSet) {
        obj.insert(QString("lockedTime"), ::OpenAPI::toJsonValue(m_locked_time));
    }
    return obj;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::isEnabled() const {
    return m_enabled;
}
void OAIBucket_iamConfiguration_uniformBucketLevelAccess::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIBucket_iamConfiguration_uniformBucketLevelAccess::getLockedTime() const {
    return m_locked_time;
}
void OAIBucket_iamConfiguration_uniformBucketLevelAccess::setLockedTime(const QDateTime &locked_time) {
    m_locked_time = locked_time;
    m_locked_time_isSet = true;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::is_locked_time_Set() const{
    return m_locked_time_isSet;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::is_locked_time_Valid() const{
    return m_locked_time_isValid;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_iamConfiguration_uniformBucketLevelAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
