/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFolder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFolder::OAIFolder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFolder::OAIFolder() {
    this->initializeModel();
}

OAIFolder::~OAIFolder() {}

void OAIFolder::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metageneration_isSet = false;
    m_metageneration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pending_rename_info_isSet = false;
    m_pending_rename_info_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIFolder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFolder::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metageneration_isValid = ::OpenAPI::fromJsonValue(m_metageneration, json[QString("metageneration")]);
    m_metageneration_isSet = !json[QString("metageneration")].isNull() && m_metageneration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pending_rename_info_isValid = ::OpenAPI::fromJsonValue(m_pending_rename_info, json[QString("pendingRenameInfo")]);
    m_pending_rename_info_isSet = !json[QString("pendingRenameInfo")].isNull() && m_pending_rename_info_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIFolder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFolder::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metageneration_isSet) {
        obj.insert(QString("metageneration"), ::OpenAPI::toJsonValue(m_metageneration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pending_rename_info.isSet()) {
        obj.insert(QString("pendingRenameInfo"), ::OpenAPI::toJsonValue(m_pending_rename_info));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIFolder::getBucket() const {
    return m_bucket;
}
void OAIFolder::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIFolder::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIFolder::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QDateTime OAIFolder::getCreateTime() const {
    return m_create_time;
}
void OAIFolder::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFolder::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFolder::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFolder::getId() const {
    return m_id;
}
void OAIFolder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFolder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFolder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFolder::getKind() const {
    return m_kind;
}
void OAIFolder::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFolder::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFolder::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIFolder::getMetageneration() const {
    return m_metageneration;
}
void OAIFolder::setMetageneration(const QString &metageneration) {
    m_metageneration = metageneration;
    m_metageneration_isSet = true;
}

bool OAIFolder::is_metageneration_Set() const{
    return m_metageneration_isSet;
}

bool OAIFolder::is_metageneration_Valid() const{
    return m_metageneration_isValid;
}

QString OAIFolder::getName() const {
    return m_name;
}
void OAIFolder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFolder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFolder::is_name_Valid() const{
    return m_name_isValid;
}

OAIFolder_pendingRenameInfo OAIFolder::getPendingRenameInfo() const {
    return m_pending_rename_info;
}
void OAIFolder::setPendingRenameInfo(const OAIFolder_pendingRenameInfo &pending_rename_info) {
    m_pending_rename_info = pending_rename_info;
    m_pending_rename_info_isSet = true;
}

bool OAIFolder::is_pending_rename_info_Set() const{
    return m_pending_rename_info_isSet;
}

bool OAIFolder::is_pending_rename_info_Valid() const{
    return m_pending_rename_info_isValid;
}

QString OAIFolder::getSelfLink() const {
    return m_self_link;
}
void OAIFolder::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIFolder::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIFolder::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QDateTime OAIFolder::getUpdateTime() const {
    return m_update_time;
}
void OAIFolder::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFolder::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFolder::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIFolder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metageneration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_rename_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFolder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
