/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_website.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_website::OAIBucket_website(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_website::OAIBucket_website() {
    this->initializeModel();
}

OAIBucket_website::~OAIBucket_website() {}

void OAIBucket_website::initializeModel() {

    m_main_page_suffix_isSet = false;
    m_main_page_suffix_isValid = false;

    m_not_found_page_isSet = false;
    m_not_found_page_isValid = false;
}

void OAIBucket_website::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_website::fromJsonObject(QJsonObject json) {

    m_main_page_suffix_isValid = ::OpenAPI::fromJsonValue(m_main_page_suffix, json[QString("mainPageSuffix")]);
    m_main_page_suffix_isSet = !json[QString("mainPageSuffix")].isNull() && m_main_page_suffix_isValid;

    m_not_found_page_isValid = ::OpenAPI::fromJsonValue(m_not_found_page, json[QString("notFoundPage")]);
    m_not_found_page_isSet = !json[QString("notFoundPage")].isNull() && m_not_found_page_isValid;
}

QString OAIBucket_website::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_website::asJsonObject() const {
    QJsonObject obj;
    if (m_main_page_suffix_isSet) {
        obj.insert(QString("mainPageSuffix"), ::OpenAPI::toJsonValue(m_main_page_suffix));
    }
    if (m_not_found_page_isSet) {
        obj.insert(QString("notFoundPage"), ::OpenAPI::toJsonValue(m_not_found_page));
    }
    return obj;
}

QString OAIBucket_website::getMainPageSuffix() const {
    return m_main_page_suffix;
}
void OAIBucket_website::setMainPageSuffix(const QString &main_page_suffix) {
    m_main_page_suffix = main_page_suffix;
    m_main_page_suffix_isSet = true;
}

bool OAIBucket_website::is_main_page_suffix_Set() const{
    return m_main_page_suffix_isSet;
}

bool OAIBucket_website::is_main_page_suffix_Valid() const{
    return m_main_page_suffix_isValid;
}

QString OAIBucket_website::getNotFoundPage() const {
    return m_not_found_page;
}
void OAIBucket_website::setNotFoundPage(const QString &not_found_page) {
    m_not_found_page = not_found_page;
    m_not_found_page_isSet = true;
}

bool OAIBucket_website::is_not_found_page_Set() const{
    return m_not_found_page_isSet;
}

bool OAIBucket_website::is_not_found_page_Valid() const{
    return m_not_found_page_isValid;
}

bool OAIBucket_website::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_main_page_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_found_page_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_website::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
