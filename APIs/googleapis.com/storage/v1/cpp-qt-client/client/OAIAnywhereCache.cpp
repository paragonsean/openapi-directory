/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnywhereCache.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnywhereCache::OAIAnywhereCache(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnywhereCache::OAIAnywhereCache() {
    this->initializeModel();
}

OAIAnywhereCache::~OAIAnywhereCache() {}

void OAIAnywhereCache::initializeModel() {

    m_admission_policy_isSet = false;
    m_admission_policy_isValid = false;

    m_anywhere_cache_id_isSet = false;
    m_anywhere_cache_id_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pending_update_isSet = false;
    m_pending_update_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIAnywhereCache::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnywhereCache::fromJsonObject(QJsonObject json) {

    m_admission_policy_isValid = ::OpenAPI::fromJsonValue(m_admission_policy, json[QString("admissionPolicy")]);
    m_admission_policy_isSet = !json[QString("admissionPolicy")].isNull() && m_admission_policy_isValid;

    m_anywhere_cache_id_isValid = ::OpenAPI::fromJsonValue(m_anywhere_cache_id, json[QString("anywhereCacheId")]);
    m_anywhere_cache_id_isSet = !json[QString("anywhereCacheId")].isNull() && m_anywhere_cache_id_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pending_update_isValid = ::OpenAPI::fromJsonValue(m_pending_update, json[QString("pendingUpdate")]);
    m_pending_update_isSet = !json[QString("pendingUpdate")].isNull() && m_pending_update_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIAnywhereCache::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnywhereCache::asJsonObject() const {
    QJsonObject obj;
    if (m_admission_policy_isSet) {
        obj.insert(QString("admissionPolicy"), ::OpenAPI::toJsonValue(m_admission_policy));
    }
    if (m_anywhere_cache_id_isSet) {
        obj.insert(QString("anywhereCacheId"), ::OpenAPI::toJsonValue(m_anywhere_cache_id));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pending_update_isSet) {
        obj.insert(QString("pendingUpdate"), ::OpenAPI::toJsonValue(m_pending_update));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAIAnywhereCache::getAdmissionPolicy() const {
    return m_admission_policy;
}
void OAIAnywhereCache::setAdmissionPolicy(const QString &admission_policy) {
    m_admission_policy = admission_policy;
    m_admission_policy_isSet = true;
}

bool OAIAnywhereCache::is_admission_policy_Set() const{
    return m_admission_policy_isSet;
}

bool OAIAnywhereCache::is_admission_policy_Valid() const{
    return m_admission_policy_isValid;
}

QString OAIAnywhereCache::getAnywhereCacheId() const {
    return m_anywhere_cache_id;
}
void OAIAnywhereCache::setAnywhereCacheId(const QString &anywhere_cache_id) {
    m_anywhere_cache_id = anywhere_cache_id;
    m_anywhere_cache_id_isSet = true;
}

bool OAIAnywhereCache::is_anywhere_cache_id_Set() const{
    return m_anywhere_cache_id_isSet;
}

bool OAIAnywhereCache::is_anywhere_cache_id_Valid() const{
    return m_anywhere_cache_id_isValid;
}

QString OAIAnywhereCache::getBucket() const {
    return m_bucket;
}
void OAIAnywhereCache::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIAnywhereCache::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIAnywhereCache::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QDateTime OAIAnywhereCache::getCreateTime() const {
    return m_create_time;
}
void OAIAnywhereCache::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAnywhereCache::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAnywhereCache::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAnywhereCache::getId() const {
    return m_id;
}
void OAIAnywhereCache::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnywhereCache::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnywhereCache::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnywhereCache::getKind() const {
    return m_kind;
}
void OAIAnywhereCache::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAnywhereCache::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAnywhereCache::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIAnywhereCache::isPendingUpdate() const {
    return m_pending_update;
}
void OAIAnywhereCache::setPendingUpdate(const bool &pending_update) {
    m_pending_update = pending_update;
    m_pending_update_isSet = true;
}

bool OAIAnywhereCache::is_pending_update_Set() const{
    return m_pending_update_isSet;
}

bool OAIAnywhereCache::is_pending_update_Valid() const{
    return m_pending_update_isValid;
}

QString OAIAnywhereCache::getSelfLink() const {
    return m_self_link;
}
void OAIAnywhereCache::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIAnywhereCache::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIAnywhereCache::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIAnywhereCache::getState() const {
    return m_state;
}
void OAIAnywhereCache::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAnywhereCache::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAnywhereCache::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAnywhereCache::getTtl() const {
    return m_ttl;
}
void OAIAnywhereCache::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIAnywhereCache::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIAnywhereCache::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QDateTime OAIAnywhereCache::getUpdateTime() const {
    return m_update_time;
}
void OAIAnywhereCache::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAnywhereCache::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAnywhereCache::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIAnywhereCache::getZone() const {
    return m_zone;
}
void OAIAnywhereCache::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIAnywhereCache::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIAnywhereCache::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIAnywhereCache::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admission_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anywhere_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnywhereCache::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
