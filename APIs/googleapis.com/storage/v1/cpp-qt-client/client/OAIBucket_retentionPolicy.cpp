/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_retentionPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_retentionPolicy::OAIBucket_retentionPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_retentionPolicy::OAIBucket_retentionPolicy() {
    this->initializeModel();
}

OAIBucket_retentionPolicy::~OAIBucket_retentionPolicy() {}

void OAIBucket_retentionPolicy::initializeModel() {

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;
}

void OAIBucket_retentionPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_retentionPolicy::fromJsonObject(QJsonObject json) {

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("retentionPeriod")]);
    m_retention_period_isSet = !json[QString("retentionPeriod")].isNull() && m_retention_period_isValid;
}

QString OAIBucket_retentionPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_retentionPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_time_isSet) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_retention_period_isSet) {
        obj.insert(QString("retentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    return obj;
}

QDateTime OAIBucket_retentionPolicy::getEffectiveTime() const {
    return m_effective_time;
}
void OAIBucket_retentionPolicy::setEffectiveTime(const QDateTime &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIBucket_retentionPolicy::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIBucket_retentionPolicy::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

bool OAIBucket_retentionPolicy::isIsLocked() const {
    return m_is_locked;
}
void OAIBucket_retentionPolicy::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIBucket_retentionPolicy::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIBucket_retentionPolicy::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QString OAIBucket_retentionPolicy::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIBucket_retentionPolicy::setRetentionPeriod(const QString &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIBucket_retentionPolicy::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIBucket_retentionPolicy::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

bool OAIBucket_retentionPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_retentionPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
