/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_softDeletePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_softDeletePolicy::OAIBucket_softDeletePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_softDeletePolicy::OAIBucket_softDeletePolicy() {
    this->initializeModel();
}

OAIBucket_softDeletePolicy::~OAIBucket_softDeletePolicy() {}

void OAIBucket_softDeletePolicy::initializeModel() {

    m_effective_time_isSet = false;
    m_effective_time_isValid = false;

    m_retention_duration_seconds_isSet = false;
    m_retention_duration_seconds_isValid = false;
}

void OAIBucket_softDeletePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_softDeletePolicy::fromJsonObject(QJsonObject json) {

    m_effective_time_isValid = ::OpenAPI::fromJsonValue(m_effective_time, json[QString("effectiveTime")]);
    m_effective_time_isSet = !json[QString("effectiveTime")].isNull() && m_effective_time_isValid;

    m_retention_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_retention_duration_seconds, json[QString("retentionDurationSeconds")]);
    m_retention_duration_seconds_isSet = !json[QString("retentionDurationSeconds")].isNull() && m_retention_duration_seconds_isValid;
}

QString OAIBucket_softDeletePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_softDeletePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_time_isSet) {
        obj.insert(QString("effectiveTime"), ::OpenAPI::toJsonValue(m_effective_time));
    }
    if (m_retention_duration_seconds_isSet) {
        obj.insert(QString("retentionDurationSeconds"), ::OpenAPI::toJsonValue(m_retention_duration_seconds));
    }
    return obj;
}

QDateTime OAIBucket_softDeletePolicy::getEffectiveTime() const {
    return m_effective_time;
}
void OAIBucket_softDeletePolicy::setEffectiveTime(const QDateTime &effective_time) {
    m_effective_time = effective_time;
    m_effective_time_isSet = true;
}

bool OAIBucket_softDeletePolicy::is_effective_time_Set() const{
    return m_effective_time_isSet;
}

bool OAIBucket_softDeletePolicy::is_effective_time_Valid() const{
    return m_effective_time_isValid;
}

QString OAIBucket_softDeletePolicy::getRetentionDurationSeconds() const {
    return m_retention_duration_seconds;
}
void OAIBucket_softDeletePolicy::setRetentionDurationSeconds(const QString &retention_duration_seconds) {
    m_retention_duration_seconds = retention_duration_seconds;
    m_retention_duration_seconds_isSet = true;
}

bool OAIBucket_softDeletePolicy::is_retention_duration_seconds_Set() const{
    return m_retention_duration_seconds_isSet;
}

bool OAIBucket_softDeletePolicy::is_retention_duration_seconds_Valid() const{
    return m_retention_duration_seconds_isValid;
}

bool OAIBucket_softDeletePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_softDeletePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
