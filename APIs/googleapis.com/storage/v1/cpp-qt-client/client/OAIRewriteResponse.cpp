/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewriteResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewriteResponse::OAIRewriteResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewriteResponse::OAIRewriteResponse() {
    this->initializeModel();
}

OAIRewriteResponse::~OAIRewriteResponse() {}

void OAIRewriteResponse::initializeModel() {

    m_done_isSet = false;
    m_done_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_object_size_isSet = false;
    m_object_size_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_rewrite_token_isSet = false;
    m_rewrite_token_isValid = false;

    m_total_bytes_rewritten_isSet = false;
    m_total_bytes_rewritten_isValid = false;
}

void OAIRewriteResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewriteResponse::fromJsonObject(QJsonObject json) {

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_object_size_isValid = ::OpenAPI::fromJsonValue(m_object_size, json[QString("objectSize")]);
    m_object_size_isSet = !json[QString("objectSize")].isNull() && m_object_size_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_rewrite_token_isValid = ::OpenAPI::fromJsonValue(m_rewrite_token, json[QString("rewriteToken")]);
    m_rewrite_token_isSet = !json[QString("rewriteToken")].isNull() && m_rewrite_token_isValid;

    m_total_bytes_rewritten_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_rewritten, json[QString("totalBytesRewritten")]);
    m_total_bytes_rewritten_isSet = !json[QString("totalBytesRewritten")].isNull() && m_total_bytes_rewritten_isValid;
}

QString OAIRewriteResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewriteResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_object_size_isSet) {
        obj.insert(QString("objectSize"), ::OpenAPI::toJsonValue(m_object_size));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_rewrite_token_isSet) {
        obj.insert(QString("rewriteToken"), ::OpenAPI::toJsonValue(m_rewrite_token));
    }
    if (m_total_bytes_rewritten_isSet) {
        obj.insert(QString("totalBytesRewritten"), ::OpenAPI::toJsonValue(m_total_bytes_rewritten));
    }
    return obj;
}

bool OAIRewriteResponse::isDone() const {
    return m_done;
}
void OAIRewriteResponse::setDone(const bool &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIRewriteResponse::is_done_Set() const{
    return m_done_isSet;
}

bool OAIRewriteResponse::is_done_Valid() const{
    return m_done_isValid;
}

QString OAIRewriteResponse::getKind() const {
    return m_kind;
}
void OAIRewriteResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRewriteResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRewriteResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIRewriteResponse::getObjectSize() const {
    return m_object_size;
}
void OAIRewriteResponse::setObjectSize(const QString &object_size) {
    m_object_size = object_size;
    m_object_size_isSet = true;
}

bool OAIRewriteResponse::is_object_size_Set() const{
    return m_object_size_isSet;
}

bool OAIRewriteResponse::is_object_size_Valid() const{
    return m_object_size_isValid;
}

OAIObject OAIRewriteResponse::getResource() const {
    return m_resource;
}
void OAIRewriteResponse::setResource(const OAIObject &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIRewriteResponse::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIRewriteResponse::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIRewriteResponse::getRewriteToken() const {
    return m_rewrite_token;
}
void OAIRewriteResponse::setRewriteToken(const QString &rewrite_token) {
    m_rewrite_token = rewrite_token;
    m_rewrite_token_isSet = true;
}

bool OAIRewriteResponse::is_rewrite_token_Set() const{
    return m_rewrite_token_isSet;
}

bool OAIRewriteResponse::is_rewrite_token_Valid() const{
    return m_rewrite_token_isValid;
}

QString OAIRewriteResponse::getTotalBytesRewritten() const {
    return m_total_bytes_rewritten;
}
void OAIRewriteResponse::setTotalBytesRewritten(const QString &total_bytes_rewritten) {
    m_total_bytes_rewritten = total_bytes_rewritten;
    m_total_bytes_rewritten_isSet = true;
}

bool OAIRewriteResponse::is_total_bytes_rewritten_Set() const{
    return m_total_bytes_rewritten_isSet;
}

bool OAIRewriteResponse::is_total_bytes_rewritten_Valid() const{
    return m_total_bytes_rewritten_isValid;
}

bool OAIRewriteResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewrite_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_rewritten_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewriteResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
