/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObject_retention.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObject_retention::OAIObject_retention(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObject_retention::OAIObject_retention() {
    this->initializeModel();
}

OAIObject_retention::~OAIObject_retention() {}

void OAIObject_retention::initializeModel() {

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_retain_until_time_isSet = false;
    m_retain_until_time_isValid = false;
}

void OAIObject_retention::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObject_retention::fromJsonObject(QJsonObject json) {

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_retain_until_time_isValid = ::OpenAPI::fromJsonValue(m_retain_until_time, json[QString("retainUntilTime")]);
    m_retain_until_time_isSet = !json[QString("retainUntilTime")].isNull() && m_retain_until_time_isValid;
}

QString OAIObject_retention::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObject_retention::asJsonObject() const {
    QJsonObject obj;
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_retain_until_time_isSet) {
        obj.insert(QString("retainUntilTime"), ::OpenAPI::toJsonValue(m_retain_until_time));
    }
    return obj;
}

QString OAIObject_retention::getMode() const {
    return m_mode;
}
void OAIObject_retention::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIObject_retention::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIObject_retention::is_mode_Valid() const{
    return m_mode_isValid;
}

QDateTime OAIObject_retention::getRetainUntilTime() const {
    return m_retain_until_time;
}
void OAIObject_retention::setRetainUntilTime(const QDateTime &retain_until_time) {
    m_retain_until_time = retain_until_time;
    m_retain_until_time_isSet = true;
}

bool OAIObject_retention::is_retain_until_time_Set() const{
    return m_retain_until_time_isSet;
}

bool OAIObject_retention::is_retain_until_time_Valid() const{
    return m_retain_until_time_isValid;
}

bool OAIObject_retention::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_until_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObject_retention::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
