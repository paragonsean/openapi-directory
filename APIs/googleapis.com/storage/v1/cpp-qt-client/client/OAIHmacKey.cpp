/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHmacKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHmacKey::OAIHmacKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHmacKey::OAIHmacKey() {
    this->initializeModel();
}

OAIHmacKey::~OAIHmacKey() {}

void OAIHmacKey::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIHmacKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHmacKey::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIHmacKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHmacKey::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIHmacKey::getKind() const {
    return m_kind;
}
void OAIHmacKey::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIHmacKey::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIHmacKey::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIHmacKeyMetadata OAIHmacKey::getMetadata() const {
    return m_metadata;
}
void OAIHmacKey::setMetadata(const OAIHmacKeyMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIHmacKey::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIHmacKey::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIHmacKey::getSecret() const {
    return m_secret;
}
void OAIHmacKey::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIHmacKey::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIHmacKey::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIHmacKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHmacKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
