/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_object_name_prefix_isSet = false;
    m_object_name_prefix_isValid = false;

    m_payload_format_isSet = false;
    m_payload_format_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("custom_attributes")]);
    m_custom_attributes_isSet = !json[QString("custom_attributes")].isNull() && m_custom_attributes_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("event_types")]);
    m_event_types_isSet = !json[QString("event_types")].isNull() && m_event_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_object_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_object_name_prefix, json[QString("object_name_prefix")]);
    m_object_name_prefix_isSet = !json[QString("object_name_prefix")].isNull() && m_object_name_prefix_isValid;

    m_payload_format_isValid = ::OpenAPI::fromJsonValue(m_payload_format, json[QString("payload_format")]);
    m_payload_format_isSet = !json[QString("payload_format")].isNull() && m_payload_format_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_attributes.size() > 0) {
        obj.insert(QString("custom_attributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_event_types.size() > 0) {
        obj.insert(QString("event_types"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_object_name_prefix_isSet) {
        obj.insert(QString("object_name_prefix"), ::OpenAPI::toJsonValue(m_object_name_prefix));
    }
    if (m_payload_format_isSet) {
        obj.insert(QString("payload_format"), ::OpenAPI::toJsonValue(m_payload_format));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QMap<QString, QString> OAINotification::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAINotification::setCustomAttributes(const QMap<QString, QString> &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAINotification::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAINotification::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAINotification::getEtag() const {
    return m_etag;
}
void OAINotification::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAINotification::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAINotification::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<QString> OAINotification::getEventTypes() const {
    return m_event_types;
}
void OAINotification::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAINotification::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAINotification::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAINotification::getId() const {
    return m_id;
}
void OAINotification::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotification::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINotification::getKind() const {
    return m_kind;
}
void OAINotification::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAINotification::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAINotification::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAINotification::getObjectNamePrefix() const {
    return m_object_name_prefix;
}
void OAINotification::setObjectNamePrefix(const QString &object_name_prefix) {
    m_object_name_prefix = object_name_prefix;
    m_object_name_prefix_isSet = true;
}

bool OAINotification::is_object_name_prefix_Set() const{
    return m_object_name_prefix_isSet;
}

bool OAINotification::is_object_name_prefix_Valid() const{
    return m_object_name_prefix_isValid;
}

QString OAINotification::getPayloadFormat() const {
    return m_payload_format;
}
void OAINotification::setPayloadFormat(const QString &payload_format) {
    m_payload_format = payload_format;
    m_payload_format_isSet = true;
}

bool OAINotification::is_payload_format_Set() const{
    return m_payload_format_isSet;
}

bool OAINotification::is_payload_format_Valid() const{
    return m_payload_format_isValid;
}

QString OAINotification::getSelfLink() const {
    return m_self_link;
}
void OAINotification::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAINotification::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAINotification::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAINotification::getTopic() const {
    return m_topic;
}
void OAINotification::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAINotification::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAINotification::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
