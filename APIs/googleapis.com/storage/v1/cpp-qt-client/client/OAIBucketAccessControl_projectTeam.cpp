/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketAccessControl_projectTeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketAccessControl_projectTeam::OAIBucketAccessControl_projectTeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketAccessControl_projectTeam::OAIBucketAccessControl_projectTeam() {
    this->initializeModel();
}

OAIBucketAccessControl_projectTeam::~OAIBucketAccessControl_projectTeam() {}

void OAIBucketAccessControl_projectTeam::initializeModel() {

    m_project_number_isSet = false;
    m_project_number_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIBucketAccessControl_projectTeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketAccessControl_projectTeam::fromJsonObject(QJsonObject json) {

    m_project_number_isValid = ::OpenAPI::fromJsonValue(m_project_number, json[QString("projectNumber")]);
    m_project_number_isSet = !json[QString("projectNumber")].isNull() && m_project_number_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIBucketAccessControl_projectTeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketAccessControl_projectTeam::asJsonObject() const {
    QJsonObject obj;
    if (m_project_number_isSet) {
        obj.insert(QString("projectNumber"), ::OpenAPI::toJsonValue(m_project_number));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

QString OAIBucketAccessControl_projectTeam::getProjectNumber() const {
    return m_project_number;
}
void OAIBucketAccessControl_projectTeam::setProjectNumber(const QString &project_number) {
    m_project_number = project_number;
    m_project_number_isSet = true;
}

bool OAIBucketAccessControl_projectTeam::is_project_number_Set() const{
    return m_project_number_isSet;
}

bool OAIBucketAccessControl_projectTeam::is_project_number_Valid() const{
    return m_project_number_isValid;
}

QString OAIBucketAccessControl_projectTeam::getTeam() const {
    return m_team;
}
void OAIBucketAccessControl_projectTeam::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIBucketAccessControl_projectTeam::is_team_Set() const{
    return m_team_isSet;
}

bool OAIBucketAccessControl_projectTeam::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIBucketAccessControl_projectTeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketAccessControl_projectTeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
