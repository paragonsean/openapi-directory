/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_billing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_billing::OAIBucket_billing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_billing::OAIBucket_billing() {
    this->initializeModel();
}

OAIBucket_billing::~OAIBucket_billing() {}

void OAIBucket_billing::initializeModel() {

    m_requester_pays_isSet = false;
    m_requester_pays_isValid = false;
}

void OAIBucket_billing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_billing::fromJsonObject(QJsonObject json) {

    m_requester_pays_isValid = ::OpenAPI::fromJsonValue(m_requester_pays, json[QString("requesterPays")]);
    m_requester_pays_isSet = !json[QString("requesterPays")].isNull() && m_requester_pays_isValid;
}

QString OAIBucket_billing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_billing::asJsonObject() const {
    QJsonObject obj;
    if (m_requester_pays_isSet) {
        obj.insert(QString("requesterPays"), ::OpenAPI::toJsonValue(m_requester_pays));
    }
    return obj;
}

bool OAIBucket_billing::isRequesterPays() const {
    return m_requester_pays;
}
void OAIBucket_billing::setRequesterPays(const bool &requester_pays) {
    m_requester_pays = requester_pays;
    m_requester_pays_isSet = true;
}

bool OAIBucket_billing::is_requester_pays_Set() const{
    return m_requester_pays_isSet;
}

bool OAIBucket_billing::is_requester_pays_Valid() const{
    return m_requester_pays_isValid;
}

bool OAIBucket_billing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requester_pays_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_billing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
