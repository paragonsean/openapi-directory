/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_autoclass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_autoclass::OAIBucket_autoclass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_autoclass::OAIBucket_autoclass() {
    this->initializeModel();
}

OAIBucket_autoclass::~OAIBucket_autoclass() {}

void OAIBucket_autoclass::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_terminal_storage_class_isSet = false;
    m_terminal_storage_class_isValid = false;

    m_terminal_storage_class_update_time_isSet = false;
    m_terminal_storage_class_update_time_isValid = false;

    m_toggle_time_isSet = false;
    m_toggle_time_isValid = false;
}

void OAIBucket_autoclass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_autoclass::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_terminal_storage_class_isValid = ::OpenAPI::fromJsonValue(m_terminal_storage_class, json[QString("terminalStorageClass")]);
    m_terminal_storage_class_isSet = !json[QString("terminalStorageClass")].isNull() && m_terminal_storage_class_isValid;

    m_terminal_storage_class_update_time_isValid = ::OpenAPI::fromJsonValue(m_terminal_storage_class_update_time, json[QString("terminalStorageClassUpdateTime")]);
    m_terminal_storage_class_update_time_isSet = !json[QString("terminalStorageClassUpdateTime")].isNull() && m_terminal_storage_class_update_time_isValid;

    m_toggle_time_isValid = ::OpenAPI::fromJsonValue(m_toggle_time, json[QString("toggleTime")]);
    m_toggle_time_isSet = !json[QString("toggleTime")].isNull() && m_toggle_time_isValid;
}

QString OAIBucket_autoclass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_autoclass::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_terminal_storage_class_isSet) {
        obj.insert(QString("terminalStorageClass"), ::OpenAPI::toJsonValue(m_terminal_storage_class));
    }
    if (m_terminal_storage_class_update_time_isSet) {
        obj.insert(QString("terminalStorageClassUpdateTime"), ::OpenAPI::toJsonValue(m_terminal_storage_class_update_time));
    }
    if (m_toggle_time_isSet) {
        obj.insert(QString("toggleTime"), ::OpenAPI::toJsonValue(m_toggle_time));
    }
    return obj;
}

bool OAIBucket_autoclass::isEnabled() const {
    return m_enabled;
}
void OAIBucket_autoclass::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBucket_autoclass::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBucket_autoclass::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIBucket_autoclass::getTerminalStorageClass() const {
    return m_terminal_storage_class;
}
void OAIBucket_autoclass::setTerminalStorageClass(const QString &terminal_storage_class) {
    m_terminal_storage_class = terminal_storage_class;
    m_terminal_storage_class_isSet = true;
}

bool OAIBucket_autoclass::is_terminal_storage_class_Set() const{
    return m_terminal_storage_class_isSet;
}

bool OAIBucket_autoclass::is_terminal_storage_class_Valid() const{
    return m_terminal_storage_class_isValid;
}

QDateTime OAIBucket_autoclass::getTerminalStorageClassUpdateTime() const {
    return m_terminal_storage_class_update_time;
}
void OAIBucket_autoclass::setTerminalStorageClassUpdateTime(const QDateTime &terminal_storage_class_update_time) {
    m_terminal_storage_class_update_time = terminal_storage_class_update_time;
    m_terminal_storage_class_update_time_isSet = true;
}

bool OAIBucket_autoclass::is_terminal_storage_class_update_time_Set() const{
    return m_terminal_storage_class_update_time_isSet;
}

bool OAIBucket_autoclass::is_terminal_storage_class_update_time_Valid() const{
    return m_terminal_storage_class_update_time_isValid;
}

QDateTime OAIBucket_autoclass::getToggleTime() const {
    return m_toggle_time;
}
void OAIBucket_autoclass::setToggleTime(const QDateTime &toggle_time) {
    m_toggle_time = toggle_time;
    m_toggle_time_isSet = true;
}

bool OAIBucket_autoclass::is_toggle_time_Set() const{
    return m_toggle_time_isSet;
}

bool OAIBucket_autoclass::is_toggle_time_Valid() const{
    return m_toggle_time_isValid;
}

bool OAIBucket_autoclass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_storage_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_storage_class_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toggle_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_autoclass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
