/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHmacKey.h"
#include "OAIHmacKeyMetadata.h"
#include "OAIHmacKeysMetadata.h"
#include "OAIServiceAccount.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  service_account_email QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_projects_hmacKeys_create(const QString &project_id, const QString &service_account_email, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  access_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_projects_hmacKeys_delete(const QString &project_id, const QString &access_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  access_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_projects_hmacKeys_get(const QString &project_id, const QString &access_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  service_account_email QString [optional]
    * @param[in]  show_deleted_keys bool [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_projects_hmacKeys_list(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_account_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_deleted_keys = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  access_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    * @param[in]  oai_hmac_key_metadata OAIHmacKeyMetadata [optional]
    */
    virtual void storage_projects_hmacKeys_update(const QString &project_id, const QString &access_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHmacKeyMetadata> &oai_hmac_key_metadata = ::OpenAPI::OptionalParam<OAIHmacKeyMetadata>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  user_project QString [optional]
    */
    virtual void storage_projects_serviceAccount_get(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_project = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storage_projects_hmacKeys_createCallback(OAIHttpRequestWorker *worker);
    void storage_projects_hmacKeys_deleteCallback(OAIHttpRequestWorker *worker);
    void storage_projects_hmacKeys_getCallback(OAIHttpRequestWorker *worker);
    void storage_projects_hmacKeys_listCallback(OAIHttpRequestWorker *worker);
    void storage_projects_hmacKeys_updateCallback(OAIHttpRequestWorker *worker);
    void storage_projects_serviceAccount_getCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storage_projects_hmacKeys_createSignal(OAIHmacKey summary);
    void storage_projects_hmacKeys_deleteSignal();
    void storage_projects_hmacKeys_getSignal(OAIHmacKeyMetadata summary);
    void storage_projects_hmacKeys_listSignal(OAIHmacKeysMetadata summary);
    void storage_projects_hmacKeys_updateSignal(OAIHmacKeyMetadata summary);
    void storage_projects_serviceAccount_getSignal(OAIServiceAccount summary);


    void storage_projects_hmacKeys_createSignalFull(OAIHttpRequestWorker *worker, OAIHmacKey summary);
    void storage_projects_hmacKeys_deleteSignalFull(OAIHttpRequestWorker *worker);
    void storage_projects_hmacKeys_getSignalFull(OAIHttpRequestWorker *worker, OAIHmacKeyMetadata summary);
    void storage_projects_hmacKeys_listSignalFull(OAIHttpRequestWorker *worker, OAIHmacKeysMetadata summary);
    void storage_projects_hmacKeys_updateSignalFull(OAIHttpRequestWorker *worker, OAIHmacKeyMetadata summary);
    void storage_projects_serviceAccount_getSignalFull(OAIHttpRequestWorker *worker, OAIServiceAccount summary);

    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_createSignalError() instead")
    void storage_projects_hmacKeys_createSignalE(OAIHmacKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_createSignalError(OAIHmacKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_deleteSignalError() instead")
    void storage_projects_hmacKeys_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_getSignalError() instead")
    void storage_projects_hmacKeys_getSignalE(OAIHmacKeyMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_getSignalError(OAIHmacKeyMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_listSignalError() instead")
    void storage_projects_hmacKeys_listSignalE(OAIHmacKeysMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_listSignalError(OAIHmacKeysMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_updateSignalError() instead")
    void storage_projects_hmacKeys_updateSignalE(OAIHmacKeyMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_updateSignalError(OAIHmacKeyMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_serviceAccount_getSignalError() instead")
    void storage_projects_serviceAccount_getSignalE(OAIServiceAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_serviceAccount_getSignalError(OAIServiceAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_createSignalErrorFull() instead")
    void storage_projects_hmacKeys_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_deleteSignalErrorFull() instead")
    void storage_projects_hmacKeys_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_getSignalErrorFull() instead")
    void storage_projects_hmacKeys_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_listSignalErrorFull() instead")
    void storage_projects_hmacKeys_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_hmacKeys_updateSignalErrorFull() instead")
    void storage_projects_hmacKeys_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_hmacKeys_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_projects_serviceAccount_getSignalErrorFull() instead")
    void storage_projects_serviceAccount_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_projects_serviceAccount_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
