/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_lifecycle_rule_inner_condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_lifecycle_rule_inner_condition::OAIBucket_lifecycle_rule_inner_condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_lifecycle_rule_inner_condition::OAIBucket_lifecycle_rule_inner_condition() {
    this->initializeModel();
}

OAIBucket_lifecycle_rule_inner_condition::~OAIBucket_lifecycle_rule_inner_condition() {}

void OAIBucket_lifecycle_rule_inner_condition::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_custom_time_before_isSet = false;
    m_custom_time_before_isValid = false;

    m_days_since_custom_time_isSet = false;
    m_days_since_custom_time_isValid = false;

    m_days_since_noncurrent_time_isSet = false;
    m_days_since_noncurrent_time_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_matches_pattern_isSet = false;
    m_matches_pattern_isValid = false;

    m_matches_prefix_isSet = false;
    m_matches_prefix_isValid = false;

    m_matches_storage_class_isSet = false;
    m_matches_storage_class_isValid = false;

    m_matches_suffix_isSet = false;
    m_matches_suffix_isValid = false;

    m_noncurrent_time_before_isSet = false;
    m_noncurrent_time_before_isValid = false;

    m_num_newer_versions_isSet = false;
    m_num_newer_versions_isValid = false;
}

void OAIBucket_lifecycle_rule_inner_condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_lifecycle_rule_inner_condition::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("createdBefore")]);
    m_created_before_isSet = !json[QString("createdBefore")].isNull() && m_created_before_isValid;

    m_custom_time_before_isValid = ::OpenAPI::fromJsonValue(m_custom_time_before, json[QString("customTimeBefore")]);
    m_custom_time_before_isSet = !json[QString("customTimeBefore")].isNull() && m_custom_time_before_isValid;

    m_days_since_custom_time_isValid = ::OpenAPI::fromJsonValue(m_days_since_custom_time, json[QString("daysSinceCustomTime")]);
    m_days_since_custom_time_isSet = !json[QString("daysSinceCustomTime")].isNull() && m_days_since_custom_time_isValid;

    m_days_since_noncurrent_time_isValid = ::OpenAPI::fromJsonValue(m_days_since_noncurrent_time, json[QString("daysSinceNoncurrentTime")]);
    m_days_since_noncurrent_time_isSet = !json[QString("daysSinceNoncurrentTime")].isNull() && m_days_since_noncurrent_time_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("isLive")]);
    m_is_live_isSet = !json[QString("isLive")].isNull() && m_is_live_isValid;

    m_matches_pattern_isValid = ::OpenAPI::fromJsonValue(m_matches_pattern, json[QString("matchesPattern")]);
    m_matches_pattern_isSet = !json[QString("matchesPattern")].isNull() && m_matches_pattern_isValid;

    m_matches_prefix_isValid = ::OpenAPI::fromJsonValue(m_matches_prefix, json[QString("matchesPrefix")]);
    m_matches_prefix_isSet = !json[QString("matchesPrefix")].isNull() && m_matches_prefix_isValid;

    m_matches_storage_class_isValid = ::OpenAPI::fromJsonValue(m_matches_storage_class, json[QString("matchesStorageClass")]);
    m_matches_storage_class_isSet = !json[QString("matchesStorageClass")].isNull() && m_matches_storage_class_isValid;

    m_matches_suffix_isValid = ::OpenAPI::fromJsonValue(m_matches_suffix, json[QString("matchesSuffix")]);
    m_matches_suffix_isSet = !json[QString("matchesSuffix")].isNull() && m_matches_suffix_isValid;

    m_noncurrent_time_before_isValid = ::OpenAPI::fromJsonValue(m_noncurrent_time_before, json[QString("noncurrentTimeBefore")]);
    m_noncurrent_time_before_isSet = !json[QString("noncurrentTimeBefore")].isNull() && m_noncurrent_time_before_isValid;

    m_num_newer_versions_isValid = ::OpenAPI::fromJsonValue(m_num_newer_versions, json[QString("numNewerVersions")]);
    m_num_newer_versions_isSet = !json[QString("numNewerVersions")].isNull() && m_num_newer_versions_isValid;
}

QString OAIBucket_lifecycle_rule_inner_condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_lifecycle_rule_inner_condition::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("createdBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_custom_time_before_isSet) {
        obj.insert(QString("customTimeBefore"), ::OpenAPI::toJsonValue(m_custom_time_before));
    }
    if (m_days_since_custom_time_isSet) {
        obj.insert(QString("daysSinceCustomTime"), ::OpenAPI::toJsonValue(m_days_since_custom_time));
    }
    if (m_days_since_noncurrent_time_isSet) {
        obj.insert(QString("daysSinceNoncurrentTime"), ::OpenAPI::toJsonValue(m_days_since_noncurrent_time));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("isLive"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_matches_pattern_isSet) {
        obj.insert(QString("matchesPattern"), ::OpenAPI::toJsonValue(m_matches_pattern));
    }
    if (m_matches_prefix.size() > 0) {
        obj.insert(QString("matchesPrefix"), ::OpenAPI::toJsonValue(m_matches_prefix));
    }
    if (m_matches_storage_class.size() > 0) {
        obj.insert(QString("matchesStorageClass"), ::OpenAPI::toJsonValue(m_matches_storage_class));
    }
    if (m_matches_suffix.size() > 0) {
        obj.insert(QString("matchesSuffix"), ::OpenAPI::toJsonValue(m_matches_suffix));
    }
    if (m_noncurrent_time_before_isSet) {
        obj.insert(QString("noncurrentTimeBefore"), ::OpenAPI::toJsonValue(m_noncurrent_time_before));
    }
    if (m_num_newer_versions_isSet) {
        obj.insert(QString("numNewerVersions"), ::OpenAPI::toJsonValue(m_num_newer_versions));
    }
    return obj;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getAge() const {
    return m_age;
}
void OAIBucket_lifecycle_rule_inner_condition::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_age_Set() const{
    return m_age_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_age_Valid() const{
    return m_age_isValid;
}

QDate OAIBucket_lifecycle_rule_inner_condition::getCreatedBefore() const {
    return m_created_before;
}
void OAIBucket_lifecycle_rule_inner_condition::setCreatedBefore(const QDate &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_created_before_Valid() const{
    return m_created_before_isValid;
}

QDate OAIBucket_lifecycle_rule_inner_condition::getCustomTimeBefore() const {
    return m_custom_time_before;
}
void OAIBucket_lifecycle_rule_inner_condition::setCustomTimeBefore(const QDate &custom_time_before) {
    m_custom_time_before = custom_time_before;
    m_custom_time_before_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_custom_time_before_Set() const{
    return m_custom_time_before_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_custom_time_before_Valid() const{
    return m_custom_time_before_isValid;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getDaysSinceCustomTime() const {
    return m_days_since_custom_time;
}
void OAIBucket_lifecycle_rule_inner_condition::setDaysSinceCustomTime(const qint32 &days_since_custom_time) {
    m_days_since_custom_time = days_since_custom_time;
    m_days_since_custom_time_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_days_since_custom_time_Set() const{
    return m_days_since_custom_time_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_days_since_custom_time_Valid() const{
    return m_days_since_custom_time_isValid;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getDaysSinceNoncurrentTime() const {
    return m_days_since_noncurrent_time;
}
void OAIBucket_lifecycle_rule_inner_condition::setDaysSinceNoncurrentTime(const qint32 &days_since_noncurrent_time) {
    m_days_since_noncurrent_time = days_since_noncurrent_time;
    m_days_since_noncurrent_time_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_days_since_noncurrent_time_Set() const{
    return m_days_since_noncurrent_time_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_days_since_noncurrent_time_Valid() const{
    return m_days_since_noncurrent_time_isValid;
}

bool OAIBucket_lifecycle_rule_inner_condition::isIsLive() const {
    return m_is_live;
}
void OAIBucket_lifecycle_rule_inner_condition::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_is_live_Valid() const{
    return m_is_live_isValid;
}

QString OAIBucket_lifecycle_rule_inner_condition::getMatchesPattern() const {
    return m_matches_pattern;
}
void OAIBucket_lifecycle_rule_inner_condition::setMatchesPattern(const QString &matches_pattern) {
    m_matches_pattern = matches_pattern;
    m_matches_pattern_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_pattern_Set() const{
    return m_matches_pattern_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_pattern_Valid() const{
    return m_matches_pattern_isValid;
}

QList<QString> OAIBucket_lifecycle_rule_inner_condition::getMatchesPrefix() const {
    return m_matches_prefix;
}
void OAIBucket_lifecycle_rule_inner_condition::setMatchesPrefix(const QList<QString> &matches_prefix) {
    m_matches_prefix = matches_prefix;
    m_matches_prefix_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_prefix_Set() const{
    return m_matches_prefix_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_prefix_Valid() const{
    return m_matches_prefix_isValid;
}

QList<QString> OAIBucket_lifecycle_rule_inner_condition::getMatchesStorageClass() const {
    return m_matches_storage_class;
}
void OAIBucket_lifecycle_rule_inner_condition::setMatchesStorageClass(const QList<QString> &matches_storage_class) {
    m_matches_storage_class = matches_storage_class;
    m_matches_storage_class_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_storage_class_Set() const{
    return m_matches_storage_class_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_storage_class_Valid() const{
    return m_matches_storage_class_isValid;
}

QList<QString> OAIBucket_lifecycle_rule_inner_condition::getMatchesSuffix() const {
    return m_matches_suffix;
}
void OAIBucket_lifecycle_rule_inner_condition::setMatchesSuffix(const QList<QString> &matches_suffix) {
    m_matches_suffix = matches_suffix;
    m_matches_suffix_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_suffix_Set() const{
    return m_matches_suffix_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_matches_suffix_Valid() const{
    return m_matches_suffix_isValid;
}

QDate OAIBucket_lifecycle_rule_inner_condition::getNoncurrentTimeBefore() const {
    return m_noncurrent_time_before;
}
void OAIBucket_lifecycle_rule_inner_condition::setNoncurrentTimeBefore(const QDate &noncurrent_time_before) {
    m_noncurrent_time_before = noncurrent_time_before;
    m_noncurrent_time_before_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_noncurrent_time_before_Set() const{
    return m_noncurrent_time_before_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_noncurrent_time_before_Valid() const{
    return m_noncurrent_time_before_isValid;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getNumNewerVersions() const {
    return m_num_newer_versions;
}
void OAIBucket_lifecycle_rule_inner_condition::setNumNewerVersions(const qint32 &num_newer_versions) {
    m_num_newer_versions = num_newer_versions;
    m_num_newer_versions_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_num_newer_versions_Set() const{
    return m_num_newer_versions_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_num_newer_versions_Valid() const{
    return m_num_newer_versions_isValid;
}

bool OAIBucket_lifecycle_rule_inner_condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_since_custom_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_since_noncurrent_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_storage_class.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_suffix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_noncurrent_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_newer_versions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_lifecycle_rule_inner_condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
