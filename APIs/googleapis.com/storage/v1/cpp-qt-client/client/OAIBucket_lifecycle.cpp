/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_lifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_lifecycle::OAIBucket_lifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_lifecycle::OAIBucket_lifecycle() {
    this->initializeModel();
}

OAIBucket_lifecycle::~OAIBucket_lifecycle() {}

void OAIBucket_lifecycle::initializeModel() {

    m_rule_isSet = false;
    m_rule_isValid = false;
}

void OAIBucket_lifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_lifecycle::fromJsonObject(QJsonObject json) {

    m_rule_isValid = ::OpenAPI::fromJsonValue(m_rule, json[QString("rule")]);
    m_rule_isSet = !json[QString("rule")].isNull() && m_rule_isValid;
}

QString OAIBucket_lifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_lifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_rule.size() > 0) {
        obj.insert(QString("rule"), ::OpenAPI::toJsonValue(m_rule));
    }
    return obj;
}

QList<OAIBucket_lifecycle_rule_inner> OAIBucket_lifecycle::getRule() const {
    return m_rule;
}
void OAIBucket_lifecycle::setRule(const QList<OAIBucket_lifecycle_rule_inner> &rule) {
    m_rule = rule;
    m_rule_isSet = true;
}

bool OAIBucket_lifecycle::is_rule_Set() const{
    return m_rule_isSet;
}

bool OAIBucket_lifecycle::is_rule_Valid() const{
    return m_rule_isValid;
}

bool OAIBucket_lifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rule.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_lifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
