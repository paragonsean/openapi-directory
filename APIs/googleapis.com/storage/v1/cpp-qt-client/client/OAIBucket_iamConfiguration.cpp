/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_iamConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_iamConfiguration::OAIBucket_iamConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_iamConfiguration::OAIBucket_iamConfiguration() {
    this->initializeModel();
}

OAIBucket_iamConfiguration::~OAIBucket_iamConfiguration() {}

void OAIBucket_iamConfiguration::initializeModel() {

    m_bucket_policy_only_isSet = false;
    m_bucket_policy_only_isValid = false;

    m_public_access_prevention_isSet = false;
    m_public_access_prevention_isValid = false;

    m_uniform_bucket_level_access_isSet = false;
    m_uniform_bucket_level_access_isValid = false;
}

void OAIBucket_iamConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_iamConfiguration::fromJsonObject(QJsonObject json) {

    m_bucket_policy_only_isValid = ::OpenAPI::fromJsonValue(m_bucket_policy_only, json[QString("bucketPolicyOnly")]);
    m_bucket_policy_only_isSet = !json[QString("bucketPolicyOnly")].isNull() && m_bucket_policy_only_isValid;

    m_public_access_prevention_isValid = ::OpenAPI::fromJsonValue(m_public_access_prevention, json[QString("publicAccessPrevention")]);
    m_public_access_prevention_isSet = !json[QString("publicAccessPrevention")].isNull() && m_public_access_prevention_isValid;

    m_uniform_bucket_level_access_isValid = ::OpenAPI::fromJsonValue(m_uniform_bucket_level_access, json[QString("uniformBucketLevelAccess")]);
    m_uniform_bucket_level_access_isSet = !json[QString("uniformBucketLevelAccess")].isNull() && m_uniform_bucket_level_access_isValid;
}

QString OAIBucket_iamConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_iamConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_policy_only.isSet()) {
        obj.insert(QString("bucketPolicyOnly"), ::OpenAPI::toJsonValue(m_bucket_policy_only));
    }
    if (m_public_access_prevention_isSet) {
        obj.insert(QString("publicAccessPrevention"), ::OpenAPI::toJsonValue(m_public_access_prevention));
    }
    if (m_uniform_bucket_level_access.isSet()) {
        obj.insert(QString("uniformBucketLevelAccess"), ::OpenAPI::toJsonValue(m_uniform_bucket_level_access));
    }
    return obj;
}

OAIBucket_iamConfiguration_bucketPolicyOnly OAIBucket_iamConfiguration::getBucketPolicyOnly() const {
    return m_bucket_policy_only;
}
void OAIBucket_iamConfiguration::setBucketPolicyOnly(const OAIBucket_iamConfiguration_bucketPolicyOnly &bucket_policy_only) {
    m_bucket_policy_only = bucket_policy_only;
    m_bucket_policy_only_isSet = true;
}

bool OAIBucket_iamConfiguration::is_bucket_policy_only_Set() const{
    return m_bucket_policy_only_isSet;
}

bool OAIBucket_iamConfiguration::is_bucket_policy_only_Valid() const{
    return m_bucket_policy_only_isValid;
}

QString OAIBucket_iamConfiguration::getPublicAccessPrevention() const {
    return m_public_access_prevention;
}
void OAIBucket_iamConfiguration::setPublicAccessPrevention(const QString &public_access_prevention) {
    m_public_access_prevention = public_access_prevention;
    m_public_access_prevention_isSet = true;
}

bool OAIBucket_iamConfiguration::is_public_access_prevention_Set() const{
    return m_public_access_prevention_isSet;
}

bool OAIBucket_iamConfiguration::is_public_access_prevention_Valid() const{
    return m_public_access_prevention_isValid;
}

OAIBucket_iamConfiguration_uniformBucketLevelAccess OAIBucket_iamConfiguration::getUniformBucketLevelAccess() const {
    return m_uniform_bucket_level_access;
}
void OAIBucket_iamConfiguration::setUniformBucketLevelAccess(const OAIBucket_iamConfiguration_uniformBucketLevelAccess &uniform_bucket_level_access) {
    m_uniform_bucket_level_access = uniform_bucket_level_access;
    m_uniform_bucket_level_access_isSet = true;
}

bool OAIBucket_iamConfiguration::is_uniform_bucket_level_access_Set() const{
    return m_uniform_bucket_level_access_isSet;
}

bool OAIBucket_iamConfiguration::is_uniform_bucket_level_access_Valid() const{
    return m_uniform_bucket_level_access_isValid;
}

bool OAIBucket_iamConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_policy_only.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_prevention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uniform_bucket_level_access.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_iamConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
