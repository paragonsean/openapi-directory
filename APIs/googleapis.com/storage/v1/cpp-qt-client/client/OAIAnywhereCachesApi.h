/**
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnywhereCachesApi_H
#define OAI_OAIAnywhereCachesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnywhereCache.h"
#include "OAIAnywhereCaches.h"
#include "OAIGoogleLongrunningOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnywhereCachesApi : public QObject {
    Q_OBJECT

public:
    OAIAnywhereCachesApi(const int timeOut = 0);
    ~OAIAnywhereCachesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  anywhere_cache_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void storage_anywhereCaches_disable(const QString &bucket, const QString &anywhere_cache_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  anywhere_cache_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void storage_anywhereCaches_get(const QString &bucket, const QString &anywhere_cache_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_anywhere_cache OAIAnywhereCache [optional]
    */
    virtual void storage_anywhereCaches_insert(const QString &bucket, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAnywhereCache> &oai_anywhere_cache = ::OpenAPI::OptionalParam<OAIAnywhereCache>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void storage_anywhereCaches_list(const QString &bucket, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  anywhere_cache_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void storage_anywhereCaches_pause(const QString &bucket, const QString &anywhere_cache_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  anywhere_cache_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void storage_anywhereCaches_resume(const QString &bucket, const QString &anywhere_cache_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bucket QString [required]
    * @param[in]  anywhere_cache_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_anywhere_cache OAIAnywhereCache [optional]
    */
    virtual void storage_anywhereCaches_update(const QString &bucket, const QString &anywhere_cache_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAnywhereCache> &oai_anywhere_cache = ::OpenAPI::OptionalParam<OAIAnywhereCache>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storage_anywhereCaches_disableCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_getCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_insertCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_listCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_pauseCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_resumeCallback(OAIHttpRequestWorker *worker);
    void storage_anywhereCaches_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storage_anywhereCaches_disableSignal(OAIAnywhereCache summary);
    void storage_anywhereCaches_getSignal(OAIAnywhereCache summary);
    void storage_anywhereCaches_insertSignal(OAIGoogleLongrunningOperation summary);
    void storage_anywhereCaches_listSignal(OAIAnywhereCaches summary);
    void storage_anywhereCaches_pauseSignal(OAIAnywhereCache summary);
    void storage_anywhereCaches_resumeSignal(OAIAnywhereCache summary);
    void storage_anywhereCaches_updateSignal(OAIGoogleLongrunningOperation summary);


    void storage_anywhereCaches_disableSignalFull(OAIHttpRequestWorker *worker, OAIAnywhereCache summary);
    void storage_anywhereCaches_getSignalFull(OAIHttpRequestWorker *worker, OAIAnywhereCache summary);
    void storage_anywhereCaches_insertSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void storage_anywhereCaches_listSignalFull(OAIHttpRequestWorker *worker, OAIAnywhereCaches summary);
    void storage_anywhereCaches_pauseSignalFull(OAIHttpRequestWorker *worker, OAIAnywhereCache summary);
    void storage_anywhereCaches_resumeSignalFull(OAIHttpRequestWorker *worker, OAIAnywhereCache summary);
    void storage_anywhereCaches_updateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);

    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_disableSignalError() instead")
    void storage_anywhereCaches_disableSignalE(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_disableSignalError(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_getSignalError() instead")
    void storage_anywhereCaches_getSignalE(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_getSignalError(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_insertSignalError() instead")
    void storage_anywhereCaches_insertSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_insertSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_listSignalError() instead")
    void storage_anywhereCaches_listSignalE(OAIAnywhereCaches summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_listSignalError(OAIAnywhereCaches summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_pauseSignalError() instead")
    void storage_anywhereCaches_pauseSignalE(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_pauseSignalError(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_resumeSignalError() instead")
    void storage_anywhereCaches_resumeSignalE(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_resumeSignalError(OAIAnywhereCache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_updateSignalError() instead")
    void storage_anywhereCaches_updateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_updateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_disableSignalErrorFull() instead")
    void storage_anywhereCaches_disableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_disableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_getSignalErrorFull() instead")
    void storage_anywhereCaches_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_insertSignalErrorFull() instead")
    void storage_anywhereCaches_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_listSignalErrorFull() instead")
    void storage_anywhereCaches_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_pauseSignalErrorFull() instead")
    void storage_anywhereCaches_pauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_pauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_resumeSignalErrorFull() instead")
    void storage_anywhereCaches_resumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_resumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storage_anywhereCaches_updateSignalErrorFull() instead")
    void storage_anywhereCaches_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storage_anywhereCaches_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
