# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_access_control import BucketAccessControl
from openapi_server.models.bucket_autoclass import BucketAutoclass
from openapi_server.models.bucket_billing import BucketBilling
from openapi_server.models.bucket_cors_inner import BucketCorsInner
from openapi_server.models.bucket_custom_placement_config import BucketCustomPlacementConfig
from openapi_server.models.bucket_encryption import BucketEncryption
from openapi_server.models.bucket_hierarchical_namespace import BucketHierarchicalNamespace
from openapi_server.models.bucket_iam_configuration import BucketIamConfiguration
from openapi_server.models.bucket_lifecycle import BucketLifecycle
from openapi_server.models.bucket_logging import BucketLogging
from openapi_server.models.bucket_object_retention import BucketObjectRetention
from openapi_server.models.bucket_owner import BucketOwner
from openapi_server.models.bucket_retention_policy import BucketRetentionPolicy
from openapi_server.models.bucket_soft_delete_policy import BucketSoftDeletePolicy
from openapi_server.models.bucket_versioning import BucketVersioning
from openapi_server.models.bucket_website import BucketWebsite
from openapi_server.models.object_access_control import ObjectAccessControl
from openapi_server import util


class Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: List[BucketAccessControl]=None, autoclass: BucketAutoclass=None, billing: BucketBilling=None, cors: List[BucketCorsInner]=None, custom_placement_config: BucketCustomPlacementConfig=None, default_event_based_hold: bool=None, default_object_acl: List[ObjectAccessControl]=None, encryption: BucketEncryption=None, etag: str=None, hierarchical_namespace: BucketHierarchicalNamespace=None, iam_configuration: BucketIamConfiguration=None, id: str=None, kind: str='storage#bucket', labels: Dict[str, str]=None, lifecycle: BucketLifecycle=None, location: str=None, location_type: str=None, logging: BucketLogging=None, metageneration: str=None, name: str=None, object_retention: BucketObjectRetention=None, owner: BucketOwner=None, project_number: str=None, retention_policy: BucketRetentionPolicy=None, rpo: str=None, satisfies_pzs: bool=None, self_link: str=None, soft_delete_policy: BucketSoftDeletePolicy=None, storage_class: str=None, time_created: datetime=None, updated: datetime=None, versioning: BucketVersioning=None, website: BucketWebsite=None):
        """Bucket - a model defined in OpenAPI

        :param acl: The acl of this Bucket.
        :param autoclass: The autoclass of this Bucket.
        :param billing: The billing of this Bucket.
        :param cors: The cors of this Bucket.
        :param custom_placement_config: The custom_placement_config of this Bucket.
        :param default_event_based_hold: The default_event_based_hold of this Bucket.
        :param default_object_acl: The default_object_acl of this Bucket.
        :param encryption: The encryption of this Bucket.
        :param etag: The etag of this Bucket.
        :param hierarchical_namespace: The hierarchical_namespace of this Bucket.
        :param iam_configuration: The iam_configuration of this Bucket.
        :param id: The id of this Bucket.
        :param kind: The kind of this Bucket.
        :param labels: The labels of this Bucket.
        :param lifecycle: The lifecycle of this Bucket.
        :param location: The location of this Bucket.
        :param location_type: The location_type of this Bucket.
        :param logging: The logging of this Bucket.
        :param metageneration: The metageneration of this Bucket.
        :param name: The name of this Bucket.
        :param object_retention: The object_retention of this Bucket.
        :param owner: The owner of this Bucket.
        :param project_number: The project_number of this Bucket.
        :param retention_policy: The retention_policy of this Bucket.
        :param rpo: The rpo of this Bucket.
        :param satisfies_pzs: The satisfies_pzs of this Bucket.
        :param self_link: The self_link of this Bucket.
        :param soft_delete_policy: The soft_delete_policy of this Bucket.
        :param storage_class: The storage_class of this Bucket.
        :param time_created: The time_created of this Bucket.
        :param updated: The updated of this Bucket.
        :param versioning: The versioning of this Bucket.
        :param website: The website of this Bucket.
        """
        self.openapi_types = {
            'acl': List[BucketAccessControl],
            'autoclass': BucketAutoclass,
            'billing': BucketBilling,
            'cors': List[BucketCorsInner],
            'custom_placement_config': BucketCustomPlacementConfig,
            'default_event_based_hold': bool,
            'default_object_acl': List[ObjectAccessControl],
            'encryption': BucketEncryption,
            'etag': str,
            'hierarchical_namespace': BucketHierarchicalNamespace,
            'iam_configuration': BucketIamConfiguration,
            'id': str,
            'kind': str,
            'labels': Dict[str, str],
            'lifecycle': BucketLifecycle,
            'location': str,
            'location_type': str,
            'logging': BucketLogging,
            'metageneration': str,
            'name': str,
            'object_retention': BucketObjectRetention,
            'owner': BucketOwner,
            'project_number': str,
            'retention_policy': BucketRetentionPolicy,
            'rpo': str,
            'satisfies_pzs': bool,
            'self_link': str,
            'soft_delete_policy': BucketSoftDeletePolicy,
            'storage_class': str,
            'time_created': datetime,
            'updated': datetime,
            'versioning': BucketVersioning,
            'website': BucketWebsite
        }

        self.attribute_map = {
            'acl': 'acl',
            'autoclass': 'autoclass',
            'billing': 'billing',
            'cors': 'cors',
            'custom_placement_config': 'customPlacementConfig',
            'default_event_based_hold': 'defaultEventBasedHold',
            'default_object_acl': 'defaultObjectAcl',
            'encryption': 'encryption',
            'etag': 'etag',
            'hierarchical_namespace': 'hierarchicalNamespace',
            'iam_configuration': 'iamConfiguration',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'lifecycle': 'lifecycle',
            'location': 'location',
            'location_type': 'locationType',
            'logging': 'logging',
            'metageneration': 'metageneration',
            'name': 'name',
            'object_retention': 'objectRetention',
            'owner': 'owner',
            'project_number': 'projectNumber',
            'retention_policy': 'retentionPolicy',
            'rpo': 'rpo',
            'satisfies_pzs': 'satisfiesPZS',
            'self_link': 'selfLink',
            'soft_delete_policy': 'softDeletePolicy',
            'storage_class': 'storageClass',
            'time_created': 'timeCreated',
            'updated': 'updated',
            'versioning': 'versioning',
            'website': 'website'
        }

        self._acl = acl
        self._autoclass = autoclass
        self._billing = billing
        self._cors = cors
        self._custom_placement_config = custom_placement_config
        self._default_event_based_hold = default_event_based_hold
        self._default_object_acl = default_object_acl
        self._encryption = encryption
        self._etag = etag
        self._hierarchical_namespace = hierarchical_namespace
        self._iam_configuration = iam_configuration
        self._id = id
        self._kind = kind
        self._labels = labels
        self._lifecycle = lifecycle
        self._location = location
        self._location_type = location_type
        self._logging = logging
        self._metageneration = metageneration
        self._name = name
        self._object_retention = object_retention
        self._owner = owner
        self._project_number = project_number
        self._retention_policy = retention_policy
        self._rpo = rpo
        self._satisfies_pzs = satisfies_pzs
        self._self_link = self_link
        self._soft_delete_policy = soft_delete_policy
        self._storage_class = storage_class
        self._time_created = time_created
        self._updated = updated
        self._versioning = versioning
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket of this Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Bucket.

        Access controls on the bucket.

        :return: The acl of this Bucket.
        :rtype: List[BucketAccessControl]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Bucket.

        Access controls on the bucket.

        :param acl: The acl of this Bucket.
        :type acl: List[BucketAccessControl]
        """

        self._acl = acl

    @property
    def autoclass(self):
        """Gets the autoclass of this Bucket.


        :return: The autoclass of this Bucket.
        :rtype: BucketAutoclass
        """
        return self._autoclass

    @autoclass.setter
    def autoclass(self, autoclass):
        """Sets the autoclass of this Bucket.


        :param autoclass: The autoclass of this Bucket.
        :type autoclass: BucketAutoclass
        """

        self._autoclass = autoclass

    @property
    def billing(self):
        """Gets the billing of this Bucket.


        :return: The billing of this Bucket.
        :rtype: BucketBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this Bucket.


        :param billing: The billing of this Bucket.
        :type billing: BucketBilling
        """

        self._billing = billing

    @property
    def cors(self):
        """Gets the cors of this Bucket.

        The bucket's Cross-Origin Resource Sharing (CORS) configuration.

        :return: The cors of this Bucket.
        :rtype: List[BucketCorsInner]
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this Bucket.

        The bucket's Cross-Origin Resource Sharing (CORS) configuration.

        :param cors: The cors of this Bucket.
        :type cors: List[BucketCorsInner]
        """

        self._cors = cors

    @property
    def custom_placement_config(self):
        """Gets the custom_placement_config of this Bucket.


        :return: The custom_placement_config of this Bucket.
        :rtype: BucketCustomPlacementConfig
        """
        return self._custom_placement_config

    @custom_placement_config.setter
    def custom_placement_config(self, custom_placement_config):
        """Sets the custom_placement_config of this Bucket.


        :param custom_placement_config: The custom_placement_config of this Bucket.
        :type custom_placement_config: BucketCustomPlacementConfig
        """

        self._custom_placement_config = custom_placement_config

    @property
    def default_event_based_hold(self):
        """Gets the default_event_based_hold of this Bucket.

        The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.

        :return: The default_event_based_hold of this Bucket.
        :rtype: bool
        """
        return self._default_event_based_hold

    @default_event_based_hold.setter
    def default_event_based_hold(self, default_event_based_hold):
        """Sets the default_event_based_hold of this Bucket.

        The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.

        :param default_event_based_hold: The default_event_based_hold of this Bucket.
        :type default_event_based_hold: bool
        """

        self._default_event_based_hold = default_event_based_hold

    @property
    def default_object_acl(self):
        """Gets the default_object_acl of this Bucket.

        Default access controls to apply to new objects when no ACL is provided.

        :return: The default_object_acl of this Bucket.
        :rtype: List[ObjectAccessControl]
        """
        return self._default_object_acl

    @default_object_acl.setter
    def default_object_acl(self, default_object_acl):
        """Sets the default_object_acl of this Bucket.

        Default access controls to apply to new objects when no ACL is provided.

        :param default_object_acl: The default_object_acl of this Bucket.
        :type default_object_acl: List[ObjectAccessControl]
        """

        self._default_object_acl = default_object_acl

    @property
    def encryption(self):
        """Gets the encryption of this Bucket.


        :return: The encryption of this Bucket.
        :rtype: BucketEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this Bucket.


        :param encryption: The encryption of this Bucket.
        :type encryption: BucketEncryption
        """

        self._encryption = encryption

    @property
    def etag(self):
        """Gets the etag of this Bucket.

        HTTP 1.1 Entity tag for the bucket.

        :return: The etag of this Bucket.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Bucket.

        HTTP 1.1 Entity tag for the bucket.

        :param etag: The etag of this Bucket.
        :type etag: str
        """

        self._etag = etag

    @property
    def hierarchical_namespace(self):
        """Gets the hierarchical_namespace of this Bucket.


        :return: The hierarchical_namespace of this Bucket.
        :rtype: BucketHierarchicalNamespace
        """
        return self._hierarchical_namespace

    @hierarchical_namespace.setter
    def hierarchical_namespace(self, hierarchical_namespace):
        """Sets the hierarchical_namespace of this Bucket.


        :param hierarchical_namespace: The hierarchical_namespace of this Bucket.
        :type hierarchical_namespace: BucketHierarchicalNamespace
        """

        self._hierarchical_namespace = hierarchical_namespace

    @property
    def iam_configuration(self):
        """Gets the iam_configuration of this Bucket.


        :return: The iam_configuration of this Bucket.
        :rtype: BucketIamConfiguration
        """
        return self._iam_configuration

    @iam_configuration.setter
    def iam_configuration(self, iam_configuration):
        """Sets the iam_configuration of this Bucket.


        :param iam_configuration: The iam_configuration of this Bucket.
        :type iam_configuration: BucketIamConfiguration
        """

        self._iam_configuration = iam_configuration

    @property
    def id(self):
        """Gets the id of this Bucket.

        The ID of the bucket. For buckets, the id and name properties are the same.

        :return: The id of this Bucket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bucket.

        The ID of the bucket. For buckets, the id and name properties are the same.

        :param id: The id of this Bucket.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Bucket.

        The kind of item this is. For buckets, this is always storage#bucket.

        :return: The kind of this Bucket.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Bucket.

        The kind of item this is. For buckets, this is always storage#bucket.

        :param kind: The kind of this Bucket.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Bucket.

        User-provided labels, in key/value pairs.

        :return: The labels of this Bucket.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Bucket.

        User-provided labels, in key/value pairs.

        :param labels: The labels of this Bucket.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def lifecycle(self):
        """Gets the lifecycle of this Bucket.


        :return: The lifecycle of this Bucket.
        :rtype: BucketLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this Bucket.


        :param lifecycle: The lifecycle of this Bucket.
        :type lifecycle: BucketLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def location(self):
        """Gets the location of this Bucket.

        The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.

        :return: The location of this Bucket.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Bucket.

        The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.

        :param location: The location of this Bucket.
        :type location: str
        """

        self._location = location

    @property
    def location_type(self):
        """Gets the location_type of this Bucket.

        The type of the bucket location.

        :return: The location_type of this Bucket.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Bucket.

        The type of the bucket location.

        :param location_type: The location_type of this Bucket.
        :type location_type: str
        """

        self._location_type = location_type

    @property
    def logging(self):
        """Gets the logging of this Bucket.


        :return: The logging of this Bucket.
        :rtype: BucketLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this Bucket.


        :param logging: The logging of this Bucket.
        :type logging: BucketLogging
        """

        self._logging = logging

    @property
    def metageneration(self):
        """Gets the metageneration of this Bucket.

        The metadata generation of this bucket.

        :return: The metageneration of this Bucket.
        :rtype: str
        """
        return self._metageneration

    @metageneration.setter
    def metageneration(self, metageneration):
        """Sets the metageneration of this Bucket.

        The metadata generation of this bucket.

        :param metageneration: The metageneration of this Bucket.
        :type metageneration: str
        """

        self._metageneration = metageneration

    @property
    def name(self):
        """Gets the name of this Bucket.

        The name of the bucket.

        :return: The name of this Bucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bucket.

        The name of the bucket.

        :param name: The name of this Bucket.
        :type name: str
        """

        self._name = name

    @property
    def object_retention(self):
        """Gets the object_retention of this Bucket.


        :return: The object_retention of this Bucket.
        :rtype: BucketObjectRetention
        """
        return self._object_retention

    @object_retention.setter
    def object_retention(self, object_retention):
        """Sets the object_retention of this Bucket.


        :param object_retention: The object_retention of this Bucket.
        :type object_retention: BucketObjectRetention
        """

        self._object_retention = object_retention

    @property
    def owner(self):
        """Gets the owner of this Bucket.


        :return: The owner of this Bucket.
        :rtype: BucketOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Bucket.


        :param owner: The owner of this Bucket.
        :type owner: BucketOwner
        """

        self._owner = owner

    @property
    def project_number(self):
        """Gets the project_number of this Bucket.

        The project number of the project the bucket belongs to.

        :return: The project_number of this Bucket.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this Bucket.

        The project number of the project the bucket belongs to.

        :param project_number: The project_number of this Bucket.
        :type project_number: str
        """

        self._project_number = project_number

    @property
    def retention_policy(self):
        """Gets the retention_policy of this Bucket.


        :return: The retention_policy of this Bucket.
        :rtype: BucketRetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this Bucket.


        :param retention_policy: The retention_policy of this Bucket.
        :type retention_policy: BucketRetentionPolicy
        """

        self._retention_policy = retention_policy

    @property
    def rpo(self):
        """Gets the rpo of this Bucket.

        The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.

        :return: The rpo of this Bucket.
        :rtype: str
        """
        return self._rpo

    @rpo.setter
    def rpo(self, rpo):
        """Sets the rpo of this Bucket.

        The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.

        :param rpo: The rpo of this Bucket.
        :type rpo: str
        """

        self._rpo = rpo

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Bucket.

        Reserved for future use.

        :return: The satisfies_pzs of this Bucket.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Bucket.

        Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Bucket.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def self_link(self):
        """Gets the self_link of this Bucket.

        The URI of this bucket.

        :return: The self_link of this Bucket.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Bucket.

        The URI of this bucket.

        :param self_link: The self_link of this Bucket.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def soft_delete_policy(self):
        """Gets the soft_delete_policy of this Bucket.


        :return: The soft_delete_policy of this Bucket.
        :rtype: BucketSoftDeletePolicy
        """
        return self._soft_delete_policy

    @soft_delete_policy.setter
    def soft_delete_policy(self, soft_delete_policy):
        """Sets the soft_delete_policy of this Bucket.


        :param soft_delete_policy: The soft_delete_policy of this Bucket.
        :type soft_delete_policy: BucketSoftDeletePolicy
        """

        self._soft_delete_policy = soft_delete_policy

    @property
    def storage_class(self):
        """Gets the storage_class of this Bucket.

        The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.

        :return: The storage_class of this Bucket.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Bucket.

        The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.

        :param storage_class: The storage_class of this Bucket.
        :type storage_class: str
        """

        self._storage_class = storage_class

    @property
    def time_created(self):
        """Gets the time_created of this Bucket.

        The creation time of the bucket in RFC 3339 format.

        :return: The time_created of this Bucket.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Bucket.

        The creation time of the bucket in RFC 3339 format.

        :param time_created: The time_created of this Bucket.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def updated(self):
        """Gets the updated of this Bucket.

        The modification time of the bucket in RFC 3339 format.

        :return: The updated of this Bucket.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Bucket.

        The modification time of the bucket in RFC 3339 format.

        :param updated: The updated of this Bucket.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def versioning(self):
        """Gets the versioning of this Bucket.


        :return: The versioning of this Bucket.
        :rtype: BucketVersioning
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this Bucket.


        :param versioning: The versioning of this Bucket.
        :type versioning: BucketVersioning
        """

        self._versioning = versioning

    @property
    def website(self):
        """Gets the website of this Bucket.


        :return: The website of this Bucket.
        :rtype: BucketWebsite
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Bucket.


        :param website: The website of this Bucket.
        :type website: BucketWebsite
        """

        self._website = website
