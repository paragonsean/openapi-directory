# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketRetentionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_time: datetime=None, is_locked: bool=None, retention_period: str=None):
        """BucketRetentionPolicy - a model defined in OpenAPI

        :param effective_time: The effective_time of this BucketRetentionPolicy.
        :param is_locked: The is_locked of this BucketRetentionPolicy.
        :param retention_period: The retention_period of this BucketRetentionPolicy.
        """
        self.openapi_types = {
            'effective_time': datetime,
            'is_locked': bool,
            'retention_period': str
        }

        self.attribute_map = {
            'effective_time': 'effectiveTime',
            'is_locked': 'isLocked',
            'retention_period': 'retentionPeriod'
        }

        self._effective_time = effective_time
        self._is_locked = is_locked
        self._retention_period = retention_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketRetentionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_retentionPolicy of this BucketRetentionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_time(self):
        """Gets the effective_time of this BucketRetentionPolicy.

        Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.

        :return: The effective_time of this BucketRetentionPolicy.
        :rtype: datetime
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this BucketRetentionPolicy.

        Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.

        :param effective_time: The effective_time of this BucketRetentionPolicy.
        :type effective_time: datetime
        """

        self._effective_time = effective_time

    @property
    def is_locked(self):
        """Gets the is_locked of this BucketRetentionPolicy.

        Once locked, an object retention policy cannot be modified.

        :return: The is_locked of this BucketRetentionPolicy.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this BucketRetentionPolicy.

        Once locked, an object retention policy cannot be modified.

        :param is_locked: The is_locked of this BucketRetentionPolicy.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def retention_period(self):
        """Gets the retention_period of this BucketRetentionPolicy.

        The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.

        :return: The retention_period of this BucketRetentionPolicy.
        :rtype: str
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this BucketRetentionPolicy.

        The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.

        :param retention_period: The retention_period of this BucketRetentionPolicy.
        :type retention_period: str
        """

        self._retention_period = retention_period
