# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketLogging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_bucket: str=None, log_object_prefix: str=None):
        """BucketLogging - a model defined in OpenAPI

        :param log_bucket: The log_bucket of this BucketLogging.
        :param log_object_prefix: The log_object_prefix of this BucketLogging.
        """
        self.openapi_types = {
            'log_bucket': str,
            'log_object_prefix': str
        }

        self.attribute_map = {
            'log_bucket': 'logBucket',
            'log_object_prefix': 'logObjectPrefix'
        }

        self._log_bucket = log_bucket
        self._log_object_prefix = log_object_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketLogging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_logging of this BucketLogging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_bucket(self):
        """Gets the log_bucket of this BucketLogging.

        The destination bucket where the current bucket's logs should be placed.

        :return: The log_bucket of this BucketLogging.
        :rtype: str
        """
        return self._log_bucket

    @log_bucket.setter
    def log_bucket(self, log_bucket):
        """Sets the log_bucket of this BucketLogging.

        The destination bucket where the current bucket's logs should be placed.

        :param log_bucket: The log_bucket of this BucketLogging.
        :type log_bucket: str
        """

        self._log_bucket = log_bucket

    @property
    def log_object_prefix(self):
        """Gets the log_object_prefix of this BucketLogging.

        A prefix for log object names.

        :return: The log_object_prefix of this BucketLogging.
        :rtype: str
        """
        return self._log_object_prefix

    @log_object_prefix.setter
    def log_object_prefix(self, log_object_prefix):
        """Sets the log_object_prefix of this BucketLogging.

        A prefix for log object names.

        :param log_object_prefix: The log_object_prefix of this BucketLogging.
        :type log_object_prefix: str
        """

        self._log_object_prefix = log_object_prefix
