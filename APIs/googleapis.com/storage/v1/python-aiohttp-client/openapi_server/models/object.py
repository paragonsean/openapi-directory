# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_access_control import ObjectAccessControl
from openapi_server.models.object_customer_encryption import ObjectCustomerEncryption
from openapi_server.models.object_owner import ObjectOwner
from openapi_server.models.object_retention import ObjectRetention
from openapi_server import util


class Object(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: List[ObjectAccessControl]=None, bucket: str=None, cache_control: str=None, component_count: int=None, content_disposition: str=None, content_encoding: str=None, content_language: str=None, content_type: str=None, crc32c: str=None, custom_time: datetime=None, customer_encryption: ObjectCustomerEncryption=None, etag: str=None, event_based_hold: bool=None, generation: str=None, hard_delete_time: datetime=None, id: str=None, kind: str='storage#object', kms_key_name: str=None, md5_hash: str=None, media_link: str=None, metadata: Dict[str, str]=None, metageneration: str=None, name: str=None, owner: ObjectOwner=None, retention: ObjectRetention=None, retention_expiration_time: datetime=None, self_link: str=None, size: str=None, soft_delete_time: datetime=None, storage_class: str=None, temporary_hold: bool=None, time_created: datetime=None, time_deleted: datetime=None, time_storage_class_updated: datetime=None, updated: datetime=None):
        """Object - a model defined in OpenAPI

        :param acl: The acl of this Object.
        :param bucket: The bucket of this Object.
        :param cache_control: The cache_control of this Object.
        :param component_count: The component_count of this Object.
        :param content_disposition: The content_disposition of this Object.
        :param content_encoding: The content_encoding of this Object.
        :param content_language: The content_language of this Object.
        :param content_type: The content_type of this Object.
        :param crc32c: The crc32c of this Object.
        :param custom_time: The custom_time of this Object.
        :param customer_encryption: The customer_encryption of this Object.
        :param etag: The etag of this Object.
        :param event_based_hold: The event_based_hold of this Object.
        :param generation: The generation of this Object.
        :param hard_delete_time: The hard_delete_time of this Object.
        :param id: The id of this Object.
        :param kind: The kind of this Object.
        :param kms_key_name: The kms_key_name of this Object.
        :param md5_hash: The md5_hash of this Object.
        :param media_link: The media_link of this Object.
        :param metadata: The metadata of this Object.
        :param metageneration: The metageneration of this Object.
        :param name: The name of this Object.
        :param owner: The owner of this Object.
        :param retention: The retention of this Object.
        :param retention_expiration_time: The retention_expiration_time of this Object.
        :param self_link: The self_link of this Object.
        :param size: The size of this Object.
        :param soft_delete_time: The soft_delete_time of this Object.
        :param storage_class: The storage_class of this Object.
        :param temporary_hold: The temporary_hold of this Object.
        :param time_created: The time_created of this Object.
        :param time_deleted: The time_deleted of this Object.
        :param time_storage_class_updated: The time_storage_class_updated of this Object.
        :param updated: The updated of this Object.
        """
        self.openapi_types = {
            'acl': List[ObjectAccessControl],
            'bucket': str,
            'cache_control': str,
            'component_count': int,
            'content_disposition': str,
            'content_encoding': str,
            'content_language': str,
            'content_type': str,
            'crc32c': str,
            'custom_time': datetime,
            'customer_encryption': ObjectCustomerEncryption,
            'etag': str,
            'event_based_hold': bool,
            'generation': str,
            'hard_delete_time': datetime,
            'id': str,
            'kind': str,
            'kms_key_name': str,
            'md5_hash': str,
            'media_link': str,
            'metadata': Dict[str, str],
            'metageneration': str,
            'name': str,
            'owner': ObjectOwner,
            'retention': ObjectRetention,
            'retention_expiration_time': datetime,
            'self_link': str,
            'size': str,
            'soft_delete_time': datetime,
            'storage_class': str,
            'temporary_hold': bool,
            'time_created': datetime,
            'time_deleted': datetime,
            'time_storage_class_updated': datetime,
            'updated': datetime
        }

        self.attribute_map = {
            'acl': 'acl',
            'bucket': 'bucket',
            'cache_control': 'cacheControl',
            'component_count': 'componentCount',
            'content_disposition': 'contentDisposition',
            'content_encoding': 'contentEncoding',
            'content_language': 'contentLanguage',
            'content_type': 'contentType',
            'crc32c': 'crc32c',
            'custom_time': 'customTime',
            'customer_encryption': 'customerEncryption',
            'etag': 'etag',
            'event_based_hold': 'eventBasedHold',
            'generation': 'generation',
            'hard_delete_time': 'hardDeleteTime',
            'id': 'id',
            'kind': 'kind',
            'kms_key_name': 'kmsKeyName',
            'md5_hash': 'md5Hash',
            'media_link': 'mediaLink',
            'metadata': 'metadata',
            'metageneration': 'metageneration',
            'name': 'name',
            'owner': 'owner',
            'retention': 'retention',
            'retention_expiration_time': 'retentionExpirationTime',
            'self_link': 'selfLink',
            'size': 'size',
            'soft_delete_time': 'softDeleteTime',
            'storage_class': 'storageClass',
            'temporary_hold': 'temporaryHold',
            'time_created': 'timeCreated',
            'time_deleted': 'timeDeleted',
            'time_storage_class_updated': 'timeStorageClassUpdated',
            'updated': 'updated'
        }

        self._acl = acl
        self._bucket = bucket
        self._cache_control = cache_control
        self._component_count = component_count
        self._content_disposition = content_disposition
        self._content_encoding = content_encoding
        self._content_language = content_language
        self._content_type = content_type
        self._crc32c = crc32c
        self._custom_time = custom_time
        self._customer_encryption = customer_encryption
        self._etag = etag
        self._event_based_hold = event_based_hold
        self._generation = generation
        self._hard_delete_time = hard_delete_time
        self._id = id
        self._kind = kind
        self._kms_key_name = kms_key_name
        self._md5_hash = md5_hash
        self._media_link = media_link
        self._metadata = metadata
        self._metageneration = metageneration
        self._name = name
        self._owner = owner
        self._retention = retention
        self._retention_expiration_time = retention_expiration_time
        self._self_link = self_link
        self._size = size
        self._soft_delete_time = soft_delete_time
        self._storage_class = storage_class
        self._temporary_hold = temporary_hold
        self._time_created = time_created
        self._time_deleted = time_deleted
        self._time_storage_class_updated = time_storage_class_updated
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Object':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Object of this Object.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Object.

        Access controls on the object.

        :return: The acl of this Object.
        :rtype: List[ObjectAccessControl]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Object.

        Access controls on the object.

        :param acl: The acl of this Object.
        :type acl: List[ObjectAccessControl]
        """

        self._acl = acl

    @property
    def bucket(self):
        """Gets the bucket of this Object.

        The name of the bucket containing this object.

        :return: The bucket of this Object.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Object.

        The name of the bucket containing this object.

        :param bucket: The bucket of this Object.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def cache_control(self):
        """Gets the cache_control of this Object.

        Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.

        :return: The cache_control of this Object.
        :rtype: str
        """
        return self._cache_control

    @cache_control.setter
    def cache_control(self, cache_control):
        """Sets the cache_control of this Object.

        Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.

        :param cache_control: The cache_control of this Object.
        :type cache_control: str
        """

        self._cache_control = cache_control

    @property
    def component_count(self):
        """Gets the component_count of this Object.

        Number of underlying components that make up this object. Components are accumulated by compose operations.

        :return: The component_count of this Object.
        :rtype: int
        """
        return self._component_count

    @component_count.setter
    def component_count(self, component_count):
        """Sets the component_count of this Object.

        Number of underlying components that make up this object. Components are accumulated by compose operations.

        :param component_count: The component_count of this Object.
        :type component_count: int
        """

        self._component_count = component_count

    @property
    def content_disposition(self):
        """Gets the content_disposition of this Object.

        Content-Disposition of the object data.

        :return: The content_disposition of this Object.
        :rtype: str
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this Object.

        Content-Disposition of the object data.

        :param content_disposition: The content_disposition of this Object.
        :type content_disposition: str
        """

        self._content_disposition = content_disposition

    @property
    def content_encoding(self):
        """Gets the content_encoding of this Object.

        Content-Encoding of the object data.

        :return: The content_encoding of this Object.
        :rtype: str
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this Object.

        Content-Encoding of the object data.

        :param content_encoding: The content_encoding of this Object.
        :type content_encoding: str
        """

        self._content_encoding = content_encoding

    @property
    def content_language(self):
        """Gets the content_language of this Object.

        Content-Language of the object data.

        :return: The content_language of this Object.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Object.

        Content-Language of the object data.

        :param content_language: The content_language of this Object.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def content_type(self):
        """Gets the content_type of this Object.

        Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.

        :return: The content_type of this Object.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Object.

        Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.

        :param content_type: The content_type of this Object.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def crc32c(self):
        """Gets the crc32c of this Object.

        CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.

        :return: The crc32c of this Object.
        :rtype: str
        """
        return self._crc32c

    @crc32c.setter
    def crc32c(self, crc32c):
        """Sets the crc32c of this Object.

        CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.

        :param crc32c: The crc32c of this Object.
        :type crc32c: str
        """

        self._crc32c = crc32c

    @property
    def custom_time(self):
        """Gets the custom_time of this Object.

        A timestamp in RFC 3339 format specified by the user for an object.

        :return: The custom_time of this Object.
        :rtype: datetime
        """
        return self._custom_time

    @custom_time.setter
    def custom_time(self, custom_time):
        """Sets the custom_time of this Object.

        A timestamp in RFC 3339 format specified by the user for an object.

        :param custom_time: The custom_time of this Object.
        :type custom_time: datetime
        """

        self._custom_time = custom_time

    @property
    def customer_encryption(self):
        """Gets the customer_encryption of this Object.


        :return: The customer_encryption of this Object.
        :rtype: ObjectCustomerEncryption
        """
        return self._customer_encryption

    @customer_encryption.setter
    def customer_encryption(self, customer_encryption):
        """Sets the customer_encryption of this Object.


        :param customer_encryption: The customer_encryption of this Object.
        :type customer_encryption: ObjectCustomerEncryption
        """

        self._customer_encryption = customer_encryption

    @property
    def etag(self):
        """Gets the etag of this Object.

        HTTP 1.1 Entity tag for the object.

        :return: The etag of this Object.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Object.

        HTTP 1.1 Entity tag for the object.

        :param etag: The etag of this Object.
        :type etag: str
        """

        self._etag = etag

    @property
    def event_based_hold(self):
        """Gets the event_based_hold of this Object.

        Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.

        :return: The event_based_hold of this Object.
        :rtype: bool
        """
        return self._event_based_hold

    @event_based_hold.setter
    def event_based_hold(self, event_based_hold):
        """Sets the event_based_hold of this Object.

        Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.

        :param event_based_hold: The event_based_hold of this Object.
        :type event_based_hold: bool
        """

        self._event_based_hold = event_based_hold

    @property
    def generation(self):
        """Gets the generation of this Object.

        The content generation of this object. Used for object versioning.

        :return: The generation of this Object.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Object.

        The content generation of this object. Used for object versioning.

        :param generation: The generation of this Object.
        :type generation: str
        """

        self._generation = generation

    @property
    def hard_delete_time(self):
        """Gets the hard_delete_time of this Object.

        This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.

        :return: The hard_delete_time of this Object.
        :rtype: datetime
        """
        return self._hard_delete_time

    @hard_delete_time.setter
    def hard_delete_time(self, hard_delete_time):
        """Sets the hard_delete_time of this Object.

        This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.

        :param hard_delete_time: The hard_delete_time of this Object.
        :type hard_delete_time: datetime
        """

        self._hard_delete_time = hard_delete_time

    @property
    def id(self):
        """Gets the id of this Object.

        The ID of the object, including the bucket name, object name, and generation number.

        :return: The id of this Object.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Object.

        The ID of the object, including the bucket name, object name, and generation number.

        :param id: The id of this Object.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Object.

        The kind of item this is. For objects, this is always storage#object.

        :return: The kind of this Object.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Object.

        The kind of item this is. For objects, this is always storage#object.

        :param kind: The kind of this Object.
        :type kind: str
        """

        self._kind = kind

    @property
    def kms_key_name(self):
        """Gets the kms_key_name of this Object.

        Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.

        :return: The kms_key_name of this Object.
        :rtype: str
        """
        return self._kms_key_name

    @kms_key_name.setter
    def kms_key_name(self, kms_key_name):
        """Sets the kms_key_name of this Object.

        Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.

        :param kms_key_name: The kms_key_name of this Object.
        :type kms_key_name: str
        """

        self._kms_key_name = kms_key_name

    @property
    def md5_hash(self):
        """Gets the md5_hash of this Object.

        MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.

        :return: The md5_hash of this Object.
        :rtype: str
        """
        return self._md5_hash

    @md5_hash.setter
    def md5_hash(self, md5_hash):
        """Sets the md5_hash of this Object.

        MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.

        :param md5_hash: The md5_hash of this Object.
        :type md5_hash: str
        """

        self._md5_hash = md5_hash

    @property
    def media_link(self):
        """Gets the media_link of this Object.

        Media download link.

        :return: The media_link of this Object.
        :rtype: str
        """
        return self._media_link

    @media_link.setter
    def media_link(self, media_link):
        """Sets the media_link of this Object.

        Media download link.

        :param media_link: The media_link of this Object.
        :type media_link: str
        """

        self._media_link = media_link

    @property
    def metadata(self):
        """Gets the metadata of this Object.

        User-provided metadata, in key/value pairs.

        :return: The metadata of this Object.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Object.

        User-provided metadata, in key/value pairs.

        :param metadata: The metadata of this Object.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def metageneration(self):
        """Gets the metageneration of this Object.

        The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.

        :return: The metageneration of this Object.
        :rtype: str
        """
        return self._metageneration

    @metageneration.setter
    def metageneration(self, metageneration):
        """Sets the metageneration of this Object.

        The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.

        :param metageneration: The metageneration of this Object.
        :type metageneration: str
        """

        self._metageneration = metageneration

    @property
    def name(self):
        """Gets the name of this Object.

        The name of the object. Required if not specified by URL parameter.

        :return: The name of this Object.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Object.

        The name of the object. Required if not specified by URL parameter.

        :param name: The name of this Object.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Object.


        :return: The owner of this Object.
        :rtype: ObjectOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Object.


        :param owner: The owner of this Object.
        :type owner: ObjectOwner
        """

        self._owner = owner

    @property
    def retention(self):
        """Gets the retention of this Object.


        :return: The retention of this Object.
        :rtype: ObjectRetention
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this Object.


        :param retention: The retention of this Object.
        :type retention: ObjectRetention
        """

        self._retention = retention

    @property
    def retention_expiration_time(self):
        """Gets the retention_expiration_time of this Object.

        A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).

        :return: The retention_expiration_time of this Object.
        :rtype: datetime
        """
        return self._retention_expiration_time

    @retention_expiration_time.setter
    def retention_expiration_time(self, retention_expiration_time):
        """Sets the retention_expiration_time of this Object.

        A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).

        :param retention_expiration_time: The retention_expiration_time of this Object.
        :type retention_expiration_time: datetime
        """

        self._retention_expiration_time = retention_expiration_time

    @property
    def self_link(self):
        """Gets the self_link of this Object.

        The link to this object.

        :return: The self_link of this Object.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Object.

        The link to this object.

        :param self_link: The self_link of this Object.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def size(self):
        """Gets the size of this Object.

        Content-Length of the data in bytes.

        :return: The size of this Object.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Object.

        Content-Length of the data in bytes.

        :param size: The size of this Object.
        :type size: str
        """

        self._size = size

    @property
    def soft_delete_time(self):
        """Gets the soft_delete_time of this Object.

        The time at which the object became soft-deleted in RFC 3339 format.

        :return: The soft_delete_time of this Object.
        :rtype: datetime
        """
        return self._soft_delete_time

    @soft_delete_time.setter
    def soft_delete_time(self, soft_delete_time):
        """Sets the soft_delete_time of this Object.

        The time at which the object became soft-deleted in RFC 3339 format.

        :param soft_delete_time: The soft_delete_time of this Object.
        :type soft_delete_time: datetime
        """

        self._soft_delete_time = soft_delete_time

    @property
    def storage_class(self):
        """Gets the storage_class of this Object.

        Storage class of the object.

        :return: The storage_class of this Object.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Object.

        Storage class of the object.

        :param storage_class: The storage_class of this Object.
        :type storage_class: str
        """

        self._storage_class = storage_class

    @property
    def temporary_hold(self):
        """Gets the temporary_hold of this Object.

        Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.

        :return: The temporary_hold of this Object.
        :rtype: bool
        """
        return self._temporary_hold

    @temporary_hold.setter
    def temporary_hold(self, temporary_hold):
        """Sets the temporary_hold of this Object.

        Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.

        :param temporary_hold: The temporary_hold of this Object.
        :type temporary_hold: bool
        """

        self._temporary_hold = temporary_hold

    @property
    def time_created(self):
        """Gets the time_created of this Object.

        The creation time of the object in RFC 3339 format.

        :return: The time_created of this Object.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Object.

        The creation time of the object in RFC 3339 format.

        :param time_created: The time_created of this Object.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def time_deleted(self):
        """Gets the time_deleted of this Object.

        The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.

        :return: The time_deleted of this Object.
        :rtype: datetime
        """
        return self._time_deleted

    @time_deleted.setter
    def time_deleted(self, time_deleted):
        """Sets the time_deleted of this Object.

        The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.

        :param time_deleted: The time_deleted of this Object.
        :type time_deleted: datetime
        """

        self._time_deleted = time_deleted

    @property
    def time_storage_class_updated(self):
        """Gets the time_storage_class_updated of this Object.

        The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.

        :return: The time_storage_class_updated of this Object.
        :rtype: datetime
        """
        return self._time_storage_class_updated

    @time_storage_class_updated.setter
    def time_storage_class_updated(self, time_storage_class_updated):
        """Sets the time_storage_class_updated of this Object.

        The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.

        :param time_storage_class_updated: The time_storage_class_updated of this Object.
        :type time_storage_class_updated: datetime
        """

        self._time_storage_class_updated = time_storage_class_updated

    @property
    def updated(self):
        """Gets the updated of this Object.

        The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.

        :return: The updated of this Object.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Object.

        The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.

        :param updated: The updated of this Object.
        :type updated: datetime
        """

        self._updated = updated
