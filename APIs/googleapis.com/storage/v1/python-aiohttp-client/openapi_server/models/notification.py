# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_attributes: Dict[str, str]=None, etag: str=None, event_types: List[str]=None, id: str=None, kind: str='storage#notification', object_name_prefix: str=None, payload_format: str='JSON_API_V1', self_link: str=None, topic: str=None):
        """Notification - a model defined in OpenAPI

        :param custom_attributes: The custom_attributes of this Notification.
        :param etag: The etag of this Notification.
        :param event_types: The event_types of this Notification.
        :param id: The id of this Notification.
        :param kind: The kind of this Notification.
        :param object_name_prefix: The object_name_prefix of this Notification.
        :param payload_format: The payload_format of this Notification.
        :param self_link: The self_link of this Notification.
        :param topic: The topic of this Notification.
        """
        self.openapi_types = {
            'custom_attributes': Dict[str, str],
            'etag': str,
            'event_types': List[str],
            'id': str,
            'kind': str,
            'object_name_prefix': str,
            'payload_format': str,
            'self_link': str,
            'topic': str
        }

        self.attribute_map = {
            'custom_attributes': 'custom_attributes',
            'etag': 'etag',
            'event_types': 'event_types',
            'id': 'id',
            'kind': 'kind',
            'object_name_prefix': 'object_name_prefix',
            'payload_format': 'payload_format',
            'self_link': 'selfLink',
            'topic': 'topic'
        }

        self._custom_attributes = custom_attributes
        self._etag = etag
        self._event_types = event_types
        self._id = id
        self._kind = kind
        self._object_name_prefix = object_name_prefix
        self._payload_format = payload_format
        self._self_link = self_link
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Notification.

        An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.

        :return: The custom_attributes of this Notification.
        :rtype: Dict[str, str]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Notification.

        An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.

        :param custom_attributes: The custom_attributes of this Notification.
        :type custom_attributes: Dict[str, str]
        """

        self._custom_attributes = custom_attributes

    @property
    def etag(self):
        """Gets the etag of this Notification.

        HTTP 1.1 Entity tag for this subscription notification.

        :return: The etag of this Notification.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Notification.

        HTTP 1.1 Entity tag for this subscription notification.

        :param etag: The etag of this Notification.
        :type etag: str
        """

        self._etag = etag

    @property
    def event_types(self):
        """Gets the event_types of this Notification.

        If present, only send notifications about listed event types. If empty, sent notifications for all event types.

        :return: The event_types of this Notification.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this Notification.

        If present, only send notifications about listed event types. If empty, sent notifications for all event types.

        :param event_types: The event_types of this Notification.
        :type event_types: List[str]
        """

        self._event_types = event_types

    @property
    def id(self):
        """Gets the id of this Notification.

        The ID of the notification.

        :return: The id of this Notification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.

        The ID of the notification.

        :param id: The id of this Notification.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Notification.

        The kind of item this is. For notifications, this is always storage#notification.

        :return: The kind of this Notification.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Notification.

        The kind of item this is. For notifications, this is always storage#notification.

        :param kind: The kind of this Notification.
        :type kind: str
        """

        self._kind = kind

    @property
    def object_name_prefix(self):
        """Gets the object_name_prefix of this Notification.

        If present, only apply this notification configuration to object names that begin with this prefix.

        :return: The object_name_prefix of this Notification.
        :rtype: str
        """
        return self._object_name_prefix

    @object_name_prefix.setter
    def object_name_prefix(self, object_name_prefix):
        """Sets the object_name_prefix of this Notification.

        If present, only apply this notification configuration to object names that begin with this prefix.

        :param object_name_prefix: The object_name_prefix of this Notification.
        :type object_name_prefix: str
        """

        self._object_name_prefix = object_name_prefix

    @property
    def payload_format(self):
        """Gets the payload_format of this Notification.

        The desired content of the Payload.

        :return: The payload_format of this Notification.
        :rtype: str
        """
        return self._payload_format

    @payload_format.setter
    def payload_format(self, payload_format):
        """Sets the payload_format of this Notification.

        The desired content of the Payload.

        :param payload_format: The payload_format of this Notification.
        :type payload_format: str
        """

        self._payload_format = payload_format

    @property
    def self_link(self):
        """Gets the self_link of this Notification.

        The canonical URL of this notification.

        :return: The self_link of this Notification.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Notification.

        The canonical URL of this notification.

        :param self_link: The self_link of this Notification.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def topic(self):
        """Gets the topic of this Notification.

        The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'

        :return: The topic of this Notification.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Notification.

        The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'

        :param topic: The topic of this Notification.
        :type topic: str
        """

        self._topic = topic
