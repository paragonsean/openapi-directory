# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketIamConfigurationUniformBucketLevelAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, locked_time: datetime=None):
        """BucketIamConfigurationUniformBucketLevelAccess - a model defined in OpenAPI

        :param enabled: The enabled of this BucketIamConfigurationUniformBucketLevelAccess.
        :param locked_time: The locked_time of this BucketIamConfigurationUniformBucketLevelAccess.
        """
        self.openapi_types = {
            'enabled': bool,
            'locked_time': datetime
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'locked_time': 'lockedTime'
        }

        self._enabled = enabled
        self._locked_time = locked_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketIamConfigurationUniformBucketLevelAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_iamConfiguration_uniformBucketLevelAccess of this BucketIamConfigurationUniformBucketLevelAccess.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this BucketIamConfigurationUniformBucketLevelAccess.

        If set, access is controlled only by bucket-level or above IAM policies.

        :return: The enabled of this BucketIamConfigurationUniformBucketLevelAccess.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BucketIamConfigurationUniformBucketLevelAccess.

        If set, access is controlled only by bucket-level or above IAM policies.

        :param enabled: The enabled of this BucketIamConfigurationUniformBucketLevelAccess.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def locked_time(self):
        """Gets the locked_time of this BucketIamConfigurationUniformBucketLevelAccess.

        The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable.

        :return: The locked_time of this BucketIamConfigurationUniformBucketLevelAccess.
        :rtype: datetime
        """
        return self._locked_time

    @locked_time.setter
    def locked_time(self, locked_time):
        """Sets the locked_time of this BucketIamConfigurationUniformBucketLevelAccess.

        The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable.

        :param locked_time: The locked_time of this BucketIamConfigurationUniformBucketLevelAccess.
        :type locked_time: datetime
        """

        self._locked_time = locked_time
