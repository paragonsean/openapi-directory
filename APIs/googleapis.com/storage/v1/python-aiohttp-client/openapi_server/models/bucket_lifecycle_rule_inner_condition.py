# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketLifecycleRuleInnerCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, created_before: date=None, custom_time_before: date=None, days_since_custom_time: int=None, days_since_noncurrent_time: int=None, is_live: bool=None, matches_pattern: str=None, matches_prefix: List[str]=None, matches_storage_class: List[str]=None, matches_suffix: List[str]=None, noncurrent_time_before: date=None, num_newer_versions: int=None):
        """BucketLifecycleRuleInnerCondition - a model defined in OpenAPI

        :param age: The age of this BucketLifecycleRuleInnerCondition.
        :param created_before: The created_before of this BucketLifecycleRuleInnerCondition.
        :param custom_time_before: The custom_time_before of this BucketLifecycleRuleInnerCondition.
        :param days_since_custom_time: The days_since_custom_time of this BucketLifecycleRuleInnerCondition.
        :param days_since_noncurrent_time: The days_since_noncurrent_time of this BucketLifecycleRuleInnerCondition.
        :param is_live: The is_live of this BucketLifecycleRuleInnerCondition.
        :param matches_pattern: The matches_pattern of this BucketLifecycleRuleInnerCondition.
        :param matches_prefix: The matches_prefix of this BucketLifecycleRuleInnerCondition.
        :param matches_storage_class: The matches_storage_class of this BucketLifecycleRuleInnerCondition.
        :param matches_suffix: The matches_suffix of this BucketLifecycleRuleInnerCondition.
        :param noncurrent_time_before: The noncurrent_time_before of this BucketLifecycleRuleInnerCondition.
        :param num_newer_versions: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        """
        self.openapi_types = {
            'age': int,
            'created_before': date,
            'custom_time_before': date,
            'days_since_custom_time': int,
            'days_since_noncurrent_time': int,
            'is_live': bool,
            'matches_pattern': str,
            'matches_prefix': List[str],
            'matches_storage_class': List[str],
            'matches_suffix': List[str],
            'noncurrent_time_before': date,
            'num_newer_versions': int
        }

        self.attribute_map = {
            'age': 'age',
            'created_before': 'createdBefore',
            'custom_time_before': 'customTimeBefore',
            'days_since_custom_time': 'daysSinceCustomTime',
            'days_since_noncurrent_time': 'daysSinceNoncurrentTime',
            'is_live': 'isLive',
            'matches_pattern': 'matchesPattern',
            'matches_prefix': 'matchesPrefix',
            'matches_storage_class': 'matchesStorageClass',
            'matches_suffix': 'matchesSuffix',
            'noncurrent_time_before': 'noncurrentTimeBefore',
            'num_newer_versions': 'numNewerVersions'
        }

        self._age = age
        self._created_before = created_before
        self._custom_time_before = custom_time_before
        self._days_since_custom_time = days_since_custom_time
        self._days_since_noncurrent_time = days_since_noncurrent_time
        self._is_live = is_live
        self._matches_pattern = matches_pattern
        self._matches_prefix = matches_prefix
        self._matches_storage_class = matches_storage_class
        self._matches_suffix = matches_suffix
        self._noncurrent_time_before = noncurrent_time_before
        self._num_newer_versions = num_newer_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketLifecycleRuleInnerCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_lifecycle_rule_inner_condition of this BucketLifecycleRuleInnerCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this BucketLifecycleRuleInnerCondition.

        Age of an object (in days). This condition is satisfied when an object reaches the specified age.

        :return: The age of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this BucketLifecycleRuleInnerCondition.

        Age of an object (in days). This condition is satisfied when an object reaches the specified age.

        :param age: The age of this BucketLifecycleRuleInnerCondition.
        :type age: int
        """

        self._age = age

    @property
    def created_before(self):
        """Gets the created_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when an object is created before midnight of the specified date in UTC.

        :return: The created_before of this BucketLifecycleRuleInnerCondition.
        :rtype: date
        """
        return self._created_before

    @created_before.setter
    def created_before(self, created_before):
        """Sets the created_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when an object is created before midnight of the specified date in UTC.

        :param created_before: The created_before of this BucketLifecycleRuleInnerCondition.
        :type created_before: date
        """

        self._created_before = created_before

    @property
    def custom_time_before(self):
        """Gets the custom_time_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the custom time on an object is before this date in UTC.

        :return: The custom_time_before of this BucketLifecycleRuleInnerCondition.
        :rtype: date
        """
        return self._custom_time_before

    @custom_time_before.setter
    def custom_time_before(self, custom_time_before):
        """Sets the custom_time_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the custom time on an object is before this date in UTC.

        :param custom_time_before: The custom_time_before of this BucketLifecycleRuleInnerCondition.
        :type custom_time_before: date
        """

        self._custom_time_before = custom_time_before

    @property
    def days_since_custom_time(self):
        """Gets the days_since_custom_time of this BucketLifecycleRuleInnerCondition.

        Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.

        :return: The days_since_custom_time of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._days_since_custom_time

    @days_since_custom_time.setter
    def days_since_custom_time(self, days_since_custom_time):
        """Sets the days_since_custom_time of this BucketLifecycleRuleInnerCondition.

        Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.

        :param days_since_custom_time: The days_since_custom_time of this BucketLifecycleRuleInnerCondition.
        :type days_since_custom_time: int
        """

        self._days_since_custom_time = days_since_custom_time

    @property
    def days_since_noncurrent_time(self):
        """Gets the days_since_noncurrent_time of this BucketLifecycleRuleInnerCondition.

        Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.

        :return: The days_since_noncurrent_time of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._days_since_noncurrent_time

    @days_since_noncurrent_time.setter
    def days_since_noncurrent_time(self, days_since_noncurrent_time):
        """Sets the days_since_noncurrent_time of this BucketLifecycleRuleInnerCondition.

        Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.

        :param days_since_noncurrent_time: The days_since_noncurrent_time of this BucketLifecycleRuleInnerCondition.
        :type days_since_noncurrent_time: int
        """

        self._days_since_noncurrent_time = days_since_noncurrent_time

    @property
    def is_live(self):
        """Gets the is_live of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.

        :return: The is_live of this BucketLifecycleRuleInnerCondition.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.

        :param is_live: The is_live of this BucketLifecycleRuleInnerCondition.
        :type is_live: bool
        """

        self._is_live = is_live

    @property
    def matches_pattern(self):
        """Gets the matches_pattern of this BucketLifecycleRuleInnerCondition.

        A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the \"Early Access\" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.

        :return: The matches_pattern of this BucketLifecycleRuleInnerCondition.
        :rtype: str
        """
        return self._matches_pattern

    @matches_pattern.setter
    def matches_pattern(self, matches_pattern):
        """Sets the matches_pattern of this BucketLifecycleRuleInnerCondition.

        A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the \"Early Access\" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.

        :param matches_pattern: The matches_pattern of this BucketLifecycleRuleInnerCondition.
        :type matches_pattern: str
        """

        self._matches_pattern = matches_pattern

    @property
    def matches_prefix(self):
        """Gets the matches_prefix of this BucketLifecycleRuleInnerCondition.

        List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.

        :return: The matches_prefix of this BucketLifecycleRuleInnerCondition.
        :rtype: List[str]
        """
        return self._matches_prefix

    @matches_prefix.setter
    def matches_prefix(self, matches_prefix):
        """Sets the matches_prefix of this BucketLifecycleRuleInnerCondition.

        List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.

        :param matches_prefix: The matches_prefix of this BucketLifecycleRuleInnerCondition.
        :type matches_prefix: List[str]
        """

        self._matches_prefix = matches_prefix

    @property
    def matches_storage_class(self):
        """Gets the matches_storage_class of this BucketLifecycleRuleInnerCondition.

        Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.

        :return: The matches_storage_class of this BucketLifecycleRuleInnerCondition.
        :rtype: List[str]
        """
        return self._matches_storage_class

    @matches_storage_class.setter
    def matches_storage_class(self, matches_storage_class):
        """Sets the matches_storage_class of this BucketLifecycleRuleInnerCondition.

        Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.

        :param matches_storage_class: The matches_storage_class of this BucketLifecycleRuleInnerCondition.
        :type matches_storage_class: List[str]
        """

        self._matches_storage_class = matches_storage_class

    @property
    def matches_suffix(self):
        """Gets the matches_suffix of this BucketLifecycleRuleInnerCondition.

        List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.

        :return: The matches_suffix of this BucketLifecycleRuleInnerCondition.
        :rtype: List[str]
        """
        return self._matches_suffix

    @matches_suffix.setter
    def matches_suffix(self, matches_suffix):
        """Sets the matches_suffix of this BucketLifecycleRuleInnerCondition.

        List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.

        :param matches_suffix: The matches_suffix of this BucketLifecycleRuleInnerCondition.
        :type matches_suffix: List[str]
        """

        self._matches_suffix = matches_suffix

    @property
    def noncurrent_time_before(self):
        """Gets the noncurrent_time_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.

        :return: The noncurrent_time_before of this BucketLifecycleRuleInnerCondition.
        :rtype: date
        """
        return self._noncurrent_time_before

    @noncurrent_time_before.setter
    def noncurrent_time_before(self, noncurrent_time_before):
        """Sets the noncurrent_time_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.

        :param noncurrent_time_before: The noncurrent_time_before of this BucketLifecycleRuleInnerCondition.
        :type noncurrent_time_before: date
        """

        self._noncurrent_time_before = noncurrent_time_before

    @property
    def num_newer_versions(self):
        """Gets the num_newer_versions of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.

        :return: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._num_newer_versions

    @num_newer_versions.setter
    def num_newer_versions(self, num_newer_versions):
        """Sets the num_newer_versions of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.

        :param num_newer_versions: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        :type num_newer_versions: int
        """

        self._num_newer_versions = num_newer_versions
