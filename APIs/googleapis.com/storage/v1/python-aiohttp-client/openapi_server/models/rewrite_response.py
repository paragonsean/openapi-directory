# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object import Object
from openapi_server import util


class RewriteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, done: bool=None, kind: str='storage#rewriteResponse', object_size: str=None, resource: Object=None, rewrite_token: str=None, total_bytes_rewritten: str=None):
        """RewriteResponse - a model defined in OpenAPI

        :param done: The done of this RewriteResponse.
        :param kind: The kind of this RewriteResponse.
        :param object_size: The object_size of this RewriteResponse.
        :param resource: The resource of this RewriteResponse.
        :param rewrite_token: The rewrite_token of this RewriteResponse.
        :param total_bytes_rewritten: The total_bytes_rewritten of this RewriteResponse.
        """
        self.openapi_types = {
            'done': bool,
            'kind': str,
            'object_size': str,
            'resource': Object,
            'rewrite_token': str,
            'total_bytes_rewritten': str
        }

        self.attribute_map = {
            'done': 'done',
            'kind': 'kind',
            'object_size': 'objectSize',
            'resource': 'resource',
            'rewrite_token': 'rewriteToken',
            'total_bytes_rewritten': 'totalBytesRewritten'
        }

        self._done = done
        self._kind = kind
        self._object_size = object_size
        self._resource = resource
        self._rewrite_token = rewrite_token
        self._total_bytes_rewritten = total_bytes_rewritten

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewriteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewriteResponse of this RewriteResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def done(self):
        """Gets the done of this RewriteResponse.

        true if the copy is finished; otherwise, false if the copy is in progress. This property is always present in the response.

        :return: The done of this RewriteResponse.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this RewriteResponse.

        true if the copy is finished; otherwise, false if the copy is in progress. This property is always present in the response.

        :param done: The done of this RewriteResponse.
        :type done: bool
        """

        self._done = done

    @property
    def kind(self):
        """Gets the kind of this RewriteResponse.

        The kind of item this is.

        :return: The kind of this RewriteResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RewriteResponse.

        The kind of item this is.

        :param kind: The kind of this RewriteResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def object_size(self):
        """Gets the object_size of this RewriteResponse.

        The total size of the object being copied in bytes. This property is always present in the response.

        :return: The object_size of this RewriteResponse.
        :rtype: str
        """
        return self._object_size

    @object_size.setter
    def object_size(self, object_size):
        """Sets the object_size of this RewriteResponse.

        The total size of the object being copied in bytes. This property is always present in the response.

        :param object_size: The object_size of this RewriteResponse.
        :type object_size: str
        """

        self._object_size = object_size

    @property
    def resource(self):
        """Gets the resource of this RewriteResponse.


        :return: The resource of this RewriteResponse.
        :rtype: Object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this RewriteResponse.


        :param resource: The resource of this RewriteResponse.
        :type resource: Object
        """

        self._resource = resource

    @property
    def rewrite_token(self):
        """Gets the rewrite_token of this RewriteResponse.

        A token to use in subsequent requests to continue copying data. This token is present in the response only when there is more data to copy.

        :return: The rewrite_token of this RewriteResponse.
        :rtype: str
        """
        return self._rewrite_token

    @rewrite_token.setter
    def rewrite_token(self, rewrite_token):
        """Sets the rewrite_token of this RewriteResponse.

        A token to use in subsequent requests to continue copying data. This token is present in the response only when there is more data to copy.

        :param rewrite_token: The rewrite_token of this RewriteResponse.
        :type rewrite_token: str
        """

        self._rewrite_token = rewrite_token

    @property
    def total_bytes_rewritten(self):
        """Gets the total_bytes_rewritten of this RewriteResponse.

        The total bytes written so far, which can be used to provide a waiting user with a progress indicator. This property is always present in the response.

        :return: The total_bytes_rewritten of this RewriteResponse.
        :rtype: str
        """
        return self._total_bytes_rewritten

    @total_bytes_rewritten.setter
    def total_bytes_rewritten(self, total_bytes_rewritten):
        """Sets the total_bytes_rewritten of this RewriteResponse.

        The total bytes written so far, which can be used to provide a waiting user with a progress indicator. This property is always present in the response.

        :param total_bytes_rewritten: The total_bytes_rewritten of this RewriteResponse.
        :type total_bytes_rewritten: str
        """

        self._total_bytes_rewritten = total_bytes_rewritten
