# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_bindings_inner import PolicyBindingsInner
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bindings: List[PolicyBindingsInner]=None, etag: str=None, kind: str='storage#policy', resource_id: str=None, version: int=None):
        """Policy - a model defined in OpenAPI

        :param bindings: The bindings of this Policy.
        :param etag: The etag of this Policy.
        :param kind: The kind of this Policy.
        :param resource_id: The resource_id of this Policy.
        :param version: The version of this Policy.
        """
        self.openapi_types = {
            'bindings': List[PolicyBindingsInner],
            'etag': str,
            'kind': str,
            'resource_id': str,
            'version': int
        }

        self.attribute_map = {
            'bindings': 'bindings',
            'etag': 'etag',
            'kind': 'kind',
            'resource_id': 'resourceId',
            'version': 'version'
        }

        self._bindings = bindings
        self._etag = etag
        self._kind = kind
        self._resource_id = resource_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy of this Policy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bindings(self):
        """Gets the bindings of this Policy.

        An association between a role, which comes with a set of permissions, and members who may assume that role.

        :return: The bindings of this Policy.
        :rtype: List[PolicyBindingsInner]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Policy.

        An association between a role, which comes with a set of permissions, and members who may assume that role.

        :param bindings: The bindings of this Policy.
        :type bindings: List[PolicyBindingsInner]
        """

        self._bindings = bindings

    @property
    def etag(self):
        """Gets the etag of this Policy.

        HTTP 1.1  Entity tag for the policy.

        :return: The etag of this Policy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Policy.

        HTTP 1.1  Entity tag for the policy.

        :param etag: The etag of this Policy.
        :type etag: str
        """

        self._etag = etag

    @property
    def kind(self):
        """Gets the kind of this Policy.

        The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.

        :return: The kind of this Policy.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Policy.

        The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.

        :param kind: The kind of this Policy.
        :type kind: str
        """

        self._kind = kind

    @property
    def resource_id(self):
        """Gets the resource_id of this Policy.

        The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, projects/_/buckets/bucket/objects/object for objects, and projects/_/buckets/bucket/managedFolders/managedFolder. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.

        :return: The resource_id of this Policy.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Policy.

        The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, projects/_/buckets/bucket/objects/object for objects, and projects/_/buckets/bucket/managedFolders/managedFolder. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.

        :param resource_id: The resource_id of this Policy.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def version(self):
        """Gets the version of this Policy.

        The IAM policy format version.

        :return: The version of this Policy.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Policy.

        The IAM policy format version.

        :param version: The version of this Policy.
        :type version: int
        """

        self._version = version
