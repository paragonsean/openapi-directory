# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_access_control_project_team import BucketAccessControlProjectTeam
from openapi_server import util


class ObjectAccessControl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, domain: str=None, email: str=None, entity: str=None, entity_id: str=None, etag: str=None, generation: str=None, id: str=None, kind: str='storage#objectAccessControl', object: str=None, project_team: BucketAccessControlProjectTeam=None, role: str=None, self_link: str=None):
        """ObjectAccessControl - a model defined in OpenAPI

        :param bucket: The bucket of this ObjectAccessControl.
        :param domain: The domain of this ObjectAccessControl.
        :param email: The email of this ObjectAccessControl.
        :param entity: The entity of this ObjectAccessControl.
        :param entity_id: The entity_id of this ObjectAccessControl.
        :param etag: The etag of this ObjectAccessControl.
        :param generation: The generation of this ObjectAccessControl.
        :param id: The id of this ObjectAccessControl.
        :param kind: The kind of this ObjectAccessControl.
        :param object: The object of this ObjectAccessControl.
        :param project_team: The project_team of this ObjectAccessControl.
        :param role: The role of this ObjectAccessControl.
        :param self_link: The self_link of this ObjectAccessControl.
        """
        self.openapi_types = {
            'bucket': str,
            'domain': str,
            'email': str,
            'entity': str,
            'entity_id': str,
            'etag': str,
            'generation': str,
            'id': str,
            'kind': str,
            'object': str,
            'project_team': BucketAccessControlProjectTeam,
            'role': str,
            'self_link': str
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'domain': 'domain',
            'email': 'email',
            'entity': 'entity',
            'entity_id': 'entityId',
            'etag': 'etag',
            'generation': 'generation',
            'id': 'id',
            'kind': 'kind',
            'object': 'object',
            'project_team': 'projectTeam',
            'role': 'role',
            'self_link': 'selfLink'
        }

        self._bucket = bucket
        self._domain = domain
        self._email = email
        self._entity = entity
        self._entity_id = entity_id
        self._etag = etag
        self._generation = generation
        self._id = id
        self._kind = kind
        self._object = object
        self._project_team = project_team
        self._role = role
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectAccessControl':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectAccessControl of this ObjectAccessControl.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this ObjectAccessControl.

        The name of the bucket.

        :return: The bucket of this ObjectAccessControl.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this ObjectAccessControl.

        The name of the bucket.

        :param bucket: The bucket of this ObjectAccessControl.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def domain(self):
        """Gets the domain of this ObjectAccessControl.

        The domain associated with the entity, if any.

        :return: The domain of this ObjectAccessControl.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ObjectAccessControl.

        The domain associated with the entity, if any.

        :param domain: The domain of this ObjectAccessControl.
        :type domain: str
        """

        self._domain = domain

    @property
    def email(self):
        """Gets the email of this ObjectAccessControl.

        The email address associated with the entity, if any.

        :return: The email of this ObjectAccessControl.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ObjectAccessControl.

        The email address associated with the entity, if any.

        :param email: The email of this ObjectAccessControl.
        :type email: str
        """

        self._email = email

    @property
    def entity(self):
        """Gets the entity of this ObjectAccessControl.

        The entity holding the permission, in one of the following forms:  - user-userId  - user-email  - group-groupId  - group-email  - domain-domain  - project-team-projectId  - allUsers  - allAuthenticatedUsers Examples:  - The user liz@example.com would be user-liz@example.com.  - The group example@googlegroups.com would be group-example@googlegroups.com.  - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.

        :return: The entity of this ObjectAccessControl.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ObjectAccessControl.

        The entity holding the permission, in one of the following forms:  - user-userId  - user-email  - group-groupId  - group-email  - domain-domain  - project-team-projectId  - allUsers  - allAuthenticatedUsers Examples:  - The user liz@example.com would be user-liz@example.com.  - The group example@googlegroups.com would be group-example@googlegroups.com.  - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.

        :param entity: The entity of this ObjectAccessControl.
        :type entity: str
        """

        self._entity = entity

    @property
    def entity_id(self):
        """Gets the entity_id of this ObjectAccessControl.

        The ID for the entity, if any.

        :return: The entity_id of this ObjectAccessControl.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ObjectAccessControl.

        The ID for the entity, if any.

        :param entity_id: The entity_id of this ObjectAccessControl.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def etag(self):
        """Gets the etag of this ObjectAccessControl.

        HTTP 1.1 Entity tag for the access-control entry.

        :return: The etag of this ObjectAccessControl.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ObjectAccessControl.

        HTTP 1.1 Entity tag for the access-control entry.

        :param etag: The etag of this ObjectAccessControl.
        :type etag: str
        """

        self._etag = etag

    @property
    def generation(self):
        """Gets the generation of this ObjectAccessControl.

        The content generation of the object, if applied to an object.

        :return: The generation of this ObjectAccessControl.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this ObjectAccessControl.

        The content generation of the object, if applied to an object.

        :param generation: The generation of this ObjectAccessControl.
        :type generation: str
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this ObjectAccessControl.

        The ID of the access-control entry.

        :return: The id of this ObjectAccessControl.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectAccessControl.

        The ID of the access-control entry.

        :param id: The id of this ObjectAccessControl.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ObjectAccessControl.

        The kind of item this is. For object access control entries, this is always storage#objectAccessControl.

        :return: The kind of this ObjectAccessControl.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ObjectAccessControl.

        The kind of item this is. For object access control entries, this is always storage#objectAccessControl.

        :param kind: The kind of this ObjectAccessControl.
        :type kind: str
        """

        self._kind = kind

    @property
    def object(self):
        """Gets the object of this ObjectAccessControl.

        The name of the object, if applied to an object.

        :return: The object of this ObjectAccessControl.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ObjectAccessControl.

        The name of the object, if applied to an object.

        :param object: The object of this ObjectAccessControl.
        :type object: str
        """

        self._object = object

    @property
    def project_team(self):
        """Gets the project_team of this ObjectAccessControl.


        :return: The project_team of this ObjectAccessControl.
        :rtype: BucketAccessControlProjectTeam
        """
        return self._project_team

    @project_team.setter
    def project_team(self, project_team):
        """Sets the project_team of this ObjectAccessControl.


        :param project_team: The project_team of this ObjectAccessControl.
        :type project_team: BucketAccessControlProjectTeam
        """

        self._project_team = project_team

    @property
    def role(self):
        """Gets the role of this ObjectAccessControl.

        The access permission for the entity.

        :return: The role of this ObjectAccessControl.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ObjectAccessControl.

        The access permission for the entity.

        :param role: The role of this ObjectAccessControl.
        :type role: str
        """

        self._role = role

    @property
    def self_link(self):
        """Gets the self_link of this ObjectAccessControl.

        The link to this access-control entry.

        :return: The self_link of this ObjectAccessControl.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this ObjectAccessControl.

        The link to this access-control entry.

        :param self_link: The self_link of this ObjectAccessControl.
        :type self_link: str
        """

        self._self_link = self_link
