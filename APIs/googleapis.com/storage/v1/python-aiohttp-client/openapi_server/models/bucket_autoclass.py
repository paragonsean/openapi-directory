# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketAutoclass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, terminal_storage_class: str=None, terminal_storage_class_update_time: datetime=None, toggle_time: datetime=None):
        """BucketAutoclass - a model defined in OpenAPI

        :param enabled: The enabled of this BucketAutoclass.
        :param terminal_storage_class: The terminal_storage_class of this BucketAutoclass.
        :param terminal_storage_class_update_time: The terminal_storage_class_update_time of this BucketAutoclass.
        :param toggle_time: The toggle_time of this BucketAutoclass.
        """
        self.openapi_types = {
            'enabled': bool,
            'terminal_storage_class': str,
            'terminal_storage_class_update_time': datetime,
            'toggle_time': datetime
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'terminal_storage_class': 'terminalStorageClass',
            'terminal_storage_class_update_time': 'terminalStorageClassUpdateTime',
            'toggle_time': 'toggleTime'
        }

        self._enabled = enabled
        self._terminal_storage_class = terminal_storage_class
        self._terminal_storage_class_update_time = terminal_storage_class_update_time
        self._toggle_time = toggle_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketAutoclass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_autoclass of this BucketAutoclass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this BucketAutoclass.

        Whether or not Autoclass is enabled on this bucket

        :return: The enabled of this BucketAutoclass.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BucketAutoclass.

        Whether or not Autoclass is enabled on this bucket

        :param enabled: The enabled of this BucketAutoclass.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def terminal_storage_class(self):
        """Gets the terminal_storage_class of this BucketAutoclass.

        The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.

        :return: The terminal_storage_class of this BucketAutoclass.
        :rtype: str
        """
        return self._terminal_storage_class

    @terminal_storage_class.setter
    def terminal_storage_class(self, terminal_storage_class):
        """Sets the terminal_storage_class of this BucketAutoclass.

        The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.

        :param terminal_storage_class: The terminal_storage_class of this BucketAutoclass.
        :type terminal_storage_class: str
        """

        self._terminal_storage_class = terminal_storage_class

    @property
    def terminal_storage_class_update_time(self):
        """Gets the terminal_storage_class_update_time of this BucketAutoclass.

        A date and time in RFC 3339 format representing the time of the most recent update to \"terminalStorageClass\".

        :return: The terminal_storage_class_update_time of this BucketAutoclass.
        :rtype: datetime
        """
        return self._terminal_storage_class_update_time

    @terminal_storage_class_update_time.setter
    def terminal_storage_class_update_time(self, terminal_storage_class_update_time):
        """Sets the terminal_storage_class_update_time of this BucketAutoclass.

        A date and time in RFC 3339 format representing the time of the most recent update to \"terminalStorageClass\".

        :param terminal_storage_class_update_time: The terminal_storage_class_update_time of this BucketAutoclass.
        :type terminal_storage_class_update_time: datetime
        """

        self._terminal_storage_class_update_time = terminal_storage_class_update_time

    @property
    def toggle_time(self):
        """Gets the toggle_time of this BucketAutoclass.

        A date and time in RFC 3339 format representing the instant at which \"enabled\" was last toggled.

        :return: The toggle_time of this BucketAutoclass.
        :rtype: datetime
        """
        return self._toggle_time

    @toggle_time.setter
    def toggle_time(self, toggle_time):
        """Sets the toggle_time of this BucketAutoclass.

        A date and time in RFC 3339 format representing the instant at which \"enabled\" was last toggled.

        :param toggle_time: The toggle_time of this BucketAutoclass.
        :type toggle_time: datetime
        """

        self._toggle_time = toggle_time
