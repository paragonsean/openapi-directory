# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_iam_configuration_bucket_policy_only import BucketIamConfigurationBucketPolicyOnly
from openapi_server.models.bucket_iam_configuration_uniform_bucket_level_access import BucketIamConfigurationUniformBucketLevelAccess
from openapi_server import util


class BucketIamConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_policy_only: BucketIamConfigurationBucketPolicyOnly=None, public_access_prevention: str=None, uniform_bucket_level_access: BucketIamConfigurationUniformBucketLevelAccess=None):
        """BucketIamConfiguration - a model defined in OpenAPI

        :param bucket_policy_only: The bucket_policy_only of this BucketIamConfiguration.
        :param public_access_prevention: The public_access_prevention of this BucketIamConfiguration.
        :param uniform_bucket_level_access: The uniform_bucket_level_access of this BucketIamConfiguration.
        """
        self.openapi_types = {
            'bucket_policy_only': BucketIamConfigurationBucketPolicyOnly,
            'public_access_prevention': str,
            'uniform_bucket_level_access': BucketIamConfigurationUniformBucketLevelAccess
        }

        self.attribute_map = {
            'bucket_policy_only': 'bucketPolicyOnly',
            'public_access_prevention': 'publicAccessPrevention',
            'uniform_bucket_level_access': 'uniformBucketLevelAccess'
        }

        self._bucket_policy_only = bucket_policy_only
        self._public_access_prevention = public_access_prevention
        self._uniform_bucket_level_access = uniform_bucket_level_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketIamConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_iamConfiguration of this BucketIamConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_policy_only(self):
        """Gets the bucket_policy_only of this BucketIamConfiguration.


        :return: The bucket_policy_only of this BucketIamConfiguration.
        :rtype: BucketIamConfigurationBucketPolicyOnly
        """
        return self._bucket_policy_only

    @bucket_policy_only.setter
    def bucket_policy_only(self, bucket_policy_only):
        """Sets the bucket_policy_only of this BucketIamConfiguration.


        :param bucket_policy_only: The bucket_policy_only of this BucketIamConfiguration.
        :type bucket_policy_only: BucketIamConfigurationBucketPolicyOnly
        """

        self._bucket_policy_only = bucket_policy_only

    @property
    def public_access_prevention(self):
        """Gets the public_access_prevention of this BucketIamConfiguration.

        The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.

        :return: The public_access_prevention of this BucketIamConfiguration.
        :rtype: str
        """
        return self._public_access_prevention

    @public_access_prevention.setter
    def public_access_prevention(self, public_access_prevention):
        """Sets the public_access_prevention of this BucketIamConfiguration.

        The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.

        :param public_access_prevention: The public_access_prevention of this BucketIamConfiguration.
        :type public_access_prevention: str
        """

        self._public_access_prevention = public_access_prevention

    @property
    def uniform_bucket_level_access(self):
        """Gets the uniform_bucket_level_access of this BucketIamConfiguration.


        :return: The uniform_bucket_level_access of this BucketIamConfiguration.
        :rtype: BucketIamConfigurationUniformBucketLevelAccess
        """
        return self._uniform_bucket_level_access

    @uniform_bucket_level_access.setter
    def uniform_bucket_level_access(self, uniform_bucket_level_access):
        """Sets the uniform_bucket_level_access of this BucketIamConfiguration.


        :param uniform_bucket_level_access: The uniform_bucket_level_access of this BucketIamConfiguration.
        :type uniform_bucket_level_access: BucketIamConfigurationUniformBucketLevelAccess
        """

        self._uniform_bucket_level_access = uniform_bucket_level_access
