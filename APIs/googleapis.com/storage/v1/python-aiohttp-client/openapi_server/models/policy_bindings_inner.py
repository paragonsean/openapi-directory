# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expr import Expr
from openapi_server import util


class PolicyBindingsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: Expr=None, members: List[str]=None, role: str=None):
        """PolicyBindingsInner - a model defined in OpenAPI

        :param condition: The condition of this PolicyBindingsInner.
        :param members: The members of this PolicyBindingsInner.
        :param role: The role of this PolicyBindingsInner.
        """
        self.openapi_types = {
            'condition': Expr,
            'members': List[str],
            'role': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'members': 'members',
            'role': 'role'
        }

        self._condition = condition
        self._members = members
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyBindingsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Policy_bindings_inner of this PolicyBindingsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this PolicyBindingsInner.


        :return: The condition of this PolicyBindingsInner.
        :rtype: Expr
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PolicyBindingsInner.


        :param condition: The condition of this PolicyBindingsInner.
        :type condition: Expr
        """

        self._condition = condition

    @property
    def members(self):
        """Gets the members of this PolicyBindingsInner.

        A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:   - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.   - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.   - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.   - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .   - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.   - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.   - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project   - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project   - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project

        :return: The members of this PolicyBindingsInner.
        :rtype: List[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this PolicyBindingsInner.

        A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:   - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.   - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.   - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.   - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .   - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.   - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.   - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project   - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project   - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project

        :param members: The members of this PolicyBindingsInner.
        :type members: List[str]
        """

        self._members = members

    @property
    def role(self):
        """Gets the role of this PolicyBindingsInner.

        The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole. The new IAM roles are:   - roles/storage.admin — Full control of Google Cloud Storage resources.   - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.   - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.   - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:   - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.   - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.   - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.   - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.   - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.

        :return: The role of this PolicyBindingsInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PolicyBindingsInner.

        The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole. The new IAM roles are:   - roles/storage.admin — Full control of Google Cloud Storage resources.   - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.   - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.   - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:   - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.   - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.   - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.   - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.   - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.

        :param role: The role of this PolicyBindingsInner.
        :type role: str
        """

        self._role = role
