# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnywhereCache(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admission_policy: str=None, anywhere_cache_id: str=None, bucket: str=None, create_time: datetime=None, id: str=None, kind: str='storage#anywhereCache', pending_update: bool=None, self_link: str=None, state: str=None, ttl: str=None, update_time: datetime=None, zone: str=None):
        """AnywhereCache - a model defined in OpenAPI

        :param admission_policy: The admission_policy of this AnywhereCache.
        :param anywhere_cache_id: The anywhere_cache_id of this AnywhereCache.
        :param bucket: The bucket of this AnywhereCache.
        :param create_time: The create_time of this AnywhereCache.
        :param id: The id of this AnywhereCache.
        :param kind: The kind of this AnywhereCache.
        :param pending_update: The pending_update of this AnywhereCache.
        :param self_link: The self_link of this AnywhereCache.
        :param state: The state of this AnywhereCache.
        :param ttl: The ttl of this AnywhereCache.
        :param update_time: The update_time of this AnywhereCache.
        :param zone: The zone of this AnywhereCache.
        """
        self.openapi_types = {
            'admission_policy': str,
            'anywhere_cache_id': str,
            'bucket': str,
            'create_time': datetime,
            'id': str,
            'kind': str,
            'pending_update': bool,
            'self_link': str,
            'state': str,
            'ttl': str,
            'update_time': datetime,
            'zone': str
        }

        self.attribute_map = {
            'admission_policy': 'admissionPolicy',
            'anywhere_cache_id': 'anywhereCacheId',
            'bucket': 'bucket',
            'create_time': 'createTime',
            'id': 'id',
            'kind': 'kind',
            'pending_update': 'pendingUpdate',
            'self_link': 'selfLink',
            'state': 'state',
            'ttl': 'ttl',
            'update_time': 'updateTime',
            'zone': 'zone'
        }

        self._admission_policy = admission_policy
        self._anywhere_cache_id = anywhere_cache_id
        self._bucket = bucket
        self._create_time = create_time
        self._id = id
        self._kind = kind
        self._pending_update = pending_update
        self._self_link = self_link
        self._state = state
        self._ttl = ttl
        self._update_time = update_time
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnywhereCache':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnywhereCache of this AnywhereCache.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admission_policy(self):
        """Gets the admission_policy of this AnywhereCache.

        The cache-level entry admission policy.

        :return: The admission_policy of this AnywhereCache.
        :rtype: str
        """
        return self._admission_policy

    @admission_policy.setter
    def admission_policy(self, admission_policy):
        """Sets the admission_policy of this AnywhereCache.

        The cache-level entry admission policy.

        :param admission_policy: The admission_policy of this AnywhereCache.
        :type admission_policy: str
        """

        self._admission_policy = admission_policy

    @property
    def anywhere_cache_id(self):
        """Gets the anywhere_cache_id of this AnywhereCache.

        The ID of the Anywhere cache instance.

        :return: The anywhere_cache_id of this AnywhereCache.
        :rtype: str
        """
        return self._anywhere_cache_id

    @anywhere_cache_id.setter
    def anywhere_cache_id(self, anywhere_cache_id):
        """Sets the anywhere_cache_id of this AnywhereCache.

        The ID of the Anywhere cache instance.

        :param anywhere_cache_id: The anywhere_cache_id of this AnywhereCache.
        :type anywhere_cache_id: str
        """

        self._anywhere_cache_id = anywhere_cache_id

    @property
    def bucket(self):
        """Gets the bucket of this AnywhereCache.

        The name of the bucket containing this cache instance.

        :return: The bucket of this AnywhereCache.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this AnywhereCache.

        The name of the bucket containing this cache instance.

        :param bucket: The bucket of this AnywhereCache.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def create_time(self):
        """Gets the create_time of this AnywhereCache.

        The creation time of the cache instance in RFC 3339 format.

        :return: The create_time of this AnywhereCache.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AnywhereCache.

        The creation time of the cache instance in RFC 3339 format.

        :param create_time: The create_time of this AnywhereCache.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def id(self):
        """Gets the id of this AnywhereCache.

        The ID of the resource, including the project number, bucket name and anywhere cache ID.

        :return: The id of this AnywhereCache.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnywhereCache.

        The ID of the resource, including the project number, bucket name and anywhere cache ID.

        :param id: The id of this AnywhereCache.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this AnywhereCache.

        The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache.

        :return: The kind of this AnywhereCache.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this AnywhereCache.

        The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache.

        :param kind: The kind of this AnywhereCache.
        :type kind: str
        """

        self._kind = kind

    @property
    def pending_update(self):
        """Gets the pending_update of this AnywhereCache.

        True if the cache instance has an active Update long-running operation.

        :return: The pending_update of this AnywhereCache.
        :rtype: bool
        """
        return self._pending_update

    @pending_update.setter
    def pending_update(self, pending_update):
        """Sets the pending_update of this AnywhereCache.

        True if the cache instance has an active Update long-running operation.

        :param pending_update: The pending_update of this AnywhereCache.
        :type pending_update: bool
        """

        self._pending_update = pending_update

    @property
    def self_link(self):
        """Gets the self_link of this AnywhereCache.

        The link to this cache instance.

        :return: The self_link of this AnywhereCache.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this AnywhereCache.

        The link to this cache instance.

        :param self_link: The self_link of this AnywhereCache.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def state(self):
        """Gets the state of this AnywhereCache.

        The current state of the cache instance.

        :return: The state of this AnywhereCache.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AnywhereCache.

        The current state of the cache instance.

        :param state: The state of this AnywhereCache.
        :type state: str
        """

        self._state = state

    @property
    def ttl(self):
        """Gets the ttl of this AnywhereCache.

        The TTL of all cache entries in whole seconds. e.g., \"7200s\". 

        :return: The ttl of this AnywhereCache.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this AnywhereCache.

        The TTL of all cache entries in whole seconds. e.g., \"7200s\". 

        :param ttl: The ttl of this AnywhereCache.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def update_time(self):
        """Gets the update_time of this AnywhereCache.

        The modification time of the cache instance metadata in RFC 3339 format.

        :return: The update_time of this AnywhereCache.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this AnywhereCache.

        The modification time of the cache instance metadata in RFC 3339 format.

        :param update_time: The update_time of this AnywhereCache.
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def zone(self):
        """Gets the zone of this AnywhereCache.

        The zone in which the cache instance is running. For example, us-central1-a.

        :return: The zone of this AnywhereCache.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this AnywhereCache.

        The zone in which the cache instance is running. For example, us-central1-a.

        :param zone: The zone of this AnywhereCache.
        :type zone: str
        """

        self._zone = zone
