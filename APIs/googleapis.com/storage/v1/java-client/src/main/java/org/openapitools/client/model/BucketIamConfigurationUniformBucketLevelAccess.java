/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bucket&#39;s uniform bucket-level access configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketIamConfigurationUniformBucketLevelAccess {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LOCKED_TIME = "lockedTime";
  @SerializedName(SERIALIZED_NAME_LOCKED_TIME)
  private OffsetDateTime lockedTime;

  public BucketIamConfigurationUniformBucketLevelAccess() {
  }

  public BucketIamConfigurationUniformBucketLevelAccess enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If set, access is controlled only by bucket-level or above IAM policies.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public BucketIamConfigurationUniformBucketLevelAccess lockedTime(OffsetDateTime lockedTime) {
    this.lockedTime = lockedTime;
    return this;
  }

  /**
   * The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable.
   * @return lockedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLockedTime() {
    return lockedTime;
  }

  public void setLockedTime(OffsetDateTime lockedTime) {
    this.lockedTime = lockedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketIamConfigurationUniformBucketLevelAccess bucketIamConfigurationUniformBucketLevelAccess = (BucketIamConfigurationUniformBucketLevelAccess) o;
    return Objects.equals(this.enabled, bucketIamConfigurationUniformBucketLevelAccess.enabled) &&
        Objects.equals(this.lockedTime, bucketIamConfigurationUniformBucketLevelAccess.lockedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, lockedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketIamConfigurationUniformBucketLevelAccess {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    lockedTime: ").append(toIndentedString(lockedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("lockedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketIamConfigurationUniformBucketLevelAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketIamConfigurationUniformBucketLevelAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketIamConfigurationUniformBucketLevelAccess is not found in the empty JSON string", BucketIamConfigurationUniformBucketLevelAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketIamConfigurationUniformBucketLevelAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketIamConfigurationUniformBucketLevelAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketIamConfigurationUniformBucketLevelAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketIamConfigurationUniformBucketLevelAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketIamConfigurationUniformBucketLevelAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketIamConfigurationUniformBucketLevelAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketIamConfigurationUniformBucketLevelAccess>() {
           @Override
           public void write(JsonWriter out, BucketIamConfigurationUniformBucketLevelAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketIamConfigurationUniformBucketLevelAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketIamConfigurationUniformBucketLevelAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketIamConfigurationUniformBucketLevelAccess
   * @throws IOException if the JSON string is invalid with respect to BucketIamConfigurationUniformBucketLevelAccess
   */
  public static BucketIamConfigurationUniformBucketLevelAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketIamConfigurationUniformBucketLevelAccess.class);
  }

  /**
   * Convert an instance of BucketIamConfigurationUniformBucketLevelAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

