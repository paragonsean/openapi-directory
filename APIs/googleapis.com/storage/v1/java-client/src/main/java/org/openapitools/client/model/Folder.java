/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FolderPendingRenameInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A folder. Only available in buckets with hierarchical namespace enabled.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Folder {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "storage#folder";

  public static final String SERIALIZED_NAME_METAGENERATION = "metageneration";
  @SerializedName(SERIALIZED_NAME_METAGENERATION)
  private String metageneration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PENDING_RENAME_INFO = "pendingRenameInfo";
  @SerializedName(SERIALIZED_NAME_PENDING_RENAME_INFO)
  private FolderPendingRenameInfo pendingRenameInfo;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public Folder() {
  }

  public Folder bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * The name of the bucket containing this folder.
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public Folder createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The creation time of the folder in RFC 3339 format.
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public Folder id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the folder, including the bucket name, folder name.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Folder kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of item this is. For folders, this is always storage#folder.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Folder metageneration(String metageneration) {
    this.metageneration = metageneration;
    return this;
  }

  /**
   * The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
   * @return metageneration
   */
  @javax.annotation.Nullable
  public String getMetageneration() {
    return metageneration;
  }

  public void setMetageneration(String metageneration) {
    this.metageneration = metageneration;
  }


  public Folder name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the folder. Required if not specified by URL parameter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Folder pendingRenameInfo(FolderPendingRenameInfo pendingRenameInfo) {
    this.pendingRenameInfo = pendingRenameInfo;
    return this;
  }

  /**
   * Get pendingRenameInfo
   * @return pendingRenameInfo
   */
  @javax.annotation.Nullable
  public FolderPendingRenameInfo getPendingRenameInfo() {
    return pendingRenameInfo;
  }

  public void setPendingRenameInfo(FolderPendingRenameInfo pendingRenameInfo) {
    this.pendingRenameInfo = pendingRenameInfo;
  }


  public Folder selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The link to this folder.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Folder updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The modification time of the folder metadata in RFC 3339 format.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.bucket, folder.bucket) &&
        Objects.equals(this.createTime, folder.createTime) &&
        Objects.equals(this.id, folder.id) &&
        Objects.equals(this.kind, folder.kind) &&
        Objects.equals(this.metageneration, folder.metageneration) &&
        Objects.equals(this.name, folder.name) &&
        Objects.equals(this.pendingRenameInfo, folder.pendingRenameInfo) &&
        Objects.equals(this.selfLink, folder.selfLink) &&
        Objects.equals(this.updateTime, folder.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, createTime, id, kind, metageneration, name, pendingRenameInfo, selfLink, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metageneration: ").append(toIndentedString(metageneration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pendingRenameInfo: ").append(toIndentedString(pendingRenameInfo)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucket");
    openapiFields.add("createTime");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("metageneration");
    openapiFields.add("name");
    openapiFields.add("pendingRenameInfo");
    openapiFields.add("selfLink");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Folder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Folder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Folder is not found in the empty JSON string", Folder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Folder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Folder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("metageneration") != null && !jsonObj.get("metageneration").isJsonNull()) && !jsonObj.get("metageneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metageneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metageneration").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pendingRenameInfo`
      if (jsonObj.get("pendingRenameInfo") != null && !jsonObj.get("pendingRenameInfo").isJsonNull()) {
        FolderPendingRenameInfo.validateJsonElement(jsonObj.get("pendingRenameInfo"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Folder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Folder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Folder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Folder.class));

       return (TypeAdapter<T>) new TypeAdapter<Folder>() {
           @Override
           public void write(JsonWriter out, Folder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Folder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Folder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Folder
   * @throws IOException if the JSON string is invalid with respect to Folder
   */
  public static Folder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Folder.class);
  }

  /**
   * Convert an instance of Folder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

