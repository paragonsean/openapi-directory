/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A bulk restore objects request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BulkRestoreObjectsRequest {
  public static final String SERIALIZED_NAME_ALLOW_OVERWRITE = "allowOverwrite";
  @SerializedName(SERIALIZED_NAME_ALLOW_OVERWRITE)
  private Boolean allowOverwrite;

  public static final String SERIALIZED_NAME_COPY_SOURCE_ACL = "copySourceAcl";
  @SerializedName(SERIALIZED_NAME_COPY_SOURCE_ACL)
  private Boolean copySourceAcl;

  public static final String SERIALIZED_NAME_MATCH_GLOBS = "matchGlobs";
  @SerializedName(SERIALIZED_NAME_MATCH_GLOBS)
  private List<String> matchGlobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOFT_DELETED_AFTER_TIME = "softDeletedAfterTime";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETED_AFTER_TIME)
  private OffsetDateTime softDeletedAfterTime;

  public static final String SERIALIZED_NAME_SOFT_DELETED_BEFORE_TIME = "softDeletedBeforeTime";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETED_BEFORE_TIME)
  private OffsetDateTime softDeletedBeforeTime;

  public BulkRestoreObjectsRequest() {
  }

  public BulkRestoreObjectsRequest allowOverwrite(Boolean allowOverwrite) {
    this.allowOverwrite = allowOverwrite;
    return this;
  }

  /**
   * If false (default), the restore will not overwrite live objects with the same name at the destination. This means some deleted objects may be skipped. If true, live objects will be overwritten resulting in a noncurrent object (if versioning is enabled). If versioning is not enabled, overwriting the object will result in a soft-deleted object. In either case, if a noncurrent object already exists with the same name, a live version can be written without issue.
   * @return allowOverwrite
   */
  @javax.annotation.Nullable
  public Boolean getAllowOverwrite() {
    return allowOverwrite;
  }

  public void setAllowOverwrite(Boolean allowOverwrite) {
    this.allowOverwrite = allowOverwrite;
  }


  public BulkRestoreObjectsRequest copySourceAcl(Boolean copySourceAcl) {
    this.copySourceAcl = copySourceAcl;
    return this;
  }

  /**
   * If true, copies the source object&#39;s ACL; otherwise, uses the bucket&#39;s default object ACL. The default is false.
   * @return copySourceAcl
   */
  @javax.annotation.Nullable
  public Boolean getCopySourceAcl() {
    return copySourceAcl;
  }

  public void setCopySourceAcl(Boolean copySourceAcl) {
    this.copySourceAcl = copySourceAcl;
  }


  public BulkRestoreObjectsRequest matchGlobs(List<String> matchGlobs) {
    this.matchGlobs = matchGlobs;
    return this;
  }

  public BulkRestoreObjectsRequest addMatchGlobsItem(String matchGlobsItem) {
    if (this.matchGlobs == null) {
      this.matchGlobs = new ArrayList<>();
    }
    this.matchGlobs.add(matchGlobsItem);
    return this;
  }

  /**
   * Restores only the objects matching any of the specified glob(s). If this parameter is not specified, all objects will be restored within the specified time range.
   * @return matchGlobs
   */
  @javax.annotation.Nullable
  public List<String> getMatchGlobs() {
    return matchGlobs;
  }

  public void setMatchGlobs(List<String> matchGlobs) {
    this.matchGlobs = matchGlobs;
  }


  public BulkRestoreObjectsRequest softDeletedAfterTime(OffsetDateTime softDeletedAfterTime) {
    this.softDeletedAfterTime = softDeletedAfterTime;
    return this;
  }

  /**
   * Restores only the objects that were soft-deleted after this time.
   * @return softDeletedAfterTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSoftDeletedAfterTime() {
    return softDeletedAfterTime;
  }

  public void setSoftDeletedAfterTime(OffsetDateTime softDeletedAfterTime) {
    this.softDeletedAfterTime = softDeletedAfterTime;
  }


  public BulkRestoreObjectsRequest softDeletedBeforeTime(OffsetDateTime softDeletedBeforeTime) {
    this.softDeletedBeforeTime = softDeletedBeforeTime;
    return this;
  }

  /**
   * Restores only the objects that were soft-deleted before this time.
   * @return softDeletedBeforeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSoftDeletedBeforeTime() {
    return softDeletedBeforeTime;
  }

  public void setSoftDeletedBeforeTime(OffsetDateTime softDeletedBeforeTime) {
    this.softDeletedBeforeTime = softDeletedBeforeTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkRestoreObjectsRequest bulkRestoreObjectsRequest = (BulkRestoreObjectsRequest) o;
    return Objects.equals(this.allowOverwrite, bulkRestoreObjectsRequest.allowOverwrite) &&
        Objects.equals(this.copySourceAcl, bulkRestoreObjectsRequest.copySourceAcl) &&
        Objects.equals(this.matchGlobs, bulkRestoreObjectsRequest.matchGlobs) &&
        Objects.equals(this.softDeletedAfterTime, bulkRestoreObjectsRequest.softDeletedAfterTime) &&
        Objects.equals(this.softDeletedBeforeTime, bulkRestoreObjectsRequest.softDeletedBeforeTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowOverwrite, copySourceAcl, matchGlobs, softDeletedAfterTime, softDeletedBeforeTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkRestoreObjectsRequest {\n");
    sb.append("    allowOverwrite: ").append(toIndentedString(allowOverwrite)).append("\n");
    sb.append("    copySourceAcl: ").append(toIndentedString(copySourceAcl)).append("\n");
    sb.append("    matchGlobs: ").append(toIndentedString(matchGlobs)).append("\n");
    sb.append("    softDeletedAfterTime: ").append(toIndentedString(softDeletedAfterTime)).append("\n");
    sb.append("    softDeletedBeforeTime: ").append(toIndentedString(softDeletedBeforeTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowOverwrite");
    openapiFields.add("copySourceAcl");
    openapiFields.add("matchGlobs");
    openapiFields.add("softDeletedAfterTime");
    openapiFields.add("softDeletedBeforeTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkRestoreObjectsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkRestoreObjectsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkRestoreObjectsRequest is not found in the empty JSON string", BulkRestoreObjectsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkRestoreObjectsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkRestoreObjectsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("matchGlobs") != null && !jsonObj.get("matchGlobs").isJsonNull() && !jsonObj.get("matchGlobs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchGlobs` to be an array in the JSON string but got `%s`", jsonObj.get("matchGlobs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkRestoreObjectsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkRestoreObjectsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkRestoreObjectsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkRestoreObjectsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkRestoreObjectsRequest>() {
           @Override
           public void write(JsonWriter out, BulkRestoreObjectsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkRestoreObjectsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkRestoreObjectsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkRestoreObjectsRequest
   * @throws IOException if the JSON string is invalid with respect to BulkRestoreObjectsRequest
   */
  public static BulkRestoreObjectsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkRestoreObjectsRequest.class);
  }

  /**
   * Convert an instance of BulkRestoreObjectsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

