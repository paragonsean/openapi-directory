/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagedFolder;
import org.openapitools.client.model.ManagedFolders;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.TestIamPermissionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedFoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedFoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedFoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageManagedFoldersDelete
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the managed folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the managed folder if its metageneration does not match this value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersDeleteCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders/{managedFolder}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "managedFolder" + "}", localVarApiClient.escapeString(managedFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ifMetagenerationMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationMatch", ifMetagenerationMatch));
        }

        if (ifMetagenerationNotMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationNotMatch", ifMetagenerationNotMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersDeleteValidateBeforeCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersDelete(Async)");
        }

        // verify the required parameter 'managedFolder' is set
        if (managedFolder == null) {
            throw new ApiException("Missing the required parameter 'managedFolder' when calling storageManagedFoldersDelete(Async)");
        }

        return storageManagedFoldersDeleteCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);

    }

    /**
     * 
     * Permanently deletes a managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the managed folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the managed folder if its metageneration does not match this value. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void storageManagedFoldersDelete(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        storageManagedFoldersDeleteWithHttpInfo(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
    }

    /**
     * 
     * Permanently deletes a managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the managed folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the managed folder if its metageneration does not match this value. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageManagedFoldersDeleteWithHttpInfo(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersDeleteValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes a managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the managed folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the managed folder if its metageneration does not match this value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersDeleteAsync(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersDeleteValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersGet
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration does not match the given value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersGetCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders/{managedFolder}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "managedFolder" + "}", localVarApiClient.escapeString(managedFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ifMetagenerationMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationMatch", ifMetagenerationMatch));
        }

        if (ifMetagenerationNotMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationNotMatch", ifMetagenerationNotMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersGetValidateBeforeCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersGet(Async)");
        }

        // verify the required parameter 'managedFolder' is set
        if (managedFolder == null) {
            throw new ApiException("Missing the required parameter 'managedFolder' when calling storageManagedFoldersGet(Async)");
        }

        return storageManagedFoldersGetCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);

    }

    /**
     * 
     * Returns metadata of the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration does not match the given value. (optional)
     * @return ManagedFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ManagedFolder storageManagedFoldersGet(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        ApiResponse<ManagedFolder> localVarResp = storageManagedFoldersGetWithHttpInfo(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns metadata of the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration does not match the given value. (optional)
     * @return ApiResponse&lt;ManagedFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedFolder> storageManagedFoldersGetWithHttpInfo(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersGetValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, null);
        Type localVarReturnType = new TypeToken<ManagedFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns metadata of the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the managed folder metadata conditional on whether the managed folder&#39;s current metageneration does not match the given value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersGetAsync(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback<ManagedFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersGetValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);
        Type localVarReturnType = new TypeToken<ManagedFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersGetIamPolicy
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param optionsRequestedPolicyVersion The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn&#39;t support part of the requested IAM policy, the request fails. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersGetIamPolicyCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer optionsRequestedPolicyVersion, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders/{managedFolder}/iam"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "managedFolder" + "}", localVarApiClient.escapeString(managedFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (optionsRequestedPolicyVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("optionsRequestedPolicyVersion", optionsRequestedPolicyVersion));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersGetIamPolicyValidateBeforeCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer optionsRequestedPolicyVersion, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersGetIamPolicy(Async)");
        }

        // verify the required parameter 'managedFolder' is set
        if (managedFolder == null) {
            throw new ApiException("Missing the required parameter 'managedFolder' when calling storageManagedFoldersGetIamPolicy(Async)");
        }

        return storageManagedFoldersGetIamPolicyCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, optionsRequestedPolicyVersion, userProject, _callback);

    }

    /**
     * 
     * Returns an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param optionsRequestedPolicyVersion The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn&#39;t support part of the requested IAM policy, the request fails. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Policy storageManagedFoldersGetIamPolicy(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer optionsRequestedPolicyVersion, String userProject) throws ApiException {
        ApiResponse<Policy> localVarResp = storageManagedFoldersGetIamPolicyWithHttpInfo(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, optionsRequestedPolicyVersion, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param optionsRequestedPolicyVersion The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn&#39;t support part of the requested IAM policy, the request fails. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policy> storageManagedFoldersGetIamPolicyWithHttpInfo(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer optionsRequestedPolicyVersion, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersGetIamPolicyValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, optionsRequestedPolicyVersion, userProject, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param optionsRequestedPolicyVersion The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn&#39;t support part of the requested IAM policy, the request fails. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersGetIamPolicyAsync(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer optionsRequestedPolicyVersion, String userProject, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersGetIamPolicyValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, optionsRequestedPolicyVersion, userProject, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersInsert
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param managedFolder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersInsertCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, ManagedFolder managedFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managedFolder;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersInsertValidateBeforeCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, ManagedFolder managedFolder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersInsert(Async)");
        }

        return storageManagedFoldersInsertCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, managedFolder, _callback);

    }

    /**
     * 
     * Creates a new managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param managedFolder  (optional)
     * @return ManagedFolder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ManagedFolder storageManagedFoldersInsert(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, ManagedFolder managedFolder) throws ApiException {
        ApiResponse<ManagedFolder> localVarResp = storageManagedFoldersInsertWithHttpInfo(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, managedFolder);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param managedFolder  (optional)
     * @return ApiResponse&lt;ManagedFolder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedFolder> storageManagedFoldersInsertWithHttpInfo(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, ManagedFolder managedFolder) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersInsertValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, managedFolder, null);
        Type localVarReturnType = new TypeToken<ManagedFolder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param managedFolder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersInsertAsync(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, ManagedFolder managedFolder, final ApiCallback<ManagedFolder> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersInsertValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, managedFolder, _callback);
        Type localVarReturnType = new TypeToken<ManagedFolder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersList
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix The managed folder name/path prefix to filter the output list of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersListCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer pageSize, String pageToken, String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersListValidateBeforeCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer pageSize, String pageToken, String prefix, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersList(Async)");
        }

        return storageManagedFoldersListCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken, prefix, _callback);

    }

    /**
     * 
     * Lists managed folders in the given bucket.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix The managed folder name/path prefix to filter the output list of results. (optional)
     * @return ManagedFolders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ManagedFolders storageManagedFoldersList(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer pageSize, String pageToken, String prefix) throws ApiException {
        ApiResponse<ManagedFolders> localVarResp = storageManagedFoldersListWithHttpInfo(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken, prefix);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists managed folders in the given bucket.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix The managed folder name/path prefix to filter the output list of results. (optional)
     * @return ApiResponse&lt;ManagedFolders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedFolders> storageManagedFoldersListWithHttpInfo(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer pageSize, String pageToken, String prefix) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersListValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken, prefix, null);
        Type localVarReturnType = new TypeToken<ManagedFolders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists managed folders in the given bucket.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix The managed folder name/path prefix to filter the output list of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersListAsync(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer pageSize, String pageToken, String prefix, final ApiCallback<ManagedFolders> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersListValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken, prefix, _callback);
        Type localVarReturnType = new TypeToken<ManagedFolders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersSetIamPolicy
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param policy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersSetIamPolicyCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, Policy policy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policy;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders/{managedFolder}/iam"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "managedFolder" + "}", localVarApiClient.escapeString(managedFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersSetIamPolicyValidateBeforeCall(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, Policy policy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersSetIamPolicy(Async)");
        }

        // verify the required parameter 'managedFolder' is set
        if (managedFolder == null) {
            throw new ApiException("Missing the required parameter 'managedFolder' when calling storageManagedFoldersSetIamPolicy(Async)");
        }

        return storageManagedFoldersSetIamPolicyCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, policy, _callback);

    }

    /**
     * 
     * Updates an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param policy  (optional)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Policy storageManagedFoldersSetIamPolicy(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, Policy policy) throws ApiException {
        ApiResponse<Policy> localVarResp = storageManagedFoldersSetIamPolicyWithHttpInfo(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, policy);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param policy  (optional)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policy> storageManagedFoldersSetIamPolicyWithHttpInfo(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, Policy policy) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersSetIamPolicyValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, policy, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an IAM policy for the specified managed folder.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param policy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersSetIamPolicyAsync(String bucket, String managedFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, Policy policy, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersSetIamPolicyValidateBeforeCall(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, policy, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageManagedFoldersTestIamPermissions
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param permissions Permissions to test. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersTestIamPermissionsCall(String bucket, String managedFolder, List<String> permissions, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/managedFolders/{managedFolder}/iam/testPermissions"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "managedFolder" + "}", localVarApiClient.escapeString(managedFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (permissions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "permissions", permissions));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageManagedFoldersTestIamPermissionsValidateBeforeCall(String bucket, String managedFolder, List<String> permissions, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageManagedFoldersTestIamPermissions(Async)");
        }

        // verify the required parameter 'managedFolder' is set
        if (managedFolder == null) {
            throw new ApiException("Missing the required parameter 'managedFolder' when calling storageManagedFoldersTestIamPermissions(Async)");
        }

        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling storageManagedFoldersTestIamPermissions(Async)");
        }

        return storageManagedFoldersTestIamPermissionsCall(bucket, managedFolder, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);

    }

    /**
     * 
     * Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param permissions Permissions to test. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return TestIamPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public TestIamPermissionsResponse storageManagedFoldersTestIamPermissions(String bucket, String managedFolder, List<String> permissions, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        ApiResponse<TestIamPermissionsResponse> localVarResp = storageManagedFoldersTestIamPermissionsWithHttpInfo(bucket, managedFolder, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param permissions Permissions to test. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ApiResponse&lt;TestIamPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestIamPermissionsResponse> storageManagedFoldersTestIamPermissionsWithHttpInfo(String bucket, String managedFolder, List<String> permissions, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageManagedFoldersTestIamPermissionsValidateBeforeCall(bucket, managedFolder, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, null);
        Type localVarReturnType = new TypeToken<TestIamPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
     * @param bucket Name of the bucket containing the managed folder. (required)
     * @param managedFolder The managed folder name/path. (required)
     * @param permissions Permissions to test. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageManagedFoldersTestIamPermissionsAsync(String bucket, String managedFolder, List<String> permissions, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback<TestIamPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageManagedFoldersTestIamPermissionsValidateBeforeCall(bucket, managedFolder, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);
        Type localVarReturnType = new TypeToken<TestIamPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
