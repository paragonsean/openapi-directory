/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bucket&#39;s retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketRetentionPolicy {
  public static final String SERIALIZED_NAME_EFFECTIVE_TIME = "effectiveTime";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_TIME)
  private OffsetDateTime effectiveTime;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "retentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private String retentionPeriod;

  public BucketRetentionPolicy() {
  }

  public BucketRetentionPolicy effectiveTime(OffsetDateTime effectiveTime) {
    this.effectiveTime = effectiveTime;
    return this;
  }

  /**
   * Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
   * @return effectiveTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveTime() {
    return effectiveTime;
  }

  public void setEffectiveTime(OffsetDateTime effectiveTime) {
    this.effectiveTime = effectiveTime;
  }


  public BucketRetentionPolicy isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Once locked, an object retention policy cannot be modified.
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public BucketRetentionPolicy retentionPeriod(String retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }

  /**
   * The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
   * @return retentionPeriod
   */
  @javax.annotation.Nullable
  public String getRetentionPeriod() {
    return retentionPeriod;
  }

  public void setRetentionPeriod(String retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketRetentionPolicy bucketRetentionPolicy = (BucketRetentionPolicy) o;
    return Objects.equals(this.effectiveTime, bucketRetentionPolicy.effectiveTime) &&
        Objects.equals(this.isLocked, bucketRetentionPolicy.isLocked) &&
        Objects.equals(this.retentionPeriod, bucketRetentionPolicy.retentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveTime, isLocked, retentionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketRetentionPolicy {\n");
    sb.append("    effectiveTime: ").append(toIndentedString(effectiveTime)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("effectiveTime");
    openapiFields.add("isLocked");
    openapiFields.add("retentionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketRetentionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketRetentionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketRetentionPolicy is not found in the empty JSON string", BucketRetentionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketRetentionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketRetentionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("retentionPeriod") != null && !jsonObj.get("retentionPeriod").isJsonNull()) && !jsonObj.get("retentionPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionPeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketRetentionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketRetentionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketRetentionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketRetentionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketRetentionPolicy>() {
           @Override
           public void write(JsonWriter out, BucketRetentionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketRetentionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketRetentionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketRetentionPolicy
   * @throws IOException if the JSON string is invalid with respect to BucketRetentionPolicy
   */
  public static BucketRetentionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketRetentionPolicy.class);
  }

  /**
   * Convert an instance of BucketRetentionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

