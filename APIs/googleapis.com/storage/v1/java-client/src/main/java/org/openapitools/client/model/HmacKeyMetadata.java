/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template to produce a JSON-style HMAC Key metadata resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HmacKeyMetadata {
  public static final String SERIALIZED_NAME_ACCESS_ID = "accessId";
  @SerializedName(SERIALIZED_NAME_ACCESS_ID)
  private String accessId;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "storage#hmacKeyMetadata";

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL = "serviceAccountEmail";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_EMAIL)
  private String serviceAccountEmail;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public HmacKeyMetadata() {
  }

  public HmacKeyMetadata accessId(String accessId) {
    this.accessId = accessId;
    return this;
  }

  /**
   * The ID of the HMAC Key.
   * @return accessId
   */
  @javax.annotation.Nullable
  public String getAccessId() {
    return accessId;
  }

  public void setAccessId(String accessId) {
    this.accessId = accessId;
  }


  public HmacKeyMetadata etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * HTTP 1.1 Entity tag for the HMAC key.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public HmacKeyMetadata id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the HMAC key, including the Project ID and the Access ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HmacKeyMetadata kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public HmacKeyMetadata projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID owning the service account to which the key authenticates.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public HmacKeyMetadata selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The link to this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public HmacKeyMetadata serviceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
    return this;
  }

  /**
   * The email address of the key&#39;s associated service account.
   * @return serviceAccountEmail
   */
  @javax.annotation.Nullable
  public String getServiceAccountEmail() {
    return serviceAccountEmail;
  }

  public void setServiceAccountEmail(String serviceAccountEmail) {
    this.serviceAccountEmail = serviceAccountEmail;
  }


  public HmacKeyMetadata state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public HmacKeyMetadata timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * The creation time of the HMAC key in RFC 3339 format.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }


  public HmacKeyMetadata updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The last modification time of the HMAC key metadata in RFC 3339 format.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HmacKeyMetadata hmacKeyMetadata = (HmacKeyMetadata) o;
    return Objects.equals(this.accessId, hmacKeyMetadata.accessId) &&
        Objects.equals(this.etag, hmacKeyMetadata.etag) &&
        Objects.equals(this.id, hmacKeyMetadata.id) &&
        Objects.equals(this.kind, hmacKeyMetadata.kind) &&
        Objects.equals(this.projectId, hmacKeyMetadata.projectId) &&
        Objects.equals(this.selfLink, hmacKeyMetadata.selfLink) &&
        Objects.equals(this.serviceAccountEmail, hmacKeyMetadata.serviceAccountEmail) &&
        Objects.equals(this.state, hmacKeyMetadata.state) &&
        Objects.equals(this.timeCreated, hmacKeyMetadata.timeCreated) &&
        Objects.equals(this.updated, hmacKeyMetadata.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessId, etag, id, kind, projectId, selfLink, serviceAccountEmail, state, timeCreated, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HmacKeyMetadata {\n");
    sb.append("    accessId: ").append(toIndentedString(accessId)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    serviceAccountEmail: ").append(toIndentedString(serviceAccountEmail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessId");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("projectId");
    openapiFields.add("selfLink");
    openapiFields.add("serviceAccountEmail");
    openapiFields.add("state");
    openapiFields.add("timeCreated");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HmacKeyMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HmacKeyMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HmacKeyMetadata is not found in the empty JSON string", HmacKeyMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HmacKeyMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HmacKeyMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessId") != null && !jsonObj.get("accessId").isJsonNull()) && !jsonObj.get("accessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessId").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("serviceAccountEmail") != null && !jsonObj.get("serviceAccountEmail").isJsonNull()) && !jsonObj.get("serviceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountEmail").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HmacKeyMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HmacKeyMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HmacKeyMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HmacKeyMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<HmacKeyMetadata>() {
           @Override
           public void write(JsonWriter out, HmacKeyMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HmacKeyMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HmacKeyMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HmacKeyMetadata
   * @throws IOException if the JSON string is invalid with respect to HmacKeyMetadata
   */
  public static HmacKeyMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HmacKeyMetadata.class);
  }

  /**
   * Convert an instance of HmacKeyMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

