/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BucketIamConfigurationBucketPolicyOnly;
import org.openapitools.client.model.BucketIamConfigurationUniformBucketLevelAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bucket&#39;s IAM configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketIamConfiguration {
  public static final String SERIALIZED_NAME_BUCKET_POLICY_ONLY = "bucketPolicyOnly";
  @SerializedName(SERIALIZED_NAME_BUCKET_POLICY_ONLY)
  private BucketIamConfigurationBucketPolicyOnly bucketPolicyOnly;

  public static final String SERIALIZED_NAME_PUBLIC_ACCESS_PREVENTION = "publicAccessPrevention";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ACCESS_PREVENTION)
  private String publicAccessPrevention;

  public static final String SERIALIZED_NAME_UNIFORM_BUCKET_LEVEL_ACCESS = "uniformBucketLevelAccess";
  @SerializedName(SERIALIZED_NAME_UNIFORM_BUCKET_LEVEL_ACCESS)
  private BucketIamConfigurationUniformBucketLevelAccess uniformBucketLevelAccess;

  public BucketIamConfiguration() {
  }

  public BucketIamConfiguration bucketPolicyOnly(BucketIamConfigurationBucketPolicyOnly bucketPolicyOnly) {
    this.bucketPolicyOnly = bucketPolicyOnly;
    return this;
  }

  /**
   * Get bucketPolicyOnly
   * @return bucketPolicyOnly
   */
  @javax.annotation.Nullable
  public BucketIamConfigurationBucketPolicyOnly getBucketPolicyOnly() {
    return bucketPolicyOnly;
  }

  public void setBucketPolicyOnly(BucketIamConfigurationBucketPolicyOnly bucketPolicyOnly) {
    this.bucketPolicyOnly = bucketPolicyOnly;
  }


  public BucketIamConfiguration publicAccessPrevention(String publicAccessPrevention) {
    this.publicAccessPrevention = publicAccessPrevention;
    return this;
  }

  /**
   * The bucket&#39;s Public Access Prevention configuration. Currently, &#39;inherited&#39; and &#39;enforced&#39; are supported.
   * @return publicAccessPrevention
   */
  @javax.annotation.Nullable
  public String getPublicAccessPrevention() {
    return publicAccessPrevention;
  }

  public void setPublicAccessPrevention(String publicAccessPrevention) {
    this.publicAccessPrevention = publicAccessPrevention;
  }


  public BucketIamConfiguration uniformBucketLevelAccess(BucketIamConfigurationUniformBucketLevelAccess uniformBucketLevelAccess) {
    this.uniformBucketLevelAccess = uniformBucketLevelAccess;
    return this;
  }

  /**
   * Get uniformBucketLevelAccess
   * @return uniformBucketLevelAccess
   */
  @javax.annotation.Nullable
  public BucketIamConfigurationUniformBucketLevelAccess getUniformBucketLevelAccess() {
    return uniformBucketLevelAccess;
  }

  public void setUniformBucketLevelAccess(BucketIamConfigurationUniformBucketLevelAccess uniformBucketLevelAccess) {
    this.uniformBucketLevelAccess = uniformBucketLevelAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketIamConfiguration bucketIamConfiguration = (BucketIamConfiguration) o;
    return Objects.equals(this.bucketPolicyOnly, bucketIamConfiguration.bucketPolicyOnly) &&
        Objects.equals(this.publicAccessPrevention, bucketIamConfiguration.publicAccessPrevention) &&
        Objects.equals(this.uniformBucketLevelAccess, bucketIamConfiguration.uniformBucketLevelAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketPolicyOnly, publicAccessPrevention, uniformBucketLevelAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketIamConfiguration {\n");
    sb.append("    bucketPolicyOnly: ").append(toIndentedString(bucketPolicyOnly)).append("\n");
    sb.append("    publicAccessPrevention: ").append(toIndentedString(publicAccessPrevention)).append("\n");
    sb.append("    uniformBucketLevelAccess: ").append(toIndentedString(uniformBucketLevelAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketPolicyOnly");
    openapiFields.add("publicAccessPrevention");
    openapiFields.add("uniformBucketLevelAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketIamConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketIamConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketIamConfiguration is not found in the empty JSON string", BucketIamConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketIamConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketIamConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketPolicyOnly`
      if (jsonObj.get("bucketPolicyOnly") != null && !jsonObj.get("bucketPolicyOnly").isJsonNull()) {
        BucketIamConfigurationBucketPolicyOnly.validateJsonElement(jsonObj.get("bucketPolicyOnly"));
      }
      if ((jsonObj.get("publicAccessPrevention") != null && !jsonObj.get("publicAccessPrevention").isJsonNull()) && !jsonObj.get("publicAccessPrevention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicAccessPrevention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicAccessPrevention").toString()));
      }
      // validate the optional field `uniformBucketLevelAccess`
      if (jsonObj.get("uniformBucketLevelAccess") != null && !jsonObj.get("uniformBucketLevelAccess").isJsonNull()) {
        BucketIamConfigurationUniformBucketLevelAccess.validateJsonElement(jsonObj.get("uniformBucketLevelAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketIamConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketIamConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketIamConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketIamConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketIamConfiguration>() {
           @Override
           public void write(JsonWriter out, BucketIamConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketIamConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketIamConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketIamConfiguration
   * @throws IOException if the JSON string is invalid with respect to BucketIamConfiguration
   */
  public static BucketIamConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketIamConfiguration.class);
  }

  /**
   * Convert an instance of BucketIamConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

