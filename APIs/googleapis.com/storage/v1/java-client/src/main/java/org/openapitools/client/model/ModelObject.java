/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ObjectAccessControl;
import org.openapitools.client.model.ObjectCustomerEncryption;
import org.openapitools.client.model.ObjectOwner;
import org.openapitools.client.model.ObjectRetention;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:17.242430-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelObject {
  public static final String SERIALIZED_NAME_ACL = "acl";
  @SerializedName(SERIALIZED_NAME_ACL)
  private List<ObjectAccessControl> acl = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_CACHE_CONTROL = "cacheControl";
  @SerializedName(SERIALIZED_NAME_CACHE_CONTROL)
  private String cacheControl;

  public static final String SERIALIZED_NAME_COMPONENT_COUNT = "componentCount";
  @SerializedName(SERIALIZED_NAME_COMPONENT_COUNT)
  private Integer componentCount;

  public static final String SERIALIZED_NAME_CONTENT_DISPOSITION = "contentDisposition";
  @SerializedName(SERIALIZED_NAME_CONTENT_DISPOSITION)
  private String contentDisposition;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "contentEncoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private String contentEncoding;

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE = "contentLanguage";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE)
  private String contentLanguage;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CRC32C = "crc32c";
  @SerializedName(SERIALIZED_NAME_CRC32C)
  private String crc32c;

  public static final String SERIALIZED_NAME_CUSTOM_TIME = "customTime";
  @SerializedName(SERIALIZED_NAME_CUSTOM_TIME)
  private OffsetDateTime customTime;

  public static final String SERIALIZED_NAME_CUSTOMER_ENCRYPTION = "customerEncryption";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ENCRYPTION)
  private ObjectCustomerEncryption customerEncryption;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EVENT_BASED_HOLD = "eventBasedHold";
  @SerializedName(SERIALIZED_NAME_EVENT_BASED_HOLD)
  private Boolean eventBasedHold;

  public static final String SERIALIZED_NAME_GENERATION = "generation";
  @SerializedName(SERIALIZED_NAME_GENERATION)
  private String generation;

  public static final String SERIALIZED_NAME_HARD_DELETE_TIME = "hardDeleteTime";
  @SerializedName(SERIALIZED_NAME_HARD_DELETE_TIME)
  private OffsetDateTime hardDeleteTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "storage#object";

  public static final String SERIALIZED_NAME_KMS_KEY_NAME = "kmsKeyName";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_NAME)
  private String kmsKeyName;

  public static final String SERIALIZED_NAME_MD5_HASH = "md5Hash";
  @SerializedName(SERIALIZED_NAME_MD5_HASH)
  private String md5Hash;

  public static final String SERIALIZED_NAME_MEDIA_LINK = "mediaLink";
  @SerializedName(SERIALIZED_NAME_MEDIA_LINK)
  private String mediaLink;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_METAGENERATION = "metageneration";
  @SerializedName(SERIALIZED_NAME_METAGENERATION)
  private String metageneration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private ObjectOwner owner;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private ObjectRetention retention;

  public static final String SERIALIZED_NAME_RETENTION_EXPIRATION_TIME = "retentionExpirationTime";
  @SerializedName(SERIALIZED_NAME_RETENTION_EXPIRATION_TIME)
  private OffsetDateTime retentionExpirationTime;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_SOFT_DELETE_TIME = "softDeleteTime";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETE_TIME)
  private OffsetDateTime softDeleteTime;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private String storageClass;

  public static final String SERIALIZED_NAME_TEMPORARY_HOLD = "temporaryHold";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_HOLD)
  private Boolean temporaryHold;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_TIME_DELETED = "timeDeleted";
  @SerializedName(SERIALIZED_NAME_TIME_DELETED)
  private OffsetDateTime timeDeleted;

  public static final String SERIALIZED_NAME_TIME_STORAGE_CLASS_UPDATED = "timeStorageClassUpdated";
  @SerializedName(SERIALIZED_NAME_TIME_STORAGE_CLASS_UPDATED)
  private OffsetDateTime timeStorageClassUpdated;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public ModelObject() {
  }

  public ModelObject acl(List<ObjectAccessControl> acl) {
    this.acl = acl;
    return this;
  }

  public ModelObject addAclItem(ObjectAccessControl aclItem) {
    if (this.acl == null) {
      this.acl = new ArrayList<>();
    }
    this.acl.add(aclItem);
    return this;
  }

  /**
   * Access controls on the object.
   * @return acl
   */
  @javax.annotation.Nullable
  public List<ObjectAccessControl> getAcl() {
    return acl;
  }

  public void setAcl(List<ObjectAccessControl> acl) {
    this.acl = acl;
  }


  public ModelObject bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * The name of the bucket containing this object.
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public ModelObject cacheControl(String cacheControl) {
    this.cacheControl = cacheControl;
    return this;
  }

  /**
   * Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age&#x3D;3600.
   * @return cacheControl
   */
  @javax.annotation.Nullable
  public String getCacheControl() {
    return cacheControl;
  }

  public void setCacheControl(String cacheControl) {
    this.cacheControl = cacheControl;
  }


  public ModelObject componentCount(Integer componentCount) {
    this.componentCount = componentCount;
    return this;
  }

  /**
   * Number of underlying components that make up this object. Components are accumulated by compose operations.
   * @return componentCount
   */
  @javax.annotation.Nullable
  public Integer getComponentCount() {
    return componentCount;
  }

  public void setComponentCount(Integer componentCount) {
    this.componentCount = componentCount;
  }


  public ModelObject contentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
    return this;
  }

  /**
   * Content-Disposition of the object data.
   * @return contentDisposition
   */
  @javax.annotation.Nullable
  public String getContentDisposition() {
    return contentDisposition;
  }

  public void setContentDisposition(String contentDisposition) {
    this.contentDisposition = contentDisposition;
  }


  public ModelObject contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

  /**
   * Content-Encoding of the object data.
   * @return contentEncoding
   */
  @javax.annotation.Nullable
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public ModelObject contentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * Content-Language of the object data.
   * @return contentLanguage
   */
  @javax.annotation.Nullable
  public String getContentLanguage() {
    return contentLanguage;
  }

  public void setContentLanguage(String contentLanguage) {
    this.contentLanguage = contentLanguage;
  }


  public ModelObject contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ModelObject crc32c(String crc32c) {
    this.crc32c = crc32c;
    return this;
  }

  /**
   * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
   * @return crc32c
   */
  @javax.annotation.Nullable
  public String getCrc32c() {
    return crc32c;
  }

  public void setCrc32c(String crc32c) {
    this.crc32c = crc32c;
  }


  public ModelObject customTime(OffsetDateTime customTime) {
    this.customTime = customTime;
    return this;
  }

  /**
   * A timestamp in RFC 3339 format specified by the user for an object.
   * @return customTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCustomTime() {
    return customTime;
  }

  public void setCustomTime(OffsetDateTime customTime) {
    this.customTime = customTime;
  }


  public ModelObject customerEncryption(ObjectCustomerEncryption customerEncryption) {
    this.customerEncryption = customerEncryption;
    return this;
  }

  /**
   * Get customerEncryption
   * @return customerEncryption
   */
  @javax.annotation.Nullable
  public ObjectCustomerEncryption getCustomerEncryption() {
    return customerEncryption;
  }

  public void setCustomerEncryption(ObjectCustomerEncryption customerEncryption) {
    this.customerEncryption = customerEncryption;
  }


  public ModelObject etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * HTTP 1.1 Entity tag for the object.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ModelObject eventBasedHold(Boolean eventBasedHold) {
    this.eventBasedHold = eventBasedHold;
    return this;
  }

  /**
   * Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold&#39;s release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
   * @return eventBasedHold
   */
  @javax.annotation.Nullable
  public Boolean getEventBasedHold() {
    return eventBasedHold;
  }

  public void setEventBasedHold(Boolean eventBasedHold) {
    this.eventBasedHold = eventBasedHold;
  }


  public ModelObject generation(String generation) {
    this.generation = generation;
    return this;
  }

  /**
   * The content generation of this object. Used for object versioning.
   * @return generation
   */
  @javax.annotation.Nullable
  public String getGeneration() {
    return generation;
  }

  public void setGeneration(String generation) {
    this.generation = generation;
  }


  public ModelObject hardDeleteTime(OffsetDateTime hardDeleteTime) {
    this.hardDeleteTime = hardDeleteTime;
    return this;
  }

  /**
   * This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.
   * @return hardDeleteTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHardDeleteTime() {
    return hardDeleteTime;
  }

  public void setHardDeleteTime(OffsetDateTime hardDeleteTime) {
    this.hardDeleteTime = hardDeleteTime;
  }


  public ModelObject id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the object, including the bucket name, object name, and generation number.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ModelObject kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of item this is. For objects, this is always storage#object.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ModelObject kmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
   * @return kmsKeyName
   */
  @javax.annotation.Nullable
  public String getKmsKeyName() {
    return kmsKeyName;
  }

  public void setKmsKeyName(String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
  }


  public ModelObject md5Hash(String md5Hash) {
    this.md5Hash = md5Hash;
    return this;
  }

  /**
   * MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
   * @return md5Hash
   */
  @javax.annotation.Nullable
  public String getMd5Hash() {
    return md5Hash;
  }

  public void setMd5Hash(String md5Hash) {
    this.md5Hash = md5Hash;
  }


  public ModelObject mediaLink(String mediaLink) {
    this.mediaLink = mediaLink;
    return this;
  }

  /**
   * Media download link.
   * @return mediaLink
   */
  @javax.annotation.Nullable
  public String getMediaLink() {
    return mediaLink;
  }

  public void setMediaLink(String mediaLink) {
    this.mediaLink = mediaLink;
  }


  public ModelObject metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ModelObject putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * User-provided metadata, in key/value pairs.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ModelObject metageneration(String metageneration) {
    this.metageneration = metageneration;
    return this;
  }

  /**
   * The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
   * @return metageneration
   */
  @javax.annotation.Nullable
  public String getMetageneration() {
    return metageneration;
  }

  public void setMetageneration(String metageneration) {
    this.metageneration = metageneration;
  }


  public ModelObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the object. Required if not specified by URL parameter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ModelObject owner(ObjectOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public ObjectOwner getOwner() {
    return owner;
  }

  public void setOwner(ObjectOwner owner) {
    this.owner = owner;
  }


  public ModelObject retention(ObjectRetention retention) {
    this.retention = retention;
    return this;
  }

  /**
   * Get retention
   * @return retention
   */
  @javax.annotation.Nullable
  public ObjectRetention getRetention() {
    return retention;
  }

  public void setRetention(ObjectRetention retention) {
    this.retention = retention;
  }


  public ModelObject retentionExpirationTime(OffsetDateTime retentionExpirationTime) {
    this.retentionExpirationTime = retentionExpirationTime;
    return this;
  }

  /**
   * A server-determined value that specifies the earliest time that the object&#39;s retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
   * @return retentionExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetentionExpirationTime() {
    return retentionExpirationTime;
  }

  public void setRetentionExpirationTime(OffsetDateTime retentionExpirationTime) {
    this.retentionExpirationTime = retentionExpirationTime;
  }


  public ModelObject selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The link to this object.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public ModelObject size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Content-Length of the data in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public ModelObject softDeleteTime(OffsetDateTime softDeleteTime) {
    this.softDeleteTime = softDeleteTime;
    return this;
  }

  /**
   * The time at which the object became soft-deleted in RFC 3339 format.
   * @return softDeleteTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSoftDeleteTime() {
    return softDeleteTime;
  }

  public void setSoftDeleteTime(OffsetDateTime softDeleteTime) {
    this.softDeleteTime = softDeleteTime;
  }


  public ModelObject storageClass(String storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * Storage class of the object.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public String getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(String storageClass) {
    this.storageClass = storageClass;
  }


  public ModelObject temporaryHold(Boolean temporaryHold) {
    this.temporaryHold = temporaryHold;
    return this;
  }

  /**
   * Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
   * @return temporaryHold
   */
  @javax.annotation.Nullable
  public Boolean getTemporaryHold() {
    return temporaryHold;
  }

  public void setTemporaryHold(Boolean temporaryHold) {
    this.temporaryHold = temporaryHold;
  }


  public ModelObject timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * The creation time of the object in RFC 3339 format.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }


  public ModelObject timeDeleted(OffsetDateTime timeDeleted) {
    this.timeDeleted = timeDeleted;
    return this;
  }

  /**
   * The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
   * @return timeDeleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeDeleted() {
    return timeDeleted;
  }

  public void setTimeDeleted(OffsetDateTime timeDeleted) {
    this.timeDeleted = timeDeleted;
  }


  public ModelObject timeStorageClassUpdated(OffsetDateTime timeStorageClassUpdated) {
    this.timeStorageClassUpdated = timeStorageClassUpdated;
    return this;
  }

  /**
   * The time at which the object&#39;s storage class was last changed. When the object is initially created, it will be set to timeCreated.
   * @return timeStorageClassUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeStorageClassUpdated() {
    return timeStorageClassUpdated;
  }

  public void setTimeStorageClassUpdated(OffsetDateTime timeStorageClassUpdated) {
    this.timeStorageClassUpdated = timeStorageClassUpdated;
  }


  public ModelObject updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelObject _object = (ModelObject) o;
    return Objects.equals(this.acl, _object.acl) &&
        Objects.equals(this.bucket, _object.bucket) &&
        Objects.equals(this.cacheControl, _object.cacheControl) &&
        Objects.equals(this.componentCount, _object.componentCount) &&
        Objects.equals(this.contentDisposition, _object.contentDisposition) &&
        Objects.equals(this.contentEncoding, _object.contentEncoding) &&
        Objects.equals(this.contentLanguage, _object.contentLanguage) &&
        Objects.equals(this.contentType, _object.contentType) &&
        Objects.equals(this.crc32c, _object.crc32c) &&
        Objects.equals(this.customTime, _object.customTime) &&
        Objects.equals(this.customerEncryption, _object.customerEncryption) &&
        Objects.equals(this.etag, _object.etag) &&
        Objects.equals(this.eventBasedHold, _object.eventBasedHold) &&
        Objects.equals(this.generation, _object.generation) &&
        Objects.equals(this.hardDeleteTime, _object.hardDeleteTime) &&
        Objects.equals(this.id, _object.id) &&
        Objects.equals(this.kind, _object.kind) &&
        Objects.equals(this.kmsKeyName, _object.kmsKeyName) &&
        Objects.equals(this.md5Hash, _object.md5Hash) &&
        Objects.equals(this.mediaLink, _object.mediaLink) &&
        Objects.equals(this.metadata, _object.metadata) &&
        Objects.equals(this.metageneration, _object.metageneration) &&
        Objects.equals(this.name, _object.name) &&
        Objects.equals(this.owner, _object.owner) &&
        Objects.equals(this.retention, _object.retention) &&
        Objects.equals(this.retentionExpirationTime, _object.retentionExpirationTime) &&
        Objects.equals(this.selfLink, _object.selfLink) &&
        Objects.equals(this.size, _object.size) &&
        Objects.equals(this.softDeleteTime, _object.softDeleteTime) &&
        Objects.equals(this.storageClass, _object.storageClass) &&
        Objects.equals(this.temporaryHold, _object.temporaryHold) &&
        Objects.equals(this.timeCreated, _object.timeCreated) &&
        Objects.equals(this.timeDeleted, _object.timeDeleted) &&
        Objects.equals(this.timeStorageClassUpdated, _object.timeStorageClassUpdated) &&
        Objects.equals(this.updated, _object.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acl, bucket, cacheControl, componentCount, contentDisposition, contentEncoding, contentLanguage, contentType, crc32c, customTime, customerEncryption, etag, eventBasedHold, generation, hardDeleteTime, id, kind, kmsKeyName, md5Hash, mediaLink, metadata, metageneration, name, owner, retention, retentionExpirationTime, selfLink, size, softDeleteTime, storageClass, temporaryHold, timeCreated, timeDeleted, timeStorageClassUpdated, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelObject {\n");
    sb.append("    acl: ").append(toIndentedString(acl)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    cacheControl: ").append(toIndentedString(cacheControl)).append("\n");
    sb.append("    componentCount: ").append(toIndentedString(componentCount)).append("\n");
    sb.append("    contentDisposition: ").append(toIndentedString(contentDisposition)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    contentLanguage: ").append(toIndentedString(contentLanguage)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    crc32c: ").append(toIndentedString(crc32c)).append("\n");
    sb.append("    customTime: ").append(toIndentedString(customTime)).append("\n");
    sb.append("    customerEncryption: ").append(toIndentedString(customerEncryption)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    eventBasedHold: ").append(toIndentedString(eventBasedHold)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    hardDeleteTime: ").append(toIndentedString(hardDeleteTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    kmsKeyName: ").append(toIndentedString(kmsKeyName)).append("\n");
    sb.append("    md5Hash: ").append(toIndentedString(md5Hash)).append("\n");
    sb.append("    mediaLink: ").append(toIndentedString(mediaLink)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metageneration: ").append(toIndentedString(metageneration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    retentionExpirationTime: ").append(toIndentedString(retentionExpirationTime)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    softDeleteTime: ").append(toIndentedString(softDeleteTime)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    temporaryHold: ").append(toIndentedString(temporaryHold)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeDeleted: ").append(toIndentedString(timeDeleted)).append("\n");
    sb.append("    timeStorageClassUpdated: ").append(toIndentedString(timeStorageClassUpdated)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acl");
    openapiFields.add("bucket");
    openapiFields.add("cacheControl");
    openapiFields.add("componentCount");
    openapiFields.add("contentDisposition");
    openapiFields.add("contentEncoding");
    openapiFields.add("contentLanguage");
    openapiFields.add("contentType");
    openapiFields.add("crc32c");
    openapiFields.add("customTime");
    openapiFields.add("customerEncryption");
    openapiFields.add("etag");
    openapiFields.add("eventBasedHold");
    openapiFields.add("generation");
    openapiFields.add("hardDeleteTime");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("kmsKeyName");
    openapiFields.add("md5Hash");
    openapiFields.add("mediaLink");
    openapiFields.add("metadata");
    openapiFields.add("metageneration");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("retention");
    openapiFields.add("retentionExpirationTime");
    openapiFields.add("selfLink");
    openapiFields.add("size");
    openapiFields.add("softDeleteTime");
    openapiFields.add("storageClass");
    openapiFields.add("temporaryHold");
    openapiFields.add("timeCreated");
    openapiFields.add("timeDeleted");
    openapiFields.add("timeStorageClassUpdated");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelObject is not found in the empty JSON string", ModelObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acl") != null && !jsonObj.get("acl").isJsonNull()) {
        JsonArray jsonArrayacl = jsonObj.getAsJsonArray("acl");
        if (jsonArrayacl != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acl").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acl` to be an array in the JSON string but got `%s`", jsonObj.get("acl").toString()));
          }

          // validate the optional field `acl` (array)
          for (int i = 0; i < jsonArrayacl.size(); i++) {
            ObjectAccessControl.validateJsonElement(jsonArrayacl.get(i));
          };
        }
      }
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("cacheControl") != null && !jsonObj.get("cacheControl").isJsonNull()) && !jsonObj.get("cacheControl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cacheControl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cacheControl").toString()));
      }
      if ((jsonObj.get("contentDisposition") != null && !jsonObj.get("contentDisposition").isJsonNull()) && !jsonObj.get("contentDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentDisposition").toString()));
      }
      if ((jsonObj.get("contentEncoding") != null && !jsonObj.get("contentEncoding").isJsonNull()) && !jsonObj.get("contentEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentEncoding").toString()));
      }
      if ((jsonObj.get("contentLanguage") != null && !jsonObj.get("contentLanguage").isJsonNull()) && !jsonObj.get("contentLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentLanguage").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("crc32c") != null && !jsonObj.get("crc32c").isJsonNull()) && !jsonObj.get("crc32c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crc32c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crc32c").toString()));
      }
      // validate the optional field `customerEncryption`
      if (jsonObj.get("customerEncryption") != null && !jsonObj.get("customerEncryption").isJsonNull()) {
        ObjectCustomerEncryption.validateJsonElement(jsonObj.get("customerEncryption"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("generation") != null && !jsonObj.get("generation").isJsonNull()) && !jsonObj.get("generation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generation").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("kmsKeyName") != null && !jsonObj.get("kmsKeyName").isJsonNull()) && !jsonObj.get("kmsKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyName").toString()));
      }
      if ((jsonObj.get("md5Hash") != null && !jsonObj.get("md5Hash").isJsonNull()) && !jsonObj.get("md5Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5Hash").toString()));
      }
      if ((jsonObj.get("mediaLink") != null && !jsonObj.get("mediaLink").isJsonNull()) && !jsonObj.get("mediaLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaLink").toString()));
      }
      if ((jsonObj.get("metageneration") != null && !jsonObj.get("metageneration").isJsonNull()) && !jsonObj.get("metageneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metageneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metageneration").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        ObjectOwner.validateJsonElement(jsonObj.get("owner"));
      }
      // validate the optional field `retention`
      if (jsonObj.get("retention") != null && !jsonObj.get("retention").isJsonNull()) {
        ObjectRetention.validateJsonElement(jsonObj.get("retention"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) && !jsonObj.get("storageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClass").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelObject>() {
           @Override
           public void write(JsonWriter out, ModelObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelObject
   * @throws IOException if the JSON string is invalid with respect to ModelObject
   */
  public static ModelObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelObject.class);
  }

  /**
   * Convert an instance of ModelObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

