/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HmacKey;
import org.openapitools.client.model.HmacKeyMetadata;
import org.openapitools.client.model.HmacKeysMetadata;
import org.openapitools.client.model.ServiceAccount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageProjectsHmacKeysCreate
     * @param projectId Project ID owning the service account. (required)
     * @param serviceAccountEmail Email address of the service account. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysCreateCall(String projectId, String serviceAccountEmail, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/hmacKeys"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (serviceAccountEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceAccountEmail", serviceAccountEmail));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsHmacKeysCreateValidateBeforeCall(String projectId, String serviceAccountEmail, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysCreate(Async)");
        }

        // verify the required parameter 'serviceAccountEmail' is set
        if (serviceAccountEmail == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountEmail' when calling storageProjectsHmacKeysCreate(Async)");
        }

        return storageProjectsHmacKeysCreateCall(projectId, serviceAccountEmail, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);

    }

    /**
     * 
     * Creates a new HMAC key for the specified service account.
     * @param projectId Project ID owning the service account. (required)
     * @param serviceAccountEmail Email address of the service account. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return HmacKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public HmacKey storageProjectsHmacKeysCreate(String projectId, String serviceAccountEmail, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        ApiResponse<HmacKey> localVarResp = storageProjectsHmacKeysCreateWithHttpInfo(projectId, serviceAccountEmail, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new HMAC key for the specified service account.
     * @param projectId Project ID owning the service account. (required)
     * @param serviceAccountEmail Email address of the service account. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ApiResponse&lt;HmacKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmacKey> storageProjectsHmacKeysCreateWithHttpInfo(String projectId, String serviceAccountEmail, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsHmacKeysCreateValidateBeforeCall(projectId, serviceAccountEmail, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, null);
        Type localVarReturnType = new TypeToken<HmacKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new HMAC key for the specified service account.
     * @param projectId Project ID owning the service account. (required)
     * @param serviceAccountEmail Email address of the service account. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysCreateAsync(String projectId, String serviceAccountEmail, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback<HmacKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsHmacKeysCreateValidateBeforeCall(projectId, serviceAccountEmail, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);
        Type localVarReturnType = new TypeToken<HmacKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageProjectsHmacKeysDelete
     * @param projectId Project ID owning the requested key (required)
     * @param accessId Name of the HMAC key to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysDeleteCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/hmacKeys/{accessId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "accessId" + "}", localVarApiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsHmacKeysDeleteValidateBeforeCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysDelete(Async)");
        }

        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysDelete(Async)");
        }

        return storageProjectsHmacKeysDeleteCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);

    }

    /**
     * 
     * Deletes an HMAC key.
     * @param projectId Project ID owning the requested key (required)
     * @param accessId Name of the HMAC key to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void storageProjectsHmacKeysDelete(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        storageProjectsHmacKeysDeleteWithHttpInfo(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
    }

    /**
     * 
     * Deletes an HMAC key.
     * @param projectId Project ID owning the requested key (required)
     * @param accessId Name of the HMAC key to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageProjectsHmacKeysDeleteWithHttpInfo(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsHmacKeysDeleteValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an HMAC key.
     * @param projectId Project ID owning the requested key (required)
     * @param accessId Name of the HMAC key to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysDeleteAsync(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsHmacKeysDeleteValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageProjectsHmacKeysGet
     * @param projectId Project ID owning the service account of the requested key. (required)
     * @param accessId Name of the HMAC key. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysGetCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/hmacKeys/{accessId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "accessId" + "}", localVarApiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsHmacKeysGetValidateBeforeCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysGet(Async)");
        }

        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysGet(Async)");
        }

        return storageProjectsHmacKeysGetCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);

    }

    /**
     * 
     * Retrieves an HMAC key&#39;s metadata
     * @param projectId Project ID owning the service account of the requested key. (required)
     * @param accessId Name of the HMAC key. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return HmacKeyMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public HmacKeyMetadata storageProjectsHmacKeysGet(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        ApiResponse<HmacKeyMetadata> localVarResp = storageProjectsHmacKeysGetWithHttpInfo(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves an HMAC key&#39;s metadata
     * @param projectId Project ID owning the service account of the requested key. (required)
     * @param accessId Name of the HMAC key. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ApiResponse&lt;HmacKeyMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmacKeyMetadata> storageProjectsHmacKeysGetWithHttpInfo(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsHmacKeysGetValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, null);
        Type localVarReturnType = new TypeToken<HmacKeyMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves an HMAC key&#39;s metadata
     * @param projectId Project ID owning the service account of the requested key. (required)
     * @param accessId Name of the HMAC key. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysGetAsync(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback<HmacKeyMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsHmacKeysGetValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);
        Type localVarReturnType = new TypeToken<HmacKeyMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageProjectsHmacKeysList
     * @param projectId Name of the project in which to look for HMAC keys. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param serviceAccountEmail If present, only keys for the given service account are returned. (optional)
     * @param showDeletedKeys Whether or not to show keys in the DELETED state. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysListCall(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer maxResults, String pageToken, String serviceAccountEmail, Boolean showDeletedKeys, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/hmacKeys"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (serviceAccountEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceAccountEmail", serviceAccountEmail));
        }

        if (showDeletedKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showDeletedKeys", showDeletedKeys));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsHmacKeysListValidateBeforeCall(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer maxResults, String pageToken, String serviceAccountEmail, Boolean showDeletedKeys, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysList(Async)");
        }

        return storageProjectsHmacKeysListCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, maxResults, pageToken, serviceAccountEmail, showDeletedKeys, userProject, _callback);

    }

    /**
     * 
     * Retrieves a list of HMAC keys matching the criteria.
     * @param projectId Name of the project in which to look for HMAC keys. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param serviceAccountEmail If present, only keys for the given service account are returned. (optional)
     * @param showDeletedKeys Whether or not to show keys in the DELETED state. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return HmacKeysMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public HmacKeysMetadata storageProjectsHmacKeysList(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer maxResults, String pageToken, String serviceAccountEmail, Boolean showDeletedKeys, String userProject) throws ApiException {
        ApiResponse<HmacKeysMetadata> localVarResp = storageProjectsHmacKeysListWithHttpInfo(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, maxResults, pageToken, serviceAccountEmail, showDeletedKeys, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of HMAC keys matching the criteria.
     * @param projectId Name of the project in which to look for HMAC keys. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param serviceAccountEmail If present, only keys for the given service account are returned. (optional)
     * @param showDeletedKeys Whether or not to show keys in the DELETED state. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ApiResponse&lt;HmacKeysMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmacKeysMetadata> storageProjectsHmacKeysListWithHttpInfo(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer maxResults, String pageToken, String serviceAccountEmail, Boolean showDeletedKeys, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsHmacKeysListValidateBeforeCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, maxResults, pageToken, serviceAccountEmail, showDeletedKeys, userProject, null);
        Type localVarReturnType = new TypeToken<HmacKeysMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of HMAC keys matching the criteria.
     * @param projectId Name of the project in which to look for HMAC keys. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param serviceAccountEmail If present, only keys for the given service account are returned. (optional)
     * @param showDeletedKeys Whether or not to show keys in the DELETED state. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysListAsync(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Integer maxResults, String pageToken, String serviceAccountEmail, Boolean showDeletedKeys, String userProject, final ApiCallback<HmacKeysMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsHmacKeysListValidateBeforeCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, maxResults, pageToken, serviceAccountEmail, showDeletedKeys, userProject, _callback);
        Type localVarReturnType = new TypeToken<HmacKeysMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageProjectsHmacKeysUpdate
     * @param projectId Project ID owning the service account of the updated key. (required)
     * @param accessId Name of the HMAC key being updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param hmacKeyMetadata  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysUpdateCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, HmacKeyMetadata hmacKeyMetadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hmacKeyMetadata;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/hmacKeys/{accessId}"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "accessId" + "}", localVarApiClient.escapeString(accessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsHmacKeysUpdateValidateBeforeCall(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, HmacKeyMetadata hmacKeyMetadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsHmacKeysUpdate(Async)");
        }

        // verify the required parameter 'accessId' is set
        if (accessId == null) {
            throw new ApiException("Missing the required parameter 'accessId' when calling storageProjectsHmacKeysUpdate(Async)");
        }

        return storageProjectsHmacKeysUpdateCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, hmacKeyMetadata, _callback);

    }

    /**
     * 
     * Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
     * @param projectId Project ID owning the service account of the updated key. (required)
     * @param accessId Name of the HMAC key being updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param hmacKeyMetadata  (optional)
     * @return HmacKeyMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public HmacKeyMetadata storageProjectsHmacKeysUpdate(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, HmacKeyMetadata hmacKeyMetadata) throws ApiException {
        ApiResponse<HmacKeyMetadata> localVarResp = storageProjectsHmacKeysUpdateWithHttpInfo(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, hmacKeyMetadata);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
     * @param projectId Project ID owning the service account of the updated key. (required)
     * @param accessId Name of the HMAC key being updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param hmacKeyMetadata  (optional)
     * @return ApiResponse&lt;HmacKeyMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HmacKeyMetadata> storageProjectsHmacKeysUpdateWithHttpInfo(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, HmacKeyMetadata hmacKeyMetadata) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsHmacKeysUpdateValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, hmacKeyMetadata, null);
        Type localVarReturnType = new TypeToken<HmacKeyMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
     * @param projectId Project ID owning the service account of the updated key. (required)
     * @param accessId Name of the HMAC key being updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param hmacKeyMetadata  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsHmacKeysUpdateAsync(String projectId, String accessId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, HmacKeyMetadata hmacKeyMetadata, final ApiCallback<HmacKeyMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsHmacKeysUpdateValidateBeforeCall(projectId, accessId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, hmacKeyMetadata, _callback);
        Type localVarReturnType = new TypeToken<HmacKeyMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageProjectsServiceAccountGet
     * @param projectId Project ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsServiceAccountGetCall(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{projectId}/serviceAccount"
            .replace("{" + "projectId" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageProjectsServiceAccountGetValidateBeforeCall(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling storageProjectsServiceAccountGet(Async)");
        }

        return storageProjectsServiceAccountGetCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);

    }

    /**
     * 
     * Get the email address of this project&#39;s Google Cloud Storage service account.
     * @param projectId Project ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAccount storageProjectsServiceAccountGet(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        ApiResponse<ServiceAccount> localVarResp = storageProjectsServiceAccountGetWithHttpInfo(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the email address of this project&#39;s Google Cloud Storage service account.
     * @param projectId Project ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @return ApiResponse&lt;ServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAccount> storageProjectsServiceAccountGetWithHttpInfo(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageProjectsServiceAccountGetValidateBeforeCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, null);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the email address of this project&#39;s Google Cloud Storage service account.
     * @param projectId Project ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param userProject The project to be billed for this request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageProjectsServiceAccountGetAsync(String projectId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String userProject, final ApiCallback<ServiceAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageProjectsServiceAccountGetValidateBeforeCall(projectId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
