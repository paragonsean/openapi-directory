/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Folder;
import org.openapitools.client.model.Folders;
import org.openapitools.client.model.GoogleLongrunningOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageFoldersDelete
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the folder if its metageneration does not match this value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersDeleteCall(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/folders/{folder}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ifMetagenerationMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationMatch", ifMetagenerationMatch));
        }

        if (ifMetagenerationNotMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationNotMatch", ifMetagenerationNotMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageFoldersDeleteValidateBeforeCall(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageFoldersDelete(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling storageFoldersDelete(Async)");
        }

        return storageFoldersDeleteCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);

    }

    /**
     * 
     * Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the folder if its metageneration does not match this value. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void storageFoldersDelete(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        storageFoldersDeleteWithHttpInfo(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
    }

    /**
     * 
     * Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the folder if its metageneration does not match this value. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageFoldersDeleteWithHttpInfo(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        okhttp3.Call localVarCall = storageFoldersDeleteValidateBeforeCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch If set, only deletes the folder if its metageneration matches this value. (optional)
     * @param ifMetagenerationNotMatch If set, only deletes the folder if its metageneration does not match this value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersDeleteAsync(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageFoldersDeleteValidateBeforeCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageFoldersGet
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration does not match the given value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersGetCall(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/folders/{folder}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ifMetagenerationMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationMatch", ifMetagenerationMatch));
        }

        if (ifMetagenerationNotMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifMetagenerationNotMatch", ifMetagenerationNotMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageFoldersGetValidateBeforeCall(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageFoldersGet(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling storageFoldersGet(Async)");
        }

        return storageFoldersGetCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);

    }

    /**
     * 
     * Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration does not match the given value. (optional)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Folder storageFoldersGet(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        ApiResponse<Folder> localVarResp = storageFoldersGetWithHttpInfo(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration does not match the given value. (optional)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> storageFoldersGetWithHttpInfo(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch) throws ApiException {
        okhttp3.Call localVarCall = storageFoldersGetValidateBeforeCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param folder Name of a folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifMetagenerationMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration matches the given value. (optional)
     * @param ifMetagenerationNotMatch Makes the return of the folder metadata conditional on whether the folder&#39;s current metageneration does not match the given value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersGetAsync(String bucket, String folder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifMetagenerationMatch, String ifMetagenerationNotMatch, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageFoldersGetValidateBeforeCall(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageFoldersInsert
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param recursive If true, any parent folder which doesn’t exist will be created automatically. (optional)
     * @param folder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersInsertCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Boolean recursive, Folder folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = folder;

        // create path and map variables
        String localVarPath = "/b/{bucket}/folders"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageFoldersInsertValidateBeforeCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Boolean recursive, Folder folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageFoldersInsert(Async)");
        }

        return storageFoldersInsertCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, recursive, folder, _callback);

    }

    /**
     * 
     * Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param recursive If true, any parent folder which doesn’t exist will be created automatically. (optional)
     * @param folder  (optional)
     * @return Folder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Folder storageFoldersInsert(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Boolean recursive, Folder folder) throws ApiException {
        ApiResponse<Folder> localVarResp = storageFoldersInsertWithHttpInfo(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, recursive, folder);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param recursive If true, any parent folder which doesn’t exist will be created automatically. (optional)
     * @param folder  (optional)
     * @return ApiResponse&lt;Folder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folder> storageFoldersInsertWithHttpInfo(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Boolean recursive, Folder folder) throws ApiException {
        okhttp3.Call localVarCall = storageFoldersInsertValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, recursive, folder, null);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folder resides. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param recursive If true, any parent folder which doesn’t exist will be created automatically. (optional)
     * @param folder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersInsertAsync(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, Boolean recursive, Folder folder, final ApiCallback<Folder> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageFoldersInsertValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, recursive, folder, _callback);
        Type localVarReturnType = new TypeToken<Folder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageFoldersList
     * @param bucket Name of the bucket in which to look for folders. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param delimiter Returns results in a directory-like mode. The only supported value is &#39;/&#39;. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix. (optional)
     * @param endOffset Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a &#39;/&#39;. (optional)
     * @param startOffset Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersListCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String delimiter, String endOffset, Integer pageSize, String pageToken, String prefix, String startOffset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/folders"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (endOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endOffset", endOffset));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageToken", pageToken));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (startOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startOffset", startOffset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageFoldersListValidateBeforeCall(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String delimiter, String endOffset, Integer pageSize, String pageToken, String prefix, String startOffset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageFoldersList(Async)");
        }

        return storageFoldersListCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, pageSize, pageToken, prefix, startOffset, _callback);

    }

    /**
     * 
     * Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which to look for folders. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param delimiter Returns results in a directory-like mode. The only supported value is &#39;/&#39;. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix. (optional)
     * @param endOffset Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a &#39;/&#39;. (optional)
     * @param startOffset Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @return Folders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Folders storageFoldersList(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String delimiter, String endOffset, Integer pageSize, String pageToken, String prefix, String startOffset) throws ApiException {
        ApiResponse<Folders> localVarResp = storageFoldersListWithHttpInfo(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, pageSize, pageToken, prefix, startOffset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which to look for folders. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param delimiter Returns results in a directory-like mode. The only supported value is &#39;/&#39;. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix. (optional)
     * @param endOffset Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a &#39;/&#39;. (optional)
     * @param startOffset Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @return ApiResponse&lt;Folders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Folders> storageFoldersListWithHttpInfo(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String delimiter, String endOffset, Integer pageSize, String pageToken, String prefix, String startOffset) throws ApiException {
        okhttp3.Call localVarCall = storageFoldersListValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, pageSize, pageToken, prefix, startOffset, null);
        Type localVarReturnType = new TypeToken<Folders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which to look for folders. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param delimiter Returns results in a directory-like mode. The only supported value is &#39;/&#39;. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix. (optional)
     * @param endOffset Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param pageSize Maximum number of items to return in a single page of responses. (optional)
     * @param pageToken A previously-returned page token representing part of the larger set of results to view. (optional)
     * @param prefix Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a &#39;/&#39;. (optional)
     * @param startOffset Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersListAsync(String bucket, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String delimiter, String endOffset, Integer pageSize, String pageToken, String prefix, String startOffset, final ApiCallback<Folders> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageFoldersListValidateBeforeCall(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, pageSize, pageToken, prefix, startOffset, _callback);
        Type localVarReturnType = new TypeToken<Folders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageFoldersRename
     * @param bucket Name of the bucket in which the folders are in. (required)
     * @param sourceFolder Name of the source folder. (required)
     * @param destinationFolder Name of the destination folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifSourceMetagenerationMatch Makes the operation conditional on whether the source object&#39;s current metageneration matches the given value. (optional)
     * @param ifSourceMetagenerationNotMatch Makes the operation conditional on whether the source object&#39;s current metageneration does not match the given value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersRenameCall(String bucket, String sourceFolder, String destinationFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifSourceMetagenerationMatch, String ifSourceMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/folders/{sourceFolder}/renameTo/folders/{destinationFolder}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "sourceFolder" + "}", localVarApiClient.escapeString(sourceFolder.toString()))
            .replace("{" + "destinationFolder" + "}", localVarApiClient.escapeString(destinationFolder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ifSourceMetagenerationMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifSourceMetagenerationMatch", ifSourceMetagenerationMatch));
        }

        if (ifSourceMetagenerationNotMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ifSourceMetagenerationNotMatch", ifSourceMetagenerationNotMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageFoldersRenameValidateBeforeCall(String bucket, String sourceFolder, String destinationFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifSourceMetagenerationMatch, String ifSourceMetagenerationNotMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageFoldersRename(Async)");
        }

        // verify the required parameter 'sourceFolder' is set
        if (sourceFolder == null) {
            throw new ApiException("Missing the required parameter 'sourceFolder' when calling storageFoldersRename(Async)");
        }

        // verify the required parameter 'destinationFolder' is set
        if (destinationFolder == null) {
            throw new ApiException("Missing the required parameter 'destinationFolder' when calling storageFoldersRename(Async)");
        }

        return storageFoldersRenameCall(bucket, sourceFolder, destinationFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch, _callback);

    }

    /**
     * 
     * Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folders are in. (required)
     * @param sourceFolder Name of the source folder. (required)
     * @param destinationFolder Name of the destination folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifSourceMetagenerationMatch Makes the operation conditional on whether the source object&#39;s current metageneration matches the given value. (optional)
     * @param ifSourceMetagenerationNotMatch Makes the operation conditional on whether the source object&#39;s current metageneration does not match the given value. (optional)
     * @return GoogleLongrunningOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GoogleLongrunningOperation storageFoldersRename(String bucket, String sourceFolder, String destinationFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifSourceMetagenerationMatch, String ifSourceMetagenerationNotMatch) throws ApiException {
        ApiResponse<GoogleLongrunningOperation> localVarResp = storageFoldersRenameWithHttpInfo(bucket, sourceFolder, destinationFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folders are in. (required)
     * @param sourceFolder Name of the source folder. (required)
     * @param destinationFolder Name of the destination folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifSourceMetagenerationMatch Makes the operation conditional on whether the source object&#39;s current metageneration matches the given value. (optional)
     * @param ifSourceMetagenerationNotMatch Makes the operation conditional on whether the source object&#39;s current metageneration does not match the given value. (optional)
     * @return ApiResponse&lt;GoogleLongrunningOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleLongrunningOperation> storageFoldersRenameWithHttpInfo(String bucket, String sourceFolder, String destinationFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifSourceMetagenerationMatch, String ifSourceMetagenerationNotMatch) throws ApiException {
        okhttp3.Call localVarCall = storageFoldersRenameValidateBeforeCall(bucket, sourceFolder, destinationFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch, null);
        Type localVarReturnType = new TypeToken<GoogleLongrunningOperation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled.
     * @param bucket Name of the bucket in which the folders are in. (required)
     * @param sourceFolder Name of the source folder. (required)
     * @param destinationFolder Name of the destination folder. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ifSourceMetagenerationMatch Makes the operation conditional on whether the source object&#39;s current metageneration matches the given value. (optional)
     * @param ifSourceMetagenerationNotMatch Makes the operation conditional on whether the source object&#39;s current metageneration does not match the given value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageFoldersRenameAsync(String bucket, String sourceFolder, String destinationFolder, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String ifSourceMetagenerationMatch, String ifSourceMetagenerationNotMatch, final ApiCallback<GoogleLongrunningOperation> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageFoldersRenameValidateBeforeCall(bucket, sourceFolder, destinationFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch, _callback);
        Type localVarReturnType = new TypeToken<GoogleLongrunningOperation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
