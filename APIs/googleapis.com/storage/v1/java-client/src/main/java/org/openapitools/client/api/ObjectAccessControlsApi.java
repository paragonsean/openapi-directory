/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ObjectAccessControl;
import org.openapitools.client.model.ObjectAccessControls;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectAccessControlsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ObjectAccessControlsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjectAccessControlsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageObjectAccessControlsDelete
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsDeleteCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl/{entity}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsDeleteValidateBeforeCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsDelete(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsDelete(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling storageObjectAccessControlsDelete(Async)");
        }

        return storageObjectAccessControlsDeleteCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);

    }

    /**
     * 
     * Permanently deletes the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void storageObjectAccessControlsDelete(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        storageObjectAccessControlsDeleteWithHttpInfo(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject);
    }

    /**
     * 
     * Permanently deletes the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageObjectAccessControlsDeleteWithHttpInfo(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsDeleteValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Permanently deletes the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsDeleteAsync(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsDeleteValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageObjectAccessControlsGet
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsGetCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl/{entity}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsGetValidateBeforeCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsGet(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsGet(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling storageObjectAccessControlsGet(Async)");
        }

        return storageObjectAccessControlsGetCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);

    }

    /**
     * 
     * Returns the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ObjectAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectAccessControl storageObjectAccessControlsGet(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        ApiResponse<ObjectAccessControl> localVarResp = storageObjectAccessControlsGetWithHttpInfo(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ApiResponse&lt;ObjectAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectAccessControl> storageObjectAccessControlsGetWithHttpInfo(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsGetValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, null);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the ACL entry for the specified entity on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsGetAsync(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback<ObjectAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsGetValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageObjectAccessControlsInsert
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsInsertCall(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectAccessControl;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsInsertValidateBeforeCall(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsInsert(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsInsert(Async)");
        }

        return storageObjectAccessControlsInsertCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);

    }

    /**
     * 
     * Creates a new ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ObjectAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectAccessControl storageObjectAccessControlsInsert(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        ApiResponse<ObjectAccessControl> localVarResp = storageObjectAccessControlsInsertWithHttpInfo(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ApiResponse&lt;ObjectAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectAccessControl> storageObjectAccessControlsInsertWithHttpInfo(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsInsertValidateBeforeCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, null);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsInsertAsync(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback<ObjectAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsInsertValidateBeforeCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageObjectAccessControlsList
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsListCall(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsListValidateBeforeCall(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsList(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsList(Async)");
        }

        return storageObjectAccessControlsListCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);

    }

    /**
     * 
     * Retrieves ACL entries on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ObjectAccessControls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectAccessControls storageObjectAccessControlsList(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        ApiResponse<ObjectAccessControls> localVarResp = storageObjectAccessControlsListWithHttpInfo(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves ACL entries on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @return ApiResponse&lt;ObjectAccessControls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectAccessControls> storageObjectAccessControlsListWithHttpInfo(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsListValidateBeforeCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, null);
        Type localVarReturnType = new TypeToken<ObjectAccessControls>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves ACL entries on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsListAsync(String bucket, String _object, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, final ApiCallback<ObjectAccessControls> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsListValidateBeforeCall(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, _callback);
        Type localVarReturnType = new TypeToken<ObjectAccessControls>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageObjectAccessControlsPatch
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsPatchCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectAccessControl;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl/{entity}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsPatchValidateBeforeCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsPatch(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsPatch(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling storageObjectAccessControlsPatch(Async)");
        }

        return storageObjectAccessControlsPatchCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);

    }

    /**
     * 
     * Patches an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ObjectAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectAccessControl storageObjectAccessControlsPatch(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        ApiResponse<ObjectAccessControl> localVarResp = storageObjectAccessControlsPatchWithHttpInfo(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl);
        return localVarResp.getData();
    }

    /**
     * 
     * Patches an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ApiResponse&lt;ObjectAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectAccessControl> storageObjectAccessControlsPatchWithHttpInfo(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsPatchValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, null);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patches an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsPatchAsync(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback<ObjectAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsPatchValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageObjectAccessControlsUpdate
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsUpdateCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = objectAccessControl;

        // create path and map variables
        String localVarPath = "/b/{bucket}/o/{object}/acl/{entity}"
            .replace("{" + "bucket" + "}", localVarApiClient.escapeString(bucket.toString()))
            .replace("{" + "object" + "}", localVarApiClient.escapeString(_object.toString()))
            .replace("{" + "entity" + "}", localVarApiClient.escapeString(entity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (userProject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userProject", userProject));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageObjectAccessControlsUpdateValidateBeforeCall(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucket' is set
        if (bucket == null) {
            throw new ApiException("Missing the required parameter 'bucket' when calling storageObjectAccessControlsUpdate(Async)");
        }

        // verify the required parameter '_object' is set
        if (_object == null) {
            throw new ApiException("Missing the required parameter '_object' when calling storageObjectAccessControlsUpdate(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling storageObjectAccessControlsUpdate(Async)");
        }

        return storageObjectAccessControlsUpdateCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);

    }

    /**
     * 
     * Updates an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ObjectAccessControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ObjectAccessControl storageObjectAccessControlsUpdate(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        ApiResponse<ObjectAccessControl> localVarResp = storageObjectAccessControlsUpdateWithHttpInfo(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @return ApiResponse&lt;ObjectAccessControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectAccessControl> storageObjectAccessControlsUpdateWithHttpInfo(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl) throws ApiException {
        okhttp3.Call localVarCall = storageObjectAccessControlsUpdateValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, null);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an ACL entry on the specified object.
     * @param bucket Name of a bucket. (required)
     * @param _object Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding). (required)
     * @param entity The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param uploadType Upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;, \&quot;resumable\&quot;). (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param generation If present, selects a specific revision of this object (as opposed to the latest version, the default). (optional)
     * @param userProject The project to be billed for this request. Required for Requester Pays buckets. (optional)
     * @param objectAccessControl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageObjectAccessControlsUpdateAsync(String bucket, String _object, String entity, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String uploadType, String userIp, String generation, String userProject, ObjectAccessControl objectAccessControl, final ApiCallback<ObjectAccessControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageObjectAccessControlsUpdateValidateBeforeCall(bucket, _object, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, objectAccessControl, _callback);
        Type localVarReturnType = new TypeToken<ObjectAccessControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
