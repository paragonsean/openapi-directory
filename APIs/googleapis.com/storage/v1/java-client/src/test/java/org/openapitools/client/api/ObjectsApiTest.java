/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BulkRestoreObjectsRequest;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ComposeRequest;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.ModelObject;
import java.util.Objects;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.RewriteResponse;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObjectsApi
 */
@Disabled
public class ObjectsApiTest {

    private final ObjectsApi api = new ObjectsApi();

    /**
     * Initiates a long-running bulk restore operation on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsBulkRestoreTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        BulkRestoreObjectsRequest bulkRestoreObjectsRequest = null;
        GoogleLongrunningOperation response = api.storageObjectsBulkRestore(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, bulkRestoreObjectsRequest);
        // TODO: test validations
    }

    /**
     * Concatenates a list of existing objects into a new object in the same bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsComposeTest() throws ApiException {
        String destinationBucket = null;
        String destinationObject = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String destinationPredefinedAcl = null;
        String ifGenerationMatch = null;
        String ifMetagenerationMatch = null;
        String kmsKeyName = null;
        String userProject = null;
        ComposeRequest composeRequest = null;
        ModelObject response = api.storageObjectsCompose(destinationBucket, destinationObject, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, destinationPredefinedAcl, ifGenerationMatch, ifMetagenerationMatch, kmsKeyName, userProject, composeRequest);
        // TODO: test validations
    }

    /**
     * Copies a source object to a destination object. Optionally overrides metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsCopyTest() throws ApiException {
        String sourceBucket = null;
        String sourceObject = null;
        String destinationBucket = null;
        String destinationObject = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String destinationKmsKeyName = null;
        String destinationPredefinedAcl = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String ifSourceGenerationMatch = null;
        String ifSourceGenerationNotMatch = null;
        String ifSourceMetagenerationMatch = null;
        String ifSourceMetagenerationNotMatch = null;
        String projection = null;
        String sourceGeneration = null;
        String userProject = null;
        ModelObject modelObject = null;
        ModelObject response = api.storageObjectsCopy(sourceBucket, sourceObject, destinationBucket, destinationObject, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, destinationKmsKeyName, destinationPredefinedAcl, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, ifSourceGenerationMatch, ifSourceGenerationNotMatch, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch, projection, sourceGeneration, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Deletes an object and its metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsDeleteTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String userProject = null;
        api.storageObjectsDelete(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, userProject);
        // TODO: test validations
    }

    /**
     * Retrieves an object or its metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsGetTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String projection = null;
        Boolean softDeleted = null;
        String userProject = null;
        ModelObject response = api.storageObjectsGet(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, projection, softDeleted, userProject);
        // TODO: test validations
    }

    /**
     * Returns an IAM policy for the specified object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsGetIamPolicyTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String userProject = null;
        Policy response = api.storageObjectsGetIamPolicy(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject);
        // TODO: test validations
    }

    /**
     * Stores a new object and metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String contentEncoding = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String kmsKeyName = null;
        String name = null;
        String predefinedAcl = null;
        String projection = null;
        String userProject = null;
        ModelObject modelObject = null;
        ModelObject response = api.storageObjectsInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, contentEncoding, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, kmsKeyName, name, predefinedAcl, projection, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Retrieves a list of objects matching the criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String delimiter = null;
        String endOffset = null;
        Boolean includeFoldersAsPrefixes = null;
        Boolean includeTrailingDelimiter = null;
        String matchGlob = null;
        Integer maxResults = null;
        String pageToken = null;
        String prefix = null;
        String projection = null;
        Boolean softDeleted = null;
        String startOffset = null;
        String userProject = null;
        Boolean versions = null;
        Objects response = api.storageObjectsList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, includeFoldersAsPrefixes, includeTrailingDelimiter, matchGlob, maxResults, pageToken, prefix, projection, softDeleted, startOffset, userProject, versions);
        // TODO: test validations
    }

    /**
     * Patches an object&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsPatchTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        Boolean overrideUnlockedRetention = null;
        String predefinedAcl = null;
        String projection = null;
        String userProject = null;
        ModelObject modelObject = null;
        ModelObject response = api.storageObjectsPatch(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, overrideUnlockedRetention, predefinedAcl, projection, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Restores a soft-deleted object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsRestoreTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String generation = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        Boolean copySourceAcl = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String projection = null;
        String userProject = null;
        ModelObject modelObject = null;
        ModelObject response = api.storageObjectsRestore(bucket, _object, generation, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, copySourceAcl, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, projection, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Rewrites a source object to a destination object. Optionally overrides metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsRewriteTest() throws ApiException {
        String sourceBucket = null;
        String sourceObject = null;
        String destinationBucket = null;
        String destinationObject = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String destinationKmsKeyName = null;
        String destinationPredefinedAcl = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String ifSourceGenerationMatch = null;
        String ifSourceGenerationNotMatch = null;
        String ifSourceMetagenerationMatch = null;
        String ifSourceMetagenerationNotMatch = null;
        String maxBytesRewrittenPerCall = null;
        String projection = null;
        String rewriteToken = null;
        String sourceGeneration = null;
        String userProject = null;
        ModelObject modelObject = null;
        RewriteResponse response = api.storageObjectsRewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, destinationKmsKeyName, destinationPredefinedAcl, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, ifSourceGenerationMatch, ifSourceGenerationNotMatch, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch, maxBytesRewrittenPerCall, projection, rewriteToken, sourceGeneration, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Updates an IAM policy for the specified object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsSetIamPolicyTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String userProject = null;
        Policy policy = null;
        Policy response = api.storageObjectsSetIamPolicy(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject, policy);
        // TODO: test validations
    }

    /**
     * Tests a set of permissions on the given object to see which, if any, are held by the caller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsTestIamPermissionsTest() throws ApiException {
        String bucket = null;
        String _object = null;
        List<String> permissions = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String userProject = null;
        TestIamPermissionsResponse response = api.storageObjectsTestIamPermissions(bucket, _object, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, userProject);
        // TODO: test validations
    }

    /**
     * Updates an object&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsUpdateTest() throws ApiException {
        String bucket = null;
        String _object = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String generation = null;
        String ifGenerationMatch = null;
        String ifGenerationNotMatch = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        Boolean overrideUnlockedRetention = null;
        String predefinedAcl = null;
        String projection = null;
        String userProject = null;
        ModelObject modelObject = null;
        ModelObject response = api.storageObjectsUpdate(bucket, _object, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, generation, ifGenerationMatch, ifGenerationNotMatch, ifMetagenerationMatch, ifMetagenerationNotMatch, overrideUnlockedRetention, predefinedAcl, projection, userProject, modelObject);
        // TODO: test validations
    }

    /**
     * Watch for changes on all objects in a bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageObjectsWatchAllTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String delimiter = null;
        String endOffset = null;
        Boolean includeTrailingDelimiter = null;
        Integer maxResults = null;
        String pageToken = null;
        String prefix = null;
        String projection = null;
        String startOffset = null;
        String userProject = null;
        Boolean versions = null;
        Channel channel = null;
        Channel response = api.storageObjectsWatchAll(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, includeTrailingDelimiter, maxResults, pageToken, prefix, projection, startOffset, userProject, versions, channel);
        // TODO: test validations
    }

}
