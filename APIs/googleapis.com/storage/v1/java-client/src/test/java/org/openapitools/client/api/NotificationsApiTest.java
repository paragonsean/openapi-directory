/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.Notifications;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsApi
 */
@Disabled
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    /**
     * Permanently deletes a notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageNotificationsDeleteTest() throws ApiException {
        String bucket = null;
        String notification = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        api.storageNotificationsDelete(bucket, notification, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

    /**
     * View a notification configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageNotificationsGetTest() throws ApiException {
        String bucket = null;
        String notification = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        Notification response = api.storageNotificationsGet(bucket, notification, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

    /**
     * Creates a notification subscription for a given bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageNotificationsInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        Notification notification = null;
        Notification response = api.storageNotificationsInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, notification);
        // TODO: test validations
    }

    /**
     * Retrieves a list of notification subscriptions for a given bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageNotificationsListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        Notifications response = api.storageNotificationsList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

}
