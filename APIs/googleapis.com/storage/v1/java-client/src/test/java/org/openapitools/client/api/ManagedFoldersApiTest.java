/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ManagedFolder;
import org.openapitools.client.model.ManagedFolders;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagedFoldersApi
 */
@Disabled
public class ManagedFoldersApiTest {

    private final ManagedFoldersApi api = new ManagedFoldersApi();

    /**
     * Permanently deletes a managed folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersDeleteTest() throws ApiException {
        String bucket = null;
        String managedFolder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        api.storageManagedFoldersDelete(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        // TODO: test validations
    }

    /**
     * Returns metadata of the specified managed folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersGetTest() throws ApiException {
        String bucket = null;
        String managedFolder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        ManagedFolder response = api.storageManagedFoldersGet(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        // TODO: test validations
    }

    /**
     * Returns an IAM policy for the specified managed folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersGetIamPolicyTest() throws ApiException {
        String bucket = null;
        String managedFolder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        Integer optionsRequestedPolicyVersion = null;
        String userProject = null;
        Policy response = api.storageManagedFoldersGetIamPolicy(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, optionsRequestedPolicyVersion, userProject);
        // TODO: test validations
    }

    /**
     * Creates a new managed folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        ManagedFolder managedFolder = null;
        ManagedFolder response = api.storageManagedFoldersInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, managedFolder);
        // TODO: test validations
    }

    /**
     * Lists managed folders in the given bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        Integer pageSize = null;
        String pageToken = null;
        String prefix = null;
        ManagedFolders response = api.storageManagedFoldersList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken, prefix);
        // TODO: test validations
    }

    /**
     * Updates an IAM policy for the specified managed folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersSetIamPolicyTest() throws ApiException {
        String bucket = null;
        String managedFolder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        Policy policy = null;
        Policy response = api.storageManagedFoldersSetIamPolicy(bucket, managedFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, policy);
        // TODO: test validations
    }

    /**
     * Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageManagedFoldersTestIamPermissionsTest() throws ApiException {
        String bucket = null;
        String managedFolder = null;
        List<String> permissions = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        TestIamPermissionsResponse response = api.storageManagedFoldersTestIamPermissions(bucket, managedFolder, permissions, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

}
