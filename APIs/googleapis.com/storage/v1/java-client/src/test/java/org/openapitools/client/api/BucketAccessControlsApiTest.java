/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BucketAccessControl;
import org.openapitools.client.model.BucketAccessControls;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BucketAccessControlsApi
 */
@Disabled
public class BucketAccessControlsApiTest {

    private final BucketAccessControlsApi api = new BucketAccessControlsApi();

    /**
     * Permanently deletes the ACL entry for the specified entity on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsDeleteTest() throws ApiException {
        String bucket = null;
        String entity = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        api.storageBucketAccessControlsDelete(bucket, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

    /**
     * Returns the ACL entry for the specified entity on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsGetTest() throws ApiException {
        String bucket = null;
        String entity = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        BucketAccessControl response = api.storageBucketAccessControlsGet(bucket, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

    /**
     * Creates a new ACL entry on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        BucketAccessControl bucketAccessControl = null;
        BucketAccessControl response = api.storageBucketAccessControlsInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, bucketAccessControl);
        // TODO: test validations
    }

    /**
     * Retrieves ACL entries on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        BucketAccessControls response = api.storageBucketAccessControlsList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject);
        // TODO: test validations
    }

    /**
     * Patches an ACL entry on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsPatchTest() throws ApiException {
        String bucket = null;
        String entity = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        BucketAccessControl bucketAccessControl = null;
        BucketAccessControl response = api.storageBucketAccessControlsPatch(bucket, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, bucketAccessControl);
        // TODO: test validations
    }

    /**
     * Updates an ACL entry on the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketAccessControlsUpdateTest() throws ApiException {
        String bucket = null;
        String entity = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String userProject = null;
        BucketAccessControl bucketAccessControl = null;
        BucketAccessControl response = api.storageBucketAccessControlsUpdate(bucket, entity, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, userProject, bucketAccessControl);
        // TODO: test validations
    }

}
