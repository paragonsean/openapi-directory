/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Folder;
import org.openapitools.client.model.Folders;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
@Disabled
public class FoldersApiTest {

    private final FoldersApi api = new FoldersApi();

    /**
     * Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageFoldersDeleteTest() throws ApiException {
        String bucket = null;
        String folder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        api.storageFoldersDelete(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        // TODO: test validations
    }

    /**
     * Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageFoldersGetTest() throws ApiException {
        String bucket = null;
        String folder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        Folder response = api.storageFoldersGet(bucket, folder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        // TODO: test validations
    }

    /**
     * Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageFoldersInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        Boolean recursive = null;
        Folder folder = null;
        Folder response = api.storageFoldersInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, recursive, folder);
        // TODO: test validations
    }

    /**
     * Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageFoldersListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String delimiter = null;
        String endOffset = null;
        Integer pageSize = null;
        String pageToken = null;
        String prefix = null;
        String startOffset = null;
        Folders response = api.storageFoldersList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, delimiter, endOffset, pageSize, pageToken, prefix, startOffset);
        // TODO: test validations
    }

    /**
     * Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageFoldersRenameTest() throws ApiException {
        String bucket = null;
        String sourceFolder = null;
        String destinationFolder = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        String ifSourceMetagenerationMatch = null;
        String ifSourceMetagenerationNotMatch = null;
        GoogleLongrunningOperation response = api.storageFoldersRename(bucket, sourceFolder, destinationFolder, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, ifSourceMetagenerationMatch, ifSourceMetagenerationNotMatch);
        // TODO: test validations
    }

}
