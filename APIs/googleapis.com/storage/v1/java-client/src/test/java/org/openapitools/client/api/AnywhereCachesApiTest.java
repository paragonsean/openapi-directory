/*
 * Cloud Storage JSON API
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnywhereCache;
import org.openapitools.client.model.AnywhereCaches;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnywhereCachesApi
 */
@Disabled
public class AnywhereCachesApiTest {

    private final AnywhereCachesApi api = new AnywhereCachesApi();

    /**
     * Disables an Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesDisableTest() throws ApiException {
        String bucket = null;
        String anywhereCacheId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache response = api.storageAnywhereCachesDisable(bucket, anywhereCacheId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp);
        // TODO: test validations
    }

    /**
     * Returns the metadata of an Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesGetTest() throws ApiException {
        String bucket = null;
        String anywhereCacheId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache response = api.storageAnywhereCachesGet(bucket, anywhereCacheId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp);
        // TODO: test validations
    }

    /**
     * Creates an Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesInsertTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache anywhereCache = null;
        GoogleLongrunningOperation response = api.storageAnywhereCachesInsert(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, anywhereCache);
        // TODO: test validations
    }

    /**
     * Returns a list of Anywhere Cache instances of the bucket matching the criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesListTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        Integer pageSize = null;
        String pageToken = null;
        AnywhereCaches response = api.storageAnywhereCachesList(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Pauses an Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesPauseTest() throws ApiException {
        String bucket = null;
        String anywhereCacheId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache response = api.storageAnywhereCachesPause(bucket, anywhereCacheId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp);
        // TODO: test validations
    }

    /**
     * Resumes a paused or disabled Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesResumeTest() throws ApiException {
        String bucket = null;
        String anywhereCacheId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache response = api.storageAnywhereCachesResume(bucket, anywhereCacheId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp);
        // TODO: test validations
    }

    /**
     * Updates the config(ttl and admissionPolicy) of an Anywhere Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAnywhereCachesUpdateTest() throws ApiException {
        String bucket = null;
        String anywhereCacheId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadType = null;
        String userIp = null;
        AnywhereCache anywhereCache = null;
        GoogleLongrunningOperation response = api.storageAnywhereCachesUpdate(bucket, anywhereCacheId, alt, fields, key, oauthToken, prettyPrint, quotaUser, uploadType, userIp, anywhereCache);
        // TODO: test validations
    }

}
