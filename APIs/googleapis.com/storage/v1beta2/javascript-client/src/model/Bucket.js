/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BucketAccessControl from './BucketAccessControl';
import BucketCorsInner from './BucketCorsInner';
import BucketLifecycle from './BucketLifecycle';
import BucketLogging from './BucketLogging';
import BucketOwner from './BucketOwner';
import BucketVersioning from './BucketVersioning';
import BucketWebsite from './BucketWebsite';
import ObjectAccessControl from './ObjectAccessControl';

/**
 * The Bucket model module.
 * @module model/Bucket
 * @version v1beta2
 */
class Bucket {
    /**
     * Constructs a new <code>Bucket</code>.
     * A bucket.
     * @alias module:model/Bucket
     */
    constructor() { 
        
        Bucket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'storage#bucket';
    }

    /**
     * Constructs a <code>Bucket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bucket} obj Optional instance to populate.
     * @return {module:model/Bucket} The populated <code>Bucket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bucket();

            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ApiClient.convertToType(data['acl'], [BucketAccessControl]);
            }
            if (data.hasOwnProperty('cors')) {
                obj['cors'] = ApiClient.convertToType(data['cors'], [BucketCorsInner]);
            }
            if (data.hasOwnProperty('defaultObjectAcl')) {
                obj['defaultObjectAcl'] = ApiClient.convertToType(data['defaultObjectAcl'], [ObjectAccessControl]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lifecycle')) {
                obj['lifecycle'] = BucketLifecycle.constructFromObject(data['lifecycle']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('logging')) {
                obj['logging'] = BucketLogging.constructFromObject(data['logging']);
            }
            if (data.hasOwnProperty('metageneration')) {
                obj['metageneration'] = ApiClient.convertToType(data['metageneration'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = BucketOwner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('storageClass')) {
                obj['storageClass'] = ApiClient.convertToType(data['storageClass'], 'String');
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('versioning')) {
                obj['versioning'] = BucketVersioning.constructFromObject(data['versioning']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = BucketWebsite.constructFromObject(data['website']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bucket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bucket</code>.
     */
    static validateJSON(data) {
        if (data['acl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acl'])) {
                throw new Error("Expected the field `acl` to be an array in the JSON data but got " + data['acl']);
            }
            // validate the optional field `acl` (array)
            for (const item of data['acl']) {
                BucketAccessControl.validateJSON(item);
            };
        }
        if (data['cors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cors'])) {
                throw new Error("Expected the field `cors` to be an array in the JSON data but got " + data['cors']);
            }
            // validate the optional field `cors` (array)
            for (const item of data['cors']) {
                BucketCorsInner.validateJSON(item);
            };
        }
        if (data['defaultObjectAcl']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defaultObjectAcl'])) {
                throw new Error("Expected the field `defaultObjectAcl` to be an array in the JSON data but got " + data['defaultObjectAcl']);
            }
            // validate the optional field `defaultObjectAcl` (array)
            for (const item of data['defaultObjectAcl']) {
                ObjectAccessControl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lifecycle`
        if (data['lifecycle']) { // data not null
          BucketLifecycle.validateJSON(data['lifecycle']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `logging`
        if (data['logging']) { // data not null
          BucketLogging.validateJSON(data['logging']);
        }
        // ensure the json data is a string
        if (data['metageneration'] && !(typeof data['metageneration'] === 'string' || data['metageneration'] instanceof String)) {
            throw new Error("Expected the field `metageneration` to be a primitive type in the JSON string but got " + data['metageneration']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          BucketOwner.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['storageClass'] && !(typeof data['storageClass'] === 'string' || data['storageClass'] instanceof String)) {
            throw new Error("Expected the field `storageClass` to be a primitive type in the JSON string but got " + data['storageClass']);
        }
        // validate the optional field `versioning`
        if (data['versioning']) { // data not null
          BucketVersioning.validateJSON(data['versioning']);
        }
        // validate the optional field `website`
        if (data['website']) { // data not null
          BucketWebsite.validateJSON(data['website']);
        }

        return true;
    }


}



/**
 * Access controls on the bucket.
 * @member {Array.<module:model/BucketAccessControl>} acl
 */
Bucket.prototype['acl'] = undefined;

/**
 * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
 * @member {Array.<module:model/BucketCorsInner>} cors
 */
Bucket.prototype['cors'] = undefined;

/**
 * Default access controls to apply to new objects when no ACL is provided.
 * @member {Array.<module:model/ObjectAccessControl>} defaultObjectAcl
 */
Bucket.prototype['defaultObjectAcl'] = undefined;

/**
 * HTTP 1.1 Entity tag for the bucket.
 * @member {String} etag
 */
Bucket.prototype['etag'] = undefined;

/**
 * The ID of the bucket.
 * @member {String} id
 */
Bucket.prototype['id'] = undefined;

/**
 * The kind of item this is. For buckets, this is always storage#bucket.
 * @member {String} kind
 * @default 'storage#bucket'
 */
Bucket.prototype['kind'] = 'storage#bucket';

/**
 * @member {module:model/BucketLifecycle} lifecycle
 */
Bucket.prototype['lifecycle'] = undefined;

/**
 * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Typical values are US and EU. Defaults to US. See the developer's guide for the authoritative list.
 * @member {String} location
 */
Bucket.prototype['location'] = undefined;

/**
 * @member {module:model/BucketLogging} logging
 */
Bucket.prototype['logging'] = undefined;

/**
 * The metadata generation of this bucket.
 * @member {String} metageneration
 */
Bucket.prototype['metageneration'] = undefined;

/**
 * The name of the bucket.
 * @member {String} name
 */
Bucket.prototype['name'] = undefined;

/**
 * @member {module:model/BucketOwner} owner
 */
Bucket.prototype['owner'] = undefined;

/**
 * The URI of this bucket.
 * @member {String} selfLink
 */
Bucket.prototype['selfLink'] = undefined;

/**
 * The bucket's storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Typical values are STANDARD and DURABLE_REDUCED_AVAILABILITY. Defaults to STANDARD. See the developer's guide for the authoritative list.
 * @member {String} storageClass
 */
Bucket.prototype['storageClass'] = undefined;

/**
 * Creation time of the bucket in RFC 3339 format.
 * @member {Date} timeCreated
 */
Bucket.prototype['timeCreated'] = undefined;

/**
 * @member {module:model/BucketVersioning} versioning
 */
Bucket.prototype['versioning'] = undefined;

/**
 * @member {module:model/BucketWebsite} website
 */
Bucket.prototype['website'] = undefined;






export default Bucket;

