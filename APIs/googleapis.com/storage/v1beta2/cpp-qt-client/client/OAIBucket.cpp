/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket::OAIBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket::OAIBucket() {
    this->initializeModel();
}

OAIBucket::~OAIBucket() {}

void OAIBucket::initializeModel() {

    m_acl_isSet = false;
    m_acl_isValid = false;

    m_cors_isSet = false;
    m_cors_isValid = false;

    m_default_object_acl_isSet = false;
    m_default_object_acl_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_metageneration_isSet = false;
    m_metageneration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_versioning_isSet = false;
    m_versioning_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket::fromJsonObject(QJsonObject json) {

    m_acl_isValid = ::OpenAPI::fromJsonValue(m_acl, json[QString("acl")]);
    m_acl_isSet = !json[QString("acl")].isNull() && m_acl_isValid;

    m_cors_isValid = ::OpenAPI::fromJsonValue(m_cors, json[QString("cors")]);
    m_cors_isSet = !json[QString("cors")].isNull() && m_cors_isValid;

    m_default_object_acl_isValid = ::OpenAPI::fromJsonValue(m_default_object_acl, json[QString("defaultObjectAcl")]);
    m_default_object_acl_isSet = !json[QString("defaultObjectAcl")].isNull() && m_default_object_acl_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("lifecycle")]);
    m_lifecycle_isSet = !json[QString("lifecycle")].isNull() && m_lifecycle_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_metageneration_isValid = ::OpenAPI::fromJsonValue(m_metageneration, json[QString("metageneration")]);
    m_metageneration_isSet = !json[QString("metageneration")].isNull() && m_metageneration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("storageClass")]);
    m_storage_class_isSet = !json[QString("storageClass")].isNull() && m_storage_class_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_versioning_isValid = ::OpenAPI::fromJsonValue(m_versioning, json[QString("versioning")]);
    m_versioning_isSet = !json[QString("versioning")].isNull() && m_versioning_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_acl.size() > 0) {
        obj.insert(QString("acl"), ::OpenAPI::toJsonValue(m_acl));
    }
    if (m_cors.size() > 0) {
        obj.insert(QString("cors"), ::OpenAPI::toJsonValue(m_cors));
    }
    if (m_default_object_acl.size() > 0) {
        obj.insert(QString("defaultObjectAcl"), ::OpenAPI::toJsonValue(m_default_object_acl));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_metageneration_isSet) {
        obj.insert(QString("metageneration"), ::OpenAPI::toJsonValue(m_metageneration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_storage_class_isSet) {
        obj.insert(QString("storageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_versioning.isSet()) {
        obj.insert(QString("versioning"), ::OpenAPI::toJsonValue(m_versioning));
    }
    if (m_website.isSet()) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QList<OAIBucketAccessControl> OAIBucket::getAcl() const {
    return m_acl;
}
void OAIBucket::setAcl(const QList<OAIBucketAccessControl> &acl) {
    m_acl = acl;
    m_acl_isSet = true;
}

bool OAIBucket::is_acl_Set() const{
    return m_acl_isSet;
}

bool OAIBucket::is_acl_Valid() const{
    return m_acl_isValid;
}

QList<OAIBucket_cors_inner> OAIBucket::getCors() const {
    return m_cors;
}
void OAIBucket::setCors(const QList<OAIBucket_cors_inner> &cors) {
    m_cors = cors;
    m_cors_isSet = true;
}

bool OAIBucket::is_cors_Set() const{
    return m_cors_isSet;
}

bool OAIBucket::is_cors_Valid() const{
    return m_cors_isValid;
}

QList<OAIObjectAccessControl> OAIBucket::getDefaultObjectAcl() const {
    return m_default_object_acl;
}
void OAIBucket::setDefaultObjectAcl(const QList<OAIObjectAccessControl> &default_object_acl) {
    m_default_object_acl = default_object_acl;
    m_default_object_acl_isSet = true;
}

bool OAIBucket::is_default_object_acl_Set() const{
    return m_default_object_acl_isSet;
}

bool OAIBucket::is_default_object_acl_Valid() const{
    return m_default_object_acl_isValid;
}

QString OAIBucket::getEtag() const {
    return m_etag;
}
void OAIBucket::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBucket::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBucket::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIBucket::getId() const {
    return m_id;
}
void OAIBucket::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBucket::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBucket::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBucket::getKind() const {
    return m_kind;
}
void OAIBucket::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBucket::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBucket::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIBucket_lifecycle OAIBucket::getLifecycle() const {
    return m_lifecycle;
}
void OAIBucket::setLifecycle(const OAIBucket_lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIBucket::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIBucket::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

QString OAIBucket::getLocation() const {
    return m_location;
}
void OAIBucket::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBucket::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBucket::is_location_Valid() const{
    return m_location_isValid;
}

OAIBucket_logging OAIBucket::getLogging() const {
    return m_logging;
}
void OAIBucket::setLogging(const OAIBucket_logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIBucket::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIBucket::is_logging_Valid() const{
    return m_logging_isValid;
}

QString OAIBucket::getMetageneration() const {
    return m_metageneration;
}
void OAIBucket::setMetageneration(const QString &metageneration) {
    m_metageneration = metageneration;
    m_metageneration_isSet = true;
}

bool OAIBucket::is_metageneration_Set() const{
    return m_metageneration_isSet;
}

bool OAIBucket::is_metageneration_Valid() const{
    return m_metageneration_isValid;
}

QString OAIBucket::getName() const {
    return m_name;
}
void OAIBucket::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBucket::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBucket::is_name_Valid() const{
    return m_name_isValid;
}

OAIBucket_owner OAIBucket::getOwner() const {
    return m_owner;
}
void OAIBucket::setOwner(const OAIBucket_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIBucket::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIBucket::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIBucket::getSelfLink() const {
    return m_self_link;
}
void OAIBucket::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIBucket::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIBucket::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIBucket::getStorageClass() const {
    return m_storage_class;
}
void OAIBucket::setStorageClass(const QString &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIBucket::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIBucket::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

QDateTime OAIBucket::getTimeCreated() const {
    return m_time_created;
}
void OAIBucket::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIBucket::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIBucket::is_time_created_Valid() const{
    return m_time_created_isValid;
}

OAIBucket_versioning OAIBucket::getVersioning() const {
    return m_versioning;
}
void OAIBucket::setVersioning(const OAIBucket_versioning &versioning) {
    m_versioning = versioning;
    m_versioning_isSet = true;
}

bool OAIBucket::is_versioning_Set() const{
    return m_versioning_isSet;
}

bool OAIBucket::is_versioning_Valid() const{
    return m_versioning_isValid;
}

OAIBucket_website OAIBucket::getWebsite() const {
    return m_website;
}
void OAIBucket::setWebsite(const OAIBucket_website &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIBucket::is_website_Set() const{
    return m_website_isSet;
}

bool OAIBucket::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_object_acl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metageneration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
