/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_lifecycle_rule_inner_condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_lifecycle_rule_inner_condition::OAIBucket_lifecycle_rule_inner_condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_lifecycle_rule_inner_condition::OAIBucket_lifecycle_rule_inner_condition() {
    this->initializeModel();
}

OAIBucket_lifecycle_rule_inner_condition::~OAIBucket_lifecycle_rule_inner_condition() {}

void OAIBucket_lifecycle_rule_inner_condition::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_num_newer_versions_isSet = false;
    m_num_newer_versions_isValid = false;
}

void OAIBucket_lifecycle_rule_inner_condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_lifecycle_rule_inner_condition::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("createdBefore")]);
    m_created_before_isSet = !json[QString("createdBefore")].isNull() && m_created_before_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("isLive")]);
    m_is_live_isSet = !json[QString("isLive")].isNull() && m_is_live_isValid;

    m_num_newer_versions_isValid = ::OpenAPI::fromJsonValue(m_num_newer_versions, json[QString("numNewerVersions")]);
    m_num_newer_versions_isSet = !json[QString("numNewerVersions")].isNull() && m_num_newer_versions_isValid;
}

QString OAIBucket_lifecycle_rule_inner_condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_lifecycle_rule_inner_condition::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("createdBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("isLive"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_num_newer_versions_isSet) {
        obj.insert(QString("numNewerVersions"), ::OpenAPI::toJsonValue(m_num_newer_versions));
    }
    return obj;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getAge() const {
    return m_age;
}
void OAIBucket_lifecycle_rule_inner_condition::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_age_Set() const{
    return m_age_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_age_Valid() const{
    return m_age_isValid;
}

QDate OAIBucket_lifecycle_rule_inner_condition::getCreatedBefore() const {
    return m_created_before;
}
void OAIBucket_lifecycle_rule_inner_condition::setCreatedBefore(const QDate &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_created_before_Valid() const{
    return m_created_before_isValid;
}

bool OAIBucket_lifecycle_rule_inner_condition::isIsLive() const {
    return m_is_live;
}
void OAIBucket_lifecycle_rule_inner_condition::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_is_live_Valid() const{
    return m_is_live_isValid;
}

qint32 OAIBucket_lifecycle_rule_inner_condition::getNumNewerVersions() const {
    return m_num_newer_versions;
}
void OAIBucket_lifecycle_rule_inner_condition::setNumNewerVersions(const qint32 &num_newer_versions) {
    m_num_newer_versions = num_newer_versions;
    m_num_newer_versions_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_num_newer_versions_Set() const{
    return m_num_newer_versions_isSet;
}

bool OAIBucket_lifecycle_rule_inner_condition::is_num_newer_versions_Valid() const{
    return m_num_newer_versions_isValid;
}

bool OAIBucket_lifecycle_rule_inner_condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_newer_versions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_lifecycle_rule_inner_condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
