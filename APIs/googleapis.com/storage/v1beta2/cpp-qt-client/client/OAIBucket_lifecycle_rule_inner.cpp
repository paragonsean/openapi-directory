/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_lifecycle_rule_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_lifecycle_rule_inner::OAIBucket_lifecycle_rule_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_lifecycle_rule_inner::OAIBucket_lifecycle_rule_inner() {
    this->initializeModel();
}

OAIBucket_lifecycle_rule_inner::~OAIBucket_lifecycle_rule_inner() {}

void OAIBucket_lifecycle_rule_inner::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;
}

void OAIBucket_lifecycle_rule_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_lifecycle_rule_inner::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;
}

QString OAIBucket_lifecycle_rule_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_lifecycle_rule_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    return obj;
}

OAIBucket_lifecycle_rule_inner_action OAIBucket_lifecycle_rule_inner::getAction() const {
    return m_action;
}
void OAIBucket_lifecycle_rule_inner::setAction(const OAIBucket_lifecycle_rule_inner_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner::is_action_Set() const{
    return m_action_isSet;
}

bool OAIBucket_lifecycle_rule_inner::is_action_Valid() const{
    return m_action_isValid;
}

OAIBucket_lifecycle_rule_inner_condition OAIBucket_lifecycle_rule_inner::getCondition() const {
    return m_condition;
}
void OAIBucket_lifecycle_rule_inner::setCondition(const OAIBucket_lifecycle_rule_inner_condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIBucket_lifecycle_rule_inner::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIBucket_lifecycle_rule_inner::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIBucket_lifecycle_rule_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_lifecycle_rule_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
