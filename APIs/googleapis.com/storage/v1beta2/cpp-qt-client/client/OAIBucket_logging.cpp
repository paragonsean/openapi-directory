/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucket_logging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucket_logging::OAIBucket_logging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucket_logging::OAIBucket_logging() {
    this->initializeModel();
}

OAIBucket_logging::~OAIBucket_logging() {}

void OAIBucket_logging::initializeModel() {

    m_log_bucket_isSet = false;
    m_log_bucket_isValid = false;

    m_log_object_prefix_isSet = false;
    m_log_object_prefix_isValid = false;
}

void OAIBucket_logging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucket_logging::fromJsonObject(QJsonObject json) {

    m_log_bucket_isValid = ::OpenAPI::fromJsonValue(m_log_bucket, json[QString("logBucket")]);
    m_log_bucket_isSet = !json[QString("logBucket")].isNull() && m_log_bucket_isValid;

    m_log_object_prefix_isValid = ::OpenAPI::fromJsonValue(m_log_object_prefix, json[QString("logObjectPrefix")]);
    m_log_object_prefix_isSet = !json[QString("logObjectPrefix")].isNull() && m_log_object_prefix_isValid;
}

QString OAIBucket_logging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucket_logging::asJsonObject() const {
    QJsonObject obj;
    if (m_log_bucket_isSet) {
        obj.insert(QString("logBucket"), ::OpenAPI::toJsonValue(m_log_bucket));
    }
    if (m_log_object_prefix_isSet) {
        obj.insert(QString("logObjectPrefix"), ::OpenAPI::toJsonValue(m_log_object_prefix));
    }
    return obj;
}

QString OAIBucket_logging::getLogBucket() const {
    return m_log_bucket;
}
void OAIBucket_logging::setLogBucket(const QString &log_bucket) {
    m_log_bucket = log_bucket;
    m_log_bucket_isSet = true;
}

bool OAIBucket_logging::is_log_bucket_Set() const{
    return m_log_bucket_isSet;
}

bool OAIBucket_logging::is_log_bucket_Valid() const{
    return m_log_bucket_isValid;
}

QString OAIBucket_logging::getLogObjectPrefix() const {
    return m_log_object_prefix;
}
void OAIBucket_logging::setLogObjectPrefix(const QString &log_object_prefix) {
    m_log_object_prefix = log_object_prefix;
    m_log_object_prefix_isSet = true;
}

bool OAIBucket_logging::is_log_object_prefix_Set() const{
    return m_log_object_prefix_isSet;
}

bool OAIBucket_logging::is_log_object_prefix_Valid() const{
    return m_log_object_prefix_isValid;
}

bool OAIBucket_logging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_object_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucket_logging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
