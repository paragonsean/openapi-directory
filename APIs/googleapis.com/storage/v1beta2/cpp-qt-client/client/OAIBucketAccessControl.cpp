/**
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBucketAccessControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBucketAccessControl::OAIBucketAccessControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBucketAccessControl::OAIBucketAccessControl() {
    this->initializeModel();
}

OAIBucketAccessControl::~OAIBucketAccessControl() {}

void OAIBucketAccessControl::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;
}

void OAIBucketAccessControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBucketAccessControl::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;
}

QString OAIBucketAccessControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBucketAccessControl::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    return obj;
}

QString OAIBucketAccessControl::getBucket() const {
    return m_bucket;
}
void OAIBucketAccessControl::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIBucketAccessControl::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIBucketAccessControl::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIBucketAccessControl::getDomain() const {
    return m_domain;
}
void OAIBucketAccessControl::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIBucketAccessControl::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIBucketAccessControl::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIBucketAccessControl::getEmail() const {
    return m_email;
}
void OAIBucketAccessControl::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIBucketAccessControl::is_email_Set() const{
    return m_email_isSet;
}

bool OAIBucketAccessControl::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIBucketAccessControl::getEntity() const {
    return m_entity;
}
void OAIBucketAccessControl::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIBucketAccessControl::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIBucketAccessControl::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIBucketAccessControl::getEntityId() const {
    return m_entity_id;
}
void OAIBucketAccessControl::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIBucketAccessControl::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIBucketAccessControl::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIBucketAccessControl::getEtag() const {
    return m_etag;
}
void OAIBucketAccessControl::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIBucketAccessControl::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIBucketAccessControl::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIBucketAccessControl::getId() const {
    return m_id;
}
void OAIBucketAccessControl::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBucketAccessControl::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBucketAccessControl::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBucketAccessControl::getKind() const {
    return m_kind;
}
void OAIBucketAccessControl::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBucketAccessControl::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBucketAccessControl::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIBucketAccessControl::getRole() const {
    return m_role;
}
void OAIBucketAccessControl::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIBucketAccessControl::is_role_Set() const{
    return m_role_isSet;
}

bool OAIBucketAccessControl::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIBucketAccessControl::getSelfLink() const {
    return m_self_link;
}
void OAIBucketAccessControl::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIBucketAccessControl::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIBucketAccessControl::is_self_link_Valid() const{
    return m_self_link_isValid;
}

bool OAIBucketAccessControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBucketAccessControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
