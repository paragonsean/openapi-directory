# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bucket_access_control import BucketAccessControl
from openapi_server.models.bucket_cors_inner import BucketCorsInner
from openapi_server.models.bucket_lifecycle import BucketLifecycle
from openapi_server.models.bucket_logging import BucketLogging
from openapi_server.models.bucket_owner import BucketOwner
from openapi_server.models.bucket_versioning import BucketVersioning
from openapi_server.models.bucket_website import BucketWebsite
from openapi_server.models.object_access_control import ObjectAccessControl
from openapi_server import util


class Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: List[BucketAccessControl]=None, cors: List[BucketCorsInner]=None, default_object_acl: List[ObjectAccessControl]=None, etag: str=None, id: str=None, kind: str='storage#bucket', lifecycle: BucketLifecycle=None, location: str=None, logging: BucketLogging=None, metageneration: str=None, name: str=None, owner: BucketOwner=None, self_link: str=None, storage_class: str=None, time_created: datetime=None, versioning: BucketVersioning=None, website: BucketWebsite=None):
        """Bucket - a model defined in OpenAPI

        :param acl: The acl of this Bucket.
        :param cors: The cors of this Bucket.
        :param default_object_acl: The default_object_acl of this Bucket.
        :param etag: The etag of this Bucket.
        :param id: The id of this Bucket.
        :param kind: The kind of this Bucket.
        :param lifecycle: The lifecycle of this Bucket.
        :param location: The location of this Bucket.
        :param logging: The logging of this Bucket.
        :param metageneration: The metageneration of this Bucket.
        :param name: The name of this Bucket.
        :param owner: The owner of this Bucket.
        :param self_link: The self_link of this Bucket.
        :param storage_class: The storage_class of this Bucket.
        :param time_created: The time_created of this Bucket.
        :param versioning: The versioning of this Bucket.
        :param website: The website of this Bucket.
        """
        self.openapi_types = {
            'acl': List[BucketAccessControl],
            'cors': List[BucketCorsInner],
            'default_object_acl': List[ObjectAccessControl],
            'etag': str,
            'id': str,
            'kind': str,
            'lifecycle': BucketLifecycle,
            'location': str,
            'logging': BucketLogging,
            'metageneration': str,
            'name': str,
            'owner': BucketOwner,
            'self_link': str,
            'storage_class': str,
            'time_created': datetime,
            'versioning': BucketVersioning,
            'website': BucketWebsite
        }

        self.attribute_map = {
            'acl': 'acl',
            'cors': 'cors',
            'default_object_acl': 'defaultObjectAcl',
            'etag': 'etag',
            'id': 'id',
            'kind': 'kind',
            'lifecycle': 'lifecycle',
            'location': 'location',
            'logging': 'logging',
            'metageneration': 'metageneration',
            'name': 'name',
            'owner': 'owner',
            'self_link': 'selfLink',
            'storage_class': 'storageClass',
            'time_created': 'timeCreated',
            'versioning': 'versioning',
            'website': 'website'
        }

        self._acl = acl
        self._cors = cors
        self._default_object_acl = default_object_acl
        self._etag = etag
        self._id = id
        self._kind = kind
        self._lifecycle = lifecycle
        self._location = location
        self._logging = logging
        self._metageneration = metageneration
        self._name = name
        self._owner = owner
        self._self_link = self_link
        self._storage_class = storage_class
        self._time_created = time_created
        self._versioning = versioning
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket of this Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Bucket.

        Access controls on the bucket.

        :return: The acl of this Bucket.
        :rtype: List[BucketAccessControl]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Bucket.

        Access controls on the bucket.

        :param acl: The acl of this Bucket.
        :type acl: List[BucketAccessControl]
        """

        self._acl = acl

    @property
    def cors(self):
        """Gets the cors of this Bucket.

        The bucket's Cross-Origin Resource Sharing (CORS) configuration.

        :return: The cors of this Bucket.
        :rtype: List[BucketCorsInner]
        """
        return self._cors

    @cors.setter
    def cors(self, cors):
        """Sets the cors of this Bucket.

        The bucket's Cross-Origin Resource Sharing (CORS) configuration.

        :param cors: The cors of this Bucket.
        :type cors: List[BucketCorsInner]
        """

        self._cors = cors

    @property
    def default_object_acl(self):
        """Gets the default_object_acl of this Bucket.

        Default access controls to apply to new objects when no ACL is provided.

        :return: The default_object_acl of this Bucket.
        :rtype: List[ObjectAccessControl]
        """
        return self._default_object_acl

    @default_object_acl.setter
    def default_object_acl(self, default_object_acl):
        """Sets the default_object_acl of this Bucket.

        Default access controls to apply to new objects when no ACL is provided.

        :param default_object_acl: The default_object_acl of this Bucket.
        :type default_object_acl: List[ObjectAccessControl]
        """

        self._default_object_acl = default_object_acl

    @property
    def etag(self):
        """Gets the etag of this Bucket.

        HTTP 1.1 Entity tag for the bucket.

        :return: The etag of this Bucket.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Bucket.

        HTTP 1.1 Entity tag for the bucket.

        :param etag: The etag of this Bucket.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Bucket.

        The ID of the bucket.

        :return: The id of this Bucket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bucket.

        The ID of the bucket.

        :param id: The id of this Bucket.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Bucket.

        The kind of item this is. For buckets, this is always storage#bucket.

        :return: The kind of this Bucket.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Bucket.

        The kind of item this is. For buckets, this is always storage#bucket.

        :param kind: The kind of this Bucket.
        :type kind: str
        """

        self._kind = kind

    @property
    def lifecycle(self):
        """Gets the lifecycle of this Bucket.


        :return: The lifecycle of this Bucket.
        :rtype: BucketLifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle):
        """Sets the lifecycle of this Bucket.


        :param lifecycle: The lifecycle of this Bucket.
        :type lifecycle: BucketLifecycle
        """

        self._lifecycle = lifecycle

    @property
    def location(self):
        """Gets the location of this Bucket.

        The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Typical values are US and EU. Defaults to US. See the developer's guide for the authoritative list.

        :return: The location of this Bucket.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Bucket.

        The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Typical values are US and EU. Defaults to US. See the developer's guide for the authoritative list.

        :param location: The location of this Bucket.
        :type location: str
        """

        self._location = location

    @property
    def logging(self):
        """Gets the logging of this Bucket.


        :return: The logging of this Bucket.
        :rtype: BucketLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this Bucket.


        :param logging: The logging of this Bucket.
        :type logging: BucketLogging
        """

        self._logging = logging

    @property
    def metageneration(self):
        """Gets the metageneration of this Bucket.

        The metadata generation of this bucket.

        :return: The metageneration of this Bucket.
        :rtype: str
        """
        return self._metageneration

    @metageneration.setter
    def metageneration(self, metageneration):
        """Sets the metageneration of this Bucket.

        The metadata generation of this bucket.

        :param metageneration: The metageneration of this Bucket.
        :type metageneration: str
        """

        self._metageneration = metageneration

    @property
    def name(self):
        """Gets the name of this Bucket.

        The name of the bucket.

        :return: The name of this Bucket.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bucket.

        The name of the bucket.

        :param name: The name of this Bucket.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Bucket.


        :return: The owner of this Bucket.
        :rtype: BucketOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Bucket.


        :param owner: The owner of this Bucket.
        :type owner: BucketOwner
        """

        self._owner = owner

    @property
    def self_link(self):
        """Gets the self_link of this Bucket.

        The URI of this bucket.

        :return: The self_link of this Bucket.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Bucket.

        The URI of this bucket.

        :param self_link: The self_link of this Bucket.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def storage_class(self):
        """Gets the storage_class of this Bucket.

        The bucket's storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Typical values are STANDARD and DURABLE_REDUCED_AVAILABILITY. Defaults to STANDARD. See the developer's guide for the authoritative list.

        :return: The storage_class of this Bucket.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Bucket.

        The bucket's storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Typical values are STANDARD and DURABLE_REDUCED_AVAILABILITY. Defaults to STANDARD. See the developer's guide for the authoritative list.

        :param storage_class: The storage_class of this Bucket.
        :type storage_class: str
        """

        self._storage_class = storage_class

    @property
    def time_created(self):
        """Gets the time_created of this Bucket.

        Creation time of the bucket in RFC 3339 format.

        :return: The time_created of this Bucket.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Bucket.

        Creation time of the bucket in RFC 3339 format.

        :param time_created: The time_created of this Bucket.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def versioning(self):
        """Gets the versioning of this Bucket.


        :return: The versioning of this Bucket.
        :rtype: BucketVersioning
        """
        return self._versioning

    @versioning.setter
    def versioning(self, versioning):
        """Sets the versioning of this Bucket.


        :param versioning: The versioning of this Bucket.
        :type versioning: BucketVersioning
        """

        self._versioning = versioning

    @property
    def website(self):
        """Gets the website of this Bucket.


        :return: The website of this Bucket.
        :rtype: BucketWebsite
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Bucket.


        :param website: The website of this Bucket.
        :type website: BucketWebsite
        """

        self._website = website
