# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object import Object
from openapi_server import util


class Objects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[Object]=None, kind: str='storage#objects', next_page_token: str=None, prefixes: List[str]=None):
        """Objects - a model defined in OpenAPI

        :param items: The items of this Objects.
        :param kind: The kind of this Objects.
        :param next_page_token: The next_page_token of this Objects.
        :param prefixes: The prefixes of this Objects.
        """
        self.openapi_types = {
            'items': List[Object],
            'kind': str,
            'next_page_token': str,
            'prefixes': List[str]
        }

        self.attribute_map = {
            'items': 'items',
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'prefixes': 'prefixes'
        }

        self._items = items
        self._kind = kind
        self._next_page_token = next_page_token
        self._prefixes = prefixes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Objects':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Objects of this Objects.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this Objects.

        The list of items.

        :return: The items of this Objects.
        :rtype: List[Object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Objects.

        The list of items.

        :param items: The items of this Objects.
        :type items: List[Object]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this Objects.

        The kind of item this is. For lists of objects, this is always storage#objects.

        :return: The kind of this Objects.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Objects.

        The kind of item this is. For lists of objects, this is always storage#objects.

        :param kind: The kind of this Objects.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this Objects.

        The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.

        :return: The next_page_token of this Objects.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this Objects.

        The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.

        :param next_page_token: The next_page_token of this Objects.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def prefixes(self):
        """Gets the prefixes of this Objects.

        The list of prefixes of objects matching-but-not-listed up to and including the requested delimiter.

        :return: The prefixes of this Objects.
        :rtype: List[str]
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes):
        """Sets the prefixes of this Objects.

        The list of prefixes of objects matching-but-not-listed up to and including the requested delimiter.

        :param prefixes: The prefixes of this Objects.
        :type prefixes: List[str]
        """

        self._prefixes = prefixes
