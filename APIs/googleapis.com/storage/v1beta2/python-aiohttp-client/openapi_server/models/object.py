# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_access_control import ObjectAccessControl
from openapi_server.models.object_owner import ObjectOwner
from openapi_server import util


class Object(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: List[ObjectAccessControl]=None, bucket: str=None, cache_control: str=None, component_count: int=None, content_disposition: str=None, content_encoding: str=None, content_language: str=None, content_type: str=None, crc32c: str=None, etag: str=None, generation: str=None, id: str=None, kind: str='storage#object', md5_hash: str=None, media_link: str=None, metadata: Dict[str, str]=None, metageneration: str=None, name: str=None, owner: ObjectOwner=None, self_link: str=None, size: str=None, storage_class: str=None, time_deleted: datetime=None, updated: datetime=None):
        """Object - a model defined in OpenAPI

        :param acl: The acl of this Object.
        :param bucket: The bucket of this Object.
        :param cache_control: The cache_control of this Object.
        :param component_count: The component_count of this Object.
        :param content_disposition: The content_disposition of this Object.
        :param content_encoding: The content_encoding of this Object.
        :param content_language: The content_language of this Object.
        :param content_type: The content_type of this Object.
        :param crc32c: The crc32c of this Object.
        :param etag: The etag of this Object.
        :param generation: The generation of this Object.
        :param id: The id of this Object.
        :param kind: The kind of this Object.
        :param md5_hash: The md5_hash of this Object.
        :param media_link: The media_link of this Object.
        :param metadata: The metadata of this Object.
        :param metageneration: The metageneration of this Object.
        :param name: The name of this Object.
        :param owner: The owner of this Object.
        :param self_link: The self_link of this Object.
        :param size: The size of this Object.
        :param storage_class: The storage_class of this Object.
        :param time_deleted: The time_deleted of this Object.
        :param updated: The updated of this Object.
        """
        self.openapi_types = {
            'acl': List[ObjectAccessControl],
            'bucket': str,
            'cache_control': str,
            'component_count': int,
            'content_disposition': str,
            'content_encoding': str,
            'content_language': str,
            'content_type': str,
            'crc32c': str,
            'etag': str,
            'generation': str,
            'id': str,
            'kind': str,
            'md5_hash': str,
            'media_link': str,
            'metadata': Dict[str, str],
            'metageneration': str,
            'name': str,
            'owner': ObjectOwner,
            'self_link': str,
            'size': str,
            'storage_class': str,
            'time_deleted': datetime,
            'updated': datetime
        }

        self.attribute_map = {
            'acl': 'acl',
            'bucket': 'bucket',
            'cache_control': 'cacheControl',
            'component_count': 'componentCount',
            'content_disposition': 'contentDisposition',
            'content_encoding': 'contentEncoding',
            'content_language': 'contentLanguage',
            'content_type': 'contentType',
            'crc32c': 'crc32c',
            'etag': 'etag',
            'generation': 'generation',
            'id': 'id',
            'kind': 'kind',
            'md5_hash': 'md5Hash',
            'media_link': 'mediaLink',
            'metadata': 'metadata',
            'metageneration': 'metageneration',
            'name': 'name',
            'owner': 'owner',
            'self_link': 'selfLink',
            'size': 'size',
            'storage_class': 'storageClass',
            'time_deleted': 'timeDeleted',
            'updated': 'updated'
        }

        self._acl = acl
        self._bucket = bucket
        self._cache_control = cache_control
        self._component_count = component_count
        self._content_disposition = content_disposition
        self._content_encoding = content_encoding
        self._content_language = content_language
        self._content_type = content_type
        self._crc32c = crc32c
        self._etag = etag
        self._generation = generation
        self._id = id
        self._kind = kind
        self._md5_hash = md5_hash
        self._media_link = media_link
        self._metadata = metadata
        self._metageneration = metageneration
        self._name = name
        self._owner = owner
        self._self_link = self_link
        self._size = size
        self._storage_class = storage_class
        self._time_deleted = time_deleted
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Object':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Object of this Object.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Object.

        Access controls on the object.

        :return: The acl of this Object.
        :rtype: List[ObjectAccessControl]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Object.

        Access controls on the object.

        :param acl: The acl of this Object.
        :type acl: List[ObjectAccessControl]
        """

        self._acl = acl

    @property
    def bucket(self):
        """Gets the bucket of this Object.

        The bucket containing this object.

        :return: The bucket of this Object.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Object.

        The bucket containing this object.

        :param bucket: The bucket of this Object.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def cache_control(self):
        """Gets the cache_control of this Object.

        Cache-Control directive for the object data.

        :return: The cache_control of this Object.
        :rtype: str
        """
        return self._cache_control

    @cache_control.setter
    def cache_control(self, cache_control):
        """Sets the cache_control of this Object.

        Cache-Control directive for the object data.

        :param cache_control: The cache_control of this Object.
        :type cache_control: str
        """

        self._cache_control = cache_control

    @property
    def component_count(self):
        """Gets the component_count of this Object.

        Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.

        :return: The component_count of this Object.
        :rtype: int
        """
        return self._component_count

    @component_count.setter
    def component_count(self, component_count):
        """Sets the component_count of this Object.

        Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.

        :param component_count: The component_count of this Object.
        :type component_count: int
        """

        self._component_count = component_count

    @property
    def content_disposition(self):
        """Gets the content_disposition of this Object.

        Content-Disposition of the object data.

        :return: The content_disposition of this Object.
        :rtype: str
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this Object.

        Content-Disposition of the object data.

        :param content_disposition: The content_disposition of this Object.
        :type content_disposition: str
        """

        self._content_disposition = content_disposition

    @property
    def content_encoding(self):
        """Gets the content_encoding of this Object.

        Content-Encoding of the object data.

        :return: The content_encoding of this Object.
        :rtype: str
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this Object.

        Content-Encoding of the object data.

        :param content_encoding: The content_encoding of this Object.
        :type content_encoding: str
        """

        self._content_encoding = content_encoding

    @property
    def content_language(self):
        """Gets the content_language of this Object.

        Content-Language of the object data.

        :return: The content_language of this Object.
        :rtype: str
        """
        return self._content_language

    @content_language.setter
    def content_language(self, content_language):
        """Sets the content_language of this Object.

        Content-Language of the object data.

        :param content_language: The content_language of this Object.
        :type content_language: str
        """

        self._content_language = content_language

    @property
    def content_type(self):
        """Gets the content_type of this Object.

        Content-Type of the object data.

        :return: The content_type of this Object.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Object.

        Content-Type of the object data.

        :param content_type: The content_type of this Object.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def crc32c(self):
        """Gets the crc32c of this Object.

        CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.

        :return: The crc32c of this Object.
        :rtype: str
        """
        return self._crc32c

    @crc32c.setter
    def crc32c(self, crc32c):
        """Sets the crc32c of this Object.

        CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.

        :param crc32c: The crc32c of this Object.
        :type crc32c: str
        """

        self._crc32c = crc32c

    @property
    def etag(self):
        """Gets the etag of this Object.

        HTTP 1.1 Entity tag for the object.

        :return: The etag of this Object.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Object.

        HTTP 1.1 Entity tag for the object.

        :param etag: The etag of this Object.
        :type etag: str
        """

        self._etag = etag

    @property
    def generation(self):
        """Gets the generation of this Object.

        The content generation of this object. Used for object versioning.

        :return: The generation of this Object.
        :rtype: str
        """
        return self._generation

    @generation.setter
    def generation(self, generation):
        """Sets the generation of this Object.

        The content generation of this object. Used for object versioning.

        :param generation: The generation of this Object.
        :type generation: str
        """

        self._generation = generation

    @property
    def id(self):
        """Gets the id of this Object.

        The ID of the object.

        :return: The id of this Object.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Object.

        The ID of the object.

        :param id: The id of this Object.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Object.

        The kind of item this is. For objects, this is always storage#object.

        :return: The kind of this Object.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Object.

        The kind of item this is. For objects, this is always storage#object.

        :param kind: The kind of this Object.
        :type kind: str
        """

        self._kind = kind

    @property
    def md5_hash(self):
        """Gets the md5_hash of this Object.

        MD5 hash of the data; encoded using base64.

        :return: The md5_hash of this Object.
        :rtype: str
        """
        return self._md5_hash

    @md5_hash.setter
    def md5_hash(self, md5_hash):
        """Sets the md5_hash of this Object.

        MD5 hash of the data; encoded using base64.

        :param md5_hash: The md5_hash of this Object.
        :type md5_hash: str
        """

        self._md5_hash = md5_hash

    @property
    def media_link(self):
        """Gets the media_link of this Object.

        Media download link.

        :return: The media_link of this Object.
        :rtype: str
        """
        return self._media_link

    @media_link.setter
    def media_link(self, media_link):
        """Sets the media_link of this Object.

        Media download link.

        :param media_link: The media_link of this Object.
        :type media_link: str
        """

        self._media_link = media_link

    @property
    def metadata(self):
        """Gets the metadata of this Object.

        User-provided metadata, in key/value pairs.

        :return: The metadata of this Object.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Object.

        User-provided metadata, in key/value pairs.

        :param metadata: The metadata of this Object.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def metageneration(self):
        """Gets the metageneration of this Object.

        The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.

        :return: The metageneration of this Object.
        :rtype: str
        """
        return self._metageneration

    @metageneration.setter
    def metageneration(self, metageneration):
        """Sets the metageneration of this Object.

        The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.

        :param metageneration: The metageneration of this Object.
        :type metageneration: str
        """

        self._metageneration = metageneration

    @property
    def name(self):
        """Gets the name of this Object.

        The name of this object. Required if not specified by URL parameter.

        :return: The name of this Object.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Object.

        The name of this object. Required if not specified by URL parameter.

        :param name: The name of this Object.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Object.


        :return: The owner of this Object.
        :rtype: ObjectOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Object.


        :param owner: The owner of this Object.
        :type owner: ObjectOwner
        """

        self._owner = owner

    @property
    def self_link(self):
        """Gets the self_link of this Object.

        The link to this object.

        :return: The self_link of this Object.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Object.

        The link to this object.

        :param self_link: The self_link of this Object.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def size(self):
        """Gets the size of this Object.

        Content-Length of the data in bytes.

        :return: The size of this Object.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Object.

        Content-Length of the data in bytes.

        :param size: The size of this Object.
        :type size: str
        """

        self._size = size

    @property
    def storage_class(self):
        """Gets the storage_class of this Object.

        Storage class of the object.

        :return: The storage_class of this Object.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this Object.

        Storage class of the object.

        :param storage_class: The storage_class of this Object.
        :type storage_class: str
        """

        self._storage_class = storage_class

    @property
    def time_deleted(self):
        """Gets the time_deleted of this Object.

        Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.

        :return: The time_deleted of this Object.
        :rtype: datetime
        """
        return self._time_deleted

    @time_deleted.setter
    def time_deleted(self, time_deleted):
        """Sets the time_deleted of this Object.

        Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.

        :param time_deleted: The time_deleted of this Object.
        :type time_deleted: datetime
        """

        self._time_deleted = time_deleted

    @property
    def updated(self):
        """Gets the updated of this Object.

        Modification time of the object metadata in RFC 3339 format.

        :return: The updated of this Object.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Object.

        Modification time of the object metadata in RFC 3339 format.

        :param updated: The updated of this Object.
        :type updated: datetime
        """

        self._updated = updated
