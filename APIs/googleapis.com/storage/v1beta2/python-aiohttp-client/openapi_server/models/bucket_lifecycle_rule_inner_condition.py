# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BucketLifecycleRuleInnerCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, created_before: date=None, is_live: bool=None, num_newer_versions: int=None):
        """BucketLifecycleRuleInnerCondition - a model defined in OpenAPI

        :param age: The age of this BucketLifecycleRuleInnerCondition.
        :param created_before: The created_before of this BucketLifecycleRuleInnerCondition.
        :param is_live: The is_live of this BucketLifecycleRuleInnerCondition.
        :param num_newer_versions: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        """
        self.openapi_types = {
            'age': int,
            'created_before': date,
            'is_live': bool,
            'num_newer_versions': int
        }

        self.attribute_map = {
            'age': 'age',
            'created_before': 'createdBefore',
            'is_live': 'isLive',
            'num_newer_versions': 'numNewerVersions'
        }

        self._age = age
        self._created_before = created_before
        self._is_live = is_live
        self._num_newer_versions = num_newer_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BucketLifecycleRuleInnerCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket_lifecycle_rule_inner_condition of this BucketLifecycleRuleInnerCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this BucketLifecycleRuleInnerCondition.

        Age of an object (in days). This condition is satisfied when an object reaches the specified age.

        :return: The age of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this BucketLifecycleRuleInnerCondition.

        Age of an object (in days). This condition is satisfied when an object reaches the specified age.

        :param age: The age of this BucketLifecycleRuleInnerCondition.
        :type age: int
        """

        self._age = age

    @property
    def created_before(self):
        """Gets the created_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part, e.g. \"2013-01-15\". This condition is satisfied when an object is created before midnight of the specified date in UTC.

        :return: The created_before of this BucketLifecycleRuleInnerCondition.
        :rtype: date
        """
        return self._created_before

    @created_before.setter
    def created_before(self, created_before):
        """Sets the created_before of this BucketLifecycleRuleInnerCondition.

        A date in RFC 3339 format with only the date part, e.g. \"2013-01-15\". This condition is satisfied when an object is created before midnight of the specified date in UTC.

        :param created_before: The created_before of this BucketLifecycleRuleInnerCondition.
        :type created_before: date
        """

        self._created_before = created_before

    @property
    def is_live(self):
        """Gets the is_live of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.

        :return: The is_live of this BucketLifecycleRuleInnerCondition.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.

        :param is_live: The is_live of this BucketLifecycleRuleInnerCondition.
        :type is_live: bool
        """

        self._is_live = is_live

    @property
    def num_newer_versions(self):
        """Gets the num_newer_versions of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.

        :return: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        :rtype: int
        """
        return self._num_newer_versions

    @num_newer_versions.setter
    def num_newer_versions(self, num_newer_versions):
        """Sets the num_newer_versions of this BucketLifecycleRuleInnerCondition.

        Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.

        :param num_newer_versions: The num_newer_versions of this BucketLifecycleRuleInnerCondition.
        :type num_newer_versions: int
        """

        self._num_newer_versions = num_newer_versions
