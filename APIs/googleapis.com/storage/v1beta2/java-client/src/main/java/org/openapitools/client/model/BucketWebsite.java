/*
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bucket&#39;s website configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:12.695403-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BucketWebsite {
  public static final String SERIALIZED_NAME_MAIN_PAGE_SUFFIX = "mainPageSuffix";
  @SerializedName(SERIALIZED_NAME_MAIN_PAGE_SUFFIX)
  private String mainPageSuffix;

  public static final String SERIALIZED_NAME_NOT_FOUND_PAGE = "notFoundPage";
  @SerializedName(SERIALIZED_NAME_NOT_FOUND_PAGE)
  private String notFoundPage;

  public BucketWebsite() {
  }

  public BucketWebsite mainPageSuffix(String mainPageSuffix) {
    this.mainPageSuffix = mainPageSuffix;
    return this;
  }

  /**
   * Behaves as the bucket&#39;s directory index where missing objects are treated as potential directories.
   * @return mainPageSuffix
   */
  @javax.annotation.Nullable
  public String getMainPageSuffix() {
    return mainPageSuffix;
  }

  public void setMainPageSuffix(String mainPageSuffix) {
    this.mainPageSuffix = mainPageSuffix;
  }


  public BucketWebsite notFoundPage(String notFoundPage) {
    this.notFoundPage = notFoundPage;
    return this;
  }

  /**
   * The custom object to return when a requested resource is not found.
   * @return notFoundPage
   */
  @javax.annotation.Nullable
  public String getNotFoundPage() {
    return notFoundPage;
  }

  public void setNotFoundPage(String notFoundPage) {
    this.notFoundPage = notFoundPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BucketWebsite bucketWebsite = (BucketWebsite) o;
    return Objects.equals(this.mainPageSuffix, bucketWebsite.mainPageSuffix) &&
        Objects.equals(this.notFoundPage, bucketWebsite.notFoundPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mainPageSuffix, notFoundPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BucketWebsite {\n");
    sb.append("    mainPageSuffix: ").append(toIndentedString(mainPageSuffix)).append("\n");
    sb.append("    notFoundPage: ").append(toIndentedString(notFoundPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mainPageSuffix");
    openapiFields.add("notFoundPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BucketWebsite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BucketWebsite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BucketWebsite is not found in the empty JSON string", BucketWebsite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BucketWebsite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BucketWebsite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mainPageSuffix") != null && !jsonObj.get("mainPageSuffix").isJsonNull()) && !jsonObj.get("mainPageSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mainPageSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mainPageSuffix").toString()));
      }
      if ((jsonObj.get("notFoundPage") != null && !jsonObj.get("notFoundPage").isJsonNull()) && !jsonObj.get("notFoundPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notFoundPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notFoundPage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BucketWebsite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BucketWebsite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BucketWebsite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BucketWebsite.class));

       return (TypeAdapter<T>) new TypeAdapter<BucketWebsite>() {
           @Override
           public void write(JsonWriter out, BucketWebsite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BucketWebsite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BucketWebsite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BucketWebsite
   * @throws IOException if the JSON string is invalid with respect to BucketWebsite
   */
  public static BucketWebsite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BucketWebsite.class);
  }

  /**
   * Convert an instance of BucketWebsite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

