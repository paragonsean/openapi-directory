/*
 * Cloud Storage JSON API
 * Lets you store and retrieve potentially-large, immutable data objects.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Bucket;
import org.openapitools.client.model.Buckets;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BucketsApi
 */
@Disabled
public class BucketsApiTest {

    private final BucketsApi api = new BucketsApi();

    /**
     * Permanently deletes an empty bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsDeleteTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        api.storageBucketsDelete(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch);
        // TODO: test validations
    }

    /**
     * Returns metadata for the specified bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsGetTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String projection = null;
        Bucket response = api.storageBucketsGet(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, projection);
        // TODO: test validations
    }

    /**
     * Creates a new bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsInsertTest() throws ApiException {
        String project = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String projection = null;
        Bucket bucket = null;
        Bucket response = api.storageBucketsInsert(project, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, projection, bucket);
        // TODO: test validations
    }

    /**
     * Retrieves a list of buckets for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsListTest() throws ApiException {
        String project = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        String pageToken = null;
        String projection = null;
        Buckets response = api.storageBucketsList(project, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, pageToken, projection);
        // TODO: test validations
    }

    /**
     * Updates a bucket. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsPatchTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String projection = null;
        Bucket bucket2 = null;
        Bucket response = api.storageBucketsPatch(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, projection, bucket2);
        // TODO: test validations
    }

    /**
     * Updates a bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageBucketsUpdateTest() throws ApiException {
        String bucket = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String ifMetagenerationMatch = null;
        String ifMetagenerationNotMatch = null;
        String projection = null;
        Bucket bucket2 = null;
        Bucket response = api.storageBucketsUpdate(bucket, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ifMetagenerationMatch, ifMetagenerationNotMatch, projection, bucket2);
        // TODO: test validations
    }

}
