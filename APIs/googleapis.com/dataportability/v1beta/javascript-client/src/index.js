/**
 * Data Portability API
 * The Data Portability API lets you build applications that request authorization from a user to move a copy of data from Google services into your application. This enables data portability and facilitates switching services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import InitiatePortabilityArchiveRequest from './model/InitiatePortabilityArchiveRequest';
import InitiatePortabilityArchiveResponse from './model/InitiatePortabilityArchiveResponse';
import PortabilityArchiveState from './model/PortabilityArchiveState';
import RetryPortabilityArchiveResponse from './model/RetryPortabilityArchiveResponse';
import ArchiveJobsApi from './api/ArchiveJobsApi';
import AuthorizationApi from './api/AuthorizationApi';
import PortabilityArchiveApi from './api/PortabilityArchiveApi';


/**
* The Data Portability API lets you build applications that request authorization from a user to move a copy of data from Google services into your application. This enables data portability and facilitates switching services..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DataPortabilityApi = require('index'); // See note below*.
* var xxxSvc = new DataPortabilityApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DataPortabilityApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DataPortabilityApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DataPortabilityApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The InitiatePortabilityArchiveRequest model constructor.
     * @property {module:model/InitiatePortabilityArchiveRequest}
     */
    InitiatePortabilityArchiveRequest,

    /**
     * The InitiatePortabilityArchiveResponse model constructor.
     * @property {module:model/InitiatePortabilityArchiveResponse}
     */
    InitiatePortabilityArchiveResponse,

    /**
     * The PortabilityArchiveState model constructor.
     * @property {module:model/PortabilityArchiveState}
     */
    PortabilityArchiveState,

    /**
     * The RetryPortabilityArchiveResponse model constructor.
     * @property {module:model/RetryPortabilityArchiveResponse}
     */
    RetryPortabilityArchiveResponse,

    /**
    * The ArchiveJobsApi service constructor.
    * @property {module:api/ArchiveJobsApi}
    */
    ArchiveJobsApi,

    /**
    * The AuthorizationApi service constructor.
    * @property {module:api/AuthorizationApi}
    */
    AuthorizationApi,

    /**
    * The PortabilityArchiveApi service constructor.
    * @property {module:api/PortabilityArchiveApi}
    */
    PortabilityArchiveApi
};
