# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PortabilityArchiveState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, state: str=None, urls: List[str]=None):
        """PortabilityArchiveState - a model defined in OpenAPI

        :param name: The name of this PortabilityArchiveState.
        :param state: The state of this PortabilityArchiveState.
        :param urls: The urls of this PortabilityArchiveState.
        """
        self.openapi_types = {
            'name': str,
            'state': str,
            'urls': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'state': 'state',
            'urls': 'urls'
        }

        self._name = name
        self._state = state
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PortabilityArchiveState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PortabilityArchiveState of this PortabilityArchiveState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PortabilityArchiveState.

        The resource name of ArchiveJob's PortabilityArchiveState singleton. The format is: archiveJobs/{archive_job}/portabilityArchiveState. archive_job is the job ID provided in the request.

        :return: The name of this PortabilityArchiveState.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortabilityArchiveState.

        The resource name of ArchiveJob's PortabilityArchiveState singleton. The format is: archiveJobs/{archive_job}/portabilityArchiveState. archive_job is the job ID provided in the request.

        :param name: The name of this PortabilityArchiveState.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this PortabilityArchiveState.

        Resource that represents the state of the Archive job.

        :return: The state of this PortabilityArchiveState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PortabilityArchiveState.

        Resource that represents the state of the Archive job.

        :param state: The state of this PortabilityArchiveState.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "IN_PROGRESS", "COMPLETE", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def urls(self):
        """Gets the urls of this PortabilityArchiveState.

        If the state is complete, this method returns the signed URLs of the objects in the Cloud Storage bucket.

        :return: The urls of this PortabilityArchiveState.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this PortabilityArchiveState.

        If the state is complete, this method returns the signed URLs of the objects in the Cloud Storage bucket.

        :param urls: The urls of this PortabilityArchiveState.
        :type urls: List[str]
        """

        self._urls = urls
