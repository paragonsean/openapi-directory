/*
 * Data Portability API
 * The Data Portability API lets you build applications that request authorization from a user to move a copy of data from Google services into your application. This enables data portability and facilitates switching services.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InitiatePortabilityArchiveRequest;
import org.openapitools.client.model.InitiatePortabilityArchiveResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortabilityArchiveApi
 */
@Disabled
public class PortabilityArchiveApiTest {

    private final PortabilityArchiveApi api = new PortabilityArchiveApi();

    /**
     * Initiates a new Archive job for the Portability API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataportabilityPortabilityArchiveInitiateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InitiatePortabilityArchiveRequest initiatePortabilityArchiveRequest = null;
        InitiatePortabilityArchiveResponse response = api.dataportabilityPortabilityArchiveInitiate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, initiatePortabilityArchiveRequest);
        // TODO: test validations
    }

}
