# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebAppConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, app_id: str=None, auth_domain: str=None, database_url: str=None, location_id: str=None, measurement_id: str=None, messaging_sender_id: str=None, project_id: str=None, storage_bucket: str=None):
        """WebAppConfig - a model defined in OpenAPI

        :param api_key: The api_key of this WebAppConfig.
        :param app_id: The app_id of this WebAppConfig.
        :param auth_domain: The auth_domain of this WebAppConfig.
        :param database_url: The database_url of this WebAppConfig.
        :param location_id: The location_id of this WebAppConfig.
        :param measurement_id: The measurement_id of this WebAppConfig.
        :param messaging_sender_id: The messaging_sender_id of this WebAppConfig.
        :param project_id: The project_id of this WebAppConfig.
        :param storage_bucket: The storage_bucket of this WebAppConfig.
        """
        self.openapi_types = {
            'api_key': str,
            'app_id': str,
            'auth_domain': str,
            'database_url': str,
            'location_id': str,
            'measurement_id': str,
            'messaging_sender_id': str,
            'project_id': str,
            'storage_bucket': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'app_id': 'appId',
            'auth_domain': 'authDomain',
            'database_url': 'databaseURL',
            'location_id': 'locationId',
            'measurement_id': 'measurementId',
            'messaging_sender_id': 'messagingSenderId',
            'project_id': 'projectId',
            'storage_bucket': 'storageBucket'
        }

        self._api_key = api_key
        self._app_id = app_id
        self._auth_domain = auth_domain
        self._database_url = database_url
        self._location_id = location_id
        self._measurement_id = measurement_id
        self._messaging_sender_id = messaging_sender_id
        self._project_id = project_id
        self._storage_bucket = storage_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebAppConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebAppConfig of this WebAppConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this WebAppConfig.

        The [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key associated with the `WebApp`. Note that this value is _not_ the [`apiKeyId`](../projects.webApps#WebApp.FIELDS.api_key_id) (the UID) of the API key associated with the `WebApp`.

        :return: The api_key of this WebAppConfig.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this WebAppConfig.

        The [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key associated with the `WebApp`. Note that this value is _not_ the [`apiKeyId`](../projects.webApps#WebApp.FIELDS.api_key_id) (the UID) of the API key associated with the `WebApp`.

        :param api_key: The api_key of this WebAppConfig.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def app_id(self):
        """Gets the app_id of this WebAppConfig.

        Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`.

        :return: The app_id of this WebAppConfig.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this WebAppConfig.

        Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`.

        :param app_id: The app_id of this WebAppConfig.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def auth_domain(self):
        """Gets the auth_domain of this WebAppConfig.

        The domain Firebase Auth configures for OAuth redirects, in the format: PROJECT_ID.firebaseapp.com

        :return: The auth_domain of this WebAppConfig.
        :rtype: str
        """
        return self._auth_domain

    @auth_domain.setter
    def auth_domain(self, auth_domain):
        """Sets the auth_domain of this WebAppConfig.

        The domain Firebase Auth configures for OAuth redirects, in the format: PROJECT_ID.firebaseapp.com

        :param auth_domain: The auth_domain of this WebAppConfig.
        :type auth_domain: str
        """

        self._auth_domain = auth_domain

    @property
    def database_url(self):
        """Gets the database_url of this WebAppConfig.

        **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.

        :return: The database_url of this WebAppConfig.
        :rtype: str
        """
        return self._database_url

    @database_url.setter
    def database_url(self, database_url):
        """Sets the database_url of this WebAppConfig.

        **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.

        :param database_url: The database_url of this WebAppConfig.
        :type database_url: str
        """

        self._database_url = database_url

    @property
    def location_id(self):
        """Gets the location_id of this WebAppConfig.

        **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :return: The location_id of this WebAppConfig.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this WebAppConfig.

        **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :param location_id: The location_id of this WebAppConfig.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def measurement_id(self):
        """Gets the measurement_id of this WebAppConfig.

        The unique Google-assigned identifier of the Google Analytics web stream associated with the `WebApp`. Firebase SDKs use this ID to interact with Google Analytics APIs. This field is only present if the `WebApp` is linked to a web stream in a Google Analytics App + Web property. Learn more about this ID and Google Analytics web streams in the [Analytics documentation](https://support.google.com/analytics/answer/9304153). To generate a `measurementId` and link the `WebApp` with a Google Analytics web stream, call [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics). For apps using the Firebase JavaScript SDK v7.20.0 and later, Firebase dynamically fetches the `measurementId` when your app initializes Analytics. Having this ID in your config object is optional, but it does serve as a fallback in the rare case that the dynamic fetch fails.

        :return: The measurement_id of this WebAppConfig.
        :rtype: str
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id):
        """Sets the measurement_id of this WebAppConfig.

        The unique Google-assigned identifier of the Google Analytics web stream associated with the `WebApp`. Firebase SDKs use this ID to interact with Google Analytics APIs. This field is only present if the `WebApp` is linked to a web stream in a Google Analytics App + Web property. Learn more about this ID and Google Analytics web streams in the [Analytics documentation](https://support.google.com/analytics/answer/9304153). To generate a `measurementId` and link the `WebApp` with a Google Analytics web stream, call [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics). For apps using the Firebase JavaScript SDK v7.20.0 and later, Firebase dynamically fetches the `measurementId` when your app initializes Analytics. Having this ID in your config object is optional, but it does serve as a fallback in the rare case that the dynamic fetch fails.

        :param measurement_id: The measurement_id of this WebAppConfig.
        :type measurement_id: str
        """

        self._measurement_id = measurement_id

    @property
    def messaging_sender_id(self):
        """Gets the messaging_sender_id of this WebAppConfig.

        The sender ID for use with Firebase Cloud Messaging.

        :return: The messaging_sender_id of this WebAppConfig.
        :rtype: str
        """
        return self._messaging_sender_id

    @messaging_sender_id.setter
    def messaging_sender_id(self, messaging_sender_id):
        """Sets the messaging_sender_id of this WebAppConfig.

        The sender ID for use with Firebase Cloud Messaging.

        :param messaging_sender_id: The messaging_sender_id of this WebAppConfig.
        :type messaging_sender_id: str
        """

        self._messaging_sender_id = messaging_sender_id

    @property
    def project_id(self):
        """Gets the project_id of this WebAppConfig.

        Immutable. A user-assigned unique identifier for the `FirebaseProject`.

        :return: The project_id of this WebAppConfig.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this WebAppConfig.

        Immutable. A user-assigned unique identifier for the `FirebaseProject`.

        :param project_id: The project_id of this WebAppConfig.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def storage_bucket(self):
        """Gets the storage_bucket of this WebAppConfig.

        **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.

        :return: The storage_bucket of this WebAppConfig.
        :rtype: str
        """
        return self._storage_bucket

    @storage_bucket.setter
    def storage_bucket(self, storage_bucket):
        """Sets the storage_bucket of this WebAppConfig.

        **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.

        :param storage_bucket: The storage_bucket of this WebAppConfig.
        :type storage_bucket: str
        """

        self._storage_bucket = storage_bucket
