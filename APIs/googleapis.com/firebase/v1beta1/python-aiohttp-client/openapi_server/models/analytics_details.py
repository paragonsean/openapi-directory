# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analytics_property import AnalyticsProperty
from openapi_server.models.stream_mapping import StreamMapping
from openapi_server import util


class AnalyticsDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analytics_property: AnalyticsProperty=None, stream_mappings: List[StreamMapping]=None):
        """AnalyticsDetails - a model defined in OpenAPI

        :param analytics_property: The analytics_property of this AnalyticsDetails.
        :param stream_mappings: The stream_mappings of this AnalyticsDetails.
        """
        self.openapi_types = {
            'analytics_property': AnalyticsProperty,
            'stream_mappings': List[StreamMapping]
        }

        self.attribute_map = {
            'analytics_property': 'analyticsProperty',
            'stream_mappings': 'streamMappings'
        }

        self._analytics_property = analytics_property
        self._stream_mappings = stream_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyticsDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyticsDetails of this AnalyticsDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analytics_property(self):
        """Gets the analytics_property of this AnalyticsDetails.


        :return: The analytics_property of this AnalyticsDetails.
        :rtype: AnalyticsProperty
        """
        return self._analytics_property

    @analytics_property.setter
    def analytics_property(self, analytics_property):
        """Sets the analytics_property of this AnalyticsDetails.


        :param analytics_property: The analytics_property of this AnalyticsDetails.
        :type analytics_property: AnalyticsProperty
        """

        self._analytics_property = analytics_property

    @property
    def stream_mappings(self):
        """Gets the stream_mappings of this AnalyticsDetails.

         - For `AndroidApps` and `IosApps`: a map of `app` to `streamId` for each Firebase App in the specified `FirebaseProject`. Each `app` and `streamId` appears only once. - For `WebApps`: a map of `app` to `streamId` and `measurementId` for each `WebApp` in the specified `FirebaseProject`. Each `app`, `streamId`, and `measurementId` appears only once.

        :return: The stream_mappings of this AnalyticsDetails.
        :rtype: List[StreamMapping]
        """
        return self._stream_mappings

    @stream_mappings.setter
    def stream_mappings(self, stream_mappings):
        """Sets the stream_mappings of this AnalyticsDetails.

         - For `AndroidApps` and `IosApps`: a map of `app` to `streamId` for each Firebase App in the specified `FirebaseProject`. Each `app` and `streamId` appears only once. - For `WebApps`: a map of `app` to `streamId` and `measurementId` for each `WebApp` in the specified `FirebaseProject`. Each `app`, `streamId`, and `measurementId` appears only once.

        :param stream_mappings: The stream_mappings of this AnalyticsDetails.
        :type stream_mappings: List[StreamMapping]
        """

        self._stream_mappings = stream_mappings
