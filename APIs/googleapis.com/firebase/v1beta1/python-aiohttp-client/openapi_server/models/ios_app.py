# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IosApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_id: str=None, app_id: str=None, app_store_id: str=None, bundle_id: str=None, display_name: str=None, etag: str=None, expire_time: str=None, name: str=None, project_id: str=None, state: str=None, team_id: str=None):
        """IosApp - a model defined in OpenAPI

        :param api_key_id: The api_key_id of this IosApp.
        :param app_id: The app_id of this IosApp.
        :param app_store_id: The app_store_id of this IosApp.
        :param bundle_id: The bundle_id of this IosApp.
        :param display_name: The display_name of this IosApp.
        :param etag: The etag of this IosApp.
        :param expire_time: The expire_time of this IosApp.
        :param name: The name of this IosApp.
        :param project_id: The project_id of this IosApp.
        :param state: The state of this IosApp.
        :param team_id: The team_id of this IosApp.
        """
        self.openapi_types = {
            'api_key_id': str,
            'app_id': str,
            'app_store_id': str,
            'bundle_id': str,
            'display_name': str,
            'etag': str,
            'expire_time': str,
            'name': str,
            'project_id': str,
            'state': str,
            'team_id': str
        }

        self.attribute_map = {
            'api_key_id': 'apiKeyId',
            'app_id': 'appId',
            'app_store_id': 'appStoreId',
            'bundle_id': 'bundleId',
            'display_name': 'displayName',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'name': 'name',
            'project_id': 'projectId',
            'state': 'state',
            'team_id': 'teamId'
        }

        self._api_key_id = api_key_id
        self._app_id = app_id
        self._app_store_id = app_store_id
        self._bundle_id = bundle_id
        self._display_name = display_name
        self._etag = etag
        self._expire_time = expire_time
        self._name = name
        self._project_id = project_id
        self._state = state
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IosApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IosApp of this IosApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_id(self):
        """Gets the api_key_id of this IosApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :return: The api_key_id of this IosApp.
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this IosApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :param api_key_id: The api_key_id of this IosApp.
        :type api_key_id: str
        """

        self._api_key_id = api_key_id

    @property
    def app_id(self):
        """Gets the app_id of this IosApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :return: The app_id of this IosApp.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this IosApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :param app_id: The app_id of this IosApp.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_store_id(self):
        """Gets the app_store_id of this IosApp.

        The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.

        :return: The app_store_id of this IosApp.
        :rtype: str
        """
        return self._app_store_id

    @app_store_id.setter
    def app_store_id(self, app_store_id):
        """Sets the app_store_id of this IosApp.

        The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.

        :param app_store_id: The app_store_id of this IosApp.
        :type app_store_id: str
        """

        self._app_store_id = app_store_id

    @property
    def bundle_id(self):
        """Gets the bundle_id of this IosApp.

        Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.

        :return: The bundle_id of this IosApp.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this IosApp.

        Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.

        :param bundle_id: The bundle_id of this IosApp.
        :type bundle_id: str
        """

        self._bundle_id = bundle_id

    @property
    def display_name(self):
        """Gets the display_name of this IosApp.

        The user-assigned display name for the `IosApp`.

        :return: The display_name of this IosApp.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IosApp.

        The user-assigned display name for the `IosApp`.

        :param display_name: The display_name of this IosApp.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this IosApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :return: The etag of this IosApp.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this IosApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :param etag: The etag of this IosApp.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this IosApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :return: The expire_time of this IosApp.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this IosApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :param expire_time: The expire_time of this IosApp.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this IosApp.

        The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).

        :return: The name of this IosApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IosApp.

        The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).

        :param name: The name of this IosApp.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this IosApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`.

        :return: The project_id of this IosApp.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this IosApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`.

        :param project_id: The project_id of this IosApp.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this IosApp.

        Output only. The lifecycle state of the App.

        :return: The state of this IosApp.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IosApp.

        Output only. The lifecycle state of the App.

        :param state: The state of this IosApp.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def team_id(self):
        """Gets the team_id of this IosApp.

        The Apple Developer Team ID associated with the App in the App Store.

        :return: The team_id of this IosApp.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this IosApp.

        The Apple Developer Team ID associated with the App in the App Store.

        :param team_id: The team_id of this IosApp.
        :type team_id: str
        """

        self._team_id = team_id
