# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.default_resources import DefaultResources
from openapi_server import util


class FirebaseProject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, display_name: str=None, etag: str=None, name: str=None, project_id: str=None, project_number: str=None, resources: DefaultResources=None, state: str=None):
        """FirebaseProject - a model defined in OpenAPI

        :param annotations: The annotations of this FirebaseProject.
        :param display_name: The display_name of this FirebaseProject.
        :param etag: The etag of this FirebaseProject.
        :param name: The name of this FirebaseProject.
        :param project_id: The project_id of this FirebaseProject.
        :param project_number: The project_number of this FirebaseProject.
        :param resources: The resources of this FirebaseProject.
        :param state: The state of this FirebaseProject.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'display_name': str,
            'etag': str,
            'name': str,
            'project_id': str,
            'project_number': str,
            'resources': DefaultResources,
            'state': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'project_id': 'projectId',
            'project_number': 'projectNumber',
            'resources': 'resources',
            'state': 'state'
        }

        self._annotations = annotations
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._project_id = project_id
        self._project_number = project_number
        self._resources = resources
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirebaseProject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirebaseProject of this FirebaseProject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this FirebaseProject.

        A set of user-defined annotations for the FirebaseProject. Learn more about annotations in Google's [AIP-128 standard](https://google.aip.dev/128#annotations). These annotations are intended solely for developers and client-side tools. Firebase services will not mutate this annotations set.

        :return: The annotations of this FirebaseProject.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this FirebaseProject.

        A set of user-defined annotations for the FirebaseProject. Learn more about annotations in Google's [AIP-128 standard](https://google.aip.dev/128#annotations). These annotations are intended solely for developers and client-side tools. Firebase services will not mutate this annotations set.

        :param annotations: The annotations of this FirebaseProject.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def display_name(self):
        """Gets the display_name of this FirebaseProject.

        The user-assigned display name of the Project.

        :return: The display_name of this FirebaseProject.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FirebaseProject.

        The user-assigned display name of the Project.

        :param display_name: The display_name of this FirebaseProject.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this FirebaseProject.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :return: The etag of this FirebaseProject.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this FirebaseProject.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :param etag: The etag of this FirebaseProject.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this FirebaseProject.

        The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.

        :return: The name of this FirebaseProject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirebaseProject.

        The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.

        :param name: The name of this FirebaseProject.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this FirebaseProject.

        Output only. Immutable. A user-assigned unique identifier for the Project. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it should generally be treated as a convenience alias to reference the Project.

        :return: The project_id of this FirebaseProject.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this FirebaseProject.

        Output only. Immutable. A user-assigned unique identifier for the Project. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it should generally be treated as a convenience alias to reference the Project.

        :param project_id: The project_id of this FirebaseProject.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_number(self):
        """Gets the project_number of this FirebaseProject.

        Output only. Immutable. The globally unique, Google-assigned canonical identifier for the Project. Use this identifier when configuring integrations and/or making API calls to Firebase or third-party services.

        :return: The project_number of this FirebaseProject.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this FirebaseProject.

        Output only. Immutable. The globally unique, Google-assigned canonical identifier for the Project. Use this identifier when configuring integrations and/or making API calls to Firebase or third-party services.

        :param project_number: The project_number of this FirebaseProject.
        :type project_number: str
        """

        self._project_number = project_number

    @property
    def resources(self):
        """Gets the resources of this FirebaseProject.


        :return: The resources of this FirebaseProject.
        :rtype: DefaultResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this FirebaseProject.


        :param resources: The resources of this FirebaseProject.
        :type resources: DefaultResources
        """

        self._resources = resources

    @property
    def state(self):
        """Gets the state of this FirebaseProject.

        Output only. The lifecycle state of the Project.

        :return: The state of this FirebaseProject.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FirebaseProject.

        Output only. The lifecycle state of the Project.

        :param state: The state of this FirebaseProject.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
