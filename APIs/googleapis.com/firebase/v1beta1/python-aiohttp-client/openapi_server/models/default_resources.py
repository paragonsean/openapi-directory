# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DefaultResources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosting_site: str=None, location_id: str=None, realtime_database_instance: str=None, storage_bucket: str=None):
        """DefaultResources - a model defined in OpenAPI

        :param hosting_site: The hosting_site of this DefaultResources.
        :param location_id: The location_id of this DefaultResources.
        :param realtime_database_instance: The realtime_database_instance of this DefaultResources.
        :param storage_bucket: The storage_bucket of this DefaultResources.
        """
        self.openapi_types = {
            'hosting_site': str,
            'location_id': str,
            'realtime_database_instance': str,
            'storage_bucket': str
        }

        self.attribute_map = {
            'hosting_site': 'hostingSite',
            'location_id': 'locationId',
            'realtime_database_instance': 'realtimeDatabaseInstance',
            'storage_bucket': 'storageBucket'
        }

        self._hosting_site = hosting_site
        self._location_id = location_id
        self._realtime_database_instance = realtime_database_instance
        self._storage_bucket = storage_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultResources':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultResources of this DefaultResources.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosting_site(self):
        """Gets the hosting_site of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Firebase Hosting site name using the [ListSites](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/projects.sites/list) within the Firebase Hosting REST API. Note that the default site for the Project might not yet be provisioned, so the return might not contain a default site._ The default Firebase Hosting site name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Hosting site in another project (learn more about creating non-default, [additional sites](https://firebase.google.com/docs/hosting/multisites)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Hosting site name. For example, if your `projectId` is `myproject123`, your default Hosting site name might be: `myproject123-a5c16`

        :return: The hosting_site of this DefaultResources.
        :rtype: str
        """
        return self._hosting_site

    @hosting_site.setter
    def hosting_site(self, hosting_site):
        """Sets the hosting_site of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Firebase Hosting site name using the [ListSites](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/projects.sites/list) within the Firebase Hosting REST API. Note that the default site for the Project might not yet be provisioned, so the return might not contain a default site._ The default Firebase Hosting site name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Hosting site in another project (learn more about creating non-default, [additional sites](https://firebase.google.com/docs/hosting/multisites)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Hosting site name. For example, if your `projectId` is `myproject123`, your default Hosting site name might be: `myproject123-a5c16`

        :param hosting_site: The hosting_site of this DefaultResources.
        :type hosting_site: str
        """

        self._hosting_site = hosting_site

    @property
    def location_id(self):
        """Gets the location_id of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :return: The location_id of this DefaultResources.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :param location_id: The location_id of this DefaultResources.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def realtime_database_instance(self):
        """Gets the realtime_database_instance of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database instance name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Realtime Database instance in another project (learn more about [database sharding](https://firebase.google.com/docs/database/usage/sharding)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Realtime Database instance name. For example, if your `projectId` is `myproject123`, your default database instance name might be: `myproject123-a5c16`

        :return: The realtime_database_instance of this DefaultResources.
        :rtype: str
        """
        return self._realtime_database_instance

    @realtime_database_instance.setter
    def realtime_database_instance(self, realtime_database_instance):
        """Sets the realtime_database_instance of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database instance name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Realtime Database instance in another project (learn more about [database sharding](https://firebase.google.com/docs/database/usage/sharding)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Realtime Database instance name. For example, if your `projectId` is `myproject123`, your default database instance name might be: `myproject123-a5c16`

        :param realtime_database_instance: The realtime_database_instance of this DefaultResources.
        :type realtime_database_instance: str
        """

        self._realtime_database_instance = realtime_database_instance

    @property
    def storage_bucket(self):
        """Gets the storage_bucket of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket, in the format: PROJECT_ID.appspot.com

        :return: The storage_bucket of this DefaultResources.
        :rtype: str
        """
        return self._storage_bucket

    @storage_bucket.setter
    def storage_bucket(self, storage_bucket):
        """Sets the storage_bucket of this DefaultResources.

        Output only. **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket, in the format: PROJECT_ID.appspot.com

        :param storage_bucket: The storage_bucket of this DefaultResources.
        :type storage_bucket: str
        """

        self._storage_bucket = storage_bucket
