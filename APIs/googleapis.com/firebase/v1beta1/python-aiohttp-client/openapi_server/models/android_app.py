# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AndroidApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_id: str=None, app_id: str=None, display_name: str=None, etag: str=None, expire_time: str=None, name: str=None, package_name: str=None, project_id: str=None, sha1_hashes: List[str]=None, sha256_hashes: List[str]=None, state: str=None):
        """AndroidApp - a model defined in OpenAPI

        :param api_key_id: The api_key_id of this AndroidApp.
        :param app_id: The app_id of this AndroidApp.
        :param display_name: The display_name of this AndroidApp.
        :param etag: The etag of this AndroidApp.
        :param expire_time: The expire_time of this AndroidApp.
        :param name: The name of this AndroidApp.
        :param package_name: The package_name of this AndroidApp.
        :param project_id: The project_id of this AndroidApp.
        :param sha1_hashes: The sha1_hashes of this AndroidApp.
        :param sha256_hashes: The sha256_hashes of this AndroidApp.
        :param state: The state of this AndroidApp.
        """
        self.openapi_types = {
            'api_key_id': str,
            'app_id': str,
            'display_name': str,
            'etag': str,
            'expire_time': str,
            'name': str,
            'package_name': str,
            'project_id': str,
            'sha1_hashes': List[str],
            'sha256_hashes': List[str],
            'state': str
        }

        self.attribute_map = {
            'api_key_id': 'apiKeyId',
            'app_id': 'appId',
            'display_name': 'displayName',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'name': 'name',
            'package_name': 'packageName',
            'project_id': 'projectId',
            'sha1_hashes': 'sha1Hashes',
            'sha256_hashes': 'sha256Hashes',
            'state': 'state'
        }

        self._api_key_id = api_key_id
        self._app_id = app_id
        self._display_name = display_name
        self._etag = etag
        self._expire_time = expire_time
        self._name = name
        self._package_name = package_name
        self._project_id = project_id
        self._sha1_hashes = sha1_hashes
        self._sha256_hashes = sha256_hashes
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AndroidApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AndroidApp of this AndroidApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_id(self):
        """Gets the api_key_id of this AndroidApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :return: The api_key_id of this AndroidApp.
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this AndroidApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `AndroidApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.androidApps/getConfig). If `api_key_id` is not set in requests to [`androidApps.Create`](../../rest/v1beta1/projects.androidApps/create), then Firebase automatically associates an `api_key_id` with the `AndroidApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `AndroidApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :param api_key_id: The api_key_id of this AndroidApp.
        :type api_key_id: str
        """

        self._api_key_id = api_key_id

    @property
    def app_id(self):
        """Gets the app_id of this AndroidApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :return: The app_id of this AndroidApp.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this AndroidApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `AndroidApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :param app_id: The app_id of this AndroidApp.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def display_name(self):
        """Gets the display_name of this AndroidApp.

        The user-assigned display name for the `AndroidApp`.

        :return: The display_name of this AndroidApp.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AndroidApp.

        The user-assigned display name for the `AndroidApp`.

        :param display_name: The display_name of this AndroidApp.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this AndroidApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :return: The etag of this AndroidApp.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this AndroidApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :param etag: The etag of this AndroidApp.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this AndroidApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :return: The expire_time of this AndroidApp.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this AndroidApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :param expire_time: The expire_time of this AndroidApp.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this AndroidApp.

        The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).

        :return: The name of this AndroidApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AndroidApp.

        The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).

        :param name: The name of this AndroidApp.
        :type name: str
        """

        self._name = name

    @property
    def package_name(self):
        """Gets the package_name of this AndroidApp.

        Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.

        :return: The package_name of this AndroidApp.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this AndroidApp.

        Immutable. The canonical package name of the Android app as would appear in the Google Play Developer Console.

        :param package_name: The package_name of this AndroidApp.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def project_id(self):
        """Gets the project_id of this AndroidApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `AndroidApp`.

        :return: The project_id of this AndroidApp.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AndroidApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `AndroidApp`.

        :param project_id: The project_id of this AndroidApp.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def sha1_hashes(self):
        """Gets the sha1_hashes of this AndroidApp.

        The SHA1 certificate hashes for the AndroidApp.

        :return: The sha1_hashes of this AndroidApp.
        :rtype: List[str]
        """
        return self._sha1_hashes

    @sha1_hashes.setter
    def sha1_hashes(self, sha1_hashes):
        """Sets the sha1_hashes of this AndroidApp.

        The SHA1 certificate hashes for the AndroidApp.

        :param sha1_hashes: The sha1_hashes of this AndroidApp.
        :type sha1_hashes: List[str]
        """

        self._sha1_hashes = sha1_hashes

    @property
    def sha256_hashes(self):
        """Gets the sha256_hashes of this AndroidApp.

        The SHA256 certificate hashes for the AndroidApp.

        :return: The sha256_hashes of this AndroidApp.
        :rtype: List[str]
        """
        return self._sha256_hashes

    @sha256_hashes.setter
    def sha256_hashes(self, sha256_hashes):
        """Sets the sha256_hashes of this AndroidApp.

        The SHA256 certificate hashes for the AndroidApp.

        :param sha256_hashes: The sha256_hashes of this AndroidApp.
        :type sha256_hashes: List[str]
        """

        self._sha256_hashes = sha256_hashes

    @property
    def state(self):
        """Gets the state of this AndroidApp.

        Output only. The lifecycle state of the App.

        :return: The state of this AndroidApp.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AndroidApp.

        Output only. The lifecycle state of the App.

        :param state: The state of this AndroidApp.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
