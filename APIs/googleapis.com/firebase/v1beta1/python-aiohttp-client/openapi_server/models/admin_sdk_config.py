# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminSdkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_url: str=None, location_id: str=None, project_id: str=None, storage_bucket: str=None):
        """AdminSdkConfig - a model defined in OpenAPI

        :param database_url: The database_url of this AdminSdkConfig.
        :param location_id: The location_id of this AdminSdkConfig.
        :param project_id: The project_id of this AdminSdkConfig.
        :param storage_bucket: The storage_bucket of this AdminSdkConfig.
        """
        self.openapi_types = {
            'database_url': str,
            'location_id': str,
            'project_id': str,
            'storage_bucket': str
        }

        self.attribute_map = {
            'database_url': 'databaseURL',
            'location_id': 'locationId',
            'project_id': 'projectId',
            'storage_bucket': 'storageBucket'
        }

        self._database_url = database_url
        self._location_id = location_id
        self._project_id = project_id
        self._storage_bucket = storage_bucket

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminSdkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminSdkConfig of this AdminSdkConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_url(self):
        """Gets the database_url of this AdminSdkConfig.

        **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.

        :return: The database_url of this AdminSdkConfig.
        :rtype: str
        """
        return self._database_url

    @database_url.setter
    def database_url(self, database_url):
        """Sets the database_url of this AdminSdkConfig.

        **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.

        :param database_url: The database_url of this AdminSdkConfig.
        :type database_url: str
        """

        self._database_url = database_url

    @property
    def location_id(self):
        """Gets the location_id of this AdminSdkConfig.

        **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :return: The location_id of this AdminSdkConfig.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this AdminSdkConfig.

        **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.

        :param location_id: The location_id of this AdminSdkConfig.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def project_id(self):
        """Gets the project_id of this AdminSdkConfig.

        Immutable. A user-assigned unique identifier for the `FirebaseProject`. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it should generally be treated as a convenience alias to reference the Project.

        :return: The project_id of this AdminSdkConfig.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AdminSdkConfig.

        Immutable. A user-assigned unique identifier for the `FirebaseProject`. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it should generally be treated as a convenience alias to reference the Project.

        :param project_id: The project_id of this AdminSdkConfig.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def storage_bucket(self):
        """Gets the storage_bucket of this AdminSdkConfig.

        **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.

        :return: The storage_bucket of this AdminSdkConfig.
        :rtype: str
        """
        return self._storage_bucket

    @storage_bucket.setter
    def storage_bucket(self, storage_bucket):
        """Sets the storage_bucket of this AdminSdkConfig.

        **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.

        :param storage_bucket: The storage_bucket of this AdminSdkConfig.
        :type storage_bucket: str
        """

        self._storage_bucket = storage_bucket
