# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebApp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_id: str=None, app_id: str=None, app_urls: List[str]=None, display_name: str=None, etag: str=None, expire_time: str=None, name: str=None, project_id: str=None, state: str=None, web_id: str=None):
        """WebApp - a model defined in OpenAPI

        :param api_key_id: The api_key_id of this WebApp.
        :param app_id: The app_id of this WebApp.
        :param app_urls: The app_urls of this WebApp.
        :param display_name: The display_name of this WebApp.
        :param etag: The etag of this WebApp.
        :param expire_time: The expire_time of this WebApp.
        :param name: The name of this WebApp.
        :param project_id: The project_id of this WebApp.
        :param state: The state of this WebApp.
        :param web_id: The web_id of this WebApp.
        """
        self.openapi_types = {
            'api_key_id': str,
            'app_id': str,
            'app_urls': List[str],
            'display_name': str,
            'etag': str,
            'expire_time': str,
            'name': str,
            'project_id': str,
            'state': str,
            'web_id': str
        }

        self.attribute_map = {
            'api_key_id': 'apiKeyId',
            'app_id': 'appId',
            'app_urls': 'appUrls',
            'display_name': 'displayName',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'name': 'name',
            'project_id': 'projectId',
            'state': 'state',
            'web_id': 'webId'
        }

        self._api_key_id = api_key_id
        self._app_id = app_id
        self._app_urls = app_urls
        self._display_name = display_name
        self._etag = etag
        self._expire_time = expire_time
        self._name = name
        self._project_id = project_id
        self._state = state
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebApp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebApp of this WebApp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_id(self):
        """Gets the api_key_id of this WebApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `WebApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.webApps/getConfig). If `api_key_id` is not set in requests to [`webApps.Create`](../../rest/v1beta1/projects.webApps/create), then Firebase automatically associates an `api_key_id` with the `WebApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `WebApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :return: The api_key_id of this WebApp.
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this WebApp.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `WebApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.webApps/getConfig). If `api_key_id` is not set in requests to [`webApps.Create`](../../rest/v1beta1/projects.webApps/create), then Firebase automatically associates an `api_key_id` with the `WebApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `WebApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.

        :param api_key_id: The api_key_id of this WebApp.
        :type api_key_id: str
        """

        self._api_key_id = api_key_id

    @property
    def app_id(self):
        """Gets the app_id of this WebApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :return: The app_id of this WebApp.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this WebApp.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :param app_id: The app_id of this WebApp.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_urls(self):
        """Gets the app_urls of this WebApp.

        The URLs where the `WebApp` is hosted.

        :return: The app_urls of this WebApp.
        :rtype: List[str]
        """
        return self._app_urls

    @app_urls.setter
    def app_urls(self, app_urls):
        """Sets the app_urls of this WebApp.

        The URLs where the `WebApp` is hosted.

        :param app_urls: The app_urls of this WebApp.
        :type app_urls: List[str]
        """

        self._app_urls = app_urls

    @property
    def display_name(self):
        """Gets the display_name of this WebApp.

        The user-assigned display name for the `WebApp`.

        :return: The display_name of this WebApp.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WebApp.

        The user-assigned display name for the `WebApp`.

        :param display_name: The display_name of this WebApp.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this WebApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :return: The etag of this WebApp.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this WebApp.

        This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.

        :param etag: The etag of this WebApp.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this WebApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :return: The expire_time of this WebApp.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this WebApp.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :param expire_time: The expire_time of this WebApp.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this WebApp.

        The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).

        :return: The name of this WebApp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebApp.

        The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).

        :param name: The name of this WebApp.
        :type name: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this WebApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `WebApp`.

        :return: The project_id of this WebApp.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this WebApp.

        Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `WebApp`.

        :param project_id: The project_id of this WebApp.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def state(self):
        """Gets the state of this WebApp.

        Output only. The lifecycle state of the App.

        :return: The state of this WebApp.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WebApp.

        Output only. The lifecycle state of the App.

        :param state: The state of this WebApp.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def web_id(self):
        """Gets the web_id of this WebApp.

        Output only. Immutable. A unique, Firebase-assigned identifier for the `WebApp`. This identifier is only used to populate the `namespace` value for the `WebApp`. For most use cases, use `appId` to identify or reference the App. The `webId` value is only unique within a `FirebaseProject` and its associated Apps.

        :return: The web_id of this WebApp.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this WebApp.

        Output only. Immutable. A unique, Firebase-assigned identifier for the `WebApp`. This identifier is only used to populate the `namespace` value for the `WebApp`. For most use cases, use `appId` to identify or reference the App. The `webId` value is only unique within a `FirebaseProject` and its associated Apps.

        :param web_id: The web_id of this WebApp.
        :type web_id: str
        """

        self._web_id = web_id
