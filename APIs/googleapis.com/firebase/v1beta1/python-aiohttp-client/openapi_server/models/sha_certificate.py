# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShaCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_type: str=None, name: str=None, sha_hash: str=None):
        """ShaCertificate - a model defined in OpenAPI

        :param cert_type: The cert_type of this ShaCertificate.
        :param name: The name of this ShaCertificate.
        :param sha_hash: The sha_hash of this ShaCertificate.
        """
        self.openapi_types = {
            'cert_type': str,
            'name': str,
            'sha_hash': str
        }

        self.attribute_map = {
            'cert_type': 'certType',
            'name': 'name',
            'sha_hash': 'shaHash'
        }

        self._cert_type = cert_type
        self._name = name
        self._sha_hash = sha_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShaCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShaCertificate of this ShaCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_type(self):
        """Gets the cert_type of this ShaCertificate.

        The type of SHA certificate encoded in the hash.

        :return: The cert_type of this ShaCertificate.
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this ShaCertificate.

        The type of SHA certificate encoded in the hash.

        :param cert_type: The cert_type of this ShaCertificate.
        :type cert_type: str
        """
        allowed_values = ["SHA_CERTIFICATE_TYPE_UNSPECIFIED", "SHA_1", "SHA_256"]  # noqa: E501
        if cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_type` ({0}), must be one of {1}"
                .format(cert_type, allowed_values)
            )

        self._cert_type = cert_type

    @property
    def name(self):
        """Gets the name of this ShaCertificate.

        The resource name of the ShaCertificate for the AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/sha/SHA_HASH * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)). * SHA_HASH: the certificate hash for the App (see [`shaHash`](../projects.androidApps.sha#ShaCertificate.FIELDS.sha_hash)).

        :return: The name of this ShaCertificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShaCertificate.

        The resource name of the ShaCertificate for the AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/sha/SHA_HASH * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)). * SHA_HASH: the certificate hash for the App (see [`shaHash`](../projects.androidApps.sha#ShaCertificate.FIELDS.sha_hash)).

        :param name: The name of this ShaCertificate.
        :type name: str
        """

        self._name = name

    @property
    def sha_hash(self):
        """Gets the sha_hash of this ShaCertificate.

        The certificate hash for the `AndroidApp`.

        :return: The sha_hash of this ShaCertificate.
        :rtype: str
        """
        return self._sha_hash

    @sha_hash.setter
    def sha_hash(self, sha_hash):
        """Sets the sha_hash of this ShaCertificate.

        The certificate hash for the `AndroidApp`.

        :param sha_hash: The sha_hash of this ShaCertificate.
        :type sha_hash: str
        """

        self._sha_hash = sha_hash
