# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features: List[str]=None, location_id: str=None, type: str=None):
        """Location - a model defined in OpenAPI

        :param features: The features of this Location.
        :param location_id: The location_id of this Location.
        :param type: The type of this Location.
        """
        self.openapi_types = {
            'features': List[str],
            'location_id': str,
            'type': str
        }

        self.attribute_map = {
            'features': 'features',
            'location_id': 'locationId',
            'type': 'type'
        }

        self._features = features
        self._location_id = location_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this Location.

        Products and services that are available in the GCP resource location.

        :return: The features of this Location.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Location.

        Products and services that are available in the GCP resource location.

        :param features: The features of this Location.
        :type features: List[str]
        """
        allowed_values = ["LOCATION_FEATURE_UNSPECIFIED", "FIRESTORE", "DEFAULT_STORAGE", "FUNCTIONS"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(features) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features

    @property
    def location_id(self):
        """Gets the location_id of this Location.

        The ID of the GCP resource location. It will be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations#types).

        :return: The location_id of this Location.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Location.

        The ID of the GCP resource location. It will be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations#types).

        :param location_id: The location_id of this Location.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def type(self):
        """Gets the type of this Location.

        Indicates whether the GCP resource location is a [regional or multi-regional location](https://firebase.google.com/docs/projects/locations#types) for data replication.

        :return: The type of this Location.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.

        Indicates whether the GCP resource location is a [regional or multi-regional location](https://firebase.google.com/docs/projects/locations#types) for data replication.

        :param type: The type of this Location.
        :type type: str
        """
        allowed_values = ["LOCATION_TYPE_UNSPECIFIED", "REGIONAL", "MULTI_REGIONAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
