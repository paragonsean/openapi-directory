# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirebaseAppInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_id: str=None, app_id: str=None, display_name: str=None, expire_time: str=None, name: str=None, namespace: str=None, platform: str=None, state: str=None):
        """FirebaseAppInfo - a model defined in OpenAPI

        :param api_key_id: The api_key_id of this FirebaseAppInfo.
        :param app_id: The app_id of this FirebaseAppInfo.
        :param display_name: The display_name of this FirebaseAppInfo.
        :param expire_time: The expire_time of this FirebaseAppInfo.
        :param name: The name of this FirebaseAppInfo.
        :param namespace: The namespace of this FirebaseAppInfo.
        :param platform: The platform of this FirebaseAppInfo.
        :param state: The state of this FirebaseAppInfo.
        """
        self.openapi_types = {
            'api_key_id': str,
            'app_id': str,
            'display_name': str,
            'expire_time': str,
            'name': str,
            'namespace': str,
            'platform': str,
            'state': str
        }

        self.attribute_map = {
            'api_key_id': 'apiKeyId',
            'app_id': 'appId',
            'display_name': 'displayName',
            'expire_time': 'expireTime',
            'name': 'name',
            'namespace': 'namespace',
            'platform': 'platform',
            'state': 'state'
        }

        self._api_key_id = api_key_id
        self._app_id = app_id
        self._display_name = display_name
        self._expire_time = expire_time
        self._name = name
        self._namespace = namespace
        self._platform = platform
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirebaseAppInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirebaseAppInfo of this FirebaseAppInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_id(self):
        """Gets the api_key_id of this FirebaseAppInfo.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the App. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's configuration artifact ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/getConfig) | [`IosApp`](../../rest/v1beta1/projects.iosApps/getConfig) | [`WebApp`](../../rest/v1beta1/projects.webApps/getConfig)). If `api_key_id` is not set in requests to create the App ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/create) | [`IosApp`](../../rest/v1beta1/projects.iosApps/create) | [`WebApp`](../../rest/v1beta1/projects.webApps/create)), then Firebase automatically associates an `api_key_id` with the App. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.

        :return: The api_key_id of this FirebaseAppInfo.
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this FirebaseAppInfo.

        The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the App. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's configuration artifact ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/getConfig) | [`IosApp`](../../rest/v1beta1/projects.iosApps/getConfig) | [`WebApp`](../../rest/v1beta1/projects.webApps/getConfig)). If `api_key_id` is not set in requests to create the App ([`AndroidApp`](../../rest/v1beta1/projects.androidApps/create) | [`IosApp`](../../rest/v1beta1/projects.iosApps/create) | [`WebApp`](../../rest/v1beta1/projects.webApps/create)), then Firebase automatically associates an `api_key_id` with the App. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned.

        :param api_key_id: The api_key_id of this FirebaseAppInfo.
        :type api_key_id: str
        """

        self._api_key_id = api_key_id

    @property
    def app_id(self):
        """Gets the app_id of this FirebaseAppInfo.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :return: The app_id of this FirebaseAppInfo.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this FirebaseAppInfo.

        Output only. Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`. This identifier should be treated as an opaque token, as the data format is not specified.

        :param app_id: The app_id of this FirebaseAppInfo.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def display_name(self):
        """Gets the display_name of this FirebaseAppInfo.

        The user-assigned display name of the Firebase App.

        :return: The display_name of this FirebaseAppInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FirebaseAppInfo.

        The user-assigned display name of the Firebase App.

        :param display_name: The display_name of this FirebaseAppInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def expire_time(self):
        """Gets the expire_time of this FirebaseAppInfo.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :return: The expire_time of this FirebaseAppInfo.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this FirebaseAppInfo.

        Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.

        :param expire_time: The expire_time of this FirebaseAppInfo.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def name(self):
        """Gets the name of this FirebaseAppInfo.

        The resource name of the Firebase App, in the format: projects/PROJECT_ID /iosApps/APP_ID or projects/PROJECT_ID/androidApps/APP_ID or projects/ PROJECT_ID/webApps/APP_ID

        :return: The name of this FirebaseAppInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FirebaseAppInfo.

        The resource name of the Firebase App, in the format: projects/PROJECT_ID /iosApps/APP_ID or projects/PROJECT_ID/androidApps/APP_ID or projects/ PROJECT_ID/webApps/APP_ID

        :param name: The name of this FirebaseAppInfo.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this FirebaseAppInfo.

        Output only. Immutable. The platform-specific identifier of the App. *Note:* For most use cases, use `appId`, which is the canonical, globally unique identifier for referencing an App. This string is derived from a native identifier for each platform: `packageName` for an `AndroidApp`, `bundleId` for an `IosApp`, and `webId` for a `WebApp`. Its contents should be treated as opaque, as the native identifier format may change as platforms evolve. This string is only unique within a `FirebaseProject` and its associated Apps.

        :return: The namespace of this FirebaseAppInfo.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this FirebaseAppInfo.

        Output only. Immutable. The platform-specific identifier of the App. *Note:* For most use cases, use `appId`, which is the canonical, globally unique identifier for referencing an App. This string is derived from a native identifier for each platform: `packageName` for an `AndroidApp`, `bundleId` for an `IosApp`, and `webId` for a `WebApp`. Its contents should be treated as opaque, as the native identifier format may change as platforms evolve. This string is only unique within a `FirebaseProject` and its associated Apps.

        :param namespace: The namespace of this FirebaseAppInfo.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def platform(self):
        """Gets the platform of this FirebaseAppInfo.

        The platform of the Firebase App.

        :return: The platform of this FirebaseAppInfo.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this FirebaseAppInfo.

        The platform of the Firebase App.

        :param platform: The platform of this FirebaseAppInfo.
        :type platform: str
        """
        allowed_values = ["PLATFORM_UNSPECIFIED", "IOS", "ANDROID", "WEB"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def state(self):
        """Gets the state of this FirebaseAppInfo.

        Output only. The lifecycle state of the App.

        :return: The state of this FirebaseAppInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FirebaseAppInfo.

        Output only. The lifecycle state of the App.

        :param state: The state of this FirebaseAppInfo.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
