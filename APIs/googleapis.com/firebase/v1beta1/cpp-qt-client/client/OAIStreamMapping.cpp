/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamMapping::OAIStreamMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamMapping::OAIStreamMapping() {
    this->initializeModel();
}

OAIStreamMapping::~OAIStreamMapping() {}

void OAIStreamMapping::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_measurement_id_isSet = false;
    m_measurement_id_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;
}

void OAIStreamMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamMapping::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_measurement_id_isValid = ::OpenAPI::fromJsonValue(m_measurement_id, json[QString("measurementId")]);
    m_measurement_id_isSet = !json[QString("measurementId")].isNull() && m_measurement_id_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("streamId")]);
    m_stream_id_isSet = !json[QString("streamId")].isNull() && m_stream_id_isValid;
}

QString OAIStreamMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_app_isSet) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_measurement_id_isSet) {
        obj.insert(QString("measurementId"), ::OpenAPI::toJsonValue(m_measurement_id));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("streamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    return obj;
}

QString OAIStreamMapping::getApp() const {
    return m_app;
}
void OAIStreamMapping::setApp(const QString &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIStreamMapping::is_app_Set() const{
    return m_app_isSet;
}

bool OAIStreamMapping::is_app_Valid() const{
    return m_app_isValid;
}

QString OAIStreamMapping::getMeasurementId() const {
    return m_measurement_id;
}
void OAIStreamMapping::setMeasurementId(const QString &measurement_id) {
    m_measurement_id = measurement_id;
    m_measurement_id_isSet = true;
}

bool OAIStreamMapping::is_measurement_id_Set() const{
    return m_measurement_id_isSet;
}

bool OAIStreamMapping::is_measurement_id_Valid() const{
    return m_measurement_id_isValid;
}

QString OAIStreamMapping::getStreamId() const {
    return m_stream_id;
}
void OAIStreamMapping::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAIStreamMapping::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAIStreamMapping::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

bool OAIStreamMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
