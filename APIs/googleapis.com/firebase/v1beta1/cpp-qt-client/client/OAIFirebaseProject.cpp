/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirebaseProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirebaseProject::OAIFirebaseProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirebaseProject::OAIFirebaseProject() {
    this->initializeModel();
}

OAIFirebaseProject::~OAIFirebaseProject() {}

void OAIFirebaseProject::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_project_number_isSet = false;
    m_project_number_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIFirebaseProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirebaseProject::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_project_number_isValid = ::OpenAPI::fromJsonValue(m_project_number, json[QString("projectNumber")]);
    m_project_number_isSet = !json[QString("projectNumber")].isNull() && m_project_number_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIFirebaseProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirebaseProject::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_project_number_isSet) {
        obj.insert(QString("projectNumber"), ::OpenAPI::toJsonValue(m_project_number));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QMap<QString, QString> OAIFirebaseProject::getAnnotations() const {
    return m_annotations;
}
void OAIFirebaseProject::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIFirebaseProject::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIFirebaseProject::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIFirebaseProject::getDisplayName() const {
    return m_display_name;
}
void OAIFirebaseProject::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFirebaseProject::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFirebaseProject::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFirebaseProject::getEtag() const {
    return m_etag;
}
void OAIFirebaseProject::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIFirebaseProject::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIFirebaseProject::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIFirebaseProject::getName() const {
    return m_name;
}
void OAIFirebaseProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFirebaseProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFirebaseProject::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFirebaseProject::getProjectId() const {
    return m_project_id;
}
void OAIFirebaseProject::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIFirebaseProject::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIFirebaseProject::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIFirebaseProject::getProjectNumber() const {
    return m_project_number;
}
void OAIFirebaseProject::setProjectNumber(const QString &project_number) {
    m_project_number = project_number;
    m_project_number_isSet = true;
}

bool OAIFirebaseProject::is_project_number_Set() const{
    return m_project_number_isSet;
}

bool OAIFirebaseProject::is_project_number_Valid() const{
    return m_project_number_isValid;
}

OAIDefaultResources OAIFirebaseProject::getResources() const {
    return m_resources;
}
void OAIFirebaseProject::setResources(const OAIDefaultResources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIFirebaseProject::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIFirebaseProject::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIFirebaseProject::getState() const {
    return m_state;
}
void OAIFirebaseProject::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFirebaseProject::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFirebaseProject::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIFirebaseProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirebaseProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
