/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShaCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShaCertificate::OAIShaCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShaCertificate::OAIShaCertificate() {
    this->initializeModel();
}

OAIShaCertificate::~OAIShaCertificate() {}

void OAIShaCertificate::initializeModel() {

    m_cert_type_isSet = false;
    m_cert_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sha_hash_isSet = false;
    m_sha_hash_isValid = false;
}

void OAIShaCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShaCertificate::fromJsonObject(QJsonObject json) {

    m_cert_type_isValid = ::OpenAPI::fromJsonValue(m_cert_type, json[QString("certType")]);
    m_cert_type_isSet = !json[QString("certType")].isNull() && m_cert_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sha_hash_isValid = ::OpenAPI::fromJsonValue(m_sha_hash, json[QString("shaHash")]);
    m_sha_hash_isSet = !json[QString("shaHash")].isNull() && m_sha_hash_isValid;
}

QString OAIShaCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShaCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_type_isSet) {
        obj.insert(QString("certType"), ::OpenAPI::toJsonValue(m_cert_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sha_hash_isSet) {
        obj.insert(QString("shaHash"), ::OpenAPI::toJsonValue(m_sha_hash));
    }
    return obj;
}

QString OAIShaCertificate::getCertType() const {
    return m_cert_type;
}
void OAIShaCertificate::setCertType(const QString &cert_type) {
    m_cert_type = cert_type;
    m_cert_type_isSet = true;
}

bool OAIShaCertificate::is_cert_type_Set() const{
    return m_cert_type_isSet;
}

bool OAIShaCertificate::is_cert_type_Valid() const{
    return m_cert_type_isValid;
}

QString OAIShaCertificate::getName() const {
    return m_name;
}
void OAIShaCertificate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShaCertificate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShaCertificate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIShaCertificate::getShaHash() const {
    return m_sha_hash;
}
void OAIShaCertificate::setShaHash(const QString &sha_hash) {
    m_sha_hash = sha_hash;
    m_sha_hash_isSet = true;
}

bool OAIShaCertificate::is_sha_hash_Set() const{
    return m_sha_hash_isSet;
}

bool OAIShaCertificate::is_sha_hash_Valid() const{
    return m_sha_hash_isValid;
}

bool OAIShaCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShaCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
