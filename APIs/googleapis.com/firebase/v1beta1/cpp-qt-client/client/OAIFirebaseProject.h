/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFirebaseProject.h
 *
 * A &#x60;FirebaseProject&#x60; is the top-level Firebase entity. It is the container for Firebase Apps, Firebase Hosting sites, storage systems (Firebase Realtime Database, Cloud Firestore, Cloud Storage buckets), and other Firebase and Google Cloud Platform (GCP) resources. You create a &#x60;FirebaseProject&#x60; by calling AddFirebase and specifying an *existing* [GCP &#x60;Project&#x60;](https://cloud.google.com/resource-manager/reference/rest/v1/projects). This adds Firebase resources to the existing GCP &#x60;Project&#x60;. Since a FirebaseProject is actually also a GCP &#x60;Project&#x60;, a &#x60;FirebaseProject&#x60; has the same underlying GCP identifiers (&#x60;projectNumber&#x60; and &#x60;projectId&#x60;). This allows for easy interop with Google APIs.
 */

#ifndef OAIFirebaseProject_H
#define OAIFirebaseProject_H

#include <QJsonObject>

#include "OAIDefaultResources.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDefaultResources;

class OAIFirebaseProject : public OAIObject {
public:
    OAIFirebaseProject();
    OAIFirebaseProject(QString json);
    ~OAIFirebaseProject() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProjectId() const;
    void setProjectId(const QString &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QString getProjectNumber() const;
    void setProjectNumber(const QString &project_number);
    bool is_project_number_Set() const;
    bool is_project_number_Valid() const;

    Q_DECL_DEPRECATED OAIDefaultResources getResources() const;
    Q_DECL_DEPRECATED void setResources(const OAIDefaultResources &resources);
    Q_DECL_DEPRECATED bool is_resources_Set() const;
    Q_DECL_DEPRECATED bool is_resources_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QString m_project_number;
    bool m_project_number_isSet;
    bool m_project_number_isValid;

    OAIDefaultResources m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFirebaseProject)

#endif // OAIFirebaseProject_H
