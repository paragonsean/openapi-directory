/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebAppConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebAppConfig::OAIWebAppConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebAppConfig::OAIWebAppConfig() {
    this->initializeModel();
}

OAIWebAppConfig::~OAIWebAppConfig() {}

void OAIWebAppConfig::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_auth_domain_isSet = false;
    m_auth_domain_isValid = false;

    m_database_url_isSet = false;
    m_database_url_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_measurement_id_isSet = false;
    m_measurement_id_isValid = false;

    m_messaging_sender_id_isSet = false;
    m_messaging_sender_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_storage_bucket_isSet = false;
    m_storage_bucket_isValid = false;
}

void OAIWebAppConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebAppConfig::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_auth_domain_isValid = ::OpenAPI::fromJsonValue(m_auth_domain, json[QString("authDomain")]);
    m_auth_domain_isSet = !json[QString("authDomain")].isNull() && m_auth_domain_isValid;

    m_database_url_isValid = ::OpenAPI::fromJsonValue(m_database_url, json[QString("databaseURL")]);
    m_database_url_isSet = !json[QString("databaseURL")].isNull() && m_database_url_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_measurement_id_isValid = ::OpenAPI::fromJsonValue(m_measurement_id, json[QString("measurementId")]);
    m_measurement_id_isSet = !json[QString("measurementId")].isNull() && m_measurement_id_isValid;

    m_messaging_sender_id_isValid = ::OpenAPI::fromJsonValue(m_messaging_sender_id, json[QString("messagingSenderId")]);
    m_messaging_sender_id_isSet = !json[QString("messagingSenderId")].isNull() && m_messaging_sender_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_storage_bucket_isValid = ::OpenAPI::fromJsonValue(m_storage_bucket, json[QString("storageBucket")]);
    m_storage_bucket_isSet = !json[QString("storageBucket")].isNull() && m_storage_bucket_isValid;
}

QString OAIWebAppConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebAppConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_auth_domain_isSet) {
        obj.insert(QString("authDomain"), ::OpenAPI::toJsonValue(m_auth_domain));
    }
    if (m_database_url_isSet) {
        obj.insert(QString("databaseURL"), ::OpenAPI::toJsonValue(m_database_url));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_measurement_id_isSet) {
        obj.insert(QString("measurementId"), ::OpenAPI::toJsonValue(m_measurement_id));
    }
    if (m_messaging_sender_id_isSet) {
        obj.insert(QString("messagingSenderId"), ::OpenAPI::toJsonValue(m_messaging_sender_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_storage_bucket_isSet) {
        obj.insert(QString("storageBucket"), ::OpenAPI::toJsonValue(m_storage_bucket));
    }
    return obj;
}

QString OAIWebAppConfig::getApiKey() const {
    return m_api_key;
}
void OAIWebAppConfig::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIWebAppConfig::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIWebAppConfig::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIWebAppConfig::getAppId() const {
    return m_app_id;
}
void OAIWebAppConfig::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIWebAppConfig::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIWebAppConfig::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIWebAppConfig::getAuthDomain() const {
    return m_auth_domain;
}
void OAIWebAppConfig::setAuthDomain(const QString &auth_domain) {
    m_auth_domain = auth_domain;
    m_auth_domain_isSet = true;
}

bool OAIWebAppConfig::is_auth_domain_Set() const{
    return m_auth_domain_isSet;
}

bool OAIWebAppConfig::is_auth_domain_Valid() const{
    return m_auth_domain_isValid;
}

QString OAIWebAppConfig::getDatabaseUrl() const {
    return m_database_url;
}
void OAIWebAppConfig::setDatabaseUrl(const QString &database_url) {
    m_database_url = database_url;
    m_database_url_isSet = true;
}

bool OAIWebAppConfig::is_database_url_Set() const{
    return m_database_url_isSet;
}

bool OAIWebAppConfig::is_database_url_Valid() const{
    return m_database_url_isValid;
}

QString OAIWebAppConfig::getLocationId() const {
    return m_location_id;
}
void OAIWebAppConfig::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIWebAppConfig::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIWebAppConfig::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIWebAppConfig::getMeasurementId() const {
    return m_measurement_id;
}
void OAIWebAppConfig::setMeasurementId(const QString &measurement_id) {
    m_measurement_id = measurement_id;
    m_measurement_id_isSet = true;
}

bool OAIWebAppConfig::is_measurement_id_Set() const{
    return m_measurement_id_isSet;
}

bool OAIWebAppConfig::is_measurement_id_Valid() const{
    return m_measurement_id_isValid;
}

QString OAIWebAppConfig::getMessagingSenderId() const {
    return m_messaging_sender_id;
}
void OAIWebAppConfig::setMessagingSenderId(const QString &messaging_sender_id) {
    m_messaging_sender_id = messaging_sender_id;
    m_messaging_sender_id_isSet = true;
}

bool OAIWebAppConfig::is_messaging_sender_id_Set() const{
    return m_messaging_sender_id_isSet;
}

bool OAIWebAppConfig::is_messaging_sender_id_Valid() const{
    return m_messaging_sender_id_isValid;
}

QString OAIWebAppConfig::getProjectId() const {
    return m_project_id;
}
void OAIWebAppConfig::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIWebAppConfig::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIWebAppConfig::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIWebAppConfig::getStorageBucket() const {
    return m_storage_bucket;
}
void OAIWebAppConfig::setStorageBucket(const QString &storage_bucket) {
    m_storage_bucket = storage_bucket;
    m_storage_bucket_isSet = true;
}

bool OAIWebAppConfig::is_storage_bucket_Set() const{
    return m_storage_bucket_isSet;
}

bool OAIWebAppConfig::is_storage_bucket_Valid() const{
    return m_storage_bucket_isValid;
}

bool OAIWebAppConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebAppConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
