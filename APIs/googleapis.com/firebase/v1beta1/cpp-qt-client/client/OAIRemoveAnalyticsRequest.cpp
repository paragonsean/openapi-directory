/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveAnalyticsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveAnalyticsRequest::OAIRemoveAnalyticsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveAnalyticsRequest::OAIRemoveAnalyticsRequest() {
    this->initializeModel();
}

OAIRemoveAnalyticsRequest::~OAIRemoveAnalyticsRequest() {}

void OAIRemoveAnalyticsRequest::initializeModel() {

    m_analytics_property_id_isSet = false;
    m_analytics_property_id_isValid = false;
}

void OAIRemoveAnalyticsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveAnalyticsRequest::fromJsonObject(QJsonObject json) {

    m_analytics_property_id_isValid = ::OpenAPI::fromJsonValue(m_analytics_property_id, json[QString("analyticsPropertyId")]);
    m_analytics_property_id_isSet = !json[QString("analyticsPropertyId")].isNull() && m_analytics_property_id_isValid;
}

QString OAIRemoveAnalyticsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveAnalyticsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics_property_id_isSet) {
        obj.insert(QString("analyticsPropertyId"), ::OpenAPI::toJsonValue(m_analytics_property_id));
    }
    return obj;
}

QString OAIRemoveAnalyticsRequest::getAnalyticsPropertyId() const {
    return m_analytics_property_id;
}
void OAIRemoveAnalyticsRequest::setAnalyticsPropertyId(const QString &analytics_property_id) {
    m_analytics_property_id = analytics_property_id;
    m_analytics_property_id_isSet = true;
}

bool OAIRemoveAnalyticsRequest::is_analytics_property_id_Set() const{
    return m_analytics_property_id_isSet;
}

bool OAIRemoveAnalyticsRequest::is_analytics_property_id_Valid() const{
    return m_analytics_property_id_isValid;
}

bool OAIRemoveAnalyticsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveAnalyticsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
