/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIosApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIosApp::OAIIosApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIosApp::OAIIosApp() {
    this->initializeModel();
}

OAIIosApp::~OAIIosApp() {}

void OAIIosApp::initializeModel() {

    m_api_key_id_isSet = false;
    m_api_key_id_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_store_id_isSet = false;
    m_app_store_id_isValid = false;

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIIosApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIosApp::fromJsonObject(QJsonObject json) {

    m_api_key_id_isValid = ::OpenAPI::fromJsonValue(m_api_key_id, json[QString("apiKeyId")]);
    m_api_key_id_isSet = !json[QString("apiKeyId")].isNull() && m_api_key_id_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_store_id_isValid = ::OpenAPI::fromJsonValue(m_app_store_id, json[QString("appStoreId")]);
    m_app_store_id_isSet = !json[QString("appStoreId")].isNull() && m_app_store_id_isValid;

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundleId")]);
    m_bundle_id_isSet = !json[QString("bundleId")].isNull() && m_bundle_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;
}

QString OAIIosApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIosApp::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_id_isSet) {
        obj.insert(QString("apiKeyId"), ::OpenAPI::toJsonValue(m_api_key_id));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_store_id_isSet) {
        obj.insert(QString("appStoreId"), ::OpenAPI::toJsonValue(m_app_store_id));
    }
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

QString OAIIosApp::getApiKeyId() const {
    return m_api_key_id;
}
void OAIIosApp::setApiKeyId(const QString &api_key_id) {
    m_api_key_id = api_key_id;
    m_api_key_id_isSet = true;
}

bool OAIIosApp::is_api_key_id_Set() const{
    return m_api_key_id_isSet;
}

bool OAIIosApp::is_api_key_id_Valid() const{
    return m_api_key_id_isValid;
}

QString OAIIosApp::getAppId() const {
    return m_app_id;
}
void OAIIosApp::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIIosApp::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIIosApp::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIIosApp::getAppStoreId() const {
    return m_app_store_id;
}
void OAIIosApp::setAppStoreId(const QString &app_store_id) {
    m_app_store_id = app_store_id;
    m_app_store_id_isSet = true;
}

bool OAIIosApp::is_app_store_id_Set() const{
    return m_app_store_id_isSet;
}

bool OAIIosApp::is_app_store_id_Valid() const{
    return m_app_store_id_isValid;
}

QString OAIIosApp::getBundleId() const {
    return m_bundle_id;
}
void OAIIosApp::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIIosApp::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIIosApp::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIIosApp::getDisplayName() const {
    return m_display_name;
}
void OAIIosApp::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIIosApp::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIIosApp::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIIosApp::getEtag() const {
    return m_etag;
}
void OAIIosApp::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIIosApp::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIIosApp::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIIosApp::getExpireTime() const {
    return m_expire_time;
}
void OAIIosApp::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIIosApp::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIIosApp::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIIosApp::getName() const {
    return m_name;
}
void OAIIosApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIosApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIosApp::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIosApp::getProjectId() const {
    return m_project_id;
}
void OAIIosApp::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIIosApp::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIIosApp::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIIosApp::getState() const {
    return m_state;
}
void OAIIosApp::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIosApp::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIosApp::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIIosApp::getTeamId() const {
    return m_team_id;
}
void OAIIosApp::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIIosApp::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIIosApp::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIIosApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIosApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
