/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyticsDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyticsDetails::OAIAnalyticsDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyticsDetails::OAIAnalyticsDetails() {
    this->initializeModel();
}

OAIAnalyticsDetails::~OAIAnalyticsDetails() {}

void OAIAnalyticsDetails::initializeModel() {

    m_analytics_property_isSet = false;
    m_analytics_property_isValid = false;

    m_stream_mappings_isSet = false;
    m_stream_mappings_isValid = false;
}

void OAIAnalyticsDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyticsDetails::fromJsonObject(QJsonObject json) {

    m_analytics_property_isValid = ::OpenAPI::fromJsonValue(m_analytics_property, json[QString("analyticsProperty")]);
    m_analytics_property_isSet = !json[QString("analyticsProperty")].isNull() && m_analytics_property_isValid;

    m_stream_mappings_isValid = ::OpenAPI::fromJsonValue(m_stream_mappings, json[QString("streamMappings")]);
    m_stream_mappings_isSet = !json[QString("streamMappings")].isNull() && m_stream_mappings_isValid;
}

QString OAIAnalyticsDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyticsDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_analytics_property.isSet()) {
        obj.insert(QString("analyticsProperty"), ::OpenAPI::toJsonValue(m_analytics_property));
    }
    if (m_stream_mappings.size() > 0) {
        obj.insert(QString("streamMappings"), ::OpenAPI::toJsonValue(m_stream_mappings));
    }
    return obj;
}

OAIAnalyticsProperty OAIAnalyticsDetails::getAnalyticsProperty() const {
    return m_analytics_property;
}
void OAIAnalyticsDetails::setAnalyticsProperty(const OAIAnalyticsProperty &analytics_property) {
    m_analytics_property = analytics_property;
    m_analytics_property_isSet = true;
}

bool OAIAnalyticsDetails::is_analytics_property_Set() const{
    return m_analytics_property_isSet;
}

bool OAIAnalyticsDetails::is_analytics_property_Valid() const{
    return m_analytics_property_isValid;
}

QList<OAIStreamMapping> OAIAnalyticsDetails::getStreamMappings() const {
    return m_stream_mappings;
}
void OAIAnalyticsDetails::setStreamMappings(const QList<OAIStreamMapping> &stream_mappings) {
    m_stream_mappings = stream_mappings;
    m_stream_mappings_isSet = true;
}

bool OAIAnalyticsDetails::is_stream_mappings_Set() const{
    return m_stream_mappings_isSet;
}

bool OAIAnalyticsDetails::is_stream_mappings_Valid() const{
    return m_stream_mappings_isValid;
}

bool OAIAnalyticsDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analytics_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyticsDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
