/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShaCertificate model module.
 * @module model/ShaCertificate
 * @version v1beta1
 */
class ShaCertificate {
    /**
     * Constructs a new <code>ShaCertificate</code>.
     * A SHA-1 or SHA-256 certificate associated with the AndroidApp.
     * @alias module:model/ShaCertificate
     */
    constructor() { 
        
        ShaCertificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShaCertificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShaCertificate} obj Optional instance to populate.
     * @return {module:model/ShaCertificate} The populated <code>ShaCertificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShaCertificate();

            if (data.hasOwnProperty('certType')) {
                obj['certType'] = ApiClient.convertToType(data['certType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('shaHash')) {
                obj['shaHash'] = ApiClient.convertToType(data['shaHash'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShaCertificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShaCertificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certType'] && !(typeof data['certType'] === 'string' || data['certType'] instanceof String)) {
            throw new Error("Expected the field `certType` to be a primitive type in the JSON string but got " + data['certType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['shaHash'] && !(typeof data['shaHash'] === 'string' || data['shaHash'] instanceof String)) {
            throw new Error("Expected the field `shaHash` to be a primitive type in the JSON string but got " + data['shaHash']);
        }

        return true;
    }


}



/**
 * The type of SHA certificate encoded in the hash.
 * @member {module:model/ShaCertificate.CertTypeEnum} certType
 */
ShaCertificate.prototype['certType'] = undefined;

/**
 * The resource name of the ShaCertificate for the AndroidApp, in the format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID/sha/SHA_HASH * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)). * SHA_HASH: the certificate hash for the App (see [`shaHash`](../projects.androidApps.sha#ShaCertificate.FIELDS.sha_hash)).
 * @member {String} name
 */
ShaCertificate.prototype['name'] = undefined;

/**
 * The certificate hash for the `AndroidApp`.
 * @member {String} shaHash
 */
ShaCertificate.prototype['shaHash'] = undefined;





/**
 * Allowed values for the <code>certType</code> property.
 * @enum {String}
 * @readonly
 */
ShaCertificate['CertTypeEnum'] = {

    /**
     * value: "SHA_CERTIFICATE_TYPE_UNSPECIFIED"
     * @const
     */
    "CERTIFICATE_TYPE_UNSPECIFIED": "SHA_CERTIFICATE_TYPE_UNSPECIFIED",

    /**
     * value: "SHA_1"
     * @const
     */
    "1": "SHA_1",

    /**
     * value: "SHA_256"
     * @const
     */
    "256": "SHA_256"
};



export default ShaCertificate;

