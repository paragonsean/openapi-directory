/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DefaultResources model module.
 * @module model/DefaultResources
 * @version v1beta1
 */
class DefaultResources {
    /**
     * Constructs a new <code>DefaultResources</code>.
     * **DEPRECATED.** _Auto-provisioning of these resources is changing, so this object no longer reliably provides information about the resources within the Project. Instead, retrieve information about each resource directly from its resource-specific API._ The default auto-provisioned resources associated with the Project.
     * @alias module:model/DefaultResources
     */
    constructor() { 
        
        DefaultResources.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DefaultResources</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DefaultResources} obj Optional instance to populate.
     * @return {module:model/DefaultResources} The populated <code>DefaultResources</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DefaultResources();

            if (data.hasOwnProperty('hostingSite')) {
                obj['hostingSite'] = ApiClient.convertToType(data['hostingSite'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('realtimeDatabaseInstance')) {
                obj['realtimeDatabaseInstance'] = ApiClient.convertToType(data['realtimeDatabaseInstance'], 'String');
            }
            if (data.hasOwnProperty('storageBucket')) {
                obj['storageBucket'] = ApiClient.convertToType(data['storageBucket'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DefaultResources</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DefaultResources</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostingSite'] && !(typeof data['hostingSite'] === 'string' || data['hostingSite'] instanceof String)) {
            throw new Error("Expected the field `hostingSite` to be a primitive type in the JSON string but got " + data['hostingSite']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['realtimeDatabaseInstance'] && !(typeof data['realtimeDatabaseInstance'] === 'string' || data['realtimeDatabaseInstance'] instanceof String)) {
            throw new Error("Expected the field `realtimeDatabaseInstance` to be a primitive type in the JSON string but got " + data['realtimeDatabaseInstance']);
        }
        // ensure the json data is a string
        if (data['storageBucket'] && !(typeof data['storageBucket'] === 'string' || data['storageBucket'] instanceof String)) {
            throw new Error("Expected the field `storageBucket` to be a primitive type in the JSON string but got " + data['storageBucket']);
        }

        return true;
    }


}



/**
 * Output only. **DEPRECATED.** _Instead, find the default Firebase Hosting site name using the [ListSites](https://firebase.google.com/docs/reference/hosting/rest/v1beta1/projects.sites/list) within the Firebase Hosting REST API. Note that the default site for the Project might not yet be provisioned, so the return might not contain a default site._ The default Firebase Hosting site name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Hosting site in another project (learn more about creating non-default, [additional sites](https://firebase.google.com/docs/hosting/multisites)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Hosting site name. For example, if your `projectId` is `myproject123`, your default Hosting site name might be: `myproject123-a5c16`
 * @member {String} hostingSite
 */
DefaultResources.prototype['hostingSite'] = undefined;

/**
 * Output only. **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
 * @member {String} locationId
 */
DefaultResources.prototype['locationId'] = undefined;

/**
 * Output only. **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database instance name, in the format: PROJECT_ID Though rare, your `projectId` might already be used as the name for an existing Realtime Database instance in another project (learn more about [database sharding](https://firebase.google.com/docs/database/usage/sharding)). In these cases, your `projectId` is appended with a hyphen then five alphanumeric characters to create your default Realtime Database instance name. For example, if your `projectId` is `myproject123`, your default database instance name might be: `myproject123-a5c16`
 * @member {String} realtimeDatabaseInstance
 */
DefaultResources.prototype['realtimeDatabaseInstance'] = undefined;

/**
 * Output only. **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket, in the format: PROJECT_ID.appspot.com
 * @member {String} storageBucket
 */
DefaultResources.prototype['storageBucket'] = undefined;






export default DefaultResources;

