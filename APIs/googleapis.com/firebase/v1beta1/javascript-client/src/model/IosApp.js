/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IosApp model module.
 * @module model/IosApp
 * @version v1beta1
 */
class IosApp {
    /**
     * Constructs a new <code>IosApp</code>.
     * Details of a Firebase App for iOS.
     * @alias module:model/IosApp
     */
    constructor() { 
        
        IosApp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IosApp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IosApp} obj Optional instance to populate.
     * @return {module:model/IosApp} The populated <code>IosApp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IosApp();

            if (data.hasOwnProperty('apiKeyId')) {
                obj['apiKeyId'] = ApiClient.convertToType(data['apiKeyId'], 'String');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appStoreId')) {
                obj['appStoreId'] = ApiClient.convertToType(data['appStoreId'], 'String');
            }
            if (data.hasOwnProperty('bundleId')) {
                obj['bundleId'] = ApiClient.convertToType(data['bundleId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IosApp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IosApp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiKeyId'] && !(typeof data['apiKeyId'] === 'string' || data['apiKeyId'] instanceof String)) {
            throw new Error("Expected the field `apiKeyId` to be a primitive type in the JSON string but got " + data['apiKeyId']);
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['appStoreId'] && !(typeof data['appStoreId'] === 'string' || data['appStoreId'] instanceof String)) {
            throw new Error("Expected the field `appStoreId` to be a primitive type in the JSON string but got " + data['appStoreId']);
        }
        // ensure the json data is a string
        if (data['bundleId'] && !(typeof data['bundleId'] === 'string' || data['bundleId'] instanceof String)) {
            throw new Error("Expected the field `bundleId` to be a primitive type in the JSON string but got " + data['bundleId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }

        return true;
    }


}



/**
 * The globally unique, Google-assigned identifier (UID) for the Firebase API key associated with the `IosApp`. Be aware that this value is the UID of the API key, _not_ the [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key. The `keyString` is the value that can be found in the App's [configuration artifact](../../rest/v1beta1/projects.iosApps/getConfig). If `api_key_id` is not set in requests to [`iosApps.Create`](../../rest/v1beta1/projects.iosApps/create), then Firebase automatically associates an `api_key_id` with the `IosApp`. This auto-associated key may be an existing valid key or, if no valid key exists, a new one will be provisioned. In patch requests, `api_key_id` cannot be set to an empty value, and the new UID must have no restrictions or only have restrictions that are valid for the associated `IosApp`. We recommend using the [Google Cloud Console](https://console.cloud.google.com/apis/credentials) to manage API keys.
 * @member {String} apiKeyId
 */
IosApp.prototype['apiKeyId'] = undefined;

/**
 * Output only. Immutable. The globally unique, Firebase-assigned identifier for the `IosApp`. This identifier should be treated as an opaque token, as the data format is not specified.
 * @member {String} appId
 */
IosApp.prototype['appId'] = undefined;

/**
 * The automatically generated Apple ID assigned to the iOS app by Apple in the iOS App Store.
 * @member {String} appStoreId
 */
IosApp.prototype['appStoreId'] = undefined;

/**
 * Immutable. The canonical bundle ID of the iOS app as it would appear in the iOS AppStore.
 * @member {String} bundleId
 */
IosApp.prototype['bundleId'] = undefined;

/**
 * The user-assigned display name for the `IosApp`.
 * @member {String} displayName
 */
IosApp.prototype['displayName'] = undefined;

/**
 * This checksum is computed by the server based on the value of other fields, and it may be sent with update requests to ensure the client has an up-to-date value before proceeding. Learn more about `etag` in Google's [AIP-154 standard](https://google.aip.dev/154#declarative-friendly-resources). This etag is strongly validated.
 * @member {String} etag
 */
IosApp.prototype['etag'] = undefined;

/**
 * Output only. Timestamp of when the App will be considered expired and cannot be undeleted. This value is only provided if the App is in the `DELETED` state.
 * @member {String} expireTime
 */
IosApp.prototype['expireTime'] = undefined;

/**
 * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
 * @member {String} name
 */
IosApp.prototype['name'] = undefined;

/**
 * Output only. Immutable. A user-assigned unique identifier of the parent FirebaseProject for the `IosApp`.
 * @member {String} projectId
 */
IosApp.prototype['projectId'] = undefined;

/**
 * Output only. The lifecycle state of the App.
 * @member {module:model/IosApp.StateEnum} state
 */
IosApp.prototype['state'] = undefined;

/**
 * The Apple Developer Team ID associated with the App in the App Store.
 * @member {String} teamId
 */
IosApp.prototype['teamId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
IosApp['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default IosApp;

