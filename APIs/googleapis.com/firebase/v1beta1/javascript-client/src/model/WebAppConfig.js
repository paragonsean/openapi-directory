/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebAppConfig model module.
 * @module model/WebAppConfig
 * @version v1beta1
 */
class WebAppConfig {
    /**
     * Constructs a new <code>WebAppConfig</code>.
     * Configuration metadata of a single Firebase App for the web.
     * @alias module:model/WebAppConfig
     */
    constructor() { 
        
        WebAppConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebAppConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebAppConfig} obj Optional instance to populate.
     * @return {module:model/WebAppConfig} The populated <code>WebAppConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebAppConfig();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('authDomain')) {
                obj['authDomain'] = ApiClient.convertToType(data['authDomain'], 'String');
            }
            if (data.hasOwnProperty('databaseURL')) {
                obj['databaseURL'] = ApiClient.convertToType(data['databaseURL'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('measurementId')) {
                obj['measurementId'] = ApiClient.convertToType(data['measurementId'], 'String');
            }
            if (data.hasOwnProperty('messagingSenderId')) {
                obj['messagingSenderId'] = ApiClient.convertToType(data['messagingSenderId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('storageBucket')) {
                obj['storageBucket'] = ApiClient.convertToType(data['storageBucket'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebAppConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebAppConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['authDomain'] && !(typeof data['authDomain'] === 'string' || data['authDomain'] instanceof String)) {
            throw new Error("Expected the field `authDomain` to be a primitive type in the JSON string but got " + data['authDomain']);
        }
        // ensure the json data is a string
        if (data['databaseURL'] && !(typeof data['databaseURL'] === 'string' || data['databaseURL'] instanceof String)) {
            throw new Error("Expected the field `databaseURL` to be a primitive type in the JSON string but got " + data['databaseURL']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['measurementId'] && !(typeof data['measurementId'] === 'string' || data['measurementId'] instanceof String)) {
            throw new Error("Expected the field `measurementId` to be a primitive type in the JSON string but got " + data['measurementId']);
        }
        // ensure the json data is a string
        if (data['messagingSenderId'] && !(typeof data['messagingSenderId'] === 'string' || data['messagingSenderId'] instanceof String)) {
            throw new Error("Expected the field `messagingSenderId` to be a primitive type in the JSON string but got " + data['messagingSenderId']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['storageBucket'] && !(typeof data['storageBucket'] === 'string' || data['storageBucket'] instanceof String)) {
            throw new Error("Expected the field `storageBucket` to be a primitive type in the JSON string but got " + data['storageBucket']);
        }

        return true;
    }


}



/**
 * The [`keyString`](https://cloud.google.com/api-keys/docs/reference/rest/v2/projects.locations.keys#Key.FIELDS.key_string) of the API key associated with the `WebApp`. Note that this value is _not_ the [`apiKeyId`](../projects.webApps#WebApp.FIELDS.api_key_id) (the UID) of the API key associated with the `WebApp`.
 * @member {String} apiKey
 */
WebAppConfig.prototype['apiKey'] = undefined;

/**
 * Immutable. The globally unique, Firebase-assigned identifier for the `WebApp`.
 * @member {String} appId
 */
WebAppConfig.prototype['appId'] = undefined;

/**
 * The domain Firebase Auth configures for OAuth redirects, in the format: PROJECT_ID.firebaseapp.com
 * @member {String} authDomain
 */
WebAppConfig.prototype['authDomain'] = undefined;

/**
 * **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.
 * @member {String} databaseURL
 */
WebAppConfig.prototype['databaseURL'] = undefined;

/**
 * **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
 * @member {String} locationId
 */
WebAppConfig.prototype['locationId'] = undefined;

/**
 * The unique Google-assigned identifier of the Google Analytics web stream associated with the `WebApp`. Firebase SDKs use this ID to interact with Google Analytics APIs. This field is only present if the `WebApp` is linked to a web stream in a Google Analytics App + Web property. Learn more about this ID and Google Analytics web streams in the [Analytics documentation](https://support.google.com/analytics/answer/9304153). To generate a `measurementId` and link the `WebApp` with a Google Analytics web stream, call [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics). For apps using the Firebase JavaScript SDK v7.20.0 and later, Firebase dynamically fetches the `measurementId` when your app initializes Analytics. Having this ID in your config object is optional, but it does serve as a fallback in the rare case that the dynamic fetch fails.
 * @member {String} measurementId
 */
WebAppConfig.prototype['measurementId'] = undefined;

/**
 * The sender ID for use with Firebase Cloud Messaging.
 * @member {String} messagingSenderId
 */
WebAppConfig.prototype['messagingSenderId'] = undefined;

/**
 * Immutable. A user-assigned unique identifier for the `FirebaseProject`.
 * @member {String} projectId
 */
WebAppConfig.prototype['projectId'] = undefined;

/**
 * **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.
 * @member {String} storageBucket
 */
WebAppConfig.prototype['storageBucket'] = undefined;






export default WebAppConfig;

