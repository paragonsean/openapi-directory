/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdminSdkConfig model module.
 * @module model/AdminSdkConfig
 * @version v1beta1
 */
class AdminSdkConfig {
    /**
     * Constructs a new <code>AdminSdkConfig</code>.
     * @alias module:model/AdminSdkConfig
     */
    constructor() { 
        
        AdminSdkConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdminSdkConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdminSdkConfig} obj Optional instance to populate.
     * @return {module:model/AdminSdkConfig} The populated <code>AdminSdkConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdminSdkConfig();

            if (data.hasOwnProperty('databaseURL')) {
                obj['databaseURL'] = ApiClient.convertToType(data['databaseURL'], 'String');
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('storageBucket')) {
                obj['storageBucket'] = ApiClient.convertToType(data['storageBucket'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdminSdkConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdminSdkConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseURL'] && !(typeof data['databaseURL'] === 'string' || data['databaseURL'] instanceof String)) {
            throw new Error("Expected the field `databaseURL` to be a primitive type in the JSON string but got " + data['databaseURL']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['storageBucket'] && !(typeof data['storageBucket'] === 'string' || data['storageBucket'] instanceof String)) {
            throw new Error("Expected the field `storageBucket` to be a primitive type in the JSON string but got " + data['storageBucket']);
        }

        return true;
    }


}



/**
 * **DEPRECATED.** _Instead, find the default Firebase Realtime Database instance name using the [list endpoint](https://firebase.google.com/docs/reference/rest/database/database-management/rest/v1beta/projects.locations.instances/list) within the Firebase Realtime Database REST API. Note that the default instance for the Project might not yet be provisioned, so the return might not contain a default instance._ The default Firebase Realtime Database URL.
 * @member {String} databaseURL
 */
AdminSdkConfig.prototype['databaseURL'] = undefined;

/**
 * **DEPRECATED.** _Instead, use product-specific REST APIs to find the location of resources._ The ID of the Project's default GCP resource location. The location is one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). This field is omitted if the default GCP resource location has not been finalized yet. To set a Project's default GCP resource location, call [`FinalizeDefaultLocation`](../projects.defaultLocation/finalize) after you add Firebase resources to the Project.
 * @member {String} locationId
 */
AdminSdkConfig.prototype['locationId'] = undefined;

/**
 * Immutable. A user-assigned unique identifier for the `FirebaseProject`. This identifier may appear in URLs or names for some Firebase resources associated with the Project, but it should generally be treated as a convenience alias to reference the Project.
 * @member {String} projectId
 */
AdminSdkConfig.prototype['projectId'] = undefined;

/**
 * **DEPRECATED.** _Instead, find the default Cloud Storage for Firebase bucket using the [list endpoint](https://firebase.google.com/docs/reference/rest/storage/rest/v1beta/projects.buckets/list) within the Cloud Storage for Firebase REST API. Note that the default bucket for the Project might not yet be provisioned, so the return might not contain a default bucket._ The default Cloud Storage for Firebase storage bucket name.
 * @member {String} storageBucket
 */
AdminSdkConfig.prototype['storageBucket'] = undefined;






export default AdminSdkConfig;

