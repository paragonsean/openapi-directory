/**
 * Firebase Management API
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version v1beta1
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * **DEPRECATED.** _This Location is no longer used to determine Firebase resource locations. Instead, consult product documentation to determine valid locations for each resource used in your Project._ A GCP resource location that can be selected for a FirebaseProject.
     * @alias module:model/Location
     */
    constructor() { 
        
        Location.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], ['String']);
            }
            if (data.hasOwnProperty('locationId')) {
                obj['locationId'] = ApiClient.convertToType(data['locationId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['features'])) {
            throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
        }
        // ensure the json data is a string
        if (data['locationId'] && !(typeof data['locationId'] === 'string' || data['locationId'] instanceof String)) {
            throw new Error("Expected the field `locationId` to be a primitive type in the JSON string but got " + data['locationId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Products and services that are available in the GCP resource location.
 * @member {Array.<module:model/Location.FeaturesEnum>} features
 */
Location.prototype['features'] = undefined;

/**
 * The ID of the GCP resource location. It will be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations#types).
 * @member {String} locationId
 */
Location.prototype['locationId'] = undefined;

/**
 * Indicates whether the GCP resource location is a [regional or multi-regional location](https://firebase.google.com/docs/projects/locations#types) for data replication.
 * @member {module:model/Location.TypeEnum} type
 */
Location.prototype['type'] = undefined;





/**
 * Allowed values for the <code>features</code> property.
 * @enum {String}
 * @readonly
 */
Location['FeaturesEnum'] = {

    /**
     * value: "LOCATION_FEATURE_UNSPECIFIED"
     * @const
     */
    "LOCATION_FEATURE_UNSPECIFIED": "LOCATION_FEATURE_UNSPECIFIED",

    /**
     * value: "FIRESTORE"
     * @const
     */
    "FIRESTORE": "FIRESTORE",

    /**
     * value: "DEFAULT_STORAGE"
     * @const
     */
    "DEFAULT_STORAGE": "DEFAULT_STORAGE",

    /**
     * value: "FUNCTIONS"
     * @const
     */
    "FUNCTIONS": "FUNCTIONS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Location['TypeEnum'] = {

    /**
     * value: "LOCATION_TYPE_UNSPECIFIED"
     * @const
     */
    "LOCATION_TYPE_UNSPECIFIED": "LOCATION_TYPE_UNSPECIFIED",

    /**
     * value: "REGIONAL"
     * @const
     */
    "REGIONAL": "REGIONAL",

    /**
     * value: "MULTI_REGIONAL"
     * @const
     */
    "MULTI_REGIONAL": "MULTI_REGIONAL"
};



export default Location;

