/*
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.QueryRequest;
import org.openapitools.client.model.QueryResponse;
import org.openapitools.client.model.ReportStateAndNotificationRequest;
import org.openapitools.client.model.ReportStateAndNotificationResponse;
import org.openapitools.client.model.RequestSyncDevicesRequest;
import org.openapitools.client.model.SyncRequest;
import org.openapitools.client.model.SyncResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Gets the current states in Home Graph for the given set of the third-party user&#39;s devices. The third-party user&#39;s identity is passed in via the &#x60;agent_user_id&#x60; (see QueryRequest). This request must be authorized using service account credentials from your Actions console project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void homegraphDevicesQueryTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        QueryRequest queryRequest = null;
        QueryResponse response = api.homegraphDevicesQuery($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, queryRequest);
        // TODO: test validations
    }

    /**
     * Reports device state and optionally sends device notifications. Called by your smart home Action when the state of a third-party device changes or you need to send a notification about the device. See [Implement Report State](https://developers.home.google.com/cloud-to-cloud/integration/report-state) for more information. This method updates the device state according to its declared [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits). Publishing a new state value outside of these traits will result in an &#x60;INVALID_ARGUMENT&#x60; error response. The third-party user&#39;s identity is passed in via the &#x60;agent_user_id&#x60; (see ReportStateAndNotificationRequest). This request must be authorized using service account credentials from your Actions console project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void homegraphDevicesReportStateAndNotificationTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReportStateAndNotificationRequest reportStateAndNotificationRequest = null;
        ReportStateAndNotificationResponse response = api.homegraphDevicesReportStateAndNotification($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reportStateAndNotificationRequest);
        // TODO: test validations
    }

    /**
     * Requests Google to send an &#x60;action.devices.SYNC&#x60; [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync) to your smart home Action to update device metadata for the given user. The third-party user&#39;s identity is passed via the &#x60;agent_user_id&#x60; (see RequestSyncDevicesRequest). This request must be authorized using service account credentials from your Actions console project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void homegraphDevicesRequestSyncTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RequestSyncDevicesRequest requestSyncDevicesRequest = null;
        Object response = api.homegraphDevicesRequestSync($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestSyncDevicesRequest);
        // TODO: test validations
    }

    /**
     * Gets all the devices associated with the given third-party user. The third-party user&#39;s identity is passed in via the &#x60;agent_user_id&#x60; (see SyncRequest). This request must be authorized using service account credentials from your Actions console project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void homegraphDevicesSyncTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SyncRequest syncRequest = null;
        SyncResponse response = api.homegraphDevicesSync($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, syncRequest);
        // TODO: test validations
    }

}
