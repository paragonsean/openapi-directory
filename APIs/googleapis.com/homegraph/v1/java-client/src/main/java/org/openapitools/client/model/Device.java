/*
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AgentOtherDeviceId;
import org.openapitools.client.model.DeviceInfo;
import org.openapitools.client.model.DeviceNames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Third-party device definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:50.269337-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Device {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, Object> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private Map<String, Object> customData = new HashMap<>();

  public static final String SERIALIZED_NAME_DEVICE_INFO = "deviceInfo";
  @SerializedName(SERIALIZED_NAME_DEVICE_INFO)
  private DeviceInfo deviceInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private DeviceNames name;

  public static final String SERIALIZED_NAME_NOTIFICATION_SUPPORTED_BY_AGENT = "notificationSupportedByAgent";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SUPPORTED_BY_AGENT)
  private Boolean notificationSupportedByAgent;

  public static final String SERIALIZED_NAME_OTHER_DEVICE_IDS = "otherDeviceIds";
  @SerializedName(SERIALIZED_NAME_OTHER_DEVICE_IDS)
  private List<AgentOtherDeviceId> otherDeviceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_HINT = "roomHint";
  @SerializedName(SERIALIZED_NAME_ROOM_HINT)
  private String roomHint;

  public static final String SERIALIZED_NAME_STRUCTURE_HINT = "structureHint";
  @SerializedName(SERIALIZED_NAME_STRUCTURE_HINT)
  private String structureHint;

  public static final String SERIALIZED_NAME_TRAITS = "traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  private List<String> traits = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WILL_REPORT_STATE = "willReportState";
  @SerializedName(SERIALIZED_NAME_WILL_REPORT_STATE)
  private Boolean willReportState;

  public Device() {
  }

  public Device attributes(Map<String, Object> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Device putAttributesItem(String key, Object attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * Attributes for the traits supported by the device.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, Object> attributes) {
    this.attributes = attributes;
  }


  public Device customData(Map<String, Object> customData) {
    this.customData = customData;
    return this;
  }

  public Device putCustomDataItem(String key, Object customDataItem) {
    if (this.customData == null) {
      this.customData = new HashMap<>();
    }
    this.customData.put(key, customDataItem);
    return this;
  }

  /**
   * Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.
   * @return customData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCustomData() {
    return customData;
  }

  public void setCustomData(Map<String, Object> customData) {
    this.customData = customData;
  }


  public Device deviceInfo(DeviceInfo deviceInfo) {
    this.deviceInfo = deviceInfo;
    return this;
  }

  /**
   * Get deviceInfo
   * @return deviceInfo
   */
  @javax.annotation.Nullable
  public DeviceInfo getDeviceInfo() {
    return deviceInfo;
  }

  public void setDeviceInfo(DeviceInfo deviceInfo) {
    this.deviceInfo = deviceInfo;
  }


  public Device id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Third-party device ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Device name(DeviceNames name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public DeviceNames getName() {
    return name;
  }

  public void setName(DeviceNames name) {
    this.name = name;
  }


  public Device notificationSupportedByAgent(Boolean notificationSupportedByAgent) {
    this.notificationSupportedByAgent = notificationSupportedByAgent;
    return this;
  }

  /**
   * Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.
   * @return notificationSupportedByAgent
   */
  @javax.annotation.Nullable
  public Boolean getNotificationSupportedByAgent() {
    return notificationSupportedByAgent;
  }

  public void setNotificationSupportedByAgent(Boolean notificationSupportedByAgent) {
    this.notificationSupportedByAgent = notificationSupportedByAgent;
  }


  public Device otherDeviceIds(List<AgentOtherDeviceId> otherDeviceIds) {
    this.otherDeviceIds = otherDeviceIds;
    return this;
  }

  public Device addOtherDeviceIdsItem(AgentOtherDeviceId otherDeviceIdsItem) {
    if (this.otherDeviceIds == null) {
      this.otherDeviceIds = new ArrayList<>();
    }
    this.otherDeviceIds.add(otherDeviceIdsItem);
    return this;
  }

  /**
   * Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).
   * @return otherDeviceIds
   */
  @javax.annotation.Nullable
  public List<AgentOtherDeviceId> getOtherDeviceIds() {
    return otherDeviceIds;
  }

  public void setOtherDeviceIds(List<AgentOtherDeviceId> otherDeviceIds) {
    this.otherDeviceIds = otherDeviceIds;
  }


  public Device roomHint(String roomHint) {
    this.roomHint = roomHint;
    return this;
  }

  /**
   * Suggested name for the room where this device is installed. Google attempts to use this value during user setup.
   * @return roomHint
   */
  @javax.annotation.Nullable
  public String getRoomHint() {
    return roomHint;
  }

  public void setRoomHint(String roomHint) {
    this.roomHint = roomHint;
  }


  public Device structureHint(String structureHint) {
    this.structureHint = structureHint;
    return this;
  }

  /**
   * Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.
   * @return structureHint
   */
  @javax.annotation.Nullable
  public String getStructureHint() {
    return structureHint;
  }

  public void setStructureHint(String structureHint) {
    this.structureHint = structureHint;
  }


  public Device traits(List<String> traits) {
    this.traits = traits;
    return this;
  }

  public Device addTraitsItem(String traitsItem) {
    if (this.traits == null) {
      this.traits = new ArrayList<>();
    }
    this.traits.add(traitsItem);
    return this;
  }

  /**
   * Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).
   * @return traits
   */
  @javax.annotation.Nullable
  public List<String> getTraits() {
    return traits;
  }

  public void setTraits(List<String> traits) {
    this.traits = traits;
  }


  public Device type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Device willReportState(Boolean willReportState) {
    this.willReportState = willReportState;
    return this;
  }

  /**
   * Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.
   * @return willReportState
   */
  @javax.annotation.Nullable
  public Boolean getWillReportState() {
    return willReportState;
  }

  public void setWillReportState(Boolean willReportState) {
    this.willReportState = willReportState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.attributes, device.attributes) &&
        Objects.equals(this.customData, device.customData) &&
        Objects.equals(this.deviceInfo, device.deviceInfo) &&
        Objects.equals(this.id, device.id) &&
        Objects.equals(this.name, device.name) &&
        Objects.equals(this.notificationSupportedByAgent, device.notificationSupportedByAgent) &&
        Objects.equals(this.otherDeviceIds, device.otherDeviceIds) &&
        Objects.equals(this.roomHint, device.roomHint) &&
        Objects.equals(this.structureHint, device.structureHint) &&
        Objects.equals(this.traits, device.traits) &&
        Objects.equals(this.type, device.type) &&
        Objects.equals(this.willReportState, device.willReportState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, customData, deviceInfo, id, name, notificationSupportedByAgent, otherDeviceIds, roomHint, structureHint, traits, type, willReportState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    deviceInfo: ").append(toIndentedString(deviceInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationSupportedByAgent: ").append(toIndentedString(notificationSupportedByAgent)).append("\n");
    sb.append("    otherDeviceIds: ").append(toIndentedString(otherDeviceIds)).append("\n");
    sb.append("    roomHint: ").append(toIndentedString(roomHint)).append("\n");
    sb.append("    structureHint: ").append(toIndentedString(structureHint)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    willReportState: ").append(toIndentedString(willReportState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("customData");
    openapiFields.add("deviceInfo");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("notificationSupportedByAgent");
    openapiFields.add("otherDeviceIds");
    openapiFields.add("roomHint");
    openapiFields.add("structureHint");
    openapiFields.add("traits");
    openapiFields.add("type");
    openapiFields.add("willReportState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceInfo`
      if (jsonObj.get("deviceInfo") != null && !jsonObj.get("deviceInfo").isJsonNull()) {
        DeviceInfo.validateJsonElement(jsonObj.get("deviceInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        DeviceNames.validateJsonElement(jsonObj.get("name"));
      }
      if (jsonObj.get("otherDeviceIds") != null && !jsonObj.get("otherDeviceIds").isJsonNull()) {
        JsonArray jsonArrayotherDeviceIds = jsonObj.getAsJsonArray("otherDeviceIds");
        if (jsonArrayotherDeviceIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("otherDeviceIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `otherDeviceIds` to be an array in the JSON string but got `%s`", jsonObj.get("otherDeviceIds").toString()));
          }

          // validate the optional field `otherDeviceIds` (array)
          for (int i = 0; i < jsonArrayotherDeviceIds.size(); i++) {
            AgentOtherDeviceId.validateJsonElement(jsonArrayotherDeviceIds.get(i));
          };
        }
      }
      if ((jsonObj.get("roomHint") != null && !jsonObj.get("roomHint").isJsonNull()) && !jsonObj.get("roomHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomHint").toString()));
      }
      if ((jsonObj.get("structureHint") != null && !jsonObj.get("structureHint").isJsonNull()) && !jsonObj.get("structureHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `structureHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("structureHint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traits") != null && !jsonObj.get("traits").isJsonNull() && !jsonObj.get("traits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traits` to be an array in the JSON string but got `%s`", jsonObj.get("traits").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Device
   * @throws IOException if the JSON string is invalid with respect to Device
   */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

  /**
   * Convert an instance of Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

