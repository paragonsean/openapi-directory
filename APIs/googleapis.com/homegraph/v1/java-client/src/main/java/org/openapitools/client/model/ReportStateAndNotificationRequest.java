/*
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StateAndNotificationPayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request type for the [&#x60;ReportStateAndNotification&#x60;](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per &#x60;device_id&#x60; (for example, \&quot;123\&quot; and \&quot;456\&quot; in the following example). Example: &#x60;&#x60;&#x60;json { \&quot;requestId\&quot;: \&quot;ff36a3cc-ec34-11e6-b1a0-64510650abcf\&quot;, \&quot;agentUserId\&quot;: \&quot;1234\&quot;, \&quot;payload\&quot;: { \&quot;devices\&quot;: { \&quot;states\&quot;: { \&quot;123\&quot;: { \&quot;on\&quot;: true }, \&quot;456\&quot;: { \&quot;on\&quot;: true, \&quot;brightness\&quot;: 10 } }, } } } &#x60;&#x60;&#x60;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:50.269337-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportStateAndNotificationRequest {
  public static final String SERIALIZED_NAME_AGENT_USER_ID = "agentUserId";
  @SerializedName(SERIALIZED_NAME_AGENT_USER_ID)
  private String agentUserId;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_FOLLOW_UP_TOKEN = "followUpToken";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FOLLOW_UP_TOKEN)
  private String followUpToken;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private StateAndNotificationPayload payload;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public ReportStateAndNotificationRequest() {
  }

  public ReportStateAndNotificationRequest agentUserId(String agentUserId) {
    this.agentUserId = agentUserId;
    return this;
  }

  /**
   * Required. Third-party user ID.
   * @return agentUserId
   */
  @javax.annotation.Nullable
  public String getAgentUserId() {
    return agentUserId;
  }

  public void setAgentUserId(String agentUserId) {
    this.agentUserId = agentUserId;
  }


  public ReportStateAndNotificationRequest eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Unique identifier per event (for example, a doorbell press).
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  @Deprecated
  public ReportStateAndNotificationRequest followUpToken(String followUpToken) {
    this.followUpToken = followUpToken;
    return this;
  }

  /**
   * Deprecated.
   * @return followUpToken
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFollowUpToken() {
    return followUpToken;
  }

  @Deprecated
  public void setFollowUpToken(String followUpToken) {
    this.followUpToken = followUpToken;
  }


  public ReportStateAndNotificationRequest payload(StateAndNotificationPayload payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nullable
  public StateAndNotificationPayload getPayload() {
    return payload;
  }

  public void setPayload(StateAndNotificationPayload payload) {
    this.payload = payload;
  }


  public ReportStateAndNotificationRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Request ID used for debugging.
   * @return requestId
   */
  @javax.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportStateAndNotificationRequest reportStateAndNotificationRequest = (ReportStateAndNotificationRequest) o;
    return Objects.equals(this.agentUserId, reportStateAndNotificationRequest.agentUserId) &&
        Objects.equals(this.eventId, reportStateAndNotificationRequest.eventId) &&
        Objects.equals(this.followUpToken, reportStateAndNotificationRequest.followUpToken) &&
        Objects.equals(this.payload, reportStateAndNotificationRequest.payload) &&
        Objects.equals(this.requestId, reportStateAndNotificationRequest.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentUserId, eventId, followUpToken, payload, requestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportStateAndNotificationRequest {\n");
    sb.append("    agentUserId: ").append(toIndentedString(agentUserId)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    followUpToken: ").append(toIndentedString(followUpToken)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentUserId");
    openapiFields.add("eventId");
    openapiFields.add("followUpToken");
    openapiFields.add("payload");
    openapiFields.add("requestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportStateAndNotificationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportStateAndNotificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportStateAndNotificationRequest is not found in the empty JSON string", ReportStateAndNotificationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportStateAndNotificationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportStateAndNotificationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentUserId") != null && !jsonObj.get("agentUserId").isJsonNull()) && !jsonObj.get("agentUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentUserId").toString()));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
      if ((jsonObj.get("followUpToken") != null && !jsonObj.get("followUpToken").isJsonNull()) && !jsonObj.get("followUpToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followUpToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followUpToken").toString()));
      }
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        StateAndNotificationPayload.validateJsonElement(jsonObj.get("payload"));
      }
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportStateAndNotificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportStateAndNotificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportStateAndNotificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportStateAndNotificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportStateAndNotificationRequest>() {
           @Override
           public void write(JsonWriter out, ReportStateAndNotificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportStateAndNotificationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportStateAndNotificationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportStateAndNotificationRequest
   * @throws IOException if the JSON string is invalid with respect to ReportStateAndNotificationRequest
   */
  public static ReportStateAndNotificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportStateAndNotificationRequest.class);
  }

  /**
   * Convert an instance of ReportStateAndNotificationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

