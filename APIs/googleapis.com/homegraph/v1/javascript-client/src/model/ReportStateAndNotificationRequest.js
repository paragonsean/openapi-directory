/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StateAndNotificationPayload from './StateAndNotificationPayload';

/**
 * The ReportStateAndNotificationRequest model module.
 * @module model/ReportStateAndNotificationRequest
 * @version v1
 */
class ReportStateAndNotificationRequest {
    /**
     * Constructs a new <code>ReportStateAndNotificationRequest</code>.
     * Request type for the [&#x60;ReportStateAndNotification&#x60;](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per &#x60;device_id&#x60; (for example, \&quot;123\&quot; and \&quot;456\&quot; in the following example). Example: &#x60;&#x60;&#x60;json { \&quot;requestId\&quot;: \&quot;ff36a3cc-ec34-11e6-b1a0-64510650abcf\&quot;, \&quot;agentUserId\&quot;: \&quot;1234\&quot;, \&quot;payload\&quot;: { \&quot;devices\&quot;: { \&quot;states\&quot;: { \&quot;123\&quot;: { \&quot;on\&quot;: true }, \&quot;456\&quot;: { \&quot;on\&quot;: true, \&quot;brightness\&quot;: 10 } }, } } } &#x60;&#x60;&#x60;
     * @alias module:model/ReportStateAndNotificationRequest
     */
    constructor() { 
        
        ReportStateAndNotificationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportStateAndNotificationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportStateAndNotificationRequest} obj Optional instance to populate.
     * @return {module:model/ReportStateAndNotificationRequest} The populated <code>ReportStateAndNotificationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportStateAndNotificationRequest();

            if (data.hasOwnProperty('agentUserId')) {
                obj['agentUserId'] = ApiClient.convertToType(data['agentUserId'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('followUpToken')) {
                obj['followUpToken'] = ApiClient.convertToType(data['followUpToken'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = StateAndNotificationPayload.constructFromObject(data['payload']);
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportStateAndNotificationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportStateAndNotificationRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentUserId'] && !(typeof data['agentUserId'] === 'string' || data['agentUserId'] instanceof String)) {
            throw new Error("Expected the field `agentUserId` to be a primitive type in the JSON string but got " + data['agentUserId']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['followUpToken'] && !(typeof data['followUpToken'] === 'string' || data['followUpToken'] instanceof String)) {
            throw new Error("Expected the field `followUpToken` to be a primitive type in the JSON string but got " + data['followUpToken']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          StateAndNotificationPayload.validateJSON(data['payload']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}



/**
 * Required. Third-party user ID.
 * @member {String} agentUserId
 */
ReportStateAndNotificationRequest.prototype['agentUserId'] = undefined;

/**
 * Unique identifier per event (for example, a doorbell press).
 * @member {String} eventId
 */
ReportStateAndNotificationRequest.prototype['eventId'] = undefined;

/**
 * Deprecated.
 * @member {String} followUpToken
 */
ReportStateAndNotificationRequest.prototype['followUpToken'] = undefined;

/**
 * @member {module:model/StateAndNotificationPayload} payload
 */
ReportStateAndNotificationRequest.prototype['payload'] = undefined;

/**
 * Request ID used for debugging.
 * @member {String} requestId
 */
ReportStateAndNotificationRequest.prototype['requestId'] = undefined;






export default ReportStateAndNotificationRequest;

