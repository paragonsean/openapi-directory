/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceNames model module.
 * @module model/DeviceNames
 * @version v1
 */
class DeviceNames {
    /**
     * Constructs a new <code>DeviceNames</code>.
     * Identifiers used to describe the device.
     * @alias module:model/DeviceNames
     */
    constructor() { 
        
        DeviceNames.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceNames</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceNames} obj Optional instance to populate.
     * @return {module:model/DeviceNames} The populated <code>DeviceNames</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceNames();

            if (data.hasOwnProperty('defaultNames')) {
                obj['defaultNames'] = ApiClient.convertToType(data['defaultNames'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nicknames')) {
                obj['nicknames'] = ApiClient.convertToType(data['nicknames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceNames</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceNames</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['defaultNames'])) {
            throw new Error("Expected the field `defaultNames` to be an array in the JSON data but got " + data['defaultNames']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nicknames'])) {
            throw new Error("Expected the field `nicknames` to be an array in the JSON data but got " + data['nicknames']);
        }

        return true;
    }


}



/**
 * List of names provided by the manufacturer rather than the user, such as serial numbers, SKUs, etc.
 * @member {Array.<String>} defaultNames
 */
DeviceNames.prototype['defaultNames'] = undefined;

/**
 * Primary name of the device, generally provided by the user.
 * @member {String} name
 */
DeviceNames.prototype['name'] = undefined;

/**
 * Additional names provided by the user for the device.
 * @member {Array.<String>} nicknames
 */
DeviceNames.prototype['nicknames'] = undefined;






export default DeviceNames;

