/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version v1
 */
class DeviceInfo {
    /**
     * Constructs a new <code>DeviceInfo</code>.
     * Device information.
     * @alias module:model/DeviceInfo
     */
    constructor() { 
        
        DeviceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInfo} obj Optional instance to populate.
     * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInfo();

            if (data.hasOwnProperty('hwVersion')) {
                obj['hwVersion'] = ApiClient.convertToType(data['hwVersion'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('swVersion')) {
                obj['swVersion'] = ApiClient.convertToType(data['swVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hwVersion'] && !(typeof data['hwVersion'] === 'string' || data['hwVersion'] instanceof String)) {
            throw new Error("Expected the field `hwVersion` to be a primitive type in the JSON string but got " + data['hwVersion']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['swVersion'] && !(typeof data['swVersion'] === 'string' || data['swVersion'] instanceof String)) {
            throw new Error("Expected the field `swVersion` to be a primitive type in the JSON string but got " + data['swVersion']);
        }

        return true;
    }


}



/**
 * Device hardware version.
 * @member {String} hwVersion
 */
DeviceInfo.prototype['hwVersion'] = undefined;

/**
 * Device manufacturer.
 * @member {String} manufacturer
 */
DeviceInfo.prototype['manufacturer'] = undefined;

/**
 * Device model.
 * @member {String} model
 */
DeviceInfo.prototype['model'] = undefined;

/**
 * Device software version.
 * @member {String} swVersion
 */
DeviceInfo.prototype['swVersion'] = undefined;






export default DeviceInfo;

