/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentOtherDeviceId from './AgentOtherDeviceId';
import DeviceInfo from './DeviceInfo';
import DeviceNames from './DeviceNames';

/**
 * The Device model module.
 * @module model/Device
 * @version v1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * Third-party device definition.
     * @alias module:model/Device
     */
    constructor() { 
        
        Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': Object});
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], {'String': Object});
            }
            if (data.hasOwnProperty('deviceInfo')) {
                obj['deviceInfo'] = DeviceInfo.constructFromObject(data['deviceInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = DeviceNames.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('notificationSupportedByAgent')) {
                obj['notificationSupportedByAgent'] = ApiClient.convertToType(data['notificationSupportedByAgent'], 'Boolean');
            }
            if (data.hasOwnProperty('otherDeviceIds')) {
                obj['otherDeviceIds'] = ApiClient.convertToType(data['otherDeviceIds'], [AgentOtherDeviceId]);
            }
            if (data.hasOwnProperty('roomHint')) {
                obj['roomHint'] = ApiClient.convertToType(data['roomHint'], 'String');
            }
            if (data.hasOwnProperty('structureHint')) {
                obj['structureHint'] = ApiClient.convertToType(data['structureHint'], 'String');
            }
            if (data.hasOwnProperty('traits')) {
                obj['traits'] = ApiClient.convertToType(data['traits'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('willReportState')) {
                obj['willReportState'] = ApiClient.convertToType(data['willReportState'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deviceInfo`
        if (data['deviceInfo']) { // data not null
          DeviceInfo.validateJSON(data['deviceInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          DeviceNames.validateJSON(data['name']);
        }
        if (data['otherDeviceIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['otherDeviceIds'])) {
                throw new Error("Expected the field `otherDeviceIds` to be an array in the JSON data but got " + data['otherDeviceIds']);
            }
            // validate the optional field `otherDeviceIds` (array)
            for (const item of data['otherDeviceIds']) {
                AgentOtherDeviceId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['roomHint'] && !(typeof data['roomHint'] === 'string' || data['roomHint'] instanceof String)) {
            throw new Error("Expected the field `roomHint` to be a primitive type in the JSON string but got " + data['roomHint']);
        }
        // ensure the json data is a string
        if (data['structureHint'] && !(typeof data['structureHint'] === 'string' || data['structureHint'] instanceof String)) {
            throw new Error("Expected the field `structureHint` to be a primitive type in the JSON string but got " + data['structureHint']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['traits'])) {
            throw new Error("Expected the field `traits` to be an array in the JSON data but got " + data['traits']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Attributes for the traits supported by the device.
 * @member {Object.<String, Object>} attributes
 */
Device.prototype['attributes'] = undefined;

/**
 * Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.
 * @member {Object.<String, Object>} customData
 */
Device.prototype['customData'] = undefined;

/**
 * @member {module:model/DeviceInfo} deviceInfo
 */
Device.prototype['deviceInfo'] = undefined;

/**
 * Third-party device ID.
 * @member {String} id
 */
Device.prototype['id'] = undefined;

/**
 * @member {module:model/DeviceNames} name
 */
Device.prototype['name'] = undefined;

/**
 * Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.
 * @member {Boolean} notificationSupportedByAgent
 */
Device.prototype['notificationSupportedByAgent'] = undefined;

/**
 * Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).
 * @member {Array.<module:model/AgentOtherDeviceId>} otherDeviceIds
 */
Device.prototype['otherDeviceIds'] = undefined;

/**
 * Suggested name for the room where this device is installed. Google attempts to use this value during user setup.
 * @member {String} roomHint
 */
Device.prototype['roomHint'] = undefined;

/**
 * Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.
 * @member {String} structureHint
 */
Device.prototype['structureHint'] = undefined;

/**
 * Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).
 * @member {Array.<String>} traits
 */
Device.prototype['traits'] = undefined;

/**
 * Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).
 * @member {String} type
 */
Device.prototype['type'] = undefined;

/**
 * Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.
 * @member {Boolean} willReportState
 */
Device.prototype['willReportState'] = undefined;






export default Device;

