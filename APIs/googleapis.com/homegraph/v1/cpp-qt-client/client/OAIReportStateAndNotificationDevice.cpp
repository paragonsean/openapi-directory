/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportStateAndNotificationDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportStateAndNotificationDevice::OAIReportStateAndNotificationDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportStateAndNotificationDevice::OAIReportStateAndNotificationDevice() {
    this->initializeModel();
}

OAIReportStateAndNotificationDevice::~OAIReportStateAndNotificationDevice() {}

void OAIReportStateAndNotificationDevice::initializeModel() {

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;
}

void OAIReportStateAndNotificationDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportStateAndNotificationDevice::fromJsonObject(QJsonObject json) {

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;
}

QString OAIReportStateAndNotificationDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportStateAndNotificationDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_states.size() > 0) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIReportStateAndNotificationDevice::getNotifications() const {
    return m_notifications;
}
void OAIReportStateAndNotificationDevice::setNotifications(const QMap<QString, QJsonValue> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIReportStateAndNotificationDevice::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIReportStateAndNotificationDevice::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QMap<QString, QJsonValue> OAIReportStateAndNotificationDevice::getStates() const {
    return m_states;
}
void OAIReportStateAndNotificationDevice::setStates(const QMap<QString, QJsonValue> &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIReportStateAndNotificationDevice::is_states_Set() const{
    return m_states_isSet;
}

bool OAIReportStateAndNotificationDevice::is_states_Valid() const{
    return m_states_isValid;
}

bool OAIReportStateAndNotificationDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportStateAndNotificationDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
