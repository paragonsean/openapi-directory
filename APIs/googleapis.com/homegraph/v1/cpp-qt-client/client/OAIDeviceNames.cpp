/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceNames.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceNames::OAIDeviceNames(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceNames::OAIDeviceNames() {
    this->initializeModel();
}

OAIDeviceNames::~OAIDeviceNames() {}

void OAIDeviceNames::initializeModel() {

    m_default_names_isSet = false;
    m_default_names_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nicknames_isSet = false;
    m_nicknames_isValid = false;
}

void OAIDeviceNames::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceNames::fromJsonObject(QJsonObject json) {

    m_default_names_isValid = ::OpenAPI::fromJsonValue(m_default_names, json[QString("defaultNames")]);
    m_default_names_isSet = !json[QString("defaultNames")].isNull() && m_default_names_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nicknames_isValid = ::OpenAPI::fromJsonValue(m_nicknames, json[QString("nicknames")]);
    m_nicknames_isSet = !json[QString("nicknames")].isNull() && m_nicknames_isValid;
}

QString OAIDeviceNames::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceNames::asJsonObject() const {
    QJsonObject obj;
    if (m_default_names.size() > 0) {
        obj.insert(QString("defaultNames"), ::OpenAPI::toJsonValue(m_default_names));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nicknames.size() > 0) {
        obj.insert(QString("nicknames"), ::OpenAPI::toJsonValue(m_nicknames));
    }
    return obj;
}

QList<QString> OAIDeviceNames::getDefaultNames() const {
    return m_default_names;
}
void OAIDeviceNames::setDefaultNames(const QList<QString> &default_names) {
    m_default_names = default_names;
    m_default_names_isSet = true;
}

bool OAIDeviceNames::is_default_names_Set() const{
    return m_default_names_isSet;
}

bool OAIDeviceNames::is_default_names_Valid() const{
    return m_default_names_isValid;
}

QString OAIDeviceNames::getName() const {
    return m_name;
}
void OAIDeviceNames::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeviceNames::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeviceNames::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIDeviceNames::getNicknames() const {
    return m_nicknames;
}
void OAIDeviceNames::setNicknames(const QList<QString> &nicknames) {
    m_nicknames = nicknames;
    m_nicknames_isSet = true;
}

bool OAIDeviceNames::is_nicknames_Set() const{
    return m_nicknames_isSet;
}

bool OAIDeviceNames::is_nicknames_Valid() const{
    return m_nicknames_isValid;
}

bool OAIDeviceNames::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nicknames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceNames::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
