/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDevice.h
 *
 * Third-party device definition.
 */

#ifndef OAIDevice_H
#define OAIDevice_H

#include <QJsonObject>

#include "OAIAgentOtherDeviceId.h"
#include "OAIDeviceInfo.h"
#include "OAIDeviceNames.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceInfo;
class OAIDeviceNames;
class OAIAgentOtherDeviceId;

class OAIDevice : public OAIObject {
public:
    OAIDevice();
    OAIDevice(QString json);
    ~OAIDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getAttributes() const;
    void setAttributes(const QMap<QString, QJsonValue> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QMap<QString, QJsonValue> getCustomData() const;
    void setCustomData(const QMap<QString, QJsonValue> &custom_data);
    bool is_custom_data_Set() const;
    bool is_custom_data_Valid() const;

    OAIDeviceInfo getDeviceInfo() const;
    void setDeviceInfo(const OAIDeviceInfo &device_info);
    bool is_device_info_Set() const;
    bool is_device_info_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIDeviceNames getName() const;
    void setName(const OAIDeviceNames &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isNotificationSupportedByAgent() const;
    void setNotificationSupportedByAgent(const bool &notification_supported_by_agent);
    bool is_notification_supported_by_agent_Set() const;
    bool is_notification_supported_by_agent_Valid() const;

    QList<OAIAgentOtherDeviceId> getOtherDeviceIds() const;
    void setOtherDeviceIds(const QList<OAIAgentOtherDeviceId> &other_device_ids);
    bool is_other_device_ids_Set() const;
    bool is_other_device_ids_Valid() const;

    QString getRoomHint() const;
    void setRoomHint(const QString &room_hint);
    bool is_room_hint_Set() const;
    bool is_room_hint_Valid() const;

    QString getStructureHint() const;
    void setStructureHint(const QString &structure_hint);
    bool is_structure_hint_Set() const;
    bool is_structure_hint_Valid() const;

    QList<QString> getTraits() const;
    void setTraits(const QList<QString> &traits);
    bool is_traits_Set() const;
    bool is_traits_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isWillReportState() const;
    void setWillReportState(const bool &will_report_state);
    bool is_will_report_state_Set() const;
    bool is_will_report_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QMap<QString, QJsonValue> m_custom_data;
    bool m_custom_data_isSet;
    bool m_custom_data_isValid;

    OAIDeviceInfo m_device_info;
    bool m_device_info_isSet;
    bool m_device_info_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIDeviceNames m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_notification_supported_by_agent;
    bool m_notification_supported_by_agent_isSet;
    bool m_notification_supported_by_agent_isValid;

    QList<OAIAgentOtherDeviceId> m_other_device_ids;
    bool m_other_device_ids_isSet;
    bool m_other_device_ids_isValid;

    QString m_room_hint;
    bool m_room_hint_isSet;
    bool m_room_hint_isValid;

    QString m_structure_hint;
    bool m_structure_hint_isSet;
    bool m_structure_hint_isValid;

    QList<QString> m_traits;
    bool m_traits_isSet;
    bool m_traits_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_will_report_state;
    bool m_will_report_state_isSet;
    bool m_will_report_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDevice)

#endif // OAIDevice_H
