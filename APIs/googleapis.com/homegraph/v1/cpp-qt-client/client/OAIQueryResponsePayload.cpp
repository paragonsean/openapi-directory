/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResponsePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResponsePayload::OAIQueryResponsePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResponsePayload::OAIQueryResponsePayload() {
    this->initializeModel();
}

OAIQueryResponsePayload::~OAIQueryResponsePayload() {}

void OAIQueryResponsePayload::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;
}

void OAIQueryResponsePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResponsePayload::fromJsonObject(QJsonObject json) {

    if(json["devices"].isObject()){
        auto varmap = json["devices"].toObject().toVariantMap();
        m_devices_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QJsonValue> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_devices_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_devices_isSet &= !jval.isNull() && m_devices_isValid;
                m_devices.insert(m_devices.end(), val, item);
            }
        }
    }
}

QString OAIQueryResponsePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResponsePayload::asJsonObject() const {
    QJsonObject obj;
    if (m_devices.size() > 0) {
        
        obj.insert(QString("devices"), toJsonValue(m_devices));
    }
    return obj;
}

QMap<QString, QMap<QString, QJsonValue>> OAIQueryResponsePayload::getDevices() const {
    return m_devices;
}
void OAIQueryResponsePayload::setDevices(const QMap<QString, QMap<QString, QJsonValue>> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIQueryResponsePayload::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIQueryResponsePayload::is_devices_Valid() const{
    return m_devices_isValid;
}

bool OAIQueryResponsePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResponsePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
