/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestSyncDevicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestSyncDevicesRequest::OAIRequestSyncDevicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestSyncDevicesRequest::OAIRequestSyncDevicesRequest() {
    this->initializeModel();
}

OAIRequestSyncDevicesRequest::~OAIRequestSyncDevicesRequest() {}

void OAIRequestSyncDevicesRequest::initializeModel() {

    m_agent_user_id_isSet = false;
    m_agent_user_id_isValid = false;

    m_async_isSet = false;
    m_async_isValid = false;
}

void OAIRequestSyncDevicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestSyncDevicesRequest::fromJsonObject(QJsonObject json) {

    m_agent_user_id_isValid = ::OpenAPI::fromJsonValue(m_agent_user_id, json[QString("agentUserId")]);
    m_agent_user_id_isSet = !json[QString("agentUserId")].isNull() && m_agent_user_id_isValid;

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("async")]);
    m_async_isSet = !json[QString("async")].isNull() && m_async_isValid;
}

QString OAIRequestSyncDevicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestSyncDevicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_user_id_isSet) {
        obj.insert(QString("agentUserId"), ::OpenAPI::toJsonValue(m_agent_user_id));
    }
    if (m_async_isSet) {
        obj.insert(QString("async"), ::OpenAPI::toJsonValue(m_async));
    }
    return obj;
}

QString OAIRequestSyncDevicesRequest::getAgentUserId() const {
    return m_agent_user_id;
}
void OAIRequestSyncDevicesRequest::setAgentUserId(const QString &agent_user_id) {
    m_agent_user_id = agent_user_id;
    m_agent_user_id_isSet = true;
}

bool OAIRequestSyncDevicesRequest::is_agent_user_id_Set() const{
    return m_agent_user_id_isSet;
}

bool OAIRequestSyncDevicesRequest::is_agent_user_id_Valid() const{
    return m_agent_user_id_isValid;
}

bool OAIRequestSyncDevicesRequest::isAsync() const {
    return m_async;
}
void OAIRequestSyncDevicesRequest::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIRequestSyncDevicesRequest::is_async_Set() const{
    return m_async_isSet;
}

bool OAIRequestSyncDevicesRequest::is_async_Valid() const{
    return m_async_isValid;
}

bool OAIRequestSyncDevicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestSyncDevicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
