/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_device_info_isSet = false;
    m_device_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_supported_by_agent_isSet = false;
    m_notification_supported_by_agent_isValid = false;

    m_other_device_ids_isSet = false;
    m_other_device_ids_isValid = false;

    m_room_hint_isSet = false;
    m_room_hint_isValid = false;

    m_structure_hint_isSet = false;
    m_structure_hint_isValid = false;

    m_traits_isSet = false;
    m_traits_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_will_report_state_isSet = false;
    m_will_report_state_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_device_info_isValid = ::OpenAPI::fromJsonValue(m_device_info, json[QString("deviceInfo")]);
    m_device_info_isSet = !json[QString("deviceInfo")].isNull() && m_device_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_supported_by_agent_isValid = ::OpenAPI::fromJsonValue(m_notification_supported_by_agent, json[QString("notificationSupportedByAgent")]);
    m_notification_supported_by_agent_isSet = !json[QString("notificationSupportedByAgent")].isNull() && m_notification_supported_by_agent_isValid;

    m_other_device_ids_isValid = ::OpenAPI::fromJsonValue(m_other_device_ids, json[QString("otherDeviceIds")]);
    m_other_device_ids_isSet = !json[QString("otherDeviceIds")].isNull() && m_other_device_ids_isValid;

    m_room_hint_isValid = ::OpenAPI::fromJsonValue(m_room_hint, json[QString("roomHint")]);
    m_room_hint_isSet = !json[QString("roomHint")].isNull() && m_room_hint_isValid;

    m_structure_hint_isValid = ::OpenAPI::fromJsonValue(m_structure_hint, json[QString("structureHint")]);
    m_structure_hint_isSet = !json[QString("structureHint")].isNull() && m_structure_hint_isValid;

    m_traits_isValid = ::OpenAPI::fromJsonValue(m_traits, json[QString("traits")]);
    m_traits_isSet = !json[QString("traits")].isNull() && m_traits_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_will_report_state_isValid = ::OpenAPI::fromJsonValue(m_will_report_state, json[QString("willReportState")]);
    m_will_report_state_isSet = !json[QString("willReportState")].isNull() && m_will_report_state_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_custom_data.size() > 0) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_device_info.isSet()) {
        obj.insert(QString("deviceInfo"), ::OpenAPI::toJsonValue(m_device_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_supported_by_agent_isSet) {
        obj.insert(QString("notificationSupportedByAgent"), ::OpenAPI::toJsonValue(m_notification_supported_by_agent));
    }
    if (m_other_device_ids.size() > 0) {
        obj.insert(QString("otherDeviceIds"), ::OpenAPI::toJsonValue(m_other_device_ids));
    }
    if (m_room_hint_isSet) {
        obj.insert(QString("roomHint"), ::OpenAPI::toJsonValue(m_room_hint));
    }
    if (m_structure_hint_isSet) {
        obj.insert(QString("structureHint"), ::OpenAPI::toJsonValue(m_structure_hint));
    }
    if (m_traits.size() > 0) {
        obj.insert(QString("traits"), ::OpenAPI::toJsonValue(m_traits));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_will_report_state_isSet) {
        obj.insert(QString("willReportState"), ::OpenAPI::toJsonValue(m_will_report_state));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIDevice::getAttributes() const {
    return m_attributes;
}
void OAIDevice::setAttributes(const QMap<QString, QJsonValue> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDevice::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDevice::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QJsonValue> OAIDevice::getCustomData() const {
    return m_custom_data;
}
void OAIDevice::setCustomData(const QMap<QString, QJsonValue> &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIDevice::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIDevice::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

OAIDeviceInfo OAIDevice::getDeviceInfo() const {
    return m_device_info;
}
void OAIDevice::setDeviceInfo(const OAIDeviceInfo &device_info) {
    m_device_info = device_info;
    m_device_info_isSet = true;
}

bool OAIDevice::is_device_info_Set() const{
    return m_device_info_isSet;
}

bool OAIDevice::is_device_info_Valid() const{
    return m_device_info_isValid;
}

QString OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

OAIDeviceNames OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const OAIDeviceNames &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDevice::isNotificationSupportedByAgent() const {
    return m_notification_supported_by_agent;
}
void OAIDevice::setNotificationSupportedByAgent(const bool &notification_supported_by_agent) {
    m_notification_supported_by_agent = notification_supported_by_agent;
    m_notification_supported_by_agent_isSet = true;
}

bool OAIDevice::is_notification_supported_by_agent_Set() const{
    return m_notification_supported_by_agent_isSet;
}

bool OAIDevice::is_notification_supported_by_agent_Valid() const{
    return m_notification_supported_by_agent_isValid;
}

QList<OAIAgentOtherDeviceId> OAIDevice::getOtherDeviceIds() const {
    return m_other_device_ids;
}
void OAIDevice::setOtherDeviceIds(const QList<OAIAgentOtherDeviceId> &other_device_ids) {
    m_other_device_ids = other_device_ids;
    m_other_device_ids_isSet = true;
}

bool OAIDevice::is_other_device_ids_Set() const{
    return m_other_device_ids_isSet;
}

bool OAIDevice::is_other_device_ids_Valid() const{
    return m_other_device_ids_isValid;
}

QString OAIDevice::getRoomHint() const {
    return m_room_hint;
}
void OAIDevice::setRoomHint(const QString &room_hint) {
    m_room_hint = room_hint;
    m_room_hint_isSet = true;
}

bool OAIDevice::is_room_hint_Set() const{
    return m_room_hint_isSet;
}

bool OAIDevice::is_room_hint_Valid() const{
    return m_room_hint_isValid;
}

QString OAIDevice::getStructureHint() const {
    return m_structure_hint;
}
void OAIDevice::setStructureHint(const QString &structure_hint) {
    m_structure_hint = structure_hint;
    m_structure_hint_isSet = true;
}

bool OAIDevice::is_structure_hint_Set() const{
    return m_structure_hint_isSet;
}

bool OAIDevice::is_structure_hint_Valid() const{
    return m_structure_hint_isValid;
}

QList<QString> OAIDevice::getTraits() const {
    return m_traits;
}
void OAIDevice::setTraits(const QList<QString> &traits) {
    m_traits = traits;
    m_traits_isSet = true;
}

bool OAIDevice::is_traits_Set() const{
    return m_traits_isSet;
}

bool OAIDevice::is_traits_Valid() const{
    return m_traits_isValid;
}

QString OAIDevice::getType() const {
    return m_type;
}
void OAIDevice::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDevice::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDevice::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDevice::isWillReportState() const {
    return m_will_report_state;
}
void OAIDevice::setWillReportState(const bool &will_report_state) {
    m_will_report_state = will_report_state;
    m_will_report_state_isSet = true;
}

bool OAIDevice::is_will_report_state_Set() const{
    return m_will_report_state_isSet;
}

bool OAIDevice::is_will_report_state_Valid() const{
    return m_will_report_state_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_supported_by_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_device_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_structure_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_will_report_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
