/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportStateAndNotificationRequest.h
 *
 * Request type for the [&#x60;ReportStateAndNotification&#x60;](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per &#x60;device_id&#x60; (for example, \&quot;123\&quot; and \&quot;456\&quot; in the following example). Example: &#x60;&#x60;&#x60;json { \&quot;requestId\&quot;: \&quot;ff36a3cc-ec34-11e6-b1a0-64510650abcf\&quot;, \&quot;agentUserId\&quot;: \&quot;1234\&quot;, \&quot;payload\&quot;: { \&quot;devices\&quot;: { \&quot;states\&quot;: { \&quot;123\&quot;: { \&quot;on\&quot;: true }, \&quot;456\&quot;: { \&quot;on\&quot;: true, \&quot;brightness\&quot;: 10 } }, } } } &#x60;&#x60;&#x60;
 */

#ifndef OAIReportStateAndNotificationRequest_H
#define OAIReportStateAndNotificationRequest_H

#include <QJsonObject>

#include "OAIStateAndNotificationPayload.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStateAndNotificationPayload;

class OAIReportStateAndNotificationRequest : public OAIObject {
public:
    OAIReportStateAndNotificationRequest();
    OAIReportStateAndNotificationRequest(QString json);
    ~OAIReportStateAndNotificationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAgentUserId() const;
    void setAgentUserId(const QString &agent_user_id);
    bool is_agent_user_id_Set() const;
    bool is_agent_user_id_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    Q_DECL_DEPRECATED QString getFollowUpToken() const;
    Q_DECL_DEPRECATED void setFollowUpToken(const QString &follow_up_token);
    Q_DECL_DEPRECATED bool is_follow_up_token_Set() const;
    Q_DECL_DEPRECATED bool is_follow_up_token_Valid() const;

    OAIStateAndNotificationPayload getPayload() const;
    void setPayload(const OAIStateAndNotificationPayload &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_agent_user_id;
    bool m_agent_user_id_isSet;
    bool m_agent_user_id_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_follow_up_token;
    bool m_follow_up_token_isSet;
    bool m_follow_up_token_isValid;

    OAIStateAndNotificationPayload m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportStateAndNotificationRequest)

#endif // OAIReportStateAndNotificationRequest_H
