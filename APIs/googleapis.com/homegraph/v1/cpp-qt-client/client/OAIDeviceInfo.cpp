/**
 * HomeGraph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceInfo::OAIDeviceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceInfo::OAIDeviceInfo() {
    this->initializeModel();
}

OAIDeviceInfo::~OAIDeviceInfo() {}

void OAIDeviceInfo::initializeModel() {

    m_hw_version_isSet = false;
    m_hw_version_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_sw_version_isSet = false;
    m_sw_version_isValid = false;
}

void OAIDeviceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceInfo::fromJsonObject(QJsonObject json) {

    m_hw_version_isValid = ::OpenAPI::fromJsonValue(m_hw_version, json[QString("hwVersion")]);
    m_hw_version_isSet = !json[QString("hwVersion")].isNull() && m_hw_version_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_sw_version_isValid = ::OpenAPI::fromJsonValue(m_sw_version, json[QString("swVersion")]);
    m_sw_version_isSet = !json[QString("swVersion")].isNull() && m_sw_version_isValid;
}

QString OAIDeviceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_hw_version_isSet) {
        obj.insert(QString("hwVersion"), ::OpenAPI::toJsonValue(m_hw_version));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_sw_version_isSet) {
        obj.insert(QString("swVersion"), ::OpenAPI::toJsonValue(m_sw_version));
    }
    return obj;
}

QString OAIDeviceInfo::getHwVersion() const {
    return m_hw_version;
}
void OAIDeviceInfo::setHwVersion(const QString &hw_version) {
    m_hw_version = hw_version;
    m_hw_version_isSet = true;
}

bool OAIDeviceInfo::is_hw_version_Set() const{
    return m_hw_version_isSet;
}

bool OAIDeviceInfo::is_hw_version_Valid() const{
    return m_hw_version_isValid;
}

QString OAIDeviceInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIDeviceInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDeviceInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDeviceInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIDeviceInfo::getModel() const {
    return m_model;
}
void OAIDeviceInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDeviceInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDeviceInfo::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDeviceInfo::getSwVersion() const {
    return m_sw_version;
}
void OAIDeviceInfo::setSwVersion(const QString &sw_version) {
    m_sw_version = sw_version;
    m_sw_version_isSet = true;
}

bool OAIDeviceInfo::is_sw_version_Set() const{
    return m_sw_version_isSet;
}

bool OAIDeviceInfo::is_sw_version_Valid() const{
    return m_sw_version_isValid;
}

bool OAIDeviceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hw_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sw_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
