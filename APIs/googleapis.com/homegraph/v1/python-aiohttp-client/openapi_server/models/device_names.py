# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceNames(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_names: List[str]=None, name: str=None, nicknames: List[str]=None):
        """DeviceNames - a model defined in OpenAPI

        :param default_names: The default_names of this DeviceNames.
        :param name: The name of this DeviceNames.
        :param nicknames: The nicknames of this DeviceNames.
        """
        self.openapi_types = {
            'default_names': List[str],
            'name': str,
            'nicknames': List[str]
        }

        self.attribute_map = {
            'default_names': 'defaultNames',
            'name': 'name',
            'nicknames': 'nicknames'
        }

        self._default_names = default_names
        self._name = name
        self._nicknames = nicknames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceNames':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceNames of this DeviceNames.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_names(self):
        """Gets the default_names of this DeviceNames.

        List of names provided by the manufacturer rather than the user, such as serial numbers, SKUs, etc.

        :return: The default_names of this DeviceNames.
        :rtype: List[str]
        """
        return self._default_names

    @default_names.setter
    def default_names(self, default_names):
        """Sets the default_names of this DeviceNames.

        List of names provided by the manufacturer rather than the user, such as serial numbers, SKUs, etc.

        :param default_names: The default_names of this DeviceNames.
        :type default_names: List[str]
        """

        self._default_names = default_names

    @property
    def name(self):
        """Gets the name of this DeviceNames.

        Primary name of the device, generally provided by the user.

        :return: The name of this DeviceNames.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceNames.

        Primary name of the device, generally provided by the user.

        :param name: The name of this DeviceNames.
        :type name: str
        """

        self._name = name

    @property
    def nicknames(self):
        """Gets the nicknames of this DeviceNames.

        Additional names provided by the user for the device.

        :return: The nicknames of this DeviceNames.
        :rtype: List[str]
        """
        return self._nicknames

    @nicknames.setter
    def nicknames(self, nicknames):
        """Sets the nicknames of this DeviceNames.

        Additional names provided by the user for the device.

        :param nicknames: The nicknames of this DeviceNames.
        :type nicknames: List[str]
        """

        self._nicknames = nicknames
