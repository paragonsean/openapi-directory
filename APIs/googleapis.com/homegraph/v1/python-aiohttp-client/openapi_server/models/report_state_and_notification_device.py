# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportStateAndNotificationDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notifications: Dict[str, object]=None, states: Dict[str, object]=None):
        """ReportStateAndNotificationDevice - a model defined in OpenAPI

        :param notifications: The notifications of this ReportStateAndNotificationDevice.
        :param states: The states of this ReportStateAndNotificationDevice.
        """
        self.openapi_types = {
            'notifications': Dict[str, object],
            'states': Dict[str, object]
        }

        self.attribute_map = {
            'notifications': 'notifications',
            'states': 'states'
        }

        self._notifications = notifications
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportStateAndNotificationDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportStateAndNotificationDevice of this ReportStateAndNotificationDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notifications(self):
        """Gets the notifications of this ReportStateAndNotificationDevice.

        Notifications metadata for devices. See the **Device NOTIFICATIONS** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).

        :return: The notifications of this ReportStateAndNotificationDevice.
        :rtype: Dict[str, object]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this ReportStateAndNotificationDevice.

        Notifications metadata for devices. See the **Device NOTIFICATIONS** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).

        :param notifications: The notifications of this ReportStateAndNotificationDevice.
        :type notifications: Dict[str, object]
        """

        self._notifications = notifications

    @property
    def states(self):
        """Gets the states of this ReportStateAndNotificationDevice.

        States of devices to update. See the **Device STATES** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).

        :return: The states of this ReportStateAndNotificationDevice.
        :rtype: Dict[str, object]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this ReportStateAndNotificationDevice.

        States of devices to update. See the **Device STATES** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).

        :param states: The states of this ReportStateAndNotificationDevice.
        :type states: Dict[str, object]
        """

        self._states = states
