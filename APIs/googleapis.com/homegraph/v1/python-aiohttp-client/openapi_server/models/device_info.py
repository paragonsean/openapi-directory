# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hw_version: str=None, manufacturer: str=None, model: str=None, sw_version: str=None):
        """DeviceInfo - a model defined in OpenAPI

        :param hw_version: The hw_version of this DeviceInfo.
        :param manufacturer: The manufacturer of this DeviceInfo.
        :param model: The model of this DeviceInfo.
        :param sw_version: The sw_version of this DeviceInfo.
        """
        self.openapi_types = {
            'hw_version': str,
            'manufacturer': str,
            'model': str,
            'sw_version': str
        }

        self.attribute_map = {
            'hw_version': 'hwVersion',
            'manufacturer': 'manufacturer',
            'model': 'model',
            'sw_version': 'swVersion'
        }

        self._hw_version = hw_version
        self._manufacturer = manufacturer
        self._model = model
        self._sw_version = sw_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceInfo of this DeviceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hw_version(self):
        """Gets the hw_version of this DeviceInfo.

        Device hardware version.

        :return: The hw_version of this DeviceInfo.
        :rtype: str
        """
        return self._hw_version

    @hw_version.setter
    def hw_version(self, hw_version):
        """Sets the hw_version of this DeviceInfo.

        Device hardware version.

        :param hw_version: The hw_version of this DeviceInfo.
        :type hw_version: str
        """

        self._hw_version = hw_version

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceInfo.

        Device manufacturer.

        :return: The manufacturer of this DeviceInfo.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceInfo.

        Device manufacturer.

        :param manufacturer: The manufacturer of this DeviceInfo.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this DeviceInfo.

        Device model.

        :return: The model of this DeviceInfo.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceInfo.

        Device model.

        :param model: The model of this DeviceInfo.
        :type model: str
        """

        self._model = model

    @property
    def sw_version(self):
        """Gets the sw_version of this DeviceInfo.

        Device software version.

        :return: The sw_version of this DeviceInfo.
        :rtype: str
        """
        return self._sw_version

    @sw_version.setter
    def sw_version(self, sw_version):
        """Sets the sw_version of this DeviceInfo.

        Device software version.

        :param sw_version: The sw_version of this DeviceInfo.
        :type sw_version: str
        """

        self._sw_version = sw_version
