# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_other_device_id import AgentOtherDeviceId
from openapi_server.models.device_info import DeviceInfo
from openapi_server.models.device_names import DeviceNames
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, object]=None, custom_data: Dict[str, object]=None, device_info: DeviceInfo=None, id: str=None, name: DeviceNames=None, notification_supported_by_agent: bool=None, other_device_ids: List[AgentOtherDeviceId]=None, room_hint: str=None, structure_hint: str=None, traits: List[str]=None, type: str=None, will_report_state: bool=None):
        """Device - a model defined in OpenAPI

        :param attributes: The attributes of this Device.
        :param custom_data: The custom_data of this Device.
        :param device_info: The device_info of this Device.
        :param id: The id of this Device.
        :param name: The name of this Device.
        :param notification_supported_by_agent: The notification_supported_by_agent of this Device.
        :param other_device_ids: The other_device_ids of this Device.
        :param room_hint: The room_hint of this Device.
        :param structure_hint: The structure_hint of this Device.
        :param traits: The traits of this Device.
        :param type: The type of this Device.
        :param will_report_state: The will_report_state of this Device.
        """
        self.openapi_types = {
            'attributes': Dict[str, object],
            'custom_data': Dict[str, object],
            'device_info': DeviceInfo,
            'id': str,
            'name': DeviceNames,
            'notification_supported_by_agent': bool,
            'other_device_ids': List[AgentOtherDeviceId],
            'room_hint': str,
            'structure_hint': str,
            'traits': List[str],
            'type': str,
            'will_report_state': bool
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'custom_data': 'customData',
            'device_info': 'deviceInfo',
            'id': 'id',
            'name': 'name',
            'notification_supported_by_agent': 'notificationSupportedByAgent',
            'other_device_ids': 'otherDeviceIds',
            'room_hint': 'roomHint',
            'structure_hint': 'structureHint',
            'traits': 'traits',
            'type': 'type',
            'will_report_state': 'willReportState'
        }

        self._attributes = attributes
        self._custom_data = custom_data
        self._device_info = device_info
        self._id = id
        self._name = name
        self._notification_supported_by_agent = notification_supported_by_agent
        self._other_device_ids = other_device_ids
        self._room_hint = room_hint
        self._structure_hint = structure_hint
        self._traits = traits
        self._type = type
        self._will_report_state = will_report_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Device.

        Attributes for the traits supported by the device.

        :return: The attributes of this Device.
        :rtype: Dict[str, object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Device.

        Attributes for the traits supported by the device.

        :param attributes: The attributes of this Device.
        :type attributes: Dict[str, object]
        """

        self._attributes = attributes

    @property
    def custom_data(self):
        """Gets the custom_data of this Device.

        Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.

        :return: The custom_data of this Device.
        :rtype: Dict[str, object]
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Device.

        Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.

        :param custom_data: The custom_data of this Device.
        :type custom_data: Dict[str, object]
        """

        self._custom_data = custom_data

    @property
    def device_info(self):
        """Gets the device_info of this Device.


        :return: The device_info of this Device.
        :rtype: DeviceInfo
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """Sets the device_info of this Device.


        :param device_info: The device_info of this Device.
        :type device_info: DeviceInfo
        """

        self._device_info = device_info

    @property
    def id(self):
        """Gets the id of this Device.

        Third-party device ID.

        :return: The id of this Device.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.

        Third-party device ID.

        :param id: The id of this Device.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Device.


        :return: The name of this Device.
        :rtype: DeviceNames
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.
        :type name: DeviceNames
        """

        self._name = name

    @property
    def notification_supported_by_agent(self):
        """Gets the notification_supported_by_agent of this Device.

        Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.

        :return: The notification_supported_by_agent of this Device.
        :rtype: bool
        """
        return self._notification_supported_by_agent

    @notification_supported_by_agent.setter
    def notification_supported_by_agent(self, notification_supported_by_agent):
        """Sets the notification_supported_by_agent of this Device.

        Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.

        :param notification_supported_by_agent: The notification_supported_by_agent of this Device.
        :type notification_supported_by_agent: bool
        """

        self._notification_supported_by_agent = notification_supported_by_agent

    @property
    def other_device_ids(self):
        """Gets the other_device_ids of this Device.

        Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).

        :return: The other_device_ids of this Device.
        :rtype: List[AgentOtherDeviceId]
        """
        return self._other_device_ids

    @other_device_ids.setter
    def other_device_ids(self, other_device_ids):
        """Sets the other_device_ids of this Device.

        Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).

        :param other_device_ids: The other_device_ids of this Device.
        :type other_device_ids: List[AgentOtherDeviceId]
        """

        self._other_device_ids = other_device_ids

    @property
    def room_hint(self):
        """Gets the room_hint of this Device.

        Suggested name for the room where this device is installed. Google attempts to use this value during user setup.

        :return: The room_hint of this Device.
        :rtype: str
        """
        return self._room_hint

    @room_hint.setter
    def room_hint(self, room_hint):
        """Sets the room_hint of this Device.

        Suggested name for the room where this device is installed. Google attempts to use this value during user setup.

        :param room_hint: The room_hint of this Device.
        :type room_hint: str
        """

        self._room_hint = room_hint

    @property
    def structure_hint(self):
        """Gets the structure_hint of this Device.

        Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.

        :return: The structure_hint of this Device.
        :rtype: str
        """
        return self._structure_hint

    @structure_hint.setter
    def structure_hint(self, structure_hint):
        """Sets the structure_hint of this Device.

        Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.

        :param structure_hint: The structure_hint of this Device.
        :type structure_hint: str
        """

        self._structure_hint = structure_hint

    @property
    def traits(self):
        """Gets the traits of this Device.

        Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).

        :return: The traits of this Device.
        :rtype: List[str]
        """
        return self._traits

    @traits.setter
    def traits(self, traits):
        """Sets the traits of this Device.

        Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).

        :param traits: The traits of this Device.
        :type traits: List[str]
        """

        self._traits = traits

    @property
    def type(self):
        """Gets the type of this Device.

        Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).

        :return: The type of this Device.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.

        Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).

        :param type: The type of this Device.
        :type type: str
        """

        self._type = type

    @property
    def will_report_state(self):
        """Gets the will_report_state of this Device.

        Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.

        :return: The will_report_state of this Device.
        :rtype: bool
        """
        return self._will_report_state

    @will_report_state.setter
    def will_report_state(self, will_report_state):
        """Sets the will_report_state of this Device.

        Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.

        :param will_report_state: The will_report_state of this Device.
        :type will_report_state: bool
        """

        self._will_report_state = will_report_state
