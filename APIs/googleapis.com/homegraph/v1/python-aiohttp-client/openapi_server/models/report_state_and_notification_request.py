# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.state_and_notification_payload import StateAndNotificationPayload
from openapi_server import util


class ReportStateAndNotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_user_id: str=None, event_id: str=None, follow_up_token: str=None, payload: StateAndNotificationPayload=None, request_id: str=None):
        """ReportStateAndNotificationRequest - a model defined in OpenAPI

        :param agent_user_id: The agent_user_id of this ReportStateAndNotificationRequest.
        :param event_id: The event_id of this ReportStateAndNotificationRequest.
        :param follow_up_token: The follow_up_token of this ReportStateAndNotificationRequest.
        :param payload: The payload of this ReportStateAndNotificationRequest.
        :param request_id: The request_id of this ReportStateAndNotificationRequest.
        """
        self.openapi_types = {
            'agent_user_id': str,
            'event_id': str,
            'follow_up_token': str,
            'payload': StateAndNotificationPayload,
            'request_id': str
        }

        self.attribute_map = {
            'agent_user_id': 'agentUserId',
            'event_id': 'eventId',
            'follow_up_token': 'followUpToken',
            'payload': 'payload',
            'request_id': 'requestId'
        }

        self._agent_user_id = agent_user_id
        self._event_id = event_id
        self._follow_up_token = follow_up_token
        self._payload = payload
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportStateAndNotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportStateAndNotificationRequest of this ReportStateAndNotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_user_id(self):
        """Gets the agent_user_id of this ReportStateAndNotificationRequest.

        Required. Third-party user ID.

        :return: The agent_user_id of this ReportStateAndNotificationRequest.
        :rtype: str
        """
        return self._agent_user_id

    @agent_user_id.setter
    def agent_user_id(self, agent_user_id):
        """Sets the agent_user_id of this ReportStateAndNotificationRequest.

        Required. Third-party user ID.

        :param agent_user_id: The agent_user_id of this ReportStateAndNotificationRequest.
        :type agent_user_id: str
        """

        self._agent_user_id = agent_user_id

    @property
    def event_id(self):
        """Gets the event_id of this ReportStateAndNotificationRequest.

        Unique identifier per event (for example, a doorbell press).

        :return: The event_id of this ReportStateAndNotificationRequest.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this ReportStateAndNotificationRequest.

        Unique identifier per event (for example, a doorbell press).

        :param event_id: The event_id of this ReportStateAndNotificationRequest.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def follow_up_token(self):
        """Gets the follow_up_token of this ReportStateAndNotificationRequest.

        Deprecated.

        :return: The follow_up_token of this ReportStateAndNotificationRequest.
        :rtype: str
        """
        return self._follow_up_token

    @follow_up_token.setter
    def follow_up_token(self, follow_up_token):
        """Sets the follow_up_token of this ReportStateAndNotificationRequest.

        Deprecated.

        :param follow_up_token: The follow_up_token of this ReportStateAndNotificationRequest.
        :type follow_up_token: str
        """

        self._follow_up_token = follow_up_token

    @property
    def payload(self):
        """Gets the payload of this ReportStateAndNotificationRequest.


        :return: The payload of this ReportStateAndNotificationRequest.
        :rtype: StateAndNotificationPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ReportStateAndNotificationRequest.


        :param payload: The payload of this ReportStateAndNotificationRequest.
        :type payload: StateAndNotificationPayload
        """

        self._payload = payload

    @property
    def request_id(self):
        """Gets the request_id of this ReportStateAndNotificationRequest.

        Request ID used for debugging.

        :return: The request_id of this ReportStateAndNotificationRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ReportStateAndNotificationRequest.

        Request ID used for debugging.

        :param request_id: The request_id of this ReportStateAndNotificationRequest.
        :type request_id: str
        """

        self._request_id = request_id
