/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Product model module.
 * @module model/Product
 * @version v1
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * Product specification for Condor resources.
     * @alias module:model/Product
     */
    constructor() { 
        
        Product.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('engine')) {
                obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['engine'] && !(typeof data['engine'] === 'string' || data['engine'] instanceof String)) {
            throw new Error("Expected the field `engine` to be a primitive type in the JSON string but got " + data['engine']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The specific engine that the underlying database is running.
 * @member {module:model/Product.EngineEnum} engine
 */
Product.prototype['engine'] = undefined;

/**
 * Type of specific database product. It could be CloudSQL, AlloyDB etc..
 * @member {module:model/Product.TypeEnum} type
 */
Product.prototype['type'] = undefined;

/**
 * Version of the underlying database engine. Example values: For MySQL, it could be \"8.0\", \"5.7\" etc.. For Postgres, it could be \"14\", \"15\" etc..
 * @member {String} version
 */
Product.prototype['version'] = undefined;





/**
 * Allowed values for the <code>engine</code> property.
 * @enum {String}
 * @readonly
 */
Product['EngineEnum'] = {

    /**
     * value: "ENGINE_UNSPECIFIED"
     * @const
     */
    "ENGINE_UNSPECIFIED": "ENGINE_UNSPECIFIED",

    /**
     * value: "ENGINE_MYSQL"
     * @const
     */
    "ENGINE_MYSQL": "ENGINE_MYSQL",

    /**
     * value: "MYSQL"
     * @const
     */
    "MYSQL": "MYSQL",

    /**
     * value: "ENGINE_POSTGRES"
     * @const
     */
    "ENGINE_POSTGRES": "ENGINE_POSTGRES",

    /**
     * value: "POSTGRES"
     * @const
     */
    "POSTGRES": "POSTGRES",

    /**
     * value: "ENGINE_SQL_SERVER"
     * @const
     */
    "ENGINE_SQL_SERVER": "ENGINE_SQL_SERVER",

    /**
     * value: "SQL_SERVER"
     * @const
     */
    "SQL_SERVER": "SQL_SERVER",

    /**
     * value: "ENGINE_NATIVE"
     * @const
     */
    "ENGINE_NATIVE": "ENGINE_NATIVE",

    /**
     * value: "NATIVE"
     * @const
     */
    "NATIVE": "NATIVE",

    /**
     * value: "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT"
     * @const
     */
    "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT": "ENGINE_CLOUD_SPANNER_WITH_POSTGRES_DIALECT",

    /**
     * value: "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT"
     * @const
     */
    "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT": "ENGINE_CLOUD_SPANNER_WITH_GOOGLESQL_DIALECT",

    /**
     * value: "ENGINE_MEMORYSTORE_FOR_REDIS"
     * @const
     */
    "ENGINE_MEMORYSTORE_FOR_REDIS": "ENGINE_MEMORYSTORE_FOR_REDIS",

    /**
     * value: "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER"
     * @const
     */
    "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER": "ENGINE_MEMORYSTORE_FOR_REDIS_CLUSTER",

    /**
     * value: "ENGINE_OTHER"
     * @const
     */
    "ENGINE_OTHER": "ENGINE_OTHER"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Product['TypeEnum'] = {

    /**
     * value: "PRODUCT_TYPE_UNSPECIFIED"
     * @const
     */
    "PRODUCT_TYPE_UNSPECIFIED": "PRODUCT_TYPE_UNSPECIFIED",

    /**
     * value: "PRODUCT_TYPE_CLOUD_SQL"
     * @const
     */
    "PRODUCT_TYPE_CLOUD_SQL": "PRODUCT_TYPE_CLOUD_SQL",

    /**
     * value: "CLOUD_SQL"
     * @const
     */
    "CLOUD_SQL": "CLOUD_SQL",

    /**
     * value: "PRODUCT_TYPE_ALLOYDB"
     * @const
     */
    "PRODUCT_TYPE_ALLOYDB": "PRODUCT_TYPE_ALLOYDB",

    /**
     * value: "ALLOYDB"
     * @const
     */
    "ALLOYDB": "ALLOYDB",

    /**
     * value: "PRODUCT_TYPE_SPANNER"
     * @const
     */
    "PRODUCT_TYPE_SPANNER": "PRODUCT_TYPE_SPANNER",

    /**
     * value: "PRODUCT_TYPE_ON_PREM"
     * @const
     */
    "PRODUCT_TYPE_ON_PREM": "PRODUCT_TYPE_ON_PREM",

    /**
     * value: "ON_PREM"
     * @const
     */
    "ON_PREM": "ON_PREM",

    /**
     * value: "PRODUCT_TYPE_MEMORYSTORE"
     * @const
     */
    "PRODUCT_TYPE_MEMORYSTORE": "PRODUCT_TYPE_MEMORYSTORE",

    /**
     * value: "PRODUCT_TYPE_OTHER"
     * @const
     */
    "PRODUCT_TYPE_OTHER": "PRODUCT_TYPE_OTHER"
};



export default Product;

