/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedCertificateAuthority from './ManagedCertificateAuthority';

/**
 * The CertificateAuthority model module.
 * @module model/CertificateAuthority
 * @version v1
 */
class CertificateAuthority {
    /**
     * Constructs a new <code>CertificateAuthority</code>.
     * Redis cluster certificate authority
     * @alias module:model/CertificateAuthority
     */
    constructor() { 
        
        CertificateAuthority.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateAuthority</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateAuthority} obj Optional instance to populate.
     * @return {module:model/CertificateAuthority} The populated <code>CertificateAuthority</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateAuthority();

            if (data.hasOwnProperty('managedServerCa')) {
                obj['managedServerCa'] = ManagedCertificateAuthority.constructFromObject(data['managedServerCa']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateAuthority</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateAuthority</code>.
     */
    static validateJSON(data) {
        // validate the optional field `managedServerCa`
        if (data['managedServerCa']) { // data not null
          ManagedCertificateAuthority.validateJSON(data['managedServerCa']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {module:model/ManagedCertificateAuthority} managedServerCa
 */
CertificateAuthority.prototype['managedServerCa'] = undefined;

/**
 * Identifier. Unique name of the resource in this scope including project, location and cluster using the form: `projects/{project}/locations/{location}/clusters/{cluster}/certificateAuthority`
 * @member {String} name
 */
CertificateAuthority.prototype['name'] = undefined;






export default CertificateAuthority;

