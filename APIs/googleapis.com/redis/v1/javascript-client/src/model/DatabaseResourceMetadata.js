/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailabilityConfiguration from './AvailabilityConfiguration';
import BackupConfiguration from './BackupConfiguration';
import BackupRun from './BackupRun';
import CustomMetadataData from './CustomMetadataData';
import DatabaseResourceId from './DatabaseResourceId';
import Entitlement from './Entitlement';
import Product from './Product';

/**
 * The DatabaseResourceMetadata model module.
 * @module model/DatabaseResourceMetadata
 * @version v1
 */
class DatabaseResourceMetadata {
    /**
     * Constructs a new <code>DatabaseResourceMetadata</code>.
     * Common model for database resource instance metadata.
     * @alias module:model/DatabaseResourceMetadata
     */
    constructor() { 
        
        DatabaseResourceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseResourceMetadata} obj Optional instance to populate.
     * @return {module:model/DatabaseResourceMetadata} The populated <code>DatabaseResourceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseResourceMetadata();

            if (data.hasOwnProperty('availabilityConfiguration')) {
                obj['availabilityConfiguration'] = AvailabilityConfiguration.constructFromObject(data['availabilityConfiguration']);
            }
            if (data.hasOwnProperty('backupConfiguration')) {
                obj['backupConfiguration'] = BackupConfiguration.constructFromObject(data['backupConfiguration']);
            }
            if (data.hasOwnProperty('backupRun')) {
                obj['backupRun'] = BackupRun.constructFromObject(data['backupRun']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('currentState')) {
                obj['currentState'] = ApiClient.convertToType(data['currentState'], 'String');
            }
            if (data.hasOwnProperty('customMetadata')) {
                obj['customMetadata'] = CustomMetadataData.constructFromObject(data['customMetadata']);
            }
            if (data.hasOwnProperty('entitlements')) {
                obj['entitlements'] = ApiClient.convertToType(data['entitlements'], [Entitlement]);
            }
            if (data.hasOwnProperty('expectedState')) {
                obj['expectedState'] = ApiClient.convertToType(data['expectedState'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = DatabaseResourceId.constructFromObject(data['id']);
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('primaryResourceId')) {
                obj['primaryResourceId'] = DatabaseResourceId.constructFromObject(data['primaryResourceId']);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = Product.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('resourceContainer')) {
                obj['resourceContainer'] = ApiClient.convertToType(data['resourceContainer'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('updationTime')) {
                obj['updationTime'] = ApiClient.convertToType(data['updationTime'], 'String');
            }
            if (data.hasOwnProperty('userLabels')) {
                obj['userLabels'] = ApiClient.convertToType(data['userLabels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseResourceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseResourceMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `availabilityConfiguration`
        if (data['availabilityConfiguration']) { // data not null
          AvailabilityConfiguration.validateJSON(data['availabilityConfiguration']);
        }
        // validate the optional field `backupConfiguration`
        if (data['backupConfiguration']) { // data not null
          BackupConfiguration.validateJSON(data['backupConfiguration']);
        }
        // validate the optional field `backupRun`
        if (data['backupRun']) { // data not null
          BackupRun.validateJSON(data['backupRun']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['currentState'] && !(typeof data['currentState'] === 'string' || data['currentState'] instanceof String)) {
            throw new Error("Expected the field `currentState` to be a primitive type in the JSON string but got " + data['currentState']);
        }
        // validate the optional field `customMetadata`
        if (data['customMetadata']) { // data not null
          CustomMetadataData.validateJSON(data['customMetadata']);
        }
        if (data['entitlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entitlements'])) {
                throw new Error("Expected the field `entitlements` to be an array in the JSON data but got " + data['entitlements']);
            }
            // validate the optional field `entitlements` (array)
            for (const item of data['entitlements']) {
                Entitlement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['expectedState'] && !(typeof data['expectedState'] === 'string' || data['expectedState'] instanceof String)) {
            throw new Error("Expected the field `expectedState` to be a primitive type in the JSON string but got " + data['expectedState']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          DatabaseResourceId.validateJSON(data['id']);
        }
        // ensure the json data is a string
        if (data['instanceType'] && !(typeof data['instanceType'] === 'string' || data['instanceType'] instanceof String)) {
            throw new Error("Expected the field `instanceType` to be a primitive type in the JSON string but got " + data['instanceType']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // validate the optional field `primaryResourceId`
        if (data['primaryResourceId']) { // data not null
          DatabaseResourceId.validateJSON(data['primaryResourceId']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          Product.validateJSON(data['product']);
        }
        // ensure the json data is a string
        if (data['resourceContainer'] && !(typeof data['resourceContainer'] === 'string' || data['resourceContainer'] instanceof String)) {
            throw new Error("Expected the field `resourceContainer` to be a primitive type in the JSON string but got " + data['resourceContainer']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['updationTime'] && !(typeof data['updationTime'] === 'string' || data['updationTime'] instanceof String)) {
            throw new Error("Expected the field `updationTime` to be a primitive type in the JSON string but got " + data['updationTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/AvailabilityConfiguration} availabilityConfiguration
 */
DatabaseResourceMetadata.prototype['availabilityConfiguration'] = undefined;

/**
 * @member {module:model/BackupConfiguration} backupConfiguration
 */
DatabaseResourceMetadata.prototype['backupConfiguration'] = undefined;

/**
 * @member {module:model/BackupRun} backupRun
 */
DatabaseResourceMetadata.prototype['backupRun'] = undefined;

/**
 * The creation time of the resource, i.e. the time when resource is created and recorded in partner service.
 * @member {String} creationTime
 */
DatabaseResourceMetadata.prototype['creationTime'] = undefined;

/**
 * Current state of the instance.
 * @member {module:model/DatabaseResourceMetadata.CurrentStateEnum} currentState
 */
DatabaseResourceMetadata.prototype['currentState'] = undefined;

/**
 * @member {module:model/CustomMetadataData} customMetadata
 */
DatabaseResourceMetadata.prototype['customMetadata'] = undefined;

/**
 * Entitlements associated with the resource
 * @member {Array.<module:model/Entitlement>} entitlements
 */
DatabaseResourceMetadata.prototype['entitlements'] = undefined;

/**
 * The state that the instance is expected to be in. For example, an instance state can transition to UNHEALTHY due to wrong patch update, while the expected state will remain at the HEALTHY.
 * @member {module:model/DatabaseResourceMetadata.ExpectedStateEnum} expectedState
 */
DatabaseResourceMetadata.prototype['expectedState'] = undefined;

/**
 * @member {module:model/DatabaseResourceId} id
 */
DatabaseResourceMetadata.prototype['id'] = undefined;

/**
 * The type of the instance. Specified at creation time.
 * @member {module:model/DatabaseResourceMetadata.InstanceTypeEnum} instanceType
 */
DatabaseResourceMetadata.prototype['instanceType'] = undefined;

/**
 * The resource location. REQUIRED
 * @member {String} location
 */
DatabaseResourceMetadata.prototype['location'] = undefined;

/**
 * @member {module:model/DatabaseResourceId} primaryResourceId
 */
DatabaseResourceMetadata.prototype['primaryResourceId'] = undefined;

/**
 * @member {module:model/Product} product
 */
DatabaseResourceMetadata.prototype['product'] = undefined;

/**
 * Closest parent Cloud Resource Manager container of this resource. It must be resource name of a Cloud Resource Manager project with the format of \"/\", such as \"projects/123\". For GCP provided resources, number should be project number.
 * @member {String} resourceContainer
 */
DatabaseResourceMetadata.prototype['resourceContainer'] = undefined;

/**
 * Required. Different from DatabaseResourceId.unique_id, a resource name can be reused over time. That is, after a resource named \"ABC\" is deleted, the name \"ABC\" can be used to to create a new resource within the same source. Resource name to follow CAIS resource_name format as noted here go/condor-common-datamodel
 * @member {String} resourceName
 */
DatabaseResourceMetadata.prototype['resourceName'] = undefined;

/**
 * The time at which the resource was updated and recorded at partner service.
 * @member {String} updationTime
 */
DatabaseResourceMetadata.prototype['updationTime'] = undefined;

/**
 * User-provided labels, represented as a dictionary where each label is a single key value pair.
 * @member {Object.<String, String>} userLabels
 */
DatabaseResourceMetadata.prototype['userLabels'] = undefined;





/**
 * Allowed values for the <code>currentState</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseResourceMetadata['CurrentStateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "HEALTHY"
     * @const
     */
    "HEALTHY": "HEALTHY",

    /**
     * value: "UNHEALTHY"
     * @const
     */
    "UNHEALTHY": "UNHEALTHY",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "STATE_OTHER"
     * @const
     */
    "STATE_OTHER": "STATE_OTHER"
};


/**
 * Allowed values for the <code>expectedState</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseResourceMetadata['ExpectedStateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "HEALTHY"
     * @const
     */
    "HEALTHY": "HEALTHY",

    /**
     * value: "UNHEALTHY"
     * @const
     */
    "UNHEALTHY": "UNHEALTHY",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "STATE_OTHER"
     * @const
     */
    "STATE_OTHER": "STATE_OTHER"
};


/**
 * Allowed values for the <code>instanceType</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseResourceMetadata['InstanceTypeEnum'] = {

    /**
     * value: "INSTANCE_TYPE_UNSPECIFIED"
     * @const
     */
    "INSTANCE_TYPE_UNSPECIFIED": "INSTANCE_TYPE_UNSPECIFIED",

    /**
     * value: "SUB_RESOURCE_TYPE_UNSPECIFIED"
     * @const
     */
    "SUB_RESOURCE_TYPE_UNSPECIFIED": "SUB_RESOURCE_TYPE_UNSPECIFIED",

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY",

    /**
     * value: "SECONDARY"
     * @const
     */
    "SECONDARY": "SECONDARY",

    /**
     * value: "READ_REPLICA"
     * @const
     */
    "READ_REPLICA": "READ_REPLICA",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "SUB_RESOURCE_TYPE_PRIMARY"
     * @const
     */
    "SUB_RESOURCE_TYPE_PRIMARY": "SUB_RESOURCE_TYPE_PRIMARY",

    /**
     * value: "SUB_RESOURCE_TYPE_SECONDARY"
     * @const
     */
    "SUB_RESOURCE_TYPE_SECONDARY": "SUB_RESOURCE_TYPE_SECONDARY",

    /**
     * value: "SUB_RESOURCE_TYPE_READ_REPLICA"
     * @const
     */
    "SUB_RESOURCE_TYPE_READ_REPLICA": "SUB_RESOURCE_TYPE_READ_REPLICA",

    /**
     * value: "SUB_RESOURCE_TYPE_OTHER"
     * @const
     */
    "SUB_RESOURCE_TYPE_OTHER": "SUB_RESOURCE_TYPE_OTHER"
};



export default DatabaseResourceMetadata;

