# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, zone: str=None):
        """NodeInfo - a model defined in OpenAPI

        :param id: The id of this NodeInfo.
        :param zone: The zone of this NodeInfo.
        """
        self.openapi_types = {
            'id': str,
            'zone': str
        }

        self.attribute_map = {
            'id': 'id',
            'zone': 'zone'
        }

        self._id = id
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInfo of this NodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NodeInfo.

        Output only. Node identifying string. e.g. 'node-0', 'node-1'

        :return: The id of this NodeInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeInfo.

        Output only. Node identifying string. e.g. 'node-0', 'node-1'

        :param id: The id of this NodeInfo.
        :type id: str
        """

        self._id = id

    @property
    def zone(self):
        """Gets the zone of this NodeInfo.

        Output only. Location of the node.

        :return: The zone of this NodeInfo.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this NodeInfo.

        Output only. Location of the node.

        :param zone: The zone of this NodeInfo.
        :type zone: str
        """

        self._zone = zone
