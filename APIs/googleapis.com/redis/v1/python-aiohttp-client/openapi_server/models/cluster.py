# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discovery_endpoint import DiscoveryEndpoint
from openapi_server.models.psc_config import PscConfig
from openapi_server.models.psc_connection import PscConnection
from openapi_server.models.state_info import StateInfo
from openapi_server import util


class Cluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_mode: str=None, create_time: str=None, discovery_endpoints: List[DiscoveryEndpoint]=None, name: str=None, psc_configs: List[PscConfig]=None, psc_connections: List[PscConnection]=None, replica_count: int=None, shard_count: int=None, size_gb: int=None, state: str=None, state_info: StateInfo=None, transit_encryption_mode: str=None, uid: str=None):
        """Cluster - a model defined in OpenAPI

        :param authorization_mode: The authorization_mode of this Cluster.
        :param create_time: The create_time of this Cluster.
        :param discovery_endpoints: The discovery_endpoints of this Cluster.
        :param name: The name of this Cluster.
        :param psc_configs: The psc_configs of this Cluster.
        :param psc_connections: The psc_connections of this Cluster.
        :param replica_count: The replica_count of this Cluster.
        :param shard_count: The shard_count of this Cluster.
        :param size_gb: The size_gb of this Cluster.
        :param state: The state of this Cluster.
        :param state_info: The state_info of this Cluster.
        :param transit_encryption_mode: The transit_encryption_mode of this Cluster.
        :param uid: The uid of this Cluster.
        """
        self.openapi_types = {
            'authorization_mode': str,
            'create_time': str,
            'discovery_endpoints': List[DiscoveryEndpoint],
            'name': str,
            'psc_configs': List[PscConfig],
            'psc_connections': List[PscConnection],
            'replica_count': int,
            'shard_count': int,
            'size_gb': int,
            'state': str,
            'state_info': StateInfo,
            'transit_encryption_mode': str,
            'uid': str
        }

        self.attribute_map = {
            'authorization_mode': 'authorizationMode',
            'create_time': 'createTime',
            'discovery_endpoints': 'discoveryEndpoints',
            'name': 'name',
            'psc_configs': 'pscConfigs',
            'psc_connections': 'pscConnections',
            'replica_count': 'replicaCount',
            'shard_count': 'shardCount',
            'size_gb': 'sizeGb',
            'state': 'state',
            'state_info': 'stateInfo',
            'transit_encryption_mode': 'transitEncryptionMode',
            'uid': 'uid'
        }

        self._authorization_mode = authorization_mode
        self._create_time = create_time
        self._discovery_endpoints = discovery_endpoints
        self._name = name
        self._psc_configs = psc_configs
        self._psc_connections = psc_connections
        self._replica_count = replica_count
        self._shard_count = shard_count
        self._size_gb = size_gb
        self._state = state
        self._state_info = state_info
        self._transit_encryption_mode = transit_encryption_mode
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cluster of this Cluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_mode(self):
        """Gets the authorization_mode of this Cluster.

        Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.

        :return: The authorization_mode of this Cluster.
        :rtype: str
        """
        return self._authorization_mode

    @authorization_mode.setter
    def authorization_mode(self, authorization_mode):
        """Sets the authorization_mode of this Cluster.

        Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.

        :param authorization_mode: The authorization_mode of this Cluster.
        :type authorization_mode: str
        """
        allowed_values = ["AUTH_MODE_UNSPECIFIED", "AUTH_MODE_IAM_AUTH", "AUTH_MODE_DISABLED"]  # noqa: E501
        if authorization_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_mode` ({0}), must be one of {1}"
                .format(authorization_mode, allowed_values)
            )

        self._authorization_mode = authorization_mode

    @property
    def create_time(self):
        """Gets the create_time of this Cluster.

        Output only. The timestamp associated with the cluster creation request.

        :return: The create_time of this Cluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Cluster.

        Output only. The timestamp associated with the cluster creation request.

        :param create_time: The create_time of this Cluster.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def discovery_endpoints(self):
        """Gets the discovery_endpoints of this Cluster.

        Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.

        :return: The discovery_endpoints of this Cluster.
        :rtype: List[DiscoveryEndpoint]
        """
        return self._discovery_endpoints

    @discovery_endpoints.setter
    def discovery_endpoints(self, discovery_endpoints):
        """Sets the discovery_endpoints of this Cluster.

        Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.

        :param discovery_endpoints: The discovery_endpoints of this Cluster.
        :type discovery_endpoints: List[DiscoveryEndpoint]
        """

        self._discovery_endpoints = discovery_endpoints

    @property
    def name(self):
        """Gets the name of this Cluster.

        Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.

        Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`

        :param name: The name of this Cluster.
        :type name: str
        """

        self._name = name

    @property
    def psc_configs(self):
        """Gets the psc_configs of this Cluster.

        Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.

        :return: The psc_configs of this Cluster.
        :rtype: List[PscConfig]
        """
        return self._psc_configs

    @psc_configs.setter
    def psc_configs(self, psc_configs):
        """Sets the psc_configs of this Cluster.

        Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.

        :param psc_configs: The psc_configs of this Cluster.
        :type psc_configs: List[PscConfig]
        """

        self._psc_configs = psc_configs

    @property
    def psc_connections(self):
        """Gets the psc_connections of this Cluster.

        Output only. PSC connections for discovery of the cluster topology and accessing the cluster.

        :return: The psc_connections of this Cluster.
        :rtype: List[PscConnection]
        """
        return self._psc_connections

    @psc_connections.setter
    def psc_connections(self, psc_connections):
        """Sets the psc_connections of this Cluster.

        Output only. PSC connections for discovery of the cluster topology and accessing the cluster.

        :param psc_connections: The psc_connections of this Cluster.
        :type psc_connections: List[PscConnection]
        """

        self._psc_connections = psc_connections

    @property
    def replica_count(self):
        """Gets the replica_count of this Cluster.

        Optional. The number of replica nodes per shard.

        :return: The replica_count of this Cluster.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this Cluster.

        Optional. The number of replica nodes per shard.

        :param replica_count: The replica_count of this Cluster.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def shard_count(self):
        """Gets the shard_count of this Cluster.

        Required. Number of shards for the Redis cluster.

        :return: The shard_count of this Cluster.
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this Cluster.

        Required. Number of shards for the Redis cluster.

        :param shard_count: The shard_count of this Cluster.
        :type shard_count: int
        """

        self._shard_count = shard_count

    @property
    def size_gb(self):
        """Gets the size_gb of this Cluster.

        Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.

        :return: The size_gb of this Cluster.
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this Cluster.

        Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.

        :param size_gb: The size_gb of this Cluster.
        :type size_gb: int
        """

        self._size_gb = size_gb

    @property
    def state(self):
        """Gets the state of this Cluster.

        Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED

        :return: The state of this Cluster.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cluster.

        Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED

        :param state: The state of this Cluster.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "UPDATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_info(self):
        """Gets the state_info of this Cluster.


        :return: The state_info of this Cluster.
        :rtype: StateInfo
        """
        return self._state_info

    @state_info.setter
    def state_info(self, state_info):
        """Sets the state_info of this Cluster.


        :param state_info: The state_info of this Cluster.
        :type state_info: StateInfo
        """

        self._state_info = state_info

    @property
    def transit_encryption_mode(self):
        """Gets the transit_encryption_mode of this Cluster.

        Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.

        :return: The transit_encryption_mode of this Cluster.
        :rtype: str
        """
        return self._transit_encryption_mode

    @transit_encryption_mode.setter
    def transit_encryption_mode(self, transit_encryption_mode):
        """Sets the transit_encryption_mode of this Cluster.

        Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.

        :param transit_encryption_mode: The transit_encryption_mode of this Cluster.
        :type transit_encryption_mode: str
        """
        allowed_values = ["TRANSIT_ENCRYPTION_MODE_UNSPECIFIED", "TRANSIT_ENCRYPTION_MODE_DISABLED", "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"]  # noqa: E501
        if transit_encryption_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `transit_encryption_mode` ({0}), must be one of {1}"
                .format(transit_encryption_mode, allowed_values)
            )

        self._transit_encryption_mode = transit_encryption_mode

    @property
    def uid(self):
        """Gets the uid of this Cluster.

        Output only. System assigned, unique identifier for the cluster.

        :return: The uid of this Cluster.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Cluster.

        Output only. System assigned, unique identifier for the cluster.

        :param uid: The uid of this Cluster.
        :type uid: str
        """

        self._uid = uid
