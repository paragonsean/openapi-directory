# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entitlement_state: str=None, type: str=None):
        """Entitlement - a model defined in OpenAPI

        :param entitlement_state: The entitlement_state of this Entitlement.
        :param type: The type of this Entitlement.
        """
        self.openapi_types = {
            'entitlement_state': str,
            'type': str
        }

        self.attribute_map = {
            'entitlement_state': 'entitlementState',
            'type': 'type'
        }

        self._entitlement_state = entitlement_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entitlement_state(self):
        """Gets the entitlement_state of this Entitlement.

        The current state of user's accessibility to a feature/benefit.

        :return: The entitlement_state of this Entitlement.
        :rtype: str
        """
        return self._entitlement_state

    @entitlement_state.setter
    def entitlement_state(self, entitlement_state):
        """Sets the entitlement_state of this Entitlement.

        The current state of user's accessibility to a feature/benefit.

        :param entitlement_state: The entitlement_state of this Entitlement.
        :type entitlement_state: str
        """
        allowed_values = ["ENTITLEMENT_STATE_UNSPECIFIED", "ENTITLED", "REVOKED"]  # noqa: E501
        if entitlement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `entitlement_state` ({0}), must be one of {1}"
                .format(entitlement_state, allowed_values)
            )

        self._entitlement_state = entitlement_state

    @property
    def type(self):
        """Gets the type of this Entitlement.

        An enum that represents the type of this entitlement.

        :return: The type of this Entitlement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entitlement.

        An enum that represents the type of this entitlement.

        :param type: The type of this Entitlement.
        :type type: str
        """
        allowed_values = ["ENTITLEMENT_TYPE_UNSPECIFIED", "DUET_AI"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
