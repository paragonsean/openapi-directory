# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailabilityConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_type: str=None, external_replica_configured: bool=None, promotable_replica_configured: bool=None):
        """AvailabilityConfiguration - a model defined in OpenAPI

        :param availability_type: The availability_type of this AvailabilityConfiguration.
        :param external_replica_configured: The external_replica_configured of this AvailabilityConfiguration.
        :param promotable_replica_configured: The promotable_replica_configured of this AvailabilityConfiguration.
        """
        self.openapi_types = {
            'availability_type': str,
            'external_replica_configured': bool,
            'promotable_replica_configured': bool
        }

        self.attribute_map = {
            'availability_type': 'availabilityType',
            'external_replica_configured': 'externalReplicaConfigured',
            'promotable_replica_configured': 'promotableReplicaConfigured'
        }

        self._availability_type = availability_type
        self._external_replica_configured = external_replica_configured
        self._promotable_replica_configured = promotable_replica_configured

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailabilityConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailabilityConfiguration of this AvailabilityConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_type(self):
        """Gets the availability_type of this AvailabilityConfiguration.

        Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).

        :return: The availability_type of this AvailabilityConfiguration.
        :rtype: str
        """
        return self._availability_type

    @availability_type.setter
    def availability_type(self, availability_type):
        """Sets the availability_type of this AvailabilityConfiguration.

        Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).

        :param availability_type: The availability_type of this AvailabilityConfiguration.
        :type availability_type: str
        """
        allowed_values = ["AVAILABILITY_TYPE_UNSPECIFIED", "ZONAL", "REGIONAL", "MULTI_REGIONAL", "AVAILABILITY_TYPE_OTHER"]  # noqa: E501
        if availability_type not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_type` ({0}), must be one of {1}"
                .format(availability_type, allowed_values)
            )

        self._availability_type = availability_type

    @property
    def external_replica_configured(self):
        """Gets the external_replica_configured of this AvailabilityConfiguration.


        :return: The external_replica_configured of this AvailabilityConfiguration.
        :rtype: bool
        """
        return self._external_replica_configured

    @external_replica_configured.setter
    def external_replica_configured(self, external_replica_configured):
        """Sets the external_replica_configured of this AvailabilityConfiguration.


        :param external_replica_configured: The external_replica_configured of this AvailabilityConfiguration.
        :type external_replica_configured: bool
        """

        self._external_replica_configured = external_replica_configured

    @property
    def promotable_replica_configured(self):
        """Gets the promotable_replica_configured of this AvailabilityConfiguration.


        :return: The promotable_replica_configured of this AvailabilityConfiguration.
        :rtype: bool
        """
        return self._promotable_replica_configured

    @promotable_replica_configured.setter
    def promotable_replica_configured(self, promotable_replica_configured):
        """Sets the promotable_replica_configured of this AvailabilityConfiguration.


        :param promotable_replica_configured: The promotable_replica_configured of this AvailabilityConfiguration.
        :type promotable_replica_configured: bool
        """

        self._promotable_replica_configured = promotable_replica_configured
