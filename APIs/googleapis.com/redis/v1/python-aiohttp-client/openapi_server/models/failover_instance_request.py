# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_protection_mode: str=None):
        """FailoverInstanceRequest - a model defined in OpenAPI

        :param data_protection_mode: The data_protection_mode of this FailoverInstanceRequest.
        """
        self.openapi_types = {
            'data_protection_mode': str
        }

        self.attribute_map = {
            'data_protection_mode': 'dataProtectionMode'
        }

        self._data_protection_mode = data_protection_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverInstanceRequest of this FailoverInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_protection_mode(self):
        """Gets the data_protection_mode of this FailoverInstanceRequest.

        Optional. Available data protection modes that the user can choose. If it's unspecified, data protection mode will be LIMITED_DATA_LOSS by default.

        :return: The data_protection_mode of this FailoverInstanceRequest.
        :rtype: str
        """
        return self._data_protection_mode

    @data_protection_mode.setter
    def data_protection_mode(self, data_protection_mode):
        """Sets the data_protection_mode of this FailoverInstanceRequest.

        Optional. Available data protection modes that the user can choose. If it's unspecified, data protection mode will be LIMITED_DATA_LOSS by default.

        :param data_protection_mode: The data_protection_mode of this FailoverInstanceRequest.
        :type data_protection_mode: str
        """
        allowed_values = ["DATA_PROTECTION_MODE_UNSPECIFIED", "LIMITED_DATA_LOSS", "FORCE_DATA_LOSS"]  # noqa: E501
        if data_protection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `data_protection_mode` ({0}), must be one of {1}"
                .format(data_protection_mode, allowed_values)
            )

        self._data_protection_mode = data_protection_mode
