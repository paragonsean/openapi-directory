/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_authorization_mode_isSet = false;
    m_authorization_mode_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_discovery_endpoints_isSet = false;
    m_discovery_endpoints_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_psc_configs_isSet = false;
    m_psc_configs_isValid = false;

    m_psc_connections_isSet = false;
    m_psc_connections_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_info_isSet = false;
    m_state_info_isValid = false;

    m_transit_encryption_mode_isSet = false;
    m_transit_encryption_mode_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_authorization_mode_isValid = ::OpenAPI::fromJsonValue(m_authorization_mode, json[QString("authorizationMode")]);
    m_authorization_mode_isSet = !json[QString("authorizationMode")].isNull() && m_authorization_mode_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_discovery_endpoints_isValid = ::OpenAPI::fromJsonValue(m_discovery_endpoints, json[QString("discoveryEndpoints")]);
    m_discovery_endpoints_isSet = !json[QString("discoveryEndpoints")].isNull() && m_discovery_endpoints_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_psc_configs_isValid = ::OpenAPI::fromJsonValue(m_psc_configs, json[QString("pscConfigs")]);
    m_psc_configs_isSet = !json[QString("pscConfigs")].isNull() && m_psc_configs_isValid;

    m_psc_connections_isValid = ::OpenAPI::fromJsonValue(m_psc_connections, json[QString("pscConnections")]);
    m_psc_connections_isSet = !json[QString("pscConnections")].isNull() && m_psc_connections_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_info_isValid = ::OpenAPI::fromJsonValue(m_state_info, json[QString("stateInfo")]);
    m_state_info_isSet = !json[QString("stateInfo")].isNull() && m_state_info_isValid;

    m_transit_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_transit_encryption_mode, json[QString("transitEncryptionMode")]);
    m_transit_encryption_mode_isSet = !json[QString("transitEncryptionMode")].isNull() && m_transit_encryption_mode_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_mode_isSet) {
        obj.insert(QString("authorizationMode"), ::OpenAPI::toJsonValue(m_authorization_mode));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_discovery_endpoints.size() > 0) {
        obj.insert(QString("discoveryEndpoints"), ::OpenAPI::toJsonValue(m_discovery_endpoints));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_psc_configs.size() > 0) {
        obj.insert(QString("pscConfigs"), ::OpenAPI::toJsonValue(m_psc_configs));
    }
    if (m_psc_connections.size() > 0) {
        obj.insert(QString("pscConnections"), ::OpenAPI::toJsonValue(m_psc_connections));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_info.isSet()) {
        obj.insert(QString("stateInfo"), ::OpenAPI::toJsonValue(m_state_info));
    }
    if (m_transit_encryption_mode_isSet) {
        obj.insert(QString("transitEncryptionMode"), ::OpenAPI::toJsonValue(m_transit_encryption_mode));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAICluster::getAuthorizationMode() const {
    return m_authorization_mode;
}
void OAICluster::setAuthorizationMode(const QString &authorization_mode) {
    m_authorization_mode = authorization_mode;
    m_authorization_mode_isSet = true;
}

bool OAICluster::is_authorization_mode_Set() const{
    return m_authorization_mode_isSet;
}

bool OAICluster::is_authorization_mode_Valid() const{
    return m_authorization_mode_isValid;
}

QString OAICluster::getCreateTime() const {
    return m_create_time;
}
void OAICluster::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICluster::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICluster::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIDiscoveryEndpoint> OAICluster::getDiscoveryEndpoints() const {
    return m_discovery_endpoints;
}
void OAICluster::setDiscoveryEndpoints(const QList<OAIDiscoveryEndpoint> &discovery_endpoints) {
    m_discovery_endpoints = discovery_endpoints;
    m_discovery_endpoints_isSet = true;
}

bool OAICluster::is_discovery_endpoints_Set() const{
    return m_discovery_endpoints_isSet;
}

bool OAICluster::is_discovery_endpoints_Valid() const{
    return m_discovery_endpoints_isValid;
}

QString OAICluster::getName() const {
    return m_name;
}
void OAICluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAICluster::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPscConfig> OAICluster::getPscConfigs() const {
    return m_psc_configs;
}
void OAICluster::setPscConfigs(const QList<OAIPscConfig> &psc_configs) {
    m_psc_configs = psc_configs;
    m_psc_configs_isSet = true;
}

bool OAICluster::is_psc_configs_Set() const{
    return m_psc_configs_isSet;
}

bool OAICluster::is_psc_configs_Valid() const{
    return m_psc_configs_isValid;
}

QList<OAIPscConnection> OAICluster::getPscConnections() const {
    return m_psc_connections;
}
void OAICluster::setPscConnections(const QList<OAIPscConnection> &psc_connections) {
    m_psc_connections = psc_connections;
    m_psc_connections_isSet = true;
}

bool OAICluster::is_psc_connections_Set() const{
    return m_psc_connections_isSet;
}

bool OAICluster::is_psc_connections_Valid() const{
    return m_psc_connections_isValid;
}

qint32 OAICluster::getReplicaCount() const {
    return m_replica_count;
}
void OAICluster::setReplicaCount(const qint32 &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAICluster::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAICluster::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

qint32 OAICluster::getShardCount() const {
    return m_shard_count;
}
void OAICluster::setShardCount(const qint32 &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAICluster::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAICluster::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

qint32 OAICluster::getSizeGb() const {
    return m_size_gb;
}
void OAICluster::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAICluster::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAICluster::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

QString OAICluster::getState() const {
    return m_state;
}
void OAICluster::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICluster::is_state_Set() const{
    return m_state_isSet;
}

bool OAICluster::is_state_Valid() const{
    return m_state_isValid;
}

OAIStateInfo OAICluster::getStateInfo() const {
    return m_state_info;
}
void OAICluster::setStateInfo(const OAIStateInfo &state_info) {
    m_state_info = state_info;
    m_state_info_isSet = true;
}

bool OAICluster::is_state_info_Set() const{
    return m_state_info_isSet;
}

bool OAICluster::is_state_info_Valid() const{
    return m_state_info_isValid;
}

QString OAICluster::getTransitEncryptionMode() const {
    return m_transit_encryption_mode;
}
void OAICluster::setTransitEncryptionMode(const QString &transit_encryption_mode) {
    m_transit_encryption_mode = transit_encryption_mode;
    m_transit_encryption_mode_isSet = true;
}

bool OAICluster::is_transit_encryption_mode_Set() const{
    return m_transit_encryption_mode_isSet;
}

bool OAICluster::is_transit_encryption_mode_Valid() const{
    return m_transit_encryption_mode_isValid;
}

QString OAICluster::getUid() const {
    return m_uid;
}
void OAICluster::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICluster::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICluster::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_encryption_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
