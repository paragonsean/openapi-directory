/**
 * Google Cloud Memorystore for Redis API
 * Creates and manages Redis instances on the Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityConfiguration::OAIAvailabilityConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityConfiguration::OAIAvailabilityConfiguration() {
    this->initializeModel();
}

OAIAvailabilityConfiguration::~OAIAvailabilityConfiguration() {}

void OAIAvailabilityConfiguration::initializeModel() {

    m_availability_type_isSet = false;
    m_availability_type_isValid = false;

    m_external_replica_configured_isSet = false;
    m_external_replica_configured_isValid = false;

    m_promotable_replica_configured_isSet = false;
    m_promotable_replica_configured_isValid = false;
}

void OAIAvailabilityConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityConfiguration::fromJsonObject(QJsonObject json) {

    m_availability_type_isValid = ::OpenAPI::fromJsonValue(m_availability_type, json[QString("availabilityType")]);
    m_availability_type_isSet = !json[QString("availabilityType")].isNull() && m_availability_type_isValid;

    m_external_replica_configured_isValid = ::OpenAPI::fromJsonValue(m_external_replica_configured, json[QString("externalReplicaConfigured")]);
    m_external_replica_configured_isSet = !json[QString("externalReplicaConfigured")].isNull() && m_external_replica_configured_isValid;

    m_promotable_replica_configured_isValid = ::OpenAPI::fromJsonValue(m_promotable_replica_configured, json[QString("promotableReplicaConfigured")]);
    m_promotable_replica_configured_isSet = !json[QString("promotableReplicaConfigured")].isNull() && m_promotable_replica_configured_isValid;
}

QString OAIAvailabilityConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_type_isSet) {
        obj.insert(QString("availabilityType"), ::OpenAPI::toJsonValue(m_availability_type));
    }
    if (m_external_replica_configured_isSet) {
        obj.insert(QString("externalReplicaConfigured"), ::OpenAPI::toJsonValue(m_external_replica_configured));
    }
    if (m_promotable_replica_configured_isSet) {
        obj.insert(QString("promotableReplicaConfigured"), ::OpenAPI::toJsonValue(m_promotable_replica_configured));
    }
    return obj;
}

QString OAIAvailabilityConfiguration::getAvailabilityType() const {
    return m_availability_type;
}
void OAIAvailabilityConfiguration::setAvailabilityType(const QString &availability_type) {
    m_availability_type = availability_type;
    m_availability_type_isSet = true;
}

bool OAIAvailabilityConfiguration::is_availability_type_Set() const{
    return m_availability_type_isSet;
}

bool OAIAvailabilityConfiguration::is_availability_type_Valid() const{
    return m_availability_type_isValid;
}

bool OAIAvailabilityConfiguration::isExternalReplicaConfigured() const {
    return m_external_replica_configured;
}
void OAIAvailabilityConfiguration::setExternalReplicaConfigured(const bool &external_replica_configured) {
    m_external_replica_configured = external_replica_configured;
    m_external_replica_configured_isSet = true;
}

bool OAIAvailabilityConfiguration::is_external_replica_configured_Set() const{
    return m_external_replica_configured_isSet;
}

bool OAIAvailabilityConfiguration::is_external_replica_configured_Valid() const{
    return m_external_replica_configured_isValid;
}

bool OAIAvailabilityConfiguration::isPromotableReplicaConfigured() const {
    return m_promotable_replica_configured;
}
void OAIAvailabilityConfiguration::setPromotableReplicaConfigured(const bool &promotable_replica_configured) {
    m_promotable_replica_configured = promotable_replica_configured;
    m_promotable_replica_configured_isSet = true;
}

bool OAIAvailabilityConfiguration::is_promotable_replica_configured_Set() const{
    return m_promotable_replica_configured_isSet;
}

bool OAIAvailabilityConfiguration::is_promotable_replica_configured_Valid() const{
    return m_promotable_replica_configured_isValid;
}

bool OAIAvailabilityConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_replica_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotable_replica_configured_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
